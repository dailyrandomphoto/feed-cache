<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Java is Lord of the Rings</title>
      <author>Bruno Noriller</author>
      <pubDate>Sun, 28 Nov 2021 15:04:11 +0000</pubDate>
      <link>https://dev.to/noriller/java-is-lord-of-the-rings-44kh</link>
      <guid>https://dev.to/noriller/java-is-lord-of-the-rings-44kh</guid>
      <description>&lt;p&gt;You might have heard that "Java is Beatles" but I don't know enough music to make the right analogies... And besides...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maybe-music-isnt-even-the-right-analogy"&gt;
  &lt;/a&gt;
  Maybe music isn't even the right analogy
&lt;/h2&gt;

&lt;p&gt;When people say that "Java is Beatles", they want it to mean that new fads come and go, but good music will still be good music, to be appreciated "forever".&lt;/p&gt;

&lt;p&gt;But that's not what's programming is about. More than that, it's more like: people that don't like something and think they can do a better job at it.&lt;/p&gt;

&lt;p&gt;So... epic fantasy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#java-is-lord-of-the-rings"&gt;
  &lt;/a&gt;
  Java is Lord of the Rings
&lt;/h2&gt;

&lt;p&gt;Lord of the Rings (LOTR) is basically what shaped what we consider "epic fantasy", and Java is for many, just like that... whatever you think a programming language should have.&lt;/p&gt;

&lt;p&gt;Without a doubt, LOTR has and will always have its place. But here's the thing... as much as I like LOTR... long are the times it could be "the best".&lt;/p&gt;

&lt;p&gt;Both Java and LOTR serve their purpose and will hold a place somewhere far longer than fads that come and go. Not only that, they shaped what we understand about a programming language and epic fantasy.&lt;/p&gt;

&lt;p&gt;But it's not like epic fantasy and programming stopped there. It might seem like a "fad" now, but "the best" can be already there... in the making.&lt;/p&gt;

&lt;p&gt;Maybe even what is a "fad" now, could be a  foundation or inspiration for "the best" in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#try-putting-languages-names-to-those-book-series"&gt;
  &lt;/a&gt;
  Try putting languages names to those book series:
&lt;/h3&gt;

&lt;p&gt;I'll be putting what I think in the comments too!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Malazan Book of the Fallen - Steven Erikson&lt;/p&gt;

&lt;p&gt;This is a hard series to start, and some might say it's "too epic", but is still one of the best epic fantasy series out there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Song of Ice and Fire - George R.R. Martin&lt;/p&gt;

&lt;p&gt;How about this one? &lt;br&gt;
You've probably heard because of the series... it has certainly become a fad, but it is still a solid epic fantasy series.&lt;br&gt;
It's still incomplete and even then it's inspiring new books with the same thematic. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Kingkiller Chronicles - Patrick Rothfuss&lt;/p&gt;

&lt;p&gt;If you like epic fantasy, then you know this one. It "took the world by storm", but with years between books and the "final" one to one day be released... &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Wheel Of Time - Robert Jordan&lt;/p&gt;

&lt;p&gt;Many didn't even knew the name before the new series launched last week, others, are seething in rage on "why" those first never heard of WOT before...&lt;br&gt;
It's an epic as epic as it can be and the first book have even a "nostalgic" feeling of LOTR.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mistborn - Brandon Sanderson&lt;br&gt;
As epic as Mistborn can be, it started as the author's second published book.&lt;br&gt;
It has its flaws but you can feel all the potential and can't deny legions of fans.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Stormlight Archive - Brandon Sanderson&lt;br&gt;
What is to be his masterpiece, from book one you get sucked into an epic fantasy world.&lt;br&gt;
Hands down the best epic fantasy you will find out there... and more is yet to come!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OAbbN8qP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnyysl7sqjkqtdx3akab.png" alt="https://buymeacoffee.com/noriller" width="170" height="37"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@kalenemsley?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Kalen Emsley&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/epic-fantasy?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>discuss</category>
      <category>writing</category>
    </item>
    <item>
      <title>DigitalOcean Kubernetes Challenge - MongoDB On Kubernetes</title>
      <author>Somsubhra Das</author>
      <pubDate>Sun, 28 Nov 2021 14:53:13 +0000</pubDate>
      <link>https://dev.to/somsubhra1/digitalocean-kubernetes-challenge-mongodb-on-kubernetes-367k</link>
      <guid>https://dev.to/somsubhra1/digitalocean-kubernetes-challenge-mongodb-on-kubernetes-367k</guid>
      <description>&lt;p&gt;Kubernetes is an open-source container-orchestration system for automating computer application deployment, scaling, and management. It was originally designed by Google and is now maintained by the Cloud Native Computing Foundation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-digitalocean-kubernetes-doks"&gt;
  &lt;/a&gt;
  What is DigitalOcean Kubernetes (DOKS)?
&lt;/h2&gt;

&lt;p&gt;DigitalOcean Kubernetes (DOKS) is a managed Kubernetes service that helps us to deploy Kubernetes clusters hassle free without needing to handle the control panel and containerised infrastructure. Clusters are compatible with standard Kubernetes toolchains and integrate natively with DigitalOcean Load Balancers and block storage volumes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-use-kubernetes"&gt;
  &lt;/a&gt;
  Why should you use Kubernetes?
&lt;/h2&gt;

&lt;p&gt;Here are some of the benefits of using Kubernetes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Auto Scaling&lt;/li&gt;
&lt;li&gt;Self Healing&lt;/li&gt;
&lt;li&gt;Load Balancing&lt;/li&gt;
&lt;li&gt;Auto Rollbacks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To get started with DOKS first, there are a few prerequisites. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://cloud.digitalocean.com/graphql/public/test?challenge=/registrations/new"&gt;DigitalOcean Account&lt;/a&gt;: K8s&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.digitalocean.com/reference/doctl/"&gt;doctl CLI&lt;/a&gt;: This helps to quickly spin up a K8s cluster on DigitalOcean and adds all config files to our system automatically&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kubernetes.io/docs/tasks/tools/#kubectl"&gt;kubectl CLI&lt;/a&gt;: Helps to interact with our K8s cluster by running commands against it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-a-k8s-cluster"&gt;
  &lt;/a&gt;
  How to create a K8s cluster?
&lt;/h2&gt;

&lt;p&gt;On DigitalOcean, K8s cluster can be created in many ways, though DO dashboard, doctl CLI etc. Here we are going to use DigitalOcean dashboard to create the Cluster.&lt;/p&gt;

&lt;p&gt;Go to the Kubernetes Create Cluster Dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKcVxN-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z36tpyortjor9tju4oxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKcVxN-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z36tpyortjor9tju4oxq.png" alt="Kubernetes Create Cluster Dashboard" width="880" height="534"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAL1w-8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/safzkyn81n4dz8ie10zg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAL1w-8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/safzkyn81n4dz8ie10zg.png" alt="Kubernetes Create Cluster Dashboard" width="880" height="534"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUrhd6GW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ts1a7hjres7mdd4dwl0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUrhd6GW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ts1a7hjres7mdd4dwl0.png" alt="Kubernetes Create Cluster Dashboard" width="880" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the K8s version.&lt;/li&gt;
&lt;li&gt;Choose your nearest datacenter location&lt;/li&gt;
&lt;li&gt;Choose cluster capacity, number of nodes, machine type.&lt;/li&gt;
&lt;li&gt;Then click &lt;strong&gt;Create Cluster&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The cluster will be created within a few minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-to-k8s-cluster"&gt;
  &lt;/a&gt;
  Connecting to K8s Cluster
&lt;/h2&gt;

&lt;p&gt;After the successful creation of the cluster, you will be greeted with a panel like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4dAhSAfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vzwdfvte3a39btphdi6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4dAhSAfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vzwdfvte3a39btphdi6.png" alt="DO K8s panel" width="880" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to the bottom section, you will find a &lt;code&gt;doctl&lt;/code&gt; command to run which automatically saves your K8s configuration on your local machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;doctl kubernetes cluster kubeconfig save use_your_cluster_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you have successfully saved your Auth config to your K8s cluster to your local machine. Now let's get started with the MongoDB Deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-deploy-mongodb-on-doks"&gt;
  &lt;/a&gt;
  How to deploy MongoDB on DOKS?
&lt;/h2&gt;

&lt;p&gt;Now we are ready to use &lt;code&gt;kubectl&lt;/code&gt; CLI and run commands against our K8s cluster to deploy a MongoDB instance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;p&gt;Clone the following GitHub Repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/Somsubhra1/Digitalocean-Kubernetes-Challenge.git
&lt;span class="nb"&gt;cd &lt;/span&gt;Digitalocean-Kubernetes-Challenge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the following command to setup everything in one go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Skip to the connection part by clicking &lt;a href="#finalSection"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-mongodb-secrets"&gt;
  &lt;/a&gt;
  Creating MongoDB Secrets
&lt;/h3&gt;

&lt;p&gt;Secrets in Kubernetes are the objects used for supplying sensitive information to containers.&lt;/p&gt;

&lt;p&gt;To secure our MongoDB instance, we should always restrict access to the database with a password. Here we will use secrets to invoke our desired passwords to the containers.&lt;/p&gt;

&lt;p&gt;Create the following file and name it &lt;code&gt;mongodb-secrets.yaml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ZG9rOHNtb25nbwo=&lt;/span&gt; &lt;span class="c1"&gt;# dok8smongo&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;YWRtaW4K&lt;/span&gt; &lt;span class="c1"&gt;# admin&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Secret&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;creationTimestamp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-creds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;P.S: The above username and password are encoded in base64 format.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now run the following command to apply the changes to our K8s cluster.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; mongodb-secrets.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-mongodb-persistent-volume"&gt;
  &lt;/a&gt;
  Creating MongoDB Persistent Volume
&lt;/h3&gt;

&lt;p&gt;We require volumes in K8s to store the data so that data is not lost when our cluster goes down.&lt;/p&gt;

&lt;p&gt;In K8s, there are two objects which are required for creating volumes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Persistent Volume Claims (PVC): Kubernetes looks for a Persistent Volume from which space can be claimed and assigned for a PVC. PVC works only if the cluster has dynamic volume provisioning enabled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Persistent Volume (PV): A storage space which is provisioned by an administrator.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create the following file and name it &lt;code&gt;mongodb-pvc.yaml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-data&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;accessModes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ReadWriteOnce&lt;/span&gt; 
  &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1Gi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the following command to create the PV.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl create &lt;span class="nt"&gt;-f&lt;/span&gt; mongodb-pvc.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;P.S: If your cluster doesn't support PVC then follow the following steps.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;mongodb-pv.yaml&lt;/code&gt; file and insert the following into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PersistentVolume&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-data-pv&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;accessModes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span class="na"&gt;capacity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1Gi&lt;/span&gt;
  &lt;span class="na"&gt;hostPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/data/mongo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the following command against your K8s.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl create &lt;span class="nt"&gt;-f&lt;/span&gt; mongodb-pv.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deploying-mongodb-image"&gt;
  &lt;/a&gt;
  Deploying MongoDB image
&lt;/h3&gt;

&lt;p&gt;We are going to use the official &lt;a href="https://hub.docker.com/_/mongo"&gt;Mongo image&lt;/a&gt; from Docker hub.&lt;/p&gt;

&lt;p&gt;Insert the following into a file and name it &lt;code&gt;mongodb-deployment.yaml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
  &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
        &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--dbpath"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/data/db"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;livenessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--disableImplicitSessions&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--eval&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;db.adminCommand('ping')"&lt;/span&gt;
          &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
          &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
          &lt;span class="na"&gt;timeoutSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
          &lt;span class="na"&gt;successThreshold&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
          &lt;span class="na"&gt;failureThreshold&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;
        &lt;span class="na"&gt;readinessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--disableImplicitSessions&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--eval&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;db.adminCommand('ping')"&lt;/span&gt;
          &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
          &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
          &lt;span class="na"&gt;timeoutSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
          &lt;span class="na"&gt;successThreshold&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
          &lt;span class="na"&gt;failureThreshold&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MONGO_INITDB_ROOT_USERNAME&lt;/span&gt;
          &lt;span class="na"&gt;valueFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;secretKeyRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-creds&lt;/span&gt;
              &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;username&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MONGO_INITDB_ROOT_PASSWORD&lt;/span&gt;
          &lt;span class="na"&gt;valueFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;secretKeyRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-creds&lt;/span&gt;
              &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;password&lt;/span&gt;
        &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;mongo-data-dir"&lt;/span&gt;
          &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/data/db"&lt;/span&gt;
      &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;mongo-data-dir"&lt;/span&gt;
        &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;mongo-data"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the following command against your K8s.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl create &lt;span class="nt"&gt;-f&lt;/span&gt; mongodb-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-mongodb-from-shell"&gt;
  &lt;/a&gt;
  Running MongoDB from Shell
&lt;/h3&gt;

&lt;p&gt;Now that we have successfully deployed the MongoDB instance on our cluster let's access the database through shell and run commands against it.&lt;/p&gt;

&lt;p&gt;Save the file below as &lt;code&gt;mongodb-client.yaml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-client&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-client&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-client&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-client&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-client&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-client_INITDB_ROOT_USERNAME&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dummy'&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-client_INITDB_ROOT_PASSWORD&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dummy'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run the following command to deploy the client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl create &lt;span class="nt"&gt;-f&lt;/span&gt; mongodb-client.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's ssh into the client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl &lt;span class="nb"&gt;exec &lt;/span&gt;deployment.apps/mongo-client &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now inside the ssh, let's enter the MongoDB instance using the username and password created above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mongo &lt;span class="nt"&gt;--host&lt;/span&gt; mongo-nodeport-svc &lt;span class="nt"&gt;--port&lt;/span&gt; 27017 &lt;span class="nt"&gt;-u&lt;/span&gt; admin &lt;span class="nt"&gt;-p&lt;/span&gt; dok8smongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally execute the command in the database to verify that MongoDB has been successfully deployed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;show dbs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it returns a successful response, then we can be sure that the deployed instance is running successfully.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-to-mongodb-from-external-apps"&gt;
  &lt;/a&gt;
  Connecting to MongoDB from external Apps
&lt;/h3&gt;

&lt;p&gt;Now that our database instance is running and we can even run commands inside our database, let's move forward and see how we can connect our Backend App created using NodeJS, Python etc and utilise our Database.&lt;/p&gt;

&lt;p&gt;First we need to create svc for our K8s cluster. Save the following into a file and name it &lt;code&gt;mongodb-nodeport-svc.yaml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo-nodeport-svc&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;27017&lt;/span&gt;
    &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
    &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;27017&lt;/span&gt;
    &lt;span class="na"&gt;nodePort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32000&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NodePort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create the svc using the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl create &lt;span class="nt"&gt;-f&lt;/span&gt; mongodb-nodeport-svc.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;br&gt;
We have successfully created the service which is exposed to the globally on port &lt;code&gt;32000&lt;/code&gt;. Now we have the username, password, port of our Database. But hold on we still need the IP/host of our hosted K8s cluster node so that we can connect to it.&lt;/p&gt;

&lt;p&gt;So to find out the IP of our node run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;doctl compute droplet get &amp;lt;cluster-node-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be getting a &lt;code&gt;Public IP&lt;/code&gt; displayed after running the command. Use that IP to connect to your MongoDB on K8s Cluster from external apps.&lt;/p&gt;

&lt;p&gt;To connect your external app your DB URI should be like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongodb://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;Public_IP&amp;gt;:&amp;lt;port&amp;gt;/?authSource=admin&amp;amp;readPreference=primary&amp;amp;appname=MongoDB%20Compass&amp;amp;directConnection=true&amp;amp;ssl=false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations you have successfully setup MongoDB on K8s Cluster using DOKS.&lt;/p&gt;

&lt;p&gt;Credits: &lt;a href="https://devopscube.com/deploy-mongodb-kubernetes/"&gt;How To Deploy MongoDB on Kubernetes – Beginners Guide&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>mongodb</category>
      <category>database</category>
      <category>devops</category>
    </item>
    <item>
      <title>Animated Profile Card Using HTML CSS &amp; GSAP</title>
      <author>Nikhil Bobade </author>
      <pubDate>Sun, 28 Nov 2021 14:15:26 +0000</pubDate>
      <link>https://dev.to/nikhil27b/animated-profile-card-using-html-css-gsap-4p63</link>
      <guid>https://dev.to/nikhil27b/animated-profile-card-using-html-css-gsap-4p63</guid>
      <description>&lt;p&gt;Hello Guys,&lt;/p&gt;

&lt;p&gt;Thank you guys for my last post response. Today I Created an Animated profile card using HTML CSS &amp;amp; GSAP Animation. I use the simple card and use GSAP timeline() to animate the card using gsap.from() you can animate a card. I hope you like this also comments about your thoughts. also For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you 🙂!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/OJxLQpx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create Side Navigation bar with HTML and CSS</title>
      <author>Rohit Sharma</author>
      <pubDate>Sun, 28 Nov 2021 14:09:20 +0000</pubDate>
      <link>https://dev.to/devrohit0/create-side-navigation-bar-with-html-and-css-55hp</link>
      <guid>https://dev.to/devrohit0/create-side-navigation-bar-with-html-and-css-55hp</guid>
      <description>&lt;p&gt;Welcome back Guys!&lt;br&gt;
Today I'm going to show you how easily you can create a side navigation bar with using simple HTML and basic CSS. So let's get started with HTML part.&lt;/p&gt;

&lt;p&gt;Reference Video:&lt;br&gt;
 &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lI7BXmKk6cw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Sticky Side Navigation Bar&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Pricing&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact us&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptate, quibusdam est tempora sint repellendus impedit expedita obcaecati sapiente, eligendi nobis praesentium quidem aliquam earum explicabo dicta veniam sunt reprehenderit nemo hic et itaque nulla a? Unde, id. Officiis suscipit excepturi impedit provident cumque, sunt necessitatibus ad nobis nesciunt commodi, labore voluptates repellat? Aliquam, suscipit et recusandae, atque delectus unde ab veniam quam commodi aut eum dolore dicta adipisci fugit quas animi obcaecati harum voluptatem? Ad voluptatum, rerum adipisci dolorum culpa molestiae error vero. Nemo laudantium necessitatibus praesentium dignissimos sint similique pariatur rerum vitae officia vero earum facere, molestiae cumque? Quisquam.
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We added 4 random links in div tag class (nav-bar) and dummy text in another div tag class (content). And that's enough for HTML.&lt;br&gt;
And now it's time to jump into the most important part i.e. CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;      &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.nav-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lightgray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;overflow-y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.nav-bar&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.nav-bar&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.nav-bar&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lightgray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.nav-bar&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#173459&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.nav-bar&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.nav-bar&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Important Note:-&lt;br&gt;
• In class "nav-bar" we set width of the nav-bar 30% so it covers only 30% of screen.&lt;br&gt;
• We set overflow-Y to auto. So, if content amount increases then there will be a slide-bar.&lt;br&gt;
• Now for content we set margin-left: 30% because in that 30% part we want to display the navigation bar.&lt;br&gt;
• And set width: 70% so that remaining part is covered by the content. &lt;br&gt;
That's it. We just created a sticky side Navigation Bar using basic HTML and CSS.&lt;/p&gt;

&lt;p&gt;I Hope you loved ♥ it ☻&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>JavaScript Object Trap Simplified by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Sun, 28 Nov 2021 13:52:53 +0000</pubDate>
      <link>https://dev.to/silvenleaf/javascript-object-trap-simplified-by-silvenleaf-1269</link>
      <guid>https://dev.to/silvenleaf/javascript-object-trap-simplified-by-silvenleaf-1269</guid>
      <description>&lt;p&gt;Ahoy there! Let's meet the biggest Object Trap in JavaScript!!&lt;/p&gt;

&lt;p&gt;Did you know that you can not copy an object? I mean you can't use any of these following methods to purely copy an object in JavaScript.&lt;/p&gt;

&lt;p&gt;If you use these methods, you'll get really unexpected results. Like, if you change y, it'll also change x. (Same for arrays too)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These methods will NOT work&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Method 1&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;

&lt;span class="c1"&gt;// Method 2&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Method 3&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you know why it happens? And also how to solve it?&lt;/p&gt;

&lt;p&gt;If not, let's dive in depth why and how JavaScript does that.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#data-types-in-javascript"&gt;
  &lt;/a&gt;
  Data Types in JavaScript
&lt;/h3&gt;

&lt;p&gt;There are 2 types of data in JavaScript.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Primitive Data Types&lt;/strong&gt;: e.g. Number, String, Boolean, null, undefined&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Referencial Data Types&lt;/strong&gt;: e.g. Objects, Arrays&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#main-concept"&gt;
  &lt;/a&gt;
  Main Concept
&lt;/h3&gt;

&lt;p&gt;When we store a &lt;strong&gt;primitive value&lt;/strong&gt; in a variable, we are storing the value in that variable. But, when we are storing a &lt;strong&gt;referencial value&lt;/strong&gt; in a variable, we are storing its reference in that variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SOME_VALUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If x is a &lt;strong&gt;primitive data type&lt;/strong&gt; then, y will be a pure copy of x where x and y are not linked in any way. I mean, if you change the value of y, it will not affect the value of x&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 5;&lt;/span&gt;

&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 7&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if x is a &lt;strong&gt;referencial value&lt;/strong&gt;, then y and x will be two variables for the same value. So if you change y, it'll also change x. Because they are just two names for the same object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isFemale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// here x is the reference for this object&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;// now both x and y are referencing that same object, so you can say, two names for the same object&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { name: 'SilvenLEAF', age: 19, isFemale: false }&lt;/span&gt;


&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Manash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { name: 'Manash', age: 19, isFemale: false }&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//{ name: 'Manash', age: 19, isFemale: false }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same thing is applicable for Arrays as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1,2,3,4,5]&lt;/span&gt;

&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ['a',2,3,4,5]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ['a',2,3,4,5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#analogy"&gt;
  &lt;/a&gt;
  Analogy:
&lt;/h3&gt;

&lt;p&gt;Now let's understand this concept with simplest analogies.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#analogy-for-primitive-data-type"&gt;
  &lt;/a&gt;
  Analogy for Primitive Data Type:
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;water&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// In the x bucket we have 5 litre water.&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="c1"&gt;// Hey computer, in the y bucket, store the same kind of thing that we have on x&lt;/span&gt;

&lt;span class="c1"&gt;// The computer stores 5 litre water in the y bucket as well&lt;/span&gt;


&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apples&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Hey computer, I changed my mind, &lt;/span&gt;
&lt;span class="c1"&gt;// Keep 5 apples in the y bucket&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// What do I have in my y bucket now?&lt;/span&gt;
&lt;span class="c1"&gt;// 5 apples&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// What do I have in my x bucket?&lt;/span&gt;
&lt;span class="c1"&gt;// 5 litre water&lt;/span&gt;

&lt;span class="c1"&gt;// Why?&lt;/span&gt;
&lt;span class="c1"&gt;// We changed the content of y bucket &lt;/span&gt;
&lt;span class="c1"&gt;// but we did not change the content of x bucket &lt;/span&gt;

&lt;span class="c1"&gt;// NOTE: x bucket and y backet had seperate 5 litre water. &lt;/span&gt;
&lt;span class="c1"&gt;// Not the same water in both buckets.&lt;/span&gt;

&lt;span class="c1"&gt;// Because I told the computer to store the same type and same amount of thing that we had on x bucket&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another analogy if you are still confused&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Another analogy is:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chocolate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// x girl buys a chocolate&lt;/span&gt;

&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="c1"&gt;// y girl tells her dad, "Daddy daddy, what is she (x girl) buying? I wanna have the same"&lt;/span&gt;

&lt;span class="c1"&gt;// Now her dad gives her that type of chocolate. &lt;/span&gt;
&lt;span class="c1"&gt;// Now both x and y have same type of chocolate&lt;/span&gt;

&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ice cream&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// y girl changes her mind, "Yuck, I don't like this flavour, &lt;/span&gt;
&lt;span class="c1"&gt;// I don't want it anymore, give me ice cream instead"&lt;/span&gt;

&lt;span class="c1"&gt;// Her dad now buys her an 'ice cream'&lt;/span&gt;

&lt;span class="c1"&gt;// Now y girl has an ice cream. What does x girl have?&lt;/span&gt;
&lt;span class="c1"&gt;// A chocolate. Because y girl changed her mind. &lt;/span&gt;
&lt;span class="c1"&gt;// It doesn't change the fact that x girl bought a chocolate&lt;/span&gt;

&lt;span class="c1"&gt;// Hope you get my point&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;









&lt;h5&gt;
  &lt;a href="#analogy-for-referencial-data-type"&gt;
  &lt;/a&gt;
  Analogy for Referencial Data Type:
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// "The_book_on_the_3rd_drawer" is this book&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;The_book_on_the_3rd_drawer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A book of insanity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;the_weird_book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;The_book_on_the_3rd_drawer&lt;/span&gt; 
&lt;span class="c1"&gt;// the_weird_book is now referencing The_book_on_the_3rd_drawer&lt;/span&gt;

&lt;span class="c1"&gt;// Hey computer, name the book on my 3rd drawer as the_weird_book. &lt;/span&gt;
&lt;span class="c1"&gt;// So in future if I say, "Change the title of the_weird_book", &lt;/span&gt;
&lt;span class="c1"&gt;// you will change the title of that book (which is the book on my 3rd drawer).&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;my_favorite_book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;the_weird_book&lt;/span&gt;

&lt;span class="c1"&gt;// Hey, name the_weird_book as my_favorite_book.&lt;/span&gt;
&lt;span class="c1"&gt;// Hey, name the book on my 3rd drawer as my_favorite_book&lt;/span&gt;

&lt;span class="c1"&gt;// So now the book on my third drawer has two names, the_weird_book and my_favorite_book&lt;/span&gt;

&lt;span class="c1"&gt;// So if I say, where is the_weird_book?&lt;/span&gt;
&lt;span class="c1"&gt;// It is in your 3rd drawer my master&lt;/span&gt;

&lt;span class="c1"&gt;// Then where is my_favorite_book?&lt;/span&gt;
&lt;span class="c1"&gt;// It is in your 3rd drawer my master&lt;/span&gt;

&lt;span class="c1"&gt;// Why?&lt;/span&gt;
&lt;span class="c1"&gt;// Because they are the same book with 2 names&lt;/span&gt;

&lt;span class="nx"&gt;my_favorite_book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Manash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// make the author of my_favorite_book as 'Manash'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;my_favorite_book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { title: 'A book of insanity', author: 'Manash', rating: 9 }&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;the_weird_book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { title: 'A book of insanity', author: 'Manash', rating: 9 }&lt;/span&gt;

&lt;span class="c1"&gt;// Who is the author of my_favorite_book?&lt;/span&gt;
&lt;span class="c1"&gt;// Manash&lt;/span&gt;

&lt;span class="c1"&gt;// Who is the author of the_weird_book?&lt;/span&gt;
&lt;span class="c1"&gt;// Manash&lt;/span&gt;

&lt;span class="c1"&gt;// Why?&lt;/span&gt;
&lt;span class="c1"&gt;// Because you gave two names for the same book.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another analogy if you are still confused&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// here SilvenLEAF is this boy&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;SilvenLEAF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Manash Sarma&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;what_I_like_about_him&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;His projects&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;the_clumpsy_kid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SilvenLEAF&lt;/span&gt;
&lt;span class="c1"&gt;// Hey computer, let's call SilvenLEAF as the_clumpsy_kid&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;the_typescript_addict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;the_clumpsy_kid&lt;/span&gt;
&lt;span class="c1"&gt;// Hey computer, let's call that clumpsy kid as "the typescript addict"&lt;/span&gt;

&lt;span class="c1"&gt;// Hey computer, let's call SilvenLEAF as "the typescript addict"&lt;/span&gt;

&lt;span class="nx"&gt;the_typescript_addict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;what_I_like_about_him&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;His blogs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Hey computer, update this info, what I like about the typescript addict is his projects&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;the_typescript_addict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;the_clumpsy_kid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Both has this value {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Manash Sarma',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 19,&lt;/span&gt;
&lt;span class="c1"&gt;//   what_I_like_about_him: 'His blogs'&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Hey what is the thing I like about the clumpsy kid?&lt;/span&gt;
&lt;span class="c1"&gt;// His blogs&lt;/span&gt;

&lt;span class="c1"&gt;// Hey what is the thing I like about the typescript addict?&lt;/span&gt;
&lt;span class="c1"&gt;// His blogs&lt;/span&gt;

&lt;span class="c1"&gt;// Why?&lt;/span&gt;
&lt;span class="c1"&gt;// They are the same boy. &lt;/span&gt;
&lt;span class="c1"&gt;// You gave two names for the same boy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#deep-clone-vs-shallow-clone"&gt;
  &lt;/a&gt;
  Deep Clone vs Shallow Clone
&lt;/h3&gt;

&lt;p&gt;So what is a deep clone and a shallow clone? &lt;/p&gt;

&lt;p&gt;When we clone a variable from another variable, if both of them are independant and not linked in anyway, I mean if I change one then it does not change the other, this cloning is called &lt;strong&gt;Deep cloning&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// I cloned x to y&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//5&lt;/span&gt;

&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//7&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//5&lt;/span&gt;

&lt;span class="c1"&gt;// when I changed y it did not change x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, if I changed one and it changed the other, this cloning will be called &lt;strong&gt;Shallow cloning&lt;/strong&gt; because they are cloned from the outside but are same from the inside. They both are the same object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;// both x and y are same object&lt;/span&gt;

&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Manash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { name: 'Manash', age: 19 }&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { name: 'Manash', age: 19 }&lt;/span&gt;

&lt;span class="c1"&gt;// When I changed y, it changed x as well&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conquering-object-trap"&gt;
  &lt;/a&gt;
  Conquering Object Trap
&lt;/h3&gt;

&lt;p&gt;Well we saw that we can't deep clone the object with these following methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Method 1 (Shallow cloning)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Method 2 (Shallow cloning)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="cm"&gt;/*
  it will work if x has only primitive values,
  but if x has a referencial value inside it 
  (I mean, an object or an array inside x) 
  then it will not work for that referencial value. 
  We'll discuss about it in the advanced section below
*/&lt;/span&gt;

&lt;span class="c1"&gt;// Method 3 (Shallow cloning)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// This one is same as y = x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then how do we make a deep clone? (Deep clone means having same value but totally independant and not linked in any way, so that if we change one, the other one will not get changed)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#its-super-easy"&gt;
  &lt;/a&gt;
  It's super EASY!!
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why does it work? &lt;strong&gt;"JSON.stringify()"&lt;/strong&gt; turns x into a primitive value, and as we know, if it is a primitive value, it'll make a pure deep clone. Now we are converting the pure deep clone (the JSON string) into an object. And this object is purely independant and not linked to x in any way&lt;/p&gt;

&lt;p&gt;So now if you change y, it will not change x&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Manash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { name: 'Manash', age: 19 }&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//  { name: 'SilvenLEAF', age: 19 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yea, I know it's a bit clumsy method. But that's what I could find. Please share in the comments if you know another solution.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#advanced-section"&gt;
  &lt;/a&gt;
  Advanced Section
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#why-does-let-y-x-not-work"&gt;
  &lt;/a&gt;
  Why does "let y = {...x}" not work?
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objectA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dev.to&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;themeColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// here objectA has "name" and "age" two primitive values and "blogs" referencial value&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objectB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;objectA&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// both of their content is same as objectA&lt;/span&gt;

&lt;span class="nx"&gt;objectB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Manash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;objectB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hashnode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;/*
{
  name: 'Manash',
  age: 19,

  blogs: {
    source: 'Hashnode',
    themeColor: 'red',
  }
}
*/&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;/*
{
  name: 'SilvenLEAF',
  age: 19,

  blogs: {
    source: 'Hashnode',
    themeColor: 'red',
  }
}
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look, the primitive values of objectB are independant and not linked to those of objectA. But, for the referencial value of objectB is still linked to the referencial value of objectA.&lt;/p&gt;

&lt;p&gt;So when we changed &lt;strong&gt;"objectB.name"&lt;/strong&gt; it did not change &lt;strong&gt;"objectA.name"&lt;/strong&gt;. But when we changed &lt;strong&gt;"objectB.blogs"&lt;/strong&gt; it also changed &lt;strong&gt;"objectA.blogs"&lt;/strong&gt; because they both are the reference of the same object.&lt;/p&gt;

&lt;p&gt;Now still confused. Don't worry, let's see what the spread operator actually is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// "let y = {...x}" actually means this&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// deep clone (because name is primitive)&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// deep clone (because name is primitive)&lt;/span&gt;

  &lt;span class="na"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// shallow clone (because name is referencial)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or in other words,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// "let y = {...x}" actually means this&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="c1"&gt;// deep clone (because name is primitive)&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="c1"&gt;// deep clone (because name is primitive)&lt;/span&gt;

&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogs&lt;/span&gt; &lt;span class="c1"&gt;// shallow clone (because name is referencial)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that makes sense right?&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#why-does-let-y-objectassignx-not-work"&gt;
  &lt;/a&gt;
  Why does "let y = Object.assign(x)" not work?
&lt;/h4&gt;

&lt;p&gt;Same as &lt;strong&gt;"let y = {...x}"&lt;/strong&gt; explained above&lt;/p&gt;




&lt;p&gt;Congratulation if you made it this far. Hopefully I was able to clarify it. Let me know if you are still confused.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEXT blog is coming by December 5th&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-learning-devops-with-github-actions"&gt;
  &lt;/a&gt;
  1. Learning DevOps with Github Actions
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-more-on-devops"&gt;
  &lt;/a&gt;
  2. More on DevOps
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  3. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  4. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  5. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-sequelize-hooks"&gt;
  &lt;/a&gt;
  6. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Placeholder title</title>
      <author>Alistar</author>
      <pubDate>Sun, 28 Nov 2021 13:48:31 +0000</pubDate>
      <link>https://dev.to/alistar031/placeholder-title-47lc</link>
      <guid>https://dev.to/alistar031/placeholder-title-47lc</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;[Note:] # (Be sure to link to any open source projects that are using your workflow!)&lt;/p&gt;

&lt;p&gt;[Reminder]: # (Submissions are due on December 8th, 2021 (11:59 PM PT or 2 AM ET/6 AM UTC on December 9th).&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
    </item>
    <item>
      <title>What is Create React App? Part 2 (package.json,README &amp; node_modules)</title>
      <author>Jessica Wilkins</author>
      <pubDate>Sun, 28 Nov 2021 13:40:43 +0000</pubDate>
      <link>https://dev.to/codergirl1991/what-is-create-react-app-part-2-packagejsonreadme-nodemodules-1bh9</link>
      <guid>https://dev.to/codergirl1991/what-is-create-react-app-part-2-packagejsonreadme-nodemodules-1bh9</guid>
      <description>&lt;p&gt;In &lt;a href="https://dev.to/codergirl1991/what-is-create-react-app-part-1-installation-5c63"&gt;part 1&lt;/a&gt; of this series, we learned how to install React using &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In part 2, I will breakdown the following files and folders:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-packagejson-file"&gt;What is a package.json file?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-packagelockjson-file"&gt;What is a package-lock.json file?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-readmemd-file"&gt;What is a README.md file?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-are-nodemodules"&gt;What are node_modules?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-packagejson-file"&gt;
  &lt;/a&gt;
  What is a package.json file?
&lt;/h2&gt;

&lt;p&gt;This is a JSON(JavaScript Object Notation) file that includes key information concerning your project. This is a required file that is needed to run any React project. &lt;/p&gt;

&lt;p&gt;This file includes metadata such as &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;author&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; as well as starter scripts and dependencies used in the project. &lt;/p&gt;

&lt;p&gt;DO NOT DELETE THIS FILE.&lt;/p&gt;

&lt;p&gt;Open up your project in your favorite code editor, and you will see the &lt;code&gt;package.json&lt;/code&gt; file in the root directory. "The root directory, or root folder, is the top-level directory of a file system." - Source: &lt;a href="https://techterms.com/definition/root_directory"&gt;Tech Terms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IlD4SxeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2rhg7xxcbcn06z56nu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IlD4SxeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2rhg7xxcbcn06z56nu2.png" alt="package.json" width="484" height="602"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on that file and you should see this data in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "example-project",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      "&amp;gt;0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break down what all of this means.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-raw-name-endraw-raw-version-endraw-and-raw-private-endraw-fields"&gt;
  &lt;/a&gt;
  What are the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; fields?
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; field is for the name of your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"name": "example-project",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you need to change the name of your project, then you can update it in this field. You will also need to make sure to update it in the &lt;code&gt;package-lock.json&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;In the command line of your project folder, run &lt;code&gt;npm install&lt;/code&gt; which will update the name of your project in the &lt;code&gt;package-lock.json&lt;/code&gt; file.  &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;version&lt;/code&gt; field is the current version number for your software project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"version": "0.1.0",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you were to publish this package to the &lt;code&gt;npm&lt;/code&gt; registry, then this field is important. If you make major changes to the package, it is encouraged that you release a new version so other developers will understand what the new updates are. &lt;/p&gt;

&lt;p&gt;If you want to learn more about publishing, then please read through the &lt;a href="https://docs.npmjs.com/about-semantic-versioning"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;private&lt;/code&gt; field has the value of a boolean (true or false) that is automatically set to true. This means that &lt;code&gt;npm&lt;/code&gt; will not publish your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"private": true,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to publish your project on the &lt;code&gt;npm&lt;/code&gt; registry, then you will need to change that field to false. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-dependencies"&gt;
  &lt;/a&gt;
  What are dependencies?
&lt;/h3&gt;

&lt;p&gt;This is an object filled with all of the packages that are currently being used in your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"dependencies": {
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.0.1"
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since this is a React project, you need to have &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; to run your application.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;react-scripts&lt;/code&gt; allow you to run the project in your local server and will automatically restart the server every time you make changes to a file. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;web-vitals&lt;/code&gt; provides metrics concerning the user experience for your website. &lt;a href="https://create-react-app.dev/docs/measuring-performance/"&gt;Create React App&lt;/a&gt; comes with built in code to help you track the metrics of your site and see the user performance analytics. &lt;/p&gt;

&lt;p&gt;Create React App also comes with &lt;code&gt;jest&lt;/code&gt; and the &lt;code&gt;react-testing-library&lt;/code&gt;. This allows you to write tests to ensure that your application is running smoothly. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-scripts"&gt;
  &lt;/a&gt;
  What are the scripts?
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;package.json&lt;/code&gt; file comes with an object filled with four different scripts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;start&lt;/code&gt; script, allows you to run your application in the local server (&lt;code&gt;http://localhost:3000/&lt;/code&gt;). You would use the command &lt;code&gt;npm start&lt;/code&gt; in the command line of the project folder. &lt;/p&gt;

&lt;p&gt;Or you would use &lt;code&gt;yarn start&lt;/code&gt; if you installed React using Yarn. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;build&lt;/code&gt; script is used to create an optimized build folder when you are ready to deploy your project to production.&lt;/p&gt;

&lt;p&gt;You would run &lt;code&gt;npm build&lt;/code&gt; or &lt;code&gt;yarn build&lt;/code&gt; to create that build folder. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;test&lt;/code&gt; script allows you to start the test runner in the command line and perform any tests that you have written for your project. &lt;/p&gt;

&lt;p&gt;You would run &lt;code&gt;npm test&lt;/code&gt; or &lt;code&gt;yarn test&lt;/code&gt; to launch the test runner. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;eject&lt;/code&gt; script is for those developers that want to further customize their build and dependency configurations. This will remove the single build dependency where you are free to configure your React project to your liking.&lt;/p&gt;

&lt;p&gt;If you are just starting out, there is zero reason to use this option. &lt;/p&gt;

&lt;p&gt;Even React has this warning in their default README file.&lt;br&gt;
&lt;strong&gt;Note: this is a one-way operation. Once you &lt;code&gt;eject&lt;/code&gt;, you can’t go back!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are seasoned developer that is comfortable with this option, then you can run &lt;code&gt;npm eject&lt;/code&gt; or &lt;code&gt;yarn eject&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-eslintconfig"&gt;
  &lt;/a&gt;
  What is eslintConfig?
&lt;/h3&gt;

&lt;p&gt;ESLint is a linter that helps you find and fix syntax errors in your code and adheres to the ECMAScript/JavaScript standards. &lt;/p&gt;

&lt;p&gt;This is the config object that extends to the &lt;code&gt;react-app&lt;/code&gt; and &lt;code&gt;jest&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-the-browserslist"&gt;
  &lt;/a&gt;
  What is the browserslist?
&lt;/h3&gt;

&lt;p&gt;In this section, you can specify which browsers are supported by your React application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "browserslist": {
    "production": [
      "&amp;gt;0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In development, you want to specify that you want to use the latest versions of popular browsers. That will also ensure that you can use ES6 features in your code and it will be supported. &lt;/p&gt;

&lt;p&gt;In production, you can specify the following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &amp;gt;0.2% - supports browsers that have at least a .2% market share &lt;/li&gt;
&lt;li&gt;not dead - supports browsers with official support in the last 2 years. &lt;/li&gt;
&lt;li&gt;not op_mini all - does not support opera mini&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to learn more about the &lt;code&gt;browserslist&lt;/code&gt;, then please visit their &lt;a href="https://github.com/browserslist/browserslist"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That is a brief description for all of the current data in your starter &lt;code&gt;package.json&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;If you want to learn more about the &lt;code&gt;package.json&lt;/code&gt; file, then please read through the &lt;a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-packagelockjson-file"&gt;
  &lt;/a&gt;
  What is a package-lock.json file?
&lt;/h2&gt;

&lt;p&gt;This is a file that is automatically generated when you make changes to the &lt;code&gt;package.json&lt;/code&gt; file or &lt;code&gt;node_modules&lt;/code&gt; folder. &lt;/p&gt;

&lt;p&gt;If you installed React using Yarn, then this file is called &lt;code&gt;yarn.lock&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This file is located in the root directory of your project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dXfYpGs_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yn25gf7uktjcj9fy0dr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dXfYpGs_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yn25gf7uktjcj9fy0dr.png" alt="package-lock file" width="412" height="228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cc09R58i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpghidjglw0zbannswfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cc09R58i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpghidjglw0zbannswfc.png" alt="yarn lock file" width="404" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This file contain thousands of lines of code and it lists out the exact versions for all of the dependencies needed for your project. &lt;/p&gt;

&lt;p&gt;You should not be changing this file directly because that is being handled for you by NPM(Node Package Manager). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-readmemd-file"&gt;
  &lt;/a&gt;
  What is a README.md file?
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;README.md&lt;/code&gt; file is also located in the root directory for your project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IziACr1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekfjjbgirq4aa01itxzh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IziACr1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekfjjbgirq4aa01itxzh.png" alt="readme file" width="398" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a place for you to describe your project to other developers. Create React App comes with a default template for the &lt;code&gt;README.md&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;This information goes over the React starter scripts and other helpful information concerning Create React App.&lt;/p&gt;

&lt;p&gt;It is highly encouraged that you customize your &lt;code&gt;README.md&lt;/code&gt; file, so people will know what your project is all about. &lt;/p&gt;

&lt;p&gt;You can include the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;description of the project&lt;/li&gt;
&lt;li&gt;list of features&lt;/li&gt;
&lt;li&gt;list of technologies used&lt;/li&gt;
&lt;li&gt;types of testing used&lt;/li&gt;
&lt;li&gt;videos or screenshots for the project&lt;/li&gt;
&lt;li&gt;a link to the deployed site&lt;/li&gt;
&lt;li&gt;information on how to run the project locally.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This information is really helpful for other developers that are interested in contributing to your project if it is an &lt;a href="https://www.freecodecamp.org/news/what-is-open-source-software-explained-in-plain-english/"&gt;open source&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;It is also really helpful for potential employers to learn about your project. &lt;/p&gt;

&lt;p&gt;To learn more about how to create good README files, then please read through this &lt;a href="https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/"&gt;article&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.md&lt;/code&gt; tells the computer that it is a Markdown file. &lt;a href="https://www.markdownguide.org/"&gt;Markdown&lt;/a&gt; is a language you can use to format your documents. &lt;/p&gt;

&lt;p&gt;Here is a &lt;a href="https://www.markdownguide.org/cheat-sheet/"&gt;cheat sheet&lt;/a&gt; you can use to help you with the Markdown syntax. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-nodemodules"&gt;
  &lt;/a&gt;
  What are node_modules?
&lt;/h2&gt;

&lt;p&gt;This folder is located in the root directory of your project.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cidP1c_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9eaap6t6qsvx18z55sx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cidP1c_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9eaap6t6qsvx18z55sx.png" alt="node modules folder" width="490" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This contains hundreds of folders and files that represents the modules needed to run your project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFX516XO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9pmhgm44qby5xu0o2q0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFX516XO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9pmhgm44qby5xu0o2q0.png" alt="node modules files and folders" width="498" height="998"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is important to remember to never commit your &lt;code&gt;node_modules&lt;/code&gt; folder to GitHub. If this folder is included in production, then it can slow down your website.&lt;/p&gt;

&lt;p&gt;I remember making this mistake when I built my first website. Luckily, there was a nice developer on Twitter who reached out to me and let me know how to remove it. &lt;/p&gt;

&lt;p&gt;You don't have to worry about committing your &lt;code&gt;node_modules&lt;/code&gt; folder to GitHub, because Create React App has already taken care of that for you. We will learn more about why in part 3 of this series. &lt;/p&gt;

&lt;p&gt;That concludes part 2 of the What is Create React App series. &lt;/p&gt;

&lt;p&gt;In part 3, will will learn about the &lt;code&gt;.gitignore&lt;/code&gt; file and &lt;code&gt;public&lt;/code&gt; folder. &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 3 Best Stock Fundamentals APIs for 2022</title>
      <author>Antoine Vulcain</author>
      <pubDate>Sun, 28 Nov 2021 13:39:07 +0000</pubDate>
      <link>https://dev.to/free_stock_api/top-3-best-stock-fundamentals-apis-for-2022-5bmp</link>
      <guid>https://dev.to/free_stock_api/top-3-best-stock-fundamentals-apis-for-2022-5bmp</guid>
      <description>&lt;p&gt;Revenues, earnings, profit margins, and other fundamental statistics are used to estimate a company's underlying worth and future growth prospects. &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.sec.gov/"&gt;Securities and Exchange Commission&lt;/a&gt; offers fundamental data for over 5000 US stocks dating back to 1998. Earnings reports, income statements, and other data fields are among the approximately 900 available statements in their database published daily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Securities and Exchange Commission (SEC)&lt;/strong&gt; of the United States is a large independent federal body established in the aftermath of the 1929 Wall Street Crash. The SEC's major goal is to give the impression that markets are free of market manipulation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can manually look into their database and extract individual company financial statements.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Companies publish 10-K forms for annual statements and 10-Q forms for quarterly statements. Each statement has multiple sections. The ones that you want to look at are: the income statement, the balance sheet statement, and the cash flow statement.&lt;/p&gt;

&lt;p&gt;Those 3 sections are the crucial elements to understanding a company's financial health.&lt;/p&gt;

&lt;p&gt;Let's also look at some &lt;strong&gt;Fundamental Data APIs&lt;/strong&gt; that offer this data already extracted and standardized:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Financial Modeling Prep or FMP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FMP provides great capabilities and covers most of the functions needed for a full fundamental API for developers searching for an easy-to-understand and getable interface to integrate with apps. It pulls data from the SEC and provides standardized statements ready to be pulled from their API and analyzed.&lt;/p&gt;

&lt;p&gt;The user interface allows developers to go through each endpoint and choose how they should be used in conjunction with a connected guide plan. &lt;/p&gt;

&lt;p&gt;If we're being honest, FMP coverage on a free trial gives you access to many of its features that you won't get anywhere else.&lt;/p&gt;

&lt;p&gt;In terms of &lt;a href="https://site.financialmodelingprep.com/developer/docs/"&gt;Stock Fundamentals API&lt;/a&gt; they covers most of companies and quant developer needs.&lt;/p&gt;

&lt;p&gt;Here are some example of Data they covers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;30+ years companies' financial statements&lt;/li&gt;
&lt;li&gt;Insider transactions&lt;/li&gt;
&lt;li&gt;Key metrics and financial ratios for over 10,000 companies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also see their process fo parsing financial statements on their &lt;a href="https://site.financialmodelingprep.com/developer/docs/parsing-statements"&gt;parsing financial statements&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bloomberg Fundamental Statement API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Professionals who need to make rapid decisions rely on Bloomberg Professional for the most up-to-date stock information, relevant options, and tested stock factors to examine before investing. When working with owners and third-party goals, however, flexibility might be problematic.&lt;/p&gt;

&lt;p&gt;From commerce and application supervision to uncertainty and agreement, briefcase management, and analytics, these gadgets are typically loaded with a variety of data sources, raising the likelihood of variances that might obstruct precise calculations.&lt;/p&gt;

&lt;p&gt;You can find more about their &lt;a href="https://data.bloomberglp.com/professional/sites/10/189913_CDS_REF_Fundamentals_SFCT_DIG.pdf"&gt;dataset&lt;/a&gt; on their website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Morningstar Fundamental API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Morningstar has a large range of fundamental APIs. It makes financial statement data, financial ratios, and non public financial data accessible to developers.&lt;/p&gt;

&lt;p&gt;Morningstar, like every API, aims to give the current state of a company's assets as well as investment strategies that can provide long-term revenue flow. &lt;/p&gt;

&lt;p&gt;As a result, it is regarded as a basic investing tool that identifies essential financial ratios and allows developers to include pathways to identify company financial health for a long-term investment strategy.&lt;/p&gt;

&lt;p&gt;Their complete documentation is available at &lt;a href="https://www.morningstar.com/"&gt;Morningstar&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Maghic: a Swiss army knife for GitHub Actions Workflow</title>
      <author>Roberto B.</author>
      <pubDate>Sun, 28 Nov 2021 13:26:46 +0000</pubDate>
      <link>https://dev.to/robertobutti/maghic-a-swiss-army-knife-for-github-actions-workflow-14kn</link>
      <guid>https://dev.to/robertobutti/maghic-a-swiss-army-knife-for-github-actions-workflow-14kn</guid>
      <description>&lt;p&gt;Maghic is a Swiss army knife tool for GitHub Actions Workflow.&lt;/p&gt;

&lt;p&gt;This is created for the GitHub Actions Hackathon: &lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4"&gt;2021 GitHub Actions Hackathon on DEV&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;Maghic provides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a command line tool for managing, creating and autogenerate Yaml file Workflow for GitHub Actions;&lt;/li&gt;
&lt;li&gt;a set of classes and methods for managing Yaml file (specific for GitHub Actions Workflows).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can create your GitHub Actions workflow with some code like this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\Objects\YamlObject&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"My Test Name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setOnPushDefaultBranches&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setRunsOn&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"ubuntu-latest"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Hi-Folks"&gt;
        Hi-Folks
      &lt;/a&gt; / &lt;a href="https://github.com/Hi-Folks/maghic"&gt;
        maghic
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Maghic is a Swiss army knife for GitHub Actions Workflow
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
MaGHic&lt;/h1&gt;
&lt;p&gt;Maghic is a Swiss army knife tool for GitHub Actions Workflow.
It provides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a command line tool for managing, creating and autogenerate Yaml file Workflow for GitHub Actions;&lt;/li&gt;
&lt;li&gt;a set of classes and methods for managing Yaml file (specific for GitHub Actions Workflows).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is created for the GitHub Actions Hackathon: &lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4" rel="nofollow"&gt;2021 GitHub Actions Hackathon on DEV&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
References&lt;/h2&gt;
&lt;h3&gt;
Packages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://laravel-zero.com/" rel="nofollow"&gt;Laravel Zero&lt;/a&gt;: micro framework for console application;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://symfony.com/doc/current/components/yaml.html" rel="nofollow"&gt;Symfony Yaml&lt;/a&gt;: a package for parsing Yaml structures.&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Hi-Folks/maghic"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;This project uses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://laravel-zero.com/"&gt;Laravel Zero&lt;/a&gt;: micro framework for console application; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://symfony.com/doc/current/components/yaml.html"&gt;Symfony Yaml&lt;/a&gt;: a package for parsing Yaml structures.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
      <category>actionshackathon</category>
      <category>github</category>
      <category>opensource</category>
    </item>
    <item>
      <title>GitLab Project Guide Step By Step!</title>
      <author>Suchitra</author>
      <pubDate>Sun, 28 Nov 2021 13:14:11 +0000</pubDate>
      <link>https://dev.to/suchitra_13/gitlab-project-guide-step-by-step-2gpi</link>
      <guid>https://dev.to/suchitra_13/gitlab-project-guide-step-by-step-2gpi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#you-will-need"&gt;
  &lt;/a&gt;
  You will need
&lt;/h2&gt;

&lt;p&gt;Basic understanding of Git and git commands. There are a lot of resources about Git on the internet. &lt;a href="https://git-scm.com/book/en/v2"&gt;This book&lt;/a&gt; is a good place to start.&lt;br&gt;
Git installed on your local system. If you don’t have Git on your device yet, you can download it &lt;a href="https://git-scm.com/downloads"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-by-step-instructions"&gt;
  &lt;/a&gt;
  Step By Step Instructions
&lt;/h2&gt;

&lt;p&gt;Making your first project on GitLab&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href="https://gitlab.com/"&gt;GitLab website&lt;/a&gt; and log in. If you don’t have an account yet, sign up with your credentials. Alternatively, you can sign in with Google, LinkedIn, and other third-party sites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3pnTSXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mou87887gao4b9xu7qea.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3pnTSXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mou87887gao4b9xu7qea.jpg" alt="img1" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y3puOLeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rwkqf9hu3nnhup5g9bi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y3puOLeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rwkqf9hu3nnhup5g9bi.png" alt="Img2" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-create-a-project"&gt;
  &lt;/a&gt;
  Step 2: Create a Project
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMGEFA4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t9agajuhnob0b9dgy4p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMGEFA4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t9agajuhnob0b9dgy4p.jpg" alt="Img3" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TF28wUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zs3tl1yn5ufxxb599a06.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TF28wUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zs3tl1yn5ufxxb599a06.jpg" alt="Img4" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Press “Create a project”, then “Create blank project”. Put in your project’s name (we use “Test”) and a slug (“test”). The slug will show up in the URL of your project on GitLab. Optionally, fill in a project description.&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; By default, the visibility of your project is private. You can change it to “public” if your project is public-facing and the code doesn’t contain any sensitive data. We changed visibility from “Private” to “Public” in this example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UMzZdcdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t8k4zv3m3cd9jqtpzi1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UMzZdcdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t8k4zv3m3cd9jqtpzi1.png" alt="Img5" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After completing these steps, your repository will open.Here you can see the “Test” repository is empty and has only a couple of default files: a README with basic user documentation and a GitLab yml file for continuous integration. Learn more about the yml file here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ccdwExX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6p1j9b2ad4me63eg7nvp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ccdwExX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6p1j9b2ad4me63eg7nvp.png" alt="Img6" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-open-git-bash-and-configure-git"&gt;
  &lt;/a&gt;
  Step 3: Open git bash and configure git
&lt;/h2&gt;

&lt;p&gt;Use the following commands for git configuration in your terminal or in Git Bash.&lt;br&gt;
&lt;code&gt;git config --global user. name  &amp;lt;give username&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git config --global user.email &amp;lt;your email&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If you are not a new user and already have this configured you can skip this step.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RMM5Ga5c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atbb9ybh7gavhb14v6dx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RMM5Ga5c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atbb9ybh7gavhb14v6dx.png" alt="Img7" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-make-a-project-folderdirectory-and-initialize-git"&gt;
  &lt;/a&gt;
  Step 4: Make a project folder/directory and initialize git
&lt;/h2&gt;

&lt;p&gt;Make a directory/folder using the following command: &lt;code&gt;mkdir &amp;lt;your foldername&amp;gt;&lt;/code&gt;&lt;br&gt;
Open your newly created directory/folder with &lt;code&gt;cd  &amp;lt;folder name&amp;gt;&lt;/code&gt;&lt;br&gt;
Confirm the directory location with &lt;code&gt;pwd&lt;/code&gt; or &lt;code&gt;ls&lt;/code&gt;&lt;br&gt;
Then initialize your git repository using  &lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F6Uf4KcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gozj0e36k0fc95v6nxx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F6Uf4KcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gozj0e36k0fc95v6nxx.png" alt="Img8" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-make-an-example-text-file-using-the-touch-command"&gt;
  &lt;/a&gt;
  Step 5: Make an example text file using the touch command
&lt;/h2&gt;

&lt;p&gt;Here you can change your file according to your requirement.&lt;br&gt;
Open your file on notepad using: &lt;code&gt;notepad &amp;lt;file name&amp;gt;&lt;/code&gt;&lt;br&gt;
As you type the &lt;code&gt;notepad &amp;lt;file name&amp;gt;&lt;/code&gt; command, the notepad will open as shown below. Then you can update your notepad text file according to your requirements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8mCYbm-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzsqbyi6mgx4je2nfo25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8mCYbm-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzsqbyi6mgx4je2nfo25.png" alt="Img9" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-check-the-status-add-the-file-to-staging-and-commit-the-changes"&gt;
  &lt;/a&gt;
  Step 6: Check the status, add the file to staging and commit the changes.
&lt;/h2&gt;

&lt;p&gt;Check the current status of your git repository: &lt;code&gt;git status&lt;/code&gt; &lt;br&gt;
Then, add all changes in the current directory to the staging area: &lt;code&gt;git add .&lt;/code&gt;&lt;br&gt;
Commit the change: &lt;code&gt;git commit -m &amp;lt;commit message&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QoMVPmn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4jxabgbb38ouqjkak91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QoMVPmn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4jxabgbb38ouqjkak91.png" alt="Img10" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-push-your-local-changes-to-the-remote-repository-in-gitlab"&gt;
  &lt;/a&gt;
  Step 7: Push your local changes to the remote repository in GitLab
&lt;/h2&gt;

&lt;p&gt;Now use the remote command, followed by the push command, to push the file to the remote repository.&lt;br&gt;
Input and run the following subsequent commands in your terminal:&lt;br&gt;
&lt;code&gt;git remote add origin &amp;lt;remote url&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gfxgtPjU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi7i1ppe5lyra70j1zzm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gfxgtPjU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi7i1ppe5lyra70j1zzm.png" alt="Img11" width="765" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now push the local repository to remote GitLab server by using &lt;code&gt;git push -u origin master/main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you write the push command, this window will pop up for authentication. Put in your GitLab credentials and continue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FE6vuwl6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn5bs2t1ngvk3m5kcsfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FE6vuwl6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn5bs2t1ngvk3m5kcsfj.png" alt="Img12" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result:
&lt;/h2&gt;

&lt;p&gt;All of your local changes will be checked into version control and reflected on your remote GitLab repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BNtgtkG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ipr7x60ear8ceobgdub.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BNtgtkG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ipr7x60ear8ceobgdub.jpg" alt="Img13" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Congratulations, you upload your very first project on GitLab using version control&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-you-reading-hope-this-guide-helps"&gt;
  &lt;/a&gt;
  Thanks you reading, hope this guide helps!
&lt;/h2&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>The CableReady Language Implementation Project</title>
      <author>leastbad</author>
      <pubDate>Sun, 28 Nov 2021 12:42:38 +0000</pubDate>
      <link>https://dev.to/leastbad/the-cableready-language-implementation-project-4hjd</link>
      <guid>https://dev.to/leastbad/the-cableready-language-implementation-project-4hjd</guid>
      <description>&lt;p&gt;We believe that CableReady can become the universal standard tool for developers to dynamically control client browsers from the server. While the project has roots in the Ruby on Rails community, the JS client is unopinionated about how the simple JSON structure that it consumes is created.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AXehYG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1313307709857394689/Q-AmGSk9_normal.jpg" alt="StimulusReflex profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        StimulusReflex
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @stimulusreflex
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Are you a CableReady fan who is also capable in Python, Go, C#, Java, PHP and/or NodeJS?&lt;br&gt;&lt;br&gt;We're looking for some folks who would be excited to help implement server-side CableReady libraries for languages beyond Ruby.&lt;br&gt;&lt;br&gt;If you can emit JSON and create packages, 🤙.&lt;br&gt;Also, please RT
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:02 PM - 27 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1464595363961180162" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1464595363961180162" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1464595363961180162" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;We would like to announce support for Python, Go, C#, Java, PHP and NodeJS server libraries in early 2022. While there's a broad set of features a server library could implement, there's a baseline that we'd like to make sure all implementations can offer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;CableReady was started in 2017 by Nate Hopkins. It predates LiveView and the HTML-on-the-wire trend by 18 months. It sees roughly 15,000 downloads per week and offers 36 different &lt;a href="https://cableready.stimulusreflex.com/v/v5/reference/operations"&gt;operations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CableReady is currently a client-side JS module and a server-side Ruby module.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-concepts"&gt;
  &lt;/a&gt;
  Key concepts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;available everywhere&lt;/li&gt;
&lt;li&gt;multiple operations per payload&lt;/li&gt;
&lt;li&gt;schemaless&lt;/li&gt;
&lt;li&gt;simple JSON wire format&lt;/li&gt;
&lt;li&gt;method chaining&lt;/li&gt;
&lt;li&gt;transport agnostic&lt;/li&gt;
&lt;li&gt;extensible via custom operations&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#available-everywhere"&gt;
  &lt;/a&gt;
  Available everywhere
&lt;/h3&gt;

&lt;p&gt;Rails developers can access a &lt;code&gt;cable_ready&lt;/code&gt; singleton from just about anywhere in their application, and we believe it's a big part of the secret sauce. While every language and framework has their own idioms, we encourage implementors to remove barriers and make it easy to call CableReady anywhere it could be useful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cableready.stimulusreflex.com/v/v5/cableready-everywhere"&gt;https://cableready.stimulusreflex.com/v/v5/cableready-everywhere&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#operations-and-their-options"&gt;
  &lt;/a&gt;
  Operations and their options
&lt;/h3&gt;

&lt;p&gt;Operations are the basic atomic unit of activity in CableReady. Each operation typically has a very specific focus and often mimics the DOM JS spec for the activity in question. Operations have options passed to them which specify their exact behavior.&lt;/p&gt;

&lt;p&gt;Multiple operations can be prepared together. They will be executed in the order that they were created. Different operation types can be mixed together in one payload.&lt;/p&gt;

&lt;p&gt;The Ruby implementation offers two interfaces; the (original) primary mechanism delivers the operations to a WebSocket channel in what we refer to as a "broadcast". The other - known as "cable car" - returns a JSON string that can be sent, persisted or displayed for any purpose.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schemaless"&gt;
  &lt;/a&gt;
  Schemaless
&lt;/h3&gt;

&lt;p&gt;CableReady operations each have their own mandatory and optional options, along with options that are provided to every operation by the library. However, arbitrary additional options can be passed to an operation and they will be forwarded to the client. This makes it easy for CableReady to form the basis of much larger projects, such as StimulusReflex.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#json-wire-format"&gt;
  &lt;/a&gt;
  JSON wire format
&lt;/h3&gt;

&lt;p&gt;As of v5.0, the CableReady JSON wire format is an array of objects, where each object represents one operation. It's intentionally very simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;"message&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Hello!&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;operation&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;consoleLog&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;}]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each operation has &lt;strong&gt;camelCased&lt;/strong&gt; key/value pairs that convey options. Every operation must have an &lt;code&gt;operation&lt;/code&gt; value, or the client will raise an exception.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-chaining"&gt;
  &lt;/a&gt;
  Method chaining
&lt;/h3&gt;

&lt;p&gt;Developer experience is a high priority. We take pride in the readability and expressiveness offered by our server API. The basic pseudocode structure we provide looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;cable_ready&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;broadcast&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In other words, the first method &lt;code&gt;cable_ready&lt;/code&gt; starts a method chain by returning &lt;code&gt;self&lt;/code&gt;, and then each operation is a method that also returns the chain started by the initial method. In this way, you can chain together as many operations as you like. Finally, we have a &lt;code&gt;broadcast&lt;/code&gt; method which takes the current chain and broadcasts it via WebSockets to the &lt;code&gt;:foo&lt;/code&gt; channel.&lt;/p&gt;

&lt;p&gt;We also have our "cable car" interface which emits JSON when &lt;code&gt;to_json&lt;/code&gt; is called. This makes it perfect for responding to Ajax fetch requests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;cable_car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;cable_car&lt;/code&gt; might be assembled in steps, perhaps via a control loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;inspiration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cable_car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;console_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="s2"&gt;"Hello there!"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;dispatch_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"fred"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;detail: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;inspiring: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;inspiration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;console_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="s2"&gt;"Still here: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;inspiration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main expectation that should hold between languages is that you will start the chain with a command, add one or many operation methods, and then execute the chain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transport-agnostic"&gt;
  &lt;/a&gt;
  Transport agnostic
&lt;/h3&gt;

&lt;p&gt;CableReady started its life as a WebSocket library, but the neutral JSON format has potential far beyond just WebSocket usage. We now frequently return CableReady JSON payloads via Ajax as well. There's nothing stopping you from embedding payloads into a DOM element attribute, for example.&lt;/p&gt;

&lt;p&gt;We believe that a minimally viable CableReady server library must be able to produce compatible JSON. There's no hard requirement that it interface with WebSockets, although we do find this to be a major sweet spot and will do our best to provide support.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-operations"&gt;
  &lt;/a&gt;
  Custom operations
&lt;/h3&gt;

&lt;p&gt;While CableReady ships with an impressive number of operations out of the box, users should be able to add their own operations. Admittedly, the method used to dynamically create all of the methods for each operation is the &lt;a href="https://github.com/stimulusreflex/cable_ready/blob/master/lib/cable_ready/operation_builder.rb"&gt;most sophisticated&lt;/a&gt; one in our framework, but again, we're here to help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cableready.stimulusreflex.com/v/v5/customization#custom-operations"&gt;https://cableready.stimulusreflex.com/v/v5/customization#custom-operations&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-involved"&gt;
  &lt;/a&gt;
  Get involved!
&lt;/h1&gt;

&lt;p&gt;We have a wonderful community with over 1600 folks on our Discord server, helping people get started. Come join &lt;a href="https://discord.gg/stimulus-reflex"&gt;https://discord.gg/stimulus-reflex&lt;/a&gt; and drop by the #cable_ready channel with any questions.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Equality Operators</title>
      <author>Tom Yotwongjai</author>
      <pubDate>Sun, 28 Nov 2021 12:41:26 +0000</pubDate>
      <link>https://dev.to/tomyotwongjai/equality-operators-33io</link>
      <guid>https://dev.to/tomyotwongjai/equality-operators-33io</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-equality-operators"&gt;
  &lt;/a&gt;
  What is equality operators?
&lt;/h2&gt;

&lt;p&gt;Equality operators comparing two values which will either return a Boolean value "true" or "false".&lt;/p&gt;

&lt;p&gt;Equality is use in decision making scenario. There's two type of equality &lt;code&gt;==&lt;/code&gt; "loose equality" &amp;amp; &lt;code&gt;===&lt;/code&gt; "strict equality". Why is this important? Because in a situation when I want to compare an object and primitive data, these two does the same thing, but the result are different.&lt;/p&gt;

&lt;p&gt;Loose equality will try convert value to match each other data type before compare the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(1 == "1");
console.log('hello' == 'hello');

// output: 
true 
true 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Strict equality does not do that, all it does is compare and considers operands of different type to be different, it's also faster since it skip one step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(1 === "1");
console.log('hello' === 'hello');

//output: 
false 
true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So Which to use? Unless there is a good reason to use &lt;code&gt;==&lt;/code&gt; It is widely consider best practice to use &lt;code&gt;===&lt;/code&gt;. So now I know what to use, I will stick to strict equality. Let see how strict equality compare primitive and object.&lt;/p&gt;

&lt;p&gt;When comparing object and primitive, in primitive- strict equality just comparing the actual value, whether it's a string, number, or Boolean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//primitive

var obj1 = 1
var obj2 = 1
console.log(obj1 === obj2);

//output: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While an object, it doesn't just look at the value in object but also in memory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//object comparison

obj1 = {number: 1}
obj2 = {number: 1}
console.log(obj1 === obj2);

//output: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only time an object is equal to another object is when they are both the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = {number: 1};
let b = a;

console.log( a === b);

//output: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inequality"&gt;
  &lt;/a&gt;
  Inequality
&lt;/h2&gt;

&lt;p&gt;Opposite of equality operators is Inequality operator &lt;code&gt;!==&lt;/code&gt;. Strict inequality operator check if two operands are not equal and return Boolean. Similar to strict equality strict inequality also consider operands of different type to be different. To not confuse myself since it is best practice to use strict equality, I will only use strict inequality when comparing if two operands are different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(1 !== "1");
console.log('hello' !== 'hello');
console.log(true !== 1);

//output: 
true
false
true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is my understanding on equality. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#array-methods-next"&gt;
  &lt;/a&gt;
  Array Methods Next!
&lt;/h3&gt;

&lt;p&gt;My other post:&lt;br&gt;
&lt;a href="https://dev.to/tomyotwongjai/control-flow-in-js-1ob6"&gt;Control Flow&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/tomyotwongjai/logical-operators-2ei2"&gt;Logical Operators&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-"&gt;
  &lt;/a&gt;
  Thanks for reading! :)
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
