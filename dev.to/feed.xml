<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Debugging CSS: Some Tips and Tricks</title>
      <author>Sheelah Brennan</author>
      <pubDate>Thu, 24 Dec 2020 04:27:37 +0000</pubDate>
      <link>https://dev.to/sheelah_b/debugging-css-some-tips-and-tricks-bek</link>
      <guid>https://dev.to/sheelah_b/debugging-css-some-tips-and-tricks-bek</guid>
      <description>&lt;p&gt;We've all been there. You're working on a new piece of functionality and have the markup done. Now it's time to work on the styles. No problem, right? You add the base styles and when the page reloads with the changes applied, suddenly the layout is broken. You sigh, knowing that it might be a long day as you're up against a tight deadline.&lt;/p&gt;

&lt;p&gt;CSS can be tricky at times. In this article I'll provide some strategies I've used for troubleshooting CSS when things are not working as expected. Hopefully one of these can help get you out of frustration mode and back into "getting things done" mode 🙂.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generic-layout-issues" class="anchor"&gt;
  &lt;/a&gt;
  Generic Layout Issues
&lt;/h2&gt;

&lt;p&gt;One of my most commonly used strategies when facing any kind of layout issue is to add an outline around a parent element's children. This lets me see whether the children are where I thought they would be and whether they have the expected dimensions. You can use a rule like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If the layout issue is more complex and you need to debug the layout of the entire page, you can add outlines for every element on the page using different colors. This is a lot of lines to look at, but it can be helpful. In your browser developer tools, open your console tab and type this JavaScript snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;;[].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1px solid #&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;))).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An alternative strategy for debugging the layout of the entire page is to place a background color on all elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css-grid-or-flexbox-issues" class="anchor"&gt;
  &lt;/a&gt;
  CSS Grid or Flexbox Issues
&lt;/h2&gt;

&lt;p&gt;In addition to using the generic layout issue strategies above, I like to take advantage of Firefox or Chrome's developer tools to help with these issues. For example, in Firefox's developer tools, you can use the layout tab to inspect a grid or flex parent. If you inspect a grid parent, you'll then see lines added, allowing you to visualize the grid. Doing this can help you also discover any bugs caused by adding an extra wrapper div or element between your parent and child elements which can break your grid or flex layout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fd3L_iXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/b1bc4de423403728186cc6e3959c0c5d/9fc2b/css-grid-inspection.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fd3L_iXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/b1bc4de423403728186cc6e3959c0c5d/9fc2b/css-grid-inspection.jpg" alt="CSS grid inspection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the &lt;code&gt;grid&lt;/code&gt; waffle icon on the left automatically selects it on the right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yIMlDtO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/fd66a03d26d9224879681bdb8a889f4a/7ab6d/css-grid-lines.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yIMlDtO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/fd66a03d26d9224879681bdb8a889f4a/7ab6d/css-grid-lines.jpg" alt="CSS grid lines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#page-overflow-issues" class="anchor"&gt;
  &lt;/a&gt;
  Page Overflow Issues
&lt;/h2&gt;

&lt;p&gt;For debugging an unexpected horizontal scrollbar, my favorite strategy is outlined in this &lt;a href="https://css-tricks.com/findingfixing-unintended-body-overflow/"&gt;CSS Tricks article&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-or-mobileonly-bugs" class="anchor"&gt;
  &lt;/a&gt;
  Browser or Mobile-Only Bugs
&lt;/h2&gt;

&lt;p&gt;Could what you're seeing be a browser-specific bug? It's worth testing the page out on other browsers and on a mobile device (especially on Safari mobile!) if you can. If you're only seeing the issue on one browser, then you can narrow down the source of the bug.&lt;/p&gt;

&lt;p&gt;For example, I've regularly ran into flexbox issues that are Safari-specific. I've discovered these by testing in other browsers and confirming that the issue only shows up in Safari. A good reference of Flexbox browser-specific bugs is &lt;a href="https://github.com/philipwalton/flexbugs"&gt;Philip Walton's flexbugs repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I've also ran into issues in the past with how &lt;a href="https://medium.com/@susiekim9/how-to-compensate-for-the-ios-viewport-unit-bug-46e78d54af0d"&gt;mobile Safari handles &lt;code&gt;vh&lt;/code&gt; units&lt;/a&gt;, confirmed by testing on Android and seeing that the issue wasn't appearing there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typos" class="anchor"&gt;
  &lt;/a&gt;
  Typos
&lt;/h2&gt;

&lt;p&gt;Could it just be a CSS typo? It happens to the best of us. Even the smallest typo can cause your CSS rule not to get applied. A useful strategy here is to use your browser developer tools to inspect the element of the page where you're seeing the bug. See what CSS is getting applied. If you see your rule there and it's crossed out, it's not getting applied.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zOb6hfKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/695e05d329f0906bdbbb4cf19c2b3f70/f58be/css-typo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zOb6hfKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/695e05d329f0906bdbbb4cf19c2b3f70/f58be/css-typo.jpg" alt="In Firefox Developer Tools, a caution symbol and crossed out text indicating that the color rule wasn't applied. This looks very similar in Chrome."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A preventative strategy here is to use a code editor that includes syntax highlighting for CSS, like VS Code. This won't catch every single possible typo, but it will call out things like invalid property names and it will make invalid property values easier to catch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n07nidMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/a5b8b0620366710862fb92d7cb2837e4/ee53f/css-rule-typo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n07nidMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/a5b8b0620366710862fb92d7cb2837e4/ee53f/css-rule-typo.jpg" alt="VS Code with an invalid property and invalid color value"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#markup-issues" class="anchor"&gt;
  &lt;/a&gt;
  Markup Issues
&lt;/h2&gt;

&lt;p&gt;Another source of bugs is typos in HTML markup. For example, you might have forgotten to apply your CSS class to the desired element. Therefore the CSS rules for that class are not going to get applied. As discussed above, you can use your browser developer tools to inspect the element's markup and then verify that the expected class is applied to the element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#animation-and-transition-issues" class="anchor"&gt;
  &lt;/a&gt;
  Animation and Transition Issues
&lt;/h2&gt;

&lt;p&gt;For issues with animations and transitions, my first strategy is always to greatly slow down the timing of the animation or transition. That way I can watch as it runs, and it makes it easier to see both the start, end, and intermediate states.&lt;/p&gt;

&lt;p&gt;For animations, I also like to verify that I've specified the animation shorthand properties for time values in the right order (the first one found is set to the animation duration and the second one found is set to the animation delay).&lt;/p&gt;

&lt;p&gt;If the animation rule is crossed out, you'll know that there's likely a typo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VgspoWr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/ced926a247ab95e3a81589cffe9d4cb4/93985/invalid-animation.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgspoWr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/ced926a247ab95e3a81589cffe9d4cb4/93985/invalid-animation.jpg" alt='An invalid animation fill mode value (forward instead of "forwards") causes the animation not to get applied'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another issue I've hit in the past is typos in animation keyframes which then cause the animation not to get applied. To verify the keyframes are set as expected, you can use your browser's developer tools. If you don't see the keyframes showing when inspecting the styles of the animated element like shown below, that's probably your issue:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k7GDThR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/9c3e90a1b1068db6f274fe9ef61c7adb/d5d13/keyframes.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k7GDThR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sheelahb.com/static/9c3e90a1b1068db6f274fe9ef61c7adb/d5d13/keyframes.jpg" alt="Animation keyframes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For animation debugging, I also like &lt;a href="https://css-tricks.com/debugging-css-keyframe-animations/"&gt;this CSS Tricks article by Sarah Drasner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope this helps someone stuck in that "oh no, what's wrong with my CSS??!" moment.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Featured image by &lt;a href="https://unsplash.com/@markuswinkler"&gt;Markus Winkler&lt;/a&gt; via Unsplash&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I got a Nintendo Switch using NodeJS</title>
      <author>Regis Gaughan, III</author>
      <pubDate>Wed, 23 Dec 2020 19:10:35 +0000</pubDate>
      <link>https://dev.to/rgthree/how-i-got-a-nintendo-switch-using-nodejs-2eab</link>
      <guid>https://dev.to/rgthree/how-i-got-a-nintendo-switch-using-nodejs-2eab</guid>
      <description>&lt;p&gt;Have you missed out on a hot holiday gift? Me too... until I used NodeJS to send my phone an alert to buy!&lt;/p&gt;




&lt;p&gt;This holiday season I saw a deal for a Nintendo Switch bundle which was perfect for my brother and his family. It was on sale for $299 but, unfortunately, by the time I went to get it there were no more available and third-party scalpers were selling it for over $500. Bummer.&lt;/p&gt;

&lt;p&gt;However, I noticed that Amazon’s stock would occasionally come available with that $299 price tag every now and then; but I was never lucky enough to check at the right time.&lt;/p&gt;

&lt;p&gt;So what does a software engineer do? Write a script to monitor the availability and send a message to my phone when it’s available to buy. And, it actually worked!&lt;/p&gt;





&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/rgthree"&gt;
        rgthree
      &lt;/a&gt; / &lt;a href="https://github.com/rgthree/pricewatch"&gt;
        pricewatch
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An Amazon Price Watcher with phone alerting via Telegram
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#how-it-works" class="anchor"&gt;
  &lt;/a&gt;
  How it works.
&lt;/h2&gt;

&lt;p&gt;The script is three pieces that work together:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An &lt;code&gt;AmazonPriceChecker&lt;/code&gt; that fetches the Amazon product web page by its id and, using JSDOM, looks for the current price&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;TelegramBot&lt;/code&gt; that simply encapsulates making a simple request to alert my phone via my &lt;a href="https://dev.to/rgthree/personal-telegram-bot-for-alerting-your-phone-w-o-code-1oih"&gt;personal Telegram bot&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;And a main server file that ties it all together to run the check loop, check the price threshold, and utilize the bot to alert my phone.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#set-up" class="anchor"&gt;
  &lt;/a&gt;
  Set up
&lt;/h2&gt;

&lt;p&gt;For this project, we'll need very few dependencies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you haven't already, you'll need to &lt;a href="https://nodejs.dev/learn/how-to-install-nodejs"&gt;install NodeJS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'll also need TypeScript. I recommend installing globally:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
 npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; typescript

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'll then need &lt;code&gt;jsdom&lt;/code&gt; and &lt;code&gt;node-fetch&lt;/code&gt;. You can create a &lt;code&gt;package.json&lt;/code&gt; file similar to below in your project directory and run &lt;code&gt;npm install&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rgthree-pricewatch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Watch prices."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jsdom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^16.4.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"node-fetch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.6.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/jsdom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"11.0.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^12.12.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/node-fetch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.5.7"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
package.json



&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-amazonpricechecker" class="anchor"&gt;
  &lt;/a&gt;
  The AmazonPriceChecker
&lt;/h2&gt;

&lt;p&gt;All we need this to do is fetch the Amazon product's web page by its product id and, using JSDOM, look for the current price in the DOM, and return it if found along with the url of the product itself.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is we’re fetching the web page with our server. We’ll override the User-Agent so it looks like a browser, but the response back will be raw HTML and possibly different than the markup we see when using Amazon as JavaScript is likely modifying the page substantially after that raw HTML come back.&lt;/p&gt;

&lt;p&gt;So, to find how to scrape the price we'll use the view-source feature in a browser to see exactly what our script will see instead of the DevTools.&lt;/p&gt;

&lt;p&gt;Luckily, it wasn't too hard to find Amazon is wrapping the price in an element with the id of &lt;code&gt;priceblock_ourprice&lt;/code&gt;. &lt;em&gt;(At least for the Nintendo; it's possible other products have different markup.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All together, our &lt;code&gt;AmazonPriceChecker&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSDOM&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jsdom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Given a product id, will try to find the current price of the item on the
 * Amazon page.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AmazonPriceChecker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://www.amazon.com/gp/product/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns a payload of the url for the product and it's current price, if
   * found. If the price cannot be determined, it will be `NaN`.
   */&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchProductPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;JSDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#priceblock_ourprice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)?.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;fetchProductPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accept-language&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Accept&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html,application/xhtml+xml&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// Make our request look like a browser.&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User-Agent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.11 Safari/537.36&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
amazon_watcher.ts



&lt;h2&gt;
  &lt;a href="#our-telegrambot" class="anchor"&gt;
  &lt;/a&gt;
  Our TelegramBot
&lt;/h2&gt;

&lt;p&gt;For the next part of our script we want to alert our phone. I've previously written about how to create a personal Telegram Bot here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rgthree" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BawtoF_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7W0bJyAc--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/262332/e21e5e5c-73b5-4d9b-a0e8-c230589bbeff.jpg" alt="rgthree image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rgthree/personal-telegram-bot-for-alerting-your-phone-w-o-code-1oih" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Personal Telegram Bot for Alerting Your Phone (w/o code)&lt;/h2&gt;
      &lt;h3&gt;Regis Gaughan, III ・ Dec  9 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#telegram&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#chatbot&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#api&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#notifications&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;All we need is our bot’s Api Key and the chat id our bot belongs to that we'll ping.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Super simple telegram wrapper that sends messages to a bot specific chat.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TelegramBot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;botApiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;chatId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.telegram.org/bot&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;botApiKey&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/sendMessage?chat_id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chatId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;text=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
telegrambot.ts




&lt;blockquote&gt;
&lt;p&gt;NOTE: You don't &lt;em&gt;have&lt;/em&gt; to use Telegram to alert yourself. You can modify the code here to send an email, or trigger IFTTT in some way, etc. Options are up to you, I've chosen to use Telegram because I already had a personal bot setup to ping my phone :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#tying-it-all-together" class="anchor"&gt;
  &lt;/a&gt;
  Tying it all together
&lt;/h2&gt;

&lt;p&gt;Now that we have our two separate pieces, we'll tie them together in our main server file where we'll loop to check every two minutes.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AmazonPriceChecker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./amazon_watcher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;TelegramBot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./telegrambot&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TELEGRAM_API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_API_KEY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TELEGRAM_CHAT_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_API_KEYCHAT_ID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The Amazon product id. The XXX in&lt;/span&gt;
&lt;span class="c1"&gt;// https://www.amazon.com/dp/XXX or https://www.amazon.com/gp/product/XXX&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AMAZON_PRODUCT_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B08KB652Q2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TARGET_PRICE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BASE_TIMEOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;telegram&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TelegramBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TELEGRAM_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TELEGRAM_CHAT_ID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;priceChecker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AmazonPriceChecker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AMAZON_PRODUCT_ID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Checks the price with `priceChecker`, issues a message with `telegram` if
 * it meets our threshold, and schedules another check.
 */&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BASE_TIMEOUT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;priceChecker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;TARGET_PRICE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;telegram&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Price is: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. Checking again in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; minutes. &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// If we can't parse the price, maybe something's wrong. We'll slow down&lt;/span&gt;
      &lt;span class="c1"&gt;// our interval a bit.&lt;/span&gt;
      &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;telegram&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Could not parse price. Trying again in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;telegram&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`There was an error fetching the price. Will check again in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;MS_MINUTES&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; minutes.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Rinse &amp;amp; repeat.&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Start it!&lt;/span&gt;
&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Checker Started. Stop with Ctrl + C.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
server.ts



&lt;h2&gt;
  &lt;a href="#start-it-up" class="anchor"&gt;
  &lt;/a&gt;
  Start it up
&lt;/h2&gt;

&lt;p&gt;First, run the TypeScript compiler which will generate JavaScript files from our neatly typed TypeScript files:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And then run our server file with NodeJs:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And that's it! This triggered an alert on my phone in about 4 hours or so and I was able to open Amazon directly to the product page and get the Switch, which was good because when I checked again four minutes later it shot back up to $500!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enhance" class="anchor"&gt;
  &lt;/a&gt;
  Enhance!
&lt;/h2&gt;

&lt;p&gt;This is just a base that worked for me. We can take this add more checkers for other online stores, different products, turn it into a full "bot" that actually buys the product, etc. Consider this just a starting point of where we can go from here. Maybe for next holiday season.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/rgthree"&gt;
        rgthree
      &lt;/a&gt; / &lt;a href="https://github.com/rgthree/pricewatch"&gt;
        pricewatch
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An Amazon Price Watcher with phone alerting via Telegram
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>node</category>
      <category>automation</category>
    </item>
    <item>
      <title>8 Awesome React Hooks</title>
      <author>Simon Holdorf</author>
      <pubDate>Wed, 23 Dec 2020 15:23:58 +0000</pubDate>
      <link>https://dev.to/simonholdorf/8-awesome-react-hooks-2b14</link>
      <guid>https://dev.to/simonholdorf/8-awesome-react-hooks-2b14</guid>
      <description>&lt;p&gt;React.js is currently the most popular JavaScript library for front end developers. Invented by Facebook, but available as an open-source project, it’s used by developers and corporations all over the world.&lt;/p&gt;

&lt;p&gt;React really changed the way we build single-page applications — one of its greatest features is hooks. Hooks were introduced not long ago and enabled us to use functional components instead of class-based components while dealing with the state. Besides built-in hooks, React offers us ways to implement our own custom hooks.&lt;/p&gt;

&lt;p&gt;Here are some of my favorite examples for custom hooks and their implementation that you can also use in your applications and projects.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#usetimeout-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useTimeout - React Hook
&lt;/h2&gt;

&lt;p&gt;With this hook, we can implement setTimeout using a declarative approach. First, we create a custom hook with a callback and a delay. Then we use the useRef hook to create a ref for the callback function. Finally, we make use of useEffect twice. One time for remembering the last callback and one time for setting up the timeout and cleaning up.&lt;/p&gt;

&lt;p&gt;The example shows an implementation of a timer:&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/6wVwlZFsyai6ND4qr6nH7j/6c6501fffae8798de290fd67adfe80a1/rh1.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/6wVwlZFsyai6ND4qr6nH7j/6c6501fffae8798de290fd67adfe80a1/rh1.png" alt="useTimeout - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useprevious-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  usePrevious - React Hook
&lt;/h2&gt;

&lt;p&gt;This is another great custom hook that we can use in our applications. With it, we can store props or the previous state. First, we create a custom hook that takes in a value. Then we use the useRef hook to create a ref for the value. Finally, we use useEffect to remember the latest value.&lt;/p&gt;

&lt;p&gt;The example shows an implementation of a counter.&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/5Jo9rQN54DRh0Bbtq3mCW5/acae81a63e224172ee810eeea1bff12e/rh2.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/5Jo9rQN54DRh0Bbtq3mCW5/acae81a63e224172ee810eeea1bff12e/rh2.png" alt="usePrevious - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useclickinside-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useClickInside - React Hook
&lt;/h2&gt;

&lt;p&gt;If you deal with event handling for clicking inside of wrapped components then the useClickInside hook is the right choice for you. First, we create a custom hook that takes in a ref and a callback to handle the click event. Then we make use of useEffect to append and clean up the click event. Finally, we use useRef to create a ref for the component to be clicked and pass it to the useClickInside hook.&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/4nIDUQsfiejVRFF3eLJ1v9/99ba9dea377583c09ba96269e32b1f8f/rh3.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/4nIDUQsfiejVRFF3eLJ1v9/99ba9dea377583c09ba96269e32b1f8f/rh3.png" alt="useClickInside - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useclickoutside-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useClickOutside - React Hook
&lt;/h2&gt;

&lt;p&gt;The useClickOutside hook is quite similar to the useClickInside hook but it takes care of clicking outside a wrapped component and not inside. So again, we create a custom hook that takes in a ref and a callback to handle the click event. Then we make use of useEffect to append and clean up the click event. Finally, we use useRef to create a ref for the component and pass it to the useClickOutside hook.&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/WilMHRGnV8sLSLL41CqZL/bbba6697b6400d234b88acf6ea9c3072/rh4.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/WilMHRGnV8sLSLL41CqZL/bbba6697b6400d234b88acf6ea9c3072/rh4.png" alt="useClickOutside - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#usefetch-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useFetch - React Hook
&lt;/h2&gt;

&lt;p&gt;The useFetch hook can be used to implement fetch in a declarative way. First, we use useState to initialize the response and error state variables. Then we use useEffect to asynchronously call fetch and update the state. Finally, we return an object that contains the response/error variables.&lt;br&gt;
The example shows a way to fetch a character from the Star Wars API and render its name:&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/5l1p7UFaD95p1zJt2zgu0z/291c3c93d98870a4a6ae3fb1adbf730c/rh5.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/5l1p7UFaD95p1zJt2zgu0z/291c3c93d98870a4a6ae3fb1adbf730c/rh5.png" alt="useFetch - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useinterval-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useInterval - React Hook
&lt;/h2&gt;

&lt;p&gt;If you want to implement setInterval in a declarative manner you can use this hook called useInterval.&lt;/p&gt;

&lt;p&gt;First, we have to create a custom hook taking in a callback and a delay. Then we use useRef to create a ref for the callback. Finally, we use useEffect to remember the latest callback and to set up the interval and clean up.&lt;br&gt;
The example shows an implementation for a custom ResourceCounter that can be used in a browser game, for example.&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/3Cm21kv0bD7el75ie3NXC2/99e1df7e03c0b7578710deed69df6b2b/rh6.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/3Cm21kv0bD7el75ie3NXC2/99e1df7e03c0b7578710deed69df6b2b/rh6.png" alt="useInterval - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#usecomponentdidmount-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useComponentDidMount - React Hook
&lt;/h2&gt;

&lt;p&gt;This hook is a small example of how to execute a callback right after a component is mounted. For the second argument, we simply use useEffect with an empty array, to execute the provided callback once as soon as the component is mounted.&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/kHvi3aY1tfWFt0DMgSC66/8f749220a7221e9e22a85cd29fad5929/rh7.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/kHvi3aY1tfWFt0DMgSC66/8f749220a7221e9e22a85cd29fad5929/rh7.png" alt="useComponentDidMount - React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#usecomponentwillunmount-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  useComponentWillUnmount - React Hook
&lt;/h2&gt;

&lt;p&gt;useComponentWillUnmount is similar to the example above but will execute a callback as soon as the component is unmounted. So we use useEffect again with an empty array as the second argument to execute the provided callback right before the cleanup&lt;br&gt;
&lt;a href="//images.ctfassets.net/28643bqnqgzl/2Aju8NS7W90tAQpss4D9kd/e8d3982dbb01f0335e49d6059effced4/rh8.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/2Aju8NS7W90tAQpss4D9kd/e8d3982dbb01f0335e49d6059effced4/rh8.png" alt="useComponentWillUnmount React Hook"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;These are some of my favorite examples of custom React hooks that you can use in your applications.&lt;/p&gt;

&lt;p&gt;If you are looking for inspiration and &lt;a href="https://thesmartcoder.dev/9-projects-you-can-do-to-become-a-front-end-master/"&gt;front end projects&lt;/a&gt; check out my site!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me and my work, please follow me on &lt;a href="https://twitter.com/simonholdorf"&gt;Twitter&lt;/a&gt; to learn more about programming, making, writing &amp;amp; careers🥰&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Can you use iPad Pro for work?</title>
      <author>MONKIN</author>
      <pubDate>Wed, 23 Dec 2020 15:04:56 +0000</pubDate>
      <link>https://dev.to/monkin/using-ipad-pro-for-work-2dbe</link>
      <guid>https://dev.to/monkin/using-ipad-pro-for-work-2dbe</guid>
      <description>&lt;h1&gt;
  &lt;a href="#yes-you-can" class="anchor"&gt;
  &lt;/a&gt;
  Yes, you can!
&lt;/h1&gt;

&lt;p&gt;There are many articles on how to use an iPad as a development machine. Mainly concerning browser-based solutions like GitHub Codespaces or similar tools. &lt;/p&gt;

&lt;p&gt;My approach is traditional by using Ubuntu on VPS with standard tooling that everyone knows. It does not matter if you are programming in Go, Python, Rust, or doing front-end in React. If you’re serious about your work, in the end only thing that matter is *nix.&lt;/p&gt;

&lt;p&gt;I will try to dive in and share tips after using iPad Pro for the last 8 months.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why" class="anchor"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;I will not lie if I write that for the sake of practicality. On my MacBook Pro, I installed only three applications. That was Figma, Dash, and iTerm2. &lt;/p&gt;

&lt;p&gt;So I thought that iPad is an ideal tool for my workflow. I tried it and never look back. I love the simplicity of the iPad OS. I have apps for each service that I used in a browser, like Reddit(&lt;a href="https://apolloapp.io/"&gt;Apollo&lt;/a&gt;), Twitter, or Netflix. Now I don’t need Safari to have everything under one fingertip. &lt;/p&gt;

&lt;p&gt;Oh, and did I mention the most critical feature for productivity? Face ID. Yes, You can chuckle, but the idea to not type your passwords is mind changing if you use &lt;a href="https://1password.com/"&gt;1Password&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will never get back to Apple hardware without Face ID, so dear Tim, please make a MacBook with those fancy new processors and Face ID... ❤️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-workflow" class="anchor"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h2&gt;

&lt;p&gt;The whole workflow is based on building websites and applications for my own needs. I rarely do any kind of client work.&lt;/p&gt;

&lt;p&gt;So there’s a large number of static websites in &lt;a href="https://gohugo.io/"&gt;HUGO&lt;/a&gt;, programming in &lt;a href="https://golang.org/"&gt;Go&lt;/a&gt;, extensive use of &lt;a href="https://about.gitlab.com/stages-devops-lifecycle/continuous-integration/"&gt;GitLab CI/CD&lt;/a&gt; for automation, scraping, gathering content or deployment to &lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For design I use &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt; (&lt;a href="https://figurative.design/"&gt;Figurative&lt;/a&gt; on iPad), retouch in &lt;a href="https://affinity.serif.com/en-us/photo/"&gt;Affinity Photo&lt;/a&gt;, sketch in &lt;a href="https://procreate.art/"&gt;Procreate&lt;/a&gt; or Apple Notes.&lt;/p&gt;

&lt;p&gt;And, that’s about everything I use. Pretty simple, isn’t it? I also use iA Writer for exporting to PDF more extensive notes. Yet most of them are written in Vim and stored in &lt;a href="https://github.com/vimwiki/vimwiki"&gt;Vimwiki&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-use" class="anchor"&gt;
  &lt;/a&gt;
  What I use?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blink.sh/"&gt;Blink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tmux.github.io/"&gt;Tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://caddyserver.com/"&gt;Caddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vim.org/"&gt;VIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mosh.org"&gt;Mosh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://weechat.org/"&gt;WeeChat&lt;/a&gt; - yes, IRC is still alive&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linode.com/?r=939c1b6d0f9d3a3b90b430f92db5aa3745420e06"&gt;Linode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://releases.ubuntu.com/20.10/"&gt;Ubuntu 20.10 Groovy Gorilla&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cost" class="anchor"&gt;
  &lt;/a&gt;
  Cost
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;One time:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://blink.sh/"&gt;Blink&lt;/a&gt; is $19.99.&lt;/li&gt;
&lt;li&gt;All of the software on Ubuntu I use is free or open source. &lt;/li&gt;
&lt;li&gt;As a Designer I also use

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://affinity.serif.com/en-us/designer/"&gt;Affinity Designer&lt;/a&gt; is $19.99&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://affinity.serif.com/en-us/photo/"&gt;Affinity Photo&lt;/a&gt;  is $19.99&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://procreate.art/"&gt;Procreate&lt;/a&gt; is $9.99&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://figurative.design/"&gt;Figurative&lt;/a&gt; is currently free&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Recurring:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.linode.com/?r=939c1b6d0f9d3a3b90b430f92db5aa3745420e06"&gt;Linode&lt;/a&gt; costs me $40 a month with 4 cores and 8GB of ram, but that cost is heavily depended on your own preferences and needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tips" class="anchor"&gt;
  &lt;/a&gt;
  Tips
&lt;/h2&gt;

&lt;p&gt;I don’t want to write extensive guides on software that I use, as this was written in all possible ways, and there is always documentation for each one of them. Yet, I want to share what makes my life more comfortable to work from iPad when using them:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-mouse-support" class="anchor"&gt;
  &lt;/a&gt;
  1. Mouse Support
&lt;/h3&gt;

&lt;p&gt;Enable mouse support in every application you can. This comes in handy when using an iPad without a keyboard as you can freely change panes in tmux or scroll throughout your apps with your fingers:&lt;/p&gt;

&lt;p&gt;In tmux:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g mouse on
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In VIM:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;mouse&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In WeeChat:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/set weechat.look.mouse on
/mouse &lt;span class="nb"&gt;enable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or search for mouse support in the documentation of your favorite CLI application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-caddyfile" class="anchor"&gt;
  &lt;/a&gt;
  2. Caddyfile
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://caddyserver.com/"&gt;Caddy&lt;/a&gt; is a lifesaver when you’re doing web-related programming and want to quickly access your websites on a development machine. By using &lt;a href="https://caddyserver.com/docs/quick-starts/caddyfile"&gt;&lt;code&gt;Caddyfile&lt;/code&gt;&lt;/a&gt; stored in your source folder, you can easily control access to it by adding this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;example.com&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;reverse_proxy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1313&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you can use &lt;code&gt;sudo caddy start&lt;/code&gt; inside your app directory and use to start your server or &lt;code&gt;caddy stop&lt;/code&gt; to terminate it.&lt;/p&gt;

&lt;p&gt;How would that work? For example, if you’re using &lt;a href="https://gohugo.io/"&gt;HUGO&lt;/a&gt;. Start your &lt;a href="https://caddyserver.com/"&gt;Caddy&lt;/a&gt; server and run this in &lt;a href="https://gohugo.io/"&gt;HUGO&lt;/a&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;hugo server &lt;span class="nt"&gt;--port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1313 &lt;span class="nt"&gt;--baseUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"example.com"&lt;/span&gt; &lt;span class="nt"&gt;--appendPort&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now when you go to example.com, you’ll see your website. The same is valid for anything else that requires a server or proxy.&lt;/p&gt;

&lt;p&gt;You can read more about setting this up here: &lt;a href="https://caddyserver.com/docs/quick-starts/reverse-proxy"&gt;Reverse proxy quick-start&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-limit-access" class="anchor"&gt;
  &lt;/a&gt;
  3. Limit Access
&lt;/h3&gt;

&lt;p&gt;One of the best things you can do is limiting access to your machine using a firewall. You can go with the first-class approach using iptables or by using UFW:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw allow proto tcp from &lt;span class="nv"&gt;$IPAddress&lt;/span&gt; to any port 22
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Where $IPAddress is your IP or your private VPN (&lt;a href="https://github.com/trailofbits/algo"&gt;Algo&lt;/a&gt;, &lt;a href="https://github.com/hwdsl2/setup-ipsec-vpn"&gt;ipsec-vpn&lt;/a&gt; or your own).&lt;/p&gt;

&lt;p&gt;Read this for more information: &lt;a href="https://ubuntu.com/server/docs/security-firewall"&gt;ufw - Uncomplicated Firewall&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-mosh" class="anchor"&gt;
  &lt;/a&gt;
  4. Mosh
&lt;/h3&gt;

&lt;p&gt;With Mosh, I never had a feeling that my terminal is just connected to VPS. Whenever I open Blink, everything is still there as I left it. Slow connection? No problem with Mosh. Constantly changing networks or IP addresses? You will not lose a connection even for a minute.&lt;/p&gt;

&lt;p&gt;It's so astonishing that it's hard to describe you have to try it yourself. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-file-synchronization" class="anchor"&gt;
  &lt;/a&gt;
  5. File Synchronization
&lt;/h3&gt;

&lt;p&gt;Blink SCP is a great tool to upload files to and from the server. It’s as simple as using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;scp yourfile &lt;span class="nb"&gt;hostname&lt;/span&gt;:~/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I also heavily use Git and &lt;a href="https://gitlab.com/"&gt;GitLab&lt;/a&gt; for that, solely by using the &lt;code&gt;sync&lt;/code&gt; repository on the server that I can pull, push or upload files from within &lt;a href="https://gitlab.com/"&gt;GitLab&lt;/a&gt; interface. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-create-bash-scripts" class="anchor"&gt;
  &lt;/a&gt;
  6. Create bash scripts
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcJ9WUD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hv8cuvfi49tqdf7lbx7f.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcJ9WUD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hv8cuvfi49tqdf7lbx7f.jpeg" alt="Setup Scripts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s maybe worn-out advice but write down everything you do more than once. App setup? Write a script. Configuration? Write a script. Deployment? Write a script. For example, if I want to install a node with yarn, use something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="c"&gt;# Add Node and Yarn to apt&lt;/span&gt;
curl &lt;span class="nt"&gt;-sL&lt;/span&gt; https://deb.nodesource.com/setup_15.x | &lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; bash -
curl &lt;span class="nt"&gt;-sL&lt;/span&gt; https://dl.yarnpkg.com/debian/pubkey.gpg | &lt;span class="nb"&gt;sudo &lt;/span&gt;apt-key add -
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"deb https://dl.yarnpkg.com/debian/ stable main"&lt;/span&gt; | &lt;span class="nb"&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/yarn.list

&lt;span class="c"&gt;# Install packages&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; nodejs yarn
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Yes, you could use &lt;a href="https://github.com/nvm-sh/nvm"&gt;NVM&lt;/a&gt;, but I don’t need it. So it’s based on your personal needs. &lt;/p&gt;

&lt;p&gt;What about setting up NGINX? No problem at all:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nb"&gt;mkdir&lt;/span&gt; .dep
&lt;span class="nv"&gt;DEP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.dep"&lt;/span&gt;
&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"nginx-1.18.0"&lt;/span&gt;

&lt;span class="c"&gt;# Install brotli compression&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nv"&gt;$DEP&lt;/span&gt;/ngx_brotli &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Brotli already installed."&lt;/span&gt;
&lt;span class="k"&gt;else
    &lt;/span&gt;git clone &lt;span class="nt"&gt;--depth&lt;/span&gt; 1 https://github.com/google/ngx_brotli.git &lt;span class="nv"&gt;$DEP&lt;/span&gt;/ngx_brotli
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$DEP&lt;/span&gt;/ngx_brotli &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update &lt;span class="nt"&gt;--init&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd
&lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# Configure and install NGINX&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$DEP&lt;/span&gt;
wget http://nginx.org/download/&lt;span class="nv"&gt;$VERSION&lt;/span&gt;.tar.gz
&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-zxvf&lt;/span&gt; &lt;span class="nv"&gt;$VERSION&lt;/span&gt;.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$VERSION&lt;/span&gt;
./configure &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--sbin-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/sbin/nginx &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--modules-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib/nginx/modules &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--conf-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/nginx.conf &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--error-log-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log/nginx/error.log &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--http-log-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log/nginx/access.log &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--pid-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/run/nginx.pid &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--lock-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/run/nginx.lock &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--http-client-body-temp-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/cache/nginx/client_temp &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--http-proxy-temp-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/cache/nginx/proxy_temp &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--http-fastcgi-temp-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/cache/nginx/fastcgi_temp &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--http-uwsgi-temp-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/cache/nginx/uwsgi_temp &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--http-scgi-temp-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/cache/nginx/scgi_temp &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_ssl_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-pcre-jit&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-threads&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_ssl_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_realip_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_addition_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_sub_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_dav_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_flv_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_mp4_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_geoip_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_image_filter_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_v2_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_xslt_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_gunzip_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_gzip_static_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_random_index_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_secure_link_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_stub_status_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_auth_request_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-threads&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-stream&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-stream_ssl_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-http_slice_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-mail&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-mail_ssl_module&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-file-aio&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--with-ipv6&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--add-module&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/ubuntu/.dep/ngx_brotli
make
&lt;span class="nb"&gt;sudo &lt;/span&gt;make &lt;span class="nb"&gt;install
cd&lt;/span&gt;

&lt;span class="c"&gt;# Remove NGINX sources&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; &lt;span class="nv"&gt;$DEP&lt;/span&gt;/&lt;span class="nv"&gt;$VERSION&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; &lt;span class="nv"&gt;$DEP&lt;/span&gt;/&lt;span class="nv"&gt;$VERSION&lt;/span&gt;.tar.gz

&lt;span class="c"&gt;# Copy nginx.service&lt;/span&gt;
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.dotfiles/.config/nginx.service /lib/systemd/system/

&lt;span class="c"&gt;# Create 'nginx' user&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;useradd &lt;span class="nt"&gt;--no-create-home&lt;/span&gt; nginx

&lt;span class="c"&gt;# Create cache and web directories&lt;/span&gt;
&lt;span class="nb"&gt;sudo mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /var/cache/nginx/client_temp
&lt;span class="nb"&gt;sudo mkdir&lt;/span&gt; /etc/nginx/conf.d/
&lt;span class="nb"&gt;sudo mkdir&lt;/span&gt; /var/www/
&lt;span class="nb"&gt;sudo chown &lt;/span&gt;nginx:nginx /var/www/

&lt;span class="c"&gt;# Enable and auto start&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;nginx
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start nginx

&lt;span class="c"&gt;# Generate dhparam cert&lt;/span&gt;
screen &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;openssl dhparam &lt;span class="nt"&gt;-out&lt;/span&gt; /etc/ssl/certs/dhparam.pem 4096
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can use Terraform or Ansible, but that is overkill for what is needed from a personal dev machine. Or a single server to host your services.&lt;/p&gt;

&lt;p&gt;And no, you do not need any fancy technology, hundreds of servers, or containers system to build a successful online business. Go ahead! If you have experience in it and feel that using them will be a lifesaver for you. In the end, it's your needs that count, not some internet articles. :)&lt;/p&gt;

&lt;p&gt;Don’t forget about your .dotfiles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-buy-external-keyboard-and-mouse" class="anchor"&gt;
  &lt;/a&gt;
  7. Buy external keyboard and mouse
&lt;/h3&gt;

&lt;p&gt;I use Apple Keyboard and a simple Logitech BT mouse. First, Figma will not work without it. Second, if you want to use a keyboard and pencil for design, at the same time, those integrated ones will not work for you. I personally keep the iPad Screen in front of me. On the left of it, I have a keyboard operated by my left hand for switching shortcuts.&lt;/p&gt;

&lt;p&gt;This is also my approach since I worked with Wacom tablets, and some people may be able to work comfortably on an iPad with a keyboard in a case. But that is more of a personal preference.&lt;/p&gt;

&lt;p&gt;One of the advantages for me is traveling comfortably. I don’t need to take an external keyboard or mouse with me. The on-screen keyboard is excellent and works well on such occasions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems" class="anchor"&gt;
  &lt;/a&gt;
  Problems?
&lt;/h2&gt;

&lt;p&gt;The iPad is not ideal. The biggest obstacle can be a lack of internet connection. As with slow internet, you can still use Mosh, and have a pleasant experience, that without it you can not work at all. &lt;/p&gt;

&lt;p&gt;There are applications like &lt;a href="https://ish.app/"&gt;iSH&lt;/a&gt; which are trying to fill that gap, but setting it up to resemble working on full-featured Linux is complicated and time-consuming.&lt;/p&gt;

&lt;p&gt;Second, dev tools are nonexistent. There is Inspect Browser on iPad, and it has some features. But it is dated and probably abandoned (still waiting for that next big release). How do I deal with it? I absolutely do not care... &lt;/p&gt;

&lt;p&gt;Most browsers work similar fashion to each other. So if you do something that works fine on Safari, it will work the same on Firefox and Chromium-based ones. If not, then you will get feedback from annoyed users or colleagues that something is not right.&lt;/p&gt;

&lt;p&gt;I know it is the wrong approach. But thanks to this, I have learned to be careful about what and how I do. I try to avoid novelties or technologies that may cause errors. Less is more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end" class="anchor"&gt;
  &lt;/a&gt;
  The End
&lt;/h2&gt;

&lt;p&gt;I absolutely enjoy working on an iPad. Would love to have a built-in Terminal or proper dev tools in Safari. Working on iPadOS already resembles the flow from macOS in every possible way. And for me, it only took a few minutes to get used to. &lt;/p&gt;

&lt;p&gt;Would I recommend a switch to it? Yes. But not for everyone. There are many cases where the iPad falls short. On the other hand, even if it is for you, you must remember to change your habits. The iPad is an entirely different tool that is operated differently. But now you can use it to do most of the things you've done on a regular computer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommended-links" class="anchor"&gt;
  &lt;/a&gt;
  Recommended links:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ubuntu.com/server/docs"&gt;https://ubuntu.com/server/docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/"&gt;https://wiki.archlinux.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linode.com/docs/"&gt;https://www.linode.com/docs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/docs/"&gt;https://www.digitalocean.com/docs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drduh/Debian-Privacy-Server-Guide"&gt;https://github.com/drduh/Debian-Privacy-Server-Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vimhelp.org/usr_toc.txt.html"&gt;https://vimhelp.org/usr_toc.txt.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weechat.org/doc/"&gt;https://weechat.org/doc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://man.openbsd.org/OpenBSD-current/man1/tmux.1"&gt;http://man.openbsd.org/OpenBSD-current/man1/tmux.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://caddyserver.com/docs/"&gt;https://caddyserver.com/docs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>ipad</category>
    </item>
    <item>
      <title>Creating a collapsible section with nothing but HTML</title>
      <author>Jordan Finneran</author>
      <pubDate>Wed, 23 Dec 2020 12:41:27 +0000</pubDate>
      <link>https://dev.to/jordanfinners/creating-a-collapsible-section-with-nothing-but-html-4ip9</link>
      <guid>https://dev.to/jordanfinners/creating-a-collapsible-section-with-nothing-but-html-4ip9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#contents" class="anchor"&gt;
  &lt;/a&gt;
  Contents
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#details"&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;I love creating User Interfaces (UI) and often times well need a section to expand and collapse for example in a FAQ section.&lt;/p&gt;

&lt;p&gt;I used to reach for NPM and install a library to help, until I discovered that you can do this with pure HTML elements!&lt;/p&gt;

&lt;p&gt;They aren't perhaps the most obviously named:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details"&gt;details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary"&gt;summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They have pretty great &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details#Browser_compatibility"&gt;browser support&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#details" class="anchor"&gt;
  &lt;/a&gt;
  Details &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;The details element is the element to contain the content we want to show and hide.&lt;br&gt;
The summary element is caption to describe what is hidden, in an FAQ section this might be the question and the answer is hidden in the details element until it is expanded.&lt;/p&gt;

&lt;p&gt;You can toggle the details element open and closed with JavaScript if needed in your use case by setting the &lt;code&gt;open&lt;/code&gt; attribute on it.&lt;/p&gt;

&lt;p&gt;It is also pretty straightforward to style the arrow, you can see this in the example below where I've used an emoji instead but this can be anything you want.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Shut up and show me the code.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/h6wsuzx1//embedded/result,html,css,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In summary, you can use what browsers give you to create an expanding and collapsing section. &lt;br&gt;
It will be accessible for all users as its semantic HTML.&lt;br&gt;
It will be super quick to load as there is only HTML and a few lines of CSS.&lt;br&gt;
It will be responsive to any screen size.&lt;/p&gt;

&lt;p&gt;Happy building!&lt;/p&gt;

&lt;p&gt;What else would you like to see in this Web Dev series?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What's the most unique portfolio you have seen?</title>
      <author>Madza</author>
      <pubDate>Wed, 23 Dec 2020 12:27:51 +0000</pubDate>
      <link>https://dev.to/madza/what-s-the-most-unique-portfolio-you-have-seen-13o7</link>
      <guid>https://dev.to/madza/what-s-the-most-unique-portfolio-you-have-seen-13o7</guid>
      <description>&lt;p&gt;Could you recall some portfolios that stood out due to their uniqueness and creativity? Something extraordinary, one of the kind. Share them below!&lt;/p&gt;

&lt;p&gt;To start off, I'm gonna give it to &lt;a href="https://benhalpern.com/"&gt;Ben&lt;/a&gt; and &lt;a href="https://jakealbaugh.com/"&gt;Jake&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>Getting started with Markdown.</title>
      <author>Amaan Shaikh</author>
      <pubDate>Wed, 23 Dec 2020 11:52:19 +0000</pubDate>
      <link>https://dev.to/amaan56/getting-started-with-markdown-4fjf</link>
      <guid>https://dev.to/amaan56/getting-started-with-markdown-4fjf</guid>
      <description>&lt;p&gt;If you are an active GitHub user you must have come across this file README.md.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what is README.md?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;README.md is a file that contains information about a GitHub project like description, how to use it, licenses, and many more.&lt;/p&gt;

&lt;p&gt;As you can see README file has an extension as .md the reason behind this is because the README file is a markdown file. &lt;strong&gt;So let's learn about what is a markdown file&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Markdown is a text-to-HTML conversion tool for web developers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid HTML. We can add styles, images, external APIs, and many more to the markdown files. As markdown converts text to HTML we can also add HTML code directly to our markdown file to add more functionality.&lt;/p&gt;

&lt;p&gt;Here is an example of my GitHub readme file.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qmuaFfrt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wx0rmxwmpy4oww4e2jql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qmuaFfrt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wx0rmxwmpy4oww4e2jql.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do follow :)  &lt;a href="https://github.com/Amaan56"&gt;https://github.com/Amaan56&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let us learn a few basic syntaxes to get started with Markdown&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#headings" class="anchor"&gt;
  &lt;/a&gt;
  Headings
&lt;/h2&gt;

&lt;p&gt;To make a normal text heading put # (single Hash) in front of it. We can have 6 types of headings like HTML from h1 to h6 just by increasing the number of the hash in front of the text from 1 to 6.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Heading 1
## Heading 2
### Heading 3
#### Heading 4
##### Heading 5
###### Heading 6
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#heading-1" class="anchor"&gt;
  &lt;/a&gt;
  Heading 1
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#heading-2" class="anchor"&gt;
  &lt;/a&gt;
  Heading 2
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#heading-3" class="anchor"&gt;
  &lt;/a&gt;
  Heading 3
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#heading-4" class="anchor"&gt;
  &lt;/a&gt;
  Heading 4
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#heading-5" class="anchor"&gt;
  &lt;/a&gt;
  Heading 5
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#heading-6" class="anchor"&gt;
  &lt;/a&gt;
  Heading 6
&lt;/h6&gt;

&lt;h2&gt;
  &lt;a href="#paragraph" class="anchor"&gt;
  &lt;/a&gt;
  Paragraph
&lt;/h2&gt;

&lt;p&gt;You don't have to do anything for a paragraph in the markdown file as it gets automatically formated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-text-bold" class="anchor"&gt;
  &lt;/a&gt;
  Make text bold
&lt;/h2&gt;

&lt;p&gt;You can make your text bold by starting and ending your text with **(double asterisks).&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**This is a bold text**
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is a bold text&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-text-italic" class="anchor"&gt;
  &lt;/a&gt;
  Make text italic
&lt;/h2&gt;

&lt;p&gt;You can make your text bold by starting and ending your text with *(single asterisks).&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*This is italic text*
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is italic text&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#horizontal-rules" class="anchor"&gt;
  &lt;/a&gt;
  Horizontal Rules
&lt;/h2&gt;

&lt;p&gt;To add horizontal rules write three or more hyphens in a row.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;----
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ordered-list" class="anchor"&gt;
  &lt;/a&gt;
  Ordered List
&lt;/h2&gt;

&lt;p&gt;The ordered list can be added as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. Item 1
2. Item 2
3. Item 3
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Item 1&lt;/li&gt;
&lt;li&gt;Item 2&lt;/li&gt;
&lt;li&gt;Item 3&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#unordered-list" class="anchor"&gt;
  &lt;/a&gt;
  Unordered List
&lt;/h2&gt;

&lt;p&gt;The unordered list can be added as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Item 1
- Item 2
- Item 3
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Item 1&lt;/li&gt;
&lt;li&gt;Item 2&lt;/li&gt;
&lt;li&gt;Item 3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hyperlink" class="anchor"&gt;
  &lt;/a&gt;
  Hyperlink
&lt;/h2&gt;

&lt;p&gt;To have a web link in your document just put your link between square brackets [ ].&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[https://github.com/Amaan56]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Amaan56"&gt;https://github.com/Amaan56&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image" class="anchor"&gt;
  &lt;/a&gt;
  Image
&lt;/h2&gt;

&lt;p&gt;To add an image use the same syntax as the link but add ! (Exclamation) before square brackets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;![https://i.pinimg.com/564x/ce/53/c5/ce53c5bcd350ba856e5c53c343376fb2.jpg]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBCXAIi0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jo42ccokjvj9vbfmmyrv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBCXAIi0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jo42ccokjvj9vbfmmyrv.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#blockquote" class="anchor"&gt;
  &lt;/a&gt;
  Blockquote
&lt;/h2&gt;

&lt;p&gt;To put a blockquote, append the text with a with &amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; To create a blockquote
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To create a blockquote&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And last but not the least, my favorite and used by most of the tech bloggers to add a &lt;strong&gt;code block&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To add a code block in your markdown surround your code block with&lt;br&gt;
&lt;br&gt;
 ``` (triple-backticks). This will give you the below result.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

console.log("Hello World");


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here is great documentation to explore more: &lt;a href="https://www.markdownguide.org/basic-syntax/"&gt;https://www.markdownguide.org/basic-syntax/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

</description>
      <category>markdown</category>
      <category>github</category>
      <category>beginners</category>
      <category>blog</category>
    </item>
    <item>
      <title>How to manage multiple GitHub accounts on your local machine</title>
      <author>Lars</author>
      <pubDate>Wed, 23 Dec 2020 08:49:45 +0000</pubDate>
      <link>https://dev.to/codetraveling/how-to-manage-multiple-github-accounts-on-your-local-machine-3gj0</link>
      <guid>https://dev.to/codetraveling/how-to-manage-multiple-github-accounts-on-your-local-machine-3gj0</guid>
      <description>&lt;p&gt;*This post was first published on my &lt;a href="https://blog.larsbehrenberg.com"&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One issue that I have run into multiple times in the past is how to manage multiple GitHub accounts on my local machine. Whether you are working on git repositories from multiple clients or you are switching back and forth between personal and the company accounts, almost every developer will eventually encounter this problem. Also for me, I end up looking it up every time I set up a new machine 🤐&lt;/p&gt;

&lt;p&gt;So here is a quick reminder of how to go about this, because it does need a little setup to work nicely.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="#getting-started"&gt;Getting Started&lt;/a&gt; 

&lt;ul&gt;
&lt;li&gt; &lt;a href="#use-ssh-instead-of-https"&gt;Use SSH keys instead of HTTPS&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#understand-the-structure-of-ssh-on-your-local-machine"&gt;Understand the structure of SSH on your local machine&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; &lt;a href="#set-up-your-local-ssh-config"&gt;Set up your local SSH config&lt;/a&gt; 

&lt;ul&gt;
&lt;li&gt; &lt;a href="#generate-ssh-keys"&gt;Generate SSH keys&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#create-a-config-to-manage-multiple-keys"&gt;Create a config to manage multiple keys&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#register-our-sshagent"&gt;Register our ssh-agent&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#add-the-ssh-keys-to-your-github-accounts"&gt;Add the SSH keys to your GitHub accounts&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; &lt;a href="#clone-your-repo"&gt;Clone your repo&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#use-ssh-instead-of-https" class="anchor"&gt;
  &lt;/a&gt;
  Use SSH instead of HTTPS
&lt;/h3&gt;

&lt;p&gt;To set up different accounts on your local machine, &lt;strong&gt;we will be using SSH keys&lt;/strong&gt; instead of the usual HTTPS connection. This has its advantages and disadvantages, and GitHub occasionally changes its opinion on what it recommends best, but here is a quote from the GitHub docs on why we will use SSH keys in this case. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Using the SSH protocol, you can connect and authenticate to remote servers and services. With SSH keys, you can connect to GitHub without supplying your username and personal access token at each visit.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Github | About SSH&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Perfect for us. We don't want to reauthenticate every time and instead commit changes to our repositories as if we never switched accounts. &lt;strong&gt;But how do we set that up?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A quick note here: if you would like to learn more about the differences between HTTPS and SSH, there is an extensive write-up in the &lt;a href="https://help.github.com/articles/generating-ssh-keys"&gt;GitHub docs&lt;/a&gt;! **It's worth checking out!&lt;/em&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understand-the-structure-of-ssh-on-your-local-machine" class="anchor"&gt;
  &lt;/a&gt;
  Understand the structure of SSH on your local machine
&lt;/h3&gt;

&lt;p&gt;To put it simply: the way this will work is to create unique keys &lt;strong&gt;(SSH keys)&lt;/strong&gt; on your local machine that we will then &lt;strong&gt;add to your Github accounts.&lt;/strong&gt; GitHub won't have to look up your login credentials every time then and instead can verify you by your SSH key. &lt;strong&gt;Sound pretty good, right?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But where do the keys get stored on your local machine?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a folder called &lt;strong&gt;&lt;em&gt;~/.ssh&lt;/em&gt;&lt;/strong&gt;. This is where our setup will happen. Instead of having to set up configuration every time we clone from one of our accounts, once we have made our SSH setup in this folder, we just clone and commit to repositories from different accounts without ever thinking about having to switch accounts on your local machine!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's get started!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-your-local-ssh-config" class="anchor"&gt;
  &lt;/a&gt;
  Set up your local SSH config
&lt;/h2&gt;

&lt;p&gt;If you were to look for your &lt;strong&gt;&lt;em&gt;~/.ssh&lt;/em&gt;&lt;/strong&gt; folder, you might notice that it doesn't exist yet, if for example you never created any keys previously. But instead of creating the folder now ourselves, let our machine do that for us. We start by creating our first key.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generate-ssh-keys" class="anchor"&gt;
  &lt;/a&gt;
  Generate SSH keys
&lt;/h3&gt;

&lt;p&gt;When we create SSH keys on our machine, it automatically generates some files and configurations for us. &lt;em&gt;In this tutorial, we will assume you haven't set up any SSH keys yet.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We get started with the command that will generate the first key:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh-keygen &lt;span class="nt"&gt;-t&lt;/span&gt; rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You will be prompted and asked to enter the folder/file name you want to go with. &lt;strong&gt;Press ENTER to go with the default location and generate the&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;~/.ssh&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;folder.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bJKHSydi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tcsr58h658w0bdg5k7q5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJKHSydi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tcsr58h658w0bdg5k7q5.png" alt="Enter custom file name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You now have a &lt;strong&gt;&lt;em&gt;~/.ssh&lt;/em&gt;&lt;/strong&gt; folder, with the just created SSH key. Let's use this default key for our personal account.&lt;/p&gt;

&lt;p&gt;Next up is creating a key for our work account. (You can repeat this process for as many keys as necessary) &lt;strong&gt;And for this we will have to specify the key with some flags.&lt;/strong&gt; "-C" adds a comment/tag and -f specifies the name of the file we want to save the key to.&lt;/p&gt;

&lt;p&gt;Go into your &lt;strong&gt;&lt;em&gt;~/.ssh&lt;/em&gt;&lt;/strong&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And create your next key with custom flags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh-keygen &lt;span class="nt"&gt;-t&lt;/span&gt; rsa &lt;span class="nt"&gt;-C&lt;/span&gt; &lt;span class="s2"&gt;"email@githubworkemail.com"&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"id_rsa_workname"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To dive deeper, here is a list of the different flags you can add:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.ssh.com/ssh/keygen/#command-and-option-summary"&gt;List of flags for SSH-keygen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To double-check that all of your keys are there, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; ~/.ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-config-to-manage-multiple-keys" class="anchor"&gt;
  &lt;/a&gt;
  Create a config to manage multiple keys
&lt;/h3&gt;

&lt;p&gt;Now that we have created our keys, we need a configuration file that knows which key to use when we access a repo of one of our GitHub accounts.&lt;/p&gt;

&lt;p&gt;For this inside our &lt;strong&gt;&lt;em&gt;~/.ssh&lt;/em&gt;&lt;/strong&gt; folder, we create and open a &lt;strong&gt;&lt;em&gt;config&lt;/em&gt;&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; ~/.ssh/config &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; code ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In here we define our different accounts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# personal account&lt;/span&gt;
Host github.com
   HostName github.com
   User git
   IdentityFile ~/.ssh/id_rsa

&lt;span class="c"&gt;# work account 1&lt;/span&gt;
Host github.com-workname
   HostName github.com
   User git
   IdentityFile ~/.ssh/id_rsa_workname
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Two things are important to note here:&lt;/p&gt;

&lt;p&gt;The host, which we will need to remember later when we get our SSH links from GitHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Host github.com-workname
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and the identity file, to make sure it points to the correct SSH key that we created before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;IdentityFile ~/.ssh/id_rsa_workname
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#register-our-sshagent" class="anchor"&gt;
  &lt;/a&gt;
  Register our ssh-agent
&lt;/h3&gt;

&lt;p&gt;Now to keep track of our different SSH keys and their configurations, there is a service called "ssh-agent". It is essentially the key manager for SSH.&lt;/p&gt;

&lt;p&gt;For our purposes, we need to know 3 different commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh-add &lt;span class="nt"&gt;-D&lt;/span&gt;              // removes all currently registered ssh keys from the ssh-agent
ssh-add &lt;span class="nt"&gt;-l&lt;/span&gt;              // lists all currently &lt;span class="k"&gt;in &lt;/span&gt;the ssh-agent registered ssh keys
ssh-add ~/.ssh/id_rsa   // adds the specified key to the ssh-agent
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you haven't configured any keys previously your ssh-agent has most likely not registered any keys, but let's be completely sure and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh-add &lt;span class="nt"&gt;-D&lt;/span&gt;              // removes all currently registered ssh keys from the ssh-agent
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next up is registering our keys with their ids:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh-add ~/.ssh/id_rsa &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ssh-add ~/.ssh/id_rsa_workname
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Done!&lt;/strong&gt; With this, our local machine is set up and all that is left to do is to register our keys in GitHub and clone our first repo!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-the-ssh-keys-to-your-github-accounts" class="anchor"&gt;
  &lt;/a&gt;
  Add the SSH keys to your GitHub accounts
&lt;/h2&gt;

&lt;p&gt;There are two steps to this. First, copy the correct key and second, add the key in your dashboard on GitHub.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Copying the correct key.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pbcopy &amp;lt; ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This will copy your &lt;strong&gt;public key&lt;/strong&gt; to your clipboard&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the key in your dashboard at &lt;a href="https://github.com/settings/keys"&gt;https://github.com/settings/keys&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9BmabF6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k5smn4rsug1xlbae354g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9BmabF6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k5smn4rsug1xlbae354g.png" alt="GitHub add a SSH key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Login into your work GitHub account and repeat this process with your work SSH key.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clone-your-repo" class="anchor"&gt;
  &lt;/a&gt;
  Clone your repo
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important to note!&lt;/strong&gt;&lt;br&gt;
The reason why your computer knows which SSH key to use, is because we defined the URL in our config file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that for our work repositories, when we clone a repo from the account, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iy-iznnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dlxg28bs0ie9lnatv6cm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iy-iznnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dlxg28bs0ie9lnatv6cm.png" alt="Choose SSH link in GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We have to change the URL from:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;git@&lt;strong&gt;&lt;em&gt;github.com&lt;/em&gt;&lt;/strong&gt;:workname/repo.git ⇒ git@&lt;strong&gt;&lt;em&gt;github.com-workname&lt;/em&gt;&lt;/strong&gt;:workname/repo.git&lt;/p&gt;

&lt;p&gt;The same URL we have previously defined in our &lt;strong&gt;&lt;em&gt;~/.ssh/config&lt;/em&gt;&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;**&lt;/span&gt;Host github.com-workname  // HERE&lt;span class="k"&gt;**&lt;/span&gt;
   HostName github.com
   User git
   IdentityFile ~/.ssh/id_rsa_workname
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;With this, you can now clone your repositories and get going! Back to coding, I'd say!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  That’s it!
&lt;/h2&gt;

&lt;p&gt;Thanks so much for reading this far and feel free to reach out to me anytime, on &lt;a href="https://larsbehrenberg.com/"&gt;my website&lt;/a&gt; or on &lt;a href="https://twitter.com/codetraveling"&gt;Twitter&lt;/a&gt; 🙂&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Hello, World! I Started My Blog In Plain HTML</title>
      <author>Minh-Phuc Tran</author>
      <pubDate>Wed, 23 Dec 2020 05:04:02 +0000</pubDate>
      <link>https://dev.to/phuctm97/hello-world-i-started-my-blog-in-plain-html-1nnm</link>
      <guid>https://dev.to/phuctm97/hello-world-i-started-my-blog-in-plain-html-1nnm</guid>
      <description>&lt;p&gt;Today is a special day for me: I finally created my blog, what I has been thinking of for years 🎉. If you are reading this on another platform, it is an automatic crosspost, feel free to &lt;a href="https://phuctm97.com"&gt;check out my website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plain-html-is-fun" class="anchor"&gt;
  &lt;/a&gt;
  Plain HTML is fun 🤓
&lt;/h2&gt;

&lt;p&gt;Because I didn't want to give myself another reason to keep procrastinating, I decided to start this blog dead simple: plain HTML, no inline style, no CSS, no JS, whatsoever.&lt;/p&gt;

&lt;p&gt;Surprisingly, after making the decision, I realized that HTML and the web were originally created for people to write, share, and communicate information. That why we have HTML tags &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;article&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;, headings ( &lt;code&gt;h1&lt;/code&gt; &lt;code&gt;h2&lt;/code&gt; &lt;code&gt;h3&lt;/code&gt; &lt;code&gt;h4&lt;/code&gt; &lt;code&gt;h5&lt;/code&gt; &lt;code&gt;h6&lt;/code&gt;), paragraph (&lt;code&gt;p&lt;/code&gt;), etc, they're all for writing articles and sharing stories. Over time, thanks to more and more powerful computers and browsers, HTML/CSS/JS became more and more like a framework to create interactive applications on the web.&lt;/p&gt;

&lt;p&gt;This is such an interesting &lt;em&gt;Aha!&lt;/em&gt; movement for me because I started with game and desktop programming, which are all about visualization and interactivity. All of my previous experience with web development were also about creating beautiful and interactive web applications. I've never happened to think of HTML as a means for writing and sharing stories.&lt;/p&gt;

&lt;p&gt;This also answered one of my biggest unsolved questions in programming - why on earth there're many different HTML tags that have the same visualization and all the weird workaround-like positioning techniques ( &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;clear: fix&lt;/code&gt;, etc). Coming from game and desktop development, absolute position, flex, and grid were always obvious options when it comes to layout and positioning for me. Now, it all makes sense 🤯 and it's very interesting to see how HTML - the core of The Internet has evolved over time.&lt;/p&gt;

&lt;p&gt;Alright, that is it. I thought that I were gonna write more about why I started this blog and what value you can get from it, but I ran out of time, gotta write it tomorrow then.&lt;/p&gt;

</description>
      <category>html</category>
      <category>blog</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Make Your dotfiles Portable With Git and a Simple Bash Script</title>
      <author>Freddie Carthy</author>
      <pubDate>Wed, 23 Dec 2020 04:46:48 +0000</pubDate>
      <link>https://dev.to/freddiecarthy/make-your-dotfiles-portable-with-git-and-a-simple-bash-script-dk9</link>
      <guid>https://dev.to/freddiecarthy/make-your-dotfiles-portable-with-git-and-a-simple-bash-script-dk9</guid>
      <description>&lt;p&gt;Are you getting the most out of your dotfiles? Time and again I see engineers under-utilizing the power of their dotfiles. They either don't maintain a version-controlled set of dotfiles, or they do but they haven't been touched in years. This can lead to a fragmented developer environment between your personal and work computer. &lt;strong&gt;Wouldn't it be cool if you could have a one-line install for your dotfiles and a single command to keep them up-to-date between systems?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My dotfiles are like my digital identity. They serve two primary purposes; they hold all of my settings and I use them to install all of my tooling. This keeps my work and personal computer 100% synced.&lt;/p&gt;

&lt;p&gt;At minimum there's a handful of files that I like to share across systems. These include files like &lt;code&gt;.gitignore&lt;/code&gt;, &lt;code&gt;.gitconfig&lt;/code&gt;, bash aliases, &lt;code&gt;.bash_profile&lt;/code&gt;, &lt;code&gt;.vimrc&lt;/code&gt;, and a number of others.&lt;/p&gt;

&lt;p&gt;There's also several tools that I always use regardless of the system I'm working on; Git, Vim, yarn, npm, and Homebrew to name a few.&lt;/p&gt;

&lt;p&gt;In this series &lt;strong&gt;I'll show you how to supercharge your dotfiles to keep them synced across your machines effortlessly.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-setting-things-up" class="anchor"&gt;
  &lt;/a&gt;
  1. Setting things up.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This script assumes you're using a Mac&lt;/strong&gt;. First things first you'll need to setup a repo on GitHub (or preferred location) for your dotfiles.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I've set up a &lt;a href="https://github.com/gjunkie/dotfiles-starter-kit"&gt;sample repo here&lt;/a&gt; if you just want to get going.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clone the repo and &lt;code&gt;cd&lt;/code&gt; into it. Create a folder called &lt;code&gt;/opt&lt;/code&gt;, and in there a file called &lt;code&gt;files&lt;/code&gt; (in the future this folder will also hold a list of tools you use). In that file paste the following (add any dotfiles relevant to you):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /opt/files
configs/.gitconfig    .gitconfig
configs/.gitignore    .gitignore
configs/.bash_profile .bash_profile
configs/.vimrc        .vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This list will tell our future &lt;code&gt;install&lt;/code&gt; script to look for the files listed on the left and create symlinks in our home directory with the names on the right. We haven't setup the &lt;code&gt;/configs&lt;/code&gt; folder to hold our dotfiles quite yet, so let's do that next!&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;/configs&lt;/code&gt; folder at the root of the project. This folder is what will hold all of our dotfiles (as listed above). Think of these files as the "source of truth" for each of your dotfiles. For each of the files you can paste in the contents of your current dotfiles to get started. Make a commit and push this baby up! This is how things should look like now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/dotfiles
  /opt
    files
  /configs
    .gitconfig
    .gitignore
    .bash_profile
    .vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;OK, moving on...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-creating-a-simple-install-script" class="anchor"&gt;
  &lt;/a&gt;
  2. Creating a simple install script
&lt;/h2&gt;

&lt;p&gt;Now we've got our dotfiles in our &lt;code&gt;/configs&lt;/code&gt; folder and pushed to GitHub. Pretty great! But what we &lt;em&gt;really&lt;/em&gt; want to do is have an easy way to download these dotfiles onto a new system &lt;em&gt;without even having Git installed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;install&lt;/code&gt; at the root of the project. We'll need this script to do a couple of things for us:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the repo and set itself up in the &lt;code&gt;/usr/local/opt&lt;/code&gt; directory. This is because we'll keep our local copy of the cloned repo where we make changes separate from the set of files your machine will use as the "source of truth".&lt;/li&gt;
&lt;li&gt;Symlink our dotfiles in that directory from our home directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At the top of the file let's set up a few variables for easy use in our functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /install
#!/usr/bin/env bash
LOG="${HOME}/Library/Logs/dotfiles.log"
GITHUB_USER=your github user name here
GITHUB_REPO=&amp;lt;your github repo name
DIR="/usr/local/opt/${GITHUB_REPO}"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Setting the &lt;code&gt;LOG&lt;/code&gt; location to this will ensure that all logs are visible in the macOS Console app. Handy if something goes wrong and you need to check the logs. Make sure to set &lt;code&gt;GITHUB_USER&lt;/code&gt; to your username and &lt;code&gt;GITHUB_REPO&lt;/code&gt; to whatever you're calling your dotfiles repo. Let's also set up a couple of helper functions that will print out some fancy output as our script runs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /install
_process() {
  echo "$(date) PROCESSING:  $@" &amp;gt;&amp;gt; $LOG
  printf "$(tput setaf 6) %s...$(tput sgr0)\n" "$@"
}

_success() {
  local message=$1
  printf "%s✓ Success:%s\n" "$(tput setaf 2)" "$(tput sgr0) $message"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;OK, so now we get to the fun part. Let's write a function that downloads our &lt;code&gt;dotfiles&lt;/code&gt; repo so we can use it locally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /install
download_dotfiles() {
  _process "→ Creating directory at ${DIR} and setting permissions"
  mkdir -p "${DIR}"

  _process "→ Downloading repository to /tmp directory"
  curl -#fLo /tmp/${GITHUB_REPO}.tar.gz "https://github.com/${GITHUB_USER}/${GITHUB_REPO}/tarball/main"

  _process "→ Extracting files to ${DIR}"
  tar -zxf /tmp/${GITHUB_REPO}.tar.gz --strip-components 1 -C "${DIR}"

  _process "→ Removing tarball from /tmp directory"
  rm -rf /tmp/${GITHUB_REPO}.tar.gz

  [[ $? ]] &amp;amp;&amp;amp; _success "${DIR} created, repository downloaded and extracted"

  # Change to the dotfiles directory
  cd "${DIR}"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What this is doing is creating a &lt;code&gt;/dotfiles&lt;/code&gt; directory at &lt;code&gt;DIR&lt;/code&gt;, downloading a tarball of your latest &lt;code&gt;main&lt;/code&gt; branch, extracting the file, cleaning up, and finally changing your working directory to &lt;code&gt;/usr/local/opt/dotfiles&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we've downloaded your dotfiles we need a basic function to grab your dotfiles from the &lt;code&gt;/configs&lt;/code&gt; folder and create symlinks to them in your home directory. Here it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /install
link_dotfiles() {
  # symlink files to the HOME directory.
  if [[ -f "${DIR}/opt/files" ]]; then
    _process "→ Symlinking dotfiles in /configs"

    # Set variable for list of files
    files="${DIR}/opt/files"

    # Store IFS separator within a temp variable
    OIFS=$IFS
    # Set the separator to a carriage return &amp;amp; a new line break
    # read in passed-in file and store as an array
    IFS=$'\r\n'
    links=($(cat "${files}"))

    # Loop through array of files
    for index in ${!links[*]}
    do
      for link in ${links[$index]}
      do
        _process "→ Linking ${links[$index]}"
        # set IFS back to space to split string on
        IFS=$' '
        # create an array of line items
        file=(${links[$index]})
        # Create symbolic link
        ln -fs "${DIR}/${file[0]}" "${HOME}/${file[1]}"
      done
      # set separater back to carriage return &amp;amp; new line break
      IFS=$'\r\n'
    done

    # Reset IFS back
    IFS=$OIFS

    source "${HOME}/.bash_profile"

    [[ $? ]] &amp;amp;&amp;amp; _success "All files have been copied"
  fi
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Looks a bit complex, but what's happening here is actually quite simple. It looks at the &lt;code&gt;/opt/files&lt;/code&gt; file we created, which lists each of your dotfiles, and loops through each line. It then creates a symlink in your home directory for each of those pointing to the files in your &lt;code&gt;/usr/local/opt/&amp;lt;repo name&amp;gt;/configs&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-putting-it-all-together" class="anchor"&gt;
  &lt;/a&gt;
  3. Putting it all together
&lt;/h2&gt;

&lt;p&gt;Finally, we need to actually run these functions for things to actually happen. Here's how I like to do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /install
install() {
  download_dotfiles
  link_dotfiles
}

install
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Place that snippet at the bottom of your &lt;code&gt;install&lt;/code&gt; file and you're ready to go. &lt;strong&gt;Keep in mind that running this script will replace any dotfiles you've listed in your &lt;code&gt;files&lt;/code&gt; file!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, running the following command in your terminal will execute our script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bash -c "$(curl -#fL raw.githubusercontent.com/&amp;lt;your github username&amp;gt;/&amp;lt;your dotfiles repo name&amp;gt;/main/install)"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the next &lt;em&gt;installments&lt;/em&gt; 😂 we'll expand on this by having it install our tooling as well as setting up an update script.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, &lt;a href="https://twitter.com/freddiecarthy"&gt;I'd love to hear about it on Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>bash</category>
      <category>git</category>
      <category>github</category>
      <category>dotfiles</category>
    </item>
    <item>
      <title>Building highly reusable React.js components using compound pattern</title>
      <author>Junior Garcia</author>
      <pubDate>Wed, 23 Dec 2020 03:08:47 +0000</pubDate>
      <link>https://dev.to/jrgarciadev/building-highly-reusable-react-js-components-using-compound-pattern-1ikj</link>
      <guid>https://dev.to/jrgarciadev/building-highly-reusable-react-js-components-using-compound-pattern-1ikj</guid>
      <description>&lt;p&gt;Today I bring you a way to create a highly reusable React component using an advance pattern called &lt;strong&gt;Compound&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compound-components-pattern" class="anchor"&gt;
  &lt;/a&gt;
  Compound Components pattern
&lt;/h2&gt;

&lt;p&gt;The keyword in the pattern’s name is the word &lt;strong&gt;Compound&lt;/strong&gt;,  the word compound refers to something that is composed of two or more separate elements.&lt;/p&gt;

&lt;p&gt;With respect to React components, this could mean a component that is composed of two or more separate components. The main component is usually called the &lt;strong&gt;parent&lt;/strong&gt;, and the separate composed components, &lt;strong&gt;children&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Look at the following example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jdi8Iz_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608509165705/CDiIjW3Uw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jdi8Iz_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608509165705/CDiIjW3Uw.png" alt="codeimg-twitter-instream-image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, &lt;code&gt;&amp;lt;Select&amp;gt;&lt;/code&gt; is the &lt;strong&gt;parent&lt;/strong&gt; component and the &lt;code&gt;&amp;lt;Select.Option&amp;gt;&lt;/code&gt; are children components&lt;/p&gt;

&lt;p&gt;The overall behaviour of a select element also relies on having these composed option elements as well. Hence, they are connected to one another.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;state&lt;/strong&gt; of the entire component is managed by &lt;code&gt;Select&lt;/code&gt; component with all &lt;code&gt;Select.Option&lt;/code&gt; child components dependent on that state.&lt;/p&gt;

&lt;p&gt;Do you get a sense of what compound components are now?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Compound components are just one of many ways to express the API for your components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are going to build the &lt;code&gt;Select&lt;/code&gt; component we saw above which will be composed of 2 additional components &lt;code&gt;Select Dropdown&lt;/code&gt; and &lt;code&gt;Select Option&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PCya1CKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608513848939/NpwJIlBJK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCya1CKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608513848939/NpwJIlBJK.png" alt="component-mockup.png"&gt;&lt;/a&gt;&lt;br&gt;
In the code block above, you’ll notice I have used expressions like this: &lt;code&gt;Select.Option&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can do this as well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Yp66VbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608512608871/UnIIVBxt2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Yp66VbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608512608871/UnIIVBxt2.png" alt="codeimg-twitter-instream-image (2).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both work but it is a matter of personal preference. In my opinion, it communicates the dependency of the main component well, but that is just my preference.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Feel free to use whatever component looks best to you!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#building-the-compound-child-components" class="anchor"&gt;
  &lt;/a&gt;
  Building the compound child components
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Select&lt;/code&gt; is our main component, will keep track of the state, and it will do this via a boolean variable called &lt;strong&gt;visible&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// select state &lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Select&lt;/code&gt; component needs to communicate the state to every child component regardless of their position in the nested component tree.&lt;/p&gt;

&lt;p&gt;Remember that the children are dependent on the parent compound component for the state.&lt;/p&gt;

&lt;p&gt;What would be the best way to do it?&lt;/p&gt;

&lt;p&gt;We need to use the &lt;a href="https://reactjs.org/docs/context.html"&gt;React Context API&lt;/a&gt; to hold the component state and expose the &lt;strong&gt;visible&lt;/strong&gt; property via the &lt;strong&gt;Provider&lt;/strong&gt; component. Alongside the &lt;strong&gt;visible&lt;/strong&gt; property, we will also expose a string prop to hold the selected option &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We’ll be creating this in a file called &lt;code&gt;select-context.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SelectContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useSelectContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SelectContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we have to create a file called &lt;code&gt;select-dropdown.js&lt;/code&gt; which is the container for the select options.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I use  &lt;a href="//styled-components.com"&gt;Styled Components&lt;/a&gt; for the styles, feel free to use whatever styling way looks best to you!&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prop-types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyledDropdown&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SelectDropdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledDropdown&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledDropdown&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;SelectDropdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oneOfType&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arrayOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;
  &lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isRequired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SelectDropdown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we need to create a file called &lt;code&gt;styles.js&lt;/code&gt; to save component styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledDropdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  position: absolute;
  border-radius: 1.375rem;
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.12);
  background-color: #fff;
  max-height: 15rem;
  width: 80vw;
  overflow-y: auto;
  overflow-anchor: none;
  padding: 1rem 0;
  opacity: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
  visibility: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;visible&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
  top: 70px;
  left: 10px;
  z-index: 1100;
  transition: opacity 0.2s, transform 0.2s, bottom 0.2s ease,
    -webkit-transform 0.2s;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that with the &lt;code&gt;visible&lt;/code&gt; property we control the visibility of the dropdown&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then we need to create the children component,  for this, we create a file called &lt;strong&gt;select-option.js&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSelectContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./select-context&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyledOption&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prop-types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SelectOption&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;identValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;disableAll&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelectContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDisabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;disableAll&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;disableAll&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;identValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;identValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#f0eef1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#3378F7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hoverBgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#f0eef1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#888888&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#888888&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;identValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;identValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledOption&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;hoverBgColor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hoverBgColor&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;idDisabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledOption&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;SelectOption&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oneOfType&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arrayOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;
  &lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SelectOption&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I know it's confused, but I’ll break it down.&lt;/p&gt;

&lt;p&gt;First, let's focus on the following line of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const { updateValue, value, disableAll } = useSelectContext();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We use &lt;code&gt;useSelectContext()&lt;/code&gt; from &lt;code&gt;select-context.js&lt;/code&gt; to access the context data, "⚠️Spoiler alert": we are going to manage this data on our main component, Yes you are correct is the &lt;code&gt;Select&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; prop from &lt;code&gt;context&lt;/code&gt; is the selected value.&lt;/p&gt;

&lt;p&gt;Also, we use &lt;code&gt;useMemo&lt;/code&gt; on several occasions to prevent unnecessary renders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#f0eef1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#3378F7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;useMemo&lt;/code&gt; takes a callback that returns the &lt;code&gt;string&lt;/code&gt; value with hexadecimal colour code and we pass an array dependency [selected, isDisabled]. This means that the memoized value remains the same unless the dependencies change.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If you have a theme you can use the &lt;code&gt;HOC&lt;/code&gt; (High Order Component) component called &lt;code&gt;withTheme&lt;/code&gt; and use your colours&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not sure how &lt;code&gt;useMemo&lt;/code&gt; works? Have a look at this  &lt;a href="https://react-hooks-cheatsheet.com/usememo"&gt;cheatsheet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now to finalize the &lt;code&gt;SelectOption&lt;/code&gt; component we need to create the &lt;code&gt;StyledOption&lt;/code&gt; component for that we go to the &lt;code&gt;styles.js&lt;/code&gt; file and write the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledOption&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  display: flex;
  max-width: 100%;
  justify-content: flex-start;
  align-items: center;
  font-weight: normal;
  font-size: 1.3rem;
  height: 4rem;
  padding: 0 2rem;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  user-select: none;
  border: 0;
  cursor: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not-allowed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pointer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
  transition: background 0.2s ease 0s, border-color 0.2s ease 0s;
  &amp;amp;:hover {
    background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hoverBgColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-the-main-component" class="anchor"&gt;
  &lt;/a&gt;
  Creating the main component
&lt;/h2&gt;

&lt;p&gt;Up to this point, we have all the child components of our main component, now we are going to create the main component &lt;code&gt;Select&lt;/code&gt;, for that we need to create a file called &lt;code&gt;select.js&lt;/code&gt; with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SelectContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./select-context&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyledSelect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;StyledValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;StyledIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TruncatedText&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SelectDropdown&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./select-dropdown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pickChildByProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../utils&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChevronDown&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-iconly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prop-types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;customValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ChevronDown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Choose one&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;customValue&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;updateVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;disableAll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectedChild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;optionChildren&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pickChildByProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;optionChildren&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValidElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;preventAllEvents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SelectContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledSelect&lt;/span&gt;
        &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledValue&lt;/span&gt; &lt;span class="na"&gt;isPlaceholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TruncatedText&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"4rem"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;selectedChild&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;TruncatedText&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledValue&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledIcon&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Icon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledIcon&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SelectDropdown&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SelectDropdown&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledSelect&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SelectContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oneOfType&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arrayOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;
  &lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I will start by explaining the propTypes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;children&lt;/code&gt;: Are the array of &lt;code&gt;Select.Option&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;disabled&lt;/code&gt;: Is used to set the disabled state in &lt;code&gt;Select&lt;/code&gt; and &lt;code&gt;Select.Option&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;value&lt;/code&gt;: Is the default selected value &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;placeholder&lt;/code&gt;: Is used to show a text if there aren't any &lt;code&gt;Select.Option&lt;/code&gt; selected.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onChange&lt;/code&gt;: Callback to communicate when the value has changed&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;className&lt;/code&gt;: Class name for &lt;code&gt;Select&lt;/code&gt; component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perfect now let's focus on the &lt;code&gt;useState&lt;/code&gt; React hook, it's used to manage selected value status and dropdown menu visibility&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To set the initial value of &lt;code&gt;Select&lt;/code&gt; (in case one is set), we need to use the hook &lt;code&gt;useEffect&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;customValue&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Not sure how &lt;code&gt;useEffect&lt;/code&gt; works? Have a look at this  &lt;a href="https://react-hooks-cheatsheet.com/useeffect"&gt;cheatsheet&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Another hooks we are using is &lt;code&gt;useCallback&lt;/code&gt;, this hook will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. shouldComponentUpdate).&lt;/p&gt;

&lt;p&gt;useCallback(fn, deps) is equivalent to useMemo(() =&amp;gt; fn, deps).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not sure how &lt;code&gt;useCallback&lt;/code&gt; works? Have a look at this  [cheatsheet]&lt;a href="https://react-hooks-cheatsheet.com/usecallback"&gt;https://react-hooks-cheatsheet.com/usecallback&lt;/a&gt;). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we are going to focus on context initial value, let's see following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;updateVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;disableAll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SelectContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     // ---- ///
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SelectContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above code, we use the &lt;code&gt;useMemo&lt;/code&gt; to prevent unnecessary re-renders passing in the array the props that can change, then we pass that initial value to the&lt;code&gt;SelectContect.Provider&lt;/code&gt;, we have been using each of these properties in the components we saw earlier.&lt;/p&gt;

&lt;p&gt;Last but not least, we have a function to get selected option component, let's see following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pickChildByProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withoutPropChildren&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValidElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;targetChildren&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;withoutPropChildren&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;targetChildren&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectedChild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;optionChildren&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pickChildByProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;optionChildren&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValidElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;preventAllEvents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In a few words, what we do is clone the selected option and put it in the header of the &lt;code&gt;Select&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Now we need to create the necessary styles for the &lt;code&gt;Select&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledSelect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  position: relative;
  z-index: 100;
  display: inline-flex;
  align-items: center;
  user-select: none;
  white-space: nowrap;
  cursor: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not-allowed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pointer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
  width: 80vw;
  transition: border 0.2s ease 0s, color 0.2s ease-out 0s,
    box-shadow 0.2s ease 0s;
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.12);
  border: 2px solid #f5f5f5;
  border-radius: 3rem;
  height: 4rem;
  padding: 0 1rem 0 1rem;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#f0eef1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
  &amp;amp;:hover {
    border-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#888888&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#3378F7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  position: absolute;
  right: 2rem;
  font-size: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  top: 50%;
  bottom: 0;
  transform: translateY(-50%)
    rotate(&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;180&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;deg);
  pointer-events: none;
  transition: transform 200ms ease;
  display: flex;
  align-items: center;
  color: #999999;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  display: inline-flex;
  flex: 1;
  height: 100%;
  align-items: center;
  line-height: 1;
  padding: 0;
  margin-right: 1.25rem;
  font-size: 1.3rem;
  color: "#888888";
  width: calc(100% - 1.25rem);
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;StyledOption&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; {
    border-radius: 0;
    background-color: transparent;
    padding: 0;
    margin: 0;
    color: inherit;
    &amp;amp;:hover {
      border-radius: inherit;
      background-color: inherit;
      padding: inherit;
      margin: inherit;
      color: inherit;
    }
  }
  &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt; &lt;span class="nx"&gt;isPlaceholder&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;isPlaceholder&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
      color: #bcbabb;
    `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Feel free to change the colours, you can use the &lt;code&gt;theme&lt;/code&gt; object of &lt;code&gt;styled-components&lt;/code&gt; to get the theme colours&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, we need to export our component 👏🏻&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SelectOption&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./select-option&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Remember this is just a personal preference. It's not mandatory&lt;/span&gt;
&lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SelectOption&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Congratulations! 🎊, now you have a reusable highly optimized component created, you can apply this pattern in many cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-result" class="anchor"&gt;
  &lt;/a&gt;
  Final result
&lt;/h2&gt;

&lt;p&gt;Here you can see the final result:&lt;br&gt;
&lt;iframe src="https://codesandbox.io/embed/react-compound-pattern-73rx6"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>pattern</category>
    </item>
    <item>
      <title>An Annotated Guide to React Server Components</title>
      <author>swyx</author>
      <pubDate>Wed, 23 Dec 2020 01:18:46 +0000</pubDate>
      <link>https://dev.to/swyx/an-annotated-guide-to-the-react-server-components-demo-2a83</link>
      <guid>https://dev.to/swyx/an-annotated-guide-to-the-react-server-components-demo-2a83</guid>
      <description>&lt;p&gt;The React team &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;announced React Server Components&lt;/a&gt; this week with a &lt;a href="https://www.youtube.com/watch?v=TQQPAU21ZUw&amp;amp;feature=emb_title"&gt;talk&lt;/a&gt;, &lt;a href="https://github.com/josephsavona/rfcs/blob/server-components/text/0000-server-components.md"&gt;RFC&lt;/a&gt;, and &lt;a href="https://github.com/reactjs/server-components-demo/"&gt;demo&lt;/a&gt;. It is a lot to go through (especially for a holiday week), but I did. Here are my notes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What are React Server Components?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They are an experimental, upcoming feature of React that lets you render Components &lt;strong&gt;only&lt;/strong&gt; on the Server. This has a few implications; here are my top 2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RSCs have &lt;strong&gt;Zero&lt;/strong&gt; client JS bundle impact, so they can greatly reduce your overall bundle size. Despite only rendering on the server, they don't have to be static; you can refetch Server Components and the server will &lt;em&gt;stream&lt;/em&gt; updates down, &lt;em&gt;without losing state&lt;/em&gt; in Client Components.&lt;/li&gt;
&lt;li&gt;You can &lt;strong&gt;directly query your database&lt;/strong&gt; inside a Server Component &lt;em&gt;without setting up GraphQL, API endpoints, or state management&lt;/em&gt; - and keep the query up to date as your serverside data changes. These queries are also faster because you save client-server roundtrips and waterfalls.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: They must be named with a &lt;code&gt;.server.js&lt;/code&gt; extension and follow &lt;a href="https://github.com/josephsavona/rfcs/blob/server-components/text/0000-server-components.md#capabilities--constraints-of-server-and-client-components"&gt;some constraints&lt;/a&gt; - mainly, they can't use state, effects, or DOM APIs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What problems do React Server Components solve?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They solve for Good User Experience, Cheap Maintenance, and Fast Performance in React apps (&lt;em&gt;as defined in the talk notes below&lt;/em&gt;). There are multiple benefits for both developers and users, and the size of benefit depends on the use case, which makes this difficult to fully explain. &lt;/p&gt;

&lt;p&gt;However the headline opportunity here is to &lt;strong&gt;greatly&lt;/strong&gt; reduce production React app bundle sizes (tests have seen as much as 29% reduction, but can easily be higher depending on your app) while not sacrificing modern app-like user experiences (&lt;em&gt;this again has multiple meanings - demonstrated in the demo below&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Finally, React Server Components make it &lt;em&gt;easy&lt;/em&gt; to create &lt;strong&gt;hybrid&lt;/strong&gt; apps - giving you the power to pick a sliding scale between a fully clientside app or a fully serverside app and everything in between - and not have to do major rewrites to change paradigms as requirements change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#annotated-talk-with-timestamps" class="anchor"&gt;
  &lt;/a&gt;
  Annotated Talk With Timestamps
&lt;/h2&gt;

&lt;p&gt;I will link to the timestamps with my commentary below, but you can view Dan Abramov and Lauren Tan's full talk here:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TQQPAU21ZUw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=105"&gt;1:45&lt;/a&gt; Dan introduces the main constraints that React is trying to solve for:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Good User Experience&lt;/strong&gt; - we want to &lt;a href="https://reactjs.org/docs/concurrent-mode-suspense.html#what-suspense-lets-you-do"&gt;orchestrate intentionally designed loading states&lt;/a&gt;. Items that should appear together must appear together, instead of jumping around on screen based on async API requests resolving.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cheap Maintenance&lt;/strong&gt; - we want to &lt;a href="https://overreacted.io/optimized-for-change/"&gt;optimize for change&lt;/a&gt;. Make it easy to delete and move code around from component to component or from client to server or from stateless to stateful. To do this, data requirements should be delegated as low down the component tree as possible, rather than hoisted up to the highest common parent.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fast Performance&lt;/strong&gt; - we want to decrease JS bundle size, avoid client-server roundtrips and &lt;a href="https://reactjs.org/docs/concurrent-mode-suspense.html#traditional-approaches-vs-suspense"&gt;network waterfalls&lt;/a&gt;. If components are not dynamic, we should render them once on the server (and fetch their data), and not send their JS to the client. We should cache results on the client if possible. Requests that can be done in parallel should not be done in sequence.&lt;/li&gt;
&lt;li&gt;Historically, React forced you to choose 2 out of 3 of these constraints. With React Server Components, you can have all 3. (Facebook already had all 3 with Relay and GraphQL, but not everyone has a GraphQL backend, nor should they. React Server Components are a more general and easily adopted alternative.)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/reactjs/server-components-demo/https://youtu.be/TQQPAU21ZUw?t=725"&gt;12:05&lt;/a&gt; Lauren introduces the &lt;a href="https://github.com/reactjs/server-components-demo/"&gt;React Server Components Demo&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Server Components are indicated by the new &lt;code&gt;.server.js&lt;/code&gt; extension (&lt;a href="https://github.com/reactjs/rfcs/blob/235f27c12aa893efd2378ec3c4a9b0b221641861/text/0000-server-module-conventions.md"&gt;separate Module Conventions RFC here&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Client Components are also indicated by a &lt;code&gt;.client.js&lt;/code&gt; extension. You can switch Client Components to Server Components simply by renaming them.&lt;/li&gt;
&lt;li&gt;(Explained later) Shared Components just have the standard &lt;code&gt;.js&lt;/code&gt; extension.&lt;/li&gt;
&lt;li&gt;(Explained later) There are three new React I/O libraries used in the demo:

&lt;ul&gt;
&lt;li&gt;react-fetch (wraps the fetch API)&lt;/li&gt;
&lt;li&gt;react-pg (to access PostgreSQL)&lt;/li&gt;
&lt;li&gt;react-fs (to access the Filesystem)&lt;/li&gt;
&lt;li&gt;These are &lt;a href="https://reactjs.org/docs/concurrent-mode-suspense.html#solving-race-conditions-with-suspense"&gt;caches that let you Suspend&lt;/a&gt; rendering while data is being requested.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Fetching data on the server is much faster than fetching from the client, so this is a good optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=975"&gt;16:10&lt;/a&gt; Server Components have zero bundle size impact

&lt;ul&gt;
&lt;li&gt;React doesn't download any JS for Server Components, &lt;em&gt;including for any of their dependencies.&lt;/em&gt; This is a great strategy for heavy dependencies that are only used on the server.&lt;/li&gt;
&lt;li&gt;(Explained later) JSX props/children will be rendered by the Server Component &lt;em&gt;before&lt;/em&gt; it reaches the Client. So you can pass them Shared Components and save on bundle size too.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=1046"&gt;17:25&lt;/a&gt; Limitation: Server Components cannot be interactive

&lt;ul&gt;
&lt;li&gt;No &lt;code&gt;useState&lt;/code&gt; or &lt;code&gt;useEffect&lt;/code&gt;, no event handlers (e.g. &lt;code&gt;onClick&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Client Components must receive &lt;em&gt;serializable&lt;/em&gt; props from Server Components (e.g. no functions. JSX children/props is fine)&lt;/li&gt;
&lt;li&gt;The RFC has more on &lt;a href="https://github.com/josephsavona/rfcs/blob/server-components/text/0000-server-components.md#capabilities--constraints-of-server-and-client-components"&gt;the limitations of Server and Client Components&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=1370"&gt;22:50&lt;/a&gt; Difference between SSR and Server Components

&lt;ul&gt;
&lt;li&gt;You can refetch the Server Component tree so that HTML updates stream down, &lt;em&gt;without any extra JS for the refetched Server Components.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;But the parts of the app with clientside state are preserved&lt;/strong&gt;. This is the main difference!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/sugarpirate_/status/1341141200808624128?s=20"&gt;Lauren later elaborated&lt;/a&gt;: "SSR of client JS apps is an illusion. You render your JS on the server into HTML. You serve that HTML to your client so it appears to have fast startup. But you still have to wait for your JS to reach the user before anything can be interactive (hydration).  &lt;strong&gt;After hydration, SSR can't be used again - it's typically only used for initial loads. We can refetch React Server Components as many times as we like.&lt;/strong&gt;"&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/josephsavona/rfcs/blob/server-components/text/0000-server-components.md#does-this-replace-ssr"&gt;The RFC FAQ&lt;/a&gt; also comments on the differences and complementarity of SSR and Server Components.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=1605"&gt;26:45&lt;/a&gt; Shared Components

&lt;ul&gt;
&lt;li&gt;Shared Components can render on either the server OR the client. They just have a &lt;code&gt;.js&lt;/code&gt; extension.&lt;/li&gt;
&lt;li&gt;Shared Components have &lt;a href="https://github.com/josephsavona/rfcs/blob/server-components/text/0000-server-components.md#sharing-code-between-server-and-client"&gt;the combined limitations of Server and Client Components&lt;/a&gt;, explained in the RFC.&lt;/li&gt;
&lt;li&gt;Shared Components rendered on the server won't be sent to the client, &lt;em&gt;unless&lt;/em&gt; they are rendered on the client, in which case they will be &lt;strong&gt;downloaded on demand!&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=1828"&gt;30:26&lt;/a&gt; Server Components can directly query the database

&lt;ul&gt;
&lt;li&gt;Because we can refetch the Server Component tree (as explained above)...&lt;/li&gt;
&lt;li&gt;a single Server Component that takes dynamic props and runs a database query (like a Search component) &lt;strong&gt;can update live!&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;No local state management or API requests needed.&lt;/em&gt; Just changing props and refetching the Server Component.&lt;/li&gt;
&lt;li&gt;This Component stays updated even as you add new items to the database!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't skim over this part&lt;/strong&gt; - This is a literal WOW moment - see us realize this at the 1h 10min mark on &lt;a href="https://youtu.be/La4agIEgoNg"&gt;the React Serverless Components demo livestream&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=2001"&gt;33:21&lt;/a&gt; Suspense and Slow Network UX

&lt;ul&gt;
&lt;li&gt;When the network is slow, we should show some immediate feedback to users as they wait. Suspense and Server Components work well together for this.&lt;/li&gt;
&lt;li&gt;Method 1: We can use Suspense fallbacks to show user some feedback on Server Components, even while waiting for the rest of the server tree to be rendered (eg due to fetching data)

&lt;ul&gt;
&lt;li&gt;This is possible because &lt;strong&gt;Server Components don't render to HTML&lt;/strong&gt;, they render to a special format to be streamed down to clients.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Method 2: We can also use Suspense transitions to respond immediately even before the response has started streaming down.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=2216"&gt;36:50&lt;/a&gt; Recap of Demo Points. Server Components...

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=2214"&gt;36:54&lt;/a&gt; &lt;strong&gt;have ZERO effect on bundle size&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;having the ability to decide which components to put on the client or on the server gives you more control over bundle size&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=2262"&gt;37:42&lt;/a&gt; &lt;strong&gt;let you access backend resources DIRECTLY&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You can use the same paradigm for server &amp;amp; client data fetching&lt;/li&gt;
&lt;li&gt;The community will be able to create more React IO library wrappers to cache results for more data sources&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=2464"&gt;41:04&lt;/a&gt; &lt;strong&gt;let you only load the code that is necessary&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;if a Server Component conditionally renders a Client Component, the server will only send an instruction to download the Client Component &lt;em&gt;if it is present in the server output&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;This works like dynamic imports, but is automatically done instead of requiring manual loading&lt;/li&gt;
&lt;li&gt;To enable this, Integrated plugins are being written with webpack, Next.js, and Parcel teams.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=2597"&gt;43:17&lt;/a&gt; &lt;strong&gt;let you decide the tradeoff for every concrete usecase&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Eliminate the artificial boundary between client and server:

&lt;ul&gt;
&lt;li&gt;Put data fetching and preprocessing code on Server&lt;/li&gt;
&lt;li&gt;Put fast interaction response code on Client&lt;/li&gt;
&lt;li&gt;But they expect that the majority of components will be Shared.&lt;/li&gt;
&lt;li&gt;Example: CMS where you render articles on the server (so can be Server component most of the time) but when in admin panel you want to edit them (so need to render on client)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=2665"&gt;44:25&lt;/a&gt; &lt;strong&gt;provide modern UX with server-driven mental model&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;create modern and app-like UI's&lt;/li&gt;
&lt;li&gt;but write them like an old-school web page&lt;/li&gt;
&lt;li&gt;Example: the Search component in Lauren's demo is a Server Component that refetches based on a Client Component's state, but that Client Component's state persists&lt;/li&gt;
&lt;li&gt;Usecase: CSS animation on property change can fire because now the DOM will not be destroyed&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TQQPAU21ZUw?t=2834"&gt;47:14&lt;/a&gt; Recap of Recap &amp;amp; looking ahead

&lt;ul&gt;
&lt;li&gt;It's Opt-in, still in R&amp;amp;D (missing core APIs eg Server Component Router, and need to finalize Concurrent Mode), and will be available to everyone even those who don't use Next.js&lt;/li&gt;
&lt;li&gt;Production tests at FB have seen up to 29% reduction in bundle sizes&lt;/li&gt;
&lt;li&gt;Don't make courses on this or put this in production. Just play with the demo.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also see more commentary on &lt;a href="https://twitter.com/swyx/status/1341122002866749440"&gt;the Twitter thread here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo-walkthrough" class="anchor"&gt;
  &lt;/a&gt;
  Demo Walkthrough
&lt;/h2&gt;

&lt;p&gt;The React Team also released the demo shown in the talk: &lt;a href="https://github.com/reactjs/server-components-demo/"&gt;https://github.com/reactjs/server-components-demo/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However there are some difficult setup steps and a lot of things to try in the demo. I recently did a 2 hour walkthrough of every part, with timestamps.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/La4agIEgoNg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can also put Server Components into a serverless function, &lt;a href="https://youtu.be/VA3TFymZlW4"&gt;as I found today with a lot of difficulty&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-reflections" class="anchor"&gt;
  &lt;/a&gt;
  Personal Reflections
&lt;/h2&gt;

&lt;p&gt;This is &lt;strong&gt;the beginning of the end&lt;/strong&gt; of a very, very long journey in React stretching as far back as 2014, when &lt;a href="https://twitter.com/jordwalke/status/500587022890061824"&gt;Jordan Walke first mentioned Async Rendering&lt;/a&gt; (the old name for &lt;a href="https://github.com/sw-yx/concurrent-react-notes/tree/master/legacy"&gt;Concurrent React&lt;/a&gt;) was a possibility.&lt;/p&gt;

&lt;p&gt;My relationship with React Suspense started just after Dan Abramov's JSConf Iceland 2018 talk introducing it. It blew everyone's mind and ripped up everything I thought I knew about how React apps could and should be written. I stayed up all night to &lt;a href="https://twitter.com/swyx/status/969451899849191425?s=20"&gt;write a walkthrough of that demo&lt;/a&gt;. I had no React presence at the time but I've been following this idea throughout the ensuing 2.5 years.&lt;/p&gt;

&lt;p&gt;I suspect how React Server Components look to people who have followed the journey are wholly different to people who are only just looking at this today. Kind of like how you might really enjoy a movie just for your snobby annoying friend to tell you &lt;strong&gt;"the book was better"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To me, "the book" provided a whole lot more context that, while it is irrelevant today, gives me a great deal more appreciation for how we got here and how things might work under the hood.&lt;/p&gt;

&lt;p&gt;Here is all the jargon we did NOT discuss at any point in the talk or demo (because they are implementation details or irrelevant today):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sw-yx/concurrent-react-notes/blob/master/legacy/apis/react-suspense.md#important-concepts"&gt;&lt;code&gt;maxDuration&lt;/code&gt; and Just Noticeable Difference heuristics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sw-yx/concurrent-react-notes/blob/master/legacy/apis/time-slicing.md#important-concepts"&gt;Priority Lanes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sw-yx/concurrent-react-notes/blob/master/legacy/apis/hidden.md"&gt;&lt;code&gt;hidden={true}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dan_abramov/status/1200111677833973760"&gt;Progressive Hydration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/swyx/status/1193101703215759361"&gt;Selective Hydration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://philippspiess.com/scheduling-in-react/"&gt;Scheduling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/acdlite/status/969747179731533824?s=20"&gt;Transparent Asynchrony&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dan_abramov/status/969629411996766208"&gt;Idempotency vs Purity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/acdlite/status/972542669040865280?s=20"&gt;Coroutines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.swyx.io/react-outside/"&gt;Concurrency, Algebraic Effects, Lazy Eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itnext.io/tips-for-server-side-rendering-with-react-e42b1b7acd57"&gt;Two pass SSR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sw-yx/concurrent-react-notes/blob/master/legacy/Timeline.md#streaming-ssr-specific"&gt;Streaming SSR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/updates/2019/02/rendering-on-the-web#trisomorphic"&gt;Trisomorphic Rendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jasonformat.com/islands-architecture"&gt;Islands Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead, we are given one concept today - &lt;strong&gt;Server Components&lt;/strong&gt;. If you squint hard enough, you might even observe &lt;a href="https://mobile.twitter.com/swyx/status/1341535594543910912"&gt;there is no API&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaways" class="anchor"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;p&gt;Because the React team has consistently communicated their thoughts through the years, the main benefit of React Server Components is the same as I've commented on in &lt;a href="https://twitter.com/swyx/status/1317635707838496768?s=20"&gt;my writing&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=18F5v1diO_A"&gt;speaking&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Given a baseline React runtime, React Server Components let you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Greatly reduce real-world app sizes by making it easy for you to not send down unnecessary JS (the proverbial &lt;a href="https://twitter.com/dan_abramov/status/1259618524751958016?s=20"&gt;disappearing app&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Have Client and Server components seamlessly operate in the same tree so you don't have to change paradigms when requirements change. &lt;/li&gt;
&lt;li&gt;Serve data much faster and easier by skipping client-server waterfalls and directly accessing backend resources.&lt;/li&gt;
&lt;li&gt;Preserve clientside state and DOM nodes even when loading Server Components so you can even do page transitions, CSS animations and persist input focus.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a wonderful new area of opportunity for React developers, and the ecosystem is set to see tremendous growth in 2021. I feel certain that it is also going to spark similar efforts in other frameworks (because the case for Concurrent Mode has for the first time been made beyond time slicing and lazy loading components).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related-reads" class="anchor"&gt;
  &lt;/a&gt;
  Related Reads
&lt;/h2&gt;

&lt;p&gt;I will update this with selected other pieces over time. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Addy Osmani's take on &lt;a href="https://addyosmani.com/blog/react-server-components/"&gt;React Server Components&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hotwire.dev"&gt;https://hotwire.dev&lt;/a&gt; DHH's bundling of the Turbolinks + Stimulus + Strada stack used in the Hey email app. RSCs have been (loosely!) compared to "&lt;a href="https://twitter.com/dan_abramov/status/1341230932729192448?s=20"&gt;Turbolinks for Virtual DOM&lt;/a&gt;" &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
    </item>
  </channel>
</rss>
