<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Docker, easy start with nodejs-express app (Part-1)</title>
      <author>Omar Diaaeldine Elwakeel</author>
      <pubDate>Wed, 13 Oct 2021 18:36:06 +0000</pubDate>
      <link>https://dev.to/omardiaa48/docker-easy-start-with-nodejs-express-app-part-1-1ien</link>
      <guid>https://dev.to/omardiaa48/docker-easy-start-with-nodejs-express-app-part-1-1ien</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mDzCXPYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3mzhgiakhspdknm7fdc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDzCXPYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3mzhgiakhspdknm7fdc.jpg" alt="Hello Docker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#docker-what-is-it-how-is-it-beneficial-how-to-easily-use-it"&gt;
  &lt;/a&gt;
  Docker, what is it? how is it beneficial? how to easily use it?
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#this-is-going-to-be-a-series-of-posts-this-will-be-the-first-of-them-to-explain-some-easy-steps-to-start-using-docker-containers-and-deploy-apps-with-it-in-this-very-step-we-are-going-to-use-nodejs-with-express-framework-to-host-a-hello-world-app"&gt;
  &lt;/a&gt;
  This is going to be a series of posts, this will be the first of them to explain some easy steps to start using docker containers and deploy apps with it, in this very step we are going to use &lt;a href="https://nodejs.org/en/"&gt;nodejs&lt;/a&gt; with &lt;a href="https://expressjs.com/"&gt;express&lt;/a&gt; framework to host a hello world app.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-docker"&gt;
  &lt;/a&gt;
  So what is docker?
&lt;/h3&gt;

&lt;p&gt;Docker is lovely developer tool that makes it easy to install and run software without worrying about setup and dependencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-is-it-beneficial"&gt;
  &lt;/a&gt;
  How is it beneficial?
&lt;/h3&gt;

&lt;p&gt;This is because it makes containers, imagine a multi layer cake where you take a verticle slice of it, so you take from each layer a portion but you don't care about the rest of the slices. Here is an illustration for it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wr6pkjZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5kocawlk41qq7h27grz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wr6pkjZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5kocawlk41qq7h27grz.JPG" alt="Docker containers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which makes it easy for microservices, one example that we will be seeing soon is deploying multiple services with different environemnts or maybe different versions of the very same dependency, like different nodejs versions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it?
&lt;/h3&gt;

&lt;p&gt;This is my favorite part, where it's enough with the talking and we start to write some code!!&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#prerequirements"&gt;
  &lt;/a&gt;
  Pre-requirements:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Installed &lt;strong&gt;NodeJs&lt;/strong&gt;, any version and that's what is cool with docker!!&lt;/li&gt;
&lt;li&gt;Installed &lt;strong&gt;npm&lt;/strong&gt;, which usually comes with Nodejs.&lt;/li&gt;
&lt;li&gt;Installed &lt;strong&gt;Docker&lt;/strong&gt; for windows,linux,...etc&lt;/li&gt;
&lt;li&gt;Registered &lt;strong&gt;Dockerhub account&lt;/strong&gt;, it's for free ;)
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First lets setup our server we start by initializing the folder structure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you get a package.json file with initial setup.&lt;/p&gt;

&lt;p&gt;now for express&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm add express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;add the script to the scripts part in package.json&lt;br&gt;
&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;....
  "scripts": {
    "start": "node index.js",
  },
....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;create index.js file in the root directory&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')

const app = express()

app.get('/', (req,res) =&amp;gt; {
  res.send('Hello World!!')
})

server.listen(3000, () =&amp;gt; {
  console.log(`Listening on port 3000`);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in the terminal type, &lt;code&gt;npm run start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;go to the browser and hit localhost:3000 and here it's there, 'Hello world!!'&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-where-is-docker-here-it-comes-in-the-next-steps-"&gt;
  &lt;/a&gt;
  So Where is docker??? Here it comes in the next steps ;)
&lt;/h4&gt;

&lt;p&gt;in the root directory create a file &lt;strong&gt;with no extension with the name Dockerfile&lt;/strong&gt; with the following content&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:alpine

WORKDIR /app
COPY package.json .
RUN npm install
COPY . .

CMD ["npm", "start"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#so-what-is-going-on"&gt;
  &lt;/a&gt;
  So What is going on???
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;FROM node:alpine&lt;/code&gt; -&amp;gt; is you saying to docker you want to start from an initial image that exists publicly on dockerhub, because once you go with docker you have no nodejs runtime that you have on your machine so you need this dependency.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;WORKDIR /app&lt;/code&gt; -&amp;gt; this is the work directory inside the container you are making.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;COPY package.json .&lt;/code&gt;-&amp;gt; here you are copying the package.json file to the work directory, please take notice the '.' context which means to copy in the context directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;RUN npm install&lt;/code&gt; -&amp;gt; to install the required packages, in our case it's expressjs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;COPY . .&lt;/code&gt; -&amp;gt; here we copy everything else to the work directory, which is the source code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;CMD ["npm", "start"]&lt;/code&gt; -&amp;gt; our start script that much match the one in the package.json&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#right-now-you-should-be-having-a-question-why-did-we-copy-twice-why-not-only-one-time-at-the-end"&gt;
  &lt;/a&gt;
  Right now you should be having a question, why did we copy twice, why not only one time at the end??
&lt;/h4&gt;

&lt;p&gt;To answer this, I need you to wait for a second an start make use of this docker image. At this moment you have an image but you cant really use it, we need to do two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build it&lt;/li&gt;
&lt;li&gt;Push it to dockerhub&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After that we can run it.&lt;/p&gt;

&lt;p&gt;So in you terminal run the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t &amp;lt;your docker id&amp;gt;/&amp;lt;name of the image(eg. hello-world)&amp;gt; .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;again notice the . context&lt;/p&gt;

&lt;p&gt;now you should be seeing something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kts5AzzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnwjuffjscxr9yzyv228.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kts5AzzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnwjuffjscxr9yzyv228.png" alt="Docker build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now you have this image locally, to view all your images&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker image ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUeBQYX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aibgoefn3lv19k94t260.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUeBQYX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aibgoefn3lv19k94t260.png" alt="Docker images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now we need to make this image have its way to your hub, So in you terminal run the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker push &amp;lt;your docker id&amp;gt;/&amp;lt;name of the image(eg. hello-world)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to answer the question about copying twice in the Dockerfile configuration, this was because each command makes a layer, so we:&lt;br&gt;
1.Copy the package.json file which has all the dependencies in the project&lt;br&gt;
2.Install them using npm install&lt;br&gt;
3.We copy the rest of the files which is the code&lt;br&gt;
So whenever we make a change in the source code, only the layer that copies the code is affected and we dont install the packages again, in other words the rest of the layers are cahced.&lt;/p&gt;

&lt;p&gt;after that you can got to your docker hub after signing in and you will find it there &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1mksTPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0fsx477bnyg7tl1fsqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1mksTPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0fsx477bnyg7tl1fsqh.png" alt="Docker hub"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#atlast-lets-run-this-image-but-notice-something-while-running-docker-you-can-adjust-the-port-its-listening-on-so-this-app-should-be-listening-to-port-3000-but-we-can-adjust-the-port-where-it-should-take-requests-from-think-of-it-as-an-outside-port"&gt;
  &lt;/a&gt;
  Atlast, let's run this image, but notice something while running docker you can adjust the port it's listening on, so this app should be listening to &lt;strong&gt;port 3000&lt;/strong&gt;, but we can adjust the port where it should take requests from, think of it as an &lt;strong&gt;outside port&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;So in you terminal run the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -p 3005:3000 &amp;lt;your docker id&amp;gt;/&amp;lt;name of the image(eg. hello-world)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4DaTjmUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2iibt7kffd89ozhpps1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4DaTjmUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2iibt7kffd89ozhpps1.png" alt="Image running"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;go and hit &lt;code&gt;localhost:3005/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and you should be seeing the following&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1d00tfal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhdxwb2c3phj3ac8hmr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1d00tfal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhdxwb2c3phj3ac8hmr7.png" alt="Hello world response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-hope-you-liked-this-post-im-intending-the-post-some-other-related-posts-actually-other-parts-of-this-series-where-we-take-it-a-bit-harder-and-a-bit-more-advanced-im-a-starter-myself-so-if-you-noticed-anything-that-you-recommend-against-im-happy-to-hear-from-you-thanks-again"&gt;
  &lt;/a&gt;
  I hope you liked this post, I'm intending the post some other related posts (actually other parts of this series where we take it a bit harder and a bit more advanced), I'm a starter myself, so if you noticed anything that you recommend against, I'm happy to hear from you, Thanks again!!
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>docker</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Beginner Friendly Repository to Contribute in Hacktoberfest</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Wed, 13 Oct 2021 18:25:12 +0000</pubDate>
      <link>https://dev.to/surajondev/beginner-friendly-repository-to-contribute-in-hacktoberfest-3af6</link>
      <guid>https://dev.to/surajondev/beginner-friendly-repository-to-contribute-in-hacktoberfest-3af6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;One of the biggest Open Source events is going on ie Hacktoberfest. You can contribute to any open source project on Github or Gitlab and make valid 4 accepted Pull requests to avail perks. Perks include either T-shirt or plant a tree, depending on you.&lt;/p&gt;

&lt;p&gt;You can participate in the event by registering yourself on &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;&lt;strong&gt;Hacktoberfest&lt;/strong&gt;&lt;/a&gt; with your Github/Gitlab profile.&lt;/p&gt;

&lt;p&gt;I am working as a participant and also as a maintainer to help other beginners to make their contribution to my repo.&lt;/p&gt;

&lt;p&gt;Today I am going to list a few repositories from my GitHub profile, where you can contribute. The repository is beginner-friendly and most are for web developers.&lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-contribute"&gt;
  &lt;/a&gt;
  How to Contribute
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In any repository, Go to the website.&lt;/li&gt;
&lt;li&gt;After learning about the repository and website. Go to Issue Tab.&lt;/li&gt;
&lt;li&gt;You can create a news issue or work on the previous issue.&lt;/li&gt;
&lt;li&gt;Just leave a message in issue regarding working on the issue.&lt;/li&gt;
&lt;li&gt;Then I will assign you on the issue.&lt;/li&gt;
&lt;li&gt;You can work on it and create a pull request.&lt;/li&gt;
&lt;li&gt;If everything goes well, I will merge it.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#uiuxdesign"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/surajondev/UI-UX-Design"&gt;UI-UX-Design&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A repository created to share different components such as Buttons, Forms, containers, Cards, etc. You can improve the previous components and layout of the website. You can also create your component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contribution:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improve the Layout of the website&lt;/li&gt;
&lt;li&gt;Add more components&lt;/li&gt;
&lt;li&gt;Improve Documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href="https://surajondev.github.io/UI-UX-Design/"&gt;https://surajondev.github.io/UI-UX-Design/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Repo:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/surajondev"&gt;
        surajondev
      &lt;/a&gt; / &lt;a href="https://github.com/surajondev/UI-UX-Design"&gt;
        UI-UX-Design
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Different CSS Components
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
UI-UX-Design&lt;/h1&gt;
&lt;p&gt;This is not something using any framework and I think in future I am not going to add any javasscript too.&lt;/p&gt;
&lt;h3&gt;
This is for CSS lover who want to learn UI/UX Designs&lt;/h3&gt;
&lt;h2&gt;
You can visit the site &lt;a href="https://surajondev.github.io/UI-UX-Design/" rel="nofollow"&gt;UI/UX Desing&lt;/a&gt;
&lt;/h2&gt;
&lt;h2&gt;
Following languages have been used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/html/html.png"&gt;&lt;img alt="HTML5" width="26px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--m6BdzRY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/html/html.png"&gt;&lt;/a&gt; HTML&lt;/li&gt;
&lt;li&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/css/css.png"&gt;&lt;img alt="CSS3" width="26px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RgbjQBTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/css/css.png"&gt;&lt;/a&gt; CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/surajondev/UI-UX-Design"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/surajondev/JavaScript"&gt;JavaScript&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A JavaScript-based repository containing projects from Basic to Advance. It already has projects like Coin Flip, Clock, Word Count, Background Changer, etc. You can add more JavaScript-based projects into the repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contribution:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add more JavaScript Project&lt;/li&gt;
&lt;li&gt;Improve Documentation&lt;/li&gt;
&lt;li&gt;Work on other issues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GitHub Repo:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/surajondev"&gt;
        surajondev
      &lt;/a&gt; / &lt;a href="https://github.com/surajondev/JavaScript"&gt;
        JavaScript
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      From Basic to Advance JavaScript Project
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
JavaScript&lt;/h1&gt;
&lt;p&gt;A JavaScript Repository to creat web app from basic to advance leve.&lt;/p&gt;
&lt;h3&gt;
Introduction&lt;/h3&gt;
&lt;p&gt;This repostiory is mainly created to create web app using JavaScript. This app can level from beginner to expert level.&lt;/p&gt;
&lt;h2&gt;
Contribution&lt;/h2&gt;
&lt;p&gt;Read &lt;code&gt;Contribution.md&lt;/code&gt; for more details.&lt;/p&gt;
&lt;p&gt;Following languages have been used&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/html/html.png"&gt;&lt;img alt="HTML5" width="26px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--m6BdzRY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/html/html.png"&gt;&lt;/a&gt; HTML&lt;/li&gt;
&lt;li&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/css/css.png"&gt;&lt;img alt="CSS3" width="26px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RgbjQBTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/css/css.png"&gt;&lt;/a&gt; CSS&lt;/li&gt;
&lt;li&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/javascript/javascript.png"&gt;&lt;img alt="JavaScript" width="26px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HfDzN1OW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/javascript/javascript.png"&gt;&lt;/a&gt; JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/surajondev/JavaScript"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h2&gt;
  &lt;a href="#getweather"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/surajondev/get-weather"&gt;Get-Weather&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;An Open Weather API-based weather app was developed using the react as frontend. It is hosted on GitHub pages. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contribution:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improve the Layout of the website&lt;/li&gt;
&lt;li&gt;Add more details&lt;/li&gt;
&lt;li&gt;Improve Cards that show details&lt;/li&gt;
&lt;li&gt;Better Color Combination for Website&lt;/li&gt;
&lt;li&gt;Dark and Light Mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href="https://surajondev.github.io/get-weather/"&gt;https://surajondev.github.io/get-weather/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Repo:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/surajondev"&gt;
        surajondev
      &lt;/a&gt; / &lt;a href="https://github.com/surajondev/get-weather"&gt;
        get-weather
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Get weather website run using react framework. OpenWeather API is used to fetch information.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/github_username/repo/graphs/contributors"&gt;&lt;img src="https://camo.githubusercontent.com/e407a23743e06cbde02e7e81e499225775c94db55536ab0b28ab1d9b31d9eb57/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f6769746875625f757365726e616d652f7265706f2e7376673f7374796c653d666f722d7468652d6261646765" alt="Contributors"&gt;&lt;/a&gt;
&lt;a href="https://github.com/github_username/repo/network/members"&gt;&lt;img src="https://camo.githubusercontent.com/ad541b200a5063ef3ec6c35adef2530e238d759ccc74bbaadc7a524af7ba4495/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6769746875625f757365726e616d652f7265706f2e7376673f7374796c653d666f722d7468652d6261646765" alt="Forks"&gt;&lt;/a&gt;
&lt;a href="https://github.com/github_username/repo/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/a672ed63f7420230009201653fdc38736e864660cb819e11ec3b576a6b7f52c6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6769746875625f757365726e616d652f7265706f2e7376673f7374796c653d666f722d7468652d6261646765" alt="Stargazers"&gt;&lt;/a&gt;
&lt;a href="https://github.com/github_username/repo/issues"&gt;&lt;img src="https://camo.githubusercontent.com/a65c06f71d08e4c7210a512dcfb75415a04cabf58bc355ac4b76178a56bfcb3e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6769746875625f757365726e616d652f7265706f2e7376673f7374796c653d666f722d7468652d6261646765" alt="Issues"&gt;&lt;/a&gt;
&lt;a href="https://github.com/github_username/repo/blob/master/LICENSE.txt"&gt;&lt;img src="https://camo.githubusercontent.com/c3acae721005962432b3958957253e828ef6df74b2a1f668d580fd520a50027e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6769746875625f757365726e616d652f7265706f2e7376673f7374796c653d666f722d7468652d6261646765" alt="MIT License"&gt;&lt;/a&gt;
&lt;a href="https://linkedin.com/in/github_username" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1ffde4ea8d2869a62cdf80282516c524e1109befc83d6339aae7a55d94ff4ae5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4c696e6b6564496e2d626c61636b2e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d6c696e6b6564696e26636f6c6f72423d353535" alt="LinkedIn"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/github_username/repo_name"&gt;
    &lt;img src="https://camo.githubusercontent.com/280cfe498bcd80f721238134e1962acaed58bfb2ec874eaf7a1fbf5a831ffee9/68747470733a2f2f66726565706e67696d672e636f6d2f7468756d622f776561746865722f32333532372d332d776561746865722d7468756d622e706e67" alt="Logo" width="80" height="80"&gt;
  &lt;/a&gt;
  &lt;/p&gt;
&lt;h3&gt;
Get Weather&lt;/h3&gt;
  &lt;p&gt;
    Access weather of different cities and other weather realated data
    &lt;br&gt;
    &lt;a href="https://github.com/github_username/repo_name"&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;a href="https://surajondev.github.io/get-weather/" rel="nofollow"&gt;View Demo&lt;/a&gt;
    ·
    &lt;a href="https://github.com/github_username/repo_name/issues"&gt;Report Bug&lt;/a&gt;
    ·
    &lt;a href="https://github.com/github_username/repo_name/issues"&gt;Request Feature&lt;/a&gt;
  &lt;/p&gt;

  &lt;h2&gt;
Table of Contents&lt;/h2&gt;
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href="https://github.com/surajondev/get-weather#about-the-project"&gt;About The Project&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href="https://github.com/surajondev/get-weather#built-with"&gt;Built With&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="https://github.com/surajondev/get-weather#getting-started"&gt;Getting Started&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href="https://github.com/surajondev/get-weather#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="https://github.com/surajondev/get-weather#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/surajondev/get-weather#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/surajondev/get-weather#roadmap"&gt;Roadmap&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/surajondev/get-weather#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/surajondev/get-weather#license"&gt;License&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/surajondev/get-weather#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/surajondev/get-weather#acknowledgements"&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;


&lt;h2&gt;
About The Project&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://surajondev.github.io/get-weather/" rel="nofollow"&gt;![Product Name Screen Shot][product-screenshot]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The project is to provide information to the people regarding the weather of different location.
Its is powered by OpenWeather API.&lt;/p&gt;
&lt;h3&gt;
Built With&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/react"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openweathermap.org/" rel="nofollow"&gt;OpenWeather API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;To get a local copy up and running follow these simple steps.&lt;/p&gt;
&lt;h3&gt;
Prerequisites&lt;/h3&gt;
&lt;p&gt;This is an example of how to list things you need to use the software and how to install them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;npm
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install 
npm run&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Clone the repo
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/surajondev/get-weather.git&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Install NPM packages
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;You can easily enter the name of city and then it will fetch all the weather information regarding it.&lt;/p&gt;

&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;Contributions are…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/surajondev/get-weather"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#texttospeech"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/surajondev/text-to-speech"&gt;Text-to-Speech&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A Webapp that takes the text and converts into speech. It has support for more than 30 Major languages. It is hosted on netlify.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contribution:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improve the Layout of the website&lt;/li&gt;
&lt;li&gt;Add more details&lt;/li&gt;
&lt;li&gt;Improve Cards that show details&lt;/li&gt;
&lt;li&gt;Better Color Combination for Website&lt;/li&gt;
&lt;li&gt;Dark and Light Mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href="https://surajondev.github.io/get-weather/"&gt;https://surajondev.github.io/get-weather/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Repo:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/surajondev"&gt;
        surajondev
      &lt;/a&gt; / &lt;a href="https://github.com/surajondev/text-to-speech"&gt;
        text-to-speech
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Conver text into speech 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;You can convert text into speech . Click Here to see the website &lt;a href="https://text-to-speeech.netlify.app/" rel="nofollow"&gt;Text-to-Speech&lt;/a&gt;
Recommended to use on PC&lt;/p&gt;
&lt;h2&gt;
Following languages have been used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/html/html.png"&gt;&lt;img alt="HTML5" width="26px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--m6BdzRY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/html/html.png"&gt;&lt;/a&gt; HTML&lt;/li&gt;
&lt;li&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/css/css.png"&gt;&lt;img alt="CSS3" width="26px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RgbjQBTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/css/css.png"&gt;&lt;/a&gt; CSS&lt;/li&gt;
&lt;li&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/javascript/javascript.png"&gt;&lt;img alt="JavaScript" width="26px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HfDzN1OW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/javascript/javascript.png"&gt;&lt;/a&gt; JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fork the repo&lt;/li&gt;
&lt;li&gt;Clone this repo using &lt;code&gt;git clone https://github.com/surajondev/text-to-speech.git&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Change Directory to using &lt;code&gt;cd text-to-speech&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Contribution&lt;/h2&gt;
&lt;p&gt;We would appreciate if you decide to improve the repository.
If so, Thank You in advance.&lt;/p&gt;
&lt;p&gt;Read &lt;a href="https://github.com/surajondev/text-to-speech/blob/master/CONTRIBUTION.md"&gt;&lt;code&gt;CONTRIBUTION&lt;/code&gt;&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;
Licence&lt;/h2&gt;
&lt;p&gt;This is distributed under MIT Licence. For more details read &lt;a href="https://github.com/surajondev/text-to-speech/blob/master/LICENSE"&gt;&lt;code&gt;LICENCE&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/surajondev/text-to-speech"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h2&gt;
  &lt;a href="#animationnation"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/zero-to-mastery/Animation-Nation"&gt;Animation-Nation&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;One of my favorite repositories to recommend for beginners to contribute and learn about Git and GitHub. You can create animation using CSS and HTML. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contribution:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add your animation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href="https://animation-nation.netlify.app/"&gt;https://animation-nation.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Repo:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zero-to-mastery"&gt;
        zero-to-mastery
      &lt;/a&gt; / &lt;a href="https://github.com/zero-to-mastery/Animation-Nation"&gt;
        Animation-Nation
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A ZTM Challenge for Hacktoberfest 2019
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;blockquote&gt;
&lt;h3&gt;
&lt;strong&gt;UPDATE:&lt;/strong&gt; Event Concluded!&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;This project started as a project for Hacktoberfest 2019, Thank you to everyone that participated and made this project what it is today and we look forward to seeing you all at Hacktoberfest 2020
Feel free to continue adding your designs to the master branch, you can check out the &lt;code&gt;Hactoberfest-Edition&lt;/code&gt; branch to see the project as it was at the end of the event.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interested in more events? keep an eye on our Events page &lt;a href="https://zerotomastery.io/events?utm_source=github&amp;amp;utm_medium=animation-nation" rel="nofollow"&gt;HERE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/zero-to-mastery/Animation-Nation./colourpencils.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4aIYwjuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/zero-to-mastery/Animation-Nation./colourpencils.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sharpen your pencils, we're getting creative!&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
Animation Nation&lt;/h1&gt;
&lt;p&gt;Hello and welcome to Animation Nation, a ZTM project for Hacktoberfest 2019! This site aims to showcase the creative talents of the ZTM community :)&lt;/p&gt;
&lt;h1&gt;
Rules&lt;/h1&gt;
&lt;p&gt;The rules are simple. You have to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use HTML &lt;code&gt;&amp;lt;divs&amp;gt;&lt;/code&gt; and CSS only! No JS, and no SVGs!&lt;/li&gt;
&lt;li&gt;Have at least one animation in your work&lt;/li&gt;
&lt;li&gt;Please make sure that the code is indeed your own…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/zero-to-mastery/Animation-Nation"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;I hope you will contribute to some of my repositories that are beginner-friendly and learn about open source.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy Coding!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>javascript</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to configure VSCode Bracket Pair Colors Natively</title>
      <author>Aman Mittal</author>
      <pubDate>Wed, 13 Oct 2021 17:46:41 +0000</pubDate>
      <link>https://dev.to/amanhimself/how-to-configure-vscode-bracket-pair-colors-natively-3nl</link>
      <guid>https://dev.to/amanhimself/how-to-configure-vscode-bracket-pair-colors-natively-3nl</guid>
      <description>&lt;p&gt;With an &lt;a href="https://code.visualstudio.com/updates/v1_60#_high-performance-bracket-pair-colorization"&gt;update in August 2021&lt;/a&gt;, VSCode started supporting Bracket pair colorization natively. It means there is no need to use the &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Bracket Pair Colorizer&lt;/a&gt; extension (&lt;em&gt;which I love&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;In their official announcement, the VSCode team states they choose to implement this feature natively to address performance issues.&lt;/p&gt;

&lt;p&gt;I recently uninstalled the extension and thought, let's try to use the editor without any bracket color extension. I cannot. I've been using the extension &lt;a href="https://amanhimself.dev/blog/how-i-configure-vscode-for-everything/"&gt;as long as I remember&lt;/a&gt; and I cannot go back to plain, colorless brackets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5_snGxXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JBOVcnV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5_snGxXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JBOVcnV.png" alt="ss1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To enable this setting, open the &lt;code&gt;settings.json&lt;/code&gt; file for the VSCode editor and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.bracketPairColorization.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workbench.colorCustomizations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.foreground1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#ffb86c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.foreground2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#8be9fd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.foreground3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#bd93f9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.foreground4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#50fa7b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.foreground5"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#f1fa8c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.foreground6"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#abb2c0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.unexpectedBracket.foreground"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#ff5555"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And tweak the colors according to your style!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JeDd8Vqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tSgx02e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JeDd8Vqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tSgx02e.png" alt="ss2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way, the above colors are from &lt;a href="https://draculatheme.com/contribute"&gt;Dracula theme's 🧛‍♂️ color palette&lt;/a&gt; to match the overall editor theme I am currently using.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vscode</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>10 Free KubeCon virtual passes just for your comments!</title>
      <author>CAST AI</author>
      <pubDate>Wed, 13 Oct 2021 17:44:53 +0000</pubDate>
      <link>https://dev.to/castai/10-free-kubecon-virtual-passes-just-for-your-comments-15la</link>
      <guid>https://dev.to/castai/10-free-kubecon-virtual-passes-just-for-your-comments-15la</guid>
      <description>&lt;p&gt;Hey Dev.to community! Kubecon NA has already started and since we know how much you guys love kubernetes, we figured that CAST AI could give away 10 free virtual passes to those who haven't had a chance to attend Kubecon NA this year.&lt;/p&gt;

&lt;p&gt;The instructions are simple(FIFO): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Say hi to CAST AI under this post or leave any other comment;&lt;/li&gt;
&lt;li&gt;That's it!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll reach out to the first 10 people to leave comments and send out those free invitations. Be sure to visit our booth and check all of the demos that we've got prepared! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes Cost Optimization for EKS – CAST AI demo&lt;/strong&gt;&lt;br&gt;
Wednesday, October 13, 2021&lt;br&gt;
01:30 PM – 02:00 PM US/Eastern | 10:30 AM – 11:00 AM US/Pacific&lt;br&gt;
&lt;strong&gt;Rebalancing sub-optimal clusters to realize cost savings&lt;/strong&gt;&lt;br&gt;
Wednesday, October 13, 2021&lt;br&gt;
03:30 PM – 04:00 PM US/Eastern | 12:30 PM – 1:00 PM US/Pacific&lt;br&gt;
&lt;strong&gt;Continuous Bin Packing with Evictor&lt;/strong&gt;&lt;br&gt;
Wednesday, October 13, 2021&lt;br&gt;
07:00 PM – 07:30 PM US/Eastern | 4:00 PM – 4:30 PM US/Pacific&lt;br&gt;
&lt;strong&gt;Saving money on high throughput Yugabyte DB using Spot instances and CAST AI&lt;/strong&gt;&lt;br&gt;
Thursday, October 14, 2021&lt;br&gt;
01:30 PM – 02:00 PM US/Eastern | 10:30 AM – 11:00 AM US/Pacific&lt;br&gt;
&lt;strong&gt;Kubernetes Cost Optimization for GKE – CAST AI demo&lt;/strong&gt;&lt;br&gt;
Thursday, October 14, 2021&lt;br&gt;
03:30 PM – 04:00 PM US/Eastern | 12:30 PM – 1:00 PM US/Pacific&lt;br&gt;
&lt;strong&gt;Resilience Realized: Highly Available App across 2-3 Clouds, with failover&lt;/strong&gt;&lt;br&gt;
Thursday, October 14, 2021&lt;br&gt;
07:00 PM – 07:30 PM US/Eastern | 4:00 PM – 4:30 PM US/Pacific&lt;br&gt;
&lt;strong&gt;Rebalancing sub-optimal clusters to realize cost savings&lt;/strong&gt;&lt;br&gt;
Friday, October 15, 2021&lt;br&gt;
01:30 PM – 02:00 PM US/Eastern | 10:30 AM – 11:00 AM US/Pacific&lt;br&gt;
&lt;strong&gt;Kubernetes Cost Optimization for AKS – CAST AI demo&lt;/strong&gt;&lt;br&gt;
Friday, October 15, 2021&lt;br&gt;
03:30 PM – 04:00 PM US/Eastern | 12:30 PM – 1:00 PM US/Pacific&lt;/p&gt;

&lt;p&gt;&lt;a href="http://cast.ai/kubecon"&gt;http://cast.ai/kubecon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://join.slack.com/t/castai-community/shared_invite/zt-nwtbsbqq-dWOBiUgLtIGMsUSup7Xksw_"&gt;Join our community slack here for hands on talks with developers!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>cloud</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>Thriving as a Remote-First Team</title>
      <author>Ben Greenberg</author>
      <pubDate>Wed, 13 Oct 2021 17:34:43 +0000</pubDate>
      <link>https://dev.to/bengreenberg/thriving-as-a-remote-first-team-345j</link>
      <guid>https://dev.to/bengreenberg/thriving-as-a-remote-first-team-345j</guid>
      <description>&lt;p&gt;It has now been several years since I began working for fully remote-first teams in software. My journey in a completely distributed team began before the pandemic, and before countless numbers of people were thrust into this territory unprepared.&lt;/p&gt;

&lt;p&gt;Over the years I have observed several habits of remote-first teams that enable productivity, happiness and success. What I describe here is what has worked for me, and what I have seen work best in the places I've been. It does not mean that it is the only way. I encourage you to experiment and find the paths that fit your and your team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P8SNYRF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ady08t29k4wvwezvuqoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P8SNYRF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ady08t29k4wvwezvuqoa.png" alt="Document Everything"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A team separated by time and space needs to adopt one of the best practices of asynchronous work, which is to be over-sharers of information.&lt;/p&gt;

&lt;p&gt;Whereas, teams that inhabit the same office space everyday can organize in-person meetings often and verbally share updates, seek input and ideate on an idea, that is not possible for teams spanning time zones.&lt;/p&gt;

&lt;p&gt;It may be possible to organize a meeting of all the team once in a while and ask people to work late in the evening or early in the morning within their timezones, but that is not sustainable. The answer is to become avid collaborators on team docs.&lt;/p&gt;

&lt;p&gt;Use docs to deliberate async on a new project plan. Use docs to share updates from working groups. Use docs to figure out a bug that you just cannot resolve on your own. As much as possible lean into async written records. They not only allow for team work sustainably, but they also provide a phenomenal repository of information for new hires.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iK-Y1Shr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psy8sm9dr7xfy7ciodb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iK-Y1Shr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psy8sm9dr7xfy7ciodb5.png" alt="Share Your Wins and Losses"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can often feel a bit awkward to celebrate yourself publicly. Many of us were raised to not brag, and celebrating a success can very much feel like a brag. Yet, in a remote-first team, if you don't share your win, no one else might know about it.&lt;/p&gt;

&lt;p&gt;Why is it important that people know about your successes? There are numerous reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Career advancement&lt;/li&gt;
&lt;li&gt;Sense of accomplishment&lt;/li&gt;
&lt;li&gt;Keeping everyone in the loop on progress&lt;/li&gt;
&lt;li&gt;Building a culture of team celebration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Likewise, it is equally vital to share the moments that did not go well. Just as it can feel awkward to share your wins, it can also feel awkward to share your failures. Perhaps, it is embarrassing or you wonder what people will think about you after. &lt;/p&gt;

&lt;p&gt;However, cultivating the sharing muscle, especially during moments of failure, is vital. Why? Because it normalizes the idea that we don't always succeed, and builds a culture of learning in public within the team. This needs to happen in both in-person teams and remote-first teams, but because of the distributed nature of remote teams, we must be even more deliberate about it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B9EL6Ggv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edbf0h866zz0xh0khp0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B9EL6Ggv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edbf0h866zz0xh0khp0s.png" alt="Trust Your Colleagues"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's not a big surprise that one of the reasons supervisors love everyone working together in the same space is because it's much easier to keep track of what people are doing all the time. From the earliest days of management theory, the notion was widely shared that if you weren't watching employees, or if they thought you weren't watching them, then it would just be havoc.&lt;/p&gt;

&lt;p&gt;This couldn't be farther from the truth.&lt;/p&gt;

&lt;p&gt;People, by and large, want to do the right thing, and learning to trust your colleagues is a big leap forward. Within the context of a remote-first team it is imperative. Remote teams that implement all sorts of measures to track their employee productivity, in my experience, only adversely impact that productivity with each new measure introduced.&lt;/p&gt;

&lt;p&gt;I've worked on teams where my manager was 7 or more hours behind me in the day. If they could not trust me and I could not trust them we would never have gotten anything done.&lt;/p&gt;

&lt;p&gt;The cultivation of trust between colleagues on a remote team can be furthered with the next two ideas, which we'll expand upon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check Assumptions (and Don't Wait)&lt;/li&gt;
&lt;li&gt;Intentional Meetings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2x_iNtHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzopk3e073ws2npwsshk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2x_iNtHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzopk3e073ws2npwsshk.png" alt="Check Assumptions and Don't Wait"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you feel like someone wronged you? Did someone totally drop the ball on a project or not reply to your request for help? &lt;/p&gt;

&lt;p&gt;It's easy to let those feelings grow and become a source of toxicity for you that continuously expands each passing day. &lt;/p&gt;

&lt;p&gt;Remote-first teams don't have many opportunities to serendipitously run into each other in hallways or by the coffee machine where grievances can be addressed. You need to deliberately seek the person out and check your assumptions about what transpired. It's possible it was a misunderstanding. It's also possible it wasn't, and you both can pursue some reconciliation.&lt;/p&gt;

&lt;p&gt;The longer you wait for the "right" moment to have the conversation the harder it will be for both of you. Finding a convenient time in the near future for both of you in a remote team allows both of you to move forward, and hopefully with relationships restored and issues resolved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hu-iGAPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uug33nm1q56yx6afirgr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hu-iGAPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uug33nm1q56yx6afirgr.png" alt="Intentional Meetings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;They were the best of times. They were the worst of times.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While Charles Dickens may not have had corporate meetings in mind when composing those lines, they certainly fit.&lt;/p&gt;

&lt;p&gt;Meetings can be incredibly useful to bring people together for a specific task and, in a short amount of time, accomplish something in real time. However, how many meetings have you attended or still regularly attend that match that ideal?&lt;/p&gt;

&lt;p&gt;The best meetings that I've been a part of since joining remote-first teams have had agendas published in advance. They have had any "update" components of the meeting shared ahead of time so to maximize time for collaboration and minimize time for frontal presentations.&lt;/p&gt;

&lt;p&gt;Meetings are one of the most expensive uses of a team's time, if you think of all the collective hours of everyone there. Use those meetings well, and try to only have them when you need them. If a meeting is mostly updates, think about how that can be turned into a doc, or other consumable media form like videos, instead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TzunB12p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spvkwqtk7aa6851ujsqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TzunB12p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spvkwqtk7aa6851ujsqg.png" alt="What You Did &amp;gt; The Hours You Worked"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The best remote-first teams I've been a part of understand inherently that your contribution to the team is not measured in the number of hours worked, but rather in the quality of that work.&lt;/p&gt;

&lt;p&gt;I strongly believe that it's better to work to live, not live to work. I like finding meaning in my work, especially since I dedicate so much of my life to it, but it's not the sole driver of that meaning. One of the greatest benefits for me of remote-first work is that I get to fit work into my life, and not my life into my work.&lt;/p&gt;

&lt;p&gt;Dentist appointment for a kid? I can gladly and happily take that responsibility without feeling pangs of work guilt.&lt;/p&gt;

&lt;p&gt;Time to read in the middle of the day or go for a walk? Yes, absolutely.&lt;/p&gt;

&lt;p&gt;In the same way that I trust my colleagues, I trust myself to do my best work in the way that is most genuine to me. A remote-first team that starts asking for daily clocking in and clocking out is presenting a large warning sign about its health.&lt;/p&gt;

&lt;p&gt;Those are some of the habits and practices that I've observed in the remote-first teams where I've had the most joy and success working. Overall, there is a culture of sharing, of trust, and of respectful candor. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;What ideas have you seen work really well in remote-first teams?&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>6 CSS features you need to know about....</title>
      <author>Rajeswaran</author>
      <pubDate>Wed, 13 Oct 2021 17:12:03 +0000</pubDate>
      <link>https://dev.to/rajezz/6-css-features-you-need-to-know-about-3b72</link>
      <guid>https://dev.to/rajezz/6-css-features-you-need-to-know-about-3b72</guid>
      <description>&lt;p&gt;Hi 👋,&lt;/p&gt;

&lt;p&gt;Although being a Full Stack Web developer, I'm quite fond of designing beautiful UI.&lt;/p&gt;

&lt;p&gt;I would love to share with you some of the cool CSS features that you should know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-var"&gt;
  &lt;/a&gt;
  #1 - var()
&lt;/h3&gt;

&lt;p&gt;Variables have been available for many years with CSS preprocessing tools like Sass and Less. CSS variables, officially called CSS custom properties, were introduced later. Support for CSS variables was not great until more recently. They are now supported in all modern browsers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: CSS variables are not supported in Internet Explorer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why would we want to use variables in CSS? Suppose you're designing a website for a company. You use their brand color, #1092b3, in many places throughout your CSS. Later, the site is going through a rebranding, and the brand color is changing. You&lt;br&gt;
now have to change the brand color in every place you used #1092b3.&lt;br&gt;
Instead, you can define a brand-color variable and reference that variable everywhere you need to use the brand color. Later, when that color changes, you simply need to change the color value once in the variable declaration.&lt;/p&gt;

&lt;p&gt;CSS variables are declared with two dashes followed by the variable name, such as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--brand-color: #3FA2D9;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To reference a variable’s value later, you need to pass the variable name to the var function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;background-color: var(--brand-color);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-calc"&gt;
  &lt;/a&gt;
  #2 - calc()
&lt;/h3&gt;

&lt;p&gt;The calc function lets you combine the different units for calculating an exact amount. Main advantages of using calc are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mixed units can be used in the calculation.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    padding: calc(1.5rem - 10px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;It works with CSS custom properties or variables.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
    --spacing: 0.5rem
}

.container {
    padding: calc(var(--spacing) * 2);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-position-sticky"&gt;
  &lt;/a&gt;
  #3 - position: sticky
&lt;/h3&gt;

&lt;p&gt;The element acts as a relatively positioned element, scrolling with the document. When the element reaches a specified point, it turns into a fixed element. This point is specified via a top, right, bottom, or left value.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: position: sticky is not supported in Internet Explorer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rajezz777/embed/xxLGaNV?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-magic-of-whitespace-overflow-amp-textoverflow-used-together"&gt;
  &lt;/a&gt;
  #4 - Magic of white-space, overflow &amp;amp; text-overflow used together
&lt;/h3&gt;

&lt;p&gt;Your design may require that text must fit within its container without overflowing or wrapping. This can easily be accomplished by using the &lt;strong&gt;&lt;code&gt;white-space, overflow, and text-overflow&lt;/code&gt;&lt;/strong&gt; properties together.&lt;/p&gt;

&lt;p&gt;First, white-space is set to nowrap. This ensures the text does not wrap but will in turn cause the text to overflow the container. By setting overflow to hidden, we can hide the overflowing content. However, then the text is abruptly cut off at the end of the container. Finally, we can set text-overflow to ellipsis to truncate the text and add an ellipsis at the end.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rajezz777/embed/mdMJzMj?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-firstletter"&gt;
  &lt;/a&gt;
  #5 ::first-letter
&lt;/h3&gt;

&lt;p&gt;Applies the styles only to the first letter of the first line of an element.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rajezz777/embed/gOxpBzZ?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-prefersreducedmotion"&gt;
  &lt;/a&gt;
  #6 prefers-reduced-motion
&lt;/h3&gt;

&lt;p&gt;Some users may have vestibular or seizure disorders that can be triggered by rapidly moving or flashing elements in your pages. You should be mindful of this when designing your animations. Most modern operating systems allow users to disable, or reduce, animations to help alleviate this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }

    to {
      transform: rotate(360deg);
    }
  }

  .loader {
    width: 10rem;
    height: 10rem;
    background: skyblue;
    animation: spin 500ms linear infinite;
  }
&amp;lt;/style&amp;gt;
&amp;lt;div class="loader"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This results in a square that spins very quickly, making one full rotation every 500ms.&lt;/p&gt;

&lt;p&gt;This could trigger seizures or other issues, as it moves very fast. We can conditionally disable the animation by using the prefers-reduced-motion media query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media (prefers-reduced-motion: reduce) {
  .loader {
    animation: none;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When this page is loaded on a system where the user has disabled motion, the box will not be animated.&lt;/p&gt;

&lt;p&gt;The prefers-reduced-motion query has two supported values: &lt;strong&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;no-preference&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: prefers-reduced-motion is not supported in Internet Explorer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's it for now. 😉&lt;/p&gt;

&lt;p&gt;Also, I know there are plenty of cool features in CSS. But writing them would eventually end up in a Book. But, I thought, why can't we pick a few of them.&lt;/p&gt;

&lt;p&gt;I hope you came to know about one new feature on CSS.&lt;/p&gt;

&lt;p&gt;Thank you! Have a great day 🎉&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is Focus Time? How to Prioritize Productivity</title>
      <author>b.j.</author>
      <pubDate>Wed, 13 Oct 2021 17:04:38 +0000</pubDate>
      <link>https://dev.to/bettyyjean/what-is-focus-time-how-to-prioritize-productivity-4oig</link>
      <guid>https://dev.to/bettyyjean/what-is-focus-time-how-to-prioritize-productivity-4oig</guid>
      <description>&lt;p&gt;Another busy week gone by, and somehow your to-do list was neglected once again! Your tasks are adding up way faster than you can check them off, and as much as you need a quiet week to catch up, there isn't one on the horizon.&lt;/p&gt;

&lt;p&gt;And while you and your team are super busy, it doesn't always translate to being productive. The problem with busy work culture is that it's all too easy to get caught up in other people's priorities. Suddenly your calendar is slammed with all types of meetings - group updates, brainstorming meetings, and information sharing sessions, which leaves you little to no time for your actual work! What's worse, each distraction just eats further away at your productivity.&lt;/p&gt;

&lt;p&gt;It takes an average of &lt;a href="https://www.forbes.com/sites/nicolebendaly/2020/05/10/digital-distractions-are-hurting-your-team-three-things-you-can-do/?sh=6120ad276cb7"&gt;23 minutes and 15 seconds&lt;/a&gt; to get back on track after being interrupted from a task according to Gloria Mark, Professor at the University of California, Irvine. That's almost 5% of your entire workday! You can see how just a few interruptions can quickly eat away at your productivity. So if you're interrupted three times, 15% of your day quickly becomes getting back on task, but on a bad day, you might be interrupted a dozen or more times, and suddenly over half of your time is gone. That is, until you reclaim some of that focus time back.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reclaim.ai/blog/what-is-focus-time?utm_source=devto&amp;amp;utm_medium=blog-published&amp;amp;utm_campaign=what-is-focus-time&amp;amp;utm_term="&gt;In this post&lt;/a&gt;, learn how to create focus time in your busy schedule to make real progress on your priorities and improve your overall productivity every week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-focus-time"&gt;
  &lt;/a&gt;
  What is focus time?
&lt;/h2&gt;

&lt;p&gt;Focus time is a dedicated block of time that you set aside for productive work on a task or project, without interruption. This time management strategy allows you to prioritize the important work that requires your undivided attention so you can actually produce high quality results. Regardless of whether you're a manager or maker, or need to spend time writing, coding, designing, or researching, making time on your calendar for heads-down work will not only help you get it done, but done faster with less room for interruptions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-it-important"&gt;
  &lt;/a&gt;
  Why is it important?
&lt;/h2&gt;

&lt;p&gt;Focus time is important because it allows you to dedicate your full attention to the task at hand without the added distraction of meetings or interruptions. Oftentimes, you find yourself splitting your focus on two or more tasks at once, or multitasking, and that can come at the expense of missing details, deadlines, or a critical task altogether. By adopting a focus time routine, you're able to increase your efficiency and quality of work with a &lt;a href="https://reclaim.ai/blog/single-tasking"&gt;single-tasking&lt;/a&gt; approach towards your to-do list.&lt;/p&gt;

&lt;p&gt;As you well know, one of the biggest challenges of navigating a busy workweek is actually finding the time to enter a productive state of deep work. After all, it's hard when your attention is constantly being fought over by the many workday distractions, or low-value tasks that can pile up and quickly overwhelm an afternoon. By giving yourself time to actually get into your groove, you enter a flow state where everything is clicking and you're able to make significant progress on your work. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#top-work-distractions"&gt;
  &lt;/a&gt;
  Top work distractions
&lt;/h3&gt;

&lt;p&gt;Focus time is used to combat distractions throughout your workday - here are the top work distractions that most professionals are working around:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Scattered meetings: The average middle manager spends &lt;a href="https://blog.otter.ai/meeting-statistics/"&gt;35% of their time&lt;/a&gt; in meetings, and up to 50% for upper management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slack interruptions: The average Slack user spends &lt;a href="https://slack.com/intl/en-gb/blog/news/intl-en-gb-work-is-fuelled-by-true-engagement"&gt;90 minutes per working day&lt;/a&gt; reading, writing, commenting and searching in Slack.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Social media &amp;amp; news sites: The average employee spends &lt;a href="https://theundercoverrecruiter.com/infographic-how-much-time-do-you-waste-social-networks/"&gt;12% of their work day&lt;/a&gt; using unproductive sites, like Facebook, Twitter and YouTube.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Email: The average employee spends &lt;a href="https://ppm.express/blog/how-much-time-your-employees-spend-on-checking-emails/"&gt;28% of their work day&lt;/a&gt; on email, and checks their email 11 times per hour.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multitasking rabbit holes: The average employee receives up to &lt;a href="https://www.concur.com/newsroom/article/how-workplace-distractions-and-multitasking-hurt-employee-productivity-and-focus"&gt;200 notifications a day&lt;/a&gt;, causing task-switching and disengagement from their core work.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#focus-time-benefits"&gt;
  &lt;/a&gt;
  Focus time benefits
&lt;/h3&gt;

&lt;p&gt;So how does focus time help you combat the constant flood of workday interruptions? By giving you the permission you need to disengage from distractions and focus on the work you need to get done.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Give your brain the opportunity to settle into a task, entering a &lt;a href="https://reclaim.ai/blog/cant-focus-at-work"&gt;productive state of flow&lt;/a&gt; for deep work, so you can be up to 500% more productive on your project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prevent interruptions that cause you to &lt;a href="https://reclaim.ai/blog/context-switching"&gt;context switch&lt;/a&gt;, our tendency to jump between one unrelated project to another, so you can avoid catching up after you've been pulled away from a task.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Work faster by focusing on one thing at a time, or &lt;a href="https://reclaim.ai/blog/single-tasking"&gt;single tasking&lt;/a&gt;, so you don't slow your brain down by trying to multitask through complex problems and projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prioritizing your important work during your actual working hours so you can eliminate the need to work overtime, helping to prevent yourself from experiencing &lt;a href="https://reclaim.ai/blog/workplace-burnout"&gt;workplace burnout&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When your calendar is filled with meetings every other hour, and Slack and email catch up in-between, you're forced to constantly context switch, which can prevent you from even opening up your to-do list on any given day. With the average middle manager spending 35% of their time in meetings, another 5% getting back on track after each, and then 28% catching up on email, you're not left with a lot of time for productive work. These distractions are some of the key reasons why focus time matters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;So, how should you structure your focus time? A good way to think about it is by the types of tasks you need to get done, and their level of difficulty. Cal Newport, productivity expert and author of &lt;a href="https://www.calnewport.com/books/deep-work/"&gt;Deep Work&lt;/a&gt;, pioneered a new way of focusing your work sessions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Shallow Work: This is your non-cognitively demanding logistical work like email, slack, and quick tasks that can be performed while distracted, and usually done in short working sessions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deep Work: These sessions consist of your cognitively demanding work dedicated to your true priorities, requiring deep thinking without distraction so you can push your brainpower to its limits, usually performed in longer working sessions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how much time should you spend on each? This very much depends on your role, but most importantly, it's about doing them right. Bundle all of your shallow work together so it's not slowing or blocking anything during your deep work sessions. And try to set yourself up for as much deep work as you can! Realistically, the brain can't do more than &lt;a href="https://www.theladders.com/career-advice/you-cant-do-deep-work-for-more-than-4-hours-per-day"&gt;4 hours of deep work&lt;/a&gt; per day, so if you have the time in your role, set that as the "most aggressive" goal for cognitively demanding work on your calendar.&lt;/p&gt;

&lt;p&gt;There are also many different &lt;a href="https://reclaim.ai/blog/time-blocking-planner"&gt;time blocking methods&lt;/a&gt; you can try to optimize your focus time, like the Pomodoro technique which works by setting a series of timers to give yourself frequent breaks during a focus time session. You work for 25 minutes, give yourself a 5-minute break, and repeat 4 times for a 30-minute reward break after 2 hours. Or, if you have a few big projects or responsibilities on your plate, you could try day-theming to target a focus for each day of the week. Task batching is another useful process which groups similar, quick low-value tasks together for your shallow work so you can cruise through your deep work focus sessions without those distractions.&lt;/p&gt;

&lt;p&gt;Look, there are a lot of methods, but don't let that distract you from just making time for it any way you can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-time-best-practices"&gt;
  &lt;/a&gt;
  Focus time best practices
&lt;/h2&gt;

&lt;p&gt;As we mentioned above, the most important way to get focus time is to actually schedule it on your calendar -- but is it really that easy in practice? Unfortunately not. Here are some of the major why people aren't blocking time for focus time on their calendars regularly:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Time blocks are inflexible and static. Something changes, and you now have more work to do in rescheduling your focus time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Time blocks make you unavailable for meetings, which in many roles and organizations, is just not realistic. This often creates more work because people have to ping you to find time. Bleh!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Time blocks aren't intentional enough. You block time, then you struggle with what to do with it, and ultimately end up getting lost in your to-do list and start multitasking.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interruptions still happen. If your Slack is going off every 5 seconds and your phone is buzzing with social media notifications, your time block ain't gonna help you.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, there are steps to make this process way simpler to approach and easy implement into your regular work routine:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plan-your-time"&gt;
  &lt;/a&gt;
  Plan your time
&lt;/h3&gt;

&lt;p&gt;The first step is of course finding the time, but it will quickly go to waste if you don't have a solid action plan for how you're going to focus on and prioritize your work. Without a plan, it's all too easy to get caught up clearing your email, checking updates, or just poking around your task list without knowing what to focus on!&lt;/p&gt;

&lt;p&gt;Focus time needs to be intentional! If your time blocks aren't intentional, then prioritizing them is really hard. While some tools like &lt;a href="https://reclaim.ai/blog/clockwise-vs-reclaim"&gt;Clockwise&lt;/a&gt; will help you block fixed slots without meetings, these time blocks don't help you determine what to do with this time. Reclaim on the other hand, blocks out time that is specific to the tasks you need to accomplish, giving you a clearer view of what's on your plate and how long you need to get through your most important to-dos. These assigned blocks of time will also help you stay on task, and prevent you from bouncing aimlessly from one thing to another.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yxn7cuvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/Aux3A37qhEYFq_fRlfdODn5FYhZRravhyMYDU55r7XH552zJbkISQhi9NsQeMq2VAYMjAyB-aDLk1cLxvPXbtfUODGAHa7sjfNKh8EK5lblvpoStPCUyW1uJ2M8wJG7AqQGHLI7q%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yxn7cuvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/Aux3A37qhEYFq_fRlfdODn5FYhZRravhyMYDU55r7XH552zJbkISQhi9NsQeMq2VAYMjAyB-aDLk1cLxvPXbtfUODGAHa7sjfNKh8EK5lblvpoStPCUyW1uJ2M8wJG7AqQGHLI7q%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prevent-interruptions"&gt;
  &lt;/a&gt;
  Prevent interruptions
&lt;/h3&gt;

&lt;p&gt;Slack is a great tool, but it's also one of the worst offenders for interruption. On average, employees at large companies are each sending more than &lt;a href="https://www.vox.com/recode/2019/5/1/18511575/productivity-slack-google-microsoft-facebook"&gt;200 Slack messages per week&lt;/a&gt;! One tool that people use to prevent interruptions in Slack is setting their status, and specifically setting do not disturb / DND. The challenge? Keeping your status up-to-date is another thing you have to remember to do, and you don't want to necessarily be uninterruptible all of the time.&lt;/p&gt;

&lt;p&gt;But, you can use tools like Reclaim to automatically &lt;a href="https://reclaim.ai/features/slack-integration"&gt;sync your Slack status&lt;/a&gt; to your calendar, customize your status by event type, and auto-set DND for events you really can't be interrupted in. There are other integrations like Google Calendar for Slack that works similarly, but the only status it will sync is "In a meeting", and doesn't sync shared calendar events, or allow you to automate DND. So, if you're working through an important focus time session and need to harvest 100% of your brainpower to meet a deadline, DND is what you need to block the non-stop flood of Slack messages so you're not pulled out of deep work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76GYHXk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/mTSKKmO_RsPQwNQT5E9kH0ZQjKWiIJg0oMDT6Ende1lITUySds2HOyL6c9rCcNvd6WOzwbcTldYPKVexxCrhrMaMqQuwCZqKNWShOKNGhGWIEkkdv_Uhd3yIxslO2U1EvFUqBRFa%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76GYHXk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/mTSKKmO_RsPQwNQT5E9kH0ZQjKWiIJg0oMDT6Ende1lITUySds2HOyL6c9rCcNvd6WOzwbcTldYPKVexxCrhrMaMqQuwCZqKNWShOKNGhGWIEkkdv_Uhd3yIxslO2U1EvFUqBRFa%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So while interruptions can be difficult to prevent, you can defend yourself by anticipating them ahead of time. First being to communicate context around what you are working on. While a basic "focus time" block on your calendar may just be construed as time not spent in meetings (and totally interruptible), your colleagues will think twice before they try to steal your time during a "Write important strategy plan" or "Troubleshoot critical bug" time block on your calendar. By the simple act of communicating through an event title, you are sharing your priorities with your team, defending your focus time, and increasing the weight of their decision on imposing their own priorities to interrupt yours. And, if you sync your Slack status with your schedule, you're doubling the communication power of that calendar context.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-flexible"&gt;
  &lt;/a&gt;
  Stay flexible
&lt;/h3&gt;

&lt;p&gt;Another important part of focus time is staying flexible within your schedule. You might have every intention of working on that slide deck you've been putting off, but if an emergency customer meeting comes up that requires your attention, you need to have enough flexibility in your schedule that you can adapt without having to stress. It's far too common for all the hard work you put into your scheduling to go down the drain when a new urgent priority drops and it's all hands on deck. Now you're faced with completely rearranging your schedule once again.&lt;/p&gt;

&lt;p&gt;Not only is staying flexible important for you, but it is also important for your team! Priorities change, new opportunities arise, and you need to be able to adapt and accommodate. Rigid schedules and time blocks make this very difficult, and can make you inaccessible and unavailable for collaboration.&lt;/p&gt;

&lt;p&gt;This is where you might benefit with a smart time blocking tool like Reclaim. You're able to block time for your tasks and regular routines throughout your week, but these time blocks stay flexible to accommodate new meeting requests and priorities. As your schedule fills up, Reclaim will shift your time blocks from "free" time, or bookable time, to "busy" to maximize your availability while defending your focus time. Having a balance of availability and focus is key to actually executing on focus time as a methodology!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#estimate-your-needs"&gt;
  &lt;/a&gt;
  Estimate your needs
&lt;/h3&gt;

&lt;p&gt;In order to really maximize the productivity of your focus time, it's important to estimate your needs! If you have an entire afternoon blocked for focus time, how much can actually get through on your to-do list? By incorporating time estimates, due dates and priority levels into your focus time planning, you can clearly see what you have time to get done in a week so you can better forecast your time and prioritize your workload.&lt;/p&gt;

&lt;p&gt;With Reclaim's Planner, you can see what your week really looks like. You not only get a full picture of all your meetings, tasks and regular routines, but you have a priority list on the side to visualize what's most urgent, scheduled, completed, and most importantly, unscheduled. Time does not lie, and if you don't have time to get through everything, you're going to have to kick some stuff out to next week. Reclaim forces you to think about budgeting your time, without actually forcing you to "overthink" it. Just declare what you need, how long you think it will take, and Reclaim tells you what the reality is through your calendar. So whether you need to trim back on meetings this week, or push out some lower priority projects, it's imperative you understand how much focus time you actually have time for, and what you can feasibly do with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-time-examples"&gt;
  &lt;/a&gt;
  Focus Time examples
&lt;/h2&gt;

&lt;p&gt;So how much focus time do you need? This entirely depends on your role and responsibilities! If you're a manager, you probably need to spend a majority of your week collaborating and leading your team, but if you're an engineer, you likely need to allocate most of your workweek towards your heads-down work. Every person has a different schedule and work demands, so your focus time will be completely unique to your role and personal style of work. Here are a couple focus time examples to help you get started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Engineer needs to preserve at least 30 hours of focus time/week&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Salesperson wants 1 hour/day and 3 hours on Friday for follow-ups and CRM notes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Product manager needs 2 hours, 2 times/week for priority planning&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VP needs 2 hours every Tuesday to review status reports&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Content writer needs 10 hours/week to develop a new blog post &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-add-focus-time-to-your-calendar"&gt;
  &lt;/a&gt;
  How to add focus time to your calendar
&lt;/h2&gt;

&lt;p&gt;Let's walk through adding focus time to your calendar using Good, Better and Best approaches so you can make time for your important work sessions every week.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-focus-time-blocks-without-a-plan-good"&gt;
  &lt;/a&gt;
  Create "Focus Time" blocks without a plan - Good 🙂
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a new &lt;a href="https://app.reclaim.ai/habits"&gt;Habit&lt;/a&gt; in Reclaim for "Focus Time"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customize the time window, duration, and frequency of your focus time Habit&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save and auto-schedule your focus time every week! &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a good way to make sure you have time for productive work every week, and leverage smart time blocking to maximize your calendar availability, but it lacks intentionality and context as your focus time blocks are unplanned and without purpose. Make sure to have a plan in place before your focus time sessions so you don't waste it wondering how to spend your time!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-focus-time-blocks-on-a-set-schedule-better"&gt;
  &lt;/a&gt;
  Create "Focus Time" blocks on a set schedule - Better 😎
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a "Focus Time" event in Google Calendar (one-time or recurring)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change the event availability from "Free" to "Busy"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add &lt;a href="https://help.reclaim.ai/en/articles/5464974-use-reclaim_free-to-create-no-meeting-days-or-times"&gt;#reclaim_free&lt;/a&gt; to the event description&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save &amp;amp; defend your focus time!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While creating a focus time block on a set schedule guarantees you time for solo work, the problem is that it locks you in, leaving you inaccessible for new meetings and collaboration opportunities. Rigid, fixed time blocks on Google Calendar aren't able to adjust to maximize the availability of your schedule like the smart time blocking options in the Good and Best options, which are increasingly important as many companies shift to a global workforce collaborating across time zones.&lt;/p&gt;

&lt;p&gt;However, the advantage here is that Reclaim &lt;a href="https://app.reclaim.ai/tasks"&gt;Tasks&lt;/a&gt; and &lt;a href="https://app.reclaim.ai/habits"&gt;Habits&lt;/a&gt; are auto-scheduled within these time blocks when you use #reclaim_free, allowing you to prioritize your most important work in your focus time sessions. This is also a great approach to blocking an entire day for productive work via &lt;a href="https://reclaim.ai/blog/no-meeting-day"&gt;no-meeting days&lt;/a&gt; so you can reduce distractions, increase productivity, and boost morale across your entire team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-focus-time-by-time-blocking-your-habits-and-tasks-best"&gt;
  &lt;/a&gt;
  Create "Focus Time" by time blocking your Habits and Tasks - Best 🤩
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Set up all of your &lt;a href="https://app.reclaim.ai/habits"&gt;Habits&lt;/a&gt; in Reclaim&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set up your weekly &lt;a href="https://app.reclaim.ai/tasks"&gt;Task&lt;/a&gt; list in Reclaim (&lt;a href="https://app.reclaim.ai/settings/integrations"&gt;new Tasks integrations&lt;/a&gt; coming soon)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prioritize your Task list via the Planner as things change&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Auto-schedule your focus time by priority every day!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is the best way to set up and optimize your focus time because you're keeping your schedule flexible and oriented around your priorities. If you're just getting started, think through your routines. What do you need to do often? What do you end up doing in the late hours or weekends? Then create Habits for the maximum time range you could envision those routines taking so you can start reigning them back into your core working hours. Next, take your top 3-5 Tasks, especially those that you know are going to take more than an hour or two to complete, and add them to Reclaim. As your week progresses, you can reprioritize and push stuff off as needed using the Planner, and at the end of the week, you'll get to see just how much more you accomplished through your &lt;a href="https://app.reclaim.ai/stats"&gt;calendar productivity stats&lt;/a&gt; and &lt;a href="https://help.reclaim.ai/en/articles/5389397-weekly-reports-overview"&gt;weekly report&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It may seem like a little more effort on your part, but you're basically just integrating your existing to-dos with your calendar so your workday is aligned around what you actially have to get done. You will get that time back tenfold by putting the effort into strategically planning which tasks are the highest priority, and how long you need to get them done. &lt;/p&gt;

&lt;p&gt;Focus time is an amazing method for productivity. It not only allows you to get more done in far less time, it also helps you eliminate overtime from your schedule to help you improve your work-life balance. While there are many ways to approach your focus time, the most important thing is just getting it on the calendar so you can start dedicating a healthy portion of your workweek towards productive progress on your priorities. Just remember, the more you put into efficiently using your focus time, the more you will get back! If you have any focus time tips you want to share with us, tweet us @reclaimai.&lt;/p&gt;

</description>
      <category>saas</category>
      <category>productivity</category>
      <category>timemangement</category>
      <category>focus</category>
    </item>
    <item>
      <title>A Modern OS for the Power User</title>
      <author>Arghya Sarkar</author>
      <pubDate>Wed, 13 Oct 2021 16:51:44 +0000</pubDate>
      <link>https://dev.to/arghyasarkar/a-modern-os-for-the-power-user-2koe</link>
      <guid>https://dev.to/arghyasarkar/a-modern-os-for-the-power-user-2koe</guid>
      <description>&lt;p&gt;Hey Guys!&lt;br&gt;
I am Arghya Sarkar! Lead Developer of CalinixOS. Some of you may already know what Calinix is, some of you don't, but this article is going to explain the current state at where Peregrine is at.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-calinix"&gt;
  &lt;/a&gt;
  What is Calinix?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Three Words:&lt;/strong&gt; Power, Beauty, Speed&lt;/p&gt;

&lt;p&gt;That's what the Calinix Project is based on! We make products that give you a beautiful interface, a powerful and quick-to-work-in professional desktop and tools you can work on smoothly. We believe that when you are on your keyboard, you get more efficiency and comfortability to work. If you are among those, Calinix is making products for your kind. Calinix Team even believes in speed, so we deliver applications which are fast, even on low end hardware, as your hardware shouldn't decide your workflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-calinixos"&gt;
  &lt;/a&gt;
  What's CalinixOS?
&lt;/h2&gt;

&lt;p&gt;CalinixOS is a Linux Distribution I'm developing currently with my other fellow friends. Its made for the Power user who likes to stay on the keyboard, using mouse less and making people's life faster. We try to make our OS the way you can be most productive in. We value your speed of work. Calinix may take some time to get used to, but when you master it, you are on your one stop destination for fastest work. It is currently under development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;Repository: &lt;a href="https://github.com/Calinix-Team/Calinix-Arch"&gt;https://github.com/Calinix-Team/Calinix-Arch&lt;/a&gt;&lt;br&gt;
Official Discord Server: &lt;a href="https://discord.gg/MtQddKmevk"&gt;https://discord.gg/MtQddKmevk&lt;/a&gt;&lt;br&gt;
Official Website: &lt;a href="https://get.calinix.tech"&gt;https://get.calinix.tech&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h2&gt;

&lt;p&gt;What's so special in this distribution?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Just Open the Box. Calinix is Arch, but not necessarily as hard as Arch Installation. Calinix comes with various packages, modern interface and a calamares installer out of the box&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arch without Hassle. Yes, it's based on pure Arch with no custom package control, making your distribution rolling release, reliable and have infinite possibilities&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Community Support. Facing a problem? The official developers along with other friendly people of the community await you in the reddit, discord server and forum. We highly care for our community and like to help them in each way we can.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The "Power User" kind-of desktop. With Vim, awesomeWM, Rofi and many other pre built configs, Calinix is a perfect choice for the linux "power users", with perfection! Though it shares it's looks with MacOSX, it is a lot more keyboard centric than MacOS&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#macos-vs-calinix"&gt;
  &lt;/a&gt;
  MacOS vs Calinix
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;UI&lt;/strong&gt;&lt;br&gt;
The UI is almost the same in Calinix, a centered dock, Mac like title bar and icon pack make it a lot similar to MacOS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customization&lt;/strong&gt;&lt;br&gt;
When MacOS has its limitations, customization in Calinix is limitless. And that actually is about linux as a whole, install any DE/WM and customize it your own way. CalinixOS comes with the awesomewm which is one of the most customizable WMs and can be turned into anything if you wish.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;br&gt;
Calinix is completely Free and Open Source. Unlike MacOS which is proprietary and paid, limited to its capabilities of Apple Devices only. Mac is as an Apple-exclusive. If you want to assemble a PC or get a budget laptop (with DOS) and expect to install Mac OS, it’s almost impossible. Mac comes baked in with the system Apple manufactures.&lt;/p&gt;

&lt;p&gt;Besides, you can even modify the source code of your OS to add/remove something (which requires necessary technical knowledge) and create your own custom OS. Can you do that on Mac OS?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A lot of people are all praises for iOS and Mac for being a secure platform. Well, yes, it is secure in a way (maybe more secure than Windows OS), but probably not as secure as Linux. Number of Malware in Mac increases every day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calinix and Linux in Development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using Linux doesn’t make you a super-intelligent being and could possibly get you any IT related job.&lt;/p&gt;

&lt;p&gt;However, as you start using Linux and exploring it, you gain experience. As a techie, sooner or later you dive into the terminal, learning your way to move around the file system, installing applications via command line. You won’t even realize that you have learned the skills that newcomers in IT companies get trained on.&lt;/p&gt;

&lt;p&gt;In addition to that, Linux has enormous scope in the job market. There are so many Linux related technologies (Cloud, Kubernetes, Sysadmin etc.) you can learn, earn certifications and get a nice paying job. And to learn these, you have to use Linux. Mac may be better in development than Windows but can't match capabilities of Linux&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reliability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calinix offers more control to the user while providing better security. Mac OS does not provide you with the full control of its platform. It does that to make things easier for you simultaneously enhancing your user experience. With Calinix, you can do whatever you want – which may result in poor user experience (for some) – but it does make it more reliable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#download-calinix-alpha-53c"&gt;
  &lt;/a&gt;
  Download Calinix Alpha 5-3c
&lt;/h2&gt;

&lt;p&gt;Grab the latest ISO from here:&lt;br&gt;
&lt;a href="https://github.com/Calinix-Team/Calinix-Arch/releases/download/0.5-3c/CalinixOS-Arch-2021.09.24-x86_64.iso"&gt;https://github.com/Calinix-Team/Calinix-Arch/releases/download/0.5-3c/CalinixOS-Arch-2021.09.24-x86_64.iso&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: If you are running it in a VM, kill picom compositor at first to experience smooth performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Live Boot Details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Username: calinix&lt;/li&gt;
&lt;li&gt;Password: calinix&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contribution"&gt;
  &lt;/a&gt;
  Contribution
&lt;/h2&gt;

&lt;p&gt;Currently we need developers yes! Our team needs some expansion. We need people with any one of these skills:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arch Linux Experience (not Manjaro)&lt;/li&gt;
&lt;li&gt;AUR Packaging Capabilities&lt;/li&gt;
&lt;li&gt;Marketing&lt;/li&gt;
&lt;li&gt;Bash Scripting Capabilities&lt;/li&gt;
&lt;li&gt;Plymouth Themes and setup&lt;/li&gt;
&lt;li&gt;GUI App Developers &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;urgent tasks to be fulfilled&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding chaotic-aur to Calinix by default&lt;/li&gt;
&lt;li&gt;Graphic Designers&lt;/li&gt;
&lt;li&gt;UI Designers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contact-us"&gt;
  &lt;/a&gt;
  Contact Us
&lt;/h2&gt;

&lt;p&gt;If you wanna get in touch with us, join our Discord Server:&lt;br&gt;
&lt;a href="https://discord.gg/MtQddKmevk"&gt;https://discord.gg/MtQddKmevk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even if you want to contact with us for being a developer/contributor, join the discord server for the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Calinix is supposed to release it's first version  sometime in 2022-2023, make sure to show some support by starring the &lt;a href="https://github.com/Calinix-Team/Calinix-Arch"&gt;repo&lt;/a&gt; and make sure to press on the "Watch" button so you don't miss any updates.&lt;/p&gt;

&lt;p&gt;We would greatly appreciate any contributions, so if you find something that you can improve, open a pull-request! You can also check out our open issues&lt;/p&gt;

&lt;p&gt;Thanks so much for reading!&lt;/p&gt;

</description>
      <category>linux</category>
      <category>github</category>
      <category>productivity</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Web Scraping in Node.js!</title>
      <author>Code_Jedi</author>
      <pubDate>Wed, 13 Oct 2021 16:49:39 +0000</pubDate>
      <link>https://dev.to/code_jedi/web-scraping-in-nodejs-2lkf</link>
      <guid>https://dev.to/code_jedi/web-scraping-in-nodejs-2lkf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#web-scraping"&gt;
  &lt;/a&gt;
  Web scraping:
&lt;/h2&gt;

&lt;p&gt;Web Scraping is a way to collect all sorts of publicly available data like prices, text, images, contact information and much more from the world-wide-web. This can be useful when trying to collect data that might take a person a lot of time to collect and organize manually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some of the most useful use cases of web scraping include:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Scraping product prices from e-commerce websites such as amazon, ebay or alibaba.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scraping social media posts, likes, comments, followers or bios.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scraping contacts from websites like yellowpages or Linkedin.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#puppeteer"&gt;
  &lt;/a&gt;
  Puppeteer
&lt;/h2&gt;

&lt;p&gt;While there are a few different libraries for scraping the web with Node.js, in this tutorial, i'll be using the puppeteer library.&lt;/p&gt;

&lt;p&gt;Puppeteer is a popular and easy to use npm package used for web automation and web scraping purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some of puppeteer's most useful features include:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Being able to extract a scraped element's text content.&lt;/li&gt;
&lt;li&gt;Being able to interact with a webpage by filling out forms, clicking on buttons or running searches inside a search bar.&lt;/li&gt;
&lt;li&gt;Being able to scrape and download images from the web.&lt;/li&gt;
&lt;li&gt;Being able to see the web scraping in progress using headless mode.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can read more about puppeteer &lt;a href="https://github.com/puppeteer/puppeteer"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;For this tutorial, I will suppose you already have &lt;strong&gt;npm&lt;/strong&gt; and &lt;strong&gt;node_modules&lt;/strong&gt; installed, as well as a &lt;strong&gt;package.json&lt;/strong&gt; and &lt;strong&gt;package-lock.json&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;If you don't, here's a great guide on how to do so: &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-node-js-modules-with-npm-and-package-json"&gt;Setup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install puppeteer, run one of the following commands in your project's terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i puppeteer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add puppeteer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once puppeteer is installed, it will appear as a directory inside your node_modules.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-make-a-simple-web-scraping-script-in-nodejs"&gt;
  &lt;/a&gt;
  Let's make a simple web scraping script in Node.js
&lt;/h3&gt;

&lt;p&gt;The web scraping script will get the first synonym of "smart" from the web thesaurus by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Getting the HTML contents of the web thesaurus' webpage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finding the element that we want to scrape through it's selector.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Displaying the text contents of the scraped element.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uYsNi1UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1yuk24tdujckpswg8en.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uYsNi1UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1yuk24tdujckpswg8en.gif" alt="Scraping"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started!
&lt;/h3&gt;

&lt;p&gt;Before scraping, and then extracting this element's text through it's selector in Node.js, we need to setup a few things first:&lt;/p&gt;

&lt;p&gt;Create or open an empty javascript file, you can name it whatever you want, but I'll name mine "&lt;strong&gt;index.js&lt;/strong&gt;" for this tutorial. Then, require puppeteer on the first line and create the async function inside which we will be writing our web scraping code:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer')

async function scrape() {
}
scrape()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, initiate a new browser instance and define the "page" variable, which is going to be used for navigating to webpages and scraping elements within a webpage's HTML contents:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer')

async function scrape() {
   const browser = await puppeteer.launch({})
   const page = await browser.newPage()
}
scrape()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Scraping the first synonym of "smart"&lt;/p&gt;

&lt;p&gt;To locate and copy the selector of the first synonym of "smart", which is what we're going to use to locate the synonym inside of the web thesaurus' webpage, first go to the &lt;a href="https://www.thesaurus.com/browse/smart"&gt;web thesaurus' synonyms of "smart"&lt;/a&gt;, right click on the first synonym and click on "inspect". This will make this webpage's DOM pop-up at the right of your screen:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUgj4uNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0g5w8duzsrv9clx2fff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUgj4uNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0g5w8duzsrv9clx2fff.png" alt="Inspect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, right click on the highlighted HTML element containing the first synonym and click on "copy selector":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WpX-teFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tzgpz7rqxfirnfrjz9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WpX-teFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tzgpz7rqxfirnfrjz9a.png" alt="Copy selector"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, to navigate to the web thesaurus, scrape and display the first synonym of "smart" through the selector we copied earlier:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, make the "page" variable navigate to &lt;a href="https://www.thesaurus.com/browse/smart"&gt;https://www.thesaurus.com/browse/smart&lt;/a&gt; inside the newly created browser instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, we define the "element" variable by making the page wait for our desired element's selector to appear in the webpage's DOM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The text content of the element is then extracted using the evaluate() function, and displayed inside the "text" variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, we close the browser instance.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer')

async function scrape() {
   const browser = await puppeteer.launch({})
   const page = await browser.newPage()

   await page.goto('https://www.thesaurus.com/browse/smart')
   var element = await page.waitFor("#meanings &amp;gt; div.css-ixatld.e15rdun50 &amp;gt; ul &amp;gt; li:nth-child(1) &amp;gt; a")
   var text = await page.evaluate(element =&amp;gt; element.textContent, element)
   console.log(text)
   browser.close()
}
scrape()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#time-to-test"&gt;
  &lt;/a&gt;
  Time to test
&lt;/h3&gt;

&lt;p&gt;Now if you run your index.js script using "node index.js", you will see that it has displayed the first synonym of the word "smart":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VAWi5h1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t65do4rq7bu4w962bvtw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VAWi5h1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t65do4rq7bu4w962bvtw.gif" alt="Test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scraping the top 5 synonyms of smart&lt;/p&gt;

&lt;p&gt;We can implement the same code to scrape the top 5 synonyms of smart instead of 1:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer')

async function scrape() {
   const browser = await puppeteer.launch({})
   const page = await browser.newPage()

   await page.goto('https://www.thesaurus.com/browse/smart')
   for(i = 1; i &amp;lt; 6; i++){
    var element = await page.waitFor("#meanings &amp;gt; div.css-ixatld.e15rdun50 &amp;gt; ul &amp;gt; li:nth-child(" + i + ") &amp;gt; a")
    var text = await page.evaluate(element =&amp;gt; element.textContent, element)
    console.log(text)
   }
   browser.close()
}
scrape()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzWmk0VK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44rfjhp90eu7k9163j0p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzWmk0VK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44rfjhp90eu7k9163j0p.gif" alt="5 synonyms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The "&lt;strong&gt;element&lt;/strong&gt;" variable will be: "&lt;strong&gt;#meanings &amp;gt; div.css-ixatld.e15rdun50 &amp;gt; ul &amp;gt; li:nth-child(1) &amp;gt; a&lt;/strong&gt;" on the first iteration, "&lt;strong&gt;#meanings &amp;gt; div.css-ixatld.e15rdun50 &amp;gt; ul &amp;gt; li:nth-child(2) &amp;gt; a&lt;/strong&gt;" on the second, and so on until it reaches the last iteration where the "element" variable will be "&lt;strong&gt;#meanings &amp;gt; div.css-ixatld.e15rdun50 &amp;gt; ul &amp;gt; li:nth-child(5) &amp;gt; a&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;As you can see, the only thing that is altered in the "element" variable throughout the iterations is the "li:nth-child()" value.&lt;/p&gt;

&lt;p&gt;This is because in our case, the elements that we are trying to scrape are all "li" elements inside a "ul" element,&lt;/p&gt;

&lt;p&gt;so we can easily scrape them in order by increasing the value inside "li:nth-child()":&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;li:nth-child(1) for the first synonym.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;li:nth-child(2) for the second synonym.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;li:nth-child(3) for the third synonym.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;li:nth-child(4) for the fourth synonym.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And li:nth-child(5) for the fifth synonym.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Final notes&lt;/p&gt;

&lt;p&gt;While web scraping has many advantages like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Saving time on manually collecting data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being able to programmatically aggregate pieces of data scraped from the web.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating a dataset of data that might be useful for machine learning, data visualization or data analytics purposes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It also has 2 disadvantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Some websites don't allow for scraping their data, one popular example is craigslist.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some people consider it to be a gray area since some use cases of web scraping practice user or entity data collection and storage.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Hopefully this article gave you some insight into web scraping in Node.js, it's practical applications, pros and cons, and how to extract specific elements and their text contents from webpages using the puppeteer library.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>SML - The language I love to hate. (Recursion example).</title>
      <author>Eckhardt</author>
      <pubDate>Wed, 13 Oct 2021 16:46:33 +0000</pubDate>
      <link>https://dev.to/eckhardtd/sml-the-language-i-love-to-hate-recursion-example-mem</link>
      <guid>https://dev.to/eckhardtd/sml-the-language-i-love-to-hate-recursion-example-mem</guid>
      <description>&lt;p&gt;Standard ML has been around for a while, I never cared for it until enrolling at &lt;a href="https://github.com/ossu/computer-science"&gt;OSSU's program&lt;/a&gt;. It's a functional programming language with very interesting features like &lt;code&gt;immutability&lt;/code&gt; and relies heavily on the usage of recursion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-recursive-example-in-sml"&gt;
  &lt;/a&gt;
  A recursive example in SML
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sml"&gt;&lt;code&gt;&lt;span class="kr"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function can also be expressed as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sml"&gt;&lt;code&gt;&lt;span class="kr"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use &lt;code&gt;factorial&lt;/code&gt; it may look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sml"&gt;&lt;code&gt;&lt;span class="kr"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;(*&lt;/span&gt;&lt;span class="cm"&gt; equivalent: 5 x 4 x 3 x 2 x 1 *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in actual fact, this function actually (cheekily) multiplies by 1 again on the last iteration, which has no effect on the output: &lt;code&gt;120&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-sml-as-a-web-developer"&gt;
  &lt;/a&gt;
  Writing SML as a web developer
&lt;/h2&gt;

&lt;p&gt;During the course assignments it was a REAL pain to not have the ability to declare variables in the upper scope and change their value, or use loops, and dealing with the thinking work that goes into recursion. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hot tip: If a function accepts an Array / List that needs to be processed in a loop - it most probably can be done with recursion too. 🤘&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#a-js-example-rewritten-in-sml"&gt;
  &lt;/a&gt;
  A JS example re-written in SML
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Return the sum of all elements in an array&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example 1&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sumArray&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;sumArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;

&lt;span class="c1"&gt;// Example 2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;sumArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much of the logic above is either ludicrous or doesn't exist in SML, and we'll have to do something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sml"&gt;&lt;code&gt;&lt;span class="kr"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;sum_array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;
  &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;hd&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="n"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sum_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tl&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;summed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum_array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c"&gt;(*&lt;/span&gt;&lt;span class="cm"&gt; 15 *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These were just a few quick examples. If you want to see me explain these things (a little) more and If you want to see me do this with 5 slightly more complex problems, give my latest Youtube video a watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pUh-_Ba_jUY"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;em&gt;Appreciate the 👍&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I think we developers should definitely focus on the language that is most demanded from us - to improve our skills / knowledge, nevertheless - SML has taught me that there are different and sometimes better and &lt;em&gt;cleaner&lt;/em&gt; ways of solving programming issues.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This has been Eckhardt Dreyer, coming to you with a look into what I explore on the web. If you like what I make &lt;a href="https://kaizen.com.na/payment?ref=dono&amp;amp;amt=10000"&gt;Buy me a coffee? 🍺&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>sml</category>
      <category>javascript</category>
      <category>recursion</category>
    </item>
    <item>
      <title>Comparing the best web servers: Caddy, Apache, and Nginx</title>
      <author>Matt Angelosanto</author>
      <pubDate>Wed, 13 Oct 2021 16:38:50 +0000</pubDate>
      <link>https://dev.to/logrocket/comparing-the-best-web-servers-caddy-apache-and-nginx-24gh</link>
      <guid>https://dev.to/logrocket/comparing-the-best-web-servers-caddy-apache-and-nginx-24gh</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ayooluwaisaiah/"&gt;Ayooluwa Isaiah&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;A web server is a piece of software that accepts a network request from a user agent, typically a web browser, and returns either the appropriate response for the request or an error message. Two dominant solutions for HTTP servers today are Apache and Nginx. However, a new player in the space, Caddy Web Server, is gaining traction for its ease of use.&lt;/p&gt;

&lt;p&gt;In this article, we’ll examine each web server, comparing the performance, customizability, and architecture of each. By the end of this tutorial, you should be familiar with the strengths of each web server and have a better grasp of which one is best suited for your project.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apache-http-server"&gt;
  &lt;/a&gt;
  Apache HTTP Server
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://httpd.apache.org"&gt;Apache HTTP Server&lt;/a&gt;, maintained by the Apache Software Foundation, was released in 1995, quickly becoming the world’s favorite web server. Most often used as part of the LAMP stack, Linux, Apache, MySQL, and PHP, Apache is available for both Unix and Windows operating systems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;Open sourced and written in C, Apache is based on a modular architecture that allows a system administrator to select what modules to apply either during compilation or at runtime, easily configuring how the server should operate. As a result, Apache caters to a wide range of use cases, from serving dynamic content to acting as a load balancer for &lt;a href="https://blog.logrocket.com/websockets-tutorial-how-to-go-real-time-with-node-and-react-8e4693fbf843/"&gt;supported protocols like HTTP and WebSockets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apache’s core functionalities include binding to ports on a machine and accepting and processing requests. However, these tasks are isolated by default through a set of Multi-Processing Modules (MPMs) that are included with the software package.&lt;/p&gt;

&lt;p&gt;The MPM architecture offers more options for customization depending on the needs of a particular site and the machine’s capabilities. For example, worker or event MPMs can replace the older prefork MPM, which uses one thread per connection and doesn't scale well when concurrency is required.&lt;/p&gt;

&lt;p&gt;In addition to the modules that are shipped as part of the server distribution, there is an &lt;a href="https://httpd.apache.org/modules/"&gt;abundance of third-party modules for Apache&lt;/a&gt; that you can use to extend its functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;You can find Apache's main configuration in a &lt;code&gt;.conf&lt;/code&gt; file: &lt;code&gt;/etc/apache2/apache2.conf&lt;/code&gt; on Debian-based Linux distributions and &lt;code&gt;/etc/httpd/httpd.conf&lt;/code&gt; on Fedora and Red Hat Enterprise Linux.&lt;/p&gt;

&lt;p&gt;However, to specify an alternate configuration file and achieve a desired behavior, you can use the &lt;code&gt;-f&lt;/code&gt; flag and any of the &lt;a href="https://httpd.apache.org/docs/2.4/mod/directives.html"&gt;available directives&lt;/a&gt;. Divide the server configuration into several &lt;code&gt;.conf&lt;/code&gt; files and add them using the &lt;code&gt;Include&lt;/code&gt; directive. Keep in mind that Apache may recognize changes to the main configuration file only after restarting.&lt;/p&gt;

&lt;p&gt;You can also change server configuration at the directory level using an &lt;a href="https://httpd.apache.org/docs/2.4/howto/htaccess.html#when"&gt;&lt;code&gt;.htaccess&lt;/code&gt; file&lt;/a&gt;, allowing you to customize behavior for individual websites without changing the main configuration. However, &lt;code&gt;.htaccess&lt;/code&gt; files can increase TTFB and CPU usage, degrading performance. When possible, you should avoid using &lt;code&gt;.htaccess&lt;/code&gt; files, and you can disable them altogether by setting the &lt;code&gt;AllowOverride&lt;/code&gt; directive to &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nginx"&gt;
  &lt;/a&gt;
  Nginx
&lt;/h2&gt;

&lt;p&gt;With origins tracing back to the &lt;a href="https://www.nginx.com/blog/maximizing-python-performance-with-nginx-parti-web-serving-and-caching/"&gt;C10K problem&lt;/a&gt;, which refers to a web server’s inability to support more than 10,000 concurrent users, &lt;a href="https://nginx.org"&gt;Nginx&lt;/a&gt; was developed with performance in mind. One of its original goals focused on speed, an area in which Apache was believed to be lacking.&lt;/p&gt;

&lt;p&gt;First appearing publicly in 2004 as an open source software under the 2-clause BSD license, Nginx expanded in 2011 with a commercial variant for the enterprise called Nginx Plus.&lt;/p&gt;

&lt;p&gt;Nginx is &lt;a href="https://w3techs.com/technologies/overview/web_server"&gt;currently being utilized on over 40 percent&lt;/a&gt; of the top 10,000 websites. When you consider that Cloudflare Server also utilizes Nginx under the hood for content delivery, the figure is even higher:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8BrhYpg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/web-server-usage-statistics-w3-tech.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8BrhYpg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/web-server-usage-statistics-w3-tech.png" alt="Web Server Usage Statistics W3 Tech"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;The default configuration, which is recommended, involves setting the &lt;code&gt;worker_processes&lt;/code&gt; directive to &lt;code&gt;auto&lt;/code&gt;. To utilize hardware resources efficiently, one worker process is created per CPU.&lt;/p&gt;

&lt;p&gt;On a Unix operating system, the configuration files for Nginx are located in the &lt;code&gt;/etc/nginx/&lt;/code&gt; directory with &lt;code&gt;nginx.conf&lt;/code&gt; as the main configuration file. Nginx uses directives for its configuration, which are grouped into blocks or contexts. A skeleton of the configuration file is shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;www&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;worker_processes&lt;/span&gt; &lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;include&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;nginx&lt;/span&gt;&lt;span class="sr"&gt;/modules-enabled/&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;When high performance and scalability are critical requirements, Nginx is frequently the go-to web server. Nginx uses an asynchronous, event-driven, and non-blocking architecture. It follows a multi-process model in which one master process creates a number of worker processes for handling all network events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ps aux &lt;span class="nt"&gt;-P&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;nginx
root     19199  0.0  0.0  55284  1484 ?        Ss   13:02   0:00 nginx: master process /usr/sbin/nginx
www-data 19200  0.0  0.0  55848  5140 ?        S    13:02   0:00 nginx: worker process
www-data 19201  0.0  0.0  55848  5140 ?        S    13:02   0:00 nginx: worker process
www-data 19202  0.0  0.0  55848  5140 ?        S    13:02   0:00 nginx: worker process
www-data 19203  0.0  0.0  55848  5140 ?        S    13:02   0:00 nginx: worker process
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The master process controls the workers’ behaviors and carries out privileged operations like binding to network ports and applying configuration, allowing Nginx to support thousands of incoming network connections per worker process. Instead of creating new threads or processes for each connection, you only need a new file descriptor and a small amount of additional memory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caddy"&gt;
  &lt;/a&gt;
  Caddy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://caddyserver.com/"&gt;Caddy&lt;/a&gt; is an open source web server platform designed to be simple, easy to use, and secure. Written in Go with zero dependencies, Caddy is easy to download and runs on almost every platform that Go compiles on.&lt;/p&gt;

&lt;p&gt;By default, Caddy comes with support for automatic HTTPS by provisioning and renewing certificates through &lt;a href="https://letsencrypt.org"&gt;Let's Encrypt&lt;/a&gt;. Of the three web servers we’ve reviewed, Caddy is the only to provide these features out of the box, and it also comes with automatic redirection of HTTP traffic to HTTPS.&lt;/p&gt;

&lt;p&gt;In comparison to Apache and Nginx, Caddy's configuration files are much smaller. Additionally, Caddy runs on TLS 1.3, the newest standard in transport security.&lt;/p&gt;

&lt;p&gt;Installing Caddy is quite straightforward. Simply download the static binary for your preferred platform on &lt;a href="https://github.com/caddyserver/caddy/releases"&gt;GitHub&lt;/a&gt; or follow the instructions on the &lt;a href="https://github.com/caddyserver/caddy/releases"&gt;installation document&lt;/a&gt;. To launch the Caddy server daemon, run &lt;code&gt;caddy run&lt;/code&gt; in the terminal. However, nothing will happen without a configuration file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;Caddy uses JSON for its configuration but also supports several configuration adapters. The standard for setting up configuration is through a Caddyfile. Here's a simple "Hello World" configuration, which binds to &lt;code&gt;port 3000&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;respond&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the changes to take effect, you’ll need to stop the server by pressing &lt;code&gt;Ctrl+C&lt;/code&gt; and restarting it with &lt;code&gt;caddy run&lt;/code&gt;. Alternately, you can apply the new configuration to a running server by executing &lt;code&gt;caddy reload&lt;/code&gt; in a separate terminal. The latter approach is preferable to avoid downtime.&lt;/p&gt;

&lt;p&gt;At this point, accessing &lt;code&gt;http://localhost:3000&lt;/code&gt; in your browser or through &lt;code&gt;curl&lt;/code&gt; should produce the expected "Hello, world!" message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;curl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;http://localhost:&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Hello,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;world!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Caddy provides the following directives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;file_server&lt;/code&gt;: implements a static file server&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;php_fastcgi&lt;/code&gt;: proxies requests to a PHP FastCGI&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;reverse_proxy&lt;/code&gt;: directs incoming traffic to one or more backends with load balancing, health checks, and automatic retries&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;In terms of performance, Caddy has been shown to be &lt;a href="https://github.com/centminmod/centminmod-caddy-v2#caddy-vs-centmin-mod-nginx-http2-https-benchmarks"&gt;competitive with Apache but behind Nginx&lt;/a&gt; both in terms of requests handled per second and stability under load.&lt;/p&gt;

&lt;p&gt;If Nginx is being used for performance optimization,  it may not be possible to replace it with Caddy without observing some degradation in performance. Another possible downside to Caddy is that it &lt;a href="https://w3techs.com/technologies/overview/web_server"&gt;currently has a small market share&lt;/a&gt;, possibly limiting resources for education and troubleshooting:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GUZWxy2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/w3-web-server-popularity-by-ranking.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUZWxy2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/w3-web-server-popularity-by-ranking.png" alt="W3 Web Server Popularity By Ranking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we discussed some of the key traits of Caddy, Apache, and Nginx to help you choose the web server that best suits your project’s needs.&lt;/p&gt;

&lt;p&gt;If your primary concern is performance, or you plan to serve a large amount of static content, Nginx is likely your best option. While Caddy is easy to configure and performant for most use cases, if you need flexibility and customization, Apache is your best bet.&lt;/p&gt;

&lt;p&gt;Keep in mind that you can also combine any two web servers for a great result. For example, you can serve static files with Nginx and process dynamic requests with Apache or Caddy. Thanks for reading, and happy coding!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-your-web-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Full visibility into your web apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and &lt;a class="mentioned-user" href="https://dev.to/ngrx"&gt;@ngrx&lt;/a&gt;
/store.&lt;/p&gt;

&lt;p&gt;In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>nginx</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Advanced MessagePack capabilities</title>
      <author>tarantool</author>
      <pubDate>Wed, 13 Oct 2021 16:36:52 +0000</pubDate>
      <link>https://dev.to/tarantool/advanced-messagepack-capabilities-4735</link>
      <guid>https://dev.to/tarantool/advanced-messagepack-capabilities-4735</guid>
      <description>&lt;h1&gt;
  &lt;a href="#advanced-messagepack-capabilities"&gt;
  &lt;/a&gt;
  Advanced MessagePack capabilities
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TjS8Zjj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/022osmi13djx55a7zc9j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TjS8Zjj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/022osmi13djx55a7zc9j.jpg" alt="e9d6306b85aa4ce811a0dcca6d033789"&gt;&lt;/a&gt; &lt;br&gt;
Author: Eugene Leonovich&lt;br&gt;
MessagePack is a binary format for data serialization. It is positioned by the authors as a more efficient alternative to JSON. Due to its speed and portability, it's often used as a format for data exchange in high-performance systems. The other reason this format became popular is that it's very easy to implement. Your favorite programming language probably already has several libraries designed to work with it.&lt;br&gt;
In this article, I'm not going to talk about the design of MessagePack, and I am not going to compare it to similar products. There is a lot of information about it on the internet. However, there is not enough information about MessagePack's extension types system. So I'm going to explain what it is, show some examples, and talk about how to make serialization even more effective with extension types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-extension-type"&gt;
  &lt;/a&gt;
  The Extension type
&lt;/h2&gt;

&lt;p&gt;The MessagePack specification defines 9 base types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Nil&lt;/li&gt;
&lt;li&gt;  Boolean&lt;/li&gt;
&lt;li&gt;  Integer&lt;/li&gt;
&lt;li&gt;  Float&lt;/li&gt;
&lt;li&gt;  String&lt;/li&gt;
&lt;li&gt;  Binary&lt;/li&gt;
&lt;li&gt;  Array&lt;/li&gt;
&lt;li&gt;  Map&lt;/li&gt;
&lt;li&gt;  Extension.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extension is a container designed for storing extension types. Let's look closely at how it works. It will help us with writing our own types.&lt;br&gt;
Here is how the container is structured:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ASSn3CrM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqtizld8htnwswrd75to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ASSn3CrM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqtizld8htnwswrd75to.png" alt="425470e1345d1767f7f1ae6d29195f30 (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Header&lt;/em&gt; is the container's header (1 to 5 bytes). It contains the payload size, i.e., the length of the Data field. To learn more about how the header is formed, take a look at the &lt;a href="https://github.com/msgpack/msgpack/blob/master/spec.md#ext-format-family"&gt;specification&lt;/a&gt;.&lt;br&gt;
&lt;em&gt;Type&lt;/em&gt; is the ID of the stored type, an 8-bit signed integer. Negative values are reserved for official types. User types' IDs can take any value in the range from 0 to 127.&lt;br&gt;
&lt;em&gt;Data&lt;/em&gt; is an arbitrary byte string up to 4 GiB long, which contains the actual data. The format of official types is described in the specification, while the format of user types may depend entirely on the developer's imagination.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The list of official types currently includes only Timestamp with the ID of -1. Occasionally, we see suggestions to add new types (such as UUID, multidimensional arrays, or geo coordinates), but since the discussions are not very active, I wouldn't expect any updates in the near future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N02wpA0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssplc0x8mo1l6e3ecoqu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N02wpA0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssplc0x8mo1l6e3ecoqu.jpg" alt="34ae802c3fd31328904479bee387fe93 (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's enough theory, let's start coding! For these examples, we'll use the &lt;a href="https://github.com/rybakit/msgpack.php"&gt;msgpack.php&lt;/a&gt; MessagePack library since it provides a convenient API to handle extension types. I hope you'll find these code examples easy to understand even if you use other libraries.&lt;br&gt;
Since I mentioned UUID, let's implement support for this data type as an example. To do so, we'll need to write an extension---a class to serialize and deserialize UUID values. We will use the &lt;a href="https://symfony.com/doc/current/components/uid.html"&gt;symfony/uid&lt;/a&gt; library to make handling such values easier.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This example can be adapted for any UUID library, be it the popular * &lt;a href="https://uuid.ramsey.dev/en/latest/"&gt;&lt;em&gt;ramsey/uuid&lt;/em&gt;&lt;/a&gt;&lt;/em&gt;, PECL * &lt;a href="https://pecl.php.net/package/uuid"&gt;&lt;em&gt;uuid&lt;/em&gt;&lt;/a&gt; module, or a user implementation.*&lt;br&gt;
Let's name our class &lt;code&gt;UuidExtension&lt;/code&gt;. The class must implement the &lt;code&gt;Extension&lt;/code&gt; interface:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use MessagePack\BufferUnpacker;
use MessagePack\Packer;
use MessagePack\TypeTransformer\Extension;
use Symfony\Component\Uid\Uuid;

final class UuidExtension implements Extension
{
    public function getType(): int
    {
        // TODO
    }

    public function pack(Packer $packer, mixed $value): ?string
    {
        // TODO
    }

    public function unpackExt(BufferUnpacker $unpacker, int $extLength): Uuid
    {
        // TODO
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We determined earlier what the type (ID) of the extension is, so we can easily implement the &lt;code&gt;getType()&lt;/code&gt; method. In the simplest case, this method could return a fixed constant, globally defined for the whole project. However, to make the class more versatile, we'll let it define the type when initializing the extension. Let's add a constructor with one integer argument, &lt;code&gt;$type&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/** @readonly */
private int $type;

public function __construct(int $type)
{
    if ($type &amp;lt; 0 || $type &amp;gt; 127) {
        throw new \OutOfRangeException(
            "Extension type is expected to be between 0 and 127, $type given"
        );
    }

    $this-&amp;gt;type = $type;
}

public function getType(): int
{
    return $this-&amp;gt;type;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now let's implement the &lt;code&gt;pack()&lt;/code&gt; method. From the method's signature, we can see that it takes two parameters: a &lt;code&gt;Packer&lt;/code&gt; class instance and a &lt;code&gt;$value&lt;/code&gt; of any type. The method must return either a serialized value (wrapped into the Extension container) or &lt;code&gt;null&lt;/code&gt; if the class of the extension does not support the value type:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function pack(Packer $packer, mixed $value): ?string
{
    if (!$value instanceof Uuid) {
        return null;
    }

    return $packer-&amp;gt;packExt($this-&amp;gt;type, $value-&amp;gt;toBinary());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The reverse operation isn't much harder to implement. The &lt;code&gt;unpackExt()&lt;/code&gt; method takes a &lt;code&gt;BufferUnpacker&lt;/code&gt; instance and the length of the serialized data (the size of the Data field from the schema above). Since we've saved the binary representation of a UUID object in this field, all we need to do is read this data and build a &lt;code&gt;Uuid&lt;/code&gt; object:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function unpackExt(BufferUnpacker $unpacker, int $extLength): Uuid
{
    return Uuid::fromString($unpacker-&amp;gt;read($extLength));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Our extension is ready! The last step is to register a class object with a specific ID. Let the ID be &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$uuidExt = new UuidExtension(0);
$packer = $packer-&amp;gt;extendWith($uuidExt);
$unpacker = $unpacker-&amp;gt;extendWith($uuidExt);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Let's make sure everything works correctly:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$uuid = new Uuid('7e3b84a4-0819-473a-9625-5d57ad1c9604');

$packed = $packer-&amp;gt;pack($uuid);
$unpacked = $unpacker-&amp;gt;reset($packed)-&amp;gt;unpack();

assert($uuid-&amp;gt;equals($unpacked));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;That was an example of a simple UUID extension. Similarly, you can add support for any other type used in your application: &lt;a href="https://github.com/rybakit/msgpack.php/blob/master/examples/MessagePack/DateTimeExtension.php"&gt;DateTime&lt;/a&gt;, &lt;a href="https://github.com/tarantool-php/client/blob/master/src/Packer/Extension/DecimalExtension.php"&gt;Decimal&lt;/a&gt;, Money. Or you can write a versatile extension that allows serializing any object (as it was done in &lt;a href="https://vkcom.github.io/kphp/kphp-language/howto-by-kphp/serialization-msgpack.html?highlight=msgpack#internal-implementation-details"&gt;KPHP&lt;/a&gt;).&lt;br&gt;
However, this is not the only use for extensions. I'll now show you some interesting examples that demonstrate other advantages of using extension types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lorem-ipsum-or-compressing-the-incompressible"&gt;
  &lt;/a&gt;
  "Lorem ipsum," or compressing the incompressible
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6tsW-sJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyqp8ph4if39wthe6apk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6tsW-sJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyqp8ph4if39wthe6apk.jpg" alt="851828579dec0b5e1c75b41834b61030 (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've ever inquired about MessagePack before, you probably know the phrase from its official website, &lt;a href="https://msgpack.org/"&gt;msgpack.org&lt;/a&gt;: "&lt;em&gt;It's like JSON, but fast and small&lt;/em&gt;."&lt;br&gt;
In fact, if you compare how much memory space the same data occupies in JSON and MessagePack, you'll see why the latter is a much more compact format. For example, the number 100 takes 3 bytes in JSON and only 1 in MessagePack. The difference becomes more significant as the number's order of magnitude grows. For the maximum value of int64 (9223372036854775807), the size of the stored data differs by as much as 10 bytes (19 against 9)!&lt;br&gt;
The same is true for boolean values---4 or 5 bytes in JSON against 1 byte in MessagePack. It is also true for arrays because many syntactic symbols---such as commas separating the elements, semicolons separating the key-value pairs, and brackets marking the array limits---don't exist in binary format. Obviously, the larger the array is, the more syntactic litter accumulates along with the payload.&lt;br&gt;
String values, however, are a little more complicated. If your strings don't consist entirely of quotation marks, line feeds, and other special symbols that require escaping, then you won't see a difference between their sizes in JSON and in MessagePack. For example, &lt;code&gt;"foobar"&lt;/code&gt; has a length of 8 bytes in JSON and 7 in MessagePack. Note that the above only applies to UTF-8 strings. For binary strings, JSON's disadvantage against MessagePack is obvious.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Knowing this peculiarity of MessagePack, you can have a good laugh reading articles that compare the two formats in terms of data compression efficiency while using mainly string data for the tests. Apparently, any conclusions based on the results of such tests would make no practical sense. So take those articles skeptically and run comparative tests on *&lt;/em&gt;&lt;strong&gt;your own&lt;/strong&gt;* &lt;em&gt;data.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At some point, there were discussions about whether to add string compression (individual or in frames) to the specification to make string serialization more compact. However, the idea was rejected, and the implementation of this feature was left to users. So let's try it.&lt;br&gt;
Let's create an extension that will compress long strings. We will use whatever compression tool is at hand, for example, &lt;a href="https://www.php.net/manual/en/book.zlib.php"&gt;zlib&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Choose the data compression algorithm based on the specifics of your data. For example, if you are working with lots of short strings, take a look at &lt;em&gt;[*SMAZ&lt;/em&gt;](&lt;a href="https://github.com/antirez/smaz"&gt;https://github.com/antirez/smaz&lt;/a&gt;)&lt;/em&gt;.*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's start with the constructor for our new class, &lt;code&gt;TextExtension&lt;/code&gt;. The first argument is the extension ID, and as a second optional argument, we'll add minimum string length. Strings shorter than this value will be serialized in a standard way, without compression. In this way, we will avoid cases where the compressed string ends up longer than the initial one:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;final class TextExtension implements Extension
{
    /** @readonly */
    private int $type;

    /** @var positive-int */
    private int $minLength;

    public function __construct(int $type, int $minLength = 100)
    {
        ...

        $this-&amp;gt;type = $type;
        $this-&amp;gt;minLength = $minLength;
    }

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To implement the &lt;code&gt;pack()&lt;/code&gt; method, we might write something like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function pack(Packer $packer, mixed $value): ?string
{
    if (!is_string($value)) {
        return null;
    }

    if (strlen($value) &amp;lt; $this-&amp;gt;minLength) {
        return $packer-&amp;gt;packStr($value);
    }

    // compress and pack
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;However, this wouldn't work. String is one of the basic types, so the packer will serialize it before our extension is called. The reason is that serialization is implemented in msgpack.php for better performance. Otherwise, before serializing each value, the packer would need to scan the available extensions, considerably slowing down the process.&lt;br&gt;
Therefore, we need to tell the packer not to serialize certain strings as, you know, strings but to use an extension. As you might guess from the &lt;a href="#uuid-example"&gt;UUID example&lt;/a&gt;, it can be done via a &lt;a href="https://martinfowler.com/bliki/ValueObject.html"&gt;ValueObject&lt;/a&gt;. Let's call it &lt;code&gt;Text&lt;/code&gt;, similar to the extension class:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
 * @psalm-immutable
 */
final class Text
{
    public function __construct(
        public string $str
    ) {}


    public function __toString(): string
    {
        return $this-&amp;gt;str;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So instead of&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$packed = $packer-&amp;gt;pack("a very long string");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;we'll use a &lt;code&gt;Text&lt;/code&gt; object to mark long strings:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$packed = $packer-&amp;gt;pack(new Text("a very long string"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Let's update the &lt;code&gt;pack()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function pack(Packer $packer, mixed $value): ?string
{
    if (!$value instanceof Text) {
        return null;
    }

    $length = strlen($value-&amp;gt;str);
    if ($length &amp;lt; $this-&amp;gt;minLength) {
        return $packer-&amp;gt;packStr($value-&amp;gt;str);
    }

    // compress and pack
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now we just need to compress the string and put the result in an Extension. Note that the minimum length limit does not guarantee that the string will take less space after compression. For this reason, you might want to compare the lengths of the compressed string and the original and choose whichever is more compact:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$context = deflate_init(ZLIB_ENCODING_GZIP);
$compressed = deflate_add($context, $value-&amp;gt;str, ZLIB_FINISH);

return isset($compressed[$length - 1])
    ? $packer-&amp;gt;packStr($value-&amp;gt;str)
    : $packer-&amp;gt;packExt($this-&amp;gt;type, $compressed);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Deserialization:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function unpackExt(BufferUnpacker $unpacker, int $extLength): string
{
    $compressed = $unpacker-&amp;gt;read($extLength);
    $context = inflate_init(ZLIB_ENCODING_GZIP);

    return inflate_add($context, $compressed, ZLIB_FINISH);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Let's see the result:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$longString = &amp;lt;&amp;lt;&amp;lt;STR
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, 
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo 
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse 
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat 
non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
STR;

$packedString = $packer-&amp;gt;pack($longString); // 448 bytes
$packedCompressedString = $packer-&amp;gt;pack(new Text($longString)); // 291 bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In this example, we saved 157 bytes, or &lt;em&gt;35% of what would be the standard serialization result&lt;/em&gt;, on a single line!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-schemaless-to-schemamixed"&gt;
  &lt;/a&gt;
  From "schema-less" to "schema-mixed"
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8BaWaOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hom3tiyn4bw7uqyfwo1g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8BaWaOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hom3tiyn4bw7uqyfwo1g.jpg" alt="04bbfc5f6758a3841bc7753e4421e960 (8)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Compressing long strings is not the only way to save space. MessagePack is a &lt;em&gt;schemaless&lt;/em&gt;, or &lt;em&gt;schema-on-read&lt;/em&gt;, format that has its advantages and disadvantages. One of the disadvantages in comparison with &lt;em&gt;schema-full&lt;/em&gt; (&lt;em&gt;schema-on-write&lt;/em&gt;) formats is highly ineffective serialization of repeated data structures. For example, this happens with selections from a database where all elements in the resulting array have a similar structure:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$userProfiles = [
    [
        'id' =&amp;gt; 1,
        'first_name' =&amp;gt; 'First name 1',
        'last_name' =&amp;gt; 'Last name 1',
    ],
    [
        'id' =&amp;gt; 2,
        'first_name' =&amp;gt; 'First name 2',
        'last_name' =&amp;gt; 'Last name 2',
    ],
    ...
    [
        'id' =&amp;gt; 100,
        'first_name' =&amp;gt; 'First name 100',
        'last_name' =&amp;gt; 'Last name 100',
    ],
];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you serialize this array with MessagePack, the repeated keys of each element in the array will take a substantial part of the total data size. But what if we could save the keys of such structured arrays just once? It would significantly cut down the size and also speed up serialization since the packer would have fewer operations to perform.&lt;br&gt;
Like before, we are going to use extension types for that. Our type will be a value object wrapped around an arbitrary &lt;em&gt;structured&lt;/em&gt; array:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
 * @psalm-immutable
 */
final class StructList
{
    public function __construct(
        public array $list,
    ) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If your project includes a library for database handling, there is probably a special class in that library to store table selection results. You can use this class as a type instead of/along with&lt;/em&gt; &lt;code&gt;StructList&lt;/code&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is how we are going to serialize such arrays. First, we'll check the array size. Of course, if the array is empty or has only one element, there is no reason to store keys separately from values. We'll serialize arrays like these in a standard way.&lt;br&gt;
In other cases, we'll first save a list of keys and then a list of values. We won't be storing an associative array list, which is the standard MessagePack option. Instead, we'll write data in a more compact form:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yYSeIT90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hv5qdcphz9uxjxqbt3y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yYSeIT90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hv5qdcphz9uxjxqbt3y.png" alt="3ca04136382cc4c0767fbc1626e9908d (9)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Implementation:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;final class StructListExtension implements Extension
{
    ...

    public function pack(Packer $packer, mixed $value): ?string
    {
        if (!$value instanceof StructList) {
            return null;
        }

        $size = count($value-&amp;gt;list);
        if ($size &amp;lt; 2) {
            return $packer-&amp;gt;packArray($value-&amp;gt;list);
        }

        $keys = array_keys(reset($value-&amp;gt;list));

        $values = '';
        foreach ($value-&amp;gt;list as $item) {
            foreach ($keys as $key) {
                $values .= $packer-&amp;gt;pack($item[$key]);
            }
        }

        return $packer-&amp;gt;packExt($this-&amp;gt;type,
            $packer-&amp;gt;packArray($keys).
            $packer-&amp;gt;packArrayHeader($size).
            $values
        );
    }

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To deserialize, we need to unpack the keys array and then use it to restore the initial array:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function unpackExt(BufferUnpacker $unpacker, int $extLength): array
{
    $keys = $unpacker-&amp;gt;unpackArray();
    $size = $unpacker-&amp;gt;unpackArrayHeader();

    $list = [];
    for ($i = 0; $i &amp;lt; $size; ++$i) {
        foreach ($keys as $key) {
            $list[$i][$key] = $unpacker-&amp;gt;unpack();
        }
    }

    return $list;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;That's it! Now, if we serialize &lt;code&gt;$profiles&lt;/code&gt; from the example above as a normal array and as a structured &lt;code&gt;StructList&lt;/code&gt;, we'll see a great difference in size---&lt;em&gt;the latter will be 47% more compact&lt;/em&gt;.&lt;br&gt;
    $packedList = $packer-&amp;gt;pack($profiles); // 5287 bytes&lt;br&gt;
    $packedStructList = $packer-&amp;gt;pack(new StructList($profiles)); // 2816 bytes&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We could go further and create a specialized &lt;code&gt;Profiles&lt;/code&gt; type to store information about the array structure in the extension code. This way, we wouldn't need to save the keys array. However, in this case, we would lose in versatility.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We've taken a look at just a few examples of using extension types in MessagePack. To see more examples, check the &lt;a href="https://github.com/rybakit/msgpack.php/tree/master/examples"&gt;msgpack.php&lt;/a&gt; library. For the implementations of all extension types supported by the &lt;a href="https://www.tarantool.io/en/doc/latest/dev_guide/internals/msgpack_extensions/"&gt;Tarantool&lt;/a&gt; protocol, see the &lt;a href="https://github.com/tarantool-php/client/tree/master/src/Packer/Extension"&gt;tarantool/client&lt;/a&gt; library.&lt;br&gt;
I hope this article gave you a sense of what extension types are and how they can be useful. If you're already using MessagePack but haven't known about the feature, this information may inspire you to revise your current methods and start writing custom types.&lt;br&gt;
If you're just wondering which serialization format to choose for your next project, the article might help you make a reasonable choice, adding a point in favor of MessagePack :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;p&gt;&lt;a href="http://www.tarantool.io/en/download/os-installation/docker-hub/?utm_source=dev&amp;amp;utm_medium=referrer&amp;amp;utm_campaign=2021"&gt;Get Tarantool on our website&lt;/a&gt;&lt;br&gt;
&lt;a href="http://t.me/tarantool?utm_source=dev&amp;amp;utm_medium=referrer&amp;amp;utm_campaign=2021"&gt;Get help in our telegram channel&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
      <category>datacompression</category>
      <category>coding</category>
    </item>
  </channel>
</rss>
