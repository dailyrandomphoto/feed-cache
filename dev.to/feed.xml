<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>‚ÄúTu perfil se ajusta a este empleo‚Äù</title>
      <author>Manu Martinez</author>
      <pubDate>Tue, 18 Jan 2022 09:23:07 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/tu-perfil-se-ajusta-a-este-empleo-2dc7</link>
      <guid>https://dev.to/whitehatdevv/tu-perfil-se-ajusta-a-este-empleo-2dc7</guid>
      <description>&lt;p&gt;Cu√°ntas veces habr√°s le√≠do en una oferta de trabajo la frase ‚ÄúTu perfil se ajusta a este empleo‚Äù, para luego descubrir que lo √∫nico que se ajusta en ella es tan solo una palabra que coincide con tu curr√≠culum profesional? &lt;/p&gt;

&lt;p&gt;El otro d√≠a, como de costumbre, andaba perdiendo el tiempo haciendo scroll infinito en LinkedIn y ya que estaba, mi curiosidad me llev√≥ a investigar algunas ofertas de trabajo (no s√© que tiene esta plataforma, que terminas entrado una o dos veces al d√≠a y antes que te des cuenta, has malgastado 20 minutos de tu tiempo en publicaciones sobre fotos de bodas y packs de bienvenida de empresa, as√≠ como art√≠culos en los que se glorifica hasta la obtenci√≥n de la licencia de conducir... pero no te preocupes que de esto ya hablaremos otro d√≠a üòÇ).&lt;/p&gt;

&lt;p&gt;Quiz√°s te haya comentando en los &lt;a href="https://dev.to/whitehatdevv/series/16158"&gt;anteriores post&lt;/a&gt; que trabajo como desarrollador, as√≠ que lo m√°s normal es que estuviera investigando ofertas sobre mi campo profesional, pero en vez de buscar por el nombre de mi profesi√≥n, decid√≠ buscar directamente por mi ubicaci√≥n (que quieres que te diga, a veces la pereza lleva a l√≠mites insospechados). Si bien es cierto que la mayor√≠a de las ofertas estaban dentro de mi sector profesional (desarrollador, ingeniero de software, etc), de entre todas ellas hubo una que me llam√≥ la atenci√≥n en particular: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ÄúAbogado biling√ºe espa√±ol-alem√°n‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Y justo debajo, aparec√≠a la foto de mi perfil con el siguiente comentario: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ÄúTu perfil se ajusta a este empleo‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;En ese preciso momento me di cuenta de lo desastroso que puede llegar a ser LinkedIn recomendando ofertas. Y es que se puede saber que tengo yo que ver con la Abogac√≠a? Y lo mismo digo del Alem√°n. En lo √∫nico que coincid√≠a con ese t√≠tulo era el espa√±ol, pero nada m√°s. Si bien es cierto que s√© algo de leyes (como las de tr√°fico o que no hay que hacer ruido pasadas las 22h de la noche) de ah√≠ a decirme que encajo en un puesto de abogado es dar un salto m√°s grande que Neil Armstrong llegando a la luna. üöÄ &lt;/p&gt;

&lt;p&gt;S√© puede saber que te he hecho LinkedIn para que me recomiendes ofertas que parecen salidas de la chistera de un mago? üê∞&lt;/p&gt;

&lt;p&gt;Tengo que decir, que tras mi asombro inicial, decid√≠ leer m√°s acerca de aquella oferta, no fuera a ser que se tratase de la mayor oportunidad profesional de mi vida y que ni siquiera yo conoc√≠a. Pero tras leer una y otra vez toda la descripci√≥n y requisitos que ofrec√≠a el anuncio, no logr√© a ver que palabras clave hab√≠a utilizado el algoritmo de LinkedIn para relacionarme con ese empleo. Entiendo que su objetivo principal sea ser una red social, pero la mayor√≠a de usuarios que entran en la plataforma lo hacen para buscar trabajo. Trabajo de lo suyo. &lt;/p&gt;

&lt;p&gt;Ahora bien, desde ese d√≠a en que me met√≠ a leer la oferta para abogado, me van llegado de vez en cuando mensajes de LinkedIn al correo, recomend√°ndome empleos similares. Todos ellos sobre abogac√≠a, claro est√°. üòê Tal vez deba hacer caso y hacer un dr√°stico cambio de profesi√≥n. Al fin y al cabo, me lo est√° recomendado LinkedIn. Qu√© mal podr√≠a hacerme? &lt;/p&gt;

&lt;p&gt;Con lo sencillo que es comparar varias preferencias y habilidades, y a partir de ah√≠, ir mostrando ofertas que se ajusten a uno mismo. Pero siempre tiene que haber alguien que lo complique todo m√°s de la cuenta. Y parece ser que hoy LinkedIn repite en el primer puesto. Si no fuera por la cantidad de memes sobre programaci√≥n que puedo ver, ya me habr√≠a vuelto a Instagram hace tiempo! Esta claro que todas estas plataformas para encontrar trabajo (tales como Infojobs, Indeed, etc) necesitan un cambio dr√°stico en sus funciones, necesitan centrarse en lograr cumplir con aquello que promulgan. Eso es al menos lo que dice la ley que se debe hacer. Cr√©eme, s√© de lo que hablo, al fin y al cabo, podr√≠a ser abogado biling√ºe espa√±ol-alem√°n.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introducing the Offen Protocol</title>
      <author>Hendrik</author>
      <pubDate>Tue, 18 Jan 2022 09:10:24 +0000</pubDate>
      <link>https://dev.to/hendr_ik/introducing-the-offen-protocol-3inm</link>
      <guid>https://dev.to/hendr_ik/introducing-the-offen-protocol-3inm</guid>
      <description>&lt;p&gt;We are building &lt;a href="https://www.offen.dev/?utm_source=forum&amp;amp;utm_campaign=210"&gt;Offen,&lt;/a&gt; a fair and lightweight web analytics software that treats operators and users as equal parties. Along the way, we discovered many subtleties and details to consider and created the Offen Protocol for all software out there that aims to handle usage data in a transparent way. Read the full version of &lt;a href="https://www.offen.dev/blog/offen-protocol/?utm_source=forum&amp;amp;utm_campaign=210"&gt;this article on the Offen blog.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The underlying concept is the definition of five actions that clients can take when they interact with a server that processes their data. These actions correspond to the rights of the data subject as defined by GDPR.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Probe&lt;/strong&gt; is used to request additional information about the service.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Register&lt;/strong&gt; is used when a client wants to make itself known to the server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Submit&lt;/strong&gt; is the action taken when a client transfers data to the client.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Query&lt;/strong&gt; will be used when clients want to query the server for data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Purge&lt;/strong&gt; can be used by clients that want to initiate removal of data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full specification document can be &lt;a href="https://offen.github.io/protocol/"&gt;found on the website&lt;/a&gt;. The protocol is not overly complicated and is perhaps even more of a convention than a specification. However, we have extracted what we use in Offen and added these implementations to the &lt;a href="https://github.com/offen/protocol"&gt;GitHub repository&lt;/a&gt;, which also contains the specification itself.&lt;/p&gt;

&lt;p&gt;Please let us know what you think. We‚Äôre happy to open the discussion: &lt;a href="https://twitter.com/hioffen"&gt;tweet at us&lt;/a&gt;, send us &lt;a href="//mailto:hioffen@posteo.de"&gt;an email&lt;/a&gt;, or &lt;a href="https://github.com/offen/protocol"&gt;open an issue on the GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;_&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>privacy</category>
    </item>
    <item>
      <title>Some Techniques to Enhance Your Terraform Proficiency</title>
      <author>Serhii Vasylenko</author>
      <pubDate>Tue, 18 Jan 2022 09:05:09 +0000</pubDate>
      <link>https://dev.to/aws-builders/some-techniques-to-enhance-your-terraform-proficiency-4n9e</link>
      <guid>https://dev.to/aws-builders/some-techniques-to-enhance-your-terraform-proficiency-4n9e</guid>
      <description>&lt;p&gt;Terraform built-in functionality is very feature-rich: functions, expressions, and meta-arguments provide many ways to shape the code and fit it to a particular use case. &lt;/p&gt;

&lt;p&gt;I want to share a few valuable practices to boost your Terraform expertise in this blog.&lt;/p&gt;

&lt;p&gt;Two notes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1Ô∏è‚É£ &lt;em&gt;Some code examples in this article will work with Terraform version 0.15 and onwards. But if you‚Äôre still using 0.14 or lower, here‚Äôs another motivation for you to upgrade&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;2Ô∏è‚É£ &lt;em&gt;I'll be using AWS Terraform provider code examples throughout the article but mentioned Terraform functions and expressions are provider-agnostic and will work the same with other providers&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conditional-resources-creation"&gt;
  &lt;/a&gt;
  Conditional resources creation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dOYlsteO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09b7epalarykbci29yqz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dOYlsteO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09b7epalarykbci29yqz.png" alt="Conditional resources creation" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs start from the most popular one (although, still may be new for somebody): whether to create a resource depending on some fact, e.g., the value of a variable. Terraform meta-argument &lt;code&gt;count&lt;/code&gt; helps to describe that kind of logic.&lt;/p&gt;

&lt;p&gt;Here is how it may look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="s2"&gt;"aws_ssm_parameter"&lt;/span&gt; &lt;span class="s2"&gt;"ami_id"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ami_channel&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

  &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;local&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ami_channels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ami_channel&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The notation &lt;code&gt;var.ami_channel == "" ? 0 : 1&lt;/code&gt; is called &lt;em&gt;conditional expression&lt;/em&gt; and means the following: if my variable is empty (&lt;code&gt;var.ami_channel == ""&lt;/code&gt; ‚Äî hence, true) then set the count to 0, otherwise set to 1.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;true_val&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;false_val&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this illustration, I want to get the AMI ID from the SSM Parameter only if the AMI channel (e.g., beta or alpha) is specified. Otherwise, providing that the &lt;code&gt;ami_channel&lt;/code&gt; variable is an empty string by default (""), the data source should not be created.&lt;/p&gt;

&lt;p&gt;When following this method, keep in mind that the resource address will contain the index identifier. So when I need to use the value of the SSM parameter from our example, I need to reference it the following way:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="nx"&gt;ami_id&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aws_ssm_parameter&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ami_id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;count&lt;/code&gt; meta-argument can also be used to create a whole module conditionally:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"bucket"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create_bucket&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"./modules/s3_bucket"&lt;/span&gt;

  &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"my-unique-bucket"&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;var.create_bucket == true ? 1 : 0&lt;/code&gt; expression can be written even shorter: &lt;code&gt;var.create_bucket ? 1 : 0&lt;/code&gt; because the &lt;code&gt;create_bucket&lt;/code&gt; variable has boolean type, apparently.&lt;/p&gt;

&lt;p&gt;But what if you need to produce more than one instance of a resource or module? And still be able to avoid their creation.&lt;/p&gt;

&lt;p&gt;Another meta-argument ‚Äî &lt;code&gt;for_each&lt;/code&gt; ‚Äî will do the trick.&lt;/p&gt;

&lt;p&gt;For example, this is how it looks for a module:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"bucket"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;for_each&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bucket_names&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bucket_names&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"./modules/s3_bucket"&lt;/span&gt;

  &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;enable_encryption&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this illustration, I also used a conditional expression that makes Terraform iterate through the set of values of &lt;code&gt;var.bucket_names&lt;/code&gt; if it‚Äôs not empty and create several modules. Otherwise, do not iterate at all and do not create anything.&lt;/p&gt;

&lt;p&gt;The same can be done for the resources. For example, when you need to create an arbitrary number of security group rules, e.g., to allowlist some IPs for your bastion host:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_security_group_rule"&lt;/span&gt; &lt;span class="s2"&gt;"allowlist"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;for_each&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cidr_blocks&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cidr_blocks&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ingress"&lt;/span&gt;
  &lt;span class="nx"&gt;from_port&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
  &lt;span class="nx"&gt;to_port&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
  &lt;span class="nx"&gt;protocol&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"tcp"&lt;/span&gt;
  &lt;span class="nx"&gt;cidr_blocks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;security_group_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_security_group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bastion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And just like with the &lt;code&gt;count&lt;/code&gt; meta-argument, with the &lt;code&gt;for_each&lt;/code&gt;, resource addresses will have the identifier named by the values provided to &lt;code&gt;for_each&lt;/code&gt;. For example, here is how I would reference a resource created in the module with &lt;code&gt;for_each&lt;/code&gt; described earlier:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="nx"&gt;bucket_name&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"photos"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conditional-resource-arguments-attributes-setting"&gt;
  &lt;/a&gt;
  Conditional resource arguments (attributes) setting
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k7GEhpIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67dnkfbwei8rcaprq7x2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k7GEhpIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67dnkfbwei8rcaprq7x2.png" alt="Conditional resource arguments" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let‚Äôs go deeper and see how resource arguments can be conditionally set (or not).&lt;/p&gt;

&lt;p&gt;First, let‚Äôs review the conditional argument value setting with the &lt;code&gt;null&lt;/code&gt; data type:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_launch_template"&lt;/span&gt; &lt;span class="s2"&gt;"this"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"my-launch-template"&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;key_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use_default_keypair&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keypair_name&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here I want to skip the usage of the EC2 Key Pair for the Launch Template in some instances and Terraform allows me to write the conditional expression that will set the &lt;code&gt;null&lt;/code&gt; value for the argument. It means the &lt;em&gt;absence&lt;/em&gt; or &lt;em&gt;omission&lt;/em&gt; and Terraform would behave the same as if you did not specify the argument at all.&lt;/p&gt;

&lt;p&gt;Dynamic blocks are another case where this technique suits best. Take a look at the following piece of CloudFront resource code where I want to either describe the configuration for the custom error response or omit that completely:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_cloudfront_distribution"&lt;/span&gt; &lt;span class="s2"&gt;"cdn"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;enabled&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;dynamic&lt;/span&gt; &lt;span class="s2"&gt;"custom_error_response"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;for_each&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;custom_error_response&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;custom_error_response&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;iterator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cer&lt;/span&gt;
    &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;error_code&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"error_code"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;error_caching_min_ttl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"error_caching_min_ttl"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;response_code&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"response_code"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;response_page_path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"response_page_path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;custom_error_response&lt;/code&gt; variable is &lt;code&gt;null&lt;/code&gt; by default, but it has the &lt;code&gt;object&lt;/code&gt; type, and users can assign the variable with the required nested specifications if needed. And when they do it, Terraform will add the &lt;code&gt;custom_error_response&lt;/code&gt; block to the resource configuration. Otherwise, it will be omitted entirely.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#convert-types-with-ease"&gt;
  &lt;/a&gt;
  Convert types with ease
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IMwFnm1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlycu80ki7u1z5eur4wn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IMwFnm1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlycu80ki7u1z5eur4wn.png" alt="Convert types with ease" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, let‚Äôs move to the less conditional things now üòÖ&lt;/p&gt;

&lt;p&gt;Terraform has several type conversion functions: &lt;code&gt;tobool()&lt;/code&gt;, &lt;code&gt;tolist()&lt;/code&gt;,&lt;code&gt;tomap()&lt;/code&gt;, &lt;code&gt;tonumber()&lt;/code&gt;, &lt;code&gt;toset()&lt;/code&gt;, and &lt;code&gt;tostring()&lt;/code&gt;. Their purpose is to convert the input values to the compatible types.&lt;/p&gt;

&lt;p&gt;For example, suppose I need to pass the set to the &lt;code&gt;for_each&lt;/code&gt; (it accepts only sets and maps types of value), but I got the list as an input; let‚Äôs say I got it as an output from another module. In such a case, I would do something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="nx"&gt;for_each&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toset&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remote_access_ports&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;However, I can make my code cleaner and avoid the explicit conversion ‚Äî I just need to define the value type in the configuration block of the &lt;code&gt;my_list&lt;/code&gt; variable. Terraform will do the conversion automatically when the value is assigned.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"remote_access_ports"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Ports for remote access"&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;While Terraform can do a lot of implicit conversions for you, explicit type conversions are practical during values normalization or when you need to calculate some complex value for a variable. For example, the Local Values, known as &lt;code&gt;locals&lt;/code&gt;, are the most suitable place for doing that.&lt;/p&gt;

&lt;p&gt;By the way, although there is a &lt;code&gt;tolist()&lt;/code&gt; function, there is no such thing as the &lt;code&gt;tostring()&lt;/code&gt; function. But what if you need to convert the list to string in Terraform?&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;one()&lt;/code&gt; function can help here: it takes a list, set, or tuple value with either zero or one element and returns either &lt;code&gt;null&lt;/code&gt; or that one element in the form of string.&lt;/p&gt;

&lt;p&gt;It‚Äôs useful in cases when a resource created using conditional expression is represented as either a zero- or one-element list, and you need to get a single value which may be either &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt;, for example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_kms_key"&lt;/span&gt; &lt;span class="s2"&gt;"main"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ebs_encrypted&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="nx"&gt;enable_key_rotation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_kms_alias"&lt;/span&gt; &lt;span class="s2"&gt;"main"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ebs_encrypted&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"alias/encrypt-ebs"&lt;/span&gt;
  &lt;span class="nx"&gt;target_key_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aws_kms_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;[*]&lt;/span&gt;&lt;span class="nx"&gt;key_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#write-yaml-or-json-as-terraform-code-hcl"&gt;
  &lt;/a&gt;
  Write YAML or JSON as Terraform code (HCL)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZLnIaGg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdwhx72j67nywt1wqcfo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZLnIaGg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdwhx72j67nywt1wqcfo.png" alt="Write YAML or JSON as Terraform code" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes you need to supply JSON or YAML files to the services you manage with Terraform. For example, if you want to create something with CloudFormation using Terraform (and I am not kidding). Sometimes the AWS Terraform provider does not support the needed resource, and you want to maintain the whole infrastructure code using only one tool.&lt;/p&gt;

&lt;p&gt;Instead of maintaining another file in JSON or YAML format, you can embed JSON or YAML code management into HCL by taking benefit of the &lt;code&gt;jsonencode()&lt;/code&gt; or &lt;code&gt;yamlencode()&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;The attractiveness of this approach is that you can reference other Terraform resources or their attributes right in the code of your object, and you have more freedom in terms of the code syntax and its formatting comparable to native JSON or YAML.&lt;/p&gt;

&lt;p&gt;Here is how it looks like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="nx"&gt;locals&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;some_string&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ult"&lt;/span&gt;
  &lt;span class="nx"&gt;myjson_object&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jsonencode&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s2"&gt;"Hashicorp Products"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;Terra&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"form"&lt;/span&gt;
      &lt;span class="nx"&gt;Con&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"sul"&lt;/span&gt;
      &lt;span class="nx"&gt;Vag&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"rant"&lt;/span&gt;
      &lt;span class="nx"&gt;Va&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;local&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some_string&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The value of the &lt;code&gt;myjson_object&lt;/code&gt; local variable would look like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Hashicorp Products"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Con"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sul"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Terra"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"form"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Va"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ult"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Vag"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rant"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And here is a piece of real-world example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="nx"&gt;locals&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;cf_template_body&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jsonencode&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;Resources&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;DedicatedHostGroup&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Type&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"AWS::ResourceGroups::Group"&lt;/span&gt;
        &lt;span class="nx"&gt;Properties&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;service_name&lt;/span&gt;
          &lt;span class="nx"&gt;Configuration&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;Type&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"AWS::EC2::HostManagement"&lt;/span&gt;
              &lt;span class="nx"&gt;Parameters&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"auto-allocate-host"&lt;/span&gt;
                  &lt;span class="nx"&gt;Values&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auto_allocate_host&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#templatize-stuff"&gt;
  &lt;/a&gt;
  Templatize stuff
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KrT7OP2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et3x95e5se6wlvuyasp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KrT7OP2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et3x95e5se6wlvuyasp9.png" alt="Templatize stuff" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last case in this blog but not the least by its efficacy ‚Äî render source file content as a template in Terraform.&lt;/p&gt;

&lt;p&gt;Let‚Äôs review the following scenario: you launch an EC2 instance and want to supply it with a bash script (via the user-data parameter) for some additional configuration at launch.&lt;/p&gt;

&lt;p&gt;Suppose we have the following bash script &lt;code&gt;instance-init.sh&lt;/code&gt; that sets the hostname and registers our instance in a monitoring system:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;hostname &lt;/span&gt;example.com
bash /opt/system-init/register-monitoring.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But what if you want to set a different hostname per instance, and some instances should not be registered in the monitoring system?&lt;/p&gt;

&lt;p&gt;In such a case, here is how the script file content will look:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

hostname ${system_hostname}
%{ if register_monitoring }
bash /opt/system-init/register-monitoring.sh
%{endif}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And when you supply this file as an argument for the EC2 instance resource in Terraform, you will use the &lt;code&gt;templatefile()&lt;/code&gt; function to make the magic happen:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_instance"&lt;/span&gt; &lt;span class="s2"&gt;"web"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ami&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_ami_id&lt;/span&gt;
  &lt;span class="nx"&gt;instance_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance_type&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;user_data&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;templatefile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;module}&lt;/span&gt;&lt;span class="s2"&gt;/instance-init.tftpl"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;system_hostname&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;system_hostname&lt;/span&gt;
    &lt;span class="nx"&gt;register_monitoring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add_to_monitoring&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And of course, you can create a template from any file type. The only requirement here is that the template file must exist on the disk at the beginning of the Terraform execution.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key takeaways
&lt;/h2&gt;

&lt;p&gt;Terraform is far beyond the standard resource management operations. With the power of built-in functions, you can write more versatile code and reusable Terraform modules.&lt;/p&gt;

&lt;p&gt;‚úÖ Use &lt;a href="https://www.terraform.io/language/expressions/conditionals"&gt;conditional expressions&lt;/a&gt; with &lt;a href="https://www.terraform.io/language/meta-arguments/count"&gt;count&lt;/a&gt; and &lt;a href="https://www.terraform.io/language/meta-arguments/for_each"&gt;for_each&lt;/a&gt; meta-arguments, when the creation of a resource depends on some context or user inout.&lt;/p&gt;

&lt;p&gt;‚úÖ Take advantage of &lt;a href="https://www.terraform.io/language/expressions/types#type-conversion"&gt;implicit types conversion&lt;/a&gt; when working with input variables and their values to keep your code cleaner.&lt;/p&gt;

&lt;p&gt;‚úÖ Embed YAML and JSON-based objects right into your Terraform code using built-in &lt;a href="https://www.terraform.io/language/functions/jsonencode"&gt;encoding&lt;/a&gt; &lt;a href="https://www.terraform.io/language/functions/yamlencode"&gt;functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;‚úÖ And when you need to pass some files to the managed service, you can treat them as &lt;a href="https://www.terraform.io/language/functions/templatefile"&gt;templates&lt;/a&gt; and make them multipurpose.&lt;/p&gt;

&lt;p&gt;Thank you for reading down to this point! ü§ó&lt;/p&gt;

&lt;p&gt;And if you have some favorite Terraform tricks ‚Äî I would love to know!&lt;/p&gt;




&lt;div class="ltag__user ltag__user__id__51518"&gt;
  
    .ltag__user__id__51518 .follow-action-button {
      background-color: #ffffff !important;
      color: #4f5d75 !important;
      border-color: #4f5d75 !important;
    }
  
    &lt;a href="/svasylenko" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FrZiXsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6678KR6E--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/51518/60259e60-86ea-47fe-92ff-5ac3f00835d2.jpg" alt="svasylenko image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/svasylenko"&gt;Serhii Vasylenko&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/svasylenko"&gt;I am an engineer from Ukraine. I like astronomy and everything related to DevOps. I thrive on developing great product offerings, great people, and great teams.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>terraform</category>
      <category>devops</category>
      <category>productivity</category>
    </item>
    <item>
      <title>I have curated 84+ high quality tools to use in 2022 </title>
      <author>Hamed Baatour</author>
      <pubDate>Tue, 18 Jan 2022 08:37:48 +0000</pubDate>
      <link>https://dev.to/hamedbaatour/i-have-curated-84-high-quality-tools-to-use-in-2022-i36</link>
      <guid>https://dev.to/hamedbaatour/i-have-curated-84-high-quality-tools-to-use-in-2022-i36</guid>
      <description>&lt;p&gt;developers tools fatigue is a real struggle! üò™&lt;/p&gt;

&lt;p&gt;when starting any new project or building a new website/app or SaaS you have to go through a long list of GitHub stared libraries or a huge browser bookmark just to find out that you don't really know what you have to type in search or find what you are looking for.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Tools overload&lt;/strong&gt;&lt;br&gt;
most lists out there just put everything under the sun from tools and services just to bombard developers with even more tools.&lt;/p&gt;

&lt;p&gt;instead of solving the issue of searching fatigue they make it worse. I don't need a 2000+ list of tools I just need 6 tools suggestions max for each use case whether that to build a specific feature or part of a website.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Not another generic list&lt;/strong&gt;&lt;br&gt;
this is not another unopinionated list of tools.&lt;br&gt;
this list gives recommendations based on real experience using the suggested tools so you will find small notes for each tool like "expensive" | "bad docs" and other observations from my own experience to help you make a better decision faster when choosing any tools off the list.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Why this list?&lt;/strong&gt;&lt;br&gt;
üíé only handpicked quality tools&lt;br&gt;
üì¶ 10+ categories&lt;br&gt;
üîç searchable &amp;amp; filterable&lt;br&gt;
‚ôª frequently updated&lt;/p&gt;

&lt;p&gt;there's even a white noise audio player that you can use to relax while picking your favorite tool ;)&lt;/p&gt;

&lt;p&gt;üòª just launched &lt;a href="https://www.producthunt.com/posts/devbox-84-curated-webdev-resources"&gt;DevBox on Producthunt&lt;/a&gt;&lt;br&gt;
üîó and here is the list &lt;a href="https://intab.io/resources"&gt;direct link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;hope you find this useful!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RYJYYk8s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tj2wbvacbdxcof7p375q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RYJYYk8s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tj2wbvacbdxcof7p375q.png" alt="DevBox Tools List Screenshot" width="880" height="725"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>tooling</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Syntax highlighting with Prism and Next.js</title>
      <author>Dawson Codes</author>
      <pubDate>Tue, 18 Jan 2022 08:25:58 +0000</pubDate>
      <link>https://dev.to/dawsoncodes/syntax-highlighting-with-prism-and-nextjs-40ee</link>
      <guid>https://dev.to/dawsoncodes/syntax-highlighting-with-prism-and-nextjs-40ee</guid>
      <description>&lt;p&gt;You might want to build your blog from scratch, you design your website beautifully, and everything is great, but when it comes to including a block of code inside your blog post, you face some challenges.&lt;/p&gt;

&lt;p&gt;Syntax highlighting is a great way to make code more readable; in this tutorial, I will show you how you can use &lt;a href="https://www.npmjs.com/package/prismjs"&gt;PrismJs&lt;/a&gt; with &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; to highlight the syntax of your code blocks inside your blog posts.&lt;/p&gt;

&lt;p&gt;Hi, I'm Dawson, and I love web development. I write blogs and tweets about web development and my most recent projects; please &lt;a href="https://twitter.com/DawsonCodes"&gt;give me a follow&lt;/a&gt; if you are interested. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-prismjs"&gt;
  &lt;/a&gt;
  Why PrismJs?
&lt;/h3&gt;

&lt;p&gt;PrismJS is the ideal choice for syntax highlighting with JavaScript right in the browser. PrismJS has support for all modern browsers. It has +5M downloads per week from npmjs.com.&lt;/p&gt;

&lt;p&gt;PrismJs is a lightweight, fast syntax highlighting library explicitly made for frontend languages. It depends on community contributions to expand and cover all languages. The highlighting is very customizable and has a variety of languages and themes.&lt;/p&gt;

&lt;p&gt;PrismJs It has been designed to be highly customizable with the most beautiful shade of colors, and you can also extend it. And it supports almost every Programming language.&lt;/p&gt;

&lt;p&gt;If you want to use a library in your frontend, it is a must for the library to be lightweight because it will run on the client-side (on the user's browser). This means we must use lightweight packages in our frontend of the application.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#using-prismjs-with-nextjs-to-highlight-syntax"&gt;
  &lt;/a&gt;
  Using PrismJs with Next.js to highlight syntax
&lt;/h3&gt;

&lt;p&gt;PrismJs is a syntax highlighting library. It is designed to use as little of your computer's resources as possible and can be customized with CSS and JavaScript. &lt;/p&gt;

&lt;p&gt;This article will show you how to set up PrismJs with Next.js and create a simple syntax highlighter for your blog posts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h3&gt;

&lt;p&gt;Let's see how syntax highlighting works in the first place.&lt;/p&gt;

&lt;p&gt;Suppose you are building a personal blog and want to create blog posts, you have two options to save your blog data inside your database, one of them is to save your blog content as pure HTML and then return the HTML later when a user shows the page, the better way to do this is using the &lt;a href="https://www.markdownguide.org/"&gt;Markdown language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Markdown is a lightweight markup language with plain text formatting syntax. It is designed to be easy to read and write for people who are not experts in the computer programming language. The goal of Markdown is to be as easy-to-read and easy to write as possible. A markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions.&lt;/p&gt;

&lt;p&gt;If you don't know how the Markdown syntax works, please make sure you &lt;a href="https://www.markdownguide.org/"&gt;read it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The goal is to get the Markdown from the database and show it on our HTML page, but we can not directly do that because if we do, the reader will see the Markdown syntax, which is not something you'd want to happen. &lt;/p&gt;

&lt;p&gt;For that, we will use a library called &lt;a href="https://www.npmjs.com/package/react-markdown"&gt;React Markdown&lt;/a&gt; which is a library that converts Markdown to React components (JSX) which is precisely what we need.&lt;/p&gt;

&lt;p&gt;This will convert your Markdown syntax to HTML syntax. For example, it converts (# to h1, and ## to h2, etc.), which means now we have pure HTML syntax in our HTML page, which is ideal.&lt;/p&gt;

&lt;p&gt;React Markdown automatically puts any Markdown syntax code blocks inside the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag and then inside the &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tag, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    Your code here
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#starting-a-nextjs-app"&gt;
  &lt;/a&gt;
  Starting a Next.js app
&lt;/h3&gt;

&lt;p&gt;We first initialize a Next.js application with &lt;code&gt;npx create-next-app@latest prism-app&lt;/code&gt;. We will put this in a named folder, in this case (prism-app)&lt;/p&gt;

&lt;p&gt;Then go to the directory of your application and install &lt;code&gt;react-markdown&lt;/code&gt; and &lt;code&gt;prismjs&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starting-with-react-markdown"&gt;
  &lt;/a&gt;
  Starting with React Markdown
&lt;/h3&gt;

&lt;p&gt;With React markdown, we will parse our Markdown and convert them to HTML tags. Here is how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;markdownContent&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'container'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReactMarkdown&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;markdownContent&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As simple as that, React Markdown will handle all of the Markdown converting with the highest level of safety, which means you are safe from XSS Attacks that users might want to utilize.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prism-themes"&gt;
  &lt;/a&gt;
  Prism Themes
&lt;/h3&gt;

&lt;p&gt;There are various Prism themes that you can apply to your code. Here is how you can use them.&lt;/p&gt;

&lt;p&gt;Go to the &lt;a href="https://github.com/PrismJS/prism-themes"&gt;PrismJS GitHub repository&lt;/a&gt;. There are a bunch of themes that you can choose; pick the one you like, download the CSS file, and then import it to your &lt;code&gt;_app.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/prism-one-dark.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#highlighting-syntax-with-prismjs"&gt;
  &lt;/a&gt;
  Highlighting Syntax with PrismJS
&lt;/h3&gt;

&lt;p&gt;Now that we have the code blocks in our HTML pages and the Prism CSS file, it is time to highlight the syntax to make it more readable and beautiful to the reader.&lt;/p&gt;

&lt;p&gt;Since we are using Next.js, we will use the React hook &lt;code&gt;useEffect&lt;/code&gt;, and we will run a function when the React component mounts, highlighting all the syntax.&lt;/p&gt;

&lt;p&gt;The function that we are planning to run is &lt;code&gt;highlightAll()&lt;/code&gt; comes with Prismjs, which will automatically grab the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks and will highlight them all.&lt;/p&gt;

&lt;p&gt;We also have to import the JavaScript for each programming language so that PrismJS can highlight a specific programming language. You can import only the programming language that you want to import as few resources as possible, which will make your frontend &lt;strong&gt;blazing fast&lt;/strong&gt; without the user having to download large chunks of JavaScript.&lt;/p&gt;

&lt;p&gt;Your JSX should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Prism&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prismjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prismjs/components/prism-javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prismjs/components/prism-css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prismjs/components/prism-jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;markdownContent&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Prism&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highlightAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'container'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReactMarkdown&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;markdownContent&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it; now your syntax highlighter must work perfectly; feel free to try the other Prism themes and see which one you like the most.&lt;/p&gt;

&lt;p&gt;If you liked this article, please make sure you follow me on &lt;a href="https://twitter.com/DawsonCodes"&gt;Twitter&lt;/a&gt;, where I write daily tweets about web development.&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/DawsonCodes"&gt;https://twitter.com/DawsonCodes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Website: &lt;a href="https://www.dawsoncodes.com/"&gt;https://www.dawsoncodes.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Linear Gradient Animation in CSS</title>
      <author>Ustariz Enzo</author>
      <pubDate>Tue, 18 Jan 2022 08:11:52 +0000</pubDate>
      <link>https://dev.to/ziratsu/linear-gradient-animation-in-css-6cb</link>
      <guid>https://dev.to/ziratsu/linear-gradient-animation-in-css-6cb</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can‚Äôt really create a &lt;em&gt;hover animation between two linear gradients in CSS&lt;/em&gt;, but there‚Äôs a way around it... Let‚Äôs learn what it is in less than a minute!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DYouarAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k43mbwcu9acx0fotemau.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DYouarAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k43mbwcu9acx0fotemau.gif" alt="Gradient animation" width="600" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/YDQUH6LICk0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-html-structure"&gt;
  &lt;/a&gt;
  1. The HTML structure.
&lt;/h2&gt;

&lt;p&gt;Create a card with a title:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"layer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;S√£o Paulo&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-style-the-card"&gt;
  &lt;/a&gt;
  2. Style the card.
&lt;/h2&gt;

&lt;p&gt;¬†&lt;br&gt;
Give the card a width and a height, center it and its content and add a background:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#2193b0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#6dd5ed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;br&gt;
Create a new layer with the pseudo-element &lt;em&gt;after&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#8a2387&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e94057&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#f27121&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;0.4s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will take up the whole size of the card but with a new color. It will be located between the content and the container. It has no opacity for now.&lt;/p&gt;

&lt;p&gt;¬†&lt;br&gt;
Finally, add a different opacity to the pseudo element when you hover the card:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:hover::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;br&gt;
Now you have a transition between your two linear gradients! Check out &lt;a href="https://www.ui-delivery.com/Gradient%20Animation"&gt;source code&lt;/a&gt; here to see the final outcome!&lt;/p&gt;

&lt;p&gt;¬†&lt;br&gt;
Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Apollo Kotlin - getting started with GraphQL on Android</title>
      <author>Tomek Poniatowicz</author>
      <pubDate>Tue, 18 Jan 2022 07:49:58 +0000</pubDate>
      <link>https://dev.to/graphqleditor/apollo-kotlin-getting-started-with-graphql-on-android-2km1</link>
      <guid>https://dev.to/graphqleditor/apollo-kotlin-getting-started-with-graphql-on-android-2km1</guid>
      <description>&lt;p&gt;Using GraphQL on Android has been a niche topic for quite a while and that might be a bit surprising, especially considering the prevalence of Android devices and the steadily growing popularity of GraphQL. Still even a quick google search will show you REST still dominates in the Android community. That said, something not being popular isn't a reason to discount it out of hand and since it's a new year, why not check out something different instead of going with the flow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-doesnt-like-graphql"&gt;
  &lt;/a&gt;
  Who doesn't like GraphQL?!
&lt;/h2&gt;

&lt;p&gt;If you‚Äôre here you‚Äôre probably quite familiar with the advantages of GraphQL so you might be wondering why the Android community has been slow in getting on the GraphQL hypetrain. While there are a number of factors, one is pretty glaring, the number of available tools. Thankfully there are some new libraries popping up here and there, but it's safe to say that if you‚Äôre trying to work with GraphQL on Android right now, Apollo's Android library is the only way.&lt;/p&gt;

&lt;p&gt;So it looks like we‚Äôre stuck picking it, but what is it exactly? Well GraphQL was released publicly all the way back in 2015 and in early 2017 Apollo released Apollo Android v. 0.2 which provided some basic support for GraphQL model generation. It's been a few years since then and it has grown quite a bit larger, version 1.0 introduced Kotlin code generation and 2.0 introduced multiplatform query and subscription support. To get a better look at it's state let‚Äôs check out the main features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;multiplatform: the library is designed with Android in mind, but can be used in any Java/Kotlin app&lt;/li&gt;
&lt;li&gt;makes full use of GraphQL: from basics like queries, mutations and subscriptions to more advanced stuff like query batching, persistent queries and an AST parser&lt;/li&gt;
&lt;li&gt;3 levels of catching: HTTP Response Cache (for caching raw http responses), Normalized Disk Cache (per node caching of responses in SQL) and Normalized InMemory Cache (Optimized Guava memory cache for in memory caching)&lt;/li&gt;
&lt;li&gt;RXJava support ...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJT6kODc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lg32nmpmyld1zgoxscmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJT6kODc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lg32nmpmyld1zgoxscmb.png" alt="RxJava" width="500" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rxjava"&gt;
  &lt;/a&gt;
  RXJava
&lt;/h2&gt;

&lt;p&gt;On that last one if you‚Äôre familiar with Java you‚Äôve probably heard about RXJava, if not it's an extremely useful implementation of Reactive Extensions that has been popularized by Netflix. While Android Apollo generates Kotlin/Java models from GraphQL queries, RXJava (to quote the official description here) is a library for composing asynchronous and event-based programs by using observable sequences. That‚Äôs just the technical terms, to use simpler language it reverses the usual process where you request data, to an event based process where you're notified about data in the stream. Since you‚Äôre using GraphQL for requests (or rather queries) anyway it's simply very handy for use with subscriptions. That‚Äôs obviously not the only advantage and you can find a ton of info on the uses of RXJava so let‚Äôs just say it's popular for a good reason.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apollo-android-gt-apollo-kotlin"&gt;
  &lt;/a&gt;
  Apollo Android -&amp;gt; Apollo Kotlin
&lt;/h2&gt;

&lt;p&gt;That‚Äôs not all, about a month ago Apollo Android made version 3.0.0 public. While the most noticeable difference was clearly the name change from Apollo Android to Apollo Kotlin, the changelog was a bit longer than that. Aside from the usual bugfixes and an update to Kotlin version 1.6.10 we can see a few new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;extended multiplatform support for Android, JS, iOS, MacOS and linux&lt;/li&gt;
&lt;li&gt;coroutine APIs for easier concurrency&lt;/li&gt;
&lt;li&gt;response based code generation engine&lt;/li&gt;
&lt;li&gt;SQLite batching&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GuqhADdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edr1x5ervikcmc4i6fh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GuqhADdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edr1x5ervikcmc4i6fh2.png" alt="Apollo Kotlin" width="500" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-own-niche"&gt;
  &lt;/a&gt;
  Your own niche
&lt;/h2&gt;

&lt;p&gt;I hope that gave you a somewhat decent overview of the Apollo Kotlin library and maybe piqued your interest at least a tiny bit. As I mentioned previously it's not a very popular topic, so if you‚Äôre looking for your own niche this might be it. If not, the growing popularity of GraphQL will certainly keep influencing the Android community anyway, so it might be a good idea to beat others to it and start early. While Apollo Kotlin is the go-to tool now, no one can say that has to be the case forever. Maybe it will soon face competition from some new libraries and who can say one of those libraries can't be created by you?&lt;/p&gt;




&lt;p&gt;&lt;em&gt;A guest blog post for &lt;a href="https://blog.graphqleditor.com/"&gt;GraphQL Editor blog&lt;/a&gt; by Micha≈Ç Tyszkiewicz&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#speed-up-your-graphql-api-development"&gt;
  &lt;/a&gt;
  Speed up your GraphQL API development
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL Editor&lt;/strong&gt; is a supportive tool for both advanced GraphQL users as well as those taking their first steps with GraphQL APIs. Our all-in-one development environment for GraphQL will help you build, manage &amp;amp; deploy your GraphQL API much faster. &lt;strong&gt;&lt;a href="https://graphqleditor.com"&gt;Try GraphQL Editor for free!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphqleditor.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zoIKUCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur7var8ljvdb5tzhyjz9.png" alt="Try GraphQL Editor" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>For Loop through an array in backward direction in JavaScript
</title>
      <author>Shaswat Raj</author>
      <pubDate>Tue, 18 Jan 2022 07:35:20 +0000</pubDate>
      <link>https://dev.to/sh20raj/for-loop-through-an-array-in-backward-direction-in-javascript-421i</link>
      <guid>https://dev.to/sh20raj/for-loop-through-an-array-in-backward-direction-in-javascript-421i</guid>
      <description>&lt;p&gt;There are several methods to loop through the array in JavaScript in the reverse direction:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-using-reverse-forloop"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Using reverse for-loop&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The standard approach is to loop backward using a for-loop starting from the end of the array towards the beginning of the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var arr = [1, 2, 3, 4, 5];

for (var i = arr.length - 1; i &amp;gt;= 0; i--) {
    console.log(arr[i]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-using-raw-arrayprototypereverse-endraw-function"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Using &lt;code&gt;Array.prototype.reverse()&lt;/code&gt; function&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;We know that &lt;code&gt;forEach&lt;/code&gt; goes through the array in the forward direction. To loop through an array backward using the &lt;code&gt;forEach&lt;/code&gt; method, we have to reverse the array. To avoid modifying the original array, first create a copy of the array, reverse the copy, and then use &lt;code&gt;forEach&lt;/code&gt; on it. The array copy can be done using slicing or ES6 Spread operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var arr = [1, 2, 3, 4, 5];

arr.slice().reverse()
    .forEach(function(item) {
            console.log(item);
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, you can use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"&gt;Object.keys()&lt;/a&gt; method to get keys:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var arr = [1, 2, 3, 4, 5];

Object.keys(arr).reverse()
        .forEach(function(index) {
            console.log(arr[index]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-using-arrayprototypereduceright-function"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Using Array.prototype.reduceRight() function&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;reduceRight()&lt;/code&gt; method executes the callback function once for each element present in the array, from right-to-left. The following code example shows how to implement this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var arr = [1, 2, 3, 4, 5];

arr.reduceRight((_, item) =&amp;gt; console.log(item), null);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That‚Äôs all about looping through an array backward in JavaScript.&lt;/p&gt;

&lt;p&gt;Source :- &lt;a href="https://www.techiedelight.com/loop-through-array-backwards-javascript/"&gt;https://www.techiedelight.com/loop-through-array-backwards-javascript/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>sh20raj</category>
      <category>tips</category>
      <category>array</category>
    </item>
    <item>
      <title>How to pass text as input in a POST request body with Jax-RS</title>
      <author>Adrian Matei </author>
      <pubDate>Tue, 18 Jan 2022 07:28:35 +0000</pubDate>
      <link>https://dev.to/codever/how-to-pass-text-as-input-in-a-post-request-body-with-jax-rs-c5b</link>
      <guid>https://dev.to/codever/how-to-pass-text-as-input-in-a-post-request-body-with-jax-rs-c5b</guid>
      <description>&lt;p&gt;Use &lt;code&gt;MediaType.TEXT_PLAIN&lt;/code&gt; in the &lt;code&gt;@Consumes&lt;/code&gt; annotation and then you have access to the text content as string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="nd"&gt;@POST&lt;/span&gt;
    &lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"organisation"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@Consumes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MediaType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TEXT_PLAIN&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@ApiOperation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Create bookmark from text"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@ApiResponses&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
            &lt;span class="nd"&gt;@ApiResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Bookmark successfully created."&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Bookmark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="nd"&gt;@ApiResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Forbidden"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;})&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Response&lt;/span&gt; &lt;span class="nf"&gt;createBookmark&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@ApiParam&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bookmark"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;boookmark&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;@Context&lt;/span&gt; &lt;span class="nc"&gt;UriInfo&lt;/span&gt; &lt;span class="n"&gt;uriInfo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;JAXBException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Bookmark&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bookmarkService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createBookmarkFromString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bookmark&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;UriBuilder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uriInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePathBuilder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getUuid&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;created&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Shared with ‚ù§Ô∏è from &lt;a href="https://www.codever.land/snippets/606c2030c6a18456bf09aa8f/details"&gt;Codever&lt;/a&gt;. Use üëâ &lt;a href="https://www.codever.land/snippets/606c2030c6a18456bf09aa8f/details"&gt;&lt;strong&gt;copy to mine&lt;/strong&gt;&lt;/a&gt; functionality to add it to your personal snippets collection.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>java</category>
      <category>rest</category>
      <category>codever</category>
      <category>snippets</category>
    </item>
    <item>
      <title>Daily tools for Office</title>
      <author>Abhimanyu</author>
      <pubDate>Tue, 18 Jan 2022 07:22:43 +0000</pubDate>
      <link>https://dev.to/abhimanyudev7/daily-tools-for-office-23f2</link>
      <guid>https://dev.to/abhimanyudev7/daily-tools-for-office-23f2</guid>
      <description>&lt;p&gt;There is a story behind every project.&lt;/p&gt;

&lt;p&gt;Recently I learn some coding using Youtube tutorials and was thinking to start some projects.&lt;/p&gt;

&lt;p&gt;I started thinking about any idea which is already not developed.&lt;br&gt;
I got some ideas through google but sadly my mind can't think of any idea which is already not developed. &lt;/p&gt;

&lt;p&gt;And my coding skills are not strong that I can develop any AI Application which already does not exist.&lt;/p&gt;

&lt;p&gt;So instead of creating any new applications. &lt;/p&gt;

&lt;p&gt;I started to build the common things which can help in the day-to-day tasks.&lt;/p&gt;

&lt;p&gt;The idea was to build a small-small feature which will be handy for the office employees.&lt;/p&gt;

&lt;p&gt;And I end developing the &lt;strong&gt;Ezytool&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;URL - &lt;a href="https://ezytool.com/"&gt;ezytool.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It would be great if someone can give me feedback or any popular feature which needs to be implemented.&lt;/p&gt;

&lt;p&gt;The sole purpose of this website is to help people without any &lt;strong&gt;Ads or limitations&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Intro to the Dockerfile Components</title>
      <author>lary mak</author>
      <pubDate>Tue, 18 Jan 2022 07:04:40 +0000</pubDate>
      <link>https://dev.to/larymak/intro-to-the-dockerfile-components-ap5</link>
      <guid>https://dev.to/larymak/intro-to-the-dockerfile-components-ap5</guid>
      <description>&lt;p&gt;&lt;a href="https://sweetcode.io/intro-to-the-dockerfile-components/"&gt;Full article available on Sweetcode for free&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;A major problem faced by many programmers and developers is how to properly configure a local development environment; this is despite all the advancements we have in modern programming languages. To help reduce all these conflicts in work, a solution was made: Docker. Even though it is relatively new in the industry, it has quickly won the hearts of many developers working on production-level projects.&lt;/p&gt;

&lt;p&gt;In this article we will be discussing a very important file associated with Docker: a Dockerfile. We will be discussing what it is, commands associated with it, how to write one and its significance to developers.&lt;/p&gt;

&lt;p&gt;Let's get started:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-dockerfile"&gt;
  &lt;/a&gt;
  What is a Dockerfile?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5KKejVS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zev1564t65inedf0a53y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5KKejVS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zev1564t65inedf0a53y.png" alt="what is a Dockerfile" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will be fair to state that in this article we will be juggling between some common terms associated with the Dockerfile, that is Docker, Docker Images, and Containers. Let's understand what this terms mean:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;/strong&gt; is an open-source project designed to make it easier to develop, deploy, and run applications by the use of containers. It allows developers to package up an application with all the parts it needs into a container, then ships it out mutually as one package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Docker Container&lt;/em&gt;&lt;/strong&gt; is a software package that will include all dependencies required such as libraries, config files, etc‚Ä¶ to run an application and ship them as one package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Docker Image&lt;/em&gt;&lt;/strong&gt; is a snapshot of what a project contains and it is represented by a Dockerfile. This file contains everything that is needed to run an application. They are either using a predefined Image or using a Dockerfile&lt;/p&gt;

&lt;p&gt;That being said, we can describe a Dockerfile as a text document that contains a series of commands that are used to automatically create containers and assemble an image on the Docker platform.&lt;/p&gt;

&lt;p&gt;As defined it is a text document, also it‚Äôs important to state that the Dockerfile has no extension, all you need is to save it as Dockerfile&lt;/p&gt;

&lt;p&gt;It is within the Dockerfile that applications, frameworks, servers, base images are specified.&lt;/p&gt;

&lt;p&gt;All commands initiated in the Docker file are executed from top to bottom with each step being cached. Execution of these instructions takes place on a base image.&lt;/p&gt;

&lt;p&gt;On building the Dockerfile, the successive actions form a new image from the base parent image which is specified in the file as the first command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockerfile-syntax"&gt;
  &lt;/a&gt;
  Dockerfile Syntax
&lt;/h2&gt;

&lt;p&gt;The Dockerfile syntax consist of two main line blocks, that is the comment block and the command block.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Comment&lt;/span&gt;
COMMAND argument
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An example in a file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Prints greeting message
RUN echo "Greetings Team SweetCode"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Commands are not usually case sensitive, but in order to differentiate them from the arguments they are usually written in UPPERCASE and arguments in lowercase as shown above.&lt;/p&gt;

&lt;p&gt;When writing a Dockerfile, there are a dozen of commands which can be specified inside the file. Let‚Äôs go ahead and have a look at the most commonly used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockerfile-commands"&gt;
  &lt;/a&gt;
  Dockerfile Commands
&lt;/h2&gt;

&lt;p&gt;Besides this we have common practices that are considered must in a Dockerfile, In each file the first command will always be FROM command.&lt;/p&gt;

&lt;p&gt;That being said, let‚Äôs begin:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt;&lt;br&gt;
It is considered the most crucial amongst all other commands in the Dockerfile. A Dockerfile MUST begin with the FROM command.&lt;/p&gt;

&lt;p&gt;It defines the base image which will be used in the build process.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Syntax&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM &amp;lt;Image name&amp;gt;
or
FROM &amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;
or
FROM &amp;lt;image&amp;gt;@&amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The image name defines where the new image should inherit from.&lt;br&gt;
&lt;em&gt;Example&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM Ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What basically this command does is, it tells the Docker builder to use this base image as a starting point. It‚Äôs going to download the latest Ubuntu version from the docker hub.&lt;/p&gt;

&lt;p&gt;To learn more about all the Images we have, check out the Docker Hub here &lt;a href="https://hub.docker.com/"&gt;https://hub.docker.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continue-reading"&gt;
  &lt;/a&gt;
  Continue Reading:
&lt;/h2&gt;

&lt;p&gt;Check out the complete Article on &lt;a href="https://sweetcode.io/intro-to-the-dockerfile-components/"&gt;SweetCode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No registration is needed to access the article&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Connect With me at &lt;a href="https://twitter.com/larymak1"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/nextgencoders/"&gt;Insta&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCrT1ARRZfLOuf6nc_97eXEg"&gt;YouTube&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/hillary-nyakundi"&gt;LinkedIn&lt;/a&gt;  | &lt;/p&gt;

</description>
      <category>docker</category>
      <category>opensource</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>Speed up Windows for heavy development.</title>
      <author>Akash Pattanaik</author>
      <pubDate>Tue, 18 Jan 2022 06:55:29 +0000</pubDate>
      <link>https://dev.to/akashpattnaik/speed-up-windows-for-heavy-development-3k4e</link>
      <guid>https://dev.to/akashpattnaik/speed-up-windows-for-heavy-development-3k4e</guid>
      <description>&lt;p&gt;Hey everyone, This is &lt;a href="https://github.com/BLUE-DEVIL1134"&gt;Akash&lt;/a&gt;.&lt;br&gt;
I am a &lt;strong&gt;&lt;a href="https://windows.com/"&gt;windows&lt;/a&gt;&lt;/strong&gt; user, ofc, my PC is too noob for &lt;code&gt;Linux&lt;/code&gt;.&lt;br&gt;
From time-to-time, my pc gets slow AF, so I have some hacks to fast it up and clean memory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-pc-specs"&gt;
  &lt;/a&gt;
  My PC Specs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ftXieKOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32mw0cce0ojbp21v2wiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftXieKOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32mw0cce0ojbp21v2wiw.png" alt="My PC Specs" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Well, the specs might be less, but works just fine after my hacks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;Win&lt;/code&gt; + &lt;code&gt;R&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;temp&lt;/code&gt; and click on &lt;code&gt;OK&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Select all with &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;A&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Del&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This will clear your temp cache and free up memory and disk.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Now, Repeat the step with &lt;code&gt;%temp%&lt;/code&gt; and &lt;code&gt;prefetch&lt;/code&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HL5yHnIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l556sycdwjni6493u2g8.png" alt="%temp%" width="399" height="206"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kXTKeiaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrow6tg6qf8mlqbay8d2.png" alt="Prefetch" width="399" height="206"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Esc&lt;/code&gt;, To Open &lt;code&gt;Task Manager&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Goto the &lt;code&gt;Startup&lt;/code&gt; tab.&lt;/li&gt;
&lt;li&gt;Disable all the &lt;strong&gt;Enabled&lt;/strong&gt; Apps.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-cQwI8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvu4z36utfa8npbwyivs.png" alt="Task Manager" width="880" height="514"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keep &lt;code&gt;C:&lt;/code&gt; drive (OR your &lt;code&gt;OS&lt;/code&gt; Drive) as clean as possible.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BJdr3el3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdweey9k4hab4kikihmp.png" alt="File Manager" width="880" height="535"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#finally-lets-sum-up"&gt;
  &lt;/a&gt;
  Finally, Let's Sum Up
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Repeat &lt;code&gt;Step 1&lt;/code&gt; everyday when you start your PC/Laptop.&lt;/li&gt;
&lt;li&gt;Regular &lt;code&gt;Shutdown&lt;/code&gt;'s also keeps your processor cool. (Not applicable on laptops by office )
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTkmN7DP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdm64ickp841e37tetiz.png" alt="Laugh" width="226" height="221"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;These steps can be very helpful for webdevs and flutter devs..&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>flutter</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
