<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 10 Javascript projects for Resume üöÄüöÄ</title>
      <author>Kiran Sethumadhavan</author>
      <pubDate>Sun, 18 Apr 2021 15:30:15 +0000</pubDate>
      <link>https://dev.to/kiransethu46/top-5-javascript-projects-for-resume-8d6</link>
      <guid>https://dev.to/kiransethu46/top-5-javascript-projects-for-resume-8d6</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Facebook Clone&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B-kxUMHBxNo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Instagram Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/f7T48W0cwXM"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;Whatsapp Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pUxrDcITyjg"&gt;
&lt;/iframe&gt;
 &lt;/li&gt;
&lt;li&gt;Linkedin Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QaYts9sPmcY"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;Amazon Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RDV3Z1KCBvo"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;Spotify Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pnkuI8KXW_8"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;Netflix Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1TCw9wO1neA"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;Hotstar + Disney Clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4pjpHUN28kk"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;li&gt;Google Drive clone
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ljuCH6_jrYE"&gt;
&lt;/iframe&gt;
 &lt;/li&gt;
&lt;li&gt;Signal Clone 
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MJzmZ9qmdaE"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Do you want to Kick-start a career in Cyber Security and want to know how hackers hack in real life ‚ò†Ô∏è‚ò†Ô∏è&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join Now 200+ Members already Joined &lt;/p&gt;

&lt;p&gt;&lt;a href="https://t.me/infosecbugbounty"&gt;https://t.me/infosecbugbounty&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>devops</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Migrating from NPM to Yarn</title>
      <author>Sunny Golovine</author>
      <pubDate>Sun, 18 Apr 2021 15:10:38 +0000</pubDate>
      <link>https://dev.to/sgolovine/migrating-from-npm-to-yarn-2ih3</link>
      <guid>https://dev.to/sgolovine/migrating-from-npm-to-yarn-2ih3</guid>
      <description>&lt;p&gt;Say you have a project that uses NPM for dependency management. How would you convert that project to use Yarn?&lt;/p&gt;

&lt;p&gt;For the longest time the way I did it was just deleting the &lt;code&gt;package-lock.json&lt;/code&gt; and running &lt;code&gt;yarn&lt;/code&gt; to generate a new lockfile. While this works well on small projects, dependency pinning is there for a reason and trying to do this on a larger project may land you in hot water. So how do you do it safely? It's simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
yarn import

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! When you run &lt;code&gt;yarn import&lt;/code&gt;, yarn will read your &lt;code&gt;package-lock.json&lt;/code&gt; and generate a &lt;code&gt;yarn.lock&lt;/code&gt; file based on it. It's a much safer way to migrate from one package manager to the other.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post check out some of my &lt;a href="https://sunnygolovine.com/blog"&gt;other writing&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>npm</category>
      <category>angular</category>
    </item>
    <item>
      <title>Weekly Challenge 108</title>
      <author>Simon Green</author>
      <pubDate>Sun, 18 Apr 2021 14:47:53 +0000</pubDate>
      <link>https://dev.to/simongreennet/weekly-challenge-108-3di2</link>
      <guid>https://dev.to/simongreennet/weekly-challenge-108-3di2</guid>
      <description>&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-108/"&gt;Tasks&lt;/a&gt;, &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-108/sgreen"&gt;My solutions&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-1-locate-memory"&gt;
  &lt;/a&gt;
  TASK #1 ‚Ä∫ Locate Memory
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;Write a script to declare a variable or constant and print it‚Äôs[sic] location in the memory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;One good thing about Perl (and most modern languages) is that you don't really need to worry about memory management. Perl will automatically reclaim memory when a variable is no longer used.&lt;/p&gt;

&lt;p&gt;For this task, I take the reference to the variable (for example &lt;code&gt;SCALAR(0x559184ba5890)&lt;/code&gt; and use regular expression to display the location (the bit between the parenthesis).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minified"&gt;
  &lt;/a&gt;
  Minified
&lt;/h2&gt;

&lt;p&gt;In 22 characters, this can be minified to the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;¬ª perl -E 'say\$a=~/(0x[0-9a-f]+)/'
0x555668d2a3f8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;¬ª ./ch-1.pl 
0x555668d2a3f8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#task-2-bell-numbers"&gt;
  &lt;/a&gt;
  TASK #2 ‚Ä∫ Bell Numbers
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;Write a script to display top 10 &lt;a href="https://en.wikipedia.org/wiki/Bell_number"&gt;Bell Numbers&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;In tackling this task, the &lt;a href="https://en.wikipedia.org/wiki/Bell_number#/media/File:BellNumberAnimated.gif"&gt;animated gif&lt;/a&gt; is very helpful. I use the &lt;code&gt;@bell&lt;/code&gt; array to reproduce this. I start by seeding the table with a single value, and then use the copy and add functions to generate the subsequent values. Finally I use a foreach loop to display the last number in each row to display the list of bell numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;¬ª ./ch-2.pl
1
2
5
15
52
203
877
4140
21147
115975
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>perl</category>
      <category>perlweeklychallenge</category>
      <category>weeklychallenge</category>
    </item>
    <item>
      <title>My 8 favorite VS Code Shortcut #1</title>
      <author>CodeOzz</author>
      <pubDate>Sun, 18 Apr 2021 14:38:11 +0000</pubDate>
      <link>https://dev.to/codeozz/my-8-favorite-vs-code-shortcut-1-1lpf</link>
      <guid>https://dev.to/codeozz/my-8-favorite-vs-code-shortcut-1-1lpf</guid>
      <description>&lt;p&gt;Hey ! Welcome here, I'm CodeOz and I'm sharing with you my favorite VS Code shortcut !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indent-the-whole-line"&gt;
  &lt;/a&gt;
  Indent the whole line
&lt;/h3&gt;

&lt;p&gt;By default when you are indenting a line on VSCode, the entire line is not indented, so there is a option for this :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;editor.action.indentLines&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;    {
        "key": "tab",
        "command": "editor.action.indentLines",
        "when": "editorTextFocus &amp;amp;&amp;amp; !editorReadonly"
    },
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HwhTu7Yv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh3ng6dx4eaztdf8m9ht.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HwhTu7Yv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh3ng6dx4eaztdf8m9ht.gif" alt="Webp.net-gifmaker"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2h1D7sW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjj99su8gfc8xq578aeq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2h1D7sW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjj99su8gfc8xq578aeq.gif" alt="Webp.net-gifmaker (1)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rename-variable-in-all-files"&gt;
  &lt;/a&gt;
  Rename variable in all files
&lt;/h3&gt;

&lt;p&gt;If you want to rename a variable from a file you will need to update the name in all other file where you need to use this variable, thanks to this shortcut, it will be more easier to rename your variable across your project !&lt;/p&gt;

&lt;p&gt;&lt;code&gt;editor.action.rename&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;    {
        "key": "shift+f2",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider &amp;amp;&amp;amp; editorTextFocus &amp;amp;&amp;amp; !editorReadonly"
    },
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---vAYpHrD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylkildoyjncuqkase2qb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---vAYpHrD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylkildoyjncuqkase2qb.gif" alt="ezgif.com-gif-maker"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#select-all-word-in-the-file"&gt;
  &lt;/a&gt;
  Select all word in the file
&lt;/h3&gt;

&lt;p&gt;You can also select all word from a word !&lt;/p&gt;

&lt;p&gt;&lt;code&gt;editor.action.changeAll&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;    {
        "key": "ctrl+shift+f2",
        "command": "editor.action.changeAll",
        "when": "editorTextFocus &amp;amp;&amp;amp; editorTextFocus &amp;amp;&amp;amp; !editorReadonly"
    },
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wLFjT85p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvoj12aboqlixesr7x9w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLFjT85p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvoj12aboqlixesr7x9w.gif" alt="select-all-word"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#navigation-back-forward-and-last-edit"&gt;
  &lt;/a&gt;
  Navigation back, forward and last edit
&lt;/h3&gt;

&lt;p&gt;One of my favorite ! You can navigate across your mouse's historical, from back to forward and from your last edit, it can be very very usefull&lt;/p&gt;

&lt;p&gt;&lt;code&gt;workbench.action.navigateBack&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;workbench.action.navigateForward&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;workbench.action.navigateToLastEditLocation&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;    {
        "key": "f1",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "f2",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "f3",
        "command": "workbench.action.navigateToLastEditLocation"
    },
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JX8nw7mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6wislhezj8gw0h27wwr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JX8nw7mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6wislhezj8gw0h27wwr.gif" alt="naviguate"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#navigation-at-the-start-and-the-end-of-a-line"&gt;
  &lt;/a&gt;
  Navigation at the start and the end of a line
&lt;/h3&gt;

&lt;p&gt;You will earn a lot of time of using this, as mentioned in the title, you can navigate from the start or the end of a line !&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cursorLineStart&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;cursorLineEnd&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;    {
        "key": "alt+left",
        "command": "cursorLineStart"
    },
    {
        "key": "alt+right",
        "command": "cursorLineEnd"
    }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CyHhK1C1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhdeje15sjlqhlki4339.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CyHhK1C1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhdeje15sjlqhlki4339.gif" alt="ezgif.com-gif-maker"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>#7 of 100DaysOfCode</title>
      <author>atulit023</author>
      <pubDate>Sun, 18 Apr 2021 14:25:29 +0000</pubDate>
      <link>https://dev.to/icecoffee/7-of-100daysofcode-2lbi</link>
      <guid>https://dev.to/icecoffee/7-of-100daysofcode-2lbi</guid>
      <description>&lt;p&gt;Seventh Day.&lt;br&gt;
üòÑ Today I learned some really nice features that React provides and I learned how to include Tailwind CSS in a Next.js application. &lt;/p&gt;

&lt;p&gt;Anyway here are my today's learnings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Render props method&lt;/strong&gt; 
In the continuation of the &lt;a href="https://dev.to/icecoffee/6-of-100daysofcode-47ge"&gt;HOC&lt;/a&gt; that I learned yesterday, today I learned more about the render prop method that can be used to optimize our code.

&lt;ul&gt;
&lt;li&gt;It's a pretty long concept so here is a gist:
A component with a  render prop takes a function that returns a React element and calls it instead of implementing its own rendering logic.&lt;/li&gt;
&lt;li&gt;In layman's terms 
Think of render props as a component that surrounds our existing component and provides our existing component property and values it can use.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Context and useContext() hooks&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This API was designed to share data across the multiple layers of child components without using props drilling.&lt;/li&gt;
&lt;li&gt;This API contains a Provider to which we can pass a value that can be accessed by all its child components.&lt;/li&gt;
&lt;li&gt;we also need a reference to this Context that we created that we need to pass in useContext() as an argument to access the values given to the provider.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Components styling&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;I haven't used it by myself at all till now but I learned how to include Tailwind CSS in a Next js project.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;I learned about "dev dependencies" inside the package.json file.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;@apply&lt;/em&gt; directive offered by Tailwind CSS to combine lots of different small classes to make a big usable class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out &lt;a href="https://dev.to/icecoffee/6-of-100daysofcode-47ge"&gt;HOC&lt;/a&gt; (Higher Order Components) in my yesterday's post if you wanna know more.üòÑ&lt;/p&gt;

&lt;p&gt;If any would like to suggest me something since I'm new to React and Next.js or if there are some mistakes in the post, please let me know.&lt;br&gt;
I'll really appreciate that.&lt;/p&gt;

&lt;p&gt;Thanks for reading it.üòä&lt;br&gt;
Have a beautiful day.üåº&lt;/p&gt;

</description>
      <category>react</category>
      <category>100daysofcode</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Richardson Maturity Model</title>
      <author>Ahmed Ehab Abdul-Aziz</author>
      <pubDate>Sun, 18 Apr 2021 13:54:11 +0000</pubDate>
      <link>https://dev.to/ahmedabdulaziz/richardson-maturity-model-237l</link>
      <guid>https://dev.to/ahmedabdulaziz/richardson-maturity-model-237l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#are-you-restful"&gt;
  &lt;/a&gt;
  Are you RESTful?
&lt;/h2&gt;

&lt;p&gt;So, right now everyone and their mother is creating REST APIs. However, are all REST APIs created as equals?&lt;br&gt;
As I said in my &lt;a href="https://ahmedabdulaziz.com/rest-fundamentals"&gt;rest fundamentals article&lt;/a&gt;, &lt;strong&gt;Roy Fielding&lt;/strong&gt; the creator of REST &lt;a href="https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven"&gt;is &lt;em&gt;getting frustrated by the number of people calling any HTTP-based interface a REST API&lt;/em&gt;&lt;/a&gt;.&lt;br&gt;
Nonetheless, a black or white scale for whether an API is RESTful can be misleading. Thus, &lt;strong&gt;Leonard Richardson&lt;/strong&gt; designed a way to define how much an API conforms to the RESTful standards, therefore creating the Richardson Maturity Model or RMM.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#rmm"&gt;
  &lt;/a&gt;
  RMM
&lt;/h2&gt;

&lt;p&gt;RMM aims to describe a specific grade for how much an API conforms to the RESTful standards. Maturity here means conformity to RESTful standards.&lt;br&gt;
It has 4 levels of maturity levels from level 0 to level 3.&lt;/p&gt;

&lt;p&gt;The great thing is that it doesn't shun away from any API that is not fully RESTful plus it has some specific measurements that will allow engineers to easily assess how scalable by RESTful standards are their endpoints and what can be improved to reach a higher level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AA-j6zs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zxyn2wx79f9xojzgi1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AA-j6zs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zxyn2wx79f9xojzgi1r.png" alt="RMM Model"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#level-0-swamp-of-pox"&gt;
  &lt;/a&gt;
  Level 0 (Swamp of POX)
&lt;/h2&gt;

&lt;p&gt;In this level, a single URI can serve multiple resources and actions, HTTP verbs are not used correctly (mostly only POST is used).&lt;/p&gt;

&lt;p&gt;For example, you can have a URI that looks like this &lt;code&gt;/usersManagement&lt;/code&gt; which will serve to query, update, delete and create users using only &lt;code&gt;POST&lt;/code&gt; HTTP verb. To differentiate between the various obscure actions that endpoint can do at this level, the body of the request will have to have the specific requirements of the request.&lt;/p&gt;

&lt;p&gt;This level is not considered RESTful by RMM and it mostly exists in the SOAP Web Services world where XML is used extensively. That's why it's called the Swamp of POX as POX means Plain Old XML and the level of coupling and obscurity of the endpoints in this level led to it being called a Swamp.&lt;/p&gt;

&lt;p&gt;I have experienced integrating with SOAP services and let me tell you that this level is very bad and leads to a lot of confusion and mistakes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#level-1-resources"&gt;
  &lt;/a&gt;
  Level 1 (Resources)
&lt;/h2&gt;

&lt;p&gt;At level 1, we will use different URIs for different resources but still with only using one HTTP verb (generally &lt;code&gt;POST&lt;/code&gt; as well), leading to better decoupling in the API.&lt;/p&gt;

&lt;p&gt;So using the previous example, instead of having one &lt;code&gt;/usersManagement&lt;/code&gt; endpoint, we will have &lt;code&gt;/usersCreate&lt;/code&gt;, &lt;code&gt;/usersUpdate&lt;/code&gt;, &lt;code&gt;/usersDelete&lt;/code&gt; and &lt;code&gt;/usersQuery&lt;/code&gt; while using only &lt;code&gt;POST&lt;/code&gt; HTTP verb for all of them, we won't be using the body to define the action, though.&lt;/p&gt;

&lt;p&gt;Although, this is much better than the previous level. This is still not considered RESTful enough by RMM. I have worked at the start of my career on a project that had an API that would mostly reside in this level and it was extremely cumbersome to keep creating and integrating with APIs like this. Furthermore, the whole suffix I used in this example is not standardized, it was basically whatever the developer would think is correct, which of course would differ wildly per developer.&lt;/p&gt;

&lt;p&gt;For example, someone would query users with &lt;code&gt;/usersQuery&lt;/code&gt; but for address querying the endpoint would be &lt;code&gt;/addressRetrieval&lt;/code&gt; and someone else would retrieve departments using &lt;code&gt;/getDepartments&lt;/code&gt; leading to an extremely fragmented API.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#level-2-http-verbs"&gt;
  &lt;/a&gt;
  Level 2 (HTTP Verbs)
&lt;/h2&gt;

&lt;p&gt;Here we are at a level that is considered RESTful by a lot of RMM advocates. However, Roy Fielding doesn't consider it RESTful enough. I side with the opinion that this level is RESTful and can provide the requirements of a RESTful API.&lt;/p&gt;

&lt;p&gt;Anyway, now we will put HTTP verbs to actual use. Let's use the previous example, now the users will have the following endpoint &lt;code&gt;/users&lt;/code&gt;. Then to retrieve users we will create a request with &lt;code&gt;GET&lt;/code&gt; HTTP verb to the users endpoint. To delete a user we will use &lt;code&gt;DELETE&lt;/code&gt; HTTP verb in the request to indicate the action we want to take. To update you can use &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;PATCH&lt;/code&gt;. We can use &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, and more for other endpoints like that of address or departments and so on.&lt;/p&gt;

&lt;p&gt;The majority of Web APIs never pass this level and generally we that's not a bad thing, this level can provide almost all of RESTful requirements and the only thing it is lacking is a self-descriptive API, where the client doesn't need to be provided beforehand with how to do different actions on the resource it retrieves. Thus it will require documentation too to define the required endpoints to do various actions on the retrieved entity.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#level-3-hateoas"&gt;
  &lt;/a&gt;
  Level 3 (HATEOAS)
&lt;/h2&gt;

&lt;p&gt;Finally, we arrive at the last level here, in this level the HATEOAS principles are used.&lt;br&gt;
When we get the users from &lt;code&gt;/users&lt;/code&gt; endpoint with &lt;code&gt;GET&lt;/code&gt; HTTP verb the response for getting a user would look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Ahmed Ehab Abdulaziz"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ahmed.ehab.abdulaziz@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"links"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"self"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://ahmedabdulaziz.com/user/1"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"update"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://ahmedabdulaziz.com/user/1"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"delete"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://ahmedabdulaziz.com/user/1"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"report"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://ahmedabdulaziz.com/user/1/report/default"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"tax-report"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://ahmedabdulaziz.com/user/1/report/tax"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we don't need to have the update, delete, report or tax-report actions to be hardcoded in our code.&lt;br&gt;
When we get the users array, we will be getting the API to do the various actions with the endpoint per user through the response as in the example.&lt;/p&gt;

&lt;p&gt;I don't want to go over HATEOAS a lot as it deserves its article so you can find more about it in &lt;a href="https://ahmedabdulaziz.com/hateoas"&gt;my article here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, this level is of course considered to be RESTful by everyone including &lt;strong&gt;Roy Fielding&lt;/strong&gt;, &lt;a href="https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven"&gt;who consider it as a prerequisite to having a RESTful API&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-level-should-i-develop-for"&gt;
  &lt;/a&gt;
  Which level should I develop for?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Level 0 and 1&lt;/strong&gt; are still in use today and a lot of web applications are being developed with only Level 0 or 1. However, I would say for almost every greenfield web API today, at least &lt;strong&gt;level 2&lt;/strong&gt; should be followed, regardless of calling it a RESTful API or not, it leads to a cleaner API and it is not putting overhead on the developers or the API architect.&lt;/p&gt;

&lt;p&gt;As for level 3, I believe you need to consider the bandwidth of the users. Also, the main purpose of HATEOAS is to deal with changes in the API easily, for internal applications this has never been an issue and generally, the new APIs are adapted to the old APIs, the other way around is much harder to happen for this type of projects. Besides, I have seen that a lot of developers don't really understand or even know what HATEOAS is, so some training might be required to onboard them.&lt;br&gt;
However for SaaS-based projects or other projects with an external API that's exposed to a plethora of different systems, HATEOAS and Level 3 can be of immense practicality, you can easily swap out old APIs with new APIs without having to change a line of code in the integrating services.&lt;/p&gt;

&lt;p&gt;P.S. You should totally read &lt;strong&gt;Roy Fielding&lt;/strong&gt; article that mentions that REST APIs must be hypertext, the discussions there are extremely interesting. You can visit it from &lt;a href="https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rest</category>
      <category>architecture</category>
      <category>webdev</category>
      <category>api</category>
    </item>
    <item>
      <title>Publishing a blog using ReactJs , NodeJs and mongoDB</title>
      <author>irfanukani</author>
      <pubDate>Sun, 18 Apr 2021 13:53:38 +0000</pubDate>
      <link>https://dev.to/irfanukani/publishing-a-blog-using-reactjs-nodejs-and-mongodb-1ici</link>
      <guid>https://dev.to/irfanukani/publishing-a-blog-using-reactjs-nodejs-and-mongodb-1ici</guid>
      <description>&lt;p&gt;I recently created a blog using react Js and Mongo dB. It was a supper fun to do as I wanted my own blog website. &lt;/p&gt;

&lt;p&gt;You can visit my blog here : &lt;a href="https://irfanwritess.web.app"&gt;https://irfanwritess.web.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I implemented a subscription and view system too. &lt;/p&gt;

&lt;p&gt;Currently I'm looking for developing a content management system. What would be your favorite stack to do so? Leave it in the comment section! &lt;/p&gt;

&lt;p&gt;Every feedbacks appreciated! &lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>mongodb</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to render conditionals to action view with application helpers in Ruby on Rails</title>
      <author>AshakaE</author>
      <pubDate>Sun, 18 Apr 2021 13:37:03 +0000</pubDate>
      <link>https://dev.to/ashakae/how-to-render-conditionals-to-action-view-with-application-helpers-in-ruby-on-rails-4oj9</link>
      <guid>https://dev.to/ashakae/how-to-render-conditionals-to-action-view-with-application-helpers-in-ruby-on-rails-4oj9</guid>
      <description>&lt;p&gt;&lt;strong&gt;PROBLEM&lt;/strong&gt;: Writing if-else statements in your rails action view template does not look good or professional. You can use partials but they are still &lt;strong&gt;html.erb&lt;/strong&gt; which still is an action view. Take a look at the code below;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#menuhtmlerb"&gt;
  &lt;/a&gt;
  menu.html.erb
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;   &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;controller_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'groups'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;action_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-bold mr-3 text-md"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;small&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-medium mr-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;created by &lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
   &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt; &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-4 m-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;radio_button&lt;/span&gt; &lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@icons&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'link'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"focus:ring-secondary h-4 w-4 text-secondary border-gray-300"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
     &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;label&lt;/span&gt; &lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="vi"&gt;@icons&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'link'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"w-2 h-2 py-4"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@icons&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'link'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-14 h-14"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#partialhtmlerb"&gt;
  &lt;/a&gt;
  _partial.html.erb
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;   &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;logged_in?&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/users/&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A much cleaner solution would be to use the helper methods &lt;strong&gt;application_helper.rb&lt;/strong&gt; to render these conditionals.&lt;/p&gt;

&lt;p&gt;Inside the helper file, create a method, set an empty string to a variable, and write your conditional statement like you would write it in ruby. Remove the erb tags and wrap HTML code in strings. Now push the string with your code into the variable and set it to &lt;em&gt;variable.html_safe&lt;/em&gt;. example;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#applicationhelperrb"&gt;
  &lt;/a&gt;
  application_helper.rb
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_proj_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;controller_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'groups'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;action_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'show'&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;p class='font-bold mr-3 text-md'&amp;gt;
                  &amp;lt;small class='font-medium mr-1'&amp;gt;
                  created by &amp;lt;/small&amp;gt;  &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;/p&amp;gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html_safe&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_icons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ico&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;li class='p-4 m-1'&amp;gt;
                  &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;ico&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;radio_button&lt;/span&gt; &lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@icons&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'link'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s1"&gt;'focus:ring-secondary h-4 w-4 text-secondary border-gray-300'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;ico&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;label&lt;/span&gt; &lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="vi"&gt;@icons&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'link'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s1"&gt;'w-2 h-2 py-4'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                    &lt;span class="n"&gt;image_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@icons&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'link'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s1"&gt;'w-14 h-14'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/li&amp;gt;'&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html_safe&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;navlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;logged_in?&lt;/span&gt;
                 &lt;span class="s2"&gt;"&amp;lt;a href='/users/ &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'&amp;gt;"&lt;/span&gt;
               &lt;span class="k"&gt;else&lt;/span&gt;
                 &lt;span class="s2"&gt;"&amp;lt;a href='/'&amp;gt;"&lt;/span&gt;
               &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html_safe&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because they're functions that need to be run, you call them directly in the action view with the erb tags that executes ruby code &lt;strong&gt;&amp;lt;%= %&amp;gt;&lt;/strong&gt;. see the finished result;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#menuhtmlerb"&gt;
  &lt;/a&gt;
  menu.html.erb
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;   &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;show_proj_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;&lt;br&gt;
&lt;strong&gt;N.B. &lt;/strong&gt; &lt;em&gt;f is passed as an argument because, in the action view, the form was built with that variable.&lt;/em&gt;&lt;br&gt;
&lt;/small&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;   &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;show_icons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#partialerb"&gt;
  &lt;/a&gt;
  _partial.erb
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;   &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;navlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logged_in?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
You can now see less bulky and much cleaner code in your action views and, focus on writing more HTML code.&lt;/p&gt;

&lt;p&gt;Thanks for reading. &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>#100 days of Python, Day 5</title>
      <author>Vishnubhotla V D V Bharadwaj</author>
      <pubDate>Sun, 18 Apr 2021 13:34:02 +0000</pubDate>
      <link>https://dev.to/bharadwaj6262/100-days-of-python-day-5-d4i</link>
      <guid>https://dev.to/bharadwaj6262/100-days-of-python-day-5-d4i</guid>
      <description>&lt;p&gt;Today I learned about For Loops, Range and Code Blocks. At the end of the day, we create a Password generator that asks the number of letters, symbols, and letters you want in the password.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loops&lt;/strong&gt; : Things that happen over, over, and over.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For loops&lt;/strong&gt; : It allows us to execute the same line of code multiple times. Indentation is really important in loops.&lt;/p&gt;

&lt;p&gt;Normally, For loops are performed in two cases. One is using lists and the other is using range function. First, we solve programs using lists.&lt;/p&gt;

&lt;p&gt;Let's do an Average height calculator exercise. Here first we calculate the overall sum of heights of the students and get the count of the students. Then simply by dividing them, we get the average height of the students.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;student_heights = input("Enter a list of student heights").split()
for n in range(0, len(student_heights)):
    student_heights[n] = int(student_heights[n])
print(student_heights)
sums = 0
count = 0
for i in student_heights:
    sums += i
    count+= 1
print(sums)
print(count)
average_height = round(sums/count)
print(f'Average height of students is {average_height}')

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A simple Highest score exercise. It checks each element one by one and if the n+1 element is greater than n then (n+1)th element gets the maximum tag and the loop continues till the last element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;student_scores = input("Enter a list of student scores").split()
for n in range(0, len(student_scores)):
    student_scores[n] = int(student_scores[n])
print(student_scores)
maxim = 0
i =1
for maxi in student_scores:
    if maxi &amp;gt; maxim:
        maxim = maxi
    i +=1
print(maxi)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;range()&lt;/strong&gt; used when you want to generate a range of numbers. Where it includes the starting index excluding the last index.&lt;/p&gt;

&lt;p&gt;For example, if range(1,100) then 1 is considered but only up to 99.&lt;/p&gt;

&lt;p&gt;Adding all the numbers from 1 to 100 :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sums = 0
for i in range(1,101):
    sums+=i
print(sums)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding even numbers from 1 to 100:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sums = 0
for i in range(1,101):
    if i%2 == 0:
        sums+= i
print(sums)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;FizzBuzz problem: If divided by 3 prints "Fizz", if divided by 5 prints "Buzz", if it is divided by 5 and 3 then it prints "FizzBuzz".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for i in range(1,101):
    if i%5 == 0 and i %3 == 0:
        print("FizzBuzz")
    elif i % 3 == 0:
        print("Fizz")
    elif i %5 == 0:
        print("Buzz")
    else:
        print(i)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, that's the end of the day and it's time to create our password generator program. We will do it in two ways.&lt;/p&gt;

&lt;p&gt;Creating a simple one as it follows the input order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import random
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
symbols = ['!', '#', '$', '%', '&amp;amp;', '(', ')', '*', '+']

print("Welcome to the PyPassword Generator!")
nr_letters= int(input("How many letters would you like in your password?\n")) 
nr_symbols = int(input(f"How many symbols would you like?\n"))
nr_numbers = int(input(f"How many numbers would you like?\n"))

password = ""
for char in range(1, nr_letters +1):
    random_char = random.choice(letters)
    password += random_char
for num in range(1, nr_numbers +1):
    random_num = random.choice(numbers)
    password += random_num
for sym in range(1, nr_symbols +1):
    random_sym = random.choice(symbols)
    password += random_sym
print(password)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code output just follows the input order.&lt;/p&gt;

&lt;p&gt;Next, the dynamic password generator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import random
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
symbols = ['!', '#', '$', '%', '&amp;amp;', '(', ')', '*', '+']

print("Welcome to the PyPassword Generator!")
nr_letters= int(input("How many letters would you like in your password?\n")) 
nr_symbols = int(input(f"How many symbols would you like?\n"))
nr_numbers = int(input(f"How many numbers would you like?\n"))

password_list = []
for char in range(1, nr_letters +1):
    random_char = random.choice(letters)
    password_list += random_char
for num in range(1, nr_numbers +1):
    random_num = random.choice(numbers)
    password_list += random_num
for sym in range(1, nr_symbols +1):
    random_sym = random.choice(symbols)
    password_list += random_sym
print(password_list)

random.shuffle(password_list)
print(password_list)
passs = ""
for items in password_list:
    passs += items
print(passs)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>100daysofcode</category>
      <category>pythonbeginner</category>
      <category>python3</category>
      <category>beginnerslearningtoc</category>
    </item>
    <item>
      <title>QuiZoom(macOS App): Helps you quickly join Zoom meetings.</title>
      <author>ÊôãÂÖàÊ£Æ</author>
      <pubDate>Sun, 18 Apr 2021 13:30:58 +0000</pubDate>
      <link>https://dev.to/jinxiansen/quizoom-macos-app-helps-you-quickly-join-zoom-meetings-2mlg</link>
      <guid>https://dev.to/jinxiansen/quizoom-macos-app-helps-you-quickly-join-zoom-meetings-2mlg</guid>
      <description>&lt;p&gt;As &lt;a href="https://zoom.us"&gt;Zoom&lt;/a&gt; becomes more and more popular, in our daily work, there may be many scenes where Zoom multi-person meetings are used every day. But every time you have to copy the Zoom account and password from the email, sometimes because the password contains spaces, it will cause you to be unable to join the meeting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Jinxiansen/QuickZoom"&gt;QuickZoom&lt;/a&gt; can help you quickly join the Zoom meeting, reducing the tedious copy and paste, and the probability of errors when copying.&lt;/p&gt;

&lt;p&gt;When you copy the Zoom link, you automatically join the meeting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How To Use
&lt;/h2&gt;

&lt;p&gt;Before using this tool, please make sure you have installed the macOS version of the &lt;a href="https://zoom.us"&gt;Zoom app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After you have successfully installed Zoom and QuickZoom, you can try to copy your meeting link to see what happens!&lt;br&gt;
For example, when you copy the following link:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; 1
Meeting ID: 959 1701 1534
Passcode: 744594240

&lt;span class="k"&gt;case&lt;/span&gt; 2
https://xxx.zoom.com.cn/j/3211233218?pwd&lt;span class="o"&gt;=&lt;/span&gt;jaYeQt-YmAITGr0D3MRTsTm6M531L2vT

&lt;span class="k"&gt;case&lt;/span&gt; 3
https://xxx.zoom.com.cn/j/3759079899 &lt;span class="o"&gt;(&lt;/span&gt;Passcode: 682782330&lt;span class="p"&gt;)&lt;/span&gt;

Select the meeting ID and password, and &lt;span class="k"&gt;then &lt;/span&gt;press Command + C to copy.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The above meeting ID and password are no longer valid, and the format is for reference only.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will see the following interface, and then wait a moment to enter the meeting.&lt;/p&gt;

&lt;p&gt;You can visit GitHub for more information and download: &lt;a href="https://github.com/Jinxiansen/QuickZoom"&gt;https://github.com/Jinxiansen/QuickZoom&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ios</category>
      <category>swift</category>
    </item>
    <item>
      <title>ES6 Arrow Function Syntax Explained Simply</title>
      <author>Dan V</author>
      <pubDate>Sun, 18 Apr 2021 13:28:34 +0000</pubDate>
      <link>https://dev.to/dan_v/es6-arrow-function-syntax-explained-simply-77j</link>
      <guid>https://dev.to/dan_v/es6-arrow-function-syntax-explained-simply-77j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#es6-arrow-function-syntax-explained-simply"&gt;
  &lt;/a&gt;
  ES6 Arrow Function Syntax Explained Simply
&lt;/h1&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@flowforfrank?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ferenc Almasi&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is a JavaScript arrow function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds = users =&amp;gt; users.map(user =&amp;gt; user.id)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your response to the above code is, "Wait, what?!", then read on! Even if you do understand what's going on, you may still pick up a thing or two along the way.&lt;/p&gt;

&lt;p&gt;Some initial questions you may have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is it doing?!&lt;/li&gt;
&lt;li&gt;What is it returning (if anything)?&lt;/li&gt;
&lt;li&gt;What does the arrow mean?&lt;/li&gt;
&lt;li&gt;What is &lt;code&gt;users&lt;/code&gt; doing there?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, I want to go over the basics of arrow functions to help new JavaScript developers understand what is &lt;em&gt;actually&lt;/em&gt; going on here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-bit-of-history"&gt;
  &lt;/a&gt;
  A quick bit of history
&lt;/h2&gt;

&lt;p&gt;ES6 was the 6th Edition of JavaScript released in 2015. It is also known as "ECMAScript 6" or "EMCAScript2015". ES6 was a major revision of JavaScript, and introduced new syntax to help developers write complex code in a simpler form.&lt;/p&gt;

&lt;p&gt;One of these new additions was arrow function syntax. Arrow function syntax (or just "arrow syntax") provides a different method of writing functions, in a way that is often shorter and mostly quicker to write and comprehend once you've grasped how the syntax works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#normal-functions-vs-arrow-functions"&gt;
  &lt;/a&gt;
  "Normal" functions vs arrow functions
&lt;/h2&gt;

&lt;p&gt;Here is a simple &lt;strong&gt;function declaration&lt;/strong&gt; in basic JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function times10(number) {
  return number * 10;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the same thing as an &lt;strong&gt;arrow function&lt;/strong&gt; using ES6 arrow syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const times10 = number =&amp;gt; number * 10;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's pick out the main, visible differences in the arrow function:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are no curly braces (&lt;code&gt;{}&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt; There are no parentheses (or "brackets") around the function parameter (i.e. &lt;code&gt;= user =&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Arguably, the syntax is a bit more &lt;em&gt;streamlined&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that I use the word "streamlined", and not "better" or "simpler".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-this-useful"&gt;
  &lt;/a&gt;
  How is this useful?
&lt;/h2&gt;

&lt;p&gt;Perhaps you're not convinced that the use of arrow syntax in the above example is providing anything much more useful than the "normal" way of writing functions. In this case, I'd tend to agree. However, arrow functions begin to show their use in more complex scenarios.&lt;/p&gt;

&lt;p&gt;Take the below function, which gets ids from an array of user data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getUserIds(users) {
  return users.map(function(user) {
    return user.id;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using arrow syntax, we can choose to write this function as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds = users =&amp;gt; users.map(user =&amp;gt; user.id);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In some ways, you may find the arrow function more readable and probably quicker write too. Try writing each function in a code editor and see how they compare.&lt;/p&gt;

&lt;p&gt;Now, let's break down what is happening in the arrow function's single line of code: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are &lt;strong&gt;defining a variable&lt;/strong&gt; called &lt;code&gt;getUserIds&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;value&lt;/strong&gt; of &lt;code&gt;getUserIds&lt;/code&gt; is &lt;strong&gt;a function definition&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;That&lt;/em&gt; function takes an argument named &lt;code&gt;users&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;The function uses a JavaScript array function called &lt;code&gt;map()&lt;/code&gt; to iterate over each item in the &lt;code&gt;users&lt;/code&gt; array and &lt;strong&gt;return a new array&lt;/strong&gt; containing only the user ids.&lt;/li&gt;
&lt;li&gt;The function &lt;strong&gt;returns the array that was returned&lt;/strong&gt; by the map() function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All on one line. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-we-get-here"&gt;
  &lt;/a&gt;
  How did we get here?
&lt;/h2&gt;

&lt;p&gt;Arrow function syntax is flexible, and we could have written this function in a few different ways, including being more verbose with our syntax. &lt;/p&gt;

&lt;p&gt;For example, each of these functions when called would map over the &lt;code&gt;users&lt;/code&gt; array and return an array of user ids:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ‚úîÔ∏è
const getUserIds1 = (users) =&amp;gt; {
  return users.map(user =&amp;gt; user.id);
}

// ‚úîÔ∏è
const getUserIds2 = users =&amp;gt; {
  return users.map(user =&amp;gt; user.id);
}

// ‚úîÔ∏è
const getUserIds3 = users =&amp;gt; users.map(user =&amp;gt; user.id)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second example, we were able to remove the parentheses from around the &lt;code&gt;users&lt;/code&gt; parameter, and it works exactly the same.&lt;/p&gt;

&lt;p&gt;Why do this? Arguably: for simplicity, though it is entirely optional. Note that &lt;strong&gt;this only works&lt;/strong&gt; for functions with a &lt;strong&gt;single parameter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the third example we stripped the syntax down further, removing the braces (&lt;code&gt;{}&lt;/code&gt;) and the &lt;code&gt;return&lt;/code&gt; keyword. This is called &lt;strong&gt;implicit return&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-parameters"&gt;
  &lt;/a&gt;
  Multiple parameters
&lt;/h3&gt;

&lt;p&gt;If your function has multiple parameters (takes multiple arguments), you must use parentheses:&lt;/p&gt;

&lt;p&gt;‚ùå Will throw a syntax error&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds4 = users, prefix =&amp;gt; {
  return users.map(user =&amp;gt; prefix + user.id);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚úîÔ∏è This is fine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds5 = (users, prefix) {
  return users.map(user =&amp;gt; prefix + user.id);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#argument-destructuring"&gt;
  &lt;/a&gt;
  Argument destructuring
&lt;/h4&gt;

&lt;p&gt;You must however always use parentheses when using argument destructuring:&lt;/p&gt;

&lt;p&gt;‚ùå Will throw a syntax error&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = { id: 1, name: "Daniel" }
const getName = { name } =&amp;gt; name;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚úîÔ∏è This is fine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = { id: 1, name: "Daniel" }
const getName = ({ name }) =&amp;gt; name;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#implicit-return"&gt;
  &lt;/a&gt;
  Implicit return
&lt;/h3&gt;

&lt;p&gt;Arrow functions without braces will return the last value returned within it's own scope by default. Note that you should &lt;em&gt;not&lt;/em&gt; use the &lt;code&gt;return&lt;/code&gt; keyword when writing an arrow function without braces.&lt;/p&gt;

&lt;p&gt;Here are some examples of returning (or not) from arrow functions:&lt;/p&gt;

&lt;p&gt;Here is our &lt;code&gt;users&lt;/code&gt; data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const users = [{id: 1, name: "Aaron"}, {id: 2, name: "Maya"}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚ùå Using &lt;code&gt;return&lt;/code&gt; without braces&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds6 = (users) =&amp;gt; return users.map(user =&amp;gt; user.id)
                                   ^^^^^^

Uncaught SyntaxError: Unexpected token 'return'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚úîÔ∏è Implicit return&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds7 = (users) =&amp;gt; users.map(user =&amp;gt; user.id)

getUserIds7(users)

// [1, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚úîÔ∏è Explicit return&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds8 = (users) =&amp;gt; {
  return users.map(user =&amp;gt; user.id);
}

getUserIds8(users)

// [1, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚úîÔ∏è Explicitly returning nothing (or &lt;code&gt;undefined&lt;/code&gt;, to be precise)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds9 = (users) =&amp;gt; {
  users.map(user =&amp;gt; user.id);
}

getUserIds9(users)

// undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#anonymous-functions"&gt;
  &lt;/a&gt;
  Anonymous functions
&lt;/h3&gt;

&lt;p&gt;We can also use arrow syntax to write anonymous functions. I won't go in-depth on anonymous functions here, but this is what they look like in regular and arrow syntax:&lt;/p&gt;

&lt;p&gt;Anonymous function declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function(x, y) { 
  return x + y;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anonymous function expression (implicit return):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function(x, y) { x + y }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anonymous arrow functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(x, y) =&amp;gt; x + y;
// Returns x plus y

(x) =&amp;gt; x * 100;
// Returns x times 100

x =&amp;gt; x
// Returns x

x =&amp;gt; {
  return x;
}
// Returns x

const z = 99;
() =&amp;gt; z + 1;
// Returns 100;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ok-but-what-does-the-arrow-mean"&gt;
  &lt;/a&gt;
  Ok, but what does the arrow mean?!
&lt;/h2&gt;

&lt;p&gt;The arrow is characters which form syntax which Node or the browser will recognise, just like &lt;code&gt;===&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;It says: "and now I'm going to tell you what this function does".&lt;/p&gt;

&lt;p&gt;A nice way to think about it &lt;strong&gt;semantically&lt;/strong&gt; is picturing the arrow as the conveyer belt which moves the arguments through the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const add = (a, b) =&amp;gt; a + b;
// Take these things, (a,b), and move them through 
// in this direction =&amp;gt; into the function, leaving 
// the result on the other side.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#some-caveats"&gt;
  &lt;/a&gt;
  Some caveats
&lt;/h2&gt;

&lt;p&gt;Arrow functions are not that different from regular functions. Most of time, you can use them interchangeably without fear of consequence.&lt;/p&gt;

&lt;p&gt;However, there are a few technical points you should be aware of when using arrow functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-function-hoisting"&gt;
  &lt;/a&gt;
  No function hoisting
&lt;/h3&gt;

&lt;p&gt;Functions written using the &lt;code&gt;function&lt;/code&gt; keyword are "hoisted" at runtime. In simple terms, this means the engine running your code (i.e. Node) will take these functions and store them in memory before executing the rest of your code.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è So you can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;multiply(5, 2)
// 10

function multiply(x, y) {
  return x * y;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've written our code in a way where we're calling &lt;code&gt;multiply()&lt;/code&gt;  before defining what &lt;code&gt;multiply()&lt;/code&gt; is. &lt;/p&gt;

&lt;p&gt;But because we've used the &lt;code&gt;function&lt;/code&gt; keyword, at runtime &lt;code&gt;multiply()&lt;/code&gt; will &lt;strong&gt;hoisted&lt;/strong&gt;; it will be read and stored in memory (&lt;em&gt;defined&lt;/em&gt;) before the line &lt;code&gt;multiply(5, 2)&lt;/code&gt; is executed.&lt;/p&gt;

&lt;p&gt;‚ùå But you can't do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;multiply(5, 2) // TypeError: multiply is not a function

const multiply = (x, y) =&amp;gt; {
  return x * y;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we've used arrow syntax, &lt;code&gt;multiply()&lt;/code&gt; has not been hoisted. So when the runtime engine gets to &lt;code&gt;multiply(5, 2)&lt;/code&gt;, it sees that &lt;code&gt;multiply()&lt;/code&gt; is not defined at this point in the execution and throws an error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-raw-this-endraw-"&gt;
  &lt;/a&gt;
  No &lt;code&gt;this&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Arrow functions do not have access to &lt;code&gt;this&lt;/code&gt;. This is perhaps best explained with examples.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Using a normal function to access &lt;code&gt;this&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myObject1 = {
  x: 10,
  getX: function () {
    return this.x;
  }
};

console.log(myObject1.getX());
// 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚ùå Using an arrow function to access &lt;code&gt;this&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myObject2 = {
  x: 10,
  getX: () =&amp;gt; this.x
};

console.log(myObject2.getX());
// TypeError: Cannot read property 'x' of undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-caveats"&gt;
  &lt;/a&gt;
  Other caveats
&lt;/h3&gt;

&lt;p&gt;This article is to help you understand the basics of arrow syntax, but it's helpful to be &lt;em&gt;aware&lt;/em&gt; (even if you don't understand in detail) that there are some other technical differences with arrow functions. MDN Web Docs has a good &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;rundown of all the differences&lt;/a&gt;, if you are interested in further research.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-arrow-functions-better"&gt;
  &lt;/a&gt;
  Are arrow functions better?
&lt;/h2&gt;

&lt;p&gt;Not necessarily. Arrow function syntax provides developers with a tool for writing code in a different way, often with the benefits of code that is easier to read and write.&lt;/p&gt;

&lt;p&gt;When ES6 was still fancy and new, arrow functions were seen by some as the "new" way of writing JavaScript functions. Bootcamps and online tutorials would sometimes teach arrow functions by default, and often still do.&lt;/p&gt;

&lt;p&gt;But these days, I'm seeing a trend towards bringing it back to the &lt;code&gt;function&lt;/code&gt; keyword. Kent C. Dodds, a well-renowned React expert, posted &lt;a href="https://kentcdodds.com/blog/function-forms"&gt;an article&lt;/a&gt; about how he uses different function forms for different purposes, which makes for interesting reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h2&gt;

&lt;p&gt;ES6 arrow function syntax provides a useful way to write more streamlined code which is often more readable. Code readability is important for helping others to understand your code. Likewise, it's important to be able to read others' code well yourself. So regardless of how you like to write functions, it is good to be able to understand different syntaxes when you encounter them.&lt;/p&gt;

&lt;p&gt;I hope this article has been useful for those of you new to writing JavaScript code. If you have an questions, comments, suggestions, or indeed corrections, please let me know in the comments below. I would love to hear your thoughts, whether this article was helpful, and any constructive criticism.&lt;/p&gt;

&lt;p&gt;Please feel free to follow me here and on Twitter (&lt;a href="https://twitter.com/dan_j_v"&gt;@dan_j_v&lt;/a&gt;).&lt;/p&gt;

</description>
      <category>es6</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>üî® [git]: Write better commits with Gitmoji</title>
      <author>Javid Mougamadou</author>
      <pubDate>Sun, 18 Apr 2021 13:07:39 +0000</pubDate>
      <link>https://dev.to/javidjms/git-write-better-commits-with-gitmoji-3193</link>
      <guid>https://dev.to/javidjms/git-write-better-commits-with-gitmoji-3193</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Jlu3MuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.bram.us/wordpress/wp-content/uploads/2017/09/gitmoji-560x410.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Jlu3MuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.bram.us/wordpress/wp-content/uploads/2017/09/gitmoji-560x410.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  üìù Notes
&lt;/h2&gt;

&lt;p&gt;Gitmoji is an initiative to standardize and explain the use of emojis on GitHub commit messages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro-how-to-write-a-git-commit-message"&gt;
  &lt;/a&gt;
  üìù Intro : How to Write a Git Commit Message
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QBl44j1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://chris.beams.io/content/images/size/w2000/2021/01/git_commit_2x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QBl44j1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://chris.beams.io/content/images/size/w2000/2021/01/git_commit_2x.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case, I only read commits when i would like to track commit changes or to dig commit explanation. Otherwise, I directly read the source code.&lt;/p&gt;

&lt;p&gt;Here is an example of good git commit message semantic will look like (according to &lt;a href="https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716"&gt;Gist Semantic Commit Messages&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;scope]: &lt;span class="s2"&gt;"Message"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;type&lt;/strong&gt; must be one of the following mentioned below :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lt;build&amp;gt;: Build related changes (eg: npm related/ adding external dependencies)&lt;/li&gt;
&lt;li&gt;&amp;lt;chore&amp;gt;: A code change that external user won't see (eg: change to .gitignore)&lt;/li&gt;
&lt;li&gt;&amp;lt;docs&amp;gt;: Documentation related changes&lt;/li&gt;
&lt;li&gt;&amp;lt;feat&amp;gt;: Introduction of a new feature&lt;/li&gt;
&lt;li&gt;&amp;lt;fix&amp;gt;: Resolve an issue directly linked to development (bugfixes)&lt;/li&gt;
&lt;li&gt;&amp;lt;hotfix&amp;gt;: Resolve an issue directly linked to production (patches)&lt;/li&gt;
&lt;li&gt;&amp;lt;test&amp;gt;: Add/Update test cases&lt;/li&gt;
&lt;li&gt;&amp;lt;performance&amp;gt;: Add code that improves performance&lt;/li&gt;
&lt;li&gt;&amp;lt;refactor&amp;gt;: Update for code for maintainability (clean code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; is optional and must be a noun that represents the section of the codebase&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Message&lt;/strong&gt; should be imperative and should describe the commit with a clear message/keywords.&lt;/p&gt;

&lt;p&gt;Example of commits :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;feat&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;home, components]: Add login button
&amp;lt;feat&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;home, components]: Add login modal
&amp;lt;fix&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;home, components]: Resolve issue with modal collapses
&amp;lt;chore&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;home]: Move icons folder
&amp;lt;feat&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;newsletter]: Add Newsletter component
&amp;lt;feat&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;navbar]: Add navbar container
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#gitmoji"&gt;
  &lt;/a&gt;
  üöÄ Gitmoji
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T7cdnlBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/31794680/84195052-3a6d0780-aa9e-11ea-87ed-b39133f40829.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T7cdnlBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/31794680/84195052-3a6d0780-aa9e-11ea-87ed-b39133f40829.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using emojis on commit messages provides an easy way of identifying the purpose or intention of a commit with only looking at the emojis used. As there are a lot of different emojis I found the need of creating a guide that can help to use emojis easier.&lt;/p&gt;

&lt;p&gt;Now we can replace the &amp;lt;type/&amp;gt; with an emoji :&lt;/p&gt;

&lt;p&gt;üé® Improve structure / format of the code.&lt;/p&gt;

&lt;p&gt;‚ö°Ô∏è Improve performance.&lt;/p&gt;

&lt;p&gt;üî• Remove code or files.&lt;/p&gt;

&lt;p&gt;üêõ Fix a bug.&lt;/p&gt;

&lt;p&gt;‚ú® Introduce new features.&lt;/p&gt;

&lt;p&gt;üìù Add or update documentation.&lt;/p&gt;

&lt;p&gt;üöÄ Deploy stuff.&lt;/p&gt;

&lt;p&gt;üíö Fix CI Build.&lt;/p&gt;

&lt;p&gt;üë∑ Add or update CI build system.&lt;/p&gt;

&lt;p&gt;üîß Add or update configuration files.&lt;/p&gt;

&lt;p&gt;üî® Add or update development scripts.&lt;/p&gt;

&lt;p&gt;‚ö∞Ô∏è Remove dead code.&lt;/p&gt;

&lt;p&gt;Example of commits :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ú® &lt;span class="o"&gt;[&lt;/span&gt;home, components]: Add login button
‚ú® &lt;span class="o"&gt;[&lt;/span&gt;home, components]: Add login modal
üêõ &lt;span class="o"&gt;[&lt;/span&gt;home, components]: Resolve issue with modal collapses
üöö &lt;span class="o"&gt;[&lt;/span&gt;home]: Move icons folder
‚ú® &lt;span class="o"&gt;[&lt;/span&gt;newsletter]: Add Newsletter component
‚ú® &lt;span class="o"&gt;[&lt;/span&gt;navbar]: Add navbar container
üî• &lt;span class="o"&gt;[&lt;/span&gt;navbar]: Remove old navbar file
‚úÖ &lt;span class="o"&gt;[&lt;/span&gt;home]: Add login &lt;span class="nb"&gt;test &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;
üé® &lt;span class="o"&gt;[&lt;/span&gt;home, component]: Improve login modal
üì¶Ô∏è &lt;span class="o"&gt;[&lt;/span&gt;npm]: Add react-table
üî® Update script start-server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#additionnal-icons"&gt;
  &lt;/a&gt;
  Additionnal icons
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;üê≥ Add Dockerfile
üê≥ Add docker-compose.yml
‚ò∏Ô∏è &lt;span class="o"&gt;[&lt;/span&gt;helm]: Add postgres helm chart
‚ò∏Ô∏è &lt;span class="o"&gt;[&lt;/span&gt;helm]: Update frontend.yaml
‚ò∏Ô∏è &lt;span class="o"&gt;[&lt;/span&gt;helm]: Update pvc.yaml
üêé &lt;span class="o"&gt;[&lt;/span&gt;home]: Increase speed load &lt;span class="k"&gt;for &lt;/span&gt;navbar
üçé &lt;span class="o"&gt;[&lt;/span&gt;home]: Fix issue with MacOS &lt;span class="k"&gt;for &lt;/span&gt;navbar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Link: &lt;a href="https://emojipedia.org/"&gt;EmojiPedia&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-gitmojicli"&gt;
  &lt;/a&gt;
  üì¶Ô∏è Gitmoji-CLI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfUQ1Zuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cloud.githubusercontent.com/assets/7629661/20454643/11eb9e40-ae47-11e6-90db-a1ad8a87b495.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfUQ1Zuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cloud.githubusercontent.com/assets/7629661/20454643/11eb9e40-ae47-11e6-90db-a1ad8a87b495.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A gitmoji interactive client for using gitmojis on commit messages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;With npm :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;gitmoji-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On MacOS :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;gitmoji
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#interactive-client"&gt;
  &lt;/a&gt;
  Interactive Client
&lt;/h3&gt;

&lt;p&gt;Start the interactive commit client, to auto generate your commit based on your prompts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gitmoji &lt;span class="nt"&gt;-c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hook"&gt;
  &lt;/a&gt;
  Hook
&lt;/h3&gt;

&lt;p&gt;Run the init option, add your changes and commit them, after that the prompts will begin and your commit message will be built.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gitmoji &lt;span class="nt"&gt;-i&lt;/span&gt;
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H6vA11oS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189947-1de56124-6bd6-11e8-9567-e7f1a8e99500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6vA11oS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189947-1de56124-6bd6-11e8-9567-e7f1a8e99500.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search"&gt;
  &lt;/a&gt;
  Search
&lt;/h3&gt;

&lt;p&gt;Search using specific keywords to find the right gitmoji.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gitmoji &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s2"&gt;"criteria"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXFc4zuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189878-d24a3b78-6bd4-11e8-8d47-c8edf3b87e53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXFc4zuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189878-d24a3b78-6bd4-11e8-8d47-c8edf3b87e53.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list"&gt;
  &lt;/a&gt;
  List
&lt;/h3&gt;

&lt;p&gt;Pretty print all the available gitmojis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gitmoji &lt;span class="nt"&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihaIfOch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189877-d22b145a-6bd4-11e8-97f8-a8e36bcab062.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihaIfOch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189877-d22b145a-6bd4-11e8-97f8-a8e36bcab062.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#config"&gt;
  &lt;/a&gt;
  Config
&lt;/h3&gt;

&lt;p&gt;Run gitmoji -g to setup some gitmoji-cli preferences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gitmoji config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wRfyqMz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189876-d21167ee-6bd4-11e8-9008-4c987502f307.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wRfyqMz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189876-d21167ee-6bd4-11e8-9008-4c987502f307.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extensions-integration-with-ide"&gt;
  &lt;/a&gt;
  üî®Extensions (Integration with IDE)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#gitmoji-for-vscode"&gt;
  &lt;/a&gt;
  Gitmoji for Vscode
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6mwVJgap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.jsdelivr.net/gh/vtrois/gitmoji-vscode%401/images/about.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6mwVJgap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.jsdelivr.net/gh/vtrois/gitmoji-vscode%401/images/about.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=Vtrois.gitmoji-vscode"&gt;https://marketplace.visualstudio.com/items?itemName=Vtrois.gitmoji-vscode&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gitmoji-for-atom"&gt;
  &lt;/a&gt;
  Gitmoji for Atom
&lt;/h3&gt;

&lt;p&gt;Go to Settings (cmd + , or ctrl + ,) &amp;gt; Install and search for gitmoji-atom.&lt;/p&gt;

&lt;p&gt;Alternatively, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;apm &lt;span class="nb"&gt;install &lt;/span&gt;gitmoji-atom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Link : &lt;a href="https://atom.io/packages/gitmoji-atom"&gt;https://atom.io/packages/gitmoji-atom&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integration-with-devto-"&gt;
  &lt;/a&gt;
  üíª Integration with DEV.TO ?
&lt;/h2&gt;

&lt;p&gt;Do you think that we can use it while writing posts for Dev.TO ?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;üê≥ Docker
‚ò∏Ô∏è Kubernetes
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://emojipedia.org/laptop/"&gt;https://emojipedia.org/laptop/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gitmoji.dev/"&gt;https://gitmoji.dev/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/carloscuesta/gitmoji"&gt;https://github.com/carloscuesta/gitmoji&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/carloscuesta/gitmoji-cli"&gt;https://github.com/carloscuesta/gitmoji-cli&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716"&gt;https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53"&gt;https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gist.github.com/parmentf/035de27d6ed1dce0b36a"&gt;https://gist.github.com/parmentf/035de27d6ed1dce0b36a&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/i5han3/git-commit-message-convention-that-you-can-follow-1709"&gt;https://dev.to/i5han3/git-commit-message-convention-that-you-can-follow-1709&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/helderburato/patterns-for-writing-better-git-commit-messages-4ba0"&gt;https://dev.to/helderburato/patterns-for-writing-better-git-commit-messages-4ba0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chris.beams.io/posts/git-commit/"&gt;https://chris.beams.io/posts/git-commit/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
