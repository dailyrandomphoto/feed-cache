<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>New benchmark: Mezon Router is up to 222 times faster than Steampixel Router</title>
      <author>alexdodonov</author>
      <pubDate>Mon, 24 May 2021 09:36:39 +0000</pubDate>
      <link>https://dev.to/alexdodonov/new-benchmark-mezon-router-is-up-to-222-times-faster-than-steampixel-router-4mdp</link>
      <guid>https://dev.to/alexdodonov/new-benchmark-mezon-router-is-up-to-222-times-faster-than-steampixel-router-4mdp</guid>
      <description>&lt;p&gt;Hi all! Today we have one more benchmark.&lt;/p&gt;

&lt;p&gt;As usual we have two cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;http server accepts request, launches php script, which handles this request, and then all script data is removed from memory. All following requests are processed in the same way. In this case very critical to launch script as soon as possible and we do not have time for long pre-compilations and preparations. Because all of it will be lost after the script will finish working;&lt;/li&gt;
&lt;li&gt;php script is launching, initiating all internal components (and router is one of them) and then starting processing requests. This case can be organized via for example react-php. It differs from the previous case because we can spend reasonable time to pre-compile routes for faster processing.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#the-first-case"&gt;
  &lt;/a&gt;
  The first case
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generateSteampixelStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Steampixel\Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/static/0'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generateSteampixelStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Steampixel\Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/static/99'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generateSteampixelStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Steampixel\Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/static/199'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// and so on up to /static/999 route&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generateSteampixelNonStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Steampixel\Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/param/0/1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generateSteampixelNonStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Steampixel\Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/param/99/1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generateSteampixelNonStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Steampixel\Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/param/199/1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// and so on up to /param/999/1 route&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-second-case"&gt;
  &lt;/a&gt;
  The second case
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generateSteampixelNonStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Steampixel\Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/static/0'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Steampixel\Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/static/99'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Steampixel\Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/static/199'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// and so on up to /static/999 route&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;RouteGenerator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;generateSteampixelNonStaticRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Steampixel\Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/param/0/1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Steampixel\Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/param/99/1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Steampixel\Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/param/199/1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// and so on up to /param/999/1 route&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#ok-what-do-we-have"&gt;
  &lt;/a&gt;
  OK What do we have?
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#the-first-case-static-routes"&gt;
  &lt;/a&gt;
  The first case + static routes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+------------------------------------+-------------+-----+------+-----+------------+---------------+---------------+---------------+---------------+-------------+--------+--------+
| benchmark                          | subject     | set | revs | its | mem_peak   | best          | mean          | mode          | worst         | stdev       | rstdev | diff   |
+------------------------------------+-------------+-----+------+-----+------------+---------------+---------------+---------------+---------------+-------------+--------+--------+
| CoffeeSingleRequestStaticBench     | benchStatic | 0   | 10   | 10  | 2,721,192b | 41,307.500μs  | 45,096.590μs  | 42,128.908μs  | 61,295.100μs  | 6,320.995μs | 14.02% | 4.85x  |
| DVKSingleRequestStaticBench        | benchStatic | 0   | 10   | 10  | 3,177,992b | 24,590.200μs  | 27,811.340μs  | 27,001.933μs  | 36,327.300μs  | 3,083.099μs | 11.09% | 2.99x  |
| HoaSingleRequestStaticBench        | benchStatic | 0   | 10   | 10  | 3,780,328b | 43,449.100μs  | 43,772.210μs  | 43,661.100μs  | 44,222.900μs  | 235.195μs   | 0.54%  | 4.71x  |
| MezonSingleRequestStaticBench      | benchStatic | 0   | 10   | 10  | 2,219,792b | 9,089.700μs   | 9,299.940μs   | 9,279.696μs   | 9,561.000μs   | 142.680μs   | 1.53%  | 1.00x  |
| PeceeSingleRequestStaticBench      | benchStatic | 0   | 10   | 10  | 6,947,552b | 34,829.400μs  | 35,706.170μs  | 35,652.755μs  | 36,724.600μs  | 474.942μs   | 1.33%  | 3.84x  |
| SteampixelSingleRequestStaticBench | benchStatic | 0   | 10   | 10  | 2,498,808b | 194,219.800μs | 196,558.930μs | 196,331.508μs | 200,720.300μs | 1,645.088μs | 0.84%  | 21.14x |
+------------------------------------+-------------+-----+------+-----+------------+---------------+---------------+---------------+---------------+-------------+--------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-first-case-nonstatic-routes"&gt;
  &lt;/a&gt;
  The first case + non-static routes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+---------------------------+------------+-----+------+-----+------------+--------------+--------------+--------------+--------------+-------------+--------+--------+
| benchmark                 | subject    | set | revs | its | mem_peak   | best         | mean         | mode         | worst        | stdev       | rstdev | diff   |
+---------------------------+------------+-----+------+-----+------------+--------------+--------------+--------------+--------------+-------------+--------+--------+
| CoffeeReactParamBench     | benchParam | 0   | 10   | 10  | 2,194,328b | 7,760.800μs  | 8,367.330μs  | 7,971.543μs  | 10,153.900μs | 778.770μs   | 9.31%  | 7.57x  |
| DVKReactParamBench        | benchParam | 0   | 100  | 10  | 2,441,688b | 13,716.880μs | 15,382.193μs | 15,478.981μs | 17,333.080μs | 991.996μs   | 6.45%  | 13.91x |
| HoaReactParamBench        | benchParam | 0   | 100  | 10  | 3,294,616b | 3,582.400μs  | 4,080.933μs  | 4,197.178μs  | 4,528.640μs  | 325.111μs   | 7.97%  | 3.69x  |
| MezonReactParamBench      | benchParam | 0   | 100  | 10  | 3,061,904b | 1,019.620μs  | 1,105.630μs  | 1,059.608μs  | 1,265.810μs  | 76.777μs    | 6.94%  | 1.00x  |
| PeceeReactParamBench      | benchParam | 0   | 10   | 10  | 4,487,512b | 43,167.500μs | 45,641.740μs | 45,183.376μs | 51,542.400μs | 2,227.952μs | 4.88%  | 41.28x |
| SteampixelReactParamBench | benchParam | 0   | 10   | 10  | 2,256,032b | 17,826.400μs | 18,485.750μs | 18,245.010μs | 20,641.000μs | 777.997μs   | 4.21%  | 16.72x |
+---------------------------+------------+-----+------+-----+------------+--------------+--------------+--------------+--------------+-------------+--------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-second-case-static-routes"&gt;
  &lt;/a&gt;
  The second case + static routes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----------------------------+-------------+-----+------+-----+------------+---------------+---------------+---------------+---------------+-------------+--------+------------+
| benchmark                  | subject     | set | revs | its | mem_peak   | best          | mean          | mode          | worst         | stdev       | rstdev | diff       |
+----------------------------+-------------+-----+------+-----+------------+---------------+---------------+---------------+---------------+-------------+--------+------------+
| CoffeeReactStaticBench     | benchStatic | 0   | 10   | 10  | 2,194,360b | 7,992.400μs   | 8,278.480μs   | 8,161.593μs   | 9,130.000μs   | 317.905μs   | 3.84%  | 416.02x    |
| DVKReactStaticBench        | benchStatic | 0   | 100  | 10  | 2,437,296b | 10,202.950μs  | 10,691.660μs  | 10,478.296μs  | 12,547.980μs  | 638.242μs   | 5.97%  | 537.30x    |
| HoaReactStaticBench        | benchStatic | 0   | 100  | 10  | 2,826,400b | 3,585.590μs   | 3,725.367μs   | 3,616.349μs   | 4,167.740μs   | 189.042μs   | 5.07%  | 187.21x    |
| MezonReactStaticBench      | benchStatic | 0   | 100  | 10  | 1,840,624b | 18.730μs      | 19.899μs      | 19.241μs      | 22.630μs      | 1.208μs     | 6.07%  | 1.00x      |
| PeceeReactStaticBench      | benchStatic | 0   | 10   | 10  | 4,106,416b | 18,972.800μs  | 19,696.340μs  | 19,639.540μs  | 20,493.800μs  | 425.149μs   | 2.16%  | 989.82x    |
| SteampixelReactParamBench  | benchStatic | 0   | 10   | 10  | 2,602,624b | 235,412.100μs | 239,436.830μs | 237,784.100μs | 252,016.100μs | 4,582.392μs | 1.91%  | 221.61x    |
+----------------------------+-------------+-----+------+-----+------------+---------------+---------------+---------------+---------------+-------------+--------+------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-second-case-nonstatic-routes"&gt;
  &lt;/a&gt;
  The second case + non-static routes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+-----------------------------------+------------+-----+------+-----+--------------+---------------+---------------+---------------+---------------+--------------+--------+-------+
| benchmark                         | subject    | set | revs | its | mem_peak     | best          | mean          | mode          | worst         | stdev        | rstdev | diff  |
+-----------------------------------+------------+-----+------+-----+--------------+---------------+---------------+---------------+---------------+--------------+--------+-------+
| CoffeeSingleRequestParamBench     | benchParam | 0   | 10   | 10  | 3,688,232b   | 51,588.400μs  | 52,322.470μs  | 52,054.399μs  | 53,208.300μs  | 535.329μs    | 1.02%  | 1.77x |
| DVKSingleRequestParamBench        | benchParam | 0   | 10   | 10  | 3,170,376b   | 28,365.100μs  | 29,573.940μs  | 28,775.061μs  | 36,744.700μs  | 2,410.586μs  | 8.15%  | 1.00x |
| HoaSingleRequestParamBench        | benchParam | 0   | 10   | 10  | 4,099,256b   | 45,535.800μs  | 46,021.020μs  | 45,784.508μs  | 46,996.600μs  | 432.767μs    | 0.94%  | 1.56x |
| MezonSingleRequestParamBench      | benchParam | 0   | 10   | 10  | 139,441,144b | 122,050.900μs | 126,141.770μs | 124,773.830μs | 135,054.800μs | 3,791.321μs  | 3.01%  | 4.27x |
| PeceeSingleRequestParamBench      | benchParam | 0   | 10   | 10  | 6,531,736b   | 73,582.600μs  | 74,616.210μs  | 74,750.904μs  | 76,412.000μs  | 873.393μs    | 1.17%  | 2.52x |
| SteampixelSingleRequestParamBench | benchParam | 0   | 10   | 10  | 2,598,760b   | 219,314.600μs | 232,375.440μs | 226,123.319μs | 268,318.200μs | 14,198.405μs | 6.11%  | 7.86x |
+-----------------------------------+------------+-----+------+-----+--------------+---------------+---------------+---------------+---------------+--------------+--------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h1&gt;

&lt;p&gt;More articles can be found in my &lt;a href="https://twitter.com/mezonphp"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-mezonrouter"&gt;
  &lt;/a&gt;
  What is mezon/router?
&lt;/h1&gt;

&lt;p&gt;mezon/router now is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;framework for routing with &lt;strong&gt;100% code coverage&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;10.0 points&lt;/strong&gt; on scrutinizer-ci.com&lt;/li&gt;
&lt;li&gt;router is a part of the &lt;a href="https://github.com/alexdodonov/mezon"&gt;Mezon Project&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Repo on github.com: &lt;a href="https://github.com/alexdodonov/mezon-router"&gt;https://github.com/alexdodonov/mezon-router&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#it-will-be-great-if-you-will-contribute-something-to-this-project-documentation-sharing-the-project-in-your-social-media-bug-fixing-refactoring-or-even-submitting-issue-with-question-or-feature-request-thanks-anyway-"&gt;
  &lt;/a&gt;
  It will be great if you will contribute something to this project. Documentation, sharing the project in your social media, bug fixing, refactoring, or even &lt;strong&gt;&lt;a href="https://github.com/alexdodonov/mezon-router/issues"&gt;submitting issue with question or feature request&lt;/a&gt;&lt;/strong&gt;. Thanks anyway )
&lt;/h1&gt;

</description>
      <category>mezon</category>
      <category>php</category>
      <category>router</category>
      <category>benchmark</category>
    </item>
    <item>
      <title>Why you should create a PWA for your side-project</title>
      <author>Tijs Martens</author>
      <pubDate>Mon, 24 May 2021 09:29:33 +0000</pubDate>
      <link>https://dev.to/martenstijs/why-you-should-create-a-pwa-for-your-side-project-21f9</link>
      <guid>https://dev.to/martenstijs/why-you-should-create-a-pwa-for-your-side-project-21f9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;We, (web-)developers, often have some small ideas for fun projects. Most of these ideas are not startup worthy but are just for the sake of learning something new or just having fun. One of the advantages of creating these is that you're building a strong portfolio with a "I am a creator" vibe.&lt;/p&gt;

&lt;p&gt;Well, with a little more effort, you can upgrade these projects to look a lot more professional when sharing them on your socials.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-do-we-create-these-side-projects"&gt;
  &lt;/a&gt;
  Why do we create these side projects
&lt;/h1&gt;

&lt;p&gt;I really like to create small and fun projects, not everything we make needs to have 1000 daily users to be developed. Sometimes we just have a little idea or something that's bothering us and by creating a small tool, we can solve that. &lt;/p&gt;

&lt;p&gt;Another reason why I like to make small projects is to explore new technologies. It's hard to try something new in production software. &lt;/p&gt;

&lt;p&gt;Creating side projects and proof-of-concepts are also a great way to develop a personal brand. By having small, non significant, projects on your portfolio you show that you have a hand's-on mentality. Which I believe a lot of companies want.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-pwa"&gt;
  &lt;/a&gt;
  What is a PWA
&lt;/h1&gt;

&lt;p&gt;You could write an entire thesis on what a PWA is and isn't. (whoops, maybe I did exactly that 😅). But in it's essence a PWA is just a regular website which makes use of modern web technologies to provide a user experience which is close to that of a native application. &lt;/p&gt;

&lt;p&gt;It's an attempt to bridge the gap between native applications and web applications. It's taking the strongest points from both worlds and combines them. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have the reach of the web. People can find your project from a search engine and it has an easy to access URL.&lt;/li&gt;
&lt;li&gt;You have similar capabilities as a native application. A PWA can still provide some functionality when offline and it can also re-engage users with push-notification.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many people would consider a PWA as a website which can be installed on a device.  The lighthouse audit which is embedded in the Chrome dev-tools confirms this. So how do you make a regular website installable?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-make-a-pwa-installable"&gt;
  &lt;/a&gt;
  How to make a PWA installable.
&lt;/h1&gt;

&lt;p&gt;Your website has to fullfill these 3 requirements&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Register a service worker&lt;/li&gt;
&lt;li&gt;Register a manifest.json&lt;/li&gt;
&lt;li&gt;Be served over HTTPS&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-service-worker"&gt;
  &lt;/a&gt;
  1. Service worker
&lt;/h2&gt;

&lt;p&gt;According to the lighthouse audit, a PWA should register a service worker which has the "start_url" in it's scope. There is no requirement based on what the functionality of the service worker should be. To make the site installable, there should just be a service worker, it's totally fine if this web worker has no functionality. &lt;/p&gt;

&lt;p&gt;So it's fine if it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;install&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;service worker installed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;service worker activated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This service worker should be registered in the startup file of your project. For me (in Svelte.js) that's&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;




```jsx
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/service-worker.js');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! Now your website registers a service worker. &lt;/p&gt;

&lt;p&gt;You can do al lot of cool things to improve the performance of  your web app with a service worker. But that's outside the scope of this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-manifestjson"&gt;
  &lt;/a&gt;
  2. Manifest.json
&lt;/h2&gt;

&lt;p&gt;The manifest.json file is a file which provides some extra metadata about the website to the device. There are a lot of tools which can help you with generating the correct assets and the manifest file itself&lt;/p&gt;

&lt;p&gt;I like to use this one: &lt;a href="https://www.dunplab.it/web-app-manifest-generator"&gt;https://www.dunplab.it/web-app-manifest-generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According the the MDN docs, a manifest should at least include the following properties&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Spotify album browser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"short_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Spotify album browser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A progressive web application that suggests albums based on the preferences and listening history of the user"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"background_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#191414"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"theme_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#1db954"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"standalone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"icons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"images/icons/apple-icon-152x152-dunplab-manifest-4531.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"152x152"&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you should link to this file in the head-tag of your website:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    ...
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"manifest"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/manifest.json"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-https"&gt;
  &lt;/a&gt;
  3. HTTPS
&lt;/h2&gt;

&lt;p&gt;This one might be the easiest. It's 2020, serving a website without HTTPS is just not acceptable anymore. There are many platforms where you can host your side projects for free with https (Vercel, Netlify, ...). I like to use Vercel for it CI/CD features, but most likely other platforms can do the same.&lt;/p&gt;

&lt;p&gt;So that's it! that's all! That wasn't to bad huh? For this effort your website, or should I call it PWA? is installable as a standalone experience on al modern devices. Most browsers (not Safari) will even prompt the user to install it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-should-i-create-a-pwa-for-my-side-project"&gt;
  &lt;/a&gt;
  Why should I create a PWA for my side project.
&lt;/h1&gt;

&lt;p&gt;There are many reasons why you should add these 3 simple steps to your next side project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Engagement: A PWA can be accessed from a URL just like a regular website. There is a really low barrier to test your little prototype/ tool. If you would've created a native app, this barrier is way bigger.&lt;/li&gt;
&lt;li&gt;It looks hella good on screenshots/ screencasts. The little project you will make will look and feel like a native app. Without having to deal with the hassle of actually creating a native app. When you share your app in a video or just as screenshots, they look a lot better/ more professional than when you share screenshots of a web-browser.&lt;/li&gt;
&lt;li&gt;Showing excellence: Progressive web applications are kinda new (debatable) in the world of web-development. Showing that you know what it is and know how to implement is, shows that you are actively following the latest trends within web development. This could be a crucial factor when you're trying to land your next job.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An Example
&lt;/h1&gt;

&lt;p&gt;A couple weeks ago I struggled with finding new music on Spotify. For some reason, the Spotify recommendation engine kept on suggesting the same albums over and over again. Coincidentally at that time I wanted to try out Svelte.&lt;/p&gt;

&lt;p&gt;I did some research and I found out that Spotify has a great API which is really easy to use. &lt;/p&gt;

&lt;p&gt;So I had a plan. Create a good looking, personalized, album suggesting PWA.&lt;/p&gt;

&lt;p&gt;After two weekends of developing and getting to know Svelte I had my PWA up and running. I recorded a screencast and shared it on my LinkedIn. It didn't explode or went viral. But yet, more people then expected gave it a try and I received a lot of feedback. One week later, I shared my project on reddit.&lt;/p&gt;

&lt;p&gt;In both cases, I didn't have that many likes or upvotes. But a lot of the people that saw my post actually gave it a try. Which is in the end the goal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UOafxK3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6m9mndu5u5m4m54r6jw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOafxK3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6m9mndu5u5m4m54r6jw.png" alt="first peek = LinkedIn post - second peek = LinkedIn post shared - third peek = shared on Reddit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pl1aGqHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3c1v7d4ktp6n4cnuhek1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pl1aGqHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3c1v7d4ktp6n4cnuhek1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can give this little project a try at &lt;a href="https://album-browser.vercel.app/"&gt;https://album-browser.vercel.app/&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wyV0zI7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg3hphua6we07xba2wcj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wyV0zI7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg3hphua6we07xba2wcj.png" alt="PWA on mobile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  Screenshots
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pNJtqBMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6zfnsixohnkenzec32m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pNJtqBMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6zfnsixohnkenzec32m.png" alt="Landing screen on desktop"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wn5SFHVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yhb0wcz48824oogytxu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wn5SFHVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yhb0wcz48824oogytxu.png" alt="Login screen on desktop"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IALrt9-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0c2ga21qizc9huiefp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IALrt9-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0c2ga21qizc9huiefp1.png" alt="App on desktop"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>pwa</category>
      <category>svelte</category>
      <category>spotify</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hidden power of || and &amp;&amp;</title>
      <author>Nikita Kozlov</author>
      <pubDate>Mon, 24 May 2021 08:36:52 +0000</pubDate>
      <link>https://dev.to/kozlovzxc/hidden-power-of-and-jng</link>
      <guid>https://dev.to/kozlovzxc/hidden-power-of-and-jng</guid>
      <description>&lt;p&gt;TLDR: Logical operators actually return one of the operands, so you can refactor code using this feature.&lt;/p&gt;




&lt;p&gt;Usually, you may see &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; logical operators in if cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;case1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;case2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you may expect that &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; returns a boolean value, but it is only correct if values on both sides of these operators are boolean as well. &lt;/p&gt;

&lt;p&gt;Actually, these operators return one of their arguments. E.g. if they were functions they would be implemented like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It may sound and look a bit confusing, but let’s dive into examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// boring part&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; true&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; true&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; false&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; false&lt;/span&gt;

&lt;span class="c1"&gt;// interesting part&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; { prop: 1 }&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;  &lt;span class="c1"&gt;// -&amp;gt; { prop: 1 }&lt;/span&gt;

&lt;span class="c1"&gt;// more interesting part&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; { prop: 1 }&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; true &lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;  &lt;span class="c1"&gt;// -&amp;gt; true&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; { prop: 1 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, how do we use it? &lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;||&lt;/code&gt; operator you can set default values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customTitle&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Default title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Same to&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Default title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customTitle&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator we can check for property presence in an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;

&lt;span class="c1"&gt;// Same to&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if &lt;code&gt;response&lt;/code&gt; or &lt;code&gt;response.data&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; this assignment won’t throw any error.&lt;/p&gt;

&lt;p&gt;Combining &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; we can get a nice construction, which checks for properties and can set a default value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UNKNOWN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Btw in newer versions of TypeScript, you can use a nullish coalescing, which simplifies &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; chains even more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UNKOWN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;UPD: Needed to mention this can be confused with &lt;a href="https://en.wikipedia.org/wiki/Lazy_evaluation#:~:text=In%20programming%20language%20theory%2C%20lazy,avoids%20repeated%20evaluations%20(sharing)."&gt;lazy evaluation&lt;/a&gt;, but actually it is &lt;a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation"&gt;short-circuit evaluation&lt;/a&gt;. Thanks to my friend &lt;a href="https://twitter.com/rayman1104"&gt;Ray&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR"&gt;MDN/||&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND"&gt;MDN/&amp;amp;&amp;amp;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Previous posts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-pure-vs-impure-functions-22om"&gt;JS interview in 2 minutes / pure vs impure functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-closure-3hi6"&gt;JS interview in 2 minutes / Closure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-currying-2hko"&gt;JS interview in 2 minutes / Currying 🥘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Btw, I will post more fun stuff here and on &lt;a href="https://twitter.com/kozlovzxc"&gt;Twitter&lt;/a&gt;. Let's be friends 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React Query and TypeScript</title>
      <author>Dominik D</author>
      <pubDate>Mon, 24 May 2021 08:19:04 +0000</pubDate>
      <link>https://dev.to/tkdodo/react-query-and-typescript-34ai</link>
      <guid>https://dev.to/tkdodo/react-query-and-typescript-34ai</guid>
      <description>&lt;p&gt;&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; is 🔥 - this seems to be a common understanding now in the frontend community. Many developers expect libraries to either be written in TypeScript, or at least provide good type definitions. For me, if a library is written in TypeScript, the type definitions are the best documentation there is. It's never wrong because it directly reflects the implementation. I frequently look at type definitions before I read API docs.&lt;/p&gt;

&lt;p&gt;React Query was initially written in JavaScript (v1), and was then re-written to TypeScript with v2. This means that right now, there is very good support for TypeScript consumers.&lt;/p&gt;

&lt;p&gt;There are however a couple of "gotchas" when working with TypeScript due to how dynamic and unopinionated React Query is. Let's go through them one by one to make your experience with it even better.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#generics"&gt;
  &lt;/a&gt;
  Generics
&lt;/h1&gt;

&lt;p&gt;React Query heavily uses &lt;a href="https://www.typescriptlang.org/docs/handbook/2/generics.html"&gt;Generics&lt;/a&gt;. This is necessary because the library does not actually fetch data for you, and it cannot know what &lt;em&gt;type&lt;/em&gt; the data will have that your api returns.&lt;/p&gt;

&lt;p&gt;The TypeScript section in the &lt;a href="https://react-query.tanstack.com/typescript"&gt;official docs&lt;/a&gt; is not very extensive, and it tells us to explicitly specify the Generics that &lt;em&gt;useQuery&lt;/em&gt; expects when calling it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useGroups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groups&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchGroups&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Over time, React Query has added more Generics to the &lt;em&gt;useQuery&lt;/em&gt; hook (there are now four of them), mainly because more functionality was added. The above code works, and it will make sure that the &lt;em&gt;data&lt;/em&gt; property of our custom hook is correctly typed to &lt;code&gt;Group[] | undefined&lt;/code&gt; as well as that our &lt;em&gt;error&lt;/em&gt; will be of type &lt;code&gt;Error | undefined&lt;/code&gt;. But it will not work like that for more advanced use-cases, especially when the other two Generics are needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-four-generics"&gt;
  &lt;/a&gt;
  The four Generics
&lt;/h2&gt;

&lt;p&gt;This is the current definition of the &lt;em&gt;useQuery&lt;/em&gt; hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="nx"&gt;TQueryFnData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;TError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;TData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TQueryFnData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;TQueryKey&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;QueryKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;QueryKey&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a lot of stuff going on, so let's try to break it down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;TQueryFnData&lt;/code&gt;: the type returned from the &lt;em&gt;queryFn&lt;/em&gt;. In the above example, it's &lt;code&gt;Group[]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;TError&lt;/code&gt;: the type of Errors to expect from the &lt;em&gt;queryFn&lt;/em&gt;. &lt;code&gt;Error&lt;/code&gt; in the example.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;TData&lt;/code&gt;: the type our &lt;em&gt;data&lt;/em&gt; property will eventually have. Only relevant if you use the &lt;em&gt;select&lt;/em&gt; option, because then the &lt;em&gt;data&lt;/em&gt; property can be different from what the &lt;em&gt;queryFn&lt;/em&gt; returns. Otherwise, it will default to whatever the &lt;em&gt;queryFn&lt;/em&gt; returns.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;TQueryKey&lt;/code&gt;: the type of our QueryKey, only relevant if you use the QueryKey that is passed to your &lt;em&gt;queryFn&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can also see, all those Generics have default values, which means that if you don't provide them, TypeScript will fall back to those types. This works pretty much the same as default parameters in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ✅ 20&lt;/span&gt;
&lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ✅ 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#type-inference"&gt;
  &lt;/a&gt;
  Type Inference
&lt;/h2&gt;

&lt;p&gt;TypeScript works best if you let it infer (or figure out) what type something should be on its own. Not only does it make code easier to &lt;em&gt;write&lt;/em&gt; (because you don't have to type all the types 😅), but it will also make it easier to &lt;em&gt;read&lt;/em&gt;. In many instances, it can make code look exactly like JavaScript. Some simple examples of type inference would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// ✅ `number`&lt;/span&gt;

&lt;span class="c1"&gt;// 🚀 both greeting and the result of greet will be string&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ciao&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it comes to Generics, they can also generally be inferred from their usage, which is super awesome. You could also provide them manually, but in many cases, you don't need to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 🚨 no need to provide the generic&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// ⚠️ or to annotate the result&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// 😎 infers correctly to `string`&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#partial-type-argument-inference"&gt;
  &lt;/a&gt;
  Partial Type Argument Inference
&lt;/h2&gt;

&lt;p&gt;...doesn't exist in TypeScript yet (see this &lt;a href="https://github.com/microsoft/TypeScript/issues/26242"&gt;open issue&lt;/a&gt;). This basically means that if you provide &lt;em&gt;one&lt;/em&gt; Generic, you have to provide &lt;em&gt;all&lt;/em&gt; of them. But because React Query has default values for Generics, we might not notice right away that they will be taken. The resulting error messages can be quite cryptic. Let's look at an example where this actually backfires:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useGroupCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groups&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchGroups&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// 🚨 Type '(groups: Group[]) =&amp;gt; number' is not assignable to type '(data: Group[]) =&amp;gt; Group[]'.&lt;/span&gt;
        &lt;span class="c1"&gt;// Type 'number' is not assignable to type 'Group[]'.ts(2322)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we haven't provided the 3rd Generic, the default value kicks in, which is also &lt;code&gt;Group[]&lt;/code&gt;, but we return &lt;code&gt;number&lt;/code&gt; from our &lt;em&gt;select&lt;/em&gt; function. One fix is to simply add the 3rd Generic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useGroupCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ✅ fixed it&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groups&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchGroups&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As long as we don't have Partial Type Argument Inference, we have to work with what we got.&lt;/p&gt;

&lt;p&gt;So what's the alternative?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infer-all-the-things"&gt;
  &lt;/a&gt;
  Infer all the things
&lt;/h2&gt;

&lt;p&gt;Let's start by &lt;em&gt;not&lt;/em&gt; passing in any Generics at all and let TypeScript figure out what to do. For this to work, we need the &lt;em&gt;queryFn&lt;/em&gt; to have a good return type. Of course, if you inline that function without an explicit return type, you will have &lt;em&gt;any&lt;/em&gt; - because that's what &lt;em&gt;axios&lt;/em&gt; or &lt;em&gt;fetch&lt;/em&gt; give you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useGroups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 🚨 data will be `any` here&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groups&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groups&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;respone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you (like me) like to keep your api layer separated from your queries, you'll need to add type definitions anyways to avoid &lt;em&gt;implicit any&lt;/em&gt;, so React Query can infer the rest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchGroups&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groups&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ✅ data will be `Group[] | undefined` here&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useGroups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groups&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchGroups&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ✅ data will be `number | undefined` here&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useGroupCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groups&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchGroups&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Advantages of this approach are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  no more manually specifying Generics&lt;/li&gt;
&lt;li&gt;  works for cases where the 3rd (select) and 4th (QueryKey) Generic are needed&lt;/li&gt;
&lt;li&gt;  will continue to work if more Generics are added&lt;/li&gt;
&lt;li&gt;  code is less confusing / looks more like JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-about-error"&gt;
  &lt;/a&gt;
  What about error?
&lt;/h2&gt;

&lt;p&gt;What about error, you might ask? Per default, without any Generics, error will be inferred to &lt;em&gt;unknown&lt;/em&gt;. This might sound like a bug, why is it not &lt;em&gt;Error&lt;/em&gt;? But it is actually on purpose, because in JavaScript, you can throw &lt;em&gt;anything&lt;/em&gt; - it doesn't have to be of type &lt;code&gt;Error&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since React Query is not in charge of the function that returns the Promise, it also can't know what type of errors it might produce. So &lt;em&gt;unknown&lt;/em&gt; is correct. Once TypeScript allows skipping some generics when calling a function with multiple generics (see &lt;a href="https://github.com/microsoft/TypeScript/issues/10571"&gt;this issue for more information&lt;/a&gt;), we could handle this better, but for now, if we need to work with errors and don't want to resort to passing Generics, we can narrow the type with an instanceof check:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useGroups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 🚨 this doesn't work because: Object is of type 'unknown'.ts(2571)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;An&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="nx"&gt;occurred&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ✅ the instanceOf check narrows to type `Error`&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;An&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="nx"&gt;occurred&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we need to make some kind of check anyways to see if we have an error, the instanceof check doesn't look like a bad idea at all, and it will also make sure that our error actually has a property message at runtime. This is also in line with what TypeScript has planned for the 4.4 release, where they'll introduce a new compiler flag &lt;em&gt;useUnknownInCatchVariables&lt;/em&gt;, where catch variables will be &lt;em&gt;unknown&lt;/em&gt; instead of &lt;em&gt;any&lt;/em&gt; (see &lt;a href="https://github.com/microsoft/TypeScript/issues/41016"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#type-narrowing"&gt;
  &lt;/a&gt;
  Type Narrowing
&lt;/h1&gt;

&lt;p&gt;I rarely use destructuring when working with React Query. First of all, names like &lt;em&gt;data&lt;/em&gt; and &lt;em&gt;error&lt;/em&gt; are quite universal (purposefully so), so you'll likely rename them anyway. Keeping the whole object will keep the context of what data it is or where the error is coming from. It will further help TypeScript to narrow types when using the status field or one of the status booleans, which it cannot do if you use destructuring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useGroups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 🚨 data will still be `Group[] | undefined` here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;groupsQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useGroups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groupsQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ✅ groupsQuery.data will now be `Group[]`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This has nothing to do with React Query, it is just how TypeScript works. &lt;a href="https://twitter.com/danvdk"&gt;@danvdk&lt;/a&gt; has a good explanation for this behaviour&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--nchg168h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/485135064557035520/zATSd81r_normal.jpeg" alt="Dan Vanderkam profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dan Vanderkam
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @danvdk
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/tannerlinsley"&gt;@tannerlinsley&lt;/a&gt; &lt;a href="https://twitter.com/TkDodo"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/TkDodo"&gt;@TkDodo&lt;/a&gt; &lt;a href="https://twitter.com/lukemorales"&gt;@lukemorales&lt;/a&gt; &lt;a href="https://twitter.com/typescript"&gt;@typescript&lt;/a&gt; The comment from &lt;a href="https://twitter.com/TkDodo"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/TkDodo"&gt;@TkDodo&lt;/a&gt; is exactly right, TypeScript does refinement on the types of individual symbols. Once you split them apart, it can't keep track of the relationship any more. Doing this in general would be computationally hard. It can also be hard for people.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:19 PM - 21 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1363614288103964672" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1363614288103964672" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1363614288103964672" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h1&gt;
  &lt;a href="#type-safety-with-the-enabled-option"&gt;
  &lt;/a&gt;
  Type safety with the enabled option
&lt;/h1&gt;

&lt;p&gt;I've expressed my ♥️ for the &lt;a href="//./practical-react-query#the-enabled-option-is-very-powerful"&gt;enabled option&lt;/a&gt; right from the start, but it can be a bit tricky on type level if you want to use it for &lt;a href="https://react-query.tanstack.com/guides/dependent-queries"&gt;dependent queries&lt;/a&gt; and disable your query for as long as some parameters are not yet defined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`group/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;group&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetchGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="c1"&gt;// 🚨 Argument of type 'number | undefined' is not assignable to parameter of type 'number'.&lt;/span&gt;
    &lt;span class="c1"&gt;//  Type 'undefined' is not assignable to type 'number'.ts(2345)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Technically, TypeScript is right, &lt;em&gt;id&lt;/em&gt; is possibly &lt;em&gt;undefined&lt;/em&gt;: the &lt;em&gt;enabled&lt;/em&gt; option does not perform any type narrowing. Also, there are ways to bypass the &lt;em&gt;enabled&lt;/em&gt; option, for example by calling the &lt;em&gt;refetch&lt;/em&gt; method returned from &lt;em&gt;useQuery&lt;/em&gt;. In that case, the &lt;em&gt;id&lt;/em&gt; might really be &lt;em&gt;undefined&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I've found the best way to go here, if you don't like the &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator"&gt;non-null assertion operator&lt;/a&gt;, is to accept that &lt;em&gt;id&lt;/em&gt; can be &lt;em&gt;undefined&lt;/em&gt; and reject the Promise in the &lt;em&gt;queryFn&lt;/em&gt;. It's a bit of duplication, but it's also explicit and safe:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ✅ check id at runtime because it can be `undefined`&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`group/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;group&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetchGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#optimistic-updates"&gt;
  &lt;/a&gt;
  Optimistic Updates
&lt;/h1&gt;

&lt;p&gt;Getting optimistic updates right in TypeScript is not an easy feat, so we've decided to add it as a comprehensive &lt;a href="https://react-query.tanstack.com/examples/optimistic-updates-typescript"&gt;example&lt;/a&gt; to the docs.&lt;/p&gt;

&lt;p&gt;The important part is: You have to explicitly type the &lt;em&gt;variables&lt;/em&gt; argument passed to &lt;em&gt;onMutate&lt;/em&gt; in order to get the best type inference. I don't fully comprehend why that is, but it again seems to have something to do with inference of Generics. Have a look &lt;a href="https://github.com/tannerlinsley/react-query/pull/1366#discussion_r538459890"&gt;at this comment&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#useinfinitequery"&gt;
  &lt;/a&gt;
  useInfiniteQuery
&lt;/h1&gt;

&lt;p&gt;For the most parts, typing &lt;em&gt;useInfiniteQuery&lt;/em&gt; is no different from typing &lt;em&gt;useQuery&lt;/em&gt;. One noticeable gotcha is that the &lt;em&gt;pageParam&lt;/em&gt; value, which is passed to the &lt;em&gt;queryFn&lt;/em&gt;, is typed as &lt;em&gt;any&lt;/em&gt;. Could be improved in the library for sure, but as long as it's &lt;em&gt;any&lt;/em&gt;, it's probably best to explicitly annotate it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GroupResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useInfiniteQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groups&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// ⚠️ explicitly type pageParam to override `any`&lt;/span&gt;
    &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;pageParam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;pageParam&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GroupResponse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetchGroups&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageParam&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;getNextPageParam&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastGroup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;lastGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;em&gt;fetchGroups&lt;/em&gt; returns a &lt;em&gt;GroupResponse&lt;/em&gt;, &lt;em&gt;lastGroup&lt;/em&gt; will have its type nicely inferred, and we can use the same type to annotate &lt;em&gt;pageParam&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#typing-the-default-query-function"&gt;
  &lt;/a&gt;
  Typing the default query function
&lt;/h1&gt;

&lt;p&gt;I am personally not using a &lt;a href="https://react-query.tanstack.com/guides/default-query-function"&gt;defaultQueryFn&lt;/a&gt;, but I know many people are. It's a neat way to leverage the passed &lt;em&gt;queryKey&lt;/em&gt; to directly build your request url. If you inline the function when creating the &lt;em&gt;queryClient&lt;/em&gt;, the type of the passed &lt;em&gt;QueryFunctionContext&lt;/em&gt; will also be inferred for you. TypeScript is just so much better when you inline stuff :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;queryFn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;queryKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This just works, however, &lt;em&gt;url&lt;/em&gt; is inferred to type &lt;em&gt;unknown&lt;/em&gt;, because the whole queryKey is an &lt;em&gt;unknown Array&lt;/em&gt;. At the time of the creation of the queryClient, there is absolutely no guarantee how the queryKeys will be constructed when calling &lt;em&gt;useQuery&lt;/em&gt;, so there is only so much React Query can do. That is just the nature of this highly dynamic feature. It's not a bad thing though because it means you now have to work defensively and narrow the type with runtime checks to work with it, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;queryFn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;queryKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// ✅ narrow the type of url to string so that we can work with it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid QueryKey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think this shows quite well why &lt;em&gt;unknown&lt;/em&gt; is such a great (and underused) type compared to &lt;em&gt;any&lt;/em&gt;. It has become my favourite type lately - but that is subject for another blog post 😊.&lt;/p&gt;




&lt;p&gt;That's it for today. Feel free to reach out to me on &lt;a href="https://twitter.com/tkdodo"&gt;twitter&lt;/a&gt;&lt;br&gt;
if you have any questions, or just leave a comment below ⬇️&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Solution: To Lower Case</title>
      <author>seanpgallivan</author>
      <pubDate>Mon, 24 May 2021 08:08:41 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-to-lower-case-22kh</link>
      <guid>https://dev.to/seanpgallivan/solution-to-lower-case-22kh</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/to-lower-case/discuss/1227317"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-709-easy-to-lower-case"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/to-lower-case/"&gt;Leetcode Problem #709 (&lt;em&gt;Easy&lt;/em&gt;): To Lower Case&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a string &lt;code&gt;s&lt;/code&gt;, return &lt;em&gt;the string after replacing every uppercase letter with the same lowercase letter&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;s = "Hello"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;"hello"&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;s = "here"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;"here"&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;s = "LOVELY"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;"lovely"&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;s&lt;/code&gt; consists of printable ASCII characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The uppercase letters from &lt;strong&gt;'A'&lt;/strong&gt; to &lt;strong&gt;'Z'&lt;/strong&gt; have &lt;strong&gt;ASCCII codes&lt;/strong&gt; between &lt;strong&gt;65&lt;/strong&gt; and &lt;strong&gt;90&lt;/strong&gt;. We can iterate through our input string (&lt;strong&gt;s&lt;/strong&gt;) and as we build up our answer string (&lt;strong&gt;ans&lt;/strong&gt;), if the value (&lt;strong&gt;n&lt;/strong&gt;) of any character lies in that range, we can replace it with the character of value &lt;strong&gt;n + 32&lt;/strong&gt;, which corresponds to the lowercase version of the uppercase letter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;s&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt; excluding the space of the output&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;toLowerCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toLowerCase&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Main Reasons Why SaaS Startups Fail (And How You Can Avoid It)</title>
      <author>Codica</author>
      <pubDate>Mon, 24 May 2021 08:08:24 +0000</pubDate>
      <link>https://dev.to/codicacom/main-reasons-why-saas-startups-fail-and-how-you-can-avoid-it-hjg</link>
      <guid>https://dev.to/codicacom/main-reasons-why-saas-startups-fail-and-how-you-can-avoid-it-hjg</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://www.codica.com/blog/why-saas-startups-fail/"&gt;Codica Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nowadays, the software-as-a-service domain is rocketing due to cost-effectiveness and low entry barrier. As such, more and more entrepreneurs strive to launch their new cloud startups.&lt;/p&gt;

&lt;p&gt;Yet, in fact, very few SaaS startups evolve into successful SaaS companies. Statistics show that 92% of them shut down in 3 years regardless of funding.&lt;/p&gt;

&lt;p&gt;In this article, we have collected key reasons for the cloud startup failures. Also, we will tell how to avoid their fate and build a profitable SaaS venture.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reason-1-lack-of-market-need"&gt;
  &lt;/a&gt;
  Reason 1: Lack of market need
&lt;/h1&gt;

&lt;p&gt;Lack of market interest is one of the top reasons why most SaaS startups fail. CBI Insights reports that about 42% of cloud startups stop operations due to this cause.&lt;/p&gt;

&lt;p&gt;Therefore, before launching a cloud startup, make sure that customers will be interested in your offering. A sure-fire way to test your hypothesis is to &lt;a href="https://www.codica.com/services/mvp-development/"&gt;release an MVP&lt;/a&gt; first.&lt;/p&gt;

&lt;p&gt;Other reasons why startups fail provided by CBI Insights are as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FX0Rp8IQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7vcrvlc4vb8a89binz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FX0Rp8IQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7vcrvlc4vb8a89binz4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have probably heard the proverb that timing is everything. And bad timing can cause an unforeseen decline in market interest.&lt;/p&gt;

&lt;p&gt;That was the reason why Rubica, a company that provided security tools for telecommuting, shut down. The Covid-19 outbreak forced these market segments to tighten the purse strings. This mishap led to the failure of this SaaS startup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lD41JhO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjxsw53n6bxns5x5a7p9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lD41JhO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjxsw53n6bxns5x5a7p9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To avoid their mistake, consider market targeting carefully. &lt;a href="https://blog.hubspot.com/marketing/tam-sam-som"&gt;Hubspot&lt;/a&gt; defines the specific metrics you should keep in mind when assessing your market size.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Total Addressable Market (TAM);&lt;/li&gt;
&lt;li&gt;Serviceable Available Market (SAM);&lt;/li&gt;
&lt;li&gt;Serviceable Obtainable Market (SOM).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j62ZuyY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0g7bicakt3r1c8ujs5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j62ZuyY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0g7bicakt3r1c8ujs5a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reason-2-running-out-of-cash"&gt;
  &lt;/a&gt;
  Reason 2: Running out of cash
&lt;/h1&gt;

&lt;p&gt;Lack of fundings is the second most common reason behind SaaS startup failures. It causes 29% of cloud startups to close down. Usually, it means that entrepreneurs were wrong to define the needed cash flow while startup growing.&lt;/p&gt;

&lt;p&gt;To avoid this issue, you need to plan cash flow in stages. Calculate the sum of money you will need for such crucial milestones:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Progress from seed round funding.&lt;/li&gt;
&lt;li&gt;Beta testing of your cloud product.&lt;/li&gt;
&lt;li&gt;Release to pioneer users.&lt;/li&gt;
&lt;li&gt;Addressing product-market fit issues.&lt;/li&gt;
&lt;li&gt;The business model is approved and starts bringing profit.&lt;/li&gt;
&lt;li&gt;Financing required for further &lt;a href="https://www.codica.com/services/saas-development/"&gt;SaaS product development&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below you can see some small tips to avert a SaaS startup failure :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take into account a churn rate;&lt;/li&gt;
&lt;li&gt;Set aside a fund for your product improvement;&lt;/li&gt;
&lt;li&gt;Don’t overestimate your future revenue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LucidEra is an example of a SaaS startup that couldn't; turn this process well and failed because of it. This company offered visibility solutions for business intelligence. In 2017, they raised the funding of $15.6 million.&lt;/p&gt;

&lt;p&gt;However, when creating a business plan, LucidEra relied on favorable terms caused by economic rise specific for that period. As it turned out, the projections were incorrect. Consequently, they did not have enough money to get another round of funding.&lt;/p&gt;

&lt;p&gt;As we can see, you should avoid unreasonable spending during your SaaS startup scaling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qYSgKjEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1fvqwfr70gsp9sxyrkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qYSgKjEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1fvqwfr70gsp9sxyrkc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reason-3-management-issues"&gt;
  &lt;/a&gt;
  Reason 3: Management issues
&lt;/h1&gt;

&lt;p&gt;You might be surprised at how many SaaS startups shut down because of poor management. For 23% of cloud startups, team issues led to disastrous consequences.&lt;/p&gt;

&lt;p&gt;What do we mean by management issues? They include insufficient market research, wrong customer acquisition techniques, and growth strategies. The biggest mistake here is failure to define the right direction for your business.&lt;/p&gt;

&lt;p&gt;Along with the issues we have just mentioned, unclear leadership is another reason. Thus, co-owners need to share common views on &lt;a href="https://www.codica.com/services/saas-development/"&gt;SaaS product development&lt;/a&gt;. Likewise, they should define their areas of operation to manage.&lt;/p&gt;

&lt;p&gt;Finally, managers should cultivate a sense of togetherness. &lt;a href="https://hbr.org/2019/03/what-makes-a-successful-startup-team"&gt;Harvard Business Review&lt;/a&gt; found that teams with high levels of expertise and average to low levels of engagement were overall weaker.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reason-4-wrong-business-model"&gt;
  &lt;/a&gt;
  Reason 4: Wrong business model
&lt;/h1&gt;

&lt;p&gt;SaaS startups often make a huge mistake when ignoring the churn rate and other costs associated with customer retention. Normally, they are much higher than they seem at first sight.&lt;/p&gt;

&lt;p&gt;However, startups tend to ignore them when choosing the &lt;a href="https://www.codica.com/blog/saas-pricing/"&gt;SaaS pricing model&lt;/a&gt;. This wrong choice leads to SaaS startup failures.&lt;/p&gt;

&lt;p&gt;Below you can see two crucial SaaS startup metrics that will help you choose the proper business model.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CAC (customer acquisition cost);&lt;/li&gt;
&lt;li&gt;LTV (customer lifetime value).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oTnex7d7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7sae6fj58vyu7cj3t2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oTnex7d7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7sae6fj58vyu7cj3t2r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;APRU is the average monthly revenue per user/customer. At the same time, we use the term churn rate to define the number of users who gave up your SaaS product in a given month.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUIYMrfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwyood7l2fn2p2lmcze3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUIYMrfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwyood7l2fn2p2lmcze3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep your CAC lower than LTV. In simple terms, spend less money on customer acquisition compared to the revenue you get from users.&lt;/p&gt;

&lt;p&gt;Let’s take a look at wide-range pricing structures that will help you boost your business model:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One-time pricing;&lt;/li&gt;
&lt;li&gt;Feature-based pricing;&lt;/li&gt;
&lt;li&gt;Tiered pricing;&lt;/li&gt;
&lt;li&gt;Volume pricing;&lt;/li&gt;
&lt;li&gt;Hybrid pricing combinations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reason-5-issues-with-the-product"&gt;
  &lt;/a&gt;
  Reason 5: Issues with the product
&lt;/h1&gt;

&lt;p&gt;The last but not least reason why SaaS startups fail is a problem with the product itself. According to CB Insights, a startup failure rate due to being out-competed reaches 19%.&lt;/p&gt;

&lt;p&gt;Usually, it means that the solution you offer is far from user-friendly and quickly over-competed by your market rivals. For this reason, your SaaS application design should never be neglected. Especially when it comes to an innovative product.&lt;/p&gt;

&lt;p&gt;Importantly, you should keep in touch with your customers constantly. For example, surveys, phone calls, and interviews will help you define your product's flaws in time. Also, focus on quick bug fixing, customer support, and straightforward billing. Otherwise, you risk being left out in the cold if you don't take your audience's wishes seriously.&lt;/p&gt;

&lt;p&gt;Atrium was a SaaS startup that had to stop operations due to poor product idea realization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jY9GpzjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awpcm9lqfwtqrreazotg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jY9GpzjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awpcm9lqfwtqrreazotg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This company provided software for firms to arrange fundraising and legal team support. Yet, Atrium wasn’t able to replace a traditional law system in the SaaS space due to regulatory boundaries. So, in 2020 it shut down its operations having paid back $75.5 million to its investors.&lt;/p&gt;

&lt;p&gt;Thus, even if it seems that your SaaS startup is already doing well, you should keep your finger on the pulse and track your product’s viability.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h1&gt;

&lt;p&gt;Now you know what mistakes you should be aware of to keep your SaaS product up and running. With the tips provided in this article, you will avoid the unfortunate fate of the startups mentioned above.&lt;/p&gt;

&lt;p&gt;For more details about the reasons behind SaaS startup failures, check our full article: &lt;a href="https://www.codica.com/blog/why-saas-startups-fail/"&gt;Why SaaS Startups Fail: Most Common Reasons and How to Prevent Them&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>saas</category>
      <category>startup</category>
      <category>software</category>
      <category>cloudservice</category>
    </item>
    <item>
      <title>AWS open source news and updates #69</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 24 May 2021 07:15:36 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-69-50bf</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-69-50bf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#may-24th-2021-instalment-69"&gt;
  &lt;/a&gt;
  May 24th, 2021 - Instalment #69
&lt;/h2&gt;

&lt;p&gt;Newsletter #69. &lt;/p&gt;

&lt;p&gt;This week we celebrate more new open source projects, covering tools that can help you lock down and monitor your IAM policies, reference solutions that make it easy to deploy a number of open source projects, and a great tool to help you monitor/debug your serverless functions. On top of that the usual round up of community and AWS blog posts, featuring lots of updates on Kubernetes, performance tuning HTTP on EC2, LLVM, Apache Kafka, Triton inference, the next version of Cloudformation guard, Bottlerocket, AWS Graviton2, Tensorflow and more. What are you waiting for, dive straight in...but first :) &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please help me improve this newsletter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Really would love to hear from you to know how I can make this newsletter better - what do you like, what should we do more of and most importantly what do you dislike too.&lt;/p&gt;

&lt;p&gt;The first 20 will get an AWS credit voucher for $25 - you will get a link to the code, so make sure you don't miss that as once they are gone they are gone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eventbox.dev/survey/LR71YHM"&gt;Take me to the survey!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many thanks!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Job of the Week&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/jc"&gt;Senior Developer Advocate - OpenSearch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are you passionate about building, promoting and supporting an inclusive and growing open source community? Do you want to have direct and immediate impact on a large number of open source and AWS users? Do you want to be part of a fast-growing AWS service and work in a fast paced startup style environment?&lt;/p&gt;

&lt;p&gt;We are looking for a Senior Developer Advocate to help us build a great and inclusive community for OpenSearch - an open source search and analytics suite derived from Apache 2.0 licensed Elasticsearch 7.10.2 &amp;amp; Kibana 7.10.2. This role will help us make OpenSearch the de facto choice for users that previously had relied upon open source Elasticsearch. As a Senior Developer Advocate, you will play a central role in helping us building a vibrant community of users and contributors.&lt;/p&gt;

&lt;p&gt;Read more by clicking on the job description above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Gary Stafford, Sofian Hamiti, Olajide Enigbokan, Lorenz Vanthillo, Ian McKay, Hassan Tahhan, Sofian Hamiti, Stephen Siegert, Carl Chenet, Marc Richards, Re Alvarez-Parmar, Jimmy Hayes, Santosh Bhavani, Vamshidhar Dantu, Eddie Zaneski, Nikhil Swaminathan, Matteo Rinaudo, Vijoy Choyi, Josef Viehhauser, Vu Dao and Nelson Elhage.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;iamlive-lambda-extension&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/iy"&gt;iamlive-lambda-extension&lt;/a&gt; AWS Hero Ian McKay provides an extention to the iamlive project, offering a Lambda Extension that helps generate a least-privilege IAM policy by monitoring the AWS calls made within the Lambda execution environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iamcanary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/iz"&gt;iamcanary&lt;/a&gt; Hassan Tahhan with a tool that helps detect IAM access misconfigurations in your AWS account using periodic dry runs. This open source project can help you answer questions such as: Do you need to deploy a canary test into your AWS account to be notified when certain IAM actions do not succeed? Are you concerned about sudden changes to IAM permission boundaries impacting your workloads? Do you need to detect IAM access misconfigurations not in your control such as overly restrictive AWS Organisations Service Control Policies (SCPs)? If the answer to any of these is yes, then check this project out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk-watch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/j0"&gt;cdk-watch&lt;/a&gt; this is a CLI to watch and live-update your CDK Stack's Lambdas, which means you can get real-time logs over web-sockets to make the development feedback-loop faster when debugging your lambdas. An image is worth a hundred words, so check this out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/26e4a63a3f4db93c99e443c7e4dfde5f24fb6fff7c3b7d51d7583cfde9ad02aa/68747470733a2f2f63646b2d77617463682d7374617469632e73332e65752d776573742d322e616d617a6f6e6177732e636f6d2f64656d6f2e676966" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/26e4a63a3f4db93c99e443c7e4dfde5f24fb6fff7c3b7d51d7583cfde9ad02aa/68747470733a2f2f63646b2d77617463682d7374617469632e73332e65752d776573742d322e616d617a6f6e6177732e636f6d2f64656d6f2e676966" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;digital-pathology-on-aws&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/je"&gt;digital-pathology-on-aws&lt;/a&gt; OMERO (Open Microscopy Environment Remote Objects) is a well known open source solution, a collaboration between academia and commercial business, to digitise microscopy images. This repo contains everything you need to get this up and running within your AWS account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jMMnBFJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/digital-pathology-on-aws/blob/main/Figures/omero-on-aws-ha.jpg%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jMMnBFJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/digital-pathology-on-aws/blob/main/Figures/omero-on-aws-ha.jpg%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-orbit-workbench&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hy"&gt;aws-orbit-workbench&lt;/a&gt; [Orbit Workbench] is a new open source framework for building team-based secured data environment, that is built on Kubernetes using Amazon Managed Kubernetes Service (EKS), and provides both a command line tool for rapid deployment as well as Python SDK, Jupyter Plugins and more to accelerate data analysis and ML by integration with AWS analytics services such as Amazon Redshift, Amazon Athena, Amazon EMR, Amazon SageMaker and more. Lots of documentation to help you get started, if you work with data then make sure you check this project out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7pykKotY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/wiki/awslabs/aws-orbit-workbench/Orbit-WorkBench-Arch.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pykKotY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/wiki/awslabs/aws-orbit-workbench/Orbit-WorkBench-Arch.svg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;LLVM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;LLVM is an open source toolchain that helps make it easier to develop new programming languages or enhance existing ones and has been extensively used in the development of languages such as Swift, Rust and Kotlin. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/jh"&gt;Building LLVM in 90 seconds using Amazon Lambda&lt;/a&gt; Nelson Elhage provides a super post on how you can use Llama so you can run and scale compilation jobs using AWS Lambda, making it easier to compile C or C++ code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TensorFlow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/j1"&gt;Automating the Setup of SageMaker Studio Custom Images&lt;/a&gt; this post from Sofian Hamiti walks you through the process of creating your own custom container images, in this instance one that has TensorFlow 2.5, and then using a CI/CD pipeline to build and then publish this so you can then use it within the Amazon SageMaker Studio. I am currently playing around in SageMaker Studio as part of a review for Julien Simon's 2nd edition &lt;a href="https://aws-oss.beachgeek.co.uk/j2"&gt;Learn Amazon SageMaker book&lt;/a&gt; so was able to have a play around with this. The only clarification for those going through this walkthrough is that when you are asked for the ImageRoleArn, use your Amazon Studio's Execution role arn (that is what I used when I followed this post, and it worked for me)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Triton&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Triton Inference Server is an open source cloud and edge inferencing project from Nvidia that is optimised for both CPUs and GPUs. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/jk"&gt;Deploying an Nvidia Triton Inference Server on Amazon ECS&lt;/a&gt;, Sofian Hamiti shows you how you can use AWS CDK to deploy this on Amazon ECS containers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FastAPI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/j3"&gt;Deploying a FastAPI backend using AWS Amplify Container-based REST APIs&lt;/a&gt; Stephen Siegert with a great walkthrough on how to get FastAPI, a framework for setting up APIs for data science and analytics-based workloads, up and running with AWS Amplify in ...well, very Fast indeed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mailtrain&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mailtrain is a self hosted newsletter application built on Node.js (v14+) and MySQL (v8+) or MariaDB (v10+). In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/j4"&gt;How to save up to 500€/year switching from Mailchimp to Open Source Mailtrain and AWS SES&lt;/a&gt; Carl Chenet walks you through how you can reduce your costs by self hosting your newsletter subscribers using this open source project and running it on AWS and using some services such as Amazon Simple Email Service. I had not heard about Mailtrain before, and it looks super nice and feature rich so will be taking a closer look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kakfa / Spring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/jl"&gt;Eventual Consistency with Spring for Apache Kafka&lt;/a&gt; another great post from Gary Stafford, the first of two parts, where he takes you on journey to understand how you can ensure you maintain data consistency in distributed systems that are made up of many microservices. As you might expect from the title, Apache Kakfa holds the key. So get comfortable, grab something to drink and read on to find out more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--luLGU7OW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AUpyRPNG_WkV7UnrD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--luLGU7OW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AUpyRPNG_WkV7UnrD.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tuning HTTP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have been reading this newsletter for any amount of time you will know I enjoy a good performance tuning/benchmarking post, and this week we have a real treat. Marc Richards has put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/j5"&gt;Extreme HTTP Performance Tuning: 1.2M API req/s on a 4 vCPU EC2 Instance&lt;/a&gt; showing how you can really squeeze every last bit of performance from HTTP running on an EC2 instance, iterating through a number of techniques which each time push the performance bar higher. Really compelling read this one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d1LVSVgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://talawah.io/blog/extreme-http-performance-tuning-one-point-two-million/libreactor-dhcp-fg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d1LVSVgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://talawah.io/blog/extreme-http-performance-tuning-one-point-two-million/libreactor-dhcp-fg.png" alt="graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Chalice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Chalice is an open source framework for writing serverless apps in python that allows you to quickly create and deploy applications that use AWS Lambda. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/jf"&gt;CI/CD For CDN Invalidation Using AWS Lambda Function And Gitlab Pipeline&lt;/a&gt; Vu Dao shows you how you can use this framework and address how you can clear edge stored copies of your static assets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of posts this week. First up we have &lt;a href="https://aws-oss.beachgeek.co.uk/ji"&gt;Build Serverless Applications using CDK and SAM&lt;/a&gt;, this post is the perfect read given the recent new a few weeks ago that it is now easier to use AWS CDK and SAM together as you build your serverless applications. AWS Community Builder Lorenz Vanthillo shows you how this look by providing a nice simple walkthrough.&lt;/p&gt;

&lt;p&gt;Then we have &lt;a href="https://aws-oss.beachgeek.co.uk/jm"&gt;AWS CDK for EKS — Handling Helm Charts&lt;/a&gt; from Jimmy Ray, with a post showing you how you can use AWS CDK with Amazon EKS to deploy applications packaged as Helm charts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-amazon-open-source-posts"&gt;
  &lt;/a&gt;
  AWS and Amazon open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bottlerocket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/jb"&gt;Getting started with Bottlerocket on AWS Graviton2&lt;/a&gt; Vijoy Choyi brings together two technologies, Bottlerocket and AWS Graviton2, and spins up some Kubernetes clusters running the Bottlerocket OS hosted on Graviton2 based worker nodes. Why might you be interested in doing something similar? Aside from the security benefits brought by Bottlerocket, many customers are finding a better price/performance optic when running on Arm based instances that AWS Graviton2 provides.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzj3GJqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/28/vijoy_Getting-Started-Bottlerocket_f1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzj3GJqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/28/vijoy_Getting-Started-Bottlerocket_f1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Big news last week as the Containers team announced the availability of Kubernetes 1.20 in Amazon EKS. Eddie Zaneski dives deeper into this announcement in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/j8"&gt;Amazon EKS 1.20 Released&lt;/a&gt; taking a look at the main features of this release, changes you should be aware of, specifics to Amazon EKS and a few things to consider as you ponder migrating from 1.19.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Big news last week for folks who love to use AWS Amplify to host their websites with the announcement of now supporting server-side rendering (SSR) apps built with the Next.js framework. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/j9"&gt;Host a Next.js SSR app with real-time data on AWS Amplify&lt;/a&gt; Nikhil Swaminathan walks you through an example so you can see how simple this is, with very little configuration for you to do and plenty of flexibility. Nikhil provides some additional resources to get you going.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amplify&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/jj"&gt;Restoring AWS Amplify project after deleting it from the cloud&lt;/a&gt; Olajide Enigbokan put together a nice guide to help you if you ever find yourself needing to recover from deleting your Amplify projects. Covering what is and is not recovered to how to actually do this, essential reading for those of you who use and love AWS Amplify.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CloudFormation Guard 2.0&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS CloudFormation Guard is an open-source general-purpose policy-as-code evaluation tool. It provides developers with a simple-to-use, yet powerful and expressive domain-specific language (DSL) to define policies and enables developers to validate JSON- or YAML- formatted structured data with those policies. Announced last week, the Guard 2.0 release is a complete re-write to make the tool general-purpose. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/ja"&gt;Introducing AWS CloudFormation Guard 2.0&lt;/a&gt; Matteo Rinaudo covers some of those changes, and walks you through some examples of the new features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CVMu6_pt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/images/guard-demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CVMu6_pt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/images/guard-demo.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AutoGluon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/jg"&gt;AWS releases code to help reduce bias in machine learning models&lt;/a&gt; Valerio Perrone and Michele Donini present details of a new paper demonstrating how to help mitigate bias via tuning a models hyper-parameters. You can find more details including a link to the research paper and code samples and tutorials in this post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k-EtsJKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.amazon.science/dims4/default/5bb5921/2147483647/strip/true/crop/2424x890%2B0%2B0/resize/1200x441%21/quality/90/%3Furl%3Dhttp%253A%252F%252Famazon-topics-brightspot.s3.amazonaws.com%252Fscience%252F0c%252F1c%252F3178f4e74280b842c10e813e0d28%252Fbo-vs-cbo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k-EtsJKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.amazon.science/dims4/default/5bb5921/2147483647/strip/true/crop/2424x890%2B0%2B0/resize/1200x441%21/quality/90/%3Furl%3Dhttp%253A%252F%252Famazon-topics-brightspot.s3.amazonaws.com%252Fscience%252F0c%252F1c%252F3178f4e74280b842c10e813e0d28%252Fbo-vs-cbo.png" alt="bias"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;YOLO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;YOLO (You Only Look Once) is part of the DL single-stage object detection model family, which includes models such as Single Shot Detector (SSD) and RetinaNet. Santosh Bhavani and Vamshidhar Dantu help open your eyes on how you can use Neo to improve the performance of image classification in their post, &lt;a href="https://aws-oss.beachgeek.co.uk/j7"&gt;Speed up YOLOv4 inference to twice as fast on Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wordpress&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We all remember our first website, and after a brief reminis of days gone by, Re Alvarez-Parmar and Jimmy Hayes take time to write about how many people now start creating their websites on the web - via Wordpress. In, &lt;a href="https://aws-oss.beachgeek.co.uk/j6"&gt;Running WordPress on Amazon ECS on AWS Fargate with Amazon EFS&lt;/a&gt; they apply modern cloud approaches to build a scalable and robust architecture that ensures Wordpress can serve the next generation of creators. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tu5yTb5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/05/20/image-2021-05-20T153609.196.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tu5yTb5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/05/20/image-2021-05-20T153609.196.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are a java developer and use Spring on AWS, make sure you read the announcement last week, &lt;a href="https://aws-oss.beachgeek.co.uk/jd"&gt;Spring Integration for AWS 2.5 went GA last week.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes - 1.20&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EKS and EKS Distro now support Kubernetes version 1.20. Highlights of the Kubernetes 1.20 release include RuntimeClass and Process ID Limits reaching stable status, API Priority and Fairness being enabled by default, and kubectl debug reaching beta status.&lt;/p&gt;

&lt;p&gt;Amazon EKS provides support for at least 4 Kubernetes versions at any given time. Kubernetes 1.16, 1.17, 1.18, 1.19, and 1.20 are all fully supported by EKS today, and new clusters can be started using any of these releases. However, given the Kubernetes quarterly release cycle, it is critical for all customers to have an ongoing upgrade plan.&lt;/p&gt;

&lt;p&gt;Kubernetes version 1.16 will no longer be supported on July 25th, 2021. On this day, you will no longer be able to create new 1.16 clusters and all existing EKS clusters running Kubernetes version 1.16 will eventually be updated to the latest available platform version of Kubernetes version 1.17.&lt;/p&gt;

&lt;p&gt;We recommend customers upgrade existing 1.16 clusters and worker nodes to at least 1.17 as soon as practical.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes - CoreDNS and kube-proxy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EKS now supports using the Amazon EKS console, CLI, and API to install and manage CoreDNS and kube-proxy in addition to existing support for the Amazon VPC CNI networking plugin. This makes it easier to define consistent Kubernetes clusters and keep them up to date using Amazon EKS.&lt;/p&gt;

&lt;p&gt;CoreDNS and kube-proxy provide critical networking functionality for Kubernetes applications. Now, these operational software components, “add-ons”, can be installed, managed, and updated directly through the EKS console, CLI, and API. Each add-on is validated by AWS and can be deployed and updated during cluster setup or at any time. You can see available add-ons and compatible versions in the EKS API, select the version of the add-on you want to run on your cluster, and configure key settings such as the IAM role used by the add-on when it runs. Using EKS add-ons you can go from cluster creation to running applications in a single command and keep your cluster up to date using the Amazon EKS console, CLI, or API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Copilot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today, AWS Copilot announced the general availability of version 1.7, which enables you to easily deploy request-driven web services with AWS App Runner in addition to Amazon Elastic Container Service (Amazon ECS). AWS App Runner is a fully managed container application service that makes it easy for customers without any prior containers or infrastructure experience to build, deploy, and run containerised web applications and APIs in just a few clicks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The AWS Toolkit for VS Code is an open-source plugin that lets you leverage the integrated development environment (IDE) for the creation, debugging, and deployment of software applications on Amazon Web Services. The AWS Toolkit extension shows resources in your AWS account through the AWS Explorer view. This interface option enables you to interact with an array of AWS services to carry out tasks such as viewing S3 resources, opening CloudWatch logs, and invoking Lambda functions.&lt;/p&gt;

&lt;p&gt;With this update to the AWS Toolkit for VS Code, customers can now create, locally debug, and deploy Lambda functions written in Java and Go. Java users will be able to step-through debug Lambdas built with Maven and Gradle in Java 8, Java 8.al2, and Java 11, while Go users will be able to do the same with Lambdas built in Golang 1.14+.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#videos-of-the-week"&gt;
  &lt;/a&gt;
  Videos of the week
&lt;/h3&gt;

&lt;p&gt;First up, very happy to see the folks at BMW talking about their open source plans for their Autonomous Driving Data Lake architecture. Check out the whole video as it is an very interesting sector, but if you just want to check out the BMW story and hear Josef Viehhauser dive deep into this topic, skip forward to 9min.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2Cr2EYp8WgM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;AWS Community Builder Luc van Donkersgoed, put together this video exploring how AWS CDK brings infrastructure-as-code closer to DevOps engineers, covering three segments: the power of a multi-language framework, the benefits of applying unit testing to your infrastructure and applying the time-proven concepts of object oriented design and DRY to your infrastructure-as-code.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tiyjhWTSExg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;Several events for you this week...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Run Your First HPC Job on AWS&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 25th, 8:00PM CET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this online webinar you will learn how to set up your first HPC cluster on AWS. We'll cover everything from installing AWS ParallelCluster (and open source cluster management tool to deploy and manage HPC clusters in the AWS cloud), selecting the your Amazon EC2 instances, when to use Spot Instances to save up to 90% on compute, to launching your first MPI “hello world” job from the command line.&lt;/p&gt;

&lt;p&gt;Find out more and register by clicking over &lt;a href="https://aws-oss.beachgeek.co.uk/io"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mobile and Front-End Live&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 25th, 9:00 - 15:00 PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a LIVE streamed event on Twitch  focused on accelerating full-stack mobile and web development. Learn about AWS Amplify, a set of purpose-built tools and services for front-end web and mobile developers that simplify app development. Deep dive into GraphQL and AWS AppSync, a fully-managed GraphQL service that improves app performance and developer productivity.&lt;/p&gt;

&lt;p&gt;You can read more about what you can expect in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/f4"&gt;Mobile and Front-End Live, May 25&lt;/a&gt; and &lt;a href="https://aws-oss.beachgeek.co.uk/f3"&gt;register via this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch: The open source successor of Elasticsearc&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 27th, 9am EST/3pm CET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join Dotan Horovits and Kyle Davis for this fireside chat talking about the recent beta of OpenSearch, the community and what lies ahead.&lt;/p&gt;

&lt;p&gt;Streamed &lt;a href="https://www.youtube.com/watch?v=UDvWdTeH5V4"&gt;via YouTube here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;23rd September, Bern Switzerland&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is this, an in person event returning? A stellar line up including our own Michael Hausenblas, an event looking at CNCF projects and the future of IT. Find out more and to view prices/register, by clicking &lt;a href="https://cloudnativeday.ch/en/#speakers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Should Young Kids Learn How to Code?</title>
      <author>Shreiya Aggarwal</author>
      <pubDate>Mon, 24 May 2021 07:11:39 +0000</pubDate>
      <link>https://dev.to/shreiya/should-young-kids-learn-how-to-code-3m44</link>
      <guid>https://dev.to/shreiya/should-young-kids-learn-how-to-code-3m44</guid>
      <description>&lt;p&gt;"Everybody should learn to program a computer, because it teaches you how to think," said Steve Jobs in 1995.&lt;/p&gt;

&lt;p&gt;Well, he was in the computer business and he wanted to sell his Macs after all.&lt;/p&gt;

&lt;p&gt;Yes, you techy geeks will remind me he was at the helm of NeXT at the time, but he was already planning to move back to Apple. And incidentally, NeXT was all about using OOP as the basis for OSes, and went on to become the mainstay of Mac OS.&lt;/p&gt;

&lt;p&gt;So now that we have that out of the way, the real question is: should we make our children take coding classes in their early years while they're still learning how to sharpen their pencils or pedal a bike?&lt;/p&gt;

&lt;p&gt;Maybe. But not for the reasons that Steve Jobs or &lt;a href="https://timesofindia.indiatimes.com/blogs/the-blooming-mind/nation-of-education-the-growth-of-startup-fuelled-education-in-india/"&gt;present-day online coding class peddlers&lt;/a&gt; would have you believe.&lt;/p&gt;

&lt;p&gt;While the internet is awash with mommy bloggers writing articles like "X Reasons Why Learning to Code Will Turn Your Dumbass Child into a Genius" for a few dollars of affiliate income, let me help you revisit the much-debated question – in my "expert with experience" capacity as an early education specialist, computer science engineering graduate, blogger, and most important of all, mommy.&lt;/p&gt;

&lt;p&gt;First, some myths propagated online about why kids should learn programming along with walking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth: Coding Fosters Creativity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Really? Like, Leonardo da Vinci, Thomas Edison and Walt Disney were all a bit slow in the head, weren't they, because they didn't have a Commodore 64 in their basements? While we won't get into the genetics vs. environment argument here, creativity in humans existed well before coding was a thing. In fact, all software is a direct result of human creativity.&lt;/p&gt;

&lt;p&gt;In fact, programming practices "box" kids' thinking into "modules" and limits their capabilities to functions and libraries available within the programming stack; it constricts their thinking into logic-bound steps. Papers, pencils, balloons, slime and some &lt;a href="https://kidpillar.com/51-outdoor-stem-activities-for-kids/"&gt;cool outdoor activities&lt;/a&gt; can do far more to cultivate creativity in young children than coding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth: Coding Improves Communication Skills&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yeah. Like, developers are the most articulate, understanding and empathetic people ever. If you're a developer (or a project manager), I know you're laughing out loud right now. Hey, devs don't even comment their code for other devs. You think they care two hoots about communication and collaboration? The only time they're good at communicating is when they're writing assembly.&lt;/p&gt;

&lt;p&gt;"I'll commit the requested changes by EOD," said no eight-year-old.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth: Coding Boosts Academic Performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many parents and teachers seem to think learning to code will help kids learn math faster. It's actually the other way round. Arithmetic and algebra form the basis of algorithms, coding and logical thinking itself, so make sure kids get their addition, multiplication, fractions and equations right before they try defining a variable.&lt;/p&gt;

&lt;p&gt;Others say like learning to code is like learning a new language. Excuse me? By conforming to syntax and using constructs like if, else and endif? What's your everyday equivalent of ENDIF? And of course, parentheses, curly braces, spaces and tabs have a special place in the grammar of programming languages.&lt;/p&gt;

&lt;p&gt;And oh, a special word for those of you who claim the future will be full of coding jobs! How much of the things you learned in school, college or university do you still use today at work? That medieval history class you took in 8th grade is helping you develop a new COVID vaccine, isn't it? In the same way, Python and Swift will be obsolete and long gone by the time your kids grow up.&lt;/p&gt;

&lt;p&gt;By now, you're wondering if there are any reasons at all why kids should even go near a laptop, aren't you? Of course, there are! I wrote an article about it on my own blog –&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kidpillar.com/coding-for-kids/"&gt;The Complete Guide to Coding for Kids&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, before your shock turns to anger and you dismiss me as a hypocrite, I want to walk you through some &lt;em&gt;real&lt;/em&gt; reasons how kids can gain a life skill or two by tinkering with computer software.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Truth: Coding is Integral to Modern, STEM-Based Education&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;STEM education isn't just about science, technology, engineering and mathematics. It is a whole new approach to learning that &lt;a href="https://kidpillar.com/traditional-education-vs-stem-learning/"&gt;overcomes the limits of traditional schooling&lt;/a&gt;. STEM is an integrated and student-centric approach to discovery of facts, integrated study of various subjects, application of knowledge and learning by doing. The premise and process of coding are closely aligned with this new and intuitive method of learning.&lt;/p&gt;

&lt;p&gt;Which is why Andreas Schleicher, Director of Education and Skills at the Organization for Economic Cooperation and Development (OECD), denounced teaching kids to code as "&lt;a href="https://www.telegraph.co.uk/education/2019/02/21/teaching-children-coding-waste-time-oecd-chief-says/"&gt;a waste of time&lt;/a&gt;" at the World Innovation Summit for Education in Paris. In the same breath, he emphasized that teaching kids computational thinking – or how computers solve problems – is the way to go. Which brings us to…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Truth: Coding Aids Problem Solving Skills&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Computational thinking is basically &lt;a href="https://kidpillar.com/how-to-teach-problem-solving-to-your-kids-5-8-years/"&gt;solving large problems&lt;/a&gt; by breaking them down into smaller, more manageable problems, and solving those first. This is what today's information-overloaded kids need to learn while a million things are vying for their attention at any given time. Coding helps kids develop patience and persistence, look for alternative solutions in different places, and ask for help when necessary (OK, Google).&lt;/p&gt;

&lt;p&gt;Moreover, coding boosts kids' &lt;a href="https://kidpillar.com/games-kids-think-critically-critical-thinking/"&gt;critical thinking abilities&lt;/a&gt; – if you're the kind of parent who'd like them to know how the TV, fridge or even grandpa's piano works, you certainly want them to tinker with the software that's likely to power every appliance we use in the future. That's far more practically relevant and useful than knowing the names of all the rivers in your country or memorizing the events that led to peasants and nobles killing each other in strange, foreign lands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Truth: Coding is Fun&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"What will make kids successful in this tech-driven world is whether they can think – creatively, innovatively, and expansively – and that is accomplished through free, unstructured play," says Jim Taylor, PhD, author of &lt;em&gt;Raising Generation Tech: Preparing Your Child for a Media-Fueled World&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;While time spent coding is an opportunity cost for interacting with other kids, &lt;a href="https://kidpillar.com/gardening-for-kids/"&gt;gardening&lt;/a&gt;, &lt;a href="https://kidpillar.com/10-family-books-read-together/"&gt;reading&lt;/a&gt; or &lt;a href="https://kidpillar.com/seriously-silly-jokes-for-kids/"&gt;telling silly jokes&lt;/a&gt;, children can learn the concepts of coding without even a computer, as I explain in my &lt;a href="https://kidpillar.com/coding-for-kids/"&gt;ultimate guide to coding for kids&lt;/a&gt;. Because hey, which kid doesn't like playing racing games on dad's smartphone, emptying out muffin trays, drawing three little pigs in their mathematics notebook or walking blindfolded through bubble wrap? &lt;/p&gt;

</description>
      <category>codingkids</category>
      <category>kidscoding</category>
    </item>
    <item>
      <title>🐧 Linux Commands - A Complete Handbook 💻</title>
      <author>Kaiwalya Koparkar</author>
      <pubDate>Mon, 24 May 2021 06:55:20 +0000</pubDate>
      <link>https://dev.to/kaiwalyakoparkar/linux-commands-a-complete-handbook-1a7b</link>
      <guid>https://dev.to/kaiwalyakoparkar/linux-commands-a-complete-handbook-1a7b</guid>
      <description>&lt;p&gt;Hello folks,&lt;br&gt;
You might be working on GUI based interfaces to do your daily tasks. But do you know that you can do the same and some advance tasks just using the terminal but more efficiently. Also having a deep understanding of the terminal commands comes handy when you want to be more productive and fast. Terminal commands can do more than just installing the softwares on your Linux distro. In this blog I have share commands which you should definitely try and use in you daily life. I guarantee you that you will feel the power of terminal commands after you use them couple of times. &lt;/p&gt;

&lt;p&gt;Without wasting anymore time let's jump into it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;cd directory_name&lt;/code&gt; ==&amp;gt; Changes the path to directory_name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cd ..&lt;/code&gt; ==&amp;gt; Go back to previous directory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cd&lt;/code&gt; or &lt;code&gt;cd ~&lt;/code&gt; ==&amp;gt; Go back to root directory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mkdir directory_name&lt;/code&gt; ==&amp;gt; Makes a new directory at that location&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rmdir directory_name&lt;/code&gt; ==&amp;gt; This will delete the directory (Cannot be undone)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ls&lt;/code&gt; ==&amp;gt; Lists all the directories in the location&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;touch file_name&lt;/code&gt; ==&amp;gt; Creats a file of file_name (File extension is compulsary)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;echo random_text&lt;/code&gt; ==&amp;gt; Will print random_text on the terminal screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;echo random_text &amp;gt; file_name&lt;/code&gt; ==&amp;gt; It will put the random_text into the file_name instead of printing on the terminal screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;man command_name&lt;/code&gt; ==&amp;gt; This will display all the information about the specific terminal command_name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;help&lt;/code&gt; ==&amp;gt; This will help you by providing some comman commands if you are unable to recall them&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;history&lt;/code&gt; ==&amp;gt; Shows all the history of your commands&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ps&lt;/code&gt; ==&amp;gt; This will show all the processes running on you machine&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pwd&lt;/code&gt; ==&amp;gt; This will show your current path in terminal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cat file_name&lt;/code&gt; ==&amp;gt; Prints all the content in the given file_name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cp file_name location&lt;/code&gt; ==&amp;gt; This will copy the file at the specific location&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cp file_name copyed_file_name&lt;/code&gt; ==&amp;gt; This makes the copy of the file_name with name as copyed_file_name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mv file_name location&lt;/code&gt; ==&amp;gt; This will move the file_name to the given location.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mv file_name new_file_name&lt;/code&gt; ==&amp;gt; This will rename the file_name to new_file_name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rm -rf directory_name&lt;/code&gt; ==&amp;gt; This will recursively(-r) and forcefully (-f) will delete the directory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find .&lt;/code&gt; ==&amp;gt; Finds everything in the directory.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find directory_name/&lt;/code&gt; ==&amp;gt; Finds everything in the given directory_name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find directory_name -type d&lt;/code&gt; ==&amp;gt; Finds only directory in the directory_name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find directory_name -type f&lt;/code&gt; ==&amp;gt; Finds only file_name in the directory_name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find . -type f -name "file_name"&lt;/code&gt; ==&amp;gt; Finds everything with type file and name as file_name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find . -type f -name "*.txt"&lt;/code&gt; ==&amp;gt; Finds everything with type file and whatever has extention as .txt&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find . -empty&lt;/code&gt; ==&amp;gt; Finds all the directories and files that are empty&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;clear&lt;/code&gt; ==&amp;gt; clears the terminal screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep "random_text" file_name&lt;/code&gt; ==&amp;gt; Finds the random_text in the file_name only if the exact word is found (it is case sensitive as well)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep "random_text" file_name -w&lt;/code&gt; ==&amp;gt; Finds the random_text in the file_name only prints if random_text is found as a whole word(-w)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep "random_text" file_name -i&lt;/code&gt; ==&amp;gt; Finds the random_text in the file_name and prints regardless of the case sensitiveness. It doesn't mind the case sensitiveness if (-i) is added&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep "random_text" file_name -n&lt;/code&gt; ==&amp;gt; Finds the random_text in the file_name and prints the the line number (-n) as well.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep "random_text" -win ./*.txt&lt;/code&gt; ==&amp;gt; Finds the random text in all the text (.txt) files in the directory and ensure that the word found is whole word (-w), regardless of case sensitiveness (-i), and with line number (-n)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;diff file_1 file_2&lt;/code&gt; ==&amp;gt; Shows the difference in two files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ping www.example_website.com&lt;/code&gt; ==&amp;gt; This will show your internet speed for recieving the pacakages.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;curl www.example_website.com&lt;/code&gt; ==&amp;gt; This will show the html of that example_website&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;top&lt;/code&gt; ==&amp;gt; This will show cpu usage, memory usage etc at current time&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nslookup -type=type service_name&lt;/code&gt; ==&amp;gt; Change the type of the information query&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nslookup -debug example_website&lt;/code&gt; ==&amp;gt; used to find the IP address that corresponds to a host, or the domain name that corresponds to an IP address.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;curl -O pdf_url_on_internet&lt;/code&gt; ==&amp;gt; It downloads the media from the url to the location&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  ❤️ Thank you for reading ❤️
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;🌏 Like | Follow | Share 🌏&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>computerscience</category>
      <category>todayilearned</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Python loops explained</title>
      <author>Chris Bongers</author>
      <pubDate>Mon, 24 May 2021 06:42:47 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/python-loops-explained-5g4</link>
      <guid>https://dev.to/dailydevtips1/python-loops-explained-5g4</guid>
      <description>&lt;p&gt;Besides the &lt;a href="https://daily-dev-tips.com/posts/data-types-in-python/"&gt;Python data types&lt;/a&gt; I've walked through just the other day, loops are an essential part of programming.&lt;/p&gt;

&lt;p&gt;Today we'll be looking at loops in Python, and there are two types I'll explain in this article.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For loop&lt;/li&gt;
&lt;li&gt;While loop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HcVuL5eF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621578641765/2ixTr7min.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HcVuL5eF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621578641765/2ixTr7min.jpeg" alt="Python loops explained"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-for-loop"&gt;
  &lt;/a&gt;
  Python for loop
&lt;/h2&gt;

&lt;p&gt;Let me first show you how a basic for loop in Python looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Do something
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on this example, you can already see it translates to:&lt;br&gt;
For each element X inside of statement Y, Evaluate a code block.&lt;/p&gt;

&lt;p&gt;Let's say we have a list with animals and would like to print each animal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;animals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"penguin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"tiger"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will result in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat
dog
penguin
tiger
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also use the range to loop x amount of times. Let's say we want to make a loop go four times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Happy Birthday"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wil print out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Happy Birthday
Happy Birthday
Happy Birthday
Happy Birthday
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-while-loop"&gt;
  &lt;/a&gt;
  Python while loop
&lt;/h2&gt;

&lt;p&gt;Besides the for loop, there is also the option to loop while a certain condition is met.&lt;/p&gt;

&lt;p&gt;The basics for a while loop are like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Do something
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, we say while X is true, you must keep executing this code block.&lt;br&gt;
If we actually used the code above, we would, however, build an infinite loop.&lt;/p&gt;

&lt;p&gt;So let's make a basic while loop and break it after the first run, so it only executes once&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Foo is true"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Foo is false now!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this code block will return the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Foo is true
Foo is false now!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You've seen the range option, but we could also use a while loop for that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Still smaller"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Still smaller
Still smaller
Still smaller
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there, you have the basics of two versions to loop code blocks in Python.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>How to Authenticate using Keys, BasicAuth, OAuth2 in Python</title>
      <author>Rahul Banerjee</author>
      <pubDate>Mon, 24 May 2021 06:16:43 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/how-to-authenticate-using-keys-basicauth-oauth-in-python-4b8m</link>
      <guid>https://dev.to/rahulbanerjee99/how-to-authenticate-using-keys-basicauth-oauth-in-python-4b8m</guid>
      <description>&lt;p&gt;Not all APIs are as well documented as Twilio. This guide should help you work with APIs which are secured using Keys, BasicAuth, or OAuth.&lt;/p&gt;

&lt;p&gt;We will be working with the following APIS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://alexwohlbruck.github.io/cat-facts/"&gt;Cat Facts&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://thecatapi.com/"&gt;Cat as a Service (CAAS)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.twilio.com/docs/usage/api"&gt;Twilio API&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/rest"&gt;GitHub API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.genius.com/"&gt;Genius API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the  &lt;a href="https://github.com/rahulbanerjee26/python_apis"&gt;source code here&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Insecure APIs&lt;/li&gt;
&lt;li&gt;Reading values from.env files&lt;/li&gt;
&lt;li&gt;APIs with Keys&lt;/li&gt;
&lt;li&gt;APIs with Basic Auth&lt;/li&gt;
&lt;li&gt;API Wrappers&lt;/li&gt;
&lt;li&gt;The Session Object&lt;/li&gt;
&lt;li&gt;APIs secured via OAuth2&lt;/li&gt;
&lt;li&gt;Using the GitHub API (OAuth2)&lt;/li&gt;
&lt;li&gt;Using the Genius API (OAuth2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some familiarity with the requests library is expected. If you need a refresher, you can refer to my  &lt;a href="https://www.realpythonproject.com/day21-how-to-use-requests-to-interact-with-apis-in-python/"&gt;previous article.&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#insecure-apis"&gt;
  &lt;/a&gt;
  Insecure APIs
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://alexwohlbruck.github.io/cat-facts/"&gt;Cat Facts&lt;/a&gt; API does not require any authentication and is fairly straightforward to work with. Let's make a request to the following endpoint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;herokuapp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;facts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above API returns random Cat Facts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;api_endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://cat-fact.herokuapp.com/facts"&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;api_endpoint&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;. &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reading-from-env-files"&gt;
  &lt;/a&gt;
  Reading from .env files
&lt;/h3&gt;

&lt;p&gt;Before moving on to the next sections, let's look at how to read variables from a .env file. It's highly recommended to store your credentials in a .env file to avoid them being exposed to others.&lt;/p&gt;

&lt;p&gt;We will need to install the &lt;strong&gt;python-dotenv&lt;/strong&gt; library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;python-dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assume have a .env file with some random API Token&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;API_TOKEN &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"SOME API TOKEN"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try reading the API Token in Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; 

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;API_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"API_TOKEN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;get&lt;/strong&gt; function accepts a variable name stored in the .env file as an argument.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apis-with-keys"&gt;
  &lt;/a&gt;
  APIs with Keys
&lt;/h3&gt;

&lt;p&gt;This is the most common form of authentication when consuming APIs. The API Key/Token is passed in as a header while making the request. We will be working with the  &lt;a href="https://thecatapi.com/"&gt;Cat as a Service (CAAS)&lt;/a&gt; API. You can get a &lt;a href="https://thecatapi.com/signup"&gt;key here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;api_endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://api.thecatapi.com/v1/breeds"&lt;/span&gt;

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;CAT_API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CAT_API_KEY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"x-api-key"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CAT_API_KEY&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;api_endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;. &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; : &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'description'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We created a dictionary called &lt;strong&gt;headers&lt;/strong&gt; to store the API Key. The key in the dictionary is "x-api-key". However, this can differ based on the API you are working with. Some APIs require the key to be named "Authorization", "authorization", "token". It is best to refer to your API's documentation's authentication section. &lt;/p&gt;

&lt;p&gt;Bearer Authentication is pretty common and it requires the word "Bearer " (note the space) to be at the beginning of the API Token/Key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be using bearer authentication in an example in a later section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apis-with-basic-auth"&gt;
  &lt;/a&gt;
  APIs with Basic Auth
&lt;/h3&gt;

&lt;p&gt;An API secured using Basic Auth requires a username and password. Usually, the username is the Client ID and the password is the Client Secret of the API. In some cases, the username can be left blank. This should be mentioned in the API documentation.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.twilio.com/docs/usage/api"&gt;Twilio API&lt;/a&gt; is secured using Basic Auth. You can sign up on the Twilio website and get access to the API credentials.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TWILIO_ACCOUNT_SID"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TWILIO_ACCOUNT_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TWILIO_ACCOUNT_TOKEN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;api_endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://api.twilio.com/2010-04-01/Accounts/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/Calls.json?PageSize=5'&lt;/span&gt;

&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TWILIO_ACCOUNT_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_endpoint&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s"&gt;'calls'&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;. &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'duration'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create an instance of &lt;strong&gt;HTTPBasicAuth&lt;/strong&gt;. It takes in the username and password respectively as arguments. This instance is passed as an argument when making the request. In the case of twilio, the username is your account sid and the password is your account token. As mentioned before, it can be different for different APIs. If the API you are using, uses Basic Auth to secure its endpoints, refer to the docs for the username and password.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-wrappers"&gt;
  &lt;/a&gt;
  API Wrappers
&lt;/h3&gt;

&lt;p&gt;With respect to Python, API wrappers are essentially libraries/packages which can be installed using pip. These libraries help communicate with APIs in a syntactically cleaner way. Under the hood, the libraries still make use of requests and headers to make requests. However, the wrappers make your code look cleaner. &lt;/p&gt;

&lt;p&gt;The Twilio API we discussed earlier has a wrapper. It can be installed using pip&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;twilio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try to do the same thing we did in the previous section with Twilio&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; 


&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TWILIO_ACCOUNT_SID"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TWILIO_ACCOUNT_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TWILIO_ACCOUNT_TOKEN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TWILIO_ACCOUNT_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;calls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;. &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the code is a few lines shorter and looks much cleaner. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n4mHZgbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621831859338/JH9VrxLey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n4mHZgbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621831859338/JH9VrxLey.png" alt="Screen Shot 2021-05-24 at 12.50.49 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, not all APIs have a wrapper. However, a lot of them do. Before a consumer, an API directly, try searching for a wrapper around it. This will make it significantly easier to work with the API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-session-object"&gt;
  &lt;/a&gt;
  The Session Object
&lt;/h3&gt;

&lt;p&gt;Instead of passing the API Key or HTTPBasicAuth Instance every time you make a request to a secured API endpoint, you can create a session object. You'll have to authenticate once and can make requests without needing to pass the key or the auth instance.&lt;/p&gt;

&lt;p&gt;We will work with the GitHub API which is secured using BasicAuth. The username will be your GitHub username and the password is your personal access token. You can get one by following &lt;a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;this tutorial&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_API_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GITHUB_API_TOKEN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;base_api_endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://api.github.com/user"&lt;/span&gt;

&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rahulbanerjee26"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GITHUB_API_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_api_endpoint&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'/repos'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;. &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_api_endpoint&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'/emails'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;. &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After I set the session's auth value to the HTTPBasicAuth instance, I can simply make requests without passing the authentication each time. Our requests are still being authenticated, but the Session object takes care of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apis-secured-via-oauth2"&gt;
  &lt;/a&gt;
  APIs secured via OAuth2
&lt;/h3&gt;

&lt;p&gt;Using OAuth2 web flow to authenticate is usually used in Flask/Django apps when you need a "Sign Up using Google", "Sign Up using Facebook" option. However, some APIs need OAuth2 for all their endpoints. The GitHub API supports OAuth2 authentication as well. We will also be talking about the &lt;a href="https://docs.genius.com/"&gt;Genius API&lt;/a&gt;. Although it supports key-based authentication, its endpoint requires OAuth2, it is possible to get a token and authenticate yourself by passing the key in the headers object. However, we will be using the OAuth web flow to authenticate ourselves.&lt;/p&gt;

&lt;p&gt;I won't be going too much into detail on how OAuth2 works since that is beyond the scope of this article. Below is a high-level overview. If it doesn't make sense, skip over to the Github or Genius API section and it should make more sense.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We will have to create a client app on the API's website&lt;/li&gt;
&lt;li&gt;The client app will have a client ID and Client Secret&lt;/li&gt;
&lt;li&gt;We will have to make a request to the API's authentication endpoint. The client ID and client Secret will be passed as query parameters.&lt;/li&gt;
&lt;li&gt;The authentication endpoint will ask for permission and will have to be authorized&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PitU-LbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621834748368/rAqcrxCnA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PitU-LbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621834748368/rAqcrxCnA.png" alt="google-oauth-consent.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once authorized, it will return a code&lt;/li&gt;
&lt;li&gt;This code will have to be given to another endpoint which will exchange it for an access token.&lt;/li&gt;
&lt;li&gt;This access token can now be used as a key and be passed as a header object when making requests to the endpoint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a look at a couple of examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-github-api-oauth2"&gt;
  &lt;/a&gt;
  Using the GitHub API (OAuth2)
&lt;/h3&gt;

&lt;p&gt;As mentioned above, OAuth2 is mostly used with Flask/Django APPs. When working with OAuth2, you will need a web app URL and a URL to redirect the user to once they authorize/give permission. Since we do not have a web app, we do not have any URL. However we can use &lt;a href="https://httpbin.org/"&gt;HTTPBin&lt;/a&gt;. Whenever we need an URL, we can use the following URL&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;https://httpbin.org/anything
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, you will have to &lt;a href="https://docs.github.com/en/developers/apps/building-github-apps/creating-a-github-app"&gt;create a GitHub App&lt;/a&gt;. When asked for the web app URL or the redirect URL, use the above-discussed URL. Once you have created the app, store the Client ID and Client Secret in the .env file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webbrowser&lt;/span&gt;

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;CLIENT_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GITHUB_CLIENT_ID"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;CLIENT_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GITHUB_CLIENT_SECRET"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;REDIRECT_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://httpbin.org/anything"&lt;/span&gt;

&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"client_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CLIENT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"redirect_uri"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;REDIRECT_URI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"user"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/login/oauth/authorize"&lt;/span&gt;
&lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'?'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter the Code: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first few lines are importing libraries and loading the credentials from the .env file. The parameter dictionary contains the client ID, the redirect URL which is the HTTPBin URL we discussed earlier and the scope. The value of the scope determines the endpoints you can access and the HTTP Verb Actions you can do. &lt;/p&gt;

&lt;p&gt;We create an URL along with the query parameter and open it in a browser using the &lt;strong&gt;webbrowser&lt;/strong&gt; library. The Pythons script waits for use the input our code,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cf0EEx2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621835203410/KSc4uGKH1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cf0EEx2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621835203410/KSc4uGKH1.png" alt="Screen Shot 2021-05-24 at 1.36.59 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click authorize, you should be redirected to the HTTPBin URL and a JSON Object should be displayed. Look at the value for the key "code". This value will be exchanged for an API Token. Input the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Got Code"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"client_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CLIENT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"client_secret"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CLIENT_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"redirect_uri"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;REDIRECT_URI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/login/oauth/access_token"&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Accept"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'access_token'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Got Access Token"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once, we get the code, we make another request to an endpoint to get an access token. This time we pass the code along with the client secret as parameters. After GitHub validates the credentials along with the code, it will return an access token. This access token can be used as an API Key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"token &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;base_api_endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://api.github.com/user"&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_api_endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_api_endpoint&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'/repos'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_api_endpoint&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'/emails'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-the-genius-api-oauth2"&gt;
  &lt;/a&gt;
  Using the Genius API (OAuth2)
&lt;/h3&gt;

&lt;p&gt;Let's take a look at another example. I'll skip the part where we import the libraries and load the credentials.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'client_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GENIUS_CLIENT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'redirect_uri'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'https://httpbin.org/anything'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'response_type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'scope'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'me'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://api.genius.com/oauth/authorize"&lt;/span&gt;
&lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'?'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter the Code: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "response_type" is mandatory for some APIs, the value should always be "code"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fUgYu3_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621835658537/wXxE5TLIl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fUgYu3_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621835658537/wXxE5TLIl.png" alt="Screen Shot 2021-05-24 at 1.54.05 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After we authorize, we will see a JSON object similar to the one we saw when working with the GitHub API. Input the Code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"client_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GENIUS_CLIENT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"client_secret"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GENIUS_CLIENT_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"redirect_uri"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'https://httpbin.org/anything'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"response_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"code"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"grant_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"authorization_code"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://api.genius.com/oauth/token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"access_token"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"grant_type" is also required by some APIs. The value is always "authorization_code". After our code is validated, we get an access token. This token can be used as an API Key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;base_api_endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://api.genius.com/account"&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_api_endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I hope this article serves as a good guide to work with APIs in Python. Before consuming an API directly, always look for a wrapper. The 5 mins you spend looking for a wrapper might save you hours of headache.&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://www.linkedin.com/in/rahulbanerjee2699/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/rahulbanerjee99"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;Github Repo&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://github.com/rahulbanerjee26/python_apis"&gt;https://github.com/rahulbanerjee26/python_apis&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Multiple inheritance and MRO in python</title>
      <author>Shiva Gaire</author>
      <pubDate>Mon, 24 May 2021 06:13:29 +0000</pubDate>
      <link>https://dev.to/geeksambhu/multiple-inheritance-and-mro-in-python-20j2</link>
      <guid>https://dev.to/geeksambhu/multiple-inheritance-and-mro-in-python-20j2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Let's first talk about the word &lt;strong&gt;inheritance&lt;/strong&gt;, oxford dictionary defines it as &lt;em&gt;&lt;a href="https://www.oxfordlearnersdictionaries.com/definition/american_english/inheritance"&gt;something from the past or from your family that affects the way you behave, look, etc.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In object-oriented programming, inheritance facilitates code reuse with the primary motivation of reusing or extending the parent or base class in children or subclass, hence the subclass or children class is affected by the parent class. It however provides freedom to children class to modify the parent's attributes and methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h2&gt;

&lt;p&gt;Let's see an example which is most common in all paradigm, here &lt;code&gt;Children&lt;/code&gt; class inherits from &lt;code&gt;Parent&lt;/code&gt; class and inherits some methods of &lt;code&gt;Parent&lt;/code&gt; class and also overrides the &lt;code&gt;Parent&lt;/code&gt; class implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parent_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"parent_function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;common_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Parent's common_function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;child_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Child's child_function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;common_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Child's common_function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# #prints 'parent_function'
&lt;/span&gt;
    &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;#prints 'child's function'
&lt;/span&gt;    &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#prints 'parent_function'
&lt;/span&gt;
    &lt;span class="c1"&gt;# common of both
&lt;/span&gt;    &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#prints "Parent's common_function"
&lt;/span&gt;    &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#prints "Child's common_function"
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This type of single inheritance is common across all Object-Oriented Paradigm, However, Python has something more to offer with multiple inheritance, which means you can inherit from multiple base classes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiple-inheritance"&gt;
  &lt;/a&gt;
  Multiple Inheritance
&lt;/h2&gt;

&lt;p&gt;Multiple Inheritance refers to the inheritance that uses two or more base class. This is how you define multiple inheritance using &lt;code&gt;class&lt;/code&gt; keyword for multiple &lt;code&gt;baseClass&lt;/code&gt;:  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;class SubClass(baseClass, baseClass2, baseClass3, ....)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Python has its renowned multiple inheritance feature which comes in handy when working with a class that needs implementation from two or more class.&lt;/p&gt;

&lt;p&gt;When working with multiple base class there arises confusion if one or more base class implements the same method. Let's see how this is handled in python in next step: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method-resolution-order"&gt;
  &lt;/a&gt;
  Method Resolution Order
&lt;/h2&gt;

&lt;p&gt;Multiple inheritance can create confusion when there are one or more base classes that implement the same method. Python(2.3 and newer) version introduced the renowned &lt;code&gt;method resolution order&lt;/code&gt; or &lt;code&gt;mro&lt;/code&gt; to deal with the method resolution while using multiple inheritance. &lt;/p&gt;

&lt;p&gt;Method resolution order(MRO) in short has its root in  &lt;a href="https://en.wikipedia.org/wiki/C3_linearization"&gt;C3 linearization algorithm&lt;/a&gt; which basically outlines the basis for MRO list calculation in python multilevel inheritance. Method Resolution Order is the python provided calculation of inheritance graph. &lt;/p&gt;

&lt;p&gt;The MRO calculation has 3 major points to consider for the method resolution list from a subclass. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Subclasses comes first rather than the base classes&lt;/li&gt;
&lt;li&gt;Base class definition order is preserved&lt;/li&gt;
&lt;li&gt;Fits the above two criteria for all MRO calculation in a program&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If this is violated then C3 prohibits the python from inheritance declaration. &lt;/p&gt;

&lt;p&gt;Let's see an example to see the &lt;code&gt;mro&lt;/code&gt; list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi from A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi From B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi from C"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;E&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__mro__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# (&amp;lt;class '__main__.D'&amp;gt;, &amp;lt;class '__main__.B'&amp;gt;, &amp;lt;class '__main__.C'&amp;gt;, &amp;lt;class '__main__.A'&amp;gt;, &amp;lt;class 'object'&amp;gt;)
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__mro__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# ((&amp;lt;class '__main__.E'&amp;gt;, &amp;lt;class '__main__.C'&amp;gt;, &amp;lt;class '__main__.B'&amp;gt;, &amp;lt;class '__main__.A'&amp;gt;, &amp;lt;class 'object'&amp;gt;))
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the &lt;code&gt;__mro__&lt;/code&gt; attribute often pronounced as &lt;code&gt;dun~der mro&lt;/code&gt; (double underscore mro) with class name, It gives the tuple of classes defining the method's resolution order for the subclass.&lt;/p&gt;

&lt;p&gt;In the above example, we can see the diamond inheritance formation. So, on printing  &lt;code&gt;D.__mro__&lt;/code&gt; attribute,  it gives:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;class '__main__.D'&amp;gt;, &amp;lt;class '__main__.B'&amp;gt;, &amp;lt;class '__main__.C'&amp;gt;, &amp;lt;class '__main__.A'&amp;gt;, &amp;lt;class 'object'&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and on printing &lt;code&gt;E.__mro__&lt;/code&gt; , it gives: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;class '__main__.E'&amp;gt;, &amp;lt;class '__main__.C'&amp;gt;, &amp;lt;class '__main__.B'&amp;gt;, &amp;lt;class '__main__.A'&amp;gt;, &amp;lt;class 'object'&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice the difference in the second element of the above tuple, its because the base class order is preserved for the class definition of class D and E:  &lt;strong&gt;&lt;code&gt;D(B, C)&lt;/code&gt; and &lt;code&gt;E(C, B)&lt;/code&gt;&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;So, &lt;code&gt;&amp;lt;class '__main__.C'&amp;gt;&lt;/code&gt; in the second index for the &lt;code&gt;E&lt;/code&gt; subclass and &lt;code&gt;&amp;lt;class '__main__.B'&amp;gt;&lt;/code&gt; in the second index for &lt;code&gt;B&lt;/code&gt; subclass.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The method resolution order will be entirely based on the above tuple order,&lt;br&gt;&lt;br&gt;
which means when any method is invoked for the instance of class &lt;code&gt;D&lt;/code&gt;, the method of class &lt;code&gt;D&lt;/code&gt; will be resolved first and if not found it will try to resolve from the second element from the &lt;code&gt;D.__mro__&lt;/code&gt; tuple , which is class &lt;code&gt;B&lt;/code&gt; and so on to the next element, if no such method is implemented it will result in &lt;code&gt;AttributeError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the implementation is found for the current lookup the search stops right there and the method will be resolved from there. &lt;/p&gt;

&lt;p&gt;If you made it upto here, Please come up in discussion to check the &lt;code&gt;__mro__&lt;/code&gt; for the below snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi from A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi From B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi from C"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Finally, If you learned something from this article, please share it with your friends.&lt;/p&gt;

&lt;p&gt;You may also follow me on  &lt;a href="https://www.linkedin.com/in/geeksambhu/"&gt;LinkedIn&lt;/a&gt;  and  &lt;a href="https://twitter.com/geeksambhu"&gt;Twitter&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>python</category>
      <category>python3</category>
      <category>oop</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
