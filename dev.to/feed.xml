<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Rails Dependent Destroy</title>
      <author>M Bellucci</author>
      <pubDate>Sat, 10 Apr 2021 21:02:04 +0000</pubDate>
      <link>https://dev.to/delbetu/rails-dependent-destroy-id3</link>
      <guid>https://dev.to/delbetu/rails-dependent-destroy-id3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#dependent-options"&gt;
  &lt;/a&gt;
  Dependent Options
&lt;/h1&gt;

&lt;p&gt;Given:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;dependent: &lt;/span&gt;&lt;span class="no"&gt;XXXXXXX&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see what happens when using the existing dependent options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#destroy"&gt;
  &lt;/a&gt;
  destroy
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Load&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;*&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                      
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                             
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;User id: 1, name: "John", email: "some@email.com", created_at: "2021-04-10 13:39:08.099961000 +0000", updated_at: "2021-04-10 13:39:08.099961000 +0000"&amp;gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deleteall"&gt;
  &lt;/a&gt;
  delete_all
&lt;/h2&gt;

&lt;p&gt;:delete  =&amp;gt; u.destroy will call u.posts.delete (callbacks no executed)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                             
  &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                             
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;User id: 1, name: "John", email: "some@email.com", created_at: "2021-04-10 13:17:09.423794000 +0000", updated_at: "2021-04-10 13:17:09.423794000 +0000"&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destroyasync"&gt;
  &lt;/a&gt;
  destroy_async
&lt;/h2&gt;

&lt;p&gt;It is supposed to delete posts in an async job but for my case this was the behavior:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Load&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;*&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                      
  &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                           
&lt;span class="no"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                                                                                                                    
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;                                                                                                                                                                               
&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvalidForeignKey&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SQLite3&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ConstraintException&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;FOREIGN&lt;/span&gt; &lt;span class="no"&gt;KEY&lt;/span&gt; &lt;span class="n"&gt;constraint&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#nullify"&gt;
  &lt;/a&gt;
  nullify
&lt;/h2&gt;

&lt;p&gt;:nullify =&amp;gt; user.destroy will try to user.posts.each { |p| p.user = nil } (callbacks no executed)&lt;br&gt;
Will raise an error if column is not nullable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Update&lt;/span&gt; &lt;span class="no"&gt;All&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;UPDATE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;SET&lt;/span&gt; &lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                           
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                           
&lt;span class="no"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                                                                                                                    
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;                                                                                                                                                                               
&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NotNullViolation&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SQLite3&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ConstraintException&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;NOT&lt;/span&gt; &lt;span class="no"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;constraint&lt;/span&gt; &lt;span class="ss"&gt;failed: &lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#restrictwithexception"&gt;
  &lt;/a&gt;
  restrict_with_exception
&lt;/h2&gt;

&lt;p&gt;:restrict_with_exception =&amp;gt; u.destroy will do raise ActiveRecord::DeleteRestrictionError if u.posts.any?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Exists&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="no"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="no"&gt;LIMIT&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"LIMIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                              
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                           
&lt;span class="no"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                                                                                                                    
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;                                                                                                                                                                               
&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DeleteRestrictionError&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Cannot&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;because&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;dependent&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;:destroy =&amp;gt; a.destroy will call a.bs.destroy_all&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#restrictwitherror"&gt;
  &lt;/a&gt;
  restrict_with_error
&lt;/h2&gt;

&lt;p&gt;:restrict_with_error =&amp;gt; causes an error to be added to the owner if there is an associated object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Exists&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="no"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="no"&gt;LIMIT&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"LIMIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                              
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                           
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;                                                                                                                                                                                              
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;003&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;                                                                                                                                                                             
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;ActiveModel::Errors:0x00007fc2b209d428 @base=#&amp;lt;User id: 1, name: "John", email: "some@email.com", created_at: "2021-04-10 13:17:09.423794000 +0000", updated_at: "2021-04-10 13:17:09.423794000 +&lt;/span&gt;
&lt;span class="mo"&gt;0000&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;, @errors=[#&amp;lt;ActiveModel::Error attribute=base, type=restrict_dependent_destroy.has_many, options={:record=&amp;gt;"&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="s2"&gt;"}&amp;gt;]&amp;gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>rails</category>
    </item>
    <item>
      <title>Build your own Shakespeare Translation Web App with JavaScript Fetch API</title>
      <author>Neha Gupta</author>
      <pubDate>Sat, 10 Apr 2021 20:50:54 +0000</pubDate>
      <link>https://dev.to/nayyyhaa/build-your-own-shakespeare-translation-web-app-with-javascript-fetch-api-loo</link>
      <guid>https://dev.to/nayyyhaa/build-your-own-shakespeare-translation-web-app-with-javascript-fetch-api-loo</guid>
      <description>&lt;p&gt;Shakespeare may have been a genius, but one thing's for sure: he wasn't speaking our language. His ever-popular works (dramas and poems) make his unique language style live even today.&lt;br&gt;
I've always been curious about how Shakespeare would've expressed my thoughts in his words. &lt;em&gt;Have you been too??&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Then you've come to the right place, my friend!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a vanillaJS project which uses API from &lt;a href="https://funtranslations.com/"&gt;https://funtranslations.com/&lt;/a&gt; to &lt;strong&gt;translate English text into Shakespeare English.&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Prerequisites&lt;/th&gt;
&lt;th&gt;Basic understanding of HTML and CSS, an understanding of what JavaScript is.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This is what we'll build:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYZvR8g3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85qojwxr74iiajwgrumb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYZvR8g3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85qojwxr74iiajwgrumb.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Try out the app &lt;a href="https://iamshakespeare.netlify.app/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;In case you get lost while following along, you can grab the &lt;a href="https://github.com/nayyyhaa/shakespeare-translator"&gt;source code from here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's begin!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To get started, we'll be using VSCode for writing our code. Create your first file with the name &lt;strong&gt;index.html&lt;/strong&gt; for writing out HTML code.&lt;br&gt;
In our Application, we have 3 basic elements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input Field - to accept the user's input&lt;/li&gt;
&lt;li&gt;Translate Button - to create an event when the user clicks on the translate button.&lt;/li&gt;
&lt;li&gt;Output Field - to preview the translated text.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These 3 elements can be created as follows in HTML:&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#html-code-snippet-indexhtml"&gt;
  &lt;/a&gt;
  HTML code snippet - index.html
&lt;/h6&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"textarea"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"inputTxt"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"insert your text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"translateButton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Translate!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"outputTxt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'/scripts/app.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: &amp;lt; script &amp;gt; tag is being used to bind this HTML file with the JavaScript file &lt;strong&gt;app.js&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#initialising-variables-to-store-our-data"&gt;
  &lt;/a&gt;
  Initialising variables to store our data
&lt;/h2&gt;

&lt;p&gt;This section of the code sets up the variables we need to store the data our program will use.&lt;br&gt;
In your &lt;strong&gt;app.js&lt;/strong&gt; file, create the following variables:&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#js-code-snippet-appjs"&gt;
  &lt;/a&gt;
  JS code snippet - app.js
&lt;/h6&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;inputElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#inputTxt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// input element&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;translateBtnElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#translateButton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// button element&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;outputElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#outputTxt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// output element&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://shakespeare.p.mashape.com/shakespeare.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//API URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The first three variables &lt;code&gt;inputElement&lt;/code&gt;, &lt;code&gt;translateBtnElement&lt;/code&gt;, &lt;code&gt;outputElement&lt;/code&gt; are each made to store a reference to the form text input, translate button and output element in our HTML.&lt;br&gt;
Our final variable &lt;code&gt;url&lt;/code&gt; is used to store the server's API call URL from where we obtain the translated data.&lt;/p&gt;

&lt;p&gt;Here, we've used &lt;code&gt;.querySelector()&lt;/code&gt; function for selecting the particular &lt;strong&gt;id&lt;/strong&gt; that we've already set in our index.html file.&lt;/p&gt;

&lt;p&gt;To listen to the button click event we need to define an event handler function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;translateBtnElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;translateFunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;   &lt;code&gt;click&lt;/code&gt; - is the event&lt;/li&gt;
&lt;li&gt;   &lt;code&gt;translateBtnElement&lt;/code&gt; - is the event listener&lt;/li&gt;
&lt;li&gt;   &lt;code&gt;translateFunction&lt;/code&gt; - is the event handler/callback function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After &lt;code&gt;click&lt;/code&gt; event has been fired on &lt;code&gt;translateBtnElement&lt;/code&gt;, the  &lt;code&gt;addEventListener()&lt;/code&gt; method handles by calling &lt;code&gt;translateFunction()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before defining the &lt;code&gt;translateFunction()&lt;/code&gt; we need to get some basic knowledge about APIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-an-api"&gt;
  &lt;/a&gt;
  What is an API?
&lt;/h3&gt;

&lt;p&gt;API stands for &lt;strong&gt;Application Programming Interface&lt;/strong&gt;, is a set of functions that allows applications to access data and interact with external software components, operating systems, or microservices.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;WOAH! What?!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;OK! Let me explain this to you in easy words. Suppose you are in a restaurant and you are dying to have that chocolate cake. You don't go straight to the chef for placing the order, right? The waiter does that for you. That's what API is. &lt;strong&gt;It's an interface that communicates between applications.&lt;/strong&gt;&lt;br&gt;
Here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;   You/Customer: Client&lt;/li&gt;
&lt;li&gt;   Waiter: API&lt;/li&gt;
&lt;li&gt;   Chef: Server
Hence, in order to get the data from the web servers, we need APIs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's call this API with&lt;br&gt;
In our example, we are using &lt;a href="https://funtranslations.com/shakespeare"&gt;FunTranslationAPI&lt;/a&gt; to fetch the data in JSON format(key - value pair).&lt;/p&gt;

&lt;p&gt;Let's call the API then!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fetch-api"&gt;
  &lt;/a&gt;
  Fetch API
&lt;/h2&gt;

&lt;p&gt;The Fetch API is a modern interface that allows you to make HTTP requests to servers from web browsers to given URL.&lt;/p&gt;

&lt;p&gt;Basic syntax involved:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handle the response&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handle the error&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here in the &lt;code&gt;fetch()&lt;/code&gt; function we pass the URL of the resource from where we are requesting the data. This will pass the data as a &lt;code&gt;response&lt;/code&gt; object. The &lt;code&gt;response&lt;/code&gt; object is the API wrapper for the fetched resource with a number of useful properties and methods to inspect the response. This will then passed to the &lt;code&gt;data&lt;/code&gt; variable (you can give any name to this) for printing output.&lt;/p&gt;

&lt;p&gt;Now, it's time to define the functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-functions-for-some-action"&gt;
  &lt;/a&gt;
  Defining Functions() &lt;em&gt;for some action&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;To get our code into some action, we need to define some functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;translateFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;//fetching input value &lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                             &lt;span class="c1"&gt;//Fetch API call&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;outputElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something wrong with the server! Try after sometime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's break it down:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We'll extract &lt;code&gt;inputElement&lt;/code&gt; value into &lt;code&gt;inputValue&lt;/code&gt; variable. &lt;/li&gt;
&lt;li&gt;Making &lt;code&gt;fetch&lt;/code&gt; API call using the given &lt;code&gt;url&lt;/code&gt; and then extracting &lt;code&gt;response&lt;/code&gt; object. This is just an HTTP response, not the actual JSON. To extract the JSON body content from the response, we use the &lt;code&gt;json()&lt;/code&gt; method via using an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;arrow&lt;/a&gt; function.&lt;/li&gt;
&lt;li&gt;Setting &lt;code&gt;data&lt;/code&gt; variable's value to the &lt;code&gt;outputElement&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;Finally, error handling with &lt;code&gt;catch()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's try our application. Go to the browser, input your text &amp;amp; click on the translate button. You'll get the following output. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#in-console"&gt;
  &lt;/a&gt;
  In console
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bad Request: text is missing."&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's not the output that we were expecting. That's because we've to pass the text to our URL. For that we'll define another function &lt;code&gt;translatedURL()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;translatedURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ?text= &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try our app with sample text &lt;em&gt;Hi. How are you?&lt;/em&gt; and calling in fetch() function as &lt;code&gt;fetch(translatedURL(inputValue))&lt;/code&gt; instead of previous &lt;code&gt;fetch(url)&lt;/code&gt; to concatenate the text message to our server API's URL. We'll get output like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"total"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"contents"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"translated"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Good morrow. How art thee?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
        &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hi. How are you?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;     
        &lt;/span&gt;&lt;span class="nl"&gt;"translation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"shakespeare"&lt;/span&gt;&lt;span class="w"&gt;         
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Success! Not so much. Notice that the output text doesn't look pretty. This output is JSON data and we need to extract the translated value from it.&lt;/p&gt;

&lt;p&gt;Here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;   translated: translated text&lt;/li&gt;
&lt;li&gt;   text: input text&lt;/li&gt;
&lt;li&gt;   translation: language of translation being used from FunTranslation API
We refer it by &lt;code&gt;json.contents.translated&lt;/code&gt;. Now our code should look something like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;translatedURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ?text= &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;translateFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;finalURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;translatedURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;finalURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;outputElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something wrong with the server! Try after sometime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we get the following output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rFwNTIcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us63l9tbhxnt004el08i.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rFwNTIcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us63l9tbhxnt004el08i.PNG" alt="output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Voila!&lt;/strong&gt; We've built our very own Shakespeare Translation Web App with JavaScript Fetch API.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Funtranslation APIs are free to use, hence they have a limitation of 5 calls/hour. Once it exceeds this limit, it would result in a failure with an error we've mentioned in the &lt;code&gt;catch()&lt;/code&gt; block.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#finished-for-now"&gt;
  &lt;/a&gt;
  Finished for now...
&lt;/h2&gt;

&lt;p&gt;Congrats on making it this far! We've got the basic understanding of DOM scripting i.e. JS in the browser, calling servers, and getting data from there, taking user input and showing user output, and many more things.&lt;/p&gt;

&lt;p&gt;Now all that's left for you is to design your own styling with CSS. You can also check out funtranslation &lt;a href="https://funtranslations.com"&gt;site&lt;/a&gt; for a similar app with different translation languages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://iamshakespeare.netlify.app/"&gt;Click here&lt;/a&gt; to check out the live project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Give it a try, create your version of the same and share your experience and feedback on the comments section.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 5 Programming Skills Worth Learning in 2021</title>
      <author>Brock Herion</author>
      <pubDate>Sat, 10 Apr 2021 20:34:40 +0000</pubDate>
      <link>https://dev.to/brockherion/top-5-programming-skills-worth-learning-in-2021-98a</link>
      <guid>https://dev.to/brockherion/top-5-programming-skills-worth-learning-in-2021-98a</guid>
      <description>&lt;p&gt;2021 has already proven itself as another crazy year. It’s also another fantastic opportunity to learn new skills and expand on existing ones. In software development, stagnation is a sure-fire way to fall behind the curve. With new languages, technologies, best practices, and frameworks coming out more and more rapidly, this is the perfect opportunity to reevaluate where you want to go as a developer.&lt;/p&gt;

&lt;p&gt;At the beginning of this year, I did just that. I wrote an article earlier this year about what I felt were the best languages to learn in 2021. With those, I felt that there was a nice mix for developers of any level and area of interest. However, they weren’t the languages for me to learn. Already in working with Python, Typescript, C#, and BASH, I thought about what I could do to help move my skills forward in other ways. After a lot of thought, I came up with a few programming skills that I believe are worth learning in 2021.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-functional-programming"&gt;
  &lt;/a&gt;
  1. Functional Programming
&lt;/h1&gt;

&lt;p&gt;This is a big one. Functional programming is a programming paradigm that revolves around the idea of moving data around, well, functionally! Instead of creating objects and callings methods on those objects, your data can be thought of as a stream, moving from function to function. It requires a different way of thinking about your programs. It's a lot easier to show it than to explain it.&lt;/p&gt;

&lt;p&gt;Let's take a look at this Java code. It should be pretty familiar to anybody who has worked in an OOP language.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Here,are,some,words"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;trim&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are replacing the commas with spaces, trimming whitespace off the end, and then setting the whole thing to uppercase.&lt;/p&gt;

&lt;p&gt;Now, let's look at the same example in Elixir, my favorite functional programming language.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Here,are,some,words"&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trim&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upcase&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are taking our stream and piping it into the replace function, which replaces commas with spaces. The output of that is piped into trim, which is then piped into upcase. Notice how words is assigned once, where as in our Java example, we declare it then reassign it three times. This is a key feature of Elixir. Data is immutable, meaning it cannot be changed. The string being passed into replace does not change but instead returns a new reference to a string. This new string is passed into trim, which returns a new one to upcase. Our variable words is only assigned once and our original input was never changed. This pattern of programming can help to create more robust and more maintainable software.&lt;/p&gt;

&lt;p&gt;For those wanting to get started with functional programming, there is a lot to chose from! If you are on the JVM, you have Scala or Clojure to choose from. Scala might be easier, as it supports both OOP and functional programming paradigms. For those in the .NET side of the world, F# is a fantastic language. There is also a version of Clojure that runs on the .NET platform as well. My personal preference is Elixir, as its syntax is similar to that of Ruby’s but gives you the power of the BEAM, Erlang’s virtual machine.&lt;/p&gt;

&lt;p&gt;You can find more information on Elixir at &lt;a href="https://elixir-lang.org/"&gt;https://elixir-lang.org/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-swift-kotlin-and-mobile-development"&gt;
  &lt;/a&gt;
  2. Swift, Kotlin, and Mobile Development
&lt;/h1&gt;

&lt;p&gt;This one might strike some people as odd. However, I believe Swift has a place beyond just writing iOS apps. In 2015, Swift was published under the Apache 2.0 license, thus making it open source. As of now, it can be run on Mac and Linux and can run on Windows through the use of Docker.&lt;/p&gt;

&lt;p&gt;Given this, Swift can be used to create more than just iPhone apps now. You can build APIs, command-line apps, and even do machine learning with it. Unfortunately, iOS is still restricted to Macs only, but it is a start.&lt;/p&gt;

&lt;p&gt;The beauty in how easy the language is to write and use. It’s certainly C-inspired but &lt;em&gt;feels&lt;/em&gt; like a modern language. It is nowhere near as clunky or verbose as Java. The same argument can be made for Kotlin, which is essentially aiming to fix the problems of Java while being a modern language. Kotlin is developed by JetBrains, so you know it’s treated as a first-class citizen in their IntelliJ platform. Kotlin can be used to build Android apps, which is excellent at but also building web apps using the Spring framework. It can be used alongside Java in existing projects, so adding it in is simple. Both of these languages blow past their predecessors in almost every way.&lt;/p&gt;

&lt;p&gt;So why are these skills important? For one, mobile development is not going anywhere. In fact, I believe its need will continue to increase, due to the ever-growing number of systems that can now interact with phones. Apps now let you control your car, house, let you make payments, and so much more. Beyond that, both of these languages can now be used to build more kinds of applications. You essentially can build your mobile and backend in the same language now. If you learn Kotlin, you can even compile to JavaScript and use it on the web. And this isn’t even going into the amount of other smart appliances coming out. Watches, doorbells, and even washing machines are all getting smarter. Both Swift and Kotlin are great for building apps for these appliances or for building mobile apps to interface with them. These are fast, modern, and versatile languages with a lot to offer.&lt;/p&gt;

&lt;p&gt;As a side note, Apple Silicon has already proven itself a beast and both of these languages have been shown to do very well on it. I believe we will see a wider implementation of ARM chips from all vendors eventually, so knowing these languages would be a great way to dive headfirst into these next-generation CPUs.&lt;/p&gt;

&lt;p&gt;You can start with Swift at &lt;a href="https://swift.org/"&gt;https://swift.org/&lt;/a&gt; and Kotlin at &lt;a href="https://kotlinlang.org/"&gt;https://kotlinlang.org/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-blockchain-and-cryptocurrency"&gt;
  &lt;/a&gt;
  3. Blockchain and Cryptocurrency
&lt;/h1&gt;

&lt;p&gt;Blockchain technology is not going anywhere anytime soon. We've seen the kinds of disruption that Bitcoin, Ethereum, and even Dogecoin have created. Cryptocurrency has steamrolled ahead, while traditional banking and investment institutions have fought it tooth and nail. I am not going to explain the ins and outs of how the blockchain works here, but I believe that knowing how to program apps to take advantage of this technology is an extremely valuable skill to have.&lt;/p&gt;

&lt;p&gt;Cryptocurrency essentially removes the middleman in finance. Bitcoin and Ethereum are not controlled or owned by a centralized bank or printed from the government. Because of this, they are seen as more private and a way to future-proof against inflation and any changes to the value of the dollar. This is absolutely crucial. A bitcoin is worth the same everywhere in the world.&lt;/p&gt;

&lt;p&gt;Why is this important for us as developers? Well recently, Tesla announced they would be accepting Bitcoin as payment and not converting back into a stable coin or into USD. This is a massive step forward for cryptos. If things keep moving this way, there will come a time when developers need to know and understand how to build apps that can integrate with the blockchain. As more people start investing in and taking an interest in cryptocurrency, the demand for being able to use it for commerce in websites and apps will only grow. &lt;/p&gt;

&lt;p&gt;My advice for getting started would be to learn Solidity, the programming language used for building apps to take advantage of Ethereum. You will also need a knowledge of languages like Python and JavaScript to be able to let your users interact with your applications. Below is a simple Hello, World app taken from Solidity's website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pragma solidity ^0.8.0;
contract MyContract {
    function helloWorld() public pure returns (string memory) {
        return "Hello, World!";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More information can be found at &lt;a href="https://soliditylang.org/"&gt;https://soliditylang.org/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-graphql"&gt;
  &lt;/a&gt;
  4. GraphQL
&lt;/h1&gt;

&lt;p&gt;Moving away from broader language categories into more design and architecture, GraphQL aims to solve a couple of the problems of REST APIs. It was designed by Facebook to in order help them streamline getting data from their servers to their client apps.&lt;/p&gt;

&lt;p&gt;Instead of declaring endpoints for your API, you have one GraphQL endpoint that you pass your queries and mutations to. A query is essentially a defined set of data you want back from your server. You would use queries to define the structure of the data and how many records you want back from your server. Mutations can be thought of as a traditional create, update, or delete command. You send data to the server that you are creating or updating or whatever you want to do with it.&lt;/p&gt;

&lt;p&gt;GraphQL aims to simplify retrieval and management between clients and servers. You no longer are fetching more or fewer data than what you expected and really don’t need to create a bunch of DTOs to manage requests and responses. You just define your object types and then you can specify what fields from it you want your server to return.&lt;/p&gt;

&lt;p&gt;Will GraphQL replace REST? Well no, I don’t think so. Each has a specific use case. Sometimes, setting up a REST API might work better for your app. Other times you might want to use GraphQL. Why I think GraphQL is worth learning because of how much more complicated our data is becoming. Complicated data models no longer need to have complicated logic to build your dataset on your backend. With GraphQL, you tell the server exactly what you want back.&lt;/p&gt;

&lt;p&gt;You can learn more about GraphQL at &lt;a href="https://graphql.org/"&gt;https://graphql.org/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-docker"&gt;
  &lt;/a&gt;
  5. Docker
&lt;/h1&gt;

&lt;p&gt;Docker has been a tool that I cannot live without. Docker is a tool used to help simplify code environments. You pull down an “image” of an existing environment, say like one for Python or JavaScript, and using a file called a Dockerfile, you can copy your code into the image and run it there instead of on your machine.&lt;/p&gt;

&lt;p&gt;There are a number of advantages to this from a developer's perspective. You, for one, can keep your development environment off your local machine. All your dependencies and code are isolated in the image. This helps prevent any headaches you might run into with running your environments locally. It also makes sharing your environment with team members easier. All you need to give them is your code and the Dockerfile and they can use the code exactly how you have it set up on your machine.&lt;/p&gt;

&lt;p&gt;You can also set up more complicated environments using Docker Compose, where you can create environments using multiple images. You can spin up databases, message brokers, and more, all without having to download and install these pieces of software on your system. You can then reference those within your software, whether you are running that in a container or not. It greatly simplifies the process of creating and managing development environments.&lt;/p&gt;

&lt;p&gt;This can be taken a step further with tools like Docker Swarm and Kubernetes, which make the process of setting up and configuring production environments much simpler. Being able to package and deploy software in containers like this greatly reduces the risk of taking down the whole system. Again, having all your configurations and applications isolated in this way really helps to ensure that your code will run exactly the same way no matter where it is.&lt;/p&gt;

&lt;p&gt;Like with GraphQL, Docker and container technology helps solve complicated business infrastructure. With more and more components to applications now, and with them becoming more microservice oriented, Docker is an essential tool for developers to learn and use. The power and flexibility it gives you to control every part of your stack and deploy it with confidence are invaluable to any development workflow.&lt;/p&gt;

&lt;p&gt;More information on Docker can be found at &lt;a href="https://www.docker.com/"&gt;https://www.docker.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The world of development is constantly changing and evolving, and we as developers have to stay on top of it. How software is written and the tooling we use to create it can change overnight sometimes. It’s important to constantly be learning and adding new skills to what you know.&lt;/p&gt;

&lt;p&gt;These skills and technologies I have discussed are a great way to do just that. More mainstream languages are introducing functional elements into their syntax. Our home appliances and phones are not only getting smarter, but more available and more complicated. Swift and Kotlin are great languages to learn in that regard. Blockchain technology will continue to grow and become more widely adopted as the demand and awareness of cryptos continue to grow. GraphQL and Docker are tools to help with how you build your apps and fetch data for them. They solve the issues of deployments, APIs, dependencies, and so much more. With these skills, you are not only helping to write better software, but you are also helping to future-proofing yourself.&lt;/p&gt;

&lt;p&gt;(Photo by Firos nv on Unsplash)&lt;/p&gt;

</description>
      <category>functional</category>
      <category>devops</category>
      <category>docker</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Why hasn't `&lt;script&gt;` gotten a (standardized) void version yet?</title>
      <author>Calin Baenen</author>
      <pubDate>Sat, 10 Apr 2021 20:21:30 +0000</pubDate>
      <link>https://dev.to/baenencalin/why-hasn-t-script-gotten-a-standardized-void-version-yet-49d3</link>
      <guid>https://dev.to/baenencalin/why-hasn-t-script-gotten-a-standardized-void-version-yet-49d3</guid>
      <description>&lt;p&gt;I know some browsers will recognize&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"file.js"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"file.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;as that's basically what a void element is.&lt;br&gt;
But, not all browsers do (one being the one I use, FireFox).&lt;/p&gt;

&lt;p&gt;Why is this? Either you should be able to smush a script into the second in to the second example's body, OR it should always be a viable option to use the first example, because without either the &lt;code&gt;script&lt;/code&gt; tag(s) look ugly, and it's wasting some space.&lt;/p&gt;

&lt;p&gt;It may not be a huge deal, but I see it as mildly annoying, especially if there are lots of tags grabbing a script from somewhere.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Quick Tip: Take advantage of the official Next.js examples</title>
      <author>Patrick Göler von Ravensburg</author>
      <pubDate>Sat, 10 Apr 2021 19:45:09 +0000</pubDate>
      <link>https://dev.to/codingcastle/quick-tip-take-advantage-of-the-official-next-js-examples-1i75</link>
      <guid>https://dev.to/codingcastle/quick-tip-take-advantage-of-the-official-next-js-examples-1i75</guid>
      <description>&lt;p&gt;Have you ever spent too much time trying to set something up with Next.js? Hopefully this quick tip can help you in the future.&lt;/p&gt;

&lt;p&gt;The Next.js repository contains one of the most extensive collections of examples I have seen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/vercel/next.js/tree/canary/examples"&gt;Next.js Examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if you are trying to integrate your favorite UI or data fetching library with Next.js there is a good chance they have an example for that already.&lt;/p&gt;

&lt;p&gt;This helped me a ton when I was trying to setup server side data fetching with Apollo GraphQL for the first time.&lt;/p&gt;

&lt;p&gt;All the examples seem well-maintained too, e.g. the Tailwind example was updated to use the new JIT compiler which is a rather new change.&lt;/p&gt;

&lt;p&gt;You can make use of this by copying the code you need or you can create a new Next.js project with an example as the template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app --example with-tailwindcss with-tailwindcss-app
# or
yarn create next-app --example with-tailwindcss with-tailwindcss-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope this helps :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCx8bwDAyeR5VfXPFk0j70-w"&gt;Youtube&lt;/a&gt; | &lt;a href="https://twitter.com/coding_castle"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>codenewbie</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>An introduction of using react-form-elements 👩🏻‍💻</title>
      <author>Ismi andhykawati</author>
      <pubDate>Sat, 10 Apr 2021 19:03:19 +0000</pubDate>
      <link>https://dev.to/ismiandhyka18/an-introduction-of-using-react-form-elements-51ng</link>
      <guid>https://dev.to/ismiandhyka18/an-introduction-of-using-react-form-elements-51ng</guid>
      <description>&lt;p&gt;In my latest project, I want to build a form to submit users' input to our database. Instead of coding a long and boring form element and grabbing all the input values one by one, I have found a very useful and user-friendly helps me doing all these in one click. I am going to write more about react-form-elements to explain the implementation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo-form-%F0%9F%96%A5"&gt;
  &lt;/a&gt;
  Demo Form  🖥
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9P7UthSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xairzh3aao6wl7v8k57e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9P7UthSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xairzh3aao6wl7v8k57e.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's Get Started 😉
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#1installation-%E2%9A%92"&gt;
  &lt;/a&gt;
  1.Installation ⚒
&lt;/h4&gt;

&lt;p&gt;First of all,  If you use this make sure you have already included React, and it is available as a global variable than You can install the package into your own app from npm  with code bellow ⬇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j8g0mcMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzbvxruchv7w3sdueag9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8g0mcMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzbvxruchv7w3sdueag9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next is in the corresponding component, we have to import the package. They have lots of different input elements that we can choose from, eg, input, checkbox, URL Input, etc. You can always refer to their document for the options. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OibfU3qn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj72k0okphwprfzyktmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OibfU3qn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj72k0okphwprfzyktmw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2creating-input-component-%E2%9C%8F"&gt;
  &lt;/a&gt;
  2.Creating Input component ✏
&lt;/h4&gt;

&lt;p&gt;Apply the Form to the return of your functional component, change your attribute name accordingly. The Form has an inbuilt structure and all the information will be set in the console once we click on the submit button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I76CjCJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zqi8l1yb72ic2tjp507.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I76CjCJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zqi8l1yb72ic2tjp507.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ep44M5qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3t2322olq5cbvpr7nzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ep44M5qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3t2322olq5cbvpr7nzo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
To implement this information with our project, simply create a state and use setState for the value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;onSubmit={data =&amp;gt; {&lt;br&gt;
        console.log(data)&lt;br&gt;
        setState(data)&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
Look! We now have our data in the state and can apply it accordingly in different components. &lt;a href="https://www.npmjs.com/package/react-form-elements"&gt;react-form-elements&lt;/a&gt; helps us to save time in building forms and get all the users' input in one click, and the implementation is easy to customize. Don't forget to try it out in your next react project!&lt;br&gt;
🎉 🎉 GOODLUCK 🎉 🎉&lt;/p&gt;

</description>
      <category>react</category>
      <category>npm</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Neural Network Learns to Drive</title>
      <author>Luke Garrigan</author>
      <pubDate>Sat, 10 Apr 2021 18:49:43 +0000</pubDate>
      <link>https://dev.to/lukegarrigan/neural-network-learns-to-drive-2gpm</link>
      <guid>https://dev.to/lukegarrigan/neural-network-learns-to-drive-2gpm</guid>
      <description>&lt;p&gt;This week I've been playing around with neural networks, or more specifically &lt;a href="https://www.wikiwand.com/en/Neuroevolution_of_augmenting_topologies"&gt;neuroevolution of augmenting topologies&lt;/a&gt; (NEAT) which is nowhere near as complicated as it sounds. I'll go over the ins and outs of NEAT in a future blog. For now, just know that NEAT is a matter of combining the strengths of a &lt;a href="https://codeheir.com/2021/04/03/genetic-algorithms-in-javascript/"&gt;genetic algorithm&lt;/a&gt; and a neural network to form something quite powerful, as this blog will show!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#starting-simple"&gt;
  &lt;/a&gt;
  Starting simple
&lt;/h1&gt;

&lt;p&gt;As with anything I know nothing about, I like to try and implement it in the simplest way possible and then iterate and expand on the implementation. I did this in my &lt;a href="https://codeheir.com/2021/04/03/genetic-algorithms-in-javascript/"&gt;previous blog&lt;/a&gt; where I developed a simple genetic algorithm for a game where the goal was for the protagonist to move up, and that's it. This week was no different.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flappy-bird"&gt;
  &lt;/a&gt;
  Flappy bird
&lt;/h2&gt;

&lt;p&gt;One of the simplest games I could think of to get the ball rolling is &lt;a href="https://flappybird.io/"&gt;Flappy bird&lt;/a&gt; as the rules and actions are quite simple, the bird must go through the pipes, and the bird does that by choosing one of two actions: flap wings or don't flap wings.&lt;/p&gt;

&lt;p&gt;Luckily, I coded my own flappy bird for a &lt;a href="https://www.youtube.com/watch?v=M5_BlCrIbhc"&gt;YouTube video&lt;/a&gt; I did a while back. I'll grab that and attempt an implementation of NEAT.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generation-1"&gt;
  &lt;/a&gt;
  Generation 1
&lt;/h3&gt;

&lt;p&gt;I spawn a population of 100 birds with a random neural network. The neural network takes as input the x/y of the bird and the x and y of the top pipe.&lt;/p&gt;

&lt;p&gt;As you can see, the first generation only 1 bird makes it through the first set of pipes, this means that bird is more likely to pass on its genetic material.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysACzWD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/flapme1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysACzWD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/flapme1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generation-20"&gt;
  &lt;/a&gt;
  Generation 20
&lt;/h3&gt;

&lt;p&gt;By generation 20 the bird is getting through a few pipes now and seems to have developed an understanding of the game and its objective.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mpWsVFzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/gen20.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mpWsVFzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/gen20.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generation-30"&gt;
  &lt;/a&gt;
  Generation 30
&lt;/h3&gt;

&lt;p&gt;By generation 30 the bird has mastered the game and continues on indefinitely.&lt;/p&gt;

&lt;p&gt;The bird likes to live on the edge though, look how close it gets to the top pipes!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t9GVQAFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/flapdone.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t9GVQAFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/flapdone.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#selfdriving-car"&gt;
  &lt;/a&gt;
  Self-driving car
&lt;/h1&gt;

&lt;p&gt;Okay, so now I've got a pretty good idea of the implementation let's bring this code into my car game. If you're interested in how the reward mechanism works I cover it in detail &lt;a href="https://codeheir.com/2021/04/03/genetic-algorithms-in-javascript/"&gt;in this blog&lt;/a&gt;, but basically there are checkpoints, and if the car drives over a checkpoint their score increments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inputs"&gt;
  &lt;/a&gt;
  Inputs
&lt;/h2&gt;

&lt;p&gt;So I think the only inputs the neural network really needs are some sensors, similar - but more primitive - than the sensors your car might have. So I'm going to choose 3 points that'll represent the sensors. The value of each sensor will be either 0 or 1, where 0 represents on track and 1 represents &lt;em&gt;you're about to die.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I do this by taking the pixels of the track and then determine the RGB of the pixel at the location of the sensor, and if that RGB is not the same colour as the track, then it's safe to assume that going that way is probably not a good idea, &lt;em&gt;but can my neural network figure that out&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The green dots represent the sensors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4sCND_e9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/image-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4sCND_e9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/image-4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code for determining whether a sensor is still on the road looks like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;infrontCollision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;infrontCollision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#generation-0"&gt;
  &lt;/a&gt;
  Generation 0
&lt;/h3&gt;

&lt;p&gt;Let's create a population of 100 with a mutation rate of 5% and see how it fairs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x9959LGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/nn1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x9959LGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/nn1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I must admit, when I first ran this I was blown away. To get this far using just a traditional genetic algorithm took way over 100 generations. It's as though the car knew its purpose from the get-go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generation-2"&gt;
  &lt;/a&gt;
  Generation 2
&lt;/h3&gt;

&lt;p&gt;By generation 2 we already have cars that can complete a full circuit of the track! Which took over 250 generations in my previous blog, quite remarkable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ki1Xt8Av--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/nn2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ki1Xt8Av--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/nn2.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#can-it-race-another-track"&gt;
  &lt;/a&gt;
  Can it race another track?
&lt;/h1&gt;

&lt;p&gt;One of the drawbacks of using just a genetic algorithm was that it adapted to the environment it was in, each generation had to learn how to get around a corner and then pass on that genetic information so that its children could get around the corner and attempt the next. Here though, we're using live information and teaching the car to stay on the track, and hopefully any track - provided the grey is the same ðŸ˜&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exporting-the-model"&gt;
  &lt;/a&gt;
  Exporting the model
&lt;/h2&gt;

&lt;p&gt;The neural network is essentially the brains of the car, when a car is successful I can essentially export their brain and inject it into another car. In the example below, I inject the brain of a successful car from the other track onto this brand new track and it already knows what it's got to do!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9i0Woasm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/nobother.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9i0Woasm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.com/wp-content/uploads/2021/04/nobother.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Well, that concludes this week's hacking! If you enjoyed my writing please sign up for my newsletter! All the code written in this blog &lt;a href="https://editor.p5js.org/codeheir/sketches/eRtfbXBGf"&gt;can be found here&lt;/a&gt; although I very likely will have edited it by the time this blog is live.&lt;/p&gt;

&lt;p&gt;As mentioned in my previous blog thanks to &lt;a href="https://www.youtube.com/user/shiffman"&gt;Daniel Shiffman&lt;/a&gt; for the inspiration and great tutorials opening my eyes to this mysterious world!&lt;/p&gt;

&lt;p&gt;I hope you've enjoyed this blog, if you do by some miracle enjoy my blabbering then head over to my blogging site at codeheir.com where I write weekly blogs about whatever in the world of programming has my attention!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Como adicionar chave SSH no Github 
</title>
      <author>Samuel Dourado</author>
      <pubDate>Sat, 10 Apr 2021 18:20:21 +0000</pubDate>
      <link>https://dev.to/samueldourado7038/como-adicionar-chave-ssh-no-github-1chg</link>
      <guid>https://dev.to/samueldourado7038/como-adicionar-chave-ssh-no-github-1chg</guid>
      <description>&lt;p&gt;1. Instalar cliente SSH&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;openssh-client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2. Gerar chave SSH&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-keygen 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3. Acesse seu perfil do Github e abra a página de gerenciamento de chaves SSH. O caminho para a página gerenciamentos de chaves SSH é &lt;strong&gt;Settings/SSH and GPG keys&lt;/strong&gt;. Você também pode acessar a página pelo &lt;a href="https://github.com/settings/keys"&gt;link&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P7BKheBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dn14e0lh8cc9yrh5l9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P7BKheBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dn14e0lh8cc9yrh5l9f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4. Adicione a chave SSH key, através do botão &lt;strong&gt;&lt;em&gt;New SSH key&lt;/em&gt;&lt;/strong&gt;. Para adicionar a chave basta informar um título para a chave, o título é útil para ajudar identificar a chave, no meu caso eu escolhi "PC trabalho" como título, depois de informar o título cole a chave geradas nos passos 2 e 3 no campo key e clique em &lt;strong&gt;Add SSH key&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhQ8eBLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fhmsgtbv5w1ebvgujca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhQ8eBLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fhmsgtbv5w1ebvgujca.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5. Apos acionar o botão de &lt;strong&gt;Add SSH key&lt;/strong&gt; o Github solicitara confirmação de senha, informe sua senha e pronto sua chave SSH foi adicionada. &lt;br&gt;&lt;br&gt;
Para verificar se sua chave foi gerada basta acessar a tela de gerenciamento de chaves SSH e GPG (&lt;a href="https://github.com/settings/keys"&gt;Settings/SSH and GPG keys&lt;/a&gt;).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x5cXmaWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r2mc1lo1o9iw9be26e2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x5cXmaWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r2mc1lo1o9iw9be26e2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>ssh</category>
    </item>
    <item>
      <title>10+ BEST AMAZING 404 PAGE TEMPLATE</title>
      <author>mike</author>
      <pubDate>Sat, 10 Apr 2021 18:15:32 +0000</pubDate>
      <link>https://dev.to/mike37/10-best-amazing-404-page-template-2leb</link>
      <guid>https://dev.to/mike37/10-best-amazing-404-page-template-2leb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RIsPNRUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22ot1ktqtx8nyj0sgydk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RIsPNRUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22ot1ktqtx8nyj0sgydk.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IF YOU LIKE AIRTICLE THEN CHECK MORE &lt;a href="https://frontendin.com/404-page-templates/"&gt;30+ 404 PAGE TEMPLATES&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-titleno-vacancy-404"&gt;
  &lt;/a&gt;
  1. Title:-No Vacancy 404
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#authorriley-shaw"&gt;
  &lt;/a&gt;
  Author:-Riley Shaw
&lt;/h3&gt;

&lt;p&gt;Using &lt;a href="http://chuckyglitch.twbbs.org/novacancy/"&gt;novacancy.js&lt;/a&gt; to test out a 404 page concept. Feel free to use it, and if you're feeling nice give me a shout out!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rileyjshaw/embed/ufEIH?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-title-fargo-404"&gt;
  &lt;/a&gt;
  2. Title:-   Fargo 404
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#authornate-watson"&gt;
  &lt;/a&gt;
  Author:-Nate Watson
&lt;/h3&gt;

&lt;p&gt;Made With:- HTML CSS    &lt;/p&gt;

&lt;p&gt;Fargo-inspired 404 page for DailyUI #008&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/nw/embed/WQmxYY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-title-404-no-signal"&gt;
  &lt;/a&gt;
  3. Title:-   404 No signal
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#author-adem-ilter"&gt;
  &lt;/a&gt;
  Author:- Adem ilter
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ademilter/embed/hDtpq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-title-404-page"&gt;
  &lt;/a&gt;
  4. Title:-   404 Page
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#author-kasper-de-bruyne"&gt;
  &lt;/a&gt;
  Author:-    Kasper De Bruyne
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kdbkapsere/embed/oNXLbqQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-title-yeti-404-page"&gt;
  &lt;/a&gt;
  5. Title:-   Yeti 404 Page
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#authordarin"&gt;
  &lt;/a&gt;
  Author:-Darin
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/dsenneff/embed/mjZgmN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-title-error-404"&gt;
  &lt;/a&gt;
  6. Title:-   Error 404
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#author-swarup-kumar-kuila"&gt;
  &lt;/a&gt;
  Author:-    Swarup Kumar Kuila
&lt;/h3&gt;

&lt;p&gt;Error404, 404, animation&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/uiswarup/embed/XWdXGGV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-title-only-css-404-rolling-box"&gt;
  &lt;/a&gt;
  7. Title:-   Only CSS: 404 Rolling Box
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#author-yusuke-nakaya"&gt;
  &lt;/a&gt;
  Author:- Yusuke Nakaya
&lt;/h3&gt;

&lt;p&gt;Rolling loop 404 :)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/YusukeNakaya/embed/YLPVER?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-title-404-page"&gt;
  &lt;/a&gt;
  8. Title:-   404 page
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#author-naved-khan"&gt;
  &lt;/a&gt;
  Author:- Naved khan
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Navedkhan012/embed/vrWQMY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-title-ghost-page-404"&gt;
  &lt;/a&gt;
  9. Title:-   Ghost Page | 404
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#author-diogo-gomes"&gt;
  &lt;/a&gt;
  Author:-    Diogo Gomes
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/diogo_ml_gomes/embed/PyWdLb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-title-space-404"&gt;
  &lt;/a&gt;
  10. Title:-  Space 404
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#author-jared-rowe"&gt;
  &lt;/a&gt;
  Author:- Jared Rowe
&lt;/h3&gt;

&lt;p&gt;Animated SVG for the 404 page on Vecteezy.com&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Jarowe/embed/KNYxKe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-title-404-error-page"&gt;
  &lt;/a&gt;
  11. Title:-  404 Error page
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#authorvineethtr"&gt;
  &lt;/a&gt;
  Author:-Vineeth.TR
&lt;/h3&gt;

&lt;p&gt;Error page in Pure css :)
inspired from Bons  404&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/vineethtrv/embed/YqeBVJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-title-my-error-404-page"&gt;
  &lt;/a&gt;
  12. Title:-  My Error 404 Page
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#authortaufik-nurrohman"&gt;
  &lt;/a&gt;
  Author:-Taufik Nurrohman
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/tovic/embed/HgCcm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-titlecode-for-fun-day02-404-error-page-caveman-mode-pure-css"&gt;
  &lt;/a&gt;
  13. Title:-code for fun (day02): 404 error page, Caveman mode - pure CSS
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#authorsergio"&gt;
  &lt;/a&gt;
  Author:-Sergio
&lt;/h3&gt;

&lt;p&gt;code for fun: day2 // 
project: 404 error page //
an animation' exercise in css  //
no JS //
no svg //
I hope u enjoy&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SofiaSergio/embed/RMjyRL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IF YOU LIKE AIRTICLE THEN CHECK MORE &lt;a href="https://frontendin.com/404-page-templates/"&gt;30+ 404 PAGE TEMPLATES&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting my SvelteKit website on Netlify</title>
      <author>Kevin Pennekamp</author>
      <pubDate>Sat, 10 Apr 2021 18:15:16 +0000</pubDate>
      <link>https://dev.to/crinkle/getting-my-sveltekit-website-on-netlify-26m0</link>
      <guid>https://dev.to/crinkle/getting-my-sveltekit-website-on-netlify-26m0</guid>
      <description>&lt;p&gt;After tackling the &lt;a href="https://dev.to/crinkle/my-journey-from-gatsby-to-sveltekit-5g32"&gt;development&lt;/a&gt; of a SvelteKit version of my website, it is time to get it running in production! Or in this case, hosted on &lt;a href="https://www.netlify.com"&gt;Netlify&lt;/a&gt;. It was in this part I found out the &lt;em&gt;hard&lt;/em&gt; way that SvelteKit is in beta and not production-ready. Let me take you on my journey to get the website deployed on Netlify, and see if I was successful (spoiler: you are reading this on the SvelteKit version).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hosting-on-netlify"&gt;
  &lt;/a&gt;
  Hosting on Netlify
&lt;/h2&gt;

&lt;p&gt;Now that I had my website locally working, I had to get it deployed on &lt;a href="https://www.netlify.com"&gt;Netlify&lt;/a&gt;. SvelteKit has an &lt;code&gt;adapter-netlify&lt;/code&gt; package. This package creates a Netlify function that acts as the 'server' for the SSR website. So I swapped the default &lt;code&gt;adapter-node&lt;/code&gt; to the Netlify version and let GitHub and Netlify do the magic. And... errors.&lt;/p&gt;

&lt;p&gt;This is the moment I found out why SvelteKit is still in beta. In general, all the packages are &lt;code&gt;devDependencies&lt;/code&gt;. But, the Netlify Functions could not find the packages needed. So I moved the packages from &lt;code&gt;devDependencies&lt;/code&gt; into &lt;code&gt;dependencies&lt;/code&gt; and hit deploy again. Progress! The Netlify function can now find the package. Some issues remained, but progress nonetheless. Back to the local version to fix them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQOi_9yU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvgccfmndtc1ti1q07l0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQOi_9yU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvgccfmndtc1ti1q07l0.png" alt="Question marks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But wait a minute? The local version is not working anymore? Apparently, &lt;a href="https://vitejs.dev"&gt;Vite&lt;/a&gt;, the local build tool, did not like it when I moved the packages. After trying several things, I gave up. As SvelteKit is still in beta, community resources are scarce. I did found a few &lt;a href="https://sapper.svelte.dev"&gt;Sapper&lt;/a&gt; examples, the predecessor of SvelteKit, using the &lt;code&gt;adapter-static&lt;/code&gt;. Success! Well... kind of.&lt;/p&gt;

&lt;p&gt;I found that a few of my markdown files got transformed into pages correctly, but not all. After searching and debugging, I found the issue. The &lt;code&gt;adapter-static&lt;/code&gt; traverses all links starting from the index route and generates pages for all the linked pages it can find. If a markdown file is not present as a link on a page (yet), it does not get generated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;adapter-static&lt;/code&gt; changes the solution from SSR to SSG: the pre-rendered HTML is generated on build time instead of runtime.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#optimizing-the-website-for-seo"&gt;
  &lt;/a&gt;
  Optimizing the website for SEO
&lt;/h2&gt;

&lt;p&gt;In general SSR and SSG are SEO-friendly ways to create modern websites. Both Gatsby and Svelte(Kit) should enable me to create an SEO-friendly website. I used the &lt;a href="https://web.dev/measure/"&gt;web.dev measure&lt;/a&gt; tool to determine my website score. The homepage of the Gatsby version scored a 100 on all categories. But so does the SvelteKit version.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3THgOyo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2b85n166sk3x0cjqwdmd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3THgOyo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2b85n166sk3x0cjqwdmd.png" alt="Example screenshot of web.dev measure scores"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the scores are not the only metrics found in this tool. Most metrics were the same for both versions of the website, except &lt;em&gt;time to interactivity&lt;/em&gt;. For the Gatsby version, this was around 2.4 seconds, while the SvelteKit version has a time of around 1.0 seconds. Both good scores, but SvelteKit is superior.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Time to interactivity&lt;/strong&gt;: the actual time it takes to load everything allowing the user to interact with the page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is driven by the files transferred on loading the page. The Gatsby version had to download around 950 kB across 24 files. The SvelteKit version only needs around 280 kB over 14 files. A big win for SvelteKit!&lt;/p&gt;

&lt;p&gt;But we can test more than the homepage. Other pages did not score that well for SvelteKit. One of the bigger issues found by web.dev is redirects. At the moment of building the website, SvelteKit has &lt;em&gt;no&lt;/em&gt; trailing slashes in URLs &lt;a href="https://github.com/sveltejs/kit/issues/192"&gt;by design&lt;/a&gt;. But, Netlify &lt;a href="https://docs.netlify.com/routing/redirects/redirect-options/#trailing-slash"&gt;normalizes&lt;/a&gt; all URLs to a version with trailing slashes. It adds the below redirect headers to each page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/post-title /post-title/ 301!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By playing around with the 'Asset optimization' settings on Netlify, I was able to turn off this normalization. After redeploying and re-evaluating, the web.dev scores increased significantly. Now individual post pages score much better compared to their Gatsby counterpart. Especially on the 'time to interactivity' metric.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Turning off all asset optimizations on Netlify increased performance on my website. But, it can have unwanted side-effect due to the lack of URL normalization. Use with caution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When moving from the stable Gatsby to the unstable SvelteKit public beta, I took a risk. Not only did I have to learn a new framework, I had to build logic to replace community plugins. I was at risk of encountering bugs that few encountered before me. With the knowledge that I could not rely on Google or Stack Overflow, I jumped into the deep. But in the end, it all paid off. I build a new website that is not only faster but more enjoyable for me to work on. The experience that Svelte and SvelteKit bring is promising, and now I cannot shut up about it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are curious about the result, check the code on the open &lt;a href="https://github.com/kevtiq/crinkle.dev"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>svelte</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Converting my Gatsby website to SvelteKit</title>
      <author>Kevin Pennekamp</author>
      <pubDate>Sat, 10 Apr 2021 18:09:03 +0000</pubDate>
      <link>https://dev.to/crinkle/my-journey-from-gatsby-to-sveltekit-5g32</link>
      <guid>https://dev.to/crinkle/my-journey-from-gatsby-to-sveltekit-5g32</guid>
      <description>&lt;p&gt;For the last few weeks or months, I was getting restless about everything: my work, my website, the environment, the World. I had to find something to change my focus to, restore my energy. Around a week or two ago, I found the news of &lt;a href="https://svelte.dev/blog/sveltekit-beta"&gt;SvelteKit going into public beta&lt;/a&gt;. This sparked excitement in myself I had not felt in a long time. So during Easter weekend, while in a Corona lockdown, I started with a new journey. An exciting journey. I was going to learn a new framework and rebuild this website! Or at least, try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-svelte-and-sveltekit"&gt;
  &lt;/a&gt;
  Introducing Svelte and SvelteKit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; is a JavaScript library that makes it easy to write UIs. As it is a library, your code plus the library is shipped to the browser and executed there. Also, you have to write your HTML (or JSX) inside the &lt;code&gt;return&lt;/code&gt; of a function, while other lifecycle information is also encapsulated inside that function. &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; is a &lt;em&gt;static site generation (SSG)&lt;/em&gt; solution build on top of React, and was used in the previous version of this website. An easy next step would be migrating to &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;, a &lt;em&gt;static-site rendering (SSR)&lt;/em&gt; solution build on React. But then I came across the news of the SvelteKit public beta. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SSG vs. SSR&lt;/strong&gt;: in both cases the server is responsible to pre-render the requested HTML page (in contrast to client-side rendering (CSR)). With SSG this happens at &lt;em&gt;build&lt;/em&gt; time: all possible pages get pre-rendered. With SSR this happens at &lt;em&gt;runtime&lt;/em&gt;: upon a page visit, the HTML gets pre-rendered using a template. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; is not a library or a framework, it is a compiler. This means that your code is not shipped in combination with packages to a browser, but it gets compiled to something else. This something is shipped to the browser. Because all code gets compiled, the total size decreases, but the performance increases. Besides, it allows you to break away from writing everything inside a JavaScript function, and have its optimized format.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kit.svelte.dev/"&gt;SvelteKit&lt;/a&gt; is for Svelte, what Gatsby and NextJS are for React. It is an opinionated framework build on top of Svelte that allows you to create SSR (and SSG) websites and applications. At its core, it uses a flexible filesystem-based routing in the &lt;code&gt;/routes&lt;/code&gt; directory. Not only do the templates for the pages in this directory, but the code that runs on the server is co-located here as well. It is the next iteration of the Sapper framework. So a great choice for a blog-driven website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-scss-in-sveltekit"&gt;
  &lt;/a&gt;
  Working with (S)CSS in SvelteKit
&lt;/h2&gt;

&lt;p&gt;I am a big fan of CSS and have a strong &lt;a href="https://github.com/kevtiq/css-framework"&gt;opinion&lt;/a&gt; on how it should be applied to websites/projects. My setup allows me to extract general layout patterns and combine them with general utility-first CSS. When I read about the 'scoped' styles of Svelte I got a bit anxious. Would my way of working deviate too much from Svelte(Kit)?&lt;/p&gt;

&lt;p&gt;But quickly it hit me. The combination could work perfectly. It could allow me to create global &lt;code&gt;layout&lt;/code&gt; and &lt;code&gt;utility&lt;/code&gt; CSS, and use the 'scoped' CSS of Svelte to add styles specific to components or pages. The styles defined in the Svelte component could replace the entire &lt;code&gt;block&lt;/code&gt; directory of my framework. This means that components would look something like shown below. On the &lt;code&gt;div&lt;/code&gt; instead of the &lt;code&gt;header&lt;/code&gt; tag, you see various utility classes applied, but also the defined &lt;code&gt;.inner&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;header&amp;gt;
    &amp;lt;div class="inner | flex-row items-center mb-0"&amp;gt;
        &amp;lt;Logo /&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;style lang="scss"&amp;gt;
  header {
    ...

    .inner { ... }
  }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This worked beautifully, for the most part. The compiler of Svelte is smart enough to identify unused local styles, and not bundle them. However, in SvelteKit you can render an HTML string using the &lt;code&gt;@html&lt;/code&gt; flag. The compiler cannot link the two and will flag local styles as unused. This results in styles not being applied, but also not bundled. You cannot find the styles with the browser Inspection Tool, they do not exist. To solve this issue, the &lt;code&gt;:global()&lt;/code&gt; helper has to be used. But except for that, even my opinionated way of working just works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    :global(.post h2) { ... }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think I am good at CSS, but bad at animations. I know my way around CSS transitions, but that is as far as I go. Luckily Svelte got a lot of sweet stuff built in. The &lt;code&gt;svelte/transition&lt;/code&gt;, &lt;code&gt;svelte/animate&lt;/code&gt;, &lt;code&gt;svelte/easing&lt;/code&gt; (and potentially more) packages really make your life easier. They enabled me to implement page transitions (with the code below), or logo hover animation with ease. These little touches credit the name of my website, Crinkle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  import { fly } from 'svelte/transition';
&amp;lt;script&amp;gt;

&amp;lt;main in:fly={{ y: 50, duration: 250 }} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-markdown-file-handling"&gt;
  &lt;/a&gt;
  Setting up the markdown file handling
&lt;/h2&gt;

&lt;p&gt;But I do not write my articles in HTML, Svelte, or React, I write them in markdown. With Gatsby several steps had to be taken to make it all work:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The markdown files inside the &lt;code&gt;/pages&lt;/code&gt; directory needed to have a template name indicated as an attribute in the front-matter section.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;gatsby-node.js&lt;/code&gt; file you put the code on how the actual files should be handled. With a GraphQL query, all pages can be retrieved and you can transform the data into the format you require in your template file (e.g. in my case I had to extract the &lt;em&gt;next&lt;/em&gt; and &lt;em&gt;previous&lt;/em&gt; articles). &lt;/li&gt;
&lt;li&gt;The template file, located in a &lt;code&gt;/templates&lt;/code&gt; directory allows query (again through GraphQL) an object defined (in my case an article and the adjacent articles) in the previous step can be obtained and transformed into an HTML page through React components.&lt;/li&gt;
&lt;li&gt;Configure a shit tone of plugins to handle images, code highlighting, relocation of files, etc. in the &lt;code&gt;gatsby-config.js&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I don't know about you, but I found it not developer-friendly. Things are scattered everywhere, it is unclear why you have to use GraphQL everywhere, and the plugins obfuscate the actual logic. SvelteKit is much more intuitive. The &lt;code&gt;/routes&lt;/code&gt; directory holds the code for rendering the pages, not the markdown files. It combines the &lt;code&gt;/templates&lt;/code&gt; and parts of the &lt;code&gt;gatsby-node.js&lt;/code&gt; corresponding to a page in one place. This co-location makes much more sense. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;[slug].json.js&lt;/code&gt; file contains the logic of transforming a markdown file in a JSON structure that can be sent to a browser. &lt;code&gt;slug&lt;/code&gt; corresponds to the filename without the extension. Instead of installing several plugins, I only had to install three npm packages, nothing more, nothing less.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;front-matter&lt;/code&gt;: to read additional attributes at the top of the markdown file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;markedjs&lt;/code&gt;: parse markdown into HTML.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;prismjs&lt;/code&gt;: add code highlighting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The resulting JSON string is returned at the end of the function. On the &lt;code&gt;[slug].svelte&lt;/code&gt; side, we need to fetch the generated JSON and return it in the &lt;code&gt;props&lt;/code&gt;. We can then expose the property as shown below. This allows us to use the &lt;code&gt;article&lt;/code&gt; object in the rendering code of this svelte plugin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script context="module"&amp;gt;
  export async function load({ page, fetch }) {
    const article = await fetch(`/writing/&amp;amp;{page.params.slug}.json`);
    if (res.ok) return { props: { article } };
  }
&amp;lt;/script&amp;gt;

&amp;lt;script&amp;gt;
  export let article;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the above was sufficient to have my Gatsby website transformed into a SvelteKit website, almost. There were small issues left. For instance, images on the articles were wrapped in a &lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt; tag, which made a &lt;a href="https://dev.to/writing/css-layout-patterns#dynamic-centered-layout"&gt;styling element&lt;/a&gt; I used impossible (until the &lt;a href="https://drafts.csswg.org/selectors-4/#relational"&gt;&lt;code&gt;:has()&lt;/code&gt;&lt;/a&gt; gets released). But luckily you can alter how &lt;code&gt;markedjs&lt;/code&gt; works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;marked&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;markedjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="nx"&gt;marked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paragraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With a few more of these alterations (lazy loading of images and anchor tags on headings), I was able to create the same website in SvelteKit. Or even a better website, with &lt;a href="https://drafts.csswg.org/selectors-4/#relational"&gt;less code&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Up until this moment, the development experience (DX) of Svelte and SvelteKit has been tremendous. Don't get me wrong, I loved Gatsby the first time I used it. But after working with Svelte(Kit) I found its DX inferior to SvelteKit. For UI components that do not require (a lot of) state management, Svelte is also superior to React. But when moving to SvelteKit, you loose the community and plugins of Gatsby. This makes Gatsby superior for less tech-savvy people, or when you want to move quicker and do not want to control each detail. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are curious about the result, check the code on the open &lt;a href="https://github.com/kevtiq/crinkle.dev"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>MLOPs Lifecycles</title>
      <author>D\sTro</author>
      <pubDate>Sat, 10 Apr 2021 17:52:34 +0000</pubDate>
      <link>https://dev.to/slimdestro/mlops-lifecycles-441h</link>
      <guid>https://dev.to/slimdestro/mlops-lifecycles-441h</guid>
      <description>&lt;p&gt;MLOPs life cycle 🔃 ⤵&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Define business need &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Getting datasets ready. This phase includes data cleaning, labelling, pixel optimisation, open source datasets and enterprise data-lakes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Model development (code part) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Training and optimisations of model &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deployment(uat/prod) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User interface and API development to let user interact with the model &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Monitoring both model and system resources&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Insights and analytics&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continuous model training: deployed one time model can work for few time-frames and hence it needs retraining on new data &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;world has changed. We use CI/CD tools like Jenkins and Docker/cubectl for code automation &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security and protection of ML model against known vulnerability. This is the point most people ignore&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-Thanks&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>devops</category>
      <category>datascience</category>
      <category>deeplearning</category>
    </item>
  </channel>
</rss>
