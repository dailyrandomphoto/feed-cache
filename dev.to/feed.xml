<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🚀 React Boilerplate with TypeScript and Tailwind CSS for 2021</title>
      <author>Remi W.</author>
      <pubDate>Fri, 13 Aug 2021 17:56:04 +0000</pubDate>
      <link>https://dev.to/ixartz/react-boilerplate-with-typescript-and-tailwind-css-for-2021-k53</link>
      <guid>https://dev.to/ixartz/react-boilerplate-with-typescript-and-tailwind-css-for-2021-k53</guid>
      <description>&lt;p&gt;Recently, I've built several projects in React with Next JS. For each projects, I was setting up the same dependencies again and again. So, I thought it could be great a boilerplate for 2021 and share it to the community.&lt;/p&gt;

&lt;p&gt;Built with developer-first in mind with tools to improve productivity like ESLint linter, Prettier code formatter and VSCode configuration. Built for 2021 with Next JS and Tailwind CSS. Finally, build for production with one-click deployment and with SEO-ready.&lt;/p&gt;

&lt;p&gt;You can check a live demo at this url : &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/"&gt;React Boilerplate with TypeScript and Tailwind CSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check the source code on GitHub: &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;React Boilerplate GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Already more than 400+ ⭐ stars on Github...&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ixartz"&gt;
        ixartz
      &lt;/a&gt; / &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;
        Next-js-Boilerplate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🚀 Boilerplate and Starter for Next.js 11+, Tailwind CSS 2.0 and TypeScript ⚡️ Made with developer experience first: Next.js + TypeScript + ESLint + Prettier + Husky + Lint-Staged + VSCode + Netlify + PostCSS + Tailwind CSS
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Boilerplate and Starter for Next JS 11+, Tailwind CSS 2.0 and TypeScript &lt;a href="https://twitter.com/ixartz" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/22898de970db41d476e65546387c7b5147565904f1a4197980bb0e3eb30eb8ab/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f636c6f7564706f7373652e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f7725323025343049786172747a" alt="Twitter"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOL9mcNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ixartz/Next-js-Boilerplatepublic/assets/images/nextjs-starter-banner.png%3Fraw%3Dtrue" alt="Next js starter banner"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;🚀 Boilerplate and Starter for Next.js, Tailwind CSS and TypeScript ⚡️ Made with developer experience first: Next.js, TypeScript, ESLint, Prettier, Husky, Lint-Staged, VSCode, Netlify, PostCSS, Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Clone this project and use it to create your own &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; project. You can check a &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;Next js templates demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
Features&lt;/h3&gt;

&lt;p&gt;Developer experience first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
🔥 &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; for Static Site Generator&lt;/li&gt;
&lt;li&gt;
🎨 Integrate with &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt; (w/ JIT mode)&lt;/li&gt;
&lt;li&gt;
💅 PostCSS for processing Tailwind CSS and integrated to &lt;code&gt;styled-jsx&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
🎉 Type checking &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
✅ Strict Mode for TypeScript and React 17&lt;/li&gt;
&lt;li&gt;
✏️ Linter with &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt; (default NextJS, NextJS Core Web Vitals and Airbnb configuration)&lt;/li&gt;
&lt;li&gt;
🛠 Code Formatter with &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🦊 Husky for Git Hooks&lt;/li&gt;
&lt;li&gt;
🚫 Lint-staged for running linters on Git staged files&lt;/li&gt;
&lt;li&gt;
🗂 VSCode configuration: Debug, Settings, Tasks and extension for PostCSS, ESLint, Prettier, TypeScript&lt;/li&gt;
&lt;li&gt;
🤖 SEO metadata, JSON-LD and…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ixartz/Next-js-Boilerplate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Here is the features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;🔥 Instant feedback with Next JS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🚀 Routing with Next JS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;💅 Styled with Tailwind CSS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✏️ Linter with ESLint and Code formatter with Prettier&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🎉 Type checking with Typescript&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ One-click deploy on Vercel or Netlify&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🤖 SEO friendly&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🚀 Production-ready&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ixartz"&gt;
        ixartz
      &lt;/a&gt; / &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;
        Next-js-Boilerplate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🚀 Boilerplate and Starter for Next.js 11+, Tailwind CSS 2.0 and TypeScript ⚡️ Made with developer experience first: Next.js + TypeScript + ESLint + Prettier + Husky + Lint-Staged + VSCode + Netlify + PostCSS + Tailwind CSS
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Boilerplate and Starter for Next JS 11+, Tailwind CSS 2.0 and TypeScript &lt;a href="https://twitter.com/ixartz" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/22898de970db41d476e65546387c7b5147565904f1a4197980bb0e3eb30eb8ab/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f636c6f7564706f7373652e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f7725323025343049786172747a" alt="Twitter"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOL9mcNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ixartz/Next-js-Boilerplatepublic/assets/images/nextjs-starter-banner.png%3Fraw%3Dtrue" alt="Next js starter banner"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;🚀 Boilerplate and Starter for Next.js, Tailwind CSS and TypeScript ⚡️ Made with developer experience first: Next.js, TypeScript, ESLint, Prettier, Husky, Lint-Staged, VSCode, Netlify, PostCSS, Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Clone this project and use it to create your own &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; project. You can check a &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;Next js templates demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
Features&lt;/h3&gt;

&lt;p&gt;Developer experience first:&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;
🔥 &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; for Static Site Generator&lt;/li&gt;
&lt;li&gt;
🎨 Integrate with &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt; (w/ JIT mode)&lt;/li&gt;
&lt;li&gt;
💅 PostCSS for processing Tailwind CSS and integrated to &lt;code&gt;styled-jsx&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
🎉 Type checking &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
✅ Strict Mode for TypeScript and React 17&lt;/li&gt;
&lt;li&gt;
✏️ Linter with &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt; (default NextJS, NextJS Core Web Vitals and Airbnb configuration)&lt;/li&gt;
&lt;li&gt;
🛠 Code Formatter with &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🦊 Husky for Git Hooks&lt;/li&gt;
&lt;li&gt;
🚫 Lint-staged for running linters on Git staged files&lt;/li&gt;
&lt;li&gt;
🗂 VSCode configuration: Debug, Settings, Tasks and extension for PostCSS, ESLint, Prettier, TypeScript&lt;/li&gt;
&lt;li&gt;
🤖 SEO metadata, JSON-LD and…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ixartz/Next-js-Boilerplate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>react</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>#100daysofcode [Day -03]</title>
      <author>Al Siam</author>
      <pubDate>Fri, 13 Aug 2021 17:55:38 +0000</pubDate>
      <link>https://dev.to/alsiamworld/100daysofcode-day-03-16ea</link>
      <guid>https://dev.to/alsiamworld/100daysofcode-day-03-16ea</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-03"&gt;
  &lt;/a&gt;
  100daysofcode [Day -03]
&lt;/h1&gt;

&lt;p&gt;Today I've solved some problems.&lt;br&gt;
Getting Fibonacci numbers.&lt;br&gt;
Getting Fibonacci numbers using recursive.&lt;br&gt;
&amp;amp; and some more problems.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_jUK7me8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6q45tnhjb20uq477e5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_jUK7me8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6q45tnhjb20uq477e5r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZAy1Wvj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3j8tptr4d1v7ozeveuf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZAy1Wvj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3j8tptr4d1v7ozeveuf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#devcommunity-javascript-programminglife"&gt;
  &lt;/a&gt;
  DEVCommunity #javascript #ProgrammingLife
&lt;/h1&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Best Book for C++</title>
      <author>Mohamed Hisham Abdelzaher</author>
      <pubDate>Fri, 13 Aug 2021 17:39:08 +0000</pubDate>
      <link>https://dev.to/mh0386/best-book-for-c-23ok</link>
      <guid>https://dev.to/mh0386/best-book-for-c-23ok</guid>
      <description>&lt;p&gt;I'm a computer science student and I'm going to study oop in c++ on the second level, and I was looking for a C++ book, and I found people who advised me to buy the book "C++ how to program" and found it 2017 version, i.e. it doesn't have C++ 17 or C++ 20, is that normal? Why didn't the writer release more recent copies of the book to include C++ 17 and C++ 20 update?&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>cpp</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>ADHD in the workplace — 3 ways you can help devs </title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 13 Aug 2021 17:37:29 +0000</pubDate>
      <link>https://dev.to/linearb/adhd-in-the-workplace-3-ways-you-can-help-devs-4bm4</link>
      <guid>https://dev.to/linearb/adhd-in-the-workplace-3-ways-you-can-help-devs-4bm4</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was written exclusively for the Dev Interrupted by Krzysztof Waraksa - an active and participating member of the Dev Interrupted Discord.&lt;/em&gt;&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
In a company with 100 employees, there can be over 10 individuals with some form of neurodiversity such as ADHD, Autism, Dyslexia, or others.&lt;/p&gt;

&lt;p&gt;While neurodiversity exists on a spectrum of intensity for each person, it’s still a significant number of people that could easily not be able to be working to their full potential because of poor accommodations. And according to &lt;a href="https://webarchive.nationalarchives.gov.uk/20210104113255/https://archive.acas.org.uk/index.aspx?articleid=6676"&gt;acas.org.uk, 1 in 7 adults are neurodivergent. &lt;/a&gt;So how can you help make your teams and offices friendlier and less hostile to these employees?&lt;/p&gt;

&lt;p&gt;Fresh from the Dev Interrupted discord, we’re taking a look at what the Dev Interrupted community has to say about handling neurodivergence in the workplace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hold-open-dialogs-with-your-employees"&gt;
  &lt;/a&gt;
  Hold open dialogs with your employees
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;“I’m the neuro-divergent individual at my work. ADHD and Anxiety disorder. After my concussion last year I now have vertigo. The big thing is overcoming the stigma and asking for what I need (and being honest with myself about what I can do). I’ve found my employer very accommodating. &lt;strong&gt;I would suggest that companies have open dialogs about it so employees are comfortable to come forward&lt;/strong&gt;&lt;/em&gt;." — Discord member Jim MCKeeth&lt;/p&gt;

&lt;p&gt;An open dialog with the employees of your company and teams regarding neurodiversity can indeed be a great help — Not just for anyone who is confirmed to be neurodivergent! Awareness makes it so that people can learn how to accept, understand, and work with people with neurodiversity.&lt;/p&gt;

&lt;p&gt;Reducing stigma and myths regarding certain disorders such as ADHD, where one common belief is that adults cannot have it because of the mental image of ADHD only being present in young hyperactive children, is highly important! Knowing that your team members can understand how you function and how they can best approach you if you’re needed for something can prevent a lot of unnecessary distress and conflict.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a simple example:&lt;/strong&gt; Imagine that you have a colleague named Brian. Brian has problems switching tasks on a whim because of his ADHD. He needs to mentally prepare himself for each task and carefully convince his brain to focus on the task at hand.&lt;/p&gt;

&lt;p&gt;Now imagine that you have an impromptu meeting, and Brian has to be there. The meeting is happening right now, so you go up to him and tell him to come to the meeting. Brian had no time to mentally prepare for a task-switch, and may be left frustrated and unfocused afterwards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what should you do instead?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s say that Brian told the team that he has trouble suddenly switching tasks, and requested that you avoid making him have to do so unless absolutely necessary. Instead of having the meeting happen right at the moment that the majority agreed it would happen, you could agree to have it happen in 5 minutes, and give Brian a heads up.&lt;/p&gt;

&lt;p&gt;5 minutes can already be enough time for Brian to be able to mentally prepare to switch tasks, as he can then finish up the segment he was working on and move onto the meeting instead.&lt;/p&gt;

&lt;p&gt;Of course, Ideally, you’d have most of your meetings planned out a few hours before they happen instead, as that way you can prevent having to cause any potential issues in the first place.&lt;/p&gt;

&lt;p&gt;I can personally say that being aware of the difficulties my colleagues can experience, and them knowing what difficulties I may have, has made our ability to work together much more smooth. It’s far too common for people to experience constant frustration because we’re expecting to be talking and working with neurotypical people, however by being considerate and understanding towards each other’s struggles, we can reduce friction and create a more positive experience for everybody involved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#actively-support-the-individual"&gt;
  &lt;/a&gt;
  Actively support the individual
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;“I had an employee a few years ago with PTSD from time in the Marines. &lt;strong&gt;We worked together to make sure that he had a place where he could work, and also to make sure that everyone knew how to understand him&lt;/strong&gt;. He is a great guy, but could seem severe and prickly if you just looked at him, which tended to keep people away from him. Communication with those he worked with, and some really easy interventions on my part, helped him to have a very successful time with us. I remain friends with him today&lt;/em&gt;.” — Discord member Drdwilcox&lt;/p&gt;

&lt;p&gt;While making the team aware of how to go about handling neurodivergence is one part of bringing a comfortable environment, it is equally important to give focused attention to the employee in question. Approaching them when they seem to be struggling, working together with them to see what could help them, and discovering what their needs are.&lt;/p&gt;

&lt;p&gt;This is something that I wished had happened more throughout my own life, even before I knew of my own ADHD, because even if you don’t know that someone has it you can often notice that something is off when looking at how they’re performing. And usually, they’re underperforming!&lt;/p&gt;

&lt;p&gt;Even if you know that none of your employees or colleagues have any disorders, it never hurts to check in with them when you can and make sure that nothing is holding them back. As a &lt;a href="https://www.sciencedirect.com/science/article/abs/pii/S0738399109001621"&gt;review study of burnout prevention programs states &lt;/a&gt;, 80% of all programs successfully reduced cases of burnout in individuals. Imagine how much help individualized support could provide!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-workplace-less-hostile"&gt;
  &lt;/a&gt;
  Making the workplace less hostile
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_BnuJDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4000/0%2AI-9Xk9Ff8mQYQaxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_BnuJDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4000/0%2AI-9Xk9Ff8mQYQaxl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open-plan and noisy offices, my mortal enemies.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many people can tolerate an open plan office that often comes with an array of little annoyances, some even actually quite like it for the social aspect. But they’re poison to people with ADHD, who already struggle with keeping themselves from being a distraction from their own work.&lt;/p&gt;

&lt;p&gt;It doesn’t help trying to hold your developers accountable when there’s distracting noise being made. So what sort of accommodations for ADHD can you provide?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“I hate asking people to stop making noises. So I don’t, and when I can’t take it anymore it comes out in bad ways, like giving people dirty looks. &lt;strong&gt;Yes, we can talk to people, but then I’d be doing it all the time. And I might be the only one, so now I’m that guy who’s always bugging people&lt;/strong&gt;. Why not just ask people to be considerate? Take off your headphones and put them on the desk. Can you hear any noise out of them? Then they’re loud and everyone else can hear them.”&lt;/em&gt; — Discord Member Scothannen&lt;/p&gt;

&lt;p&gt;Confrontation can be a difficult thing to do for people that have disorders that affect their ability to socialize, such as individuals with autism. Having to constantly tell people to be quiet or to tone something down is a lot of work and can also strain relationships with coworkers who might just get annoyed- Especially if there was no agreement regarding noise in the office.&lt;/p&gt;

&lt;p&gt;If possible, having a space where employees can move to that is meant to be total silence is one solution. A quiet room — similar to how some trains have silent cabins. If you want to be in an undisturbed area, you can go work there instead of the main area. This isn’t a realistic solution for every company though, some simply don’t have the space to do this or need high-powered workstations versus a portable laptop.&lt;/p&gt;

&lt;p&gt;Providing noise-cancelling headphones is another solution, but that comes with the problem that people will come by to disturb you by tapping you on the shoulder instead. Perhaps having a simple “Do Not Disturb” card that is easily seen on the desk, where there is a mutual understanding to not go and tap the person on the shoulder. That way one can differentiate between a colleague that is alright with being disturbed while having their headphones on, and a colleague that really isn’t.&lt;/p&gt;

&lt;p&gt;All in all, it all boils down to three words: Communicate, Support, Reduce. As long as you can actively communicate with your team about neurodivergence, and you actively offer support and look for feedback from neurodivergent individuals, you’re already taking several steps that many would never even consider. With time and experience you can then learn and work on how you can prevent any issues that your neurodivergent coworkers could end up dealing with, and while it may be impossible to completely eliminate a problem you can certainly reduce the stress.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/devinterrupted"&gt;&lt;strong&gt;Liked this topic? Have anything you’d like to add? Join our discussions in the Dev Interrupted Discord today!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2esj52Mx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2Ad8w3ALr6Ybm4tvxt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2esj52Mx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2Ad8w3ALr6Ybm4tvxt.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is partnering with Dzone to host &lt;strong&gt;INTERACT&lt;/strong&gt;: An interactive, community-driven, digital conference on September 30th - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AMIrUt41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3axbxktjzec4aoyyiet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AMIrUt41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3axbxktjzec4aoyyiet.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/adhd-in-the-workplace-3-ways-you-can-help/"&gt;https://devinterrupted.com&lt;/a&gt; on July 21, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>devops</category>
      <category>culture</category>
      <category>productivity</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 13 Aug 2021 17:36:53 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-46ik</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-46ik</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week, what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Cleaning up your workspace... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Congrats in advance!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o7aD2saalBwwftBIY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o7aD2saalBwwftBIY/giphy.gif" alt="Happy Friday the 13th"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>How to improve the Arch Linux package manager</title>
      <author>Richard Halford</author>
      <pubDate>Fri, 13 Aug 2021 17:01:53 +0000</pubDate>
      <link>https://dev.to/rshalford/how-to-improve-the-arch-linux-package-manager-1fo0</link>
      <guid>https://dev.to/rshalford/how-to-improve-the-arch-linux-package-manager-1fo0</guid>
      <description>&lt;p&gt;Pacman is the package manager for Arch Linux. And out of the box, it's just black and white, and single threaded all over. But, even if you're one to tout "I use Arch btw." and what it's like living on the bleeding edge with it's rolling release updates. You'll likely still want to make those updates take as little time as possible, with important information being colour highlighted.&lt;/p&gt;

&lt;p&gt;Luckily pacman comes with a way to make both of these the case, with no more than an edit to it's configuration file.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#colour-output"&gt;
  &lt;/a&gt;
  Colour Output
&lt;/h2&gt;

&lt;p&gt;To make sure pacman produces a colourful output in the terminal. Open up &lt;code&gt;/etc/pacman.conf&lt;/code&gt; in your editor of choice, with &lt;code&gt;sudo&lt;/code&gt;/&lt;code&gt;doas&lt;/code&gt; privileges. Then simply delete the &lt;strong&gt;&lt;em&gt;#&lt;/em&gt;&lt;/strong&gt; before &lt;code&gt;Color&lt;/code&gt;, under the &lt;code&gt;# Misc options&lt;/code&gt; sub-heading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="c"&gt;# Misc options&lt;/span&gt;
  &lt;span class="c"&gt;#UseSyslog&lt;/span&gt;
- &lt;span class="c"&gt;#Color&lt;/span&gt;
+ Color
  &lt;span class="c"&gt;#TotalDownload&lt;/span&gt;
  CheckSpace
  &lt;span class="c"&gt;#VerbosePkgLists&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now save and exit, and the next time you update your system packages, pacman will use the same colour scheme as your terminal/tty.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#multithreaded-performance"&gt;
  &lt;/a&gt;
  Multi-threaded Performance
&lt;/h2&gt;

&lt;p&gt;With the release of Pacman v6.0.0, comes the ability to have parallel package downloads. Meaning all of your small system packages can be downloaded, all whilst getting the latest Linux kernel.&lt;/p&gt;

&lt;p&gt;Because of reasons beyond the scope of this article (&lt;em&gt;read: I don't feel like writing about it&lt;/em&gt;), this &lt;strong&gt;shouldn't&lt;/strong&gt; throttle the speed of each download stream. As the Arch repository mirrors you're getting your package updates from, probably aren't sending packets of data to you as fast as your network connection can handle. Making parallel downloads only seem like a good thing. With resulting average install times that are &lt;strong&gt;less&lt;/strong&gt; than just downloading package updates sequentially.&lt;/p&gt;

&lt;p&gt;To add this latest feature, you will have to make the following edit, just like with the &lt;code&gt;Color&lt;/code&gt; option mentioned above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="c"&gt;# Misc options&lt;/span&gt;
  &lt;span class="c"&gt;#UseSyslog&lt;/span&gt;
  Color
  &lt;span class="c"&gt;#TotalDownload&lt;/span&gt;
  CheckSpace
  &lt;span class="c"&gt;#VerbosePkgLists&lt;/span&gt;
+ ParallelDownloads &lt;span class="o"&gt;=&lt;/span&gt; 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your install of Arch Linux comes after the release of Pacman v6.0.0, you should find that &lt;code&gt;ParallelDownloads&lt;/code&gt; option is already there. And just needs to be &lt;em&gt;'un-commented'&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The number you assign to &lt;code&gt;ParallelDownloads&lt;/code&gt; denotes how many download streams you want to enable. By default, this value is set equal to 5, but can be changed depending on your system's hardware. A rule of thumb being adopted seems to be to match the number of threads on your CPU. But, you may find that testing above this may be beneficial, without resulting in performance drops.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://www.xhalford.com/how-to-improve-the-arch-linux-package-manager/"&gt;xhalford.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>archlinux</category>
    </item>
    <item>
      <title>How does AI bounding box detection work?</title>
      <author>Gant ℒ𝒶𝒷ℴ𝓇𝒹ℯ </author>
      <pubDate>Fri, 13 Aug 2021 16:29:49 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-does-ai-bounding-box-detection-work-2je6</link>
      <guid>https://dev.to/aws-builders/how-does-ai-bounding-box-detection-work-2je6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#learn-in-30-seconds"&gt;
  &lt;/a&gt;
  🧠 Learn in 30 seconds
&lt;/h3&gt;

&lt;p&gt;It looks so simple when AI does it right?&lt;/p&gt;

&lt;p&gt;But the AI doesn't give you an image, it gives you data.  It's up to you to make it look simple.  The results you get are presented in a way so you can choose specific items from all the returned results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sfZQctsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psdexutcx4a3vgzjkwg1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sfZQctsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psdexutcx4a3vgzjkwg1.jpg" alt="Object Detection Balloon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might think a box gives you four values, and you're right, but it only gives you TWO points.  From that you can infer a box to draw that identifies the object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fo1RLlVj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzwl92lixo78ckv2edfg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fo1RLlVj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzwl92lixo78ckv2edfg.png" alt="Object Detection Math 2 points"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However... it very rarely gives you one box.  Lots of times you get a whole bunch of boxes for you to chose from.&lt;/p&gt;

&lt;p&gt;This is because the model is often trained to return X results no matter what, and sometimes it's meant to detect a whole wide array of objects, not just one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8mgqoIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/haa609wnm0kqblp2eymq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8mgqoIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/haa609wnm0kqblp2eymq.png" alt="Overlap Object Detection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many boxes are identified by what they are detecting, like people or tables etc.  But you might have a photo with three people in it, and it returns 30 people boxes.  Each of these boxes generally give you a score of confidence, and it's your job to identify if they are identifying the same object, or separate objects.&lt;/p&gt;

&lt;p&gt;There's some well known algorithms to take the best of the best.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VazVR2gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3nr6z40b0sdn3u6r6h0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VazVR2gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3nr6z40b0sdn3u6r6h0.jpg" alt="Object Detection Scores"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have the boxes you're interested in, you can draw them easily with a canvas.  In JavaScript you just overlay a canvas on the image and draw rectangles there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJMYapvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zenkkd6wg65pp1y4et4j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJMYapvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zenkkd6wg65pp1y4et4j.jpg" alt="Detection overlay in JavaScript Web"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final result lets you draw clean object detection on websites.  It's pretty cool and easy to do this on images and video.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UkqPd_Ft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts3jvnfktkldq36u781w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UkqPd_Ft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts3jvnfktkldq36u781w.jpg" alt="Object Detection with nonMaxSuppression"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want the code to do this?  It's all in Chapter 6 of my book with a deep explanation. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3dR3vpY"&gt;Buy a copy of the book&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WvNuhv7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy96lrsdpbeuj8blrna0.jpg" alt="Book Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm looking forward to what you can do with your very own AI object detection!  Don't forget to tag your cool stuff with the #MadeWithTFJS Hashtag on Twitter!&lt;/p&gt;

&lt;p&gt;And don't forget to follow me for more AI tidbits like this!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iOiplNHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7611cgyuta5vnupe1k73.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iOiplNHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7611cgyuta5vnupe1k73.gif" alt="Rock Paper Scissors in TensorFlow.js"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ai</category>
      <category>javascript</category>
      <category>tensorflowjs</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>I Joined the Contentful Developer Relations Team</title>
      <author>Brittany Walker</author>
      <pubDate>Fri, 13 Aug 2021 16:28:30 +0000</pubDate>
      <link>https://dev.to/contentful/i-joined-the-contentful-developer-relations-team-3ne6</link>
      <guid>https://dev.to/contentful/i-joined-the-contentful-developer-relations-team-3ne6</guid>
      <description>&lt;p&gt;We have welcomed Brittany, also known as &lt;a href="https://twitter.com/musicalwebdev"&gt;@musicalwebdev&lt;/a&gt;, to the Developer Relations team at Contentful! From event planning to legal administration to software development, Brittany’s path to developer relations has been an interesting one. Read on to learn more about her career journey, involvement in the tech community and love of musicals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-were-some-of-your-first-experiences-with-web-development"&gt;
  &lt;/a&gt;
  What were some of your first experiences with web development?
&lt;/h2&gt;

&lt;p&gt;I started learning how to code around the age of 11 through &lt;a href="https://www.neopets.com/"&gt;Neopets&lt;/a&gt;! Neopets is an online, virtual world where you take care of virtual animals. Within the world, you can participate in a variety of activities such as running a shop, playing games and chatting in discussion forums. One major feature of Neopets is guilds, which are private clubs where leaders create games and manage a private discussion board. &lt;/p&gt;

&lt;p&gt;Guild pages, along with user profiles and shops, are customizable using HTML and CSS. I started designing guild pages and, in exchange, I was paid in virtual paint brushes — a very expensive and sought-after item in the Neopets world. Through Neopets, I learned HTML, CSS, Paint and eventually Photoshop. I had a ton of fun running my own Neopets guild design business. At the time, I had no idea that web development was an actual career! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-made-you-want-to-change-your-career-to-tech"&gt;
  &lt;/a&gt;
  What made you want to change your career to tech?
&lt;/h2&gt;

&lt;p&gt;I worked at a law firm in a legal practice management in 2016. My department at the firm was assigned specific practice areas (such as corporate, energy, etc.), and we helped lawyers manage those groups. Our tasks included writing marketing materials, creating financial reports and running meetings. Due to the nature of our jobs, we used a lot of different software programs and needed to combine data from many places to come up with one report. &lt;/p&gt;

&lt;p&gt;I started thinking that it would be nice if there were one program that could pull data from all of our different tools into one place. I wondered if I could build something like that. At the same time, I wanted to build a website where I could write reviews for musicals that I had seen, since I was regularly going to New York City to see shows a few times a year. I attempted to start a website but got confused with all of the unusual characters I saw everywhere (it was jQuery!). So with two goals in mind, I started learning how to code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-you-start-learning-how-to-code"&gt;
  &lt;/a&gt;
  How did you start learning how to code?
&lt;/h2&gt;

&lt;p&gt;After trying to learn how to code on my own for a few months through FreeCodeCamp, Udemy and other platforms, I decided to attend a meetup. In January 2017, I went to my first Meetup to learn about JavaScript and jQuery. I didn’t know at the time, but the Meetup was actually hosted by a coding bootcamp named &lt;a href="https://www.thinkful.com/"&gt;Thinkful&lt;/a&gt;. After the Meetup — which I thought was awesome — I signed up for a free trial for Thinkful and eventually signed up for the bootcamp.&lt;/p&gt;

&lt;p&gt;Sometime after starting the bootcamp, I created my Twitter account, and thus &lt;a href="https://twitter.com/musicalwebdev"&gt;musicalwebdev&lt;/a&gt; was born. The only downside to being known as the “Musical Web Dev″ is that many assume that I have some sort of musical ability. Unfortunately, my musical abilities when it comes to singing and dancing are pretty non-existent.However, I’m extremely good at rapping songs from Hamilton. 😎 So of course, one of my first projects was a &lt;a href="https://brittanyrw.github.io/hamilton-quiz-app/"&gt;Hamilton Quiz&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I worked as a web developer at a digital agency and as a software engineer at a retail company after the bootcamp. I never ended up making anything related to legal tech, but I have made a lot of musical-related projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-you-get-involved-in-your-local-tech-community"&gt;
  &lt;/a&gt;
  How did you get involved in your local tech community?
&lt;/h2&gt;

&lt;p&gt;I started getting involved in the Washington, DC, tech community during my coding bootcamp. We had a requirement to go to two or three meetups per month; however, I misread the requirement and thought it was two per week (oops!). I ended up going to a ton of awesome DC meetups and meeting a lot of really cool people. &lt;/p&gt;

&lt;p&gt;Everyone had a mentor at the coding bootcamp. Although Thinkful operates online, it wants to establish an in-person presence in various cities. It hosts free beginner-level coding Meetups in the DC area. My mentor for Thinkful just so happened to be in charge of the DC meetups, so I went to many of his events over time. Eventually, I started teaching at the Meetups as well, and in 2018, became the main instructor for the Thinkful DC meetups and taught beginner coding Meetups almost every week. &lt;/p&gt;

&lt;p&gt;Around the same time, I started as a front-end lead for &lt;a href="https://www.womenwhocode.com/dc"&gt;Women Who Code DC&lt;/a&gt;. The front-end team plans two to three front-end related meetups per month for women in the DC area. Through both opportunities, I’ve mentored many people from underrepresented groups that are learning to code or are still early in their tech careers. In addition to Women Who Code DC, I help plan events for &lt;a href="https://www.meetup.com/Black-Code-Collective/"&gt;Black Code Collective DC&lt;/a&gt; and have been an instructor and mentor for &lt;a href="https://www.thegcodehouse.com/"&gt;G{Code} House&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#musicals-have-been-playing-a-big-part-in-your-tech-journey-how-did-you-get-into-them"&gt;
  &lt;/a&gt;
  Musicals have been playing a big part in your tech journey, how did you get into them?
&lt;/h2&gt;

&lt;p&gt;In fifth grade, my mom bought a VHS tape of Grease that — apparently — I absolutely loved. I would carry the tape in my backpack and, when I went to friends’ houses after school, I would make them watch it with me. Over the next few years, I watched as many movie musicals as possible and saw my first live musical, Lion King on Broadway, in my senior year of high school.&lt;/p&gt;

&lt;p&gt;In college, I studied government and was lucky to volunteer as an usher at theaters where Broadway touring shows were performed. Through volunteering, I saw Wicked 11 times. 😅 Once I learned how to code, I wanted to make projects about my favorite hobby. My most recent musical-related project is &lt;a href="https://theaterlog.com/"&gt;TheaterLog&lt;/a&gt;, which I made to keep track of the musicals and plays I have seen since 2010.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wow-what-an-interesting-story-any-additional-words"&gt;
  &lt;/a&gt;
  Wow, what an interesting story! Any additional words?
&lt;/h2&gt;

&lt;p&gt;I feel lucky to join the awesome Developer Relations team at Contentful! If you want to keep up to date with what I am doing, you can find me on &lt;a href="https://twitter.com/musicalwebdev"&gt;Twitter&lt;/a&gt;, at a local Washington DC tech event or follow what shows I am seeing at &lt;a href="https://theaterlog.com/"&gt;TheaterLog&lt;/a&gt;. 🎵&lt;/p&gt;

</description>
      <category>career</category>
      <category>womenintech</category>
      <category>devrel</category>
    </item>
    <item>
      <title>3 Not-So-Obvious Ways to Stand Out On a Product Team As a Developer</title>
      <author>Michael Mangialardi</author>
      <pubDate>Fri, 13 Aug 2021 15:57:55 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/3-not-so-obvious-ways-to-stand-out-on-a-product-team-as-a-developer-2d20</link>
      <guid>https://dev.to/michaelmangial1/3-not-so-obvious-ways-to-stand-out-on-a-product-team-as-a-developer-2d20</guid>
      <description>&lt;p&gt;This article assumes the following:&lt;/p&gt;

&lt;p&gt;1) You are a developer on a software product&lt;br&gt;
2) You work closely with the “product team” (product manager, UX designers, technical product manager) for said software product&lt;/p&gt;

&lt;p&gt;If you’re in this environment, then I have 5 not-so-obvious ways that you can stand out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-share-updates-about-your-personal-life"&gt;
  &lt;/a&gt;
  1) Share updates about your personal life
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUZFC9Ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1529518152792-d08317b26e22%3Fixid%3DMnwxMjA3fDB8MHxzZWFyY2h8MXx8dmFjYXRpb24lMjBzZWxmaWV8ZW58MHx8MHx8%26ixlib%3Drb-1.2.1%26w%3D1000%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUZFC9Ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1529518152792-d08317b26e22%3Fixid%3DMnwxMjA3fDB8MHxzZWFyY2h8MXx8dmFjYXRpb24lMjBzZWxmaWV8ZW58MHx8MHx8%26ixlib%3Drb-1.2.1%26w%3D1000%26q%3D80" alt="personal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might be thinking: “What does this have to do with software development?”&lt;/p&gt;

&lt;p&gt;Well, the thing is the product team, even a technical product manager, is not going to someone who knows who to write code, and if they do, they clearly aren’t super fascinated by it (otherwise they’d switch positions).&lt;/p&gt;

&lt;p&gt;The point is that developers deserve a different purpose, and therefore, their interests and routines are different.&lt;/p&gt;

&lt;p&gt;Product team members are usually more consumed with meetings. Developers are left alone.&lt;/p&gt;

&lt;p&gt;Meetings includes small talk, which includes opening up somewhat to your personal life (what’s everyone doing this weekend, my son won his baseball tournament, etc. etc.)&lt;/p&gt;

&lt;p&gt;Developers simply don’t have as much opportunity to talk about these things. And let’s face it, we’re thought of as more introverted and bearers of a technical skill that is foreign to others. We’re different.&lt;/p&gt;

&lt;p&gt;So, how do you stand out? Be different the normal different.&lt;/p&gt;

&lt;p&gt;What’s one way to do that?&lt;/p&gt;

&lt;p&gt;Open up about your personal life.&lt;/p&gt;

&lt;p&gt;Chime in on the small talk in your meetings. And/or, post photos about your life (house projects, vacations, food, etc.) in the Slack/Teams channel.&lt;/p&gt;

&lt;p&gt;The more you open up, the less foreign you’ll seem as a developer. The less foregoing you seem, the more you’ll be approached and trusted with product team members.&lt;/p&gt;

&lt;p&gt;The more trusted you are, the more valuable you are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-treat-product-input-as-a-vital-skill-of-your-role"&gt;
  &lt;/a&gt;
  2) Treat product input as a vital skill of your role
&lt;/h2&gt;

&lt;p&gt;Let’s be honest. Learning new frameworks, technologies, libraries, coding patterns, etc. is great. I do it all the time.&lt;/p&gt;

&lt;p&gt;But, the product team doesn’t really care. I mean, they are in so far as they should let you work on tech debt and improvements. They should care that the technology is stable and scalable. They just don’t care whether it’s React or Vue, etc. That’s for the developers to decide.&lt;/p&gt;

&lt;p&gt;Quite frankly, the blogosphere moves faster into new frameworks and tools than a product team does, even when they prioritize tech debt.&lt;/p&gt;

&lt;p&gt;Given that a product team is not interested in the technical weeds per se, and that technological updates take time, it’s important to see how providing input on the direction of a product is arguably more important, certainly just as important as staying up with the latest technology trends.&lt;/p&gt;

&lt;p&gt;So, you should see providing input, from the perspective of a developer, as a vital skill.&lt;/p&gt;

&lt;p&gt;This means 1) attend all optional product meetings, 2) pay careful attention (don’t code with your camera off), 3) devour articles about UX/UI patterns, and 4) speak up (even if you just affirm what someone else said).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kl_RYn9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1609751352001-25b60439239c%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1000%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kl_RYn9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1609751352001-25b60439239c%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1000%26q%3D80" alt="zoom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you treat this skill seriously, the product team will seriously see you as valuable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-focus-on-your-unique-perspective"&gt;
  &lt;/a&gt;
  3) Focus on your unique perspective
&lt;/h2&gt;

&lt;p&gt;Piggy-backing off the previous point, it’s important that you realize the uniqueness (and hence the value) of your perspective as someone who can provide product input with technical foreknowledge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLFAIyAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1517148815978-75f6acaaf32c%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1000%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLFAIyAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1517148815978-75f6acaaf32c%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1000%26q%3D80" alt="coder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meaning, developers know what is technically possible when providing input on the design and direction of a product. They can suggest what the product team and users won’t think of.&lt;/p&gt;

&lt;p&gt;Spend some time thinking about ways to improve the experience of a product with technical solutions that may not have been thought of.&lt;/p&gt;

&lt;p&gt;This is in addition to the usual input of saying what is or isn’t feasible in a newly design project/feature.&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Algorithms and Data Structures</title>
      <author>Alexandre Freire</author>
      <pubDate>Fri, 13 Aug 2021 15:54:50 +0000</pubDate>
      <link>https://dev.to/alexandrefreire/javascript-algorithms-and-data-structures-2pa2</link>
      <guid>https://dev.to/alexandrefreire/javascript-algorithms-and-data-structures-2pa2</guid>
      <description>&lt;p&gt;By &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;https://github.com/trekhleb/javascript-algorithms&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-algorithms-and-data-structures"&gt;
  &lt;/a&gt;
  JavaScript Algorithms and Data Structures
&lt;/h1&gt;

&lt;p&gt;This repository contains JavaScript based examples of many&lt;br&gt;
popular algorithms and data structures.&lt;/p&gt;

&lt;p&gt;Each algorithm and data structure has its own separate README&lt;br&gt;
with related explanations and links for further reading (including ones&lt;br&gt;
to YouTube videos).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;☝ Note that this project is meant to be used for learning and researching purposes&lt;br&gt;
only, and it is **not&lt;/em&gt;* meant to be used for production.*&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#data-structures"&gt;
  &lt;/a&gt;
  Data Structures
&lt;/h2&gt;

&lt;p&gt;A data structure is a particular way of organizing and storing data in a computer so that it can&lt;br&gt;
be accessed and modified efficiently. More precisely, a data structure is a collection of data&lt;br&gt;
values, the relationships among them, and the functions or operations that can be applied to&lt;br&gt;
the data.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/linked-list"&gt;Linked List&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/doubly-linked-list"&gt;Doubly Linked List&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/queue"&gt;Queue&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/stack"&gt;Stack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/hash-table"&gt;Hash Table&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/heap"&gt;Heap&lt;/a&gt; - max and min heap versions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/priority-queue"&gt;Priority Queue&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/trie"&gt;Trie&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/tree"&gt;Tree&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/tree/binary-search-tree"&gt;Binary Search Tree&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/tree/avl-tree"&gt;AVL Tree&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/tree/red-black-tree"&gt;Red-Black Tree&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/tree/segment-tree"&gt;Segment Tree&lt;/a&gt; - with min/max/sum range queries examples&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/tree/fenwick-tree"&gt;Fenwick Tree&lt;/a&gt; (Binary Indexed Tree)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/graph"&gt;Graph&lt;/a&gt; (both directed and undirected)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/disjoint-set"&gt;Disjoint Set&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/bloom-filter"&gt;Bloom Filter&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#algorithms"&gt;
  &lt;/a&gt;
  Algorithms
&lt;/h2&gt;

&lt;p&gt;An algorithm is an unambiguous specification of how to solve a class of problems. It is&lt;br&gt;
a set of rules that precisely define a sequence of operations.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#algorithms-by-topic"&gt;
  &lt;/a&gt;
  Algorithms by Topic
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Math&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/bits"&gt;Bit Manipulation&lt;/a&gt; - set/get/update/clear bits, multiplication/division by two, make negative etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/binary-floating-point"&gt;Binary Floating Point&lt;/a&gt; - binary representation of the floating-point numbers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/factorial"&gt;Factorial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/fibonacci"&gt;Fibonacci Number&lt;/a&gt; - classic and closed-form versions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/prime-factors"&gt;Prime Factors&lt;/a&gt; - finding prime factors and counting them using Hardy-Ramanujan's theorem&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/primality-test"&gt;Primality Test&lt;/a&gt; (trial division method)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/euclidean-algorithm"&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/least-common-multiple"&gt;Least Common Multiple&lt;/a&gt; (LCM)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/sieve-of-eratosthenes"&gt;Sieve of Eratosthenes&lt;/a&gt; - finding all prime numbers up to any given limit&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/is-power-of-two"&gt;Is Power of Two&lt;/a&gt; - check if the number is power of two (naive and bitwise algorithms)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/pascal-triangle"&gt;Pascal's Triangle&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/complex-number"&gt;Complex Number&lt;/a&gt; - complex numbers and basic operations with them&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/radian"&gt;Radian &amp;amp; Degree&lt;/a&gt; - radians to degree and backwards conversion&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/fast-powering"&gt;Fast Powering&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/horner-method"&gt;Horner's method&lt;/a&gt; - polynomial evaluation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/matrix"&gt;Matrices&lt;/a&gt; - matrices and basic matrix operations (multiplication, transposition, etc.)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/euclidean-distance"&gt;Euclidean Distance&lt;/a&gt; - distance between two points/vectors/matrices&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/integer-partition"&gt;Integer Partition&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/square-root"&gt;Square Root&lt;/a&gt; - Newton's method&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/liu-hui"&gt;Liu Hui π Algorithm&lt;/a&gt; - approximate π calculations based on N-gons&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/fourier-transform"&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sets&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/cartesian-product"&gt;Cartesian Product&lt;/a&gt; - product of multiple sets&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/fisher-yates"&gt;Fisher–Yates Shuffle&lt;/a&gt; - random permutation of a finite sequence&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/power-set"&gt;Power Set&lt;/a&gt; - all subsets of a set (bitwise and backtracking solutions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/permutations"&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/combinations"&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/longest-common-subsequence"&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/longest-increasing-subsequence"&gt;Longest Increasing Subsequence&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/shortest-common-supersequence"&gt;Shortest Common Supersequence&lt;/a&gt; (SCS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/knapsack-problem"&gt;Knapsack Problem&lt;/a&gt; - "0/1" and "Unbound" ones&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt; - "Brute Force" and "Dynamic Programming" (Kadane's) versions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/combination-sum"&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Strings&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/hamming-distance"&gt;Hamming Distance&lt;/a&gt; - number of positions at which the symbols are different&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/levenshtein-distance"&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/knuth-morris-pratt"&gt;Knuth–Morris–Pratt Algorithm&lt;/a&gt; (KMP Algorithm) - substring search (pattern matching)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/z-algorithm"&gt;Z Algorithm&lt;/a&gt; - substring search (pattern matching)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/rabin-karp"&gt;Rabin Karp Algorithm&lt;/a&gt; - substring search&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/longest-common-substring"&gt;Longest Common Substring&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/regular-expression-matching"&gt;Regular Expression Matching&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Searches&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/search/linear-search"&gt;Linear Search&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/search/jump-search"&gt;Jump Search&lt;/a&gt; (or Block Search) - search in sorted array&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/search/binary-search"&gt;Binary Search&lt;/a&gt; - search in sorted array&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/search/interpolation-search"&gt;Interpolation Search&lt;/a&gt; - search in uniformly distributed sorted array&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sorting&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/bubble-sort"&gt;Bubble Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/selection-sort"&gt;Selection Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/insertion-sort"&gt;Insertion Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/heap-sort"&gt;Heap Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/merge-sort"&gt;Merge Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/quick-sort"&gt;Quicksort&lt;/a&gt; - in-place and non-in-place implementations&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/shell-sort"&gt;Shellsort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/counting-sort"&gt;Counting Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/radix-sort"&gt;Radix Sort&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Linked Lists&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/linked-list/traversal"&gt;Straight Traversal&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/linked-list/reverse-traversal"&gt;Reverse Traversal&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Trees&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/tree/depth-first-search"&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/tree/breadth-first-search"&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Graphs&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/depth-first-search"&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/breadth-first-search"&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/kruskal"&gt;Kruskal’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/dijkstra"&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/bellman-ford"&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/floyd-warshall"&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/detect-cycle"&gt;Detect Cycle&lt;/a&gt; - for both directed and undirected graphs (DFS and Disjoint Set based versions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/prim"&gt;Prim’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/topological-sorting"&gt;Topological Sorting&lt;/a&gt; - DFS method&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/articulation-points"&gt;Articulation Points&lt;/a&gt; - Tarjan's algorithm (DFS based)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/bridges"&gt;Bridges&lt;/a&gt; - DFS based algorithm&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/eulerian-path"&gt;Eulerian Path and Eulerian Circuit&lt;/a&gt; - Fleury's algorithm - Visit every edge exactly once&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/hamiltonian-cycle"&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/strongly-connected-components"&gt;Strongly Connected Components&lt;/a&gt; - Kosaraju's algorithm&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/travelling-salesman"&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cryptography&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/cryptography/polynomial-hash"&gt;Polynomial Hash&lt;/a&gt; - rolling hash function based on polynomial&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/cryptography/rail-fence-cipher"&gt;Rail Fence Cipher&lt;/a&gt; - a transposition cipher algorithm for encoding messages&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/cryptography/caesar-cipher"&gt;Caesar Cipher&lt;/a&gt; - simple substitution cipher&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/cryptography/hill-cipher"&gt;Hill Cipher&lt;/a&gt; - substitution cipher based on linear algebra&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Machine Learning&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://github.com/trekhleb/nano-neuron"&gt;NanoNeuron&lt;/a&gt; - 7 simple JS functions that illustrate how machines can actually learn (forward/backward propagation)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/ml/knn"&gt;k-NN&lt;/a&gt; - k-nearest neighbors classification algorithm&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/ml/k-means"&gt;k-Means&lt;/a&gt; - k-Means clustering algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Image Processing&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/image-processing/seam-carving"&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Uncategorized&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/hanoi-tower"&gt;Tower of Hanoi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/square-matrix-rotation"&gt;Square Matrix Rotation&lt;/a&gt; - in-place algorithm&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt; - backtracking, dynamic programming (top-down + bottom-up) and greedy examples&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/unique-paths"&gt;Unique Paths&lt;/a&gt; - backtracking, dynamic programming and Pascal's Triangle based examples&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/rain-terraces"&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem (dynamic programming and brute force versions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/recursive-staircase"&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top (4 solutions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/best-time-to-buy-sell-stocks"&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/n-queens"&gt;N-Queens Problem&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/knight-tour"&gt;Knight's Tour&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#algorithms-by-paradigm"&gt;
  &lt;/a&gt;
  Algorithms by Paradigm
&lt;/h3&gt;

&lt;p&gt;An algorithmic paradigm is a generic method or approach which underlies the design of a class&lt;br&gt;
of algorithms. It is an abstraction higher than the notion of an algorithm, just as an&lt;br&gt;
algorithm is an abstraction higher than a computer program.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Brute Force&lt;/strong&gt; - look at all the possibilities and selects the best solution

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/search/linear-search"&gt;Linear Search&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/rain-terraces"&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/recursive-staircase"&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/travelling-salesman"&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/fourier-transform"&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Greedy&lt;/strong&gt; - choose the best option at the current time, without any consideration for the future

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/knapsack-problem"&gt;Unbound Knapsack Problem&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/dijkstra"&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/prim"&gt;Prim’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/kruskal"&gt;Kruskal’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Divide and Conquer&lt;/strong&gt; - divide the problem into smaller parts and then solve those parts

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/search/binary-search"&gt;Binary Search&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/hanoi-tower"&gt;Tower of Hanoi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/pascal-triangle"&gt;Pascal's Triangle&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/euclidean-algorithm"&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/merge-sort"&gt;Merge Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/quick-sort"&gt;Quicksort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/tree/depth-first-search"&gt;Tree Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/depth-first-search"&gt;Graph Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/matrix"&gt;Matrices&lt;/a&gt; - generating and traversing the matrices of different shapes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/fast-powering"&gt;Fast Powering&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/best-time-to-buy-sell-stocks"&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/permutations"&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/combinations"&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dynamic Programming&lt;/strong&gt; - build up a solution using previously found sub-solutions

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/fibonacci"&gt;Fibonacci Number&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/unique-paths"&gt;Unique Paths&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/rain-terraces"&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/recursive-staircase"&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/image-processing/seam-carving"&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/levenshtein-distance"&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/longest-common-subsequence"&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/longest-common-substring"&gt;Longest Common Substring&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/longest-increasing-subsequence"&gt;Longest Increasing Subsequence&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/shortest-common-supersequence"&gt;Shortest Common Supersequence&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/knapsack-problem"&gt;0/1 Knapsack Problem&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/integer-partition"&gt;Integer Partition&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/bellman-ford"&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/floyd-warshall"&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/regular-expression-matching"&gt;Regular Expression Matching&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Backtracking&lt;/strong&gt; - similarly to brute force, try to generate all possible solutions, but each time you generate next solution you test
if it satisfies all conditions, and only then continue generating subsequent solutions. Otherwise, backtrack, and go on a
different path of finding a solution. Normally the DFS traversal of state-space is being used.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/unique-paths"&gt;Unique Paths&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/power-set"&gt;Power Set&lt;/a&gt; - all subsets of a set&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/hamiltonian-cycle"&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/n-queens"&gt;N-Queens Problem&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/knight-tour"&gt;Knight's Tour&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/combination-sum"&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Branch &amp;amp; Bound&lt;/strong&gt; - remember the lowest-cost solution found at each stage of the backtracking
search, and use the cost of the lowest-cost solution found so far as a lower bound on the cost of
a least-cost solution to the problem, in order to discard partial solutions with costs larger than the
lowest-cost solution found so far. Normally BFS traversal in combination with DFS traversal of state-space
tree is being used.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-this-repository"&gt;
  &lt;/a&gt;
  How to use this repository
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Install all dependencies&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Run ESLint&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may want to run it to check code quality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run lint
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Run all tests&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Run tests by name&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm test -- 'LinkedList'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In case if linting or testing is failing try to delete the &lt;code&gt;node_modules&lt;/code&gt; folder and re-install npm packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rm -rf ./node_modules
npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may play with data-structures and algorithms in &lt;code&gt;./src/playground/playground.js&lt;/code&gt; file and write&lt;br&gt;
tests for it in &lt;code&gt;./src/playground/__test__/playground.test.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then just simply run the following command to test if your playground code works as expected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm test -- 'playground'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useful-information"&gt;
  &lt;/a&gt;
  Useful Information
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8"&gt;▶ Data Structures and Algorithms on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#big-o-notation"&gt;
  &lt;/a&gt;
  Big O Notation
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Big O notation&lt;/em&gt; is used to classify algorithms according to how their running time or space requirements grow as the input size grows.&lt;br&gt;
On the chart below you may find most common orders of growth of algorithms specified in Big O notation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EFMX-xnh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/./assets/big-o-graph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EFMX-xnh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/./assets/big-o-graph.png" alt="Big O graphs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="http://bigocheatsheet.com/"&gt;Big O Cheat Sheet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Big O Notation&lt;/th&gt;
&lt;th&gt;Computations for 10 elements&lt;/th&gt;
&lt;th&gt;Computations for 100 elements&lt;/th&gt;
&lt;th&gt;Computations for 1000 elements&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(1)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(log N)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(N)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(N log N)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;9000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(N^2)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;1000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(2^N)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;1.26e+29&lt;/td&gt;
&lt;td&gt;1.07e+301&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(N!)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;3628800&lt;/td&gt;
&lt;td&gt;9.3e+157&lt;/td&gt;
&lt;td&gt;4.02e+2567&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#data-structure-operations-complexity"&gt;
  &lt;/a&gt;
  Data Structure Operations Complexity
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Structure&lt;/th&gt;
&lt;th&gt;Access&lt;/th&gt;
&lt;th&gt;Search&lt;/th&gt;
&lt;th&gt;Insertion&lt;/th&gt;
&lt;th&gt;Deletion&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Queue&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Linked List&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Hash Table&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;In case of perfect hash function costs would be O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Binary Search Tree&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;In case of balanced tree costs would be O(log(n))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;B-Tree&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Red-Black Tree&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;AVL Tree&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Bloom Filter&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;False positives are possible while searching&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#array-sorting-algorithms-complexity"&gt;
  &lt;/a&gt;
  Array Sorting Algorithms Complexity
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Best&lt;/th&gt;
&lt;th&gt;Average&lt;/th&gt;
&lt;th&gt;Worst&lt;/th&gt;
&lt;th&gt;Memory&lt;/th&gt;
&lt;th&gt;Stable&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Bubble sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Insertion sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Selection sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Heap sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n log(n)&lt;/td&gt;
&lt;td&gt;n log(n)&lt;/td&gt;
&lt;td&gt;n log(n)&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Merge sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n log(n)&lt;/td&gt;
&lt;td&gt;n log(n)&lt;/td&gt;
&lt;td&gt;n log(n)&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Quick sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n log(n)&lt;/td&gt;
&lt;td&gt;n log(n)&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Quicksort is usually done in-place with O(log(n)) stack space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Shell sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n log(n)&lt;/td&gt;
&lt;td&gt;depends on gap sequence&lt;/td&gt;
&lt;td&gt;n (log(n))&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Counting sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n + r&lt;/td&gt;
&lt;td&gt;n + r&lt;/td&gt;
&lt;td&gt;n + r&lt;/td&gt;
&lt;td&gt;n + r&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;r - biggest number in array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Radix sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n * k&lt;/td&gt;
&lt;td&gt;n * k&lt;/td&gt;
&lt;td&gt;n * k&lt;/td&gt;
&lt;td&gt;n + k&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;k - length of longest key&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#project-backers"&gt;
  &lt;/a&gt;
  Project Backers
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You may support this project via ❤️️ &lt;a href="https://github.com/sponsors/trekhleb"&gt;GitHub&lt;/a&gt; or ❤️️ &lt;a href="https://www.patreon.com/trekhleb"&gt;Patreon&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/trekhleb/javascript-algorithms/blob/master/BACKERS.md"&gt;Folks who are backing this project&lt;/a&gt; &lt;code&gt;∑ = 0&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ℹ️ A few more &lt;a href="https://trekhleb.dev/projects/"&gt;projects&lt;/a&gt; and &lt;a href="https://trekhleb.dev/blog/"&gt;articles&lt;/a&gt; about JavaScript and algorithms on &lt;a href="https://trekhleb.dev"&gt;trekhleb.dev&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Embedding a React Application in Go Binary</title>
      <author>Fareez Ahamed</author>
      <pubDate>Fri, 13 Aug 2021 15:52:44 +0000</pubDate>
      <link>https://dev.to/fareezahamed/embedding-a-react-application-in-go-binary-188n</link>
      <guid>https://dev.to/fareezahamed/embedding-a-react-application-in-go-binary-188n</guid>
      <description>&lt;p&gt;Go 1.16 has come out with a feature which I waited for quite some time. With &lt;a href="https://golang.org/pkg/embed/"&gt;&lt;em&gt;Embed&lt;/em&gt;&lt;/a&gt; we will be able to add static files into the go binary at build time. It also makes accessing the files as simple as dealing with File System APIs.&lt;/p&gt;

&lt;p&gt;This has opened up a whole new world on building and deploying web applications. Now we can embed static web apps along with the API server built in Go. In this article, we are going to explore how we can embed a React application in Go binary at build time.&lt;/p&gt;

&lt;p&gt;First, let us create a React application using Create-React-App.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app react-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the application is created, we will have the default &lt;code&gt;App&lt;/code&gt; component which shows the React icon. We are not going to change it. We are just going to use it as it is and embed. So let's build the app, so that we can get the static files from the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a folder in which we are going to code the Go application. Copy the &lt;code&gt;build&lt;/code&gt; folder into the newly created folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/
|-build
| |- React build files here
|-main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"embed"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"io/fs"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;//go:embed build&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;embeddedFiles&lt;/span&gt; &lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FS&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Starting Server"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getFileSystem&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":9000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getFileSystem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileSystem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// Get the build subdirectory as the&lt;/span&gt;
    &lt;span class="c"&gt;// root directory so that it can be passed&lt;/span&gt;
    &lt;span class="c"&gt;// to the http.FileServer&lt;/span&gt;
    &lt;span class="n"&gt;fsys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embeddedFiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the directive &lt;code&gt;go:embed build&lt;/code&gt;. The variable &lt;code&gt;embeddedFiles&lt;/code&gt; will be initialized with a reference to the File System containing &lt;br&gt;
the &lt;code&gt;build&lt;/code&gt; folder as a subdirectory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go build main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now build the Go application, get the binary and run it wherever you want and go to &lt;code&gt;http://localhost:9000&lt;/code&gt;, you will see the React appliation. It is a single binary containing all the static assets. Easy to deploy or distribute.&lt;/p&gt;

&lt;p&gt;This open's up a lot of possibilities. We can embed multiple small frontend applications into a Go binary and they can work together. Everything that can be done on nginx can be very well done using Go while still having all assets packed together.&lt;/p&gt;

</description>
      <category>go</category>
      <category>react</category>
    </item>
    <item>
      <title>Train a Deep Neural Network to recognize handwritten digits with Dannjs.</title>
      <author>Matias Vazquez-Levi</author>
      <pubDate>Fri, 13 Aug 2021 15:07:00 +0000</pubDate>
      <link>https://dev.to/matiasvlevi/train-a-deep-neural-network-to-recognize-handwritten-digits-with-dannjs-d5o</link>
      <guid>https://dev.to/matiasvlevi/train-a-deep-neural-network-to-recognize-handwritten-digits-with-dannjs-d5o</guid>
      <description>&lt;p&gt;A famous task performed by Deep models is handwritten digit recognition.&lt;br&gt;
Here is how you can create your model &amp;amp; train it with some images of digits.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Nodejs&lt;/li&gt;
&lt;li&gt;Some knowledge about neural networks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#using"&gt;
  &lt;/a&gt;
  Using
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/easy-mnist"&gt;easy-mnist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dannjs.org/"&gt;Dannjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/fs"&gt;fs&lt;/a&gt; (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mnist"&gt;
  &lt;/a&gt;
  MNIST
&lt;/h3&gt;

&lt;p&gt;We're going to use a dataset called MNIST. You can read more about it &lt;a href="https://en.wikipedia.org/wiki/MNIST_database"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;MNIST is a dataset containing a total of 70 000 28x28 images of handwritten digits.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--29f1O4P0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/800/1%2ALyRlX__08q40UJohhJG9Ow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--29f1O4P0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/800/1%2ALyRlX__08q40UJohhJG9Ow.png"&gt;&lt;/a&gt;&lt;br&gt;
It contains an image and a label in order to identify the digit.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mnist-to-a-deep-model"&gt;
  &lt;/a&gt;
  MNIST to a Deep Model
&lt;/h3&gt;

&lt;p&gt;To show these images to our Deep model, we're going to need to feed every pixel with values ranging in-between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. A &lt;code&gt;0&lt;/code&gt; would represent a black pixel and a &lt;code&gt;1&lt;/code&gt; would represent a white pixel. &lt;/p&gt;

&lt;p&gt;The image below demonstrates this very well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S0yN4Jb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dudeperf3ct.github.io/images/mnist_cnn_files/mnist_cnn_keras_8_0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S0yN4Jb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dudeperf3ct.github.io/images/mnist_cnn_files/mnist_cnn_keras_8_0.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could see a 28 by 28 image as an array of 784 values. This is how we are going to feed the images to our neural network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2DN89eHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/BnqTxnh/mnist-Image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2DN89eHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/BnqTxnh/mnist-Image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When feeding our model with image data, we also need to give the desired output in order to train it. In the image above, the neuron labeled 6 is circled to demonstrate this.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Now that we understand how we are going to train our MNIST model, let's get started!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h3&gt;

&lt;p&gt;Start by initiating an npm project with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to access the dataset, install the MNIST npm package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i easy-mnist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are also going to install our Neural Network library, &lt;a href="https://dannjs.org/"&gt;Dannjs&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i dannjs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#import-the-dataset"&gt;
  &lt;/a&gt;
  Import the dataset
&lt;/h3&gt;

&lt;p&gt;In our &lt;code&gt;index.js&lt;/code&gt; file, were going to require the dataset. We are creating a training set of &lt;code&gt;60 000&lt;/code&gt; images and a testing set of &lt;code&gt;10 000&lt;/code&gt; images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;easy-mnist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;makeData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to create two sets, the training set &amp;amp; the testing set.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Luckily, our dataset of images already comes in 784-length array format and the labels come as a 10-length array.&lt;br&gt;
We can access those like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// For the training set&lt;/span&gt;
&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;
&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;

&lt;span class="c1"&gt;// For the testing set&lt;/span&gt;
&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;
&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-our-model"&gt;
  &lt;/a&gt;
  Creating our Model
&lt;/h3&gt;

&lt;p&gt;We first need to create a model, for this, we are going to import dannjs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dannjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;dann&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then create a Dann model with 784 inputs and 10 outputs. We're also going to add two hidden neuron layers with &lt;code&gt;leakyReLU&lt;/code&gt; activations and then set the learning rate to &lt;code&gt;0.0001&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;784&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHiddenLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;leakyReLU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHiddenLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;leakyReLU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeWeights&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then log the model to confirm the model creation was successful&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#training-the-model"&gt;
  &lt;/a&gt;
  Training the model
&lt;/h3&gt;

&lt;p&gt;For our model to be trained, we need to iterate through the whole training set. Having completed the entirety of the training set is what we call an epoch. In order to successfully train a model, we need multiple epochs.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;This is what 1 epoch looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then loop multiple epochs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;epochs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;epochs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Completed epoch &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; with a loss of &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With 10 epochs, depending on the model you created &amp;amp; your CPU's performance, it might take a few minutes. 10 epochs might not even be enough to train a very accurate model.&lt;/p&gt;

&lt;p&gt;Around 100 epochs, your model might reach an acceptable level of accuracy.&lt;/p&gt;

&lt;p&gt;The number of epochs &amp;amp; training time all depend on a lot of factors about the model. Experiment with the creation of a neural network, try adding one more layer, changing activation functions, or changing the learning rate, and see what happens.&lt;/p&gt;

&lt;p&gt;Since it might take a while to train, it is a good idea to save a model in order to keep training progress.&lt;br&gt;
Here is how you can do so using &lt;code&gt;fs&lt;/code&gt;, (do not forget to install it with &lt;code&gt;npm i fs&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Import fs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Saving our model to &lt;code&gt;myModel.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myModel.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Loading back our model from &lt;code&gt;myModel.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myModel.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFromJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So there you have it! How to train an MNIST model with Dannjs.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We are hosting a MNIST model contest, the most accurate model wins!&lt;br&gt;
You can submit your model &lt;a href="https://dannjs.org/drawNumber"&gt;here&lt;/a&gt; &amp;amp; try it out live.&lt;br&gt;
Results are posted in our discord server here is the &lt;a href="https://discord.gg/yeAqHsGdtU"&gt;invite link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dannjs</category>
      <category>machinelearning</category>
      <category>node</category>
      <category>deeplearning</category>
    </item>
  </channel>
</rss>
