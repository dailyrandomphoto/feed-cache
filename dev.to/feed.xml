<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 30 Nov 2021 21:17:44 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-5hj5</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-5hj5</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#honesty-amp-exhaustion"&gt;
  &lt;/a&gt;
  Honesty &amp;amp; Exhaustion
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/aliofonzy43"&gt;@aliofonzy43&lt;/a&gt;
, we wanted to give you a massive kudos for bravely sharing your story of exhaustion throughout the interviewing process. I invite everyone reading this roundup to take a look at Sam's post as I'm sure we can all relate to the feelings shared there. DEV is a place to be vulnerable and we're honored when you feel supported enough to do so. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aliofonzy43" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9woU2Rhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uTbX4QZZ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/682557/ed8056a2-b5fa-4b60-a81a-e7b941ed3e87.jpg" alt="aliofonzy43"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aliofonzy43/exhaustion-from-tech-hiring-process-2geb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Exhaustion From Tech Hiring Process&lt;/h2&gt;
      &lt;h3&gt;Sam „Éª Nov 24 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#mentalhealth&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#stepping-back-to-see-the-big-picture"&gt;
  &lt;/a&gt;
  Stepping back to see the big picture
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/kvyshh"&gt;@kvyshh&lt;/a&gt;
 walks us through an exercise of career-related self-interviewing that's really valuable for everyone, regardless of their role or industry. Read on to do this meaningful work yourself! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kvyshh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZV6JXzn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Kn_PYaCb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/745261/b5792ea5-7eac-4344-8bdb-01047c9fdf07.png" alt="kvyshh"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kvyshh/roadmap-to-learning-what-kind-of-developerprogrammerengineer-you-are-2m2j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What kind of Developer do I want to be?&lt;/h2&gt;
      &lt;h3&gt;Kindred „Éª Nov 24 „Éª 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#all-about-amazon-linux"&gt;
  &lt;/a&gt;
  All about Amazon Linux!
&lt;/h2&gt;

&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/ssennettau"&gt;@ssennettau&lt;/a&gt;
 explains, "there's a lot of interesting nuances [with Amazon Linux 2022] compared to Amazon Linux 2." If you're looking for a clear comparison between the two as well as some (informed) personal opinions, you've come to the right post!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9fSqHOMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bdXerw40--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/645925/6468bc44-8961-4198-a757-fdcd385adc32.jpeg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/whats-different-about-amazon-linux-2022-ilb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What's different about Amazon Linux 2022?&lt;/h2&gt;
      &lt;h3&gt;Stephen Sennett for AWS Community Builders  „Éª Nov 24 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#getting-sassy"&gt;
  &lt;/a&gt;
  Getting SaSSy
&lt;/h2&gt;

&lt;p&gt;Don't miss this super detailed look at Sass ‚Äî "a preprocessor scripting language that is interpreted or compiled into Cascading Style Sheets (CSS)." Thanks, &lt;a class="mentioned-user" href="https://dev.to/daaahailey"&gt;@daaahailey&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/daaahailey" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wA0s5ptc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5qBQd6oH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/617504/235fe1d0-1f41-4415-9a31-d231e8d68b45.jpeg" alt="daaahailey"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/daaahailey/sassscss-for-beginners-2aci" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Sass(SCSS) for beginners&lt;/h2&gt;
      &lt;h3&gt;Dahye Ji „Éª Nov 25 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sass&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#scss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#fighting-legacy"&gt;
  &lt;/a&gt;
  Fighting legacy
&lt;/h2&gt;

&lt;p&gt;The heading I added to this section sounds like the name of an epic novel about a battle to inherit a throne or something üòÇ &lt;a class="mentioned-user" href="https://dev.to/matteokov"&gt;@matteokov&lt;/a&gt;
's post is NOT about that, but it &lt;em&gt;is&lt;/em&gt; about a situation wherein their team created a legacy application before the first release! Really interesting takeaways in here. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/bornfightcompany" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rw_0Fqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--BddQSFwo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1897/01c118d8-0fe8-43ae-a918-b0a3c2a75f60.jpg" alt="Bornfight" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOBD3qSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RS-5Tdux--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/346707/220661b5-e203-474b-9fb8-19c2ca0b6117.jpeg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/bornfightcompany/5-reasons-why-we-ended-up-rewriting-the-whole-application-before-its-release-1dch" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 reasons why we ended up rewriting the whole application before its release&lt;/h2&gt;
      &lt;h3&gt;Matteo Kovaƒçiƒá for Bornfight „Éª Nov 22 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#engineeringmonday&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#no-more-term-daunt"&gt;
  &lt;/a&gt;
  No more "term daunt"!
&lt;/h2&gt;

&lt;p&gt;Unfortunately, tech is filled with daunting-sounding terms and as an industry, we don't do enough to abolish this kind of esotericism.  Folks like &lt;a class="mentioned-user" href="https://dev.to/amyoulton"&gt;@amyoulton&lt;/a&gt;
 are doing a really important thing when they seek to simply define basic tech terms instead of just using them liberally without explanation for early-career developers. Nice work!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/amyoulton" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--URMcwv1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rz8uVdo6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618716/985cdde0-41c2-4924-9c59-23cd90ce5294.jpeg" alt="amyoulton"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/amyoulton/understanding-basic-coding-terminology-industry-basics-43p7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Understanding Basic Coding Terminology: Industry Basics ‚úèÔ∏è&lt;/h2&gt;
      &lt;h3&gt;Amy Oulton „Éª Nov 24 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#making-it-harder-to-do-the-wrong-thing"&gt;
  &lt;/a&gt;
  Making it harder to do the wrong thing
&lt;/h2&gt;

&lt;p&gt;... That's the philosophy &lt;a class="mentioned-user" href="https://dev.to/austingil"&gt;@austingil&lt;/a&gt;
 has about accessibility. It would be incredible if we could all be a11y experts, but that's just not possible. Instead, we need to make it easier for dev teams to do the right thing and vice versa. More fantastic accessibility insights in this post. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/austingil" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jiy-MsZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tIU8QoXU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/183813/b2a62452-2570-4bfb-9bae-f047ec689bb8.png" alt="austingil"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/austingil/making-accessibility-more-accessible-1gej" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Making Accessibility More Accessible&lt;/h2&gt;
      &lt;h3&gt;Austin Gil „Éª Nov 26 „Éª 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#development&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Cleaning up Async Functions in React's useEffect Hook (Unsubscribing)</title>
      <author>Elijah Trillionz</author>
      <pubDate>Tue, 30 Nov 2021 21:11:19 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/cleaning-up-async-functions-in-reacts-useeffect-hook-unsubscribing-3dkk</link>
      <guid>https://dev.to/elijahtrillionz/cleaning-up-async-functions-in-reacts-useeffect-hook-unsubscribing-3dkk</guid>
      <description>&lt;p&gt;Functional components in React are most beautiful because of &lt;strong&gt;React Hooks&lt;/strong&gt;. With Hooks, we can change state, perform actions when components are mounted and unmounted, and much more.&lt;/p&gt;

&lt;p&gt;While all these are beautiful, there is a little caveat (or maybe not) that is a little bit frustrating when working with useEffect hook.&lt;/p&gt;

&lt;p&gt;Before we look at this issue let's do a quick recap on the useEffect hook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#effect-hook"&gt;
  &lt;/a&gt;
  Effect Hook
&lt;/h2&gt;

&lt;p&gt;The useEffect hook allows you to perform actions when components mount and unmount.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// actions performed when component mounts&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// actions to be performed when component unmounts&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The callback function of the &lt;code&gt;useEffect&lt;/code&gt; function is invoked depending on the second parameter of the &lt;code&gt;useEffect&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The second parameter is an array of dependencies. You list your dependencies there.&lt;/p&gt;

&lt;p&gt;So whenever there is an update on any of the dependencies, the callback function will be called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stranger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the array of dependencies is empty like in our first example, React will only invoke the function once and that is when the component mounts.&lt;/p&gt;

&lt;p&gt;But you may wonder, "what about when it unmounts, doesn't React call the function too"?.&lt;/p&gt;

&lt;p&gt;Uhmmm no. The returned function is a closure and you do really not need to call the parent function (the callback function now) when you have access to the scope of the parent function right in the function you need (the returned function now).&lt;/p&gt;

&lt;p&gt;If this isn't clear to you, just take out 7 mins of your time to take a look at an article on &lt;a href="https://dev.to/elijahtrillionz/learn-javascript-closures-in-7-mins-324n"&gt;JavaScript closures&lt;/a&gt; I wrote.&lt;/p&gt;

&lt;p&gt;So now we have gone through the basics as a recap, let's take a look at the issue with async functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#async-functions-in-react"&gt;
  &lt;/a&gt;
  Async functions in React
&lt;/h2&gt;

&lt;p&gt;There is no doubt that you may have once used an async function inside the useEffect hook. If you haven't you are eventually going to do so soon.&lt;/p&gt;

&lt;p&gt;But there is a warning from React that appears most times when we unmount and mount a component when we have an async function in the useEffect hook. This is the warning&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vrk9SRLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0w170s4uwa0itjb8yte5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vrk9SRLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0w170s4uwa0itjb8yte5.png" alt="Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function." width="632" height="184"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you can't see the image, here is the warning&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Can't perform a React state update on an unmounted component. 
This is a no-op, but it indicates a memory leak in your application. 
To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The instruction is pretty clear and straightforward, "cancel all subscriptions and asynchronous tasks in a useEffect cleanup function". Alright, I hear you React! But how do I do this?&lt;/p&gt;

&lt;p&gt;It's simple. Very simple. The reason React threw that warning was because I used a setState inside the async function.&lt;/p&gt;

&lt;p&gt;That's not a crime. But React will try to update that state even when the component is unmounted, and that's kind of a crime (a leakage crime).&lt;/p&gt;

&lt;p&gt;This is the code that led to the warning above&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How do we fix this? We simply tell React to try to update any state in our async function when we are mounted.&lt;/p&gt;

&lt;p&gt;So we thus have&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, now we have progressed a little. Right now we are only telling React to perform an update if &lt;code&gt;mounted&lt;/code&gt; (you can call it subscribed or whatever) is true.&lt;/p&gt;

&lt;p&gt;But the &lt;code&gt;mounted&lt;/code&gt; variable will always be true, and thus doesn't prevent the warning or app leakage. So how and when do we make it false?&lt;/p&gt;

&lt;p&gt;When the component unmounts we can and should make it false. So we now have&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when the component unmounts the &lt;code&gt;mounted&lt;/code&gt; variable changes to false and thus the &lt;code&gt;setUsername&lt;/code&gt; function will not be updated when the component is unmounted.&lt;/p&gt;

&lt;p&gt;We can tell when the component mounts and unmounts because of the first code we saw i.e&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// actions performed when component mounts&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// actions to be performed when component unmounts&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how you unsubscribe from async functions, you can do this in different ways like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is an example with an async function with the &lt;code&gt;fetch&lt;/code&gt; API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// only try to update if we are subscribed (or mounted)&lt;/span&gt;
      &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// cleanup function&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;When I was still new in React, I used to struggle with this warning a lot. But this turned things around.&lt;/p&gt;

&lt;p&gt;If you are wondering, "why does it only happen with async functions or tasks"? Well, that's because of the JavaScript event loop. If you don't know what that means, then check out this &lt;a href="https://youtu.be/8aGhZQkoFbQ"&gt;YouTube Video by Philip Roberts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading. I hope to see you next time. Please kindly like and follow me on Twitter &lt;a href="https://twitter.com/elijahtrillionz"&gt;@elijahtrillionz&lt;/a&gt; to stay connected.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Announcing the Chingu Holiday Hackathon</title>
      <author>Jim Medlock</author>
      <pubDate>Tue, 30 Nov 2021 20:50:41 +0000</pubDate>
      <link>https://dev.to/chingu/announcing-the-chingu-holiday-hackathon-25ba</link>
      <guid>https://dev.to/chingu/announcing-the-chingu-holiday-hackathon-25ba</guid>
      <description>&lt;p&gt;The Holiday Season is a time to celebrate with family and friends, a time to reflect on the past year, and a time to relax and have fun.&lt;/p&gt;

&lt;p&gt;And for Developers what better way to have fun than by participating in a holiday themed hackathon to both test and extend your skills?&lt;/p&gt;

&lt;p&gt;This year &lt;a href="https://chingu.io"&gt;Chingu&lt;/a&gt; is sponsoring a Holiday Hackathon so you can do just that! Read on to learn how to enter, compete, and celebrate the Season with a little code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-participate"&gt;
  &lt;/a&gt;
  How to Participate
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BOhzYxGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ch31iof5z8x8tnt4tha7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOhzYxGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ch31iof5z8x8tnt4tha7.jpeg" alt="Banner" width="880" height="130"&gt;&lt;/a&gt;&lt;br&gt;
This hackathon will run from &lt;strong&gt;Wednesday, December 1st through Sunday, December 19th&lt;/strong&gt;. You can &lt;a href="https://github.com/chingu-hackathons/holidayhackathon2021/discussions"&gt;learn about the specifics here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may join as a solo Developer or as a team by signing up &lt;a href="https://airtable.com/shrzef3NVWMl9PiKt"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Be sure to &lt;a href="https://airtable.com/shrtPfnx6eX96AJxt"&gt;submit your completed project&lt;/a&gt; before the deadline. We will recognize your contribution in our &lt;a href="https://twitter.com/ChinguCollabs"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/company/chingu-os"&gt;LinkedIn&lt;/a&gt; feeds.&lt;/p&gt;

&lt;p&gt;We'll also award &lt;a href="https://chingu.myspreadshop.com/"&gt;Chingu swag&lt;/a&gt; to the top three projects chosen by a panel of judges. Members of the top three teams will receive a &lt;a href="https://tinyurl.com/yyaub5gh"&gt;Chingu water bottle&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Winners will be announced on &lt;em&gt;&lt;em&gt;Wednesday, December 22.&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All are welcome to participate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ge2W_cI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v920zdeub6ioeb63qao.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ge2W_cI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v920zdeub6ioeb63qao.jpg" alt="Santa" width="880" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>hackathon</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>New learning</title>
      <author>Saverio683</author>
      <pubDate>Tue, 30 Nov 2021 20:50:32 +0000</pubDate>
      <link>https://dev.to/saverio683/new-learning-3jdh</link>
      <guid>https://dev.to/saverio683/new-learning-3jdh</guid>
      <description>&lt;p&gt;I' m currently learning React Router&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Pragmatic Programmer [Book Notes]</title>
      <author>Jorge Tovar</author>
      <pubDate>Tue, 30 Nov 2021 20:28:57 +0000</pubDate>
      <link>https://dev.to/jorgetovar621/pragmatic-programmer-1ll0</link>
      <guid>https://dev.to/jorgetovar621/pragmatic-programmer-1ll0</guid>
      <description>&lt;h1&gt;
  &lt;a href="#pragmatic-programmer"&gt;
  &lt;/a&gt;
  Pragmatic Programmer
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X"&gt;Pragmatic Programmer Book&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pragmatic-philosophy"&gt;
  &lt;/a&gt;
  Pragmatic philosophy
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Your life it's your life

&lt;ul&gt;
&lt;li&gt;Craftsmanship &lt;/li&gt;
&lt;li&gt;Early adopter &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Responsibility

&lt;ul&gt;
&lt;li&gt;Offer options &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Software Entropy

&lt;ul&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Maintenance&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Good enough software

&lt;ul&gt;
&lt;li&gt;Quality is a requirement&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Your knowledge portfolio:

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Investment in knowledge always pays the best interest&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Read nontechnical books&lt;/li&gt;
&lt;li&gt;Read conceptual books&lt;/li&gt;
&lt;li&gt;Learn one new language every year&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Communicate&lt;/li&gt;
&lt;li&gt;Testability is key&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pragmatic-approach"&gt;
  &lt;/a&gt;
  Pragmatic approach
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The essence of good design: ETC&lt;/li&gt;
&lt;li&gt;DRY: Code, Data, Documentation (Knowledge)

&lt;ul&gt;
&lt;li&gt;Don't abstract too early, wait until you have copied and pasted a couple of times, examples are needed to create good abstractions&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Orthogonality:

&lt;ul&gt;
&lt;li&gt;Eliminate effects between unrelated things&lt;/li&gt;
&lt;li&gt;Understandable, and easier to debug, test and maintain&lt;/li&gt;
&lt;li&gt;Design patterns&lt;/li&gt;
&lt;li&gt;SOLID&lt;/li&gt;
&lt;li&gt;Prefer composition and FP languages&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Reversibility:

&lt;ul&gt;
&lt;li&gt;Flexible architecture&lt;/li&gt;
&lt;li&gt;Have options&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Tracer bullets:

&lt;ul&gt;
&lt;li&gt;Code lean and complete&lt;/li&gt;
&lt;li&gt;Find the target&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Prototypes and post-it notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Information gathering&lt;/li&gt;
&lt;li&gt;Is coupling minimized&lt;/li&gt;
&lt;li&gt;Collaborations between components well-defined&lt;/li&gt;
&lt;li&gt;Responsibilities&lt;/li&gt;
&lt;li&gt;Interfaces and data clear and available&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Domain languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Program close to the problem domain&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Estimation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; I'll back to you&lt;/li&gt;
&lt;li&gt;optimistic, most likely and pessimistic&lt;/li&gt;
&lt;li&gt;model building: someone that already did it &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-tools"&gt;
  &lt;/a&gt;
  Basic Tools
&lt;/h2&gt;

&lt;p&gt;Be more productive with your tools&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The power of plain text:

&lt;ul&gt;
&lt;li&gt;Self describing data&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Shell games &lt;/li&gt;
&lt;li&gt;Power Editing &lt;/li&gt;
&lt;li&gt;Debugging skills 

&lt;ul&gt;
&lt;li&gt;localhost test&lt;/li&gt;
&lt;li&gt;Explain to someone else&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Text manipulation

&lt;ul&gt;
&lt;li&gt;Unix: sed, awk &lt;/li&gt;
&lt;li&gt;Scripting languages: Python&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; Engineering daybooks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pragmatic-paranoia"&gt;
  &lt;/a&gt;
  Pragmatic Paranoia
&lt;/h2&gt;

&lt;p&gt;Validate all the information we're given, assertions of bad data, and distrust data from potential attackers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design by contract

&lt;ul&gt;
&lt;li&gt;Preconditions, postconditions: Clojure Specs&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Dead programs tell no lies

&lt;ul&gt;
&lt;li&gt;Crash early&lt;/li&gt;
&lt;li&gt;Defensive programming is a waste of time let it crash! (Supervisor)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Assertive programming

&lt;ul&gt;
&lt;li&gt;Use assertions to prevent the impossible &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;How to balance resources

&lt;ul&gt;
&lt;li&gt;Release free resources&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Don't outrun your headlights

&lt;ul&gt;
&lt;li&gt;take small steps always&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bend-or-break"&gt;
  &lt;/a&gt;
  Bend or break
&lt;/h2&gt;

&lt;p&gt;Make our code as flexible as possible, a good way to stay flexible it's to write less code&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decoupling

&lt;ul&gt;
&lt;li&gt;Allow flexibility&lt;/li&gt;
&lt;li&gt;Shy code that promotes cohesion&lt;/li&gt;
&lt;li&gt;Law of Demeter: Depend on abstractions&lt;/li&gt;
&lt;li&gt;Avoid global data&lt;/li&gt;
&lt;li&gt;Avoid inheritance&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Juggling the real world

&lt;ul&gt;
&lt;li&gt;Events&lt;/li&gt;
&lt;li&gt;Finite state machine&lt;/li&gt;
&lt;li&gt;Observer&lt;/li&gt;
&lt;li&gt;Publish/Subscribe (Channels)&lt;/li&gt;
&lt;li&gt;Reactive Streams&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Transforming programming

&lt;ul&gt;
&lt;li&gt;Think in programs like Input Output and transformation of data&lt;/li&gt;
&lt;li&gt;Process of data&lt;/li&gt;
&lt;li&gt;find . -name '*.java' | xargs wc -l | sort -n | tail -11 | head -10&lt;/li&gt;
&lt;li&gt;Programming is about code but programs are about data&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Inheritance tax

&lt;ul&gt;
&lt;li&gt;Coupling&lt;/li&gt;
&lt;li&gt;Interfaces to express polymorphism&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Configuration

&lt;ul&gt;
&lt;li&gt;Parameterize your app using external configuration&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  Concurrency
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Concurrency: Two pieces of code run at the same time using Fibers, Threads, and process&lt;/li&gt;
&lt;li&gt;Parallelism: Hardware that can do two things at once&lt;/li&gt;
&lt;li&gt;Breaking temporal coupling&lt;/li&gt;
&lt;li&gt;Avoid shared state&lt;/li&gt;
&lt;li&gt;Actor and process&lt;/li&gt;
&lt;li&gt;Blackboards

&lt;ul&gt;
&lt;li&gt;Communication using Kafka or other streaming services&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#while-you-are-coding"&gt;
  &lt;/a&gt;
  While you are coding
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Listen to your lizard brain

&lt;ul&gt;
&lt;li&gt;Give time and space to your brains to organize your ideas&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Algorithm speed&lt;/li&gt;
&lt;li&gt;Refactoring

&lt;ul&gt;
&lt;li&gt;Rethink&lt;/li&gt;
&lt;li&gt;Gardening&lt;/li&gt;
&lt;li&gt;Unit test&lt;/li&gt;
&lt;li&gt;(Duplication, Not DRY, Bad performance, Outdated knowledge, Test passing. Nonorthogonal)&lt;/li&gt;
&lt;li&gt;Redesign&lt;/li&gt;
&lt;li&gt;Refactor early and often is like a surgery&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Test the code

&lt;ul&gt;
&lt;li&gt;Feedback&lt;/li&gt;
&lt;li&gt;Improve design&lt;/li&gt;
&lt;li&gt;Embrace TDD&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Property-based testing&lt;/li&gt;
&lt;li&gt;Security

&lt;ul&gt;
&lt;li&gt;Authentication &lt;/li&gt;
&lt;li&gt;I/O data&lt;/li&gt;
&lt;li&gt;Principle of least privilege&lt;/li&gt;
&lt;li&gt;Up to date&lt;/li&gt;
&lt;li&gt;Encrypt sensitive information&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Naming

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;At programming all the things have names and reveal the intent and belief of the system&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Communication&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0before-the-project"&gt;
  &lt;/a&gt;
  ¬†Before the project
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Requirements Pit

&lt;ul&gt;
&lt;li&gt;User doesn't know what he wants&lt;/li&gt;
&lt;li&gt;Our job is to help businesses to understand what they want&lt;/li&gt;
&lt;li&gt;Improve the feedback loop&lt;/li&gt;
&lt;li&gt;BDUF is not a good thing&lt;/li&gt;
&lt;li&gt;Work with the user to think like one&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Solving de puzzle 

&lt;ul&gt;
&lt;li&gt;Think out of the box&lt;/li&gt;
&lt;li&gt;Make time to think in the unfocused mode&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Working together

&lt;ul&gt;
&lt;li&gt;Pair programming&lt;/li&gt;
&lt;li&gt;Mob programming&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Agile

&lt;ul&gt;
&lt;li&gt;It's about values, context, and feedback loop&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pragmatic-teams"&gt;
  &lt;/a&gt;
  Pragmatic Teams
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pragmatic Teams

&lt;ul&gt;
&lt;li&gt;No broken windows&lt;/li&gt;
&lt;li&gt;Be aware of the environment and health of the project&lt;/li&gt;
&lt;li&gt;DRY &lt;/li&gt;
&lt;li&gt;Small teams&lt;/li&gt;
&lt;li&gt;Cross-functional teams &lt;strong&gt;Tracer bullets&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Automation&lt;/li&gt;
&lt;li&gt;Create and identity (Team name)&lt;/li&gt;
&lt;li&gt;Schedule time to improve knowledge portfolio&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Context

&lt;ul&gt;
&lt;li&gt;Use the right tools and practices&lt;/li&gt;
&lt;li&gt;Software delivery (When release flow is slow status meetings are high)&lt;/li&gt;
&lt;li&gt;Kanban&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The programmer starter kit

&lt;ul&gt;
&lt;li&gt;Version control&lt;/li&gt;
&lt;li&gt;Ruthless testing

&lt;ul&gt;
&lt;li&gt;Unit, Integration, Component, Performance&lt;/li&gt;
&lt;li&gt;If modules don't work well as a unit, they won't work well as a system&lt;/li&gt;
&lt;li&gt;Saboteurs: Chaos engineering&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automate everything

&lt;ul&gt;
&lt;li&gt;Software delivery es fully automated&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Delight your users

&lt;ul&gt;
&lt;li&gt;What are your expectations&lt;/li&gt;
&lt;li&gt;Deliver quality not code&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Pride and prejudice

&lt;ul&gt;
&lt;li&gt;Code that you feel proud&lt;/li&gt;
&lt;li&gt;Collective ownership&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>craftsmanship</category>
      <category>mindset</category>
      <category>java</category>
    </item>
    <item>
      <title>La experiencia de ser desvinculado / despedido</title>
      <author>Axel Valdez</author>
      <pubDate>Tue, 30 Nov 2021 20:26:09 +0000</pubDate>
      <link>https://dev.to/axelvaldez13/la-experiencia-de-ser-desvinculado-despedido-1pp3</link>
      <guid>https://dev.to/axelvaldez13/la-experiencia-de-ser-desvinculado-despedido-1pp3</guid>
      <description>&lt;p&gt;Bienvenidos a un nuevo post de experiencias siendo developer. Mi nombre es Axel Valdez, licenciado en dise√±o de interacci√≥n y multimedia en la UADE,¬† actualmente UI designer y frontend developer en Circular.&lt;/p&gt;

&lt;p&gt;En este post les voy a contar la experiencias de c√≥mo fue &lt;strong&gt;la experiencia de haber sido desvinculado, o despedido seg√∫n el pa√≠s donde viven, de una empresa/agencia&lt;/strong&gt;. La idea de este post es acompa√±arlos en forma de gu√≠a para que sepan que cosas hay que hacer y qu√© no durante todo el proceso.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caso-personal"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Caso personal&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;En el trabajo donde estuve ejerciendo me lleg√≥ una llamada en el que se encontraba una persona de un alto rango dentro de la agencia y la chica de RRHH en el que me informaron que mi rol dentro de la agencia ya hab√≠a finalizado. Las razones eran porque se hab√≠a ido un cliente de la agencia, por ende, no hab√≠a lugar para poder reubicarse dentro de la empresa.&lt;/p&gt;

&lt;p&gt;En ese momento obviamente llor√© porque la simple raz√≥n de que estaba rompiendo una relaci√≥n laboral. Sent√≠ que mis skills no eran suficientes, que era muy chico para un puesto como tal, sent√≠ que fue un fracaso total en mi vida profesional. Obviamente pregunt√© si mi rendimiento ten√≠a algo que ver con el motivo de desvinculaci√≥n y me comunicaron que por falta de proyectos lamentablemente no √≠bamos a continuar con esta relaci√≥n. Las se√±ales eran obvias, hab√≠a d√≠as que no trabajaba mientras mis colegas si, no hac√≠a absolutamente nada durante mis d√≠as m√°s que aprender cursos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#el-proceso-tedioso-de-una-desvinculaci%C3%B3n"&gt;
  &lt;/a&gt;
  &lt;strong&gt;El proceso (tedioso) de una desvinculaci√≥n&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Personalmente siempre digo que las relaciones hay que terminarlas de la mejor manera posible, porque tarde o temprano, ellos van a dar referencias. En este caso fue buena, pero tedioso por todo lo burocr√°tico y por la necesidad de recibir una parte de la indemnizaci√≥n porque, claro, estamos sin trabajo. Los pasos que van a vivir son:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Contratar un abogado/a laboral (puede que la empresa puede pagarte una parte u ofrecen el de ellos, pero no es su obligaci√≥n)&lt;/li&gt;
&lt;li&gt;Elegir una fecha para una reuni√≥n donde se juntan los abogados de cada parte para leer la desvinculaci√≥n&lt;/li&gt;
&lt;li&gt;Decidir si la indemnizaci√≥n es correcta a lo que ven√≠s trabajando o no con tu abogado&lt;/li&gt;
&lt;li&gt;Tener la fecha con el ente mediador para firmar la desvinculaci√≥n entre el trabajador y la empresa.&lt;/li&gt;
&lt;li&gt;Esperar que la liquidaci√≥n llegue a tu caja de ahorro en la fecha pactada y &lt;strong&gt;avisarle al banco que vas a recibir una cierta cantidad de dinero.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Tengan mucho cuidado, les tiene que llegar un telegrama de despido. Anteriormente, en Argentina, hab√≠a un DNU que imped√≠a los despidos. Hoy en d√≠a deberian llegarles un telegrama, no firmen ning√∫n tipo de renuncia y si tienen alguna duda consulten con su abogado.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#consejos-para-volver-arrancar"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Consejos para volver arrancar&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;No importa c√≥mo fue su desvinculaci√≥n, sea por rendimiento o falta de trabajo, quiero que sepan que &lt;strong&gt;nada de lo que le est√° pasando es su culpa.&lt;/strong&gt; Leyeron bien, no es su culpa, ustedes dieron lo mejor para poder crecer y lo hicieron.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;No se rebajen y ni se sientan menos que los dem√°s porque lo tecnico tarde o temprano se aprende.&lt;/strong&gt; Lo van a aprender por ustedes mismos, por networking o consiguiendo un equipo de trabajo que los acompa√±e.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;No vean las b√∫squedas laborales de su anterior empresa&lt;/strong&gt;, no importa si encajan con su perfil, la relaci√≥n con su anterior empresa as√≠ haya pasado 1 mes ya se termin√≥.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prioricen el networking,&lt;/strong&gt; puede ser su nueva entrada a un pr√≥ximo desaf√≠o. Piensen que en redes es m√°s f√°cil interactuar y conocerse, principalmente en twitter, no todo es hate sino que hay muy lindas comunidades donde pueden conocer mentores y otros devs que andan en la misma.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practiquen y pidan challenges,&lt;/strong&gt; no importa si entran o no a un trabajo que est√°n buscando, puede servirles como porfolio para pr√≥ximas entrevistas y contarles c√≥mo superaron el desaf√≠o que les brindaron en alguna que otra entrevista. En mi caso no me pidieron, pero porque contando mis desaf√≠os fue m√°s que suficiente para demostrar que sab√≠a.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hablen de sus valores a la hora de tener entrevistas,&lt;/strong&gt; cuenten desaf√≠os, busquen informaci√≥n del lugar donde van a aplicar. Piensen que si quedan y el lugar es malo pueden llevarse una decepci√≥n muy grande, por eso mismo, &lt;strong&gt;no actualicen tan r√°pido su estado en linkedin. No cierren las puertas a nuevos rumbos.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mi experiencia siendo desempleado fue dif√≠cil, principalmente a fin de a√±o porque muchos se van de vacaciones y recien volvi a conseguir en febrero, no en mi actual trabajo, sino en otro que pr√≥ximamente contar√© un nuevo post. Espero que les haya sido util mi experiencia y alg√∫n que otro consejo que brinde en el post. Si se encuentran desempleados o lo est√°n recientemente espero que consigan pronto, actualicen sus porfolios, hagan challenges, hagan networking y les prometo que con esto van a estar de nuevo en las pistas. üíÉüï∫üèº&lt;/p&gt;

&lt;p&gt;Buen fin de a√±o y happy coding üßëüèΩ‚Äçüíª‚ú®&lt;/p&gt;

</description>
      <category>unemployed</category>
      <category>beginners</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I built an AI-Powered Image Processor at AWS re:Invent üò± - Day 2</title>
      <author>Brian H. Hough</author>
      <pubDate>Tue, 30 Nov 2021 20:16:53 +0000</pubDate>
      <link>https://dev.to/aws-builders/i-built-an-ai-powered-image-processor-at-aws-reinvent-day-2-2hh6</link>
      <guid>https://dev.to/aws-builders/i-built-an-ai-powered-image-processor-at-aws-reinvent-day-2-2hh6</guid>
      <description>&lt;p&gt;Just wrapped up Day 2 of Amazon Web Services (AWS) re:Invent and from the Midnight Madness concert, to building an AI-Powered Image Processor during Talia Nassi's workshop, to catching up with the amazing Adrienne Tacke from MongoDB....there is a TON going on Vegas! &lt;/p&gt;

&lt;p&gt;In this episode of the &lt;a href="https://www.youtube.com/watch?v=kJV-OD_VAJk" rel="noopener noreferrer"&gt;Tech Stack Playbook&lt;/a&gt;, I'll be sharing more about AWS re:Invent - the year's largest global tech conference that brings together leaders, builders, innovators, and creators from cloud, DevOps, serverless, app development, and software engineering from all around the world.&lt;/p&gt;

&lt;p&gt;Also, I built an AI-Powered image processing application that can take images and analyze certain features about the uploaded images‚Ä¶so that was pretty cool üò±&lt;/p&gt;

&lt;p&gt;In this blog post and the blog posts to come this week, my hope is to vlog through the entire week and share all that I'm learning and building with you all so whether you are attending virtually or in person, this AWS re:Invent series on the Tech Stack Playbook will help you gain skills, level up in tech, and boost your software engineering abilities from the sessions I'm attending throughout the conference.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a glance at what you‚Äôll learn in this blog post:&lt;br&gt;
üëâ  What AWS re:Invent is all about&lt;br&gt;
üëâ  Traveling to Las Vegas for the year's largest tech conference&lt;br&gt;
üëâ  What I'll be learning about and building this week&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yrJlaw-uo9Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's going to be a major week for cloud and tech in general, so I am so excited to bring you along for the ride.&lt;/p&gt;

&lt;p&gt;What do you want to know about AWS, serverless, and DevOps? üí≠&lt;/p&gt;

&lt;p&gt;Let me know in the comments below! ‚¨áÔ∏è&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-out-the-full-recording-below"&gt;
  &lt;/a&gt;
  Check out the full recording below:
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yrJlaw-uo9Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know if you found this post helpful! And if you haven't yet, make sure to check out these free resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Follow my Instagram for more: &lt;a href="https://instagram.com/brianhhough" rel="noopener noreferrer"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Watch my latest &lt;a href="https://youtube.com/brianhhough" rel="noopener noreferrer"&gt;YouTube video for more&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Listen to my Podcast on &lt;a href="https://podcasts.apple.com/us/podcast/tech-stack-playbook/id1553712082" rel="noopener noreferrer"&gt;Apple Podcasts&lt;/a&gt; and &lt;a href="https://open.spotify.com/show/01bHbabSyBmPfbc3ORMZa9?si=av_16aPbQEqL_bVu3RnO0g" rel="noopener noreferrer"&gt;Spotify&lt;/a&gt;&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join my FREE &lt;a href="https://facebook.com/groups/techstackplaybook" rel="noopener noreferrer"&gt;Tech Stack Playbook Facebook Group&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's digitize the world together! üöÄ&lt;/p&gt;

&lt;p&gt;-- Brian&lt;/p&gt;

</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>aws</category>
      <category>cloud</category>
    </item>
    <item>
      <title>How I improved nested arrays performance in our MongoDB</title>
      <author>Anton</author>
      <pubDate>Tue, 30 Nov 2021 20:10:15 +0000</pubDate>
      <link>https://dev.to/antmik/how-i-improved-nested-arrays-performance-in-our-mongodb-nko</link>
      <guid>https://dev.to/antmik/how-i-improved-nested-arrays-performance-in-our-mongodb-nko</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GyRDvFsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/12000/0%2Aoh9neGNt17Nx3vxQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GyRDvFsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/12000/0%2Aoh9neGNt17Nx3vxQ" alt="Photo by [Fotis Fotopoulos](https://unsplash.com/@ffstop?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How it started?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In 2019 I started to work on &lt;a href="https://fanficus.com"&gt;fanficus.com&lt;/a&gt;. Which is Russian speaking fiction writers/readers social network. Spent around a month thinking about how to structure the architecture of the web application. In the beginning, I didn‚Äôt know exactly what I am working on. Initially, it seemed a small side project for a few months.&lt;/p&gt;

&lt;p&gt;When starting I decided to choose to MEAN full-stack (MongoDB, Angular, ExpressJs, NodeJs). However, it was a dilemma what to choose MySQL or MongoDB. Because previously I had some experience with MySQL and I knew SQL databases had a major market share in web projects. MongoDB was chosen because it is based on javascript objects, therefore it‚Äôs natural to use on the current stack.&lt;/p&gt;

&lt;p&gt;The largest part of the web app is based on posts. They can be of different types and include a lot of parameters. Such as age rating, genres, tags, etc.&lt;/p&gt;

&lt;p&gt;Understanding that the database has to be flexible I decided to avoid nested arrays of objects. Because that was creating a risk of misalignment between collections. For example, there is a post that has genres array objects. Genre contains title and id. But at the same time, there is a genres collection. Where all genres are listed. We use it when creating new posts.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;post: {
  genres: [id1, id2, id3],
  tags: [id1, id2, id3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, what happens if we rename a genre? in the genres collection, it is renamed, but in all posts containing the genre, it remained with the old name. So we end up with a post that contains inexisting genre.&lt;/p&gt;

&lt;p&gt;Yes, you may say each time we update the genre we can update all the posts containing this genre. Though I wanted to avoid this obsolete load on the database.&lt;/p&gt;

&lt;p&gt;The way was chosen is to store in the post only an array of IDs of genres. It seemed the most effective solution. Anyway, it was more optimal than going in an SQL way and having three collections: posts, genres, post-genre.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The website was released and worked well enough. Even on each request, it was populating all the posts with an age rating, genres, etc. As a result on the frontend, I was receiving the full objects and didn‚Äôt need to run additional queries.&lt;/p&gt;

&lt;p&gt;However, after a few months number of posts increased. We started to mention slow loading times. After spending some time on the investigation figured out what was the issue. And the problem was in an ****array of IDs. Each post contained up to ten such nested arrays. Meaning each post had to run ten population commands.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PostModel.find({}).populate(‚Äògenres‚Äô).populate(‚Äòtags‚Äô).populate(‚ÄòageRating‚Äô).exec();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It was not the only problem. The way we run search queries on posts also was impacted by the way we store nested IDs. Each time we run a search on the website it was seeking tags titles, then we took IDs and run a posts query.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tagsFound = await TagModel.find({‚Äòtitle‚Äô: { $in: keywordsRegArr }}).exec();
const tagsIdsArr = tagsFound.map( tag=&amp;gt; tag._id );
PostModel.find({tags:tagsIdsArr}).exec();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In addition to page load performance, we saw our MongoDB Atlas server was charging too much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How it was solved?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After long arguments with myself, I saw that the most optimal solution will be to store the full objects inside each post. Yes, it was increasing database size. However, it was solving the main issue with performance and querying.&lt;/p&gt;

&lt;p&gt;Now posts collection looked this way:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;post: {
  genres: [{id: 1, title: 'one'}, {id: 2, title: 'two'}],
  tags: [{id: 1, title: 'one'}, {id: 2, title: 'two'}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It was meaning now each time we search posts we don‚Äôt need to search tags to get their IDs. Now it‚Äôs just running **text search **over all posts.&lt;/p&gt;

&lt;p&gt;One more important thing that was added is &lt;strong&gt;caching&lt;/strong&gt;. For that one, I used node-cache npm package. Part of the queries is cached on the NodeJs. That way we reduce the load on the database. Some requests are cached for hours, some for minutes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As already was said, now we were able to run a &lt;strong&gt;text search&lt;/strong&gt; query and avoid multiple &lt;strong&gt;populations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Post objects were retrieved from the posts-collection directly without any manipulations.&lt;/p&gt;

&lt;p&gt;As a result query and loading times were reduced at least by four times. And it‚Äôs on the current database which is in comparison to social networks is small.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawbacks&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Now each time we change genres, age ratings, etc, we need to &lt;strong&gt;update all posts&lt;/strong&gt; containing these objects. But these items change rarely, so we can absorb this one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then also I had to modify &lt;strong&gt;search queries&lt;/strong&gt; from the &lt;strong&gt;client app&lt;/strong&gt;. Because post-collection contained a nested array of objects instead of an array of IDs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Storage size&lt;/strong&gt; increased. In the end, the database size didn‚Äôt increase significantly. We didn‚Äôt even mention it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The project was released a year ago. At the moment we have 22k users and it‚Äôs growing. We have a lot of features implemented, though a lot more are in development. There are many issues we meet on the road. However, overcoming them and conquering the next mountain peaks.&lt;/p&gt;

&lt;p&gt;Now the database refactoring is tested on our testing server and gonna be released soon.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>mongodb</category>
      <category>angular</category>
    </item>
    <item>
      <title>How to write more readable React code</title>
      <author>Matt Angelosanto</author>
      <pubDate>Tue, 30 Nov 2021 19:55:36 +0000</pubDate>
      <link>https://dev.to/logrocket/how-to-write-more-readable-react-code-5250</link>
      <guid>https://dev.to/logrocket/how-to-write-more-readable-react-code-5250</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/chakshunyu/"&gt;Chak Shun Yu&lt;/a&gt;&lt;/strong&gt; ‚úèÔ∏è&lt;/p&gt;

&lt;p&gt;One of the most important aspects of code is its readability. Easily readable code is the result of well-written code, and it has a lot of long-term benefits. It will be easier to read, understand, maintain, review, less prone to unexpected errors, and generally make the lives of other developers a lot easier when they have to interact with that code.&lt;/p&gt;

&lt;p&gt;The difficulty of code readability is especially prominent in React development due to its composite nature. The resulting code is filled with a lot of code patterns, very fragmented, and generally distributed over multiple places. This further increases the difficulty of writing readable React code.&lt;/p&gt;

&lt;p&gt;However, writing readable React code is not an impossible task. Doing so starts with making the entire process a conscious one. For that, it's important to know what aspects to focus on.&lt;/p&gt;

&lt;p&gt;To help you with this, this article will cover multiple topics that you should consider when writing more readable code and its impact on readability, including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#length-code"&gt;Length of the code&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#how-closely-related-code-grouped-together"&gt;How closely-related code is grouped together&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#complicated-javascript-constructions"&gt;Complicated JavaScript constructions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#how-many-flows-handled-at-once"&gt;How many flows are handled at once&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#variable-naming"&gt;Variable naming&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#highlighting-similarities-differences"&gt;Highlighting similarities and differences&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully, this information will provide you with a solid foundation on how to write more readable React code right now, and in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#length-of-the-code"&gt;
  &lt;/a&gt;
  Length of the code
&lt;/h2&gt;

&lt;p&gt;When discussing code readability, the topic that is most commonly mentioned is the length of the code. Shorter code, in both the vertical and horizontal directions, is often associated with being more readable. The main reason for this is that shorter code equals less code for developers to read through. This results in fewer opportunities that can confuse, which would otherwise make it harder for developers to read through the code.&lt;/p&gt;

&lt;p&gt;In reality, however, it's not that clearly differentiated. While writing less code can contribute a lot to readability, it's not an ultimate guarantee. There also comes a turning point where shortening the code even further turns it from being beneficial to harmful for the readability.&lt;/p&gt;

&lt;p&gt;When pushing for shorter code with the assumption that it's beneficial for the code readability, the other aspect that is often sacrificed is explicitness.&lt;/p&gt;

&lt;p&gt;Take the concept of inline conditional rendering, where it's often between the AND and the ternary operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrettyLink&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; &lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// -- OR --&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrettyLink&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The former is considered shorter and more concise, while the latter is considered lengthy and only appropriate when both branches of the condition are necessary.&lt;/p&gt;

&lt;p&gt;But using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#:~:text=The%20logical%20AND%20(%20%26%26%20)%20operator,it%20returns%20a%20Boolean%20value."&gt;&lt;code&gt;&amp;amp;&amp;amp; operator&lt;/code&gt;&lt;/a&gt; means that one branch is not explicitly stated, so it's up to the reader to figure out what the expected behavior is for the other branch (even if it's to render nothing), whether it was left out by mistake, and look for information that is not provided to them.&lt;/p&gt;

&lt;p&gt;This is a clear sacrifice of explicitness for the sake of saving on code length. Whether this is more readable depends on the scenario, but it isn't always as straightforward as "the shorter the better".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-closelyrelated-code-is-grouped-together"&gt;
  &lt;/a&gt;
  How closely-related code is grouped together
&lt;/h2&gt;

&lt;p&gt;One of the reasons we create custom components, Hooks, and functions in React is because it groups related code. Instead of scattering code all over the place, it packages everything in one location under a certain context or purpose.&lt;/p&gt;

&lt;p&gt;In the same fashion, the distance at which similar code is grouped also plays a role in the readability.&lt;/p&gt;

&lt;p&gt;One of the biggest examples of this occurrence in React development is the introduction of &lt;a href="https://blog.logrocket.com/react-hooks-the-good-the-bad-and-the-ugly/"&gt;React Hooks&lt;/a&gt;. Before Hooks, the only way to include logic with React components was through using class components. To do so, we had to implement lifecycle methods and put pieces of logic in the appropriate places.&lt;/p&gt;

&lt;p&gt;Unfortunately, these lifecycle methods were scattered across the component and, in certain cases, were written in a specific order ‚Äî your logic was broken up and distributed across the component. This increased the distance between related code blocks and often made it hard to see and understand the logic flow.&lt;/p&gt;

&lt;p&gt;With the introduction of Hooks, we didn't only receive a way to &lt;a href="https://blog.logrocket.com/react-render-props-vs-custom-hooks/"&gt;reuse logic across multiple components&lt;/a&gt;, but also a way to group all the related code closely together. This reduced the distance at which similar code is grouped.&lt;/p&gt;

&lt;p&gt;This is an important factor for code readability and maintainability, and thus should be kept in mind whenever possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complicated-javascript-constructions"&gt;
  &lt;/a&gt;
  Complicated JavaScript constructions
&lt;/h2&gt;

&lt;p&gt;In the end, a major part of React development is JavaScript. Implementing React components, logic, Hooks, and more is all done in JavaScript, which means that all of JavaScript can be used for it. That can be both an advantage and a drawback.&lt;/p&gt;

&lt;p&gt;As a programming language, JavaScript is very extensive and allows for a lot of different implementations. But a major drawback to such an extensive language is that not everyone will be similarly familiar with all the language details.&lt;/p&gt;

&lt;p&gt;Many language features in JavaScript are based on intrinsic details or implicit behavior, which compounds its complexity when coupled with its dynamic nature. These two factors make certain JavaScript constructions more complicated to understand and can negatively impact the readability of your code based on how familiar your developers are with them.&lt;/p&gt;

&lt;p&gt;Let‚Äôs discuss a few common example JavaScript constructions that I've noticed are more difficult to understand. For all of these constructions, understanding the implicit concepts behind them is crucial for understanding the construction itself. Not having that information can significantly negatively affect readability.&lt;/p&gt;

&lt;p&gt;While it's likely that most React developers will be aware of these constructions, it's not a given guarantee, and thus something to keep in mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-arrayreduce-endraw-function-for-data-conversion"&gt;
  &lt;/a&gt;
  The &lt;code&gt;Array.reduce&lt;/code&gt; function for data conversion
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;idObjects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getValueFromId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Array.reduce&lt;/code&gt; function is often used to convert an array into a different data structure, like an object. The code is very compact, but it's also often difficult to understand ‚Äî there's a lot of details to keep track of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The original array&lt;/li&gt;
&lt;li&gt;  The &lt;code&gt;reduce&lt;/code&gt; call&lt;/li&gt;
&lt;li&gt;  The previous value&lt;/li&gt;
&lt;li&gt;  The current value&lt;/li&gt;
&lt;li&gt;  The initial structure&lt;/li&gt;
&lt;li&gt;  The resulting structure&lt;/li&gt;
&lt;li&gt;  How the different values are combined&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The order of this information is also unnatural, like the initial structure being defined last. A different structure that improves upon this is the for-loop. Although it‚Äôs considered more ugly and verbose, the resulting code is often more readable due to the more straightforward order of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  First comes the initialization of variables&lt;/li&gt;
&lt;li&gt;  Second are the length and limits of the loop&lt;/li&gt;
&lt;li&gt;  Third come all the actions onto the relevant variables&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-ampamp-endraw-operator-for-conditional-rendering"&gt;
  &lt;/a&gt;
  The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator for conditional rendering
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;hasImage&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hasImage&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A very commonly used construction for &lt;a href="https://www.chakshunyu.com/blog/react-readability-analysis-of-inline-conditional-rendering/"&gt;inline conditional rendering&lt;/a&gt; is the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator. Based on the value of the left-hand side operand, the right-hand side operand might be rendered.&lt;/p&gt;

&lt;p&gt;However, this construction only works due to the implicit JavaScript behavior called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation"&gt;short-circuiting&lt;/a&gt;. When the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; expression is evaluated and the left-hand side operator evaluates to a falsy value, then that operand is returned and the evaluation of the right-hand side operand is entirely skipped.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-many-flows-are-handled-at-once"&gt;
  &lt;/a&gt;
  How many flows are handled at once
&lt;/h2&gt;

&lt;p&gt;Any given web application will have to deal with all types of information flowing around. Together with the ever-increasing complexity of web applications, it's also never about handling just one data or logic flow. Any UI will have a dozen, hundred, or even a thousand smaller pieces. Every single piece will be connected to some kind of information and have multiple flows going through them.&lt;/p&gt;

&lt;p&gt;React provides us with a lot of tools to implement data and logic flows. Think of &lt;a href="https://blog.logrocket.com/react-hooks-cheat-sheet-unlock-solutions-to-common-problems-af4caf699e70/"&gt;out-of-the-box Hooks&lt;/a&gt; like &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useReducer&lt;/code&gt;, &lt;code&gt;useEffect&lt;/code&gt;, and &lt;code&gt;useLayoutEffect&lt;/code&gt;, and the ability to reuse logic in the form of &lt;a href="https://blog.logrocket.com/advanced-react-hooks-creating-custom-reusable-hooks/"&gt;custom Hooks&lt;/a&gt;. While these tools allow React developers to handle flows very easily and effectively, they also have their drawbacks in certain scenarios.&lt;/p&gt;

&lt;p&gt;It's very easy to entangle a lot of flows in a single location because of how straightforward it is to implement flows into your components. Multiple flows going through a single component or combining pieces of logic from multiple flows into a single &lt;code&gt;useEffect&lt;/code&gt; Hook is not an uncommon occurrence.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Logic...&lt;/span&gt;

    &lt;span class="c1"&gt;// Here, we're combining flows for the data request, empty state, filled logic state, and&lt;/span&gt;
    &lt;span class="c1"&gt;// server error feedback into a single `useEffect`. It feels natural, but is it readable?&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setRequestState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LOADING&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setRequestState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DONE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;triggerEmptyState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setRequestState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DONE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataIsValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;updateOtherLogicWithData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;informServerDataIsInvalid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateOtherLogicWithData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;informServerDataIsInvalid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;triggerEmptyState&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="c1"&gt;// Render...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem with combining piece of logic from multiple flows into a single &lt;code&gt;useEffect&lt;/code&gt; Hook like this is that it can negatively influence code readability. Putting different flows closely together will make them intertwined, difficult to separate, and tightly coupled. The resulting code will thus become more difficult to understand and harder to maintain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variable-naming"&gt;
  &lt;/a&gt;
  Variable naming
&lt;/h2&gt;

&lt;p&gt;In general, one of the most difficult things in software development is naming things. Proper names can make or break the readability of code. React development is no exception. But due to the composite nature of React, there are a lot of entities to be named. Hooks, components, functions, variables, props, callbacks, contexts ‚Äî and the list goes on.&lt;/p&gt;

&lt;p&gt;Together with the focus on reusability, their names cannot be so specific that they seemingly prevent reusability, but also can‚Äôt be too generic because they should reflect their scope and context.&lt;/p&gt;

&lt;p&gt;Properly naming them can bring you very far in writing more readable code. Not only does it benefit code readability, but it can also enhance the quality of the code and increase future maintainability. A few examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Include a prefix with the component's props to indicate the type of the API ‚Äî this makes it clear to users what behavior is expected of it and how to use it

&lt;ul&gt;
&lt;li&gt;  e.g., instead of naming a boolean prop &lt;code&gt;valid&lt;/code&gt;, consider naming it &lt;code&gt;isValid&lt;/code&gt;; instead of &lt;code&gt;validate&lt;/code&gt;, consider calling it &lt;code&gt;onValidate&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  If you have multiple props that configure a similar aspect, then you can most likely simplify the API design. This can quickly be noticed by the names, like having both an &lt;code&gt;isLoading&lt;/code&gt; and an &lt;code&gt;isError&lt;/code&gt; boolean prop

&lt;ul&gt;
&lt;li&gt;  Considering an enumeration prop called that captures both of the previous props could make the API design more clear and less cluttered&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Consider the scope in which components can be used ‚Äî if you have an avatar rendering component that's generic for the whole platform, then it's fine to call it &lt;code&gt;Avatar&lt;/code&gt;, but if it's specifically meant to be used in a section of a card, then it's beneficial to make that explicit in the name and call it &lt;code&gt;CardAvatar&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Name callbacks after what they do, not how they will be used: if you need to provide a callback to a component's &lt;code&gt;onChange&lt;/code&gt; prop, then naming that callback &lt;code&gt;onChange&lt;/code&gt; will not add any useful information to the reader

&lt;ul&gt;
&lt;li&gt;  e.g., instead, consider naming it after what they do: &lt;code&gt;updateStateValue&lt;/code&gt; increases the readability because it clarifies what the callback does and what will happen when the appropriate change event occurs in the used component&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are concrete examples of how naming variables differently can change the readability and quality of React code. But it‚Äôs not only limited to these examples ‚Äî the most important thing is to keep this topic in mind when writing, consider the quality and specificity of your naming style, and potentially improve upon it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highlighting-similarities-or-differences-in-react-code"&gt;
  &lt;/a&gt;
  Highlighting similarities or differences in React code
&lt;/h2&gt;

&lt;p&gt;There are a lot of different types of code flying around in React development ‚Äî CSS, JS, HTML (or JSX) ‚Äî and because of this, a lot of code is located in a single location. Especially in such a UI-centered development field, it means that there will be many scenarios where the code has either minor similarities or differences.&lt;/p&gt;

&lt;p&gt;Properly highlighting these occurrences can make a world of difference for the readability of the code. Consider the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isEditable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEditable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;OuterSection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Edit&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SectionButton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Clear&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SectionButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/OuterSection&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;OuterSection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Read&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/OuterSection&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// -- OR --&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isEditable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;OuterSection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isEditable&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Edit this content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Read this content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isEditable&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SectionButton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Clear&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SectionButton&amp;gt; : null &lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/OuterSection&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When these occurrences are highlighted, you can more easily see how certain flows, branches, or results are related to each other, which parts are connected, which parts are different, and so on.&lt;/p&gt;

&lt;p&gt;If the approach you use to do this isn‚Äôt thoughtful, it can result in duplicate code, or code that requires a higher cognitive load ‚Äî meaning more things to keep track of, disconnected flows, and harder to understand code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;Writing readable code is one of the most important aspects of software development, and it isn't a trivial task. Its difficulty is especially prominent in React development because of its composite, fragmented, and distributed nature. There is a lot more code and factors to consider when dealing with code readability, which can be overwhelming and make it very difficult.&lt;/p&gt;

&lt;p&gt;In this article, I went over various React code aspects to consider when writing more readable code. These include the length of the code, how closely related blocks of code are grouped, whether complicated JavaScript constructions are used, how many flows are handled at once, the naming of your variables and entities, and the degree to which similarities or differences are highlighted. For each topic, we went over why they matter, their impact on the code readability, and how their impact can be controlled.&lt;/p&gt;

&lt;p&gt;Using this information, you should have a solid foundation on what aspects to consider and how to write more readable React code. Not only will this have an immediate impact on the readability of your code, but also on its reviewability and long-term maintainability.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-visibility-into-production-react-apps"&gt;
  &lt;/a&gt;
  Full visibility into production React apps
&lt;/h2&gt;

&lt;p&gt;Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you‚Äôre interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your React app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your React apps ‚Äî &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top Docker alternatives for 2022</title>
      <author>Matt Angelosanto</author>
      <pubDate>Tue, 30 Nov 2021 19:50:10 +0000</pubDate>
      <link>https://dev.to/logrocket/top-docker-alternatives-for-2022-25hp</link>
      <guid>https://dev.to/logrocket/top-docker-alternatives-for-2022-25hp</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ayooluwaisaiah/"&gt;Ayooluwa Isaiah&lt;/a&gt;&lt;/strong&gt; ‚úèÔ∏è&lt;/p&gt;

&lt;p&gt;As one of the most widely used container platforms, &lt;a href="https://blog.logrocket.com/dockerizing-a-django-app/"&gt;Docker, a monolithic tool&lt;/a&gt;, handles every aspect of the containerization process, from building, running, and inspecting container images.&lt;/p&gt;

&lt;p&gt;In August 2021, Docker Desktop announced &lt;a href="https://www.docker.com/blog/updating-product-subscriptions/"&gt;changes to its licensing&lt;/a&gt;, meaning it will no longer be free for companies with more than 250 employees or over $10 million in revenue.¬†However, there are several alternative approaches to containerization, often in the form of standalone tools, which in some cases offer a better result than what Docker delivers.&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll cover a few Docker alternatives that act as drop-in replacements for various aspects of the Docker ecosystem. Each tool covered in this tutorial adheres to the &lt;a href="https://opencontainers.org/"&gt;Open Containers Initiative (OCI)&lt;/a&gt; specification, which includes specifications for container runtime, container distribution, and container images.¬†Let‚Äôs get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-podman"&gt;
  &lt;/a&gt;
  1. Podman
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://podman.io/"&gt;Podman&lt;/a&gt;, a container engine developed by RedHat, is one of the most prominent alternatives to Docker for building, running, and storing container images. Podman maintains compatibility with the OCI container image spec just like Docker, meaning Podman can run container images produced by Docker and vice versa.&lt;/p&gt;

&lt;p&gt;Podman's command line interface is identical to Docker's, including the arguments. You can simply alias the &lt;code&gt;docker&lt;/code&gt; command to &lt;code&gt;podman&lt;/code&gt; without noticing the difference, making it easy for existing Docker users to transition to Podman:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# .bashrc&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;podman
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike Docker, which uses the &lt;code&gt;dockerd&lt;/code&gt; daemon to manage all the containers under its control, Podman is daemonless. Therefore, there's no persistent connection to some long-living process, removing the single point of failure problem in Docker, where an abrupt crash in the daemon process can kill running containers or cause them to become orphaned.&lt;/p&gt;

&lt;p&gt;Podman interacts with the image registry, storage, and Linux kernel, and its containers are independent of any central process. Instead, the containers are started as child processes of the Podman process, heavily utilizing user namespaces and network namespaces.&lt;/p&gt;

&lt;p&gt;Podman also differentiates itself from Docker by utilizing rootless containers by default. Root access is not necessary for launching and operating a container, but it helps to mitigate potential vulnerabilities in the container runtime that can cause privilege escalation.&lt;/p&gt;

&lt;p&gt;Note that Docker now supports a &lt;a href="https://docs.docker.com/engine/security/rootless/"&gt;rootless mode&lt;/a&gt;, which debuted as an experimental feature in Docker Engine v19.03 before being stabilized in v20.10. However, its use is not yet widespread in the ecosystem.&lt;/p&gt;

&lt;p&gt;An additional feature of Podman that is not yet present in Docker is the ability to create and run pods. A pod is a collection of one or more containers that utilize a shared pool of resources and work closely together to achieve a specific function. Pods are also the smallest execution unit in Kubernetes, making the transition to Kubernetes easier should the need arise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-buildah"&gt;
  &lt;/a&gt;
  2. Buildah
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://buildah.io/"&gt;Buildah&lt;/a&gt; is an alternative to Docker for building images. Also developed by RedHat, Buildah is often used together with Podman. In fact, Podman uses a subset of Buildah's functionality to implement its &lt;code&gt;build&lt;/code&gt; subcommand.&lt;/p&gt;

&lt;p&gt;If you need fine-grained control over images, you should use the full Buildah CLI tool. At the time of writing, Buildah works on several Linux distributions but is not supported on Windows or macOS.&lt;/p&gt;

&lt;p&gt;The images that Buildah produces are fully compliant with the OCI specification, operating in the same manner as images built with Docker. Buildah can also create images using an existing &lt;code&gt;Dockerfile&lt;/code&gt; or &lt;code&gt;Containerfile&lt;/code&gt;, making migration much easier. Buildah also allows you to use Bash scripts that sidestep the limitations of Dockerfiles, automating the process more easily.&lt;/p&gt;

&lt;p&gt;Like Podman, Buildah follows a fork-exec model that doesn‚Äôt require a central daemon or root access to operate.&lt;/p&gt;

&lt;p&gt;One advantage of using Buildah over Docker is its ability to commit many changes to a single layer, which is a long-requested feature among container users. Buildah also provides the ability to create an empty container image storing only metadata, making it easy to add only the necessary packages that are required in the image. In turn, the final output is smaller than its Docker equivalent.&lt;/p&gt;

&lt;p&gt;Another difference is that Buildah images are user-specific, so only the images built by a user will be visible to them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-buildkit"&gt;
  &lt;/a&gt;
  3. Buildkit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/moby/buildkit"&gt;Buildkit&lt;/a&gt; is a new &lt;span&gt;image building engine for Docker developed as part of the&lt;/span&gt; &lt;a href="https://mobyproject.org/"&gt;Moby project&lt;/a&gt;&lt;span&gt;. From&lt;/span&gt;¬†Docker ‚â•v18.09, Buildkit is &lt;a href="https://docs.docker.com/develop/develop-images/build_enhancements/"&gt;integrated into &lt;code&gt;docker build&lt;/code&gt;&lt;/a&gt;, but it also comes as a standalone tool.&lt;/p&gt;

&lt;p&gt;One of Buildkit‚Äôs headline features includes improved performance through parallel processing of image layers that don‚Äôt depend on each other. Another is better caching, which reduces the need to rebuild each layer of an image. Finally, Buildkit offers extensibility through a more pluggable architecture. Buildkit also introduces rootless builds and the ability to skip unused stages.&lt;/p&gt;

&lt;p&gt;At the time of writing, Buildkit is available on an opt-in basis. To enable Buildkit before building an image, you must use the &lt;code&gt;DOCKER_BUILDKIT&lt;/code&gt; environmental variable in your shell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 docker build &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also configure Docker to use Buildkit by default. Simply edit or create the &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt; file as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"features"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"buildkit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After saving the file, reload the daemon to apply the change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;systemctl reload docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's easy to tell when Buildkit is being used due to its output, which differs from the default engine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 docker build &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;+] Building 30.8s &lt;span class="o"&gt;(&lt;/span&gt;7/7&lt;span class="o"&gt;)&lt;/span&gt; FINISHED &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load build definition from Dockerfile 0.1s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; transferring dockerfile: 142B 0.1s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load .dockerignore 0.0s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; transferring context: 2B 0.0s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load metadata &lt;span class="k"&gt;for &lt;/span&gt;docker.io/library/centos:latest 0.6s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;auth] library/centos:pull token &lt;span class="k"&gt;for &lt;/span&gt;registry-1.docker.io 0.0s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;1/2] FROM docker.io/library/centos:latest@sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6 14.3s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; resolve docker.io/library/centos:latest@sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c 0.0s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177 762B / 762B 0.0s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; sha256:a1801b843b1bfaf77c501e7a6d3f709401a1e0c83863037fa3aab063a7fdb9dc 529B / 529B 0.0s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6 2.14kB / 2.14kB 0.0s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; sha256:a1d0c75327776413fa0db9ed3adcdbadedc95a662eb1d360dad82bb913f8a1d1 83.52MB / 83.52MB 2.0s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; extracting sha256:a1d0c75327776413fa0db9ed3adcdbadedc95a662eb1d360dad82bb913f8a1d1 10.8s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2/2] RUN yum &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nb"&gt;install &lt;/span&gt;httpd 14.7s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting to image 1.0s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting layers 1.0s &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:c18170a407ca85218ee83526075a3f2a2e74f27d7bd5908ad68ba2328b4f4783 0.0s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-kaniko"&gt;
  &lt;/a&gt;
  4. Kaniko
&lt;/h2&gt;

&lt;p&gt;Developed by Google, &lt;a href="https://github.com/GoogleContainerTools/kaniko"&gt;Kaniko&lt;/a&gt; is used to develop container images inside of a container or a Kubernetes cluster. Like Buildah, Kaniko does not require a daemon, and it can build images from Dockerfiles without depending on Docker.&lt;/p&gt;

&lt;p&gt;The major difference between Docker and Kaniko is that Kaniko is more focused on Kubernetes workflows, and it is meant to be run as an image, making it inconvenient for local development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-skopeo"&gt;
  &lt;/a&gt;
  5. Skopeo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/containers/skopeo"&gt;Skopeo&lt;/a&gt; is yet another tool developed by RedHat for various operations on container images and image repositories. Skopeo can be used as an accompanying tool for Podman and Buildah, which are both intended to inspect images, transfer them from one registry to another, and bulk delete them if necessary.&lt;/p&gt;

&lt;p&gt;Skopeo provides an &lt;code&gt;inspect&lt;/code&gt; subcommand, which provides similar low-level information about a container image to &lt;code&gt;docker inspect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In contrast to Docker, Skopeo can help you gather useful information about a repository or a tag without having to download it first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;skopeo inspect docker://docker.io/fedora &lt;span class="c"&gt;# inspect remote image&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"docker.io/library/fedora"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Digest"&lt;/span&gt;: &lt;span class="s2"&gt;"sha256:72c6c48a902baff1ab9948558556ef59e3429c65697287791be3c709738955b3"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RepoTags"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"20"&lt;/span&gt;,
        &lt;span class="s2"&gt;"21"&lt;/span&gt;,
        &lt;span class="s2"&gt;"22"&lt;/span&gt;,
        &lt;span class="s2"&gt;"23"&lt;/span&gt;,
        &lt;span class="s2"&gt;"24"&lt;/span&gt;,
        &lt;span class="s2"&gt;"25"&lt;/span&gt;,
        &lt;span class="s2"&gt;"26"&lt;/span&gt;,
        &lt;span class="s2"&gt;"26-modular"&lt;/span&gt;,
        &lt;span class="s2"&gt;"27"&lt;/span&gt;,
        &lt;span class="s2"&gt;"28"&lt;/span&gt;,
        &lt;span class="s2"&gt;"29"&lt;/span&gt;,
        &lt;span class="s2"&gt;"30"&lt;/span&gt;,
        &lt;span class="s2"&gt;"31"&lt;/span&gt;,
        &lt;span class="s2"&gt;"32"&lt;/span&gt;,
        &lt;span class="s2"&gt;"33"&lt;/span&gt;,
        &lt;span class="s2"&gt;"34"&lt;/span&gt;,
        &lt;span class="s2"&gt;"35"&lt;/span&gt;,
        &lt;span class="s2"&gt;"36"&lt;/span&gt;,
        &lt;span class="s2"&gt;"branched"&lt;/span&gt;,
        &lt;span class="s2"&gt;"heisenbug"&lt;/span&gt;,
        &lt;span class="s2"&gt;"latest"&lt;/span&gt;,
        &lt;span class="s2"&gt;"modular"&lt;/span&gt;,
        &lt;span class="s2"&gt;"rawhide"&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s2"&gt;"Created"&lt;/span&gt;: &lt;span class="s2"&gt;"2021-11-02T21:29:22.547065293Z"&lt;/span&gt;,
    &lt;span class="s2"&gt;"DockerVersion"&lt;/span&gt;: &lt;span class="s2"&gt;"20.10.7"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Labels"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"maintainer"&lt;/span&gt;: &lt;span class="s2"&gt;"Clement Verna &lt;/span&gt;&lt;span class="se"&gt;\u&lt;/span&gt;&lt;span class="s2"&gt;003ccverna@fedoraproject.org&lt;/span&gt;&lt;span class="se"&gt;\u&lt;/span&gt;&lt;span class="s2"&gt;003e"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;"Architecture"&lt;/span&gt;: &lt;span class="s2"&gt;"amd64"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Os"&lt;/span&gt;: &lt;span class="s2"&gt;"linux"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Layers"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"sha256:fc811dadee2400b171b0e1eed1d973c4aa9459c6f81c77ce11c014a6104ae005"&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s2"&gt;"Env"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"&lt;/span&gt;,
        &lt;span class="s2"&gt;"DISTTAG=f35container"&lt;/span&gt;,
        &lt;span class="s2"&gt;"FGC=f35"&lt;/span&gt;,
        &lt;span class="s2"&gt;"FBR=f35"&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use &lt;code&gt;skopeo copy&lt;/code&gt; to copy a container image from one remote registry to either another remote registry or a¬†local directory. Anotther related feature is Skopeo's ability to synchronize images between container registries and local directories with the &lt;code&gt;skopeo sync&lt;/code&gt; command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-dive"&gt;
  &lt;/a&gt;
  6. Dive
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/wagoodman/dive"&gt;Dive&lt;/a&gt; is a tool for inspecting, analyzing, and optimizing container images. Dive can show image contents by layer, highlighting the differences between each. Dive can also analyze your image, providing a percentage score for efficiency by estimating wasted space, which is helpful when you‚Äôre trying to reduce your image size.&lt;/p&gt;

&lt;p&gt;Another useful feature is Dive‚Äôs CI integration, which provides a pass or fail result based on the image's efficiency and amount of wasted space. To access the CI integration feature, set the &lt;code&gt;CI&lt;/code&gt; environmental variable to &lt;code&gt;true&lt;/code&gt; when invoking any valid &lt;code&gt;dive&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ CI&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true &lt;/span&gt;dive node:alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hu6_W5bK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/dive-ci-integration.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hu6_W5bK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/dive-ci-integration.png" alt="Dive CI Integration" width="730" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-runc-and-crun"&gt;
  &lt;/a&gt;
  7. runc and crun
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/opencontainers/runc"&gt;runc&lt;/a&gt; is a CLI tool that spawns and runs containers on Linux according to the OCI specification. runc was formerly embedded into Docker as a module but was later spun into a &lt;a href="https://www.docker.com/blog/runc/"&gt;standalone tool in 2015&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;runc remains the default container runtime in Docker, Podman, and most other container engines. An alternative to runc is &lt;a href="https://github.com/containers/crun"&gt;c&lt;/a&gt;&lt;a href="https://github.com/containers/crun"&gt;run&lt;/a&gt;, which was developed by RedHat and written in C instead of Go like most Linux container tools.&lt;/p&gt;

&lt;p&gt;crun boasts better performance and lower memory usage compared to runc, as well as the ability to set stricter limits on the memory allowed in the container. crun is also OCI-compliant and feature-compatible with runc, so you can use it as a replacement for runc in Docker, Podman,&lt;code&gt;containerd&lt;/code&gt;, and any other container engine that uses OCI-compliant container runtimes. See the &lt;a href="https://www.redhat.com/sysadmin/introduction-crun"&gt;introductory article on crun&lt;/a&gt; for a more detailed comparison to runc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;In this article, we've described several alternatives to Docker for building, running, and distributing container images. Although Docker remains the dominant platform for containerization and container management, it's good to know about alternative tools that may work better for your use case.&lt;/p&gt;

&lt;p&gt;Replacing a specific Docker aspect should be fairly seamless because each tool mentioned adheres to the OCI specification. Be sure to leave a comment if there is any tool you think we missed. Thanks for reading!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-your-web-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Full visibility into your web apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.&lt;/p&gt;

&lt;p&gt;In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Moving your favorite IDE to the cloud (VSCode vs JetBrains)</title>
      <author>Aleksandar Zeljkoviƒá</author>
      <pubDate>Tue, 30 Nov 2021 19:34:03 +0000</pubDate>
      <link>https://dev.to/zeljkovic/moving-your-favorite-ide-to-the-cloud-vscode-vs-jetbrains-k2k</link>
      <guid>https://dev.to/zeljkovic/moving-your-favorite-ide-to-the-cloud-vscode-vs-jetbrains-k2k</guid>
      <description>&lt;p&gt;&lt;em&gt;The moment when I realized that I definitely need a remote dev environment was last year, at the beginning of the Covid-19 crisis. The first problem was the fact that I was working from several locations on a few different machines due to ever-changing lockdowns. The second problem was the degradation of internet connection and DNS, due to the sudden high demand for internet bandwidth. These dynamic circumstances finally pushed me to find a solution that is decentralized, stable, and accessible. I was actually surprised with the number of possible solutions for this problem, and in this article, I‚Äôm going to share the process that I used (and I‚Äôm still using) to set up VSCode and JetBrains IDEs on a remote machine.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vs-code-setup"&gt;
  &lt;/a&gt;
  VS Code setup
&lt;/h2&gt;

&lt;p&gt;When it comes to remote code execution, Visual Studio Code officially provides three ways to achieve this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remote via SSH ‚Äì Connect to remote and virtual machines with Visual Studio Code via SSH&lt;/li&gt;
&lt;li&gt;Work in WSL ‚Äì Run Visual Studio Code in Windows Subsystem for Linux.&lt;/li&gt;
&lt;li&gt;Develop in Containers ‚Äì Run Visual Studio Code in a Docker Container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While all these implementations can be very handy, they were not suitable for my use case since I wanted my VS Code environment completely independent from my workstation. This means that I wanted to be able to access it from the browser, from any computer without the need to install any additional dependencies like VS Code, SSH client, or similar.&lt;/p&gt;

&lt;p&gt;There is another interesting solution today called GitHub Codespaces. Honestly, I don‚Äôt know much about this and I‚Äôm not sure if it existed at the time when I investigated this concept last year, but GitHub describes it as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Blazing fast cloud developer environments&lt;/p&gt;

&lt;p&gt;Visual Studio Code backed by high performance VMs that start in seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/features/codespaces"&gt;https://github.com/features/codespaces&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a nutshell, it‚Äôs GitHub‚Äôs SaaS that provides VS Code on demand for a per-hour-based pricing model. This sounds better, but I would rather like my machine fully managed by me. Additionally I‚Äôm often in a position to have very cheap instances so this wouldn‚Äôt make sense in a financial way as well.&lt;/p&gt;

&lt;p&gt;Since I didn‚Äôt find an appropriate official solution, I did a bit of investigation and found a tool called code-server (&lt;a href="https://github.com/cdr/code-server"&gt;https://github.com/cdr/code-server&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Run VS Code on any machine anywhere and access it in the browser.&lt;/p&gt;

&lt;p&gt;code-server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It sounds like exactly what I need, I decided to give it a try. There are several ways to setup code-server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;installation shell script&lt;/li&gt;
&lt;li&gt;yarn/npm&lt;/li&gt;
&lt;li&gt;standalone releases&lt;/li&gt;
&lt;li&gt;linux packages&lt;/li&gt;
&lt;li&gt;brew package&lt;/li&gt;
&lt;li&gt;docker&lt;/li&gt;
&lt;li&gt;helm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Due to simplicity, I am preferring to use the shell script installation method together with the Caddy server. Before I proceed with the setup process, it is worth mentioning that the hardware requirements are a minimum of 1 GB of RAM/2 CPU cores machine, but this may vary significantly depending on your requirements and performance appetites. I have never used anything smaller than 8GB of RAM/2 CPU cores, but you‚Äôll have to find the perfect proportion by yourself.&lt;/p&gt;

&lt;p&gt;Installation script can be downloaded and executed with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# download and run the install script&lt;/span&gt;
curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://code-server.dev/install.sh | sh

&lt;span class="c"&gt;# run code-server on boot&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; &lt;span class="nt"&gt;--now&lt;/span&gt; code-server@&lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Afterward, the code-server needs to be exposed to the internet, and the official documentation describes four different ways to achieve this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Port forwarding via SSH&lt;/li&gt;
&lt;li&gt;Let‚Äôs Encrypt with Caddy&lt;/li&gt;
&lt;li&gt;Let‚Äôs Encrypt with NGINX&lt;/li&gt;
&lt;li&gt;Using a self-signed certificate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When this is finally done, the code-server URL can be opened, and if everything was set up properly, the user will see the Welcome to code-server message with the password prompt:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CniCFp8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q045hhkpiv1tiez5le2y.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CniCFp8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q045hhkpiv1tiez5le2y.jpeg" alt="Welcome screen" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;
Welcome screen



&lt;p&gt;As stated on the welcome screen, the password can be seen/changed in config.yaml file. For password change to take effect, the code-server service needs to be restarted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl restart code-server@&lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That‚Äôs it, code-server is up and running:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QWScmXOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ag727ob08nzlznxyk4i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QWScmXOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ag727ob08nzlznxyk4i.jpg" alt="code-server landing page" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;
code-server landing page



&lt;h2&gt;
  &lt;a href="#jetbrains-based-ide-setup"&gt;
  &lt;/a&gt;
  JetBrains based IDE setup
&lt;/h2&gt;

&lt;p&gt;‚Äé‚Äè‚Äè‚Äé ‚ÄéJetBrains IDEs can be run remotely via their native tool called Projector. At the time I was searching for this kind of solution last year, this product didn‚Äôt exist, since it was launched 5 months ago (the first stable release was made in March 2021). For that reason, it still has certain imperfections, but I believe JetBrains will polish it and make an awesome tool out of it. Unlike code-server, this solution has two client implementations: web client (access your IDE through a browser) and native app (Linux, Mac, or Windows native app). Pros of the native app over web client are OS taskbar integration and availability of native keyboard shortcuts. Server side of the Projectors can be installed in three ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python installation script&lt;/li&gt;
&lt;li&gt;Docker images&lt;/li&gt;
&lt;li&gt;IDE plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided to use a Docker image as an installation method. This is the simple two-step process, pull and run the appropriate Docker image (I‚Äôm using WebStorm as an example, you can use any JetBrains IDE):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker pull registry.jetbrains.team/p/prj/containers/projector-webstorm

docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 8887:8887 &lt;span class="nt"&gt;-it&lt;/span&gt; registry.jetbrains.team/p/prj/containers/projector-webstorm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JetBrains does not explicitly guide you on how to expose the server to the internet. Once again I‚Äôm using the Caddy server, but feel free to use whatever fits your needs.&lt;/p&gt;

&lt;p&gt;As soon as this is done, you can navigate to your server URL, and if everything went well, you should see a JetBrains user agreement that you need to read and confirm. Once this is done, your IDE should be up and running:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--epNwD5x1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nuayz1b12icnbvfhad1i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--epNwD5x1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nuayz1b12icnbvfhad1i.jpg" alt="WebStorm running from the browser" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;
WebStorm running from the browser



&lt;p&gt;If we need to have several JetBrains IDEs on the same machine, we can just use a different host port for every instance. Since all files from the container will be lost if the container restarts, we need to mount a volume in order to persist data. This can be done using Dockerfile or run-container-mounted.sh script provided by JetBrains with container name as a parameter or you can simply mount folder while creating the container. It is important to say that the mounted folder (~/projector-docker by default) needs to be created manually to avoid permission issues.&lt;/p&gt;

&lt;p&gt;The next step of the setup is securing your cloud IDE with the password. This can be done by setting your password through ORG_JETBRAINS_PROJECTOR_SERVER_HANDSHAKE_TOKEN and ORG_JETBRAINS_PROJECTOR_SERVER_RO_HANDSHAKE_TOKEN environment variables. The first one provides full access, where the user can fully control the IDE, and the second one gives read-only access where the user can only watch the UI, without the possibility to interact with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;‚Äé‚Äè‚Äè‚Äé Whether you like the concept of cloud-based IDEs or not, they are here to stay. They will certainly not take over local IDEs, but they are great for certain use cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;workstation resources are low, or project is too large or demanding&lt;/li&gt;
&lt;li&gt;internet connection issues&lt;/li&gt;
&lt;li&gt;long-running tasks which require your machine not to be turned off for a long period of time&lt;/li&gt;
&lt;li&gt;workstation battery life constraints&lt;/li&gt;
&lt;li&gt;latency-sensitive development/testing&lt;/li&gt;
&lt;li&gt;location-based data security constraints&lt;/li&gt;
&lt;li&gt;need for tools that are not available on your host OS&lt;/li&gt;
&lt;li&gt;other&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Coder team did a really great job with code-server, it‚Äôs an easy and well-documented solution that works without much hassle. On the other side, JetBrains Projector is still pretty difficult to set up and the documentation is fragmented so expect a couple of complications while you‚Äôre trying to assemble all of its elements. Anyhow, let‚Äôs take into consideration that it‚Äôs still a pretty fresh solution, and hope that in near future JetBrains team will put some effort to make it more stable and easier to set up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h2&gt;

&lt;p&gt;VS Code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/docs/remote/remote-overview"&gt;https://code.visualstudio.com/docs/remote/remote-overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/features/codespaces"&gt;https://github.com/features/codespaces&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coder.com/docs/code-server/latest"&gt;https://coder.com/docs/code-server/latest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JetBrains:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://lp.jetbrains.com/projector/"&gt;https://lp.jetbrains.com/projector/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/JetBrains/projector-docker"&gt;https://github.com/JetBrains/projector-docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jetbrains.github.io/projector-client/mkdocs/latest/ij_user_guide/server_customization/"&gt;https://jetbrains.github.io/projector-client/mkdocs/latest/ij_user_guide/server_customization/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ide</category>
      <category>jetbrains</category>
      <category>vscode</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Supercharge your Dev.to Blogs - Tips and Tricks!</title>
      <author>Fahad Imran</author>
      <pubDate>Tue, 30 Nov 2021 19:26:39 +0000</pubDate>
      <link>https://dev.to/fahadimran509/supercharge-your-devto-blogs-tips-and-tricks-2b7e</link>
      <guid>https://dev.to/fahadimran509/supercharge-your-devto-blogs-tips-and-tricks-2b7e</guid>
      <description>&lt;p&gt;New to dev.to? Not sure where to get started? &lt;strong&gt;No worries!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this blog, I will share &lt;strong&gt;tips&lt;/strong&gt;, &lt;strong&gt;tricks&lt;/strong&gt;, and &lt;strong&gt;resources&lt;/strong&gt; that you can use to write amazing articles in no time. This will apply whether you have never written a blog on dev.to or you're just looking to improve your workflow.&lt;/p&gt;

&lt;p&gt;I will cover quite a lot of information in this post so it might be a bit lengthy, but I'll try my best to not bore you. Here is a &lt;strong&gt;breakdown&lt;/strong&gt; of what I will cover in this blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#choose-a-title"&gt;Choose a Title&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tags"&gt;Tags on dev.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cover-images"&gt;Cover Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#markdown"&gt;Learn Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#where-to-write-blogs"&gt;Where to write your blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dos-and-donts"&gt;Do's &amp;amp; Don'ts of writing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keep-it-simple"&gt;Keep things simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#youtube-videos"&gt;Embed YouTube videos in blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#crosspost"&gt;Properly crosspost blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#series"&gt;Make a Series on dev.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#publish"&gt;Save, Edit, &amp;amp; Publish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#share"&gt;Share on Social Media&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;So, take a deep breath, grab some coffee and let's get started!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-a-title"&gt;
  &lt;/a&gt;
  Choosing a Title &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The first thing you have to choose is the &lt;strong&gt;blog title&lt;/strong&gt;. It is important to have a title that describes what your blog is about. A good title can be the difference between people viewing your blog or skipping over it. Think of your blog title as a one-line summary of your blog.&lt;/p&gt;

&lt;p&gt;What I try to do is find &lt;strong&gt;keywords&lt;/strong&gt; that describe my blog content and include them in the blog title. This ensures that the title is relevant and to the point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tags-on-devto"&gt;
  &lt;/a&gt;
  Tags on dev.to &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;On dev.to, you can add up to &lt;strong&gt;4&lt;/strong&gt; tags on your blogs to help people find them. It is better to use existing tags whenever possible instead of making your own. You can view the existing tags on dev.to &lt;a href="https://dev.to/tags"&gt;here&lt;/a&gt;. It must be noted that some tags have special guidelines that your blog must fulfill before you can include them in your blogs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cover-images"&gt;
  &lt;/a&gt;
  Cover Images &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Cover images make your blog &lt;strong&gt;standout&lt;/strong&gt;. Blogs with cover images are more likely to be featured in the home feed of the website. Therefore, you must include one in your articles. For finding cover images you can use sites like &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;, and &lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt; or if you want to design one from scratch, you can try &lt;a href="https://www.canva.com/"&gt;Canva&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All these sources have worked great for me so far. Just try to keep your cover image relevant and fun and you'll be fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; If you want to add a GIF as a cover image (like in this blog), just copy the GIF link and add it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------
cover_image: your_gif_link
--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A great place to find GIFs for your blogs is &lt;a href="https://giphy.com/"&gt;GIPHY&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CY51RKeb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omw6icqpzn4mk51sozs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CY51RKeb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omw6icqpzn4mk51sozs8.png" alt="GIPHY Website" width="880" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-markdown"&gt;
  &lt;/a&gt;
  Learn Markdown &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before writing your blog you must be familiar with the &lt;strong&gt;basics of markdown&lt;/strong&gt; as you'll be using it to write your blogs on dev.to. Markdown allows you to format your text, images, lists, etc. very easily. It is super easy to learn too. You can find dozens of cheat sheets floating around the web. I would recommend you give &lt;a href="https://www.markdownguide.org/cheat-sheet/"&gt;this one&lt;/a&gt; a look to get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-write-your-blogs"&gt;
  &lt;/a&gt;
  Where to write your blogs? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Once you've got the hang of markdown, the next thing is to write the draft for your blog. Although you can use the built-in editor that dev.to provides, most people prefer to write their blogs on &lt;a href="https://docs.google.com/"&gt;Google Docs&lt;/a&gt; or &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;. You can also use dedicated note-taking apps like &lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; which supports markdown as well.&lt;/p&gt;

&lt;p&gt;Whatever medium you use, I would highly recommend that you install a browser extension called &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt;. It is super helpful and will correct most of your grammatical and punctuation errors if not all of them. If you prefer VS Code, use an extension called &lt;a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one"&gt;Markdown All in One&lt;/a&gt; as it allows you to preview markdown files and provides various editing options as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dos-and-donts-of-writing"&gt;
  &lt;/a&gt;
  Do's and Don'ts of writing &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;While writing your blogs on dev.to, here are some general writing tips to improve the flow of your blog:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Use short and simple sentences&lt;/strong&gt; as to not overwhelm the reader.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Break up your content&lt;/strong&gt; into smaller paragraphs and add sub-headings to them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use relevant images&lt;/strong&gt; in your blogs to explain a topic and make the blog more engaging (And Yes, memes count too! üòÖ).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Add code snippets&lt;/strong&gt; to your blogs to explain programming concepts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Include useful links and references&lt;/strong&gt; to provide additional information in your articles.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't spam your social media&lt;/strong&gt; links in your blog. No one wants to follow such a person. Try to provide value to others. If you want, just plug one or two social links at the end of the blog post.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#keep-it-simple-stupid"&gt;
  &lt;/a&gt;
  Keep it simple stupid! &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/krtDmVuQGssOtMWfRg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/krtDmVuQGssOtMWfRg/giphy.gif" alt="GIPHY Keep it simple GIF" width="480" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KISS&lt;/strong&gt; (Keep It Simple Stupid) principle applies here as well. Keep your blog posts short and simple. No one has the time to read blogs that look like research papers. I am guilty of this habit as well. But you should keep your blogs concise and limited to &lt;strong&gt;5-7 min max&lt;/strong&gt; in most cases (although there can be some exceptions).&lt;/p&gt;

&lt;p&gt;Additionally, try to explain the concept in the easiest way possible so people with little to no background knowledge can also understand the concept without pulling their hair out. üò´&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#embedding-youtube-videos"&gt;
  &lt;/a&gt;
  Embedding YouTube Videos &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you want to embed &lt;strong&gt;YouTube videos&lt;/strong&gt; in your blogs, you can easily do so using Liquid tags that dev.to provides. To embed videos, copy the video id from the URL and add it to the blog as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% youtube your_video_id %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's how embedded videos look:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FG1qbo8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr689f2xcepbxi9m16d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FG1qbo8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr689f2xcepbxi9m16d6.png" alt="YouTube Videos" width="880" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: Florin Pop &lt;a class="mentioned-user" href="https://dev.to/florinpop17"&gt;@florinpop17&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;If you want to learn more about Liquid tags check out the &lt;a href="https://dev.to/p/editor_guide"&gt;editor guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#republishing-blogs-from-other-sources"&gt;
  &lt;/a&gt;
  Republishing Blogs from other sources &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you're just writing blogs on dev.to and not republishing from elsewhere, feel free to skip this section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, if you're republishing your blogs from elsewhere whether it be Medium, Hashnode, or your personal website, &lt;strong&gt;read carefully&lt;/strong&gt;. It is important that you add a &lt;strong&gt;Canonical URL&lt;/strong&gt; to your articles published elsewhere on the web.&lt;/p&gt;

&lt;p&gt;A Canonical URL tells the search engines like &lt;strong&gt;Google&lt;/strong&gt;, where the original source of the content/article is. If you don't add a canonical article to your blog, the search engine will consider it as a duplicate content. And there is a high chance that the republished version on dev.to will &lt;strong&gt;rank higher&lt;/strong&gt; on search results as compared to the one originally published on your personal blog. Consequently, you'll get less traffic on your website which is no fun.&lt;/p&gt;

&lt;p&gt;Thankfully, dev.to allows you to easily add a Canonical URL to your blog posts and also displays an &lt;strong&gt;" Originally published on XYZ.com "&lt;/strong&gt; message at the top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HwXPbgsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kux7je8nxawplu72zu37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HwXPbgsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kux7je8nxawplu72zu37.png" alt="Canonical URLs" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about republishing and Canonical URLs check out this &lt;a href="https://medium.com/@edithyeghiazaryan/republish-your-content-using-a-canonical-tag-3eb47b68ee2f"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-series"&gt;
  &lt;/a&gt;
  Making a Series &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;For topics that require more explaining, you can also &lt;strong&gt;make a series&lt;/strong&gt; on dev.to. Series are great for topics that have different parts. Instead of cramming all the information in a single article, you can split it up into multiple smaller posts.&lt;/p&gt;

&lt;p&gt;In order to make a series, just give it a name and your blog will automatically be added to that series. Dev.to will also show a series list at the top of the blogs in that series for navigation.&lt;/p&gt;

&lt;p&gt;It must be noted that the series will only appear if it has at least &lt;strong&gt;2&lt;/strong&gt; blog posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-the-draft-edit-amp-publish"&gt;
  &lt;/a&gt;
  Save the Draft, Edit, &amp;amp; Publish! &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After you've finished writing the blog post, you can &lt;strong&gt;save the draft&lt;/strong&gt; of the post. This will allow you to share the URL of the article with your friends, family, editor, etc. for proof-reading.&lt;/p&gt;

&lt;p&gt;Once you're satisfied with the final result, you can then &lt;strong&gt;publish&lt;/strong&gt; it for everyone to see. The stats on your blog (view, likes, and comments) can be viewed in the &lt;strong&gt;Profile Dashboard&lt;/strong&gt;. You can edit the blog anytime after publishing it, so don't worry if you find any mistake in your blog. Just edit it out!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FmAJRvoc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yis2gywq0cjupoekioq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmAJRvoc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yis2gywq0cjupoekioq.png" alt="Dev Dashboard" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You've published your first blog on dev.to. &lt;strong&gt;Easy, wasn't it?&lt;/strong&gt; After you've done this process a couple of times, it'll become easier and you'll get the hang of it, trust me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharing-on-social-media"&gt;
  &lt;/a&gt;
  Sharing on Social Media &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After publishing your article on dev.to, you can then share the link on social media accounts like Twitter, Facebook, and Linkedin, etc. The official Twitter account of dev.to &lt;a href="https://twitter.com/ThePracticalDev?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor"&gt;@ThePracticalDev&lt;/a&gt; also shares blog posts that are good and get featured. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YOdvCAOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhob2opjr0tjvrk0k0ng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOdvCAOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhob2opjr0tjvrk0k0ng.png" alt="Dev Twitter" width="880" height="396"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a very nice gesture, as you can get a &lt;strong&gt;far greater reach&lt;/strong&gt; in this way, especially if you're just starting out and don't have a huge audience.&lt;/p&gt;

&lt;p&gt;And best of all, if your blog gets featured in the &lt;strong&gt;Top 7 Posts of the Week&lt;/strong&gt;, you get a really cool badge added to your profile and a &lt;strong&gt;$50 coupon&lt;/strong&gt; to spend in the Dev Store. How cool is that! So, all you've got to do is to start writing and keep at it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-folks"&gt;
  &lt;/a&gt;
  That's All Folks!
&lt;/h2&gt;

&lt;p&gt;If you have any questions feel free to ask me in the comments and I will do my best to answer them. Feel free to read some of my other blogs on dev.to &lt;a class="mentioned-user" href="https://dev.to/fahadimran509"&gt;@fahadimran509&lt;/a&gt;
. Till then, thanks for reading, and happy coding! üòÑ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/fahadimran509"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://linkedin.com/in/fahadimran509"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/fahadimran509"&gt;Dev.to&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>writing</category>
    </item>
  </channel>
</rss>
