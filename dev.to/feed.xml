<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HTML tags | a</title>
      <author>Carlos Espada</author>
      <pubDate>Wed, 17 Nov 2021 07:36:35 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-a-3n1</link>
      <guid>https://dev.to/carlosespada/html-tags-a-3n1</guid>
      <description>&lt;p&gt;The &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element (or anchor element), &lt;strong&gt;creates a hyperlink&lt;/strong&gt; to web pages, files, email addresses, locations in the same page, or anything else a URL can address.&lt;/p&gt;

&lt;p&gt;Its most important attribute is the &lt;code&gt;href&lt;/code&gt; attribute, which indicates the link's destination.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;href&lt;/code&gt; attribute is present, pressing the enter key while focused on the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element will activate it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download"&gt;
  &lt;/a&gt;
  download
&lt;/h3&gt;

&lt;p&gt;Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Without a value, the browser will suggest a filename/extension, generated from various sources:

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Content-Disposition&lt;/code&gt; HTTP header&lt;/li&gt;
&lt;li&gt;The final segment in the URL path&lt;/li&gt;
&lt;li&gt;The media type (from the &lt;code&gt;Content-Type&lt;/code&gt; header, the start of a &lt;code&gt;data:&lt;/code&gt; URL or &lt;code&gt;Blob.type&lt;/code&gt; for a &lt;code&gt;blob:&lt;/code&gt; URL)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Defining a value suggests it as the filename. &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;&amp;lt;/code&amp;gt; characters are converted to underscores (&lt;code&gt;_&lt;/code&gt;). Filesystems may forbid other characters in filenames, so browsers will adjust the suggested name if necessary.&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;download&lt;/code&gt; only works for same-origin URLs, or the &lt;code&gt;blob:&lt;/code&gt; and &lt;code&gt;data:&lt;/code&gt; schemes.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;Content-Disposition&lt;/code&gt; header has different information from the &lt;code&gt;download&lt;/code&gt; attribute, resulting behavior may differ:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the header specifies a filename, it takes priority over a filename specified in the &lt;code&gt;download&lt;/code&gt; attribute.&lt;/li&gt;
&lt;li&gt;If the header specifies a disposition of &lt;code&gt;inline&lt;/code&gt;, Chrome, and Firefox 82 and later, prioritize the attribute and treat it as a download. Firefox versions before 82 prioritize the header and will display the content inline.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#href"&gt;
  &lt;/a&gt;
  href
&lt;/h3&gt;

&lt;p&gt;The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs — they can use any URL scheme supported by browsers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sections of a page with fragment URLs&lt;/li&gt;
&lt;li&gt;Pieces of media files with media fragments&lt;/li&gt;
&lt;li&gt;Telephone numbers with tel: URLs&lt;/li&gt;
&lt;li&gt;Email addresses with mailto: URLs&lt;/li&gt;
&lt;li&gt;While web browsers may not support other URL schemes, web sites can with &lt;code&gt;registerProtocolHandler()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hreflang"&gt;
  &lt;/a&gt;
  hreflang
&lt;/h3&gt;

&lt;p&gt;Hints at the human language of the linked URL. No built-in functionality. Allowed values are the same as the global &lt;code&gt;lang&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ping"&gt;
  &lt;/a&gt;
  ping
&lt;/h3&gt;

&lt;p&gt;A space-separated list of URLs. When the link is followed, the browser will send &lt;code&gt;POST&lt;/code&gt; requests with the body &lt;code&gt;PING&lt;/code&gt; to the URLs. Typically for tracking.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#referrerpolicy"&gt;
  &lt;/a&gt;
  referrerpolicy
&lt;/h3&gt;

&lt;p&gt;How much of the referrer to send when following the link.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;no-referrer&lt;/code&gt;: the &lt;code&gt;Referer&lt;/code&gt; header will not be sent.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;no-referrer-when-downgrade&lt;/code&gt;: the &lt;code&gt;Referer&lt;/code&gt; header will not be sent to origins without TLS (HTTPS).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;origin&lt;/code&gt;: the sent referrer will be limited to the origin of the referring page: its scheme, host and port.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;origin-when-cross-origin&lt;/code&gt;: the referrer sent to other origins will be limited to the scheme, the host and the port. Navigations on the same origin will still include the path.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;same-origin&lt;/code&gt;: a referrer will be sent for same origin, but cross-origin requests will contain no referrer information.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin&lt;/code&gt;: only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin-when-cross-origin&lt;/code&gt; (default): send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;unsafe-url&lt;/code&gt;: the referrer will include the origin and the path (but not the fragment, password or username). &lt;strong&gt;This value is unsafe&lt;/strong&gt;, because it leaks origins and paths from TLS-protected resources to insecure origins.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rel"&gt;
  &lt;/a&gt;
  rel
&lt;/h3&gt;

&lt;p&gt;The relationship of the linked URL as space-separated link types.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#target"&gt;
  &lt;/a&gt;
  target
&lt;/h3&gt;

&lt;p&gt;Where to display the linked URL, as the name for a browsing context (a tab, window or &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;). The following keywords have special meanings for where to load the URL:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;_self&lt;/code&gt; (default): the current browsing context.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_blank&lt;/code&gt;: usually a new tab, but users can configure browsers to open a new window instead.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_parent&lt;/code&gt;: the parent browsing context of the current one. If no parent, behaves as &lt;code&gt;_self&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_top&lt;/code&gt;: the topmost browsing context (the "highest" context that’s an ancestor of the current one). If no ancestors, behaves as &lt;code&gt;_self&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Setting &lt;code&gt;target="_blank"&lt;/code&gt; on &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements implicitly provides the same &lt;code&gt;rel&lt;/code&gt; behavior as setting &lt;code&gt;rel="noopener"&lt;/code&gt; which does not set &lt;code&gt;window.opener&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type"&gt;
  &lt;/a&gt;
  type
&lt;/h3&gt;

&lt;p&gt;Hints at the linked URL’s format with a MIME type. No built-in functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;By default, links will appear as follows in all browsers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An unvisited link is underlined and blue.&lt;/li&gt;
&lt;li&gt;A visited link is underlined and purple.&lt;/li&gt;
&lt;li&gt;An active link is underlined and red.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can override these styles using CSS properties like &lt;code&gt;text-decoration&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h2&gt;

&lt;p&gt;The content inside a link &lt;strong&gt;should indicate where the link goes&lt;/strong&gt;, even out of context. Avoid using expressions like "&lt;em&gt;click here&lt;/em&gt;" or "&lt;em&gt;here&lt;/em&gt;".&lt;/p&gt;

&lt;p&gt;Assistive software has shortcuts to list all links on a page. However, &lt;strong&gt;strong link text benefits all users&lt;/strong&gt; — the “&lt;em&gt;list all links&lt;/em&gt;” shortcut emulates how sighted users quickly scan pages.&lt;/p&gt;

&lt;p&gt;Anchor elements are often abused as fake buttons by setting their &lt;code&gt;href&lt;/code&gt; to &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;javascript:void(0)&lt;/code&gt; to prevent the page from refreshing, then listening for their click events.&lt;/p&gt;

&lt;p&gt;These bogus &lt;code&gt;href&lt;/code&gt; values cause unexpected behavior when copying/dragging links, opening links in a new tab/window, bookmarking, or when JavaScript is loading, errors, or is disabled. They also convey incorrect semantics to assistive technologies, like screen readers.&lt;/p&gt;

&lt;p&gt;Use a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; instead. In general, you should &lt;strong&gt;only use a hyperlink for navigation to a real URL&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Links that open in a new tab/window via &lt;code&gt;target="_blank"&lt;/code&gt;, or links that point to a download file &lt;strong&gt;should indicate what will happen&lt;/strong&gt; when the link is followed.&lt;/p&gt;

&lt;p&gt;People experiencing low vision conditions, navigating with the aid of screen reading technology, or with cognitive concerns may be confused when a new tab, window, or application opens unexpectedly. Older screen-reading software may not even announce the behavior.&lt;/p&gt;

&lt;p&gt;If an icon is used to signify link behavior, &lt;strong&gt;make sure it has&lt;/strong&gt; &lt;code&gt;alt&lt;/code&gt; &lt;strong&gt;text&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;skip link&lt;/strong&gt; is a link placed as early as possible in &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; content that points to the beginning of the page's main content. Usually, CSS hides a skip link offscreen until focused. &lt;/p&gt;

&lt;p&gt;Skip links let keyboard users &lt;strong&gt;bypass content repeated throughout multiple pages&lt;/strong&gt;, such as header navigation. They are especially useful for people who navigate with the aid of assistive technology such as switch control, voice command, or mouth sticks/head wands, where the act of moving through repetitive links can be laborious.&lt;/p&gt;

&lt;p&gt;Interactive elements, like links, &lt;strong&gt;should provide an area large enough that it is easy to activate them&lt;/strong&gt;. This helps a variety of people, including those with motor control issues and those using imprecise inputs such as a touchscreen. A minimum size of 44×44 CSS pixels is recommended.&lt;/p&gt;

&lt;p&gt;Text-only links in prose content are exempt from this requirement, but it’s still a good idea to make sure enough text is hyperlinked to be easily activated.&lt;/p&gt;

&lt;p&gt;Interactive elements, like links, placed in close visual proximity &lt;strong&gt;should have space separating them&lt;/strong&gt;. Spacing helps people with motor control issues, who may otherwise accidentally activate the wrong interactive content. Spacing may be created using CSS properties like &lt;code&gt;margin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When href attribute is present the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element may have different ARIA roles: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;button&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkbox&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menuitem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menuitemcheckbox&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menuitemradio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;option&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;radio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;treeitem&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When &lt;code&gt;href&lt;/code&gt; attribute is not present, it may have any ARIA role.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;p&gt;You can use &lt;code&gt;href="#top"&lt;/code&gt; or the empty fragment (&lt;code&gt;href="#"&lt;/code&gt;) to link to the top of the current page, as defined in the &lt;a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#scroll-to-the-fragment-identifier"&gt;HTML specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create links that open in the user's email program to let them send a new message, use the &lt;code&gt;mailto:&lt;/code&gt; scheme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="mailto:nowhere@mozilla.org"&amp;gt;Send email to nowhere&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;tel:&lt;/code&gt; link behavior varies with device capabilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cellular devices autodial the number.&lt;/li&gt;
&lt;li&gt;Most operating systems have programs that can make calls, like Skype or FaceTime.&lt;/li&gt;
&lt;li&gt;Websites can make phone calls with &lt;code&gt;registerProtocolHandler&lt;/code&gt;, such as &lt;code&gt;web.skype.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Other behaviors include saving the number to contacts, or sending the number to another device.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements can have &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns"&gt;consequences for users’ security and privacy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;target="_blank"&lt;/code&gt; without &lt;code&gt;rel="noreferrer"&lt;/code&gt; and &lt;code&gt;rel="noopener"&lt;/code&gt; makes the website vulnerable to &lt;code&gt;window.opener&lt;/code&gt; API &lt;a href="https://www.jitbit.com/alexblog/256-targetblank---the-most-underestimated-vulnerability-ever/"&gt;exploitation attacks&lt;/a&gt;, although note that, in newer browser versions setting &lt;code&gt;target="_blank"&lt;/code&gt; implicitly provides the same protection as setting &lt;code&gt;rel="noopener"&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;em&gt;inline&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Self-closing: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Semantic value: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/tag_a.asp"&gt;Definition&lt;/a&gt; | &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_link_test"&gt;Example&lt;/a&gt; | &lt;a href="https://caniuse.com/mdn-html_elements_a"&gt;Support&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>a</category>
    </item>
    <item>
      <title>Building a Document Scanning and Barcode Recognition Application with Qt Python</title>
      <author>Xiao Ling</author>
      <pubDate>Wed, 17 Nov 2021 07:31:07 +0000</pubDate>
      <link>https://dev.to/yushulx/building-a-document-scanning-and-barcode-recognition-application-with-qt-python-534c</link>
      <guid>https://dev.to/yushulx/building-a-document-scanning-and-barcode-recognition-application-with-qt-python-534c</guid>
      <description>&lt;p&gt;A few months ago, I published a cross-platform &lt;a href="https://github.com/yushulx/python-gui-barcode-reader"&gt;desktop barcode reading application&lt;/a&gt; built with Qt Python and Dynamsoft Barcode Reader. The supported input sources include real-time camera stream, image files, and screenshots. In this article, I will set document scanner as the input source. The SDK used for document scanning is &lt;a href="https://www.dynamsoft.com/web-twain/overview/"&gt;Dynamic Web TWAIN&lt;/a&gt;, which is a cross-platform JavaScript library and supports Windows, macOS, and Linux.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SDK&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dynamsoft.com/web-twain/downloads/"&gt;Dynamic Web TWAIN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamsoft Barcode Reader&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;dbr
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Qt&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;PyQt5
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;License&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dynamsoft.com/customer/license/trialLicense/?product=dwt"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FvWITC9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Get-30--day%2520FREE%2520Trial%2520License%2520of%2520DWT-orange" alt="dwt trial license" width="226" height="20"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dynamsoft.com/customer/license/trialLicense/?product=dbr"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QIlPC08u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Get-30--day%2520FREE%2520Trial%2520License%2520of%2520DBR-blue" alt="dbr trial license" width="224" height="20"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-build-a-crossplatform-document-scanning-and-barcode-recognition-application"&gt;
  &lt;/a&gt;
  Steps to Build a Cross-platform Document Scanning and Barcode Recognition Application
&lt;/h2&gt;

&lt;p&gt;We are going to create a hybrid application that combines HTML5 and Python code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-qt-application-with-qt-widgets"&gt;
  &lt;/a&gt;
  1. Create Qt application with Qt widgets
&lt;/h3&gt;

&lt;p&gt;Here are the required Qt Widgets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;QWebEngineView&lt;/code&gt;: used to load HTML and JavaScript code. It displays the document images scanned by Dynamic Web TWAIN API.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;QPushButton&lt;/code&gt;: one for acquiring images, and the other for decoding barcodes.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;QTextEdit&lt;/code&gt;: show the barcode results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, we create an empty Qt window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5.QtWidgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5.QtCore&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5.QtGui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5.QtWebEngineWidgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QWebEngineView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5.QtWebChannel&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QWebChannel&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Dynamic Web TWAIN and Dynamsoft Barcode Reader'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we create a layout and add the widgets to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QWebEngineView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;QWebEngineView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QVBoxLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;bt_scan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Scan Barcode Documents'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bt_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Read Barcode'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;text_area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QTextEdit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bt_scan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bt_read&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_area&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shortcut keys are convenient for a desktop application. We use &lt;code&gt;R&lt;/code&gt; to reload the web view and use &lt;code&gt;Q&lt;/code&gt; to quit the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;keyPressEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key_Q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key_R&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;refresh_page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyPressEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keyPressEvent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, the basic UI is done. We can run the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-load-html-and-javascript-code-in-qt-application"&gt;
  &lt;/a&gt;
  2. Load HTML and JavaScript code in Qt application
&lt;/h3&gt;

&lt;p&gt;Dynamic Web TWAIN SDK provides a variety of sample code located in the &lt;code&gt;Dynamic Web TWAIN SDK &amp;lt;version&amp;gt;\Samples\&lt;/code&gt; folder. We copy &lt;code&gt;Samples\Scan\SourceList.html&lt;/code&gt; and &lt;code&gt;Samples\Scan\Resources&lt;/code&gt; to the root of our Python project.&lt;/p&gt;

&lt;p&gt;Rename &lt;code&gt;SourceList.html&lt;/code&gt; to &lt;code&gt;index.html&lt;/code&gt; and then add the following Python code to load &lt;code&gt;index.html&lt;/code&gt; and all relevant resource files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QWebEngineView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;QWebEngineView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Load web page and resource files to QWebEngineView
&lt;/span&gt;        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;local_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QUrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromLocalFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After re-running the Python application, the web page will be presented.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-establish-the-communication-between-python-and-javascript"&gt;
  &lt;/a&gt;
  3. Establish the communication between Python and JavaScript
&lt;/h3&gt;

&lt;p&gt;The communication between Python and JavaScript is the key part of the application.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; has contained the &lt;code&gt;AcquireImage()&lt;/code&gt; function for scanning documents.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AcquireImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;OnAcquireImageSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnAcquireImageFailure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;OnAcquireImageSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;OnAcquireImageFailure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CloseSource&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SelectSourceByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;source&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;selectedIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Use method SelectSourceByIndex to avoid the 'Select Source' dialog&lt;/span&gt;
        &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OpenSource&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IfDisableSourceAfterAcquire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// Scanner source will be disabled/closed automatically after the scan.&lt;/span&gt;
        &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AcquireImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;OnAcquireImageSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnAcquireImageFailure&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can execute the JavaScript function by calling &lt;code&gt;runJavaScript&lt;/code&gt; on the Python side:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_barcode&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runJavaScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'AcquireImage();'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;bt_scan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clicked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acquire_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the scanning process is finished, the current image is kept in  memory. We can convert it to base64 string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getCurrentImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ConvertToBase64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CurrentImageIndexInBuffer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nx"&gt;Dynamsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DWT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EnumDWT_ImageType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IT_JPG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// TODO:&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How can we pass the base64 string from JavaScript to Python? The answer is &lt;code&gt;QWebChannel&lt;/code&gt;. In &lt;code&gt;index.html&lt;/code&gt;, we include &lt;code&gt;qwebchannel.js&lt;/code&gt; which can be found in &lt;code&gt;Qt\Examples\Qt-5.12.11\webchannel\shared&lt;/code&gt; folder if you have QtCreator installed. Then add the following code to send base64 string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QWebChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;qt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webChannelTransport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;backend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getCurrentImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ConvertToBase64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CurrentImageIndexInBuffer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nx"&gt;Dynamsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DWT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EnumDWT_ImageType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IT_JPG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onDataReady&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLength&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;onDataReady&lt;/code&gt; function needs to be implemented on the Python side:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Backend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;pyqtSlot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;onDataReady&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base64img&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QWebEngineView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;QWebEngineView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Load web page and resource files to QWebEngineView
&lt;/span&gt;        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;local_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QUrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromLocalFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Backend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QWebChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;registerObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'backend'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setWebChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_barcode&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runJavaScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'getCurrentImage();'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;bt_read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clicked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_barcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-decode-barcodes-from-scanned-documents"&gt;
  &lt;/a&gt;
  4. Decode barcodes from scanned documents
&lt;/h3&gt;

&lt;p&gt;Finally, we can use Dynamsoft Barcode Reader to decode barcodes from base64 string and display the result on the text area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dbr&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;

&lt;span class="c1"&gt;# Initialize Dynamsoft Barcode Reader
&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BarcodeReader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Apply for a trial license https://www.dynamsoft.com/customer/license/trialLicense?product=dbr
&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_license&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'LICENSE-KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Backend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;pyqtSlot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;onDataReady&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base64img&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;imgdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;text_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode_file_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imgdata&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;text_results&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;text_result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text_results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"Barcode Format : "&lt;/span&gt;
                    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;text_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;barcode_format_string&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
                    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"Barcode Text : "&lt;/span&gt;
                    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;text_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;barcode_text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
                    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"-------------------------------------------------"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

                &lt;span class="n"&gt;text_area&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;BarcodeReaderError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bre&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bre&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EJvONrIx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.dynamsoft.com/codepool/img/2021/11/qt-scan-document-read-barcode.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EJvONrIx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.dynamsoft.com/codepool/img/2021/11/qt-scan-document-read-barcode.jpg" alt="Qt application: document scanning and barcode reading" width="656" height="782"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/yushulx/Qt-scan-document-read-barcode"&gt;https://github.com/yushulx/Qt-scan-document-read-barcode&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>qt</category>
      <category>barcode</category>
      <category>document</category>
    </item>
    <item>
      <title>React Hook to Allow Undo/Redo</title>
      <author>Jeremy</author>
      <pubDate>Wed, 17 Nov 2021 07:19:30 +0000</pubDate>
      <link>https://dev.to/jeremyling/react-hook-to-allow-undoredo-4poj</link>
      <guid>https://dev.to/jeremyling/react-hook-to-allow-undoredo-4poj</guid>
      <description>&lt;p&gt;If you're looking to build no-code tools like &lt;a href="https://formblob.com"&gt;FormBlob&lt;/a&gt;, one &lt;em&gt;must-have&lt;/em&gt; feature is the ability to undo and redo actions. Why? Imagine you were working on an image-editing software and you made multiple changes to your canvas. After some time, you realise that what you had before looked much better than what you have now. You would undo your way back until you get to a stage you're satisfied with.&lt;/p&gt;

&lt;p&gt;Now, if the software did not have an undo/redo function, you would most probably unleash some flowery language and abandon the software forever.&lt;/p&gt;

&lt;p&gt;So how do we implement an undo/redo function and prevent users from abandoning our app?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h3&gt;

&lt;p&gt;If you're not familiar with React Hooks, I suggest you read up about them &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;here&lt;/a&gt;. One of the most fundamental hooks is React's built-in useState hook. This allows you to store component state within a variable and manage it as required. In this tutorial, we will be writing a hook that extends the useState hook to allow for undo/redo functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h3&gt;

&lt;p&gt;Let's start with the code and then I'll explain below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// lodash methods preferable if you're storing objects within state&lt;/span&gt;
&lt;span class="c1"&gt;// If you're only working with primitives, these are not required&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;isEqual&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash/isEqual&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;cloneDeep&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash/cloneDeep&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useUndoableState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;states&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStates&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Used to store history of all states&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Index of current state within `states`&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;states&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;states&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Current state&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Use lodash isEqual to check for deep equality&lt;/span&gt;
    &lt;span class="c1"&gt;// If state has not changed, return to avoid triggering a re-render&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cloneDeep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;states&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Use lodash cloneDeep to get a deep copy&lt;/span&gt;
    &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This is to remove all future (redo) states after current index&lt;/span&gt;
    &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setStates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Clear all state history&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resetState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setStates&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Allows you to go back (undo) N steps&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;goBack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Allows you to go forward (redo) N steps&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;goForward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;states&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;resetState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;states&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;goBack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;goForward&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#concept"&gt;
  &lt;/a&gt;
  Concept
&lt;/h3&gt;

&lt;p&gt;As with useState, useUndoableState accepts only 1 argument, the initial value. Behind the scenes, the hook uses two main variables to determine state - &lt;code&gt;index&lt;/code&gt; (number) and &lt;code&gt;states&lt;/code&gt; (array). &lt;code&gt;states&lt;/code&gt; stores the historical values of the state while &lt;code&gt;index&lt;/code&gt; determines current state by indicating the current position in the array.&lt;/p&gt;

&lt;p&gt;You may navigate through historical states by using the &lt;code&gt;goBack&lt;/code&gt; and &lt;code&gt;goForward&lt;/code&gt; functions emitted by the hook. However, if you make a call to &lt;code&gt;setState&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; is not at the end of the &lt;code&gt;states&lt;/code&gt; array, all states after &lt;code&gt;index&lt;/code&gt; is erased and &lt;code&gt;index&lt;/code&gt; will go back to the end of the &lt;code&gt;states&lt;/code&gt; array. In other words, once you call &lt;code&gt;setState&lt;/code&gt;, you can no longer redo.&lt;/p&gt;

&lt;p&gt;The following table attempts to provide a more detailed explanation of the object returned by the hook:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Prop&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;state&lt;/td&gt;
&lt;td&gt;&lt;code&gt;any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Current state, initialised with argument passed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setState&lt;/td&gt;
&lt;td&gt;&lt;code&gt;func&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;setState(value)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets state to &lt;code&gt;value&lt;/code&gt;. All values after current &lt;code&gt;index&lt;/code&gt; is erased&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;resetState&lt;/td&gt;
&lt;td&gt;&lt;code&gt;func&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;resetState(value)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Deletes historical states and resets to value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;index&lt;/td&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The current index in the &lt;code&gt;states&lt;/code&gt; array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lastIndex&lt;/td&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The last index in the &lt;code&gt;states&lt;/code&gt; array. Can be used to determine if can &lt;code&gt;goForward&lt;/code&gt;. &lt;code&gt;canGoForward = index &amp;lt; lastIndex&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;goBack&lt;/td&gt;
&lt;td&gt;&lt;code&gt;func&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;goBack(2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Goes back the number of steps passed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;goForward&lt;/td&gt;
&lt;td&gt;&lt;code&gt;func&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;goForward(3)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Goes forward the number of steps passed&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useUndoableState&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path/to/hook&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The quick brown fox jumps over the lazy dog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;setDoc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;resetState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resetDoc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;docStateIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;docStateLastIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;goBack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;undoDoc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;goForward&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redoDoc&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUndoableState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canUndo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;docStateIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canRedo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;docStateIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;docStateLastIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;
        &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;16px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setDoc&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;undoDoc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;canUndo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Undo
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;redoDoc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;canRedo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Redo
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resetDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Reset&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/use-undoable-state-2spts"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concluding-remarks"&gt;
  &lt;/a&gt;
  Concluding Remarks
&lt;/h3&gt;

&lt;p&gt;With undo/redo functionality, &lt;a href="https://formblob.com"&gt;FormBlob&lt;/a&gt; is one of a select few no-code form builders that gives you the flexibility to edit your forms without the fear of losing a previous state. As a no-code tool, FormBlob allows anyone to build and publish stunning forms and surveys in 2 minutes. &lt;a href="https://build.formblob.com/builder"&gt;Try it free today!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How Much Does It Cost To Hire An Android App Developer?</title>
      <author>iWebServices</author>
      <pubDate>Wed, 17 Nov 2021 07:17:41 +0000</pubDate>
      <link>https://dev.to/iwebservices/how-much-does-it-cost-to-hire-an-android-app-developer-34pk</link>
      <guid>https://dev.to/iwebservices/how-much-does-it-cost-to-hire-an-android-app-developer-34pk</guid>
      <description>&lt;p&gt;Mobile Apps have become part of our daily life. We use them for almost everything like online shopping, booking a cab, ordering food, tracking health, making an appointment with doctors, or bringing medicine. As a result, the Android mobile application market is growing rapidly.&lt;/p&gt;

&lt;p&gt;Enterprises are utilizing android applications with advanced features and attractive UI/UX to boost sales and revenue as well as to gain new customers. However, hiring a skilled app developer with suitable experience is a crucial step in this regard to get value-per-cost service.&lt;/p&gt;

&lt;p&gt;In this article, we aim to provide you with a complete guide on the cost component to hire an android developer. &lt;a href="https://www.i-webservices.com/blog/android/how-much-does-it-cost-to-hire-an-android-app-developer/"&gt;Read More...&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Weekly web development resources #96</title>
      <author>Vincent Will</author>
      <pubDate>Wed, 17 Nov 2021 07:16:02 +0000</pubDate>
      <link>https://dev.to/vincenius/weekly-web-development-resources-96-dll</link>
      <guid>https://dev.to/vincenius/weekly-web-development-resources-96-dll</guid>
      <description>

&lt;h2&gt;
  &lt;a href="#bbburst"&gt;
  &lt;/a&gt;
  &lt;a href="https://fffuel.co/bbburst/"&gt;bbburst&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fffuel.co/bbburst/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5yykpLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/bbburst.jpg" alt="bbburst" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
A SVG generator for confetti-like explosions of shapes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#web-performance-metrics-cheatsheet"&gt;
  &lt;/a&gt;
  &lt;a href="https://bitsofco.de/web-performance-metrics-cheatsheet/"&gt;Web Performance Metrics Cheatsheet&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://bitsofco.de/web-performance-metrics-cheatsheet/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hPX4GSQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/performance.jpg" alt="Web Performance Metrics Cheatsheet" width="880" height="384"&gt;&lt;/a&gt;&lt;br&gt;
A nice cheat sheet for performance metrics by Ire Aderinokun.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#can-i-include"&gt;
  &lt;/a&gt;
  &lt;a href="https://caninclude.glitch.me/"&gt;Can I Include&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://caninclude.glitch.me/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jz785ats--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/caninclude.jpg" alt="Can I Include" width="880" height="510"&gt;&lt;/a&gt;&lt;br&gt;
A tool to help determine if one HTML tag can be included in another HTML tag.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#morphing-submit-button"&gt;
  &lt;/a&gt;
  &lt;a href="https://codepen.io/jkantner/full/zYdaBPJ"&gt;Morphing Submit Button&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codepen.io/jkantner/full/zYdaBPJ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ETppwiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/button.jpg" alt="Morphing Submit Button" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
A nice Codepen demo of a button that changes after submit by Jon Kantner.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#you-probably-dont-need-media-queries-anymore"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/kathryngrayson/you-probably-dont-need-media-queries-anymore-a4j"&gt;You Probably Don't Need Media Queries Anymore &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/kathryngrayson/you-probably-dont-need-media-queries-anymore-a4j"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUbckNAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/media-queries.jpg" alt="You Probably Don't Need Media Queries Anymore " width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
An article on how to use Flex and Grid instead of media queries.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#splide"&gt;
  &lt;/a&gt;
  &lt;a href="https://splidejs.com/"&gt;Splide&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://splidejs.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lylrQ0k7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/splide.jpg" alt="Splide" width="880" height="462"&gt;&lt;/a&gt;&lt;br&gt;
A lightweight, flexible and accessible slider/carousel written in TypeScript.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#reactburgermenu"&gt;
  &lt;/a&gt;
  &lt;a href="http://negomi.github.io/react-burger-menu/"&gt;react-burger-menu&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://negomi.github.io/react-burger-menu/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I7a8JDxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/burger-menu.jpg" alt="react-burger-menu" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
An off-canvas sidebar React component with a collection of effects and styles.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#appflowy"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.appflowy.io/"&gt;AppFlowy&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.appflowy.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ksn7hk5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/appflowy.jpg" alt="AppFlowy" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
An open source alternative to Notion, where you are in charge of your data and customizations.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-location"&gt;
  &lt;/a&gt;
  &lt;a href="https://react-location.tanstack.com/"&gt;React Location&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://react-location.tanstack.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LHPjNVMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/react-location.jpg" alt="React Location" width="880" height="461"&gt;&lt;/a&gt;&lt;br&gt;
A library for powerful, enterprise-grade routing for React applications.&lt;/p&gt;




&lt;p&gt;To see all the weeklies check: &lt;a href="https://wweb.dev/weekly"&gt;wweb.dev/weekly&lt;/a&gt;&lt;/p&gt;

</description>
      <category>weekly</category>
      <category>webdev</category>
    </item>
    <item>
      <title>100+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs [ Beginners - Pro] </title>
      <author>Jdk</author>
      <pubDate>Wed, 17 Nov 2021 07:14:02 +0000</pubDate>
      <link>https://dev.to/h8g/100-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-211</link>
      <guid>https://dev.to/h8g/100-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-211</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;100+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs &lt;/a&gt;&lt;/b&gt; &lt;/p&gt;






</description>
    </item>
    <item>
      <title>Will No-Code Replace developers?</title>
      <author>Vik 📈</author>
      <pubDate>Wed, 17 Nov 2021 06:56:12 +0000</pubDate>
      <link>https://dev.to/heyvik/will-no-code-replace-developers-3d1j</link>
      <guid>https://dev.to/heyvik/will-no-code-replace-developers-3d1j</guid>
      <description>&lt;h3&gt;
  &lt;a href="#lets-first-understand-what-even-is-nocode-or-lowcode"&gt;
  &lt;/a&gt;
  Lets first understand, what even is No-Code or Low-Code?
&lt;/h3&gt;

&lt;p&gt;No-Code is made for people in every background to create stuff/software. No code platforms have pre-built drag-and-drop elements that have been coded for reuse and scale, so that anyone, even beginners can make anything they want easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#will-nolow-code-replace-programmers"&gt;
  &lt;/a&gt;
  Will No/Low Code replace programmers?
&lt;/h3&gt;

&lt;p&gt;No Not at all, we will surely need programmers... There will always be a need for coding. They benefited in there both alternatives.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-does-nolow-code-does-have-any-future"&gt;
  &lt;/a&gt;
  So does No/Low Code does have any future?
&lt;/h3&gt;

&lt;p&gt;Yes No/Low Code do have a future but they are not the future of code. It is certainly having a place in the future and will be leveraged to make many applications For ANYONE. The future is low-code or no-code with an expected growth rate of 44.4% by 2022 to $27.23 billion (up from $4.32 billion in 2017).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-nolow-code-so-famous"&gt;
  &lt;/a&gt;
  Why No/Low Code so famous?
&lt;/h3&gt;

&lt;p&gt;No/Low Code is popular because it doesnt matter on what background you come from, you can make softwares. Making software in nocode platforms can be fast and done pretty regularly to build prototypes and MVP in a record time.&lt;/p&gt;

&lt;p&gt;Thats all for this blog, its a pretty small blog, but its just a start for me :) &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#consider-following-me-on-twitter"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/vikstack"&gt;Consider Following Me On Twitter&lt;/a&gt;
&lt;/h5&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Best Web Designing Company in Hyderabad | Digital Eyecon </title>
      <author>Digital Eyecon</author>
      <pubDate>Wed, 17 Nov 2021 06:39:04 +0000</pubDate>
      <link>https://dev.to/digitaleyecon/majestic-mighty-panchamukha-hanuman-hyderabad-5el1</link>
      <guid>https://dev.to/digitaleyecon/majestic-mighty-panchamukha-hanuman-hyderabad-5el1</guid>
      <description>&lt;p&gt;Digital eyecon one of the best Web designing Company in Hyderabad, Offering Professional Website Designing for Personal, Business &amp;amp; Ecommerce websites with SEO Optimization. visit:&lt;a href="https://digitaleyecon.com/"&gt;https://digitaleyecon.com/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Speaking Is The Ultimate Expression Of Emotional Intelligence</title>
      <author>Jacqueline Nagle</author>
      <pubDate>Wed, 17 Nov 2021 06:27:44 +0000</pubDate>
      <link>https://dev.to/jacquelinenagle/speaking-is-the-ultimate-expression-of-emotional-intelligence-1g1j</link>
      <guid>https://dev.to/jacquelinenagle/speaking-is-the-ultimate-expression-of-emotional-intelligence-1g1j</guid>
      <description>&lt;p&gt;Young, impressionable, and ambitious, when working in recruitment and consulting in 1998 I (&lt;a href="https://mustamplify.com/bondappetit162/"&gt;Jacqueline Nagle&lt;/a&gt;) stumbled on Daniel Goleman's book Emotional Intelligence and instantly felt he had unlocked the mysteries to building great places of work.&lt;/p&gt;

&lt;p&gt;I became obsessed, and over the next three years became accredited in as many EI and EQ assessment tools as I possibly could, taking each accreditation as far as possible without actually being a qualified and licensed psychologist.&lt;/p&gt;

&lt;p&gt;That world was vastly different. Even when EI caught your attention as a concept, you were still caught in a world of change, fighting sometimes to bring understanding to the shift from IQ to EQ and EI and just how critical it was in creating great spaces to work, live and play in the future.&lt;/p&gt;

&lt;p&gt;Now, Emotional Intelligence and Emotional Competence spill out of our mouths as easily as 'do you want me to grab a coffee?' and our attention has shifted to the next coming intelligence - Artificial Intelligence, and its impact on leadership, the way we work, and the way we interact with the world around us.&lt;/p&gt;

&lt;p&gt;Google 'The Impact of Artificial Intelligence on work' and Dr Google will deliver 157,000,000 search results in less than a second. Google 'The impact of Artificial Intelligence on Leadership' and the good Dr will bring you back more than 25,000,000 search results.&lt;/p&gt;

&lt;p&gt;Skim, read, or deep dive; consume the articles written and participate in the conversations and you will see the consensus which has rapidly formed - from high performance organisations, defence, researchers, thought leaders, practitioners in the space, and commentators on the future of leadership and of work - AI and everything it brings with it means there is one intelligence that will become critical in navigating the world unfolding before us:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Emotional Intelligence.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ability to develop a deep level of self-awareness, to be aware of others emotions, and to bring that information together in a powerful way to navigate and manage both the relationship you hold with yourself, and the relationships you hold with others.&lt;/p&gt;

&lt;p&gt;But how do we see who is emotionally intelligent, who isn't, and who is still building the muscle of emotional intelligence?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is in how they speak.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Through the words they use. The way their articulate their message. The ability to build a picture in someone else's mind, to distil a vision, a way of thinking.&lt;/p&gt;

&lt;p&gt;The ability to wrap us up in the dramatic, the unacceptable, in hope and possibility, to challenge us to think and act differently. To inspire, to coach and to mentor.&lt;/p&gt;

&lt;p&gt;It is the ability to rapidly assess when in crisis, to identify where we stand right now, the possibilities before us, and to articulate the solution - rapidly.&lt;/p&gt;

&lt;p&gt;It is the ability to use our words to instill confidence, to destroy belief, to create consensus, and to build momentum.&lt;/p&gt;

&lt;p&gt;It is in how we craft our ability to influence, to dissolve conflict, to lead the people surrounding us through adaptive change.&lt;/p&gt;

&lt;p&gt;It is how the great speakers and orators transport us to an alternate reality, a world of possibility, where we fall in love with both people and message - or choose to exit stage right.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The great speakers and orators understand they are the curators of the greatest emotional incubators in the world… the places where people gather to listen, be told, inspired, find answers, unlock courage and hope.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is in how they:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;-Create connection through story, weaving empathy, similarity and familiarity into their messages.&lt;/p&gt;

&lt;p&gt;-Take a vision and recreate it in the minds of their audience through the words they use, their flow, and the charisma with which they deliver it.&lt;/p&gt;

&lt;p&gt;-Understand the privilege of the platform, the opportunity to impact lives, to serve in creating a better world - starting as the individual, then causing a ripple effect of global impact.&lt;/p&gt;

&lt;p&gt;-Deeply understand the responsibility they hold for the emotional state of the room in front of them, being completely aware of the power they have to create an environment of their choosing.&lt;/p&gt;

&lt;p&gt;-Articulate messages which are digestible, which wrap all of us up, and allow them to enter someone else's world with empathy.&lt;/p&gt;

&lt;p&gt;-Use their words with volition and on purpose, to navigate their own path. And in doing so, create a path which their audience can easily follow should they choose to.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The greatest speakers and orators - on any stage in any room - have spent the time honing their craft.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is far beyond crafting great content and building, it is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;-A high level of emotional self-awareness and its impact&lt;/p&gt;

&lt;p&gt;-Striving to bring emotional balance, to speak with strength and grace&lt;/p&gt;

&lt;p&gt;-Holding a deep understanding that even when raw they must deliver a level of hope and insight&lt;/p&gt;

&lt;p&gt;-Building sensory acuity to be able to adapt to environment and nuances rapidly to deliver consistency&lt;/p&gt;

&lt;p&gt;-Infusing everything they do with incremental improvement, to push through to the next level&lt;/p&gt;

&lt;p&gt;-Building empathy, rapport, understanding, and relatability rapidly through the words they use&lt;/p&gt;

&lt;p&gt;-Understanding the power of influence, and the opportunities to educate and coach in the moment&lt;/p&gt;

&lt;p&gt;-Knowing when to inspire, to agitate, to instigate, to ignite and how to do it with strength and grace&lt;/p&gt;

&lt;p&gt;They are emotionally intelligent, and it shows in the way that they speak.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Original Source: &lt;a href="https://jacquelinenagle.com/speaking-is-the-ultimate-expression-of-emotional-intelligence/"&gt;jacquelinenagle.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>selfawareness</category>
      <category>emotionalintelligence</category>
      <category>artificialintelligence</category>
      <category>jacquelinenagle</category>
    </item>
    <item>
      <title>100+ JavaScript One-Liners That Will Help You Code Like a Pro</title>
      <author>Jdk</author>
      <pubDate>Wed, 17 Nov 2021 06:25:07 +0000</pubDate>
      <link>https://dev.to/h8g/100-javascript-one-liners-that-will-help-you-code-like-a-pro-2mii</link>
      <guid>https://dev.to/h8g/100-javascript-one-liners-that-will-help-you-code-like-a-pro-2mii</guid>
      <description>&lt;p&gt; &lt;span&gt;JavaScript keeps growing and growing20 JavaScript One-Liners That Will Help You Code Like, opening doors for new “to be tech geeks” in the market as it’s one of the easiest languages to start. (is it really?)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It’s true that JavaScript can do a lot of blazing things! and there is just so much to learn.&lt;/p&gt;
&lt;p&gt;And whether you’re new to JavaScript or more of a professional developer it’s always good to learn something new.&lt;/p&gt;
&lt;p&gt;I’m gonna go over some really helpful one-liners (20 + Bonus) that can help you boost your productivity and can help in debugging code. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-javascript-one-liners-that-will-help-you-code-like-a-pro/&amp;amp;ved=2ahUKEwip-5yjmNPzAhXk_XMBHd2yDaMQFnoECAkQAQ&amp;amp;usg=AOvVaw285TovlnD0Mc9Cm8Rcycp3"&gt;100+ JavaScript One-Liners That Will Help You Code Like a Pro&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Understanding React Hooks</title>
      <author>MikeKetterling</author>
      <pubDate>Wed, 17 Nov 2021 06:05:28 +0000</pubDate>
      <link>https://dev.to/mikeketterling/understanding-react-hooks-39gj</link>
      <guid>https://dev.to/mikeketterling/understanding-react-hooks-39gj</guid>
      <description>&lt;p&gt;One of the great tools that was made available to React developers in the 16.8 release was Hooks.  I'll go into greater detail about what hooks are, why they were developed and how to use them.  Hopefully by the end of this read you will feel more comfortable with the concepts and use-cases of Hooks, allowing you to dive deeper into coding problems, and solving these more complex problems you may run across.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-hooks-were-implemented"&gt;
  &lt;/a&gt;
  Why Hooks Were Implemented
&lt;/h2&gt;

&lt;p&gt;Hooks allow developers to use state and other react features without writing classes.  Hooks are able to solve a lot of different problems in React.  You can take stateful logic from components so the logic can be reused and implemented independently.  This allows developers to reuse this logic without changing your component order or hierarchy, making it pretty seamless to share hooks with multiple components.&lt;/p&gt;

&lt;p&gt;Another problem that React developers run into is dealing with large, complex components with lots of stateful logic and side effects.  Without hooks related code can be changed together, gets split apart, and completely unrelated code can end up combines in single methods causing lots of bugs and inconsistencies.  With large components like these examples, the stateful logic is all over the place making it hard to refactor or break down components to more manageable sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-hooks-do"&gt;
  &lt;/a&gt;
  What Hooks do
&lt;/h2&gt;

&lt;p&gt;Hooks allow you to split a component into smaller functions within the component based on which code blocks are related.  Hooks also allow developers to use more React features without using classes.  Classes have been known to confuse newer developers and over-complicate code.  Classes are much different then other languages handle classes, unstable syntax and verbose code makes classes a struggle for most developers, especially if they are new to JavaScript.&lt;/p&gt;

&lt;p&gt;Hooks embrace functions which is the basis of what components are made of.  This alignment allows developers to learn react and component functionality without getting caught up with complex functional or reactive programming techniques.&lt;/p&gt;

&lt;p&gt;Hooks are functions that “hook into” React state and features from inside components.  React provides built in hooks, and allow you to create your own hooks for re-usable stateful behavior between components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples-of-popular-hooks"&gt;
  &lt;/a&gt;
  Examples of popular Hooks:
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#state-hook"&gt;
  &lt;/a&gt;
  State Hook
&lt;/h4&gt;

&lt;p&gt;The useState hook can be called within a component to add local state to it and protect it during application re-renders.  You can call the setState function from within the component or even passed to other components through props, allowing information and code to be transferred and maintained across components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [count, setCount] = useState(0);

return (
  &amp;lt;div&amp;gt;
    &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;ClickMe&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is a simple example of setting your const UseState variables; count, and setCount as well as setting your useState to 0.  What this means is that the variable count is currently set to 0 because we have given useState the value of 0.  the way our anonymous function in our button works is that onClick we will re-set our count to "count + 1" by calling setCount, and passing in the current count variable and adding 1 to it.  This will continually update our count variable because we are re-setting this variable with the setCount function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#effect-hook"&gt;
  &lt;/a&gt;
  Effect Hook
&lt;/h4&gt;

&lt;p&gt;The useEffect hook adds the ability to perform side effects from within a component.  Side effects can be data fetching, DOM rendering, or actions like subscriptions.  When you call useEffect your basically telling React to run your effect function after sending changes to the DOM.  By default, the effects will be running after every render.  The useEffect also has the ability to clean up after itself by returning a cleanup function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;useEffect(()=&amp;gt; {
  fetch('http://localhost:3000')
  .then(res =&amp;gt; res.json())
},[])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is a prime example of using the Effect Hook.  when we are fetching data we are telling the component to fetch the data after rendering.  React remembers our fetch function and calls on it after performing DOM updates.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-your-own-hooks"&gt;
  &lt;/a&gt;
  Building your own Hooks
&lt;/h4&gt;

&lt;p&gt;Custom Hooks are more of a convention than a specific feature.  The flexibility of custom hooks allows us to cover a wide range of use-Cases from form handling, timers, and many other options.  Its really up to the developer on how they want to implement custom hooks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from 'react';

function useStatus(friendID) {
  const [isOnline, setIsOnline] = useState(null);

  function handleStatusChange(status) {
    setIsOnline(status.isOnline);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an example of custom hook that we have called useStatus.  we can use this hook in other components and the state for each component will be completely independent like so...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function FriendStatus(props) {
  const isOnline = useStatus(props.friend.id);

  if (isOnline === null) {
    return 'Loading...';
  }
  return isOnline ? 'Online' : 'Offline';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function FriendListItem(props) {
  const isOnline = useStatus(props.friend.id);

  return (
    &amp;lt;li style={{ color: isOnline ? 'green' : 'black' }}&amp;gt;
      {props.friend.name}
    &amp;lt;/li&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It even give us the option to call on a custom Hook twice within the same component, this is because each call to a Hook has a completely isolated state.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-hooks"&gt;
  &lt;/a&gt;
  Other Hooks
&lt;/h4&gt;

&lt;p&gt;There are many other hooks that you will come across like useContext, useRef, and useReducer.  For the purpose of this article, I wont go into all of the many hooks that React has implemented.  The number of hooks that are available, and the flexibility that comes with their use is just another example of how great of a tool hooks are.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hooks are part of the new evolvement of code, making code reusable and effective in a  variety of situations.  Technology continues on focusing on problem solving and in some cases addressing problems that have yet to turn up.  the flexibility of hooks allows us as developers to creatively solve problems and situations in new ways.  The greater understanding we have of functionality like hooks will allow us to apply them on a larger scale and discover these new ways to solve problems efficiently. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state"&gt;MDN Documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What Will Be The Full Stack Web Developer Hourly Rate in 2022</title>
      <author>Steven Davis</author>
      <pubDate>Wed, 17 Nov 2021 06:04:46 +0000</pubDate>
      <link>https://dev.to/steven_d_gital/what-will-be-the-full-stack-web-developer-hourly-rate-in-2022-4k8j</link>
      <guid>https://dev.to/steven_d_gital/what-will-be-the-full-stack-web-developer-hourly-rate-in-2022-4k8j</guid>
      <description>&lt;p&gt;Do you want to do a robust software development project? I must say, you would definitely come into contact with Full stack developer who have the ability to bring your unique vision into the beautiful reality with the maximum advantages of robust technologies.&lt;/p&gt;

&lt;p&gt;Moreover, I want you to be aware that finding the right talent Full stack web developer who is able to cater all your requirements will be a somewhat tricky process. When you develop your in-house team for a software development project, you need to take care of the many dynamics to run the project smoothly. So, I suggest you to outsource software development projects for better and quality results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-stack-development-budget"&gt;
  &lt;/a&gt;
  Full Stack Development Budget.
&lt;/h2&gt;

&lt;p&gt;To get the pleasant development work, the success path starts from hiring a full stack developer from a trusted full stack development company. I would suggest you to do research in more detail before making any early commitment.&lt;/p&gt;

&lt;p&gt;For any kind of software development work, budget always plays an important role and you must be aware of the hourly and monthly rates of Full stack developer. To have a good start of any level of software development work, you need to estimate the budget to make the development work more efficient. Efficient plans allow you to set the targets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-developer-hourly-rates-globally"&gt;
  &lt;/a&gt;
  Web Developer Hourly Rates Globally.
&lt;/h2&gt;

&lt;p&gt;I have listed down the various hourly rates by doing the analysis of globally renowned full stack development companies in the USA and India offering the services across the software development industry.&lt;/p&gt;

&lt;p&gt;Around the world, there are few basic models that are followed by the various software development companies to outsource the project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hourly base model&lt;/li&gt;
&lt;li&gt;Monthly base model&lt;/li&gt;
&lt;li&gt;Fixed price model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These models are based on the renowned full stack development companies which offer the top of the line performance with their talented full stack developer team residing in countries like the USA and Canada.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-skills-to-look-for-in-a-full-stack-developer"&gt;
  &lt;/a&gt;
  Technical Skills To Look For In A Full Stack Developer
&lt;/h2&gt;

&lt;p&gt;Full stack developer — the name itself tells you that full stack developer have the skills of all the technologies and have the expertise knowledge of all the technologies. You must look for the following skill sets when you outsource your software development project to a full stack developer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML, CSS, and JavaScript&lt;/li&gt;
&lt;li&gt;Version control&lt;/li&gt;
&lt;li&gt;Programming languages&lt;/li&gt;
&lt;li&gt;Deployment and hosting&lt;/li&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;li&gt;Third-party APIs/services&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#full-stack-developer-hourly-rates-in-2022"&gt;
  &lt;/a&gt;
  Full Stack Developer Hourly Rates in 2022
&lt;/h2&gt;

&lt;p&gt;Hourly rates generally depend on the expertise you require for your software development projects. On average hourly rates are between $25 to $50, depending on the junior full stack developer to senior full stack developer. Pricing can be different based on the project expertise, number of developers, experience.&lt;/p&gt;

&lt;p&gt;$23-$60/Hourly(USD) — you will offer a fully signed NDA for your project’s confidentiality&lt;/p&gt;

&lt;p&gt;$2960 -$7500/Monthly(USD) — here we provide you Full stack developers with 5+ Years of Exp. for 160 hours&lt;/p&gt;

&lt;p&gt;You can feel that it’s quite logical and you surely think about the final deal. However, Cost to Hire full stack developer depends on the following factors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project goals&lt;/li&gt;
&lt;li&gt;Aim behind the project development&lt;/li&gt;
&lt;li&gt;Skill set or experience, you are looking for.&lt;/li&gt;
&lt;li&gt;Business niche&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Up to here, We get to know about the rates of dedicated full stack developers. Implementing the magical visual appeal with full stack development, gains the users’ attention on your business website. If you still feel doubtable, Contact the globally recognized full stack development companies and &lt;a href="https://www.bacancytechnology.com/hire-full-stack-developer"&gt;&lt;strong&gt;Hire Full Stack developer&lt;/strong&gt;&lt;/a&gt; for your software development project.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
