<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>array.map(): A better way 🧐 ?</title>
      <author>Jeet Mandaliya</author>
      <pubDate>Fri, 29 Jan 2021 18:35:38 +0000</pubDate>
      <link>https://dev.to/webdevjeet/array-map-a-better-way-c23</link>
      <guid>https://dev.to/webdevjeet/array-map-a-better-way-c23</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The method &lt;code&gt;map()&lt;/code&gt; creates a new array with the values that get returned by calling the function provided to &lt;code&gt;map(anyFunctionHere)&lt;/code&gt; on every element of an array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The array, on which the &lt;code&gt;map()&lt;/code&gt; is being executed is named as &lt;em&gt;&lt;strong&gt;calling array&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task" class="anchor"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Given an array with reversed first names, create a new array with the same position of names in the original array but re-reversed(should make sense) first names.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look how we could tackle it using &lt;code&gt;for-loop&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;anhsirK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nosaJ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nolE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drawdE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arrayOfReversedNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// declaring an empty array to store results.&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nameIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;nameIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;nameIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nameIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// we can reverse a string in JavaScript with String.split("").reverse().join("")&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reversedFirstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;nameIndex&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;arrayOfReversedNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reversedFirstName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// output: [ 'Krishna', 'Jason', 'Elon', 'Edward' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above example, we declared &lt;code&gt;arrayOfReversedNames&lt;/code&gt; and then appended calculated reverse names to that array.&lt;/p&gt;

&lt;p&gt;It's time to solve the same problem, but with the use of &lt;code&gt;map()&lt;/code&gt;method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;anhsirK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nosaJ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nolE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drawdE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// declaring an empty array to store results.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arrayOfReversedNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; 

&lt;span class="c1"&gt;// arrayOfReversedNames: [ 'Krishna', 'Jason', 'Elon', 'Edward' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We pass in an &lt;em&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;arrow function&lt;/a&gt;&lt;/em&gt; to &lt;code&gt;map()&lt;/code&gt; with an argument &lt;code&gt;firstName&lt;/code&gt;. &lt;code&gt;firstName&lt;/code&gt; will have a different value in each iteration on the elements of the calling array. Here in the first iteration, the value of &lt;code&gt;firstName&lt;/code&gt; would be &lt;code&gt;anhsirK&lt;/code&gt;, &lt;code&gt;nosaJ&lt;/code&gt; in the second iteration, and so on... It's clear that we get the same results because &lt;code&gt;map()&lt;/code&gt; is also doing the same iteration that &lt;code&gt;for-loop&lt;/code&gt; was doing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;At this point you might ask if both methods are doing the same thing that is iteration over elements of the calling array, shouldn't we use &lt;code&gt;for-loop&lt;/code&gt; instead of &lt;code&gt;map()&lt;/code&gt;? It's more readable and explicitly describes what is being done there.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Well, yes and no.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-using-raw-map-endraw-over-raw-forloop-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Benefits of using &lt;code&gt;map()&lt;/code&gt; over &lt;code&gt;for-loop&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Fewer lines of code - mostly better!&lt;/li&gt;
&lt;li&gt;  We get access to individual elements of the calling array directly with an argument in the function passed on to &lt;code&gt;map()&lt;/code&gt; - far easier than always getting values with &lt;code&gt;callingArray[someIndex]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;  A certainty that all elements of the array will be iterated with &lt;code&gt;map()&lt;/code&gt; - never deal with wrong indices inside a &lt;code&gt;for-loop&lt;/code&gt; anymore.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All we know at the end of the day is that when we have an array and we want to process every element of that array and store values in a new one, &lt;code&gt;map()&lt;/code&gt; is the way to go.&lt;/p&gt;




&lt;p&gt;This is originally written &lt;a href="https://webdevjeet.me/2020-12-array-prototype-map/"&gt;at my blog&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Edit:&lt;/p&gt;

&lt;p&gt;Take a look at the comment on this post made by &lt;a href="https://dev.to/brettthurs10"&gt;Brett Thurston&lt;/a&gt; to get more info on where not to use &lt;code&gt;map()&lt;/code&gt; as per MDN.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>javascriptarraymethods</category>
    </item>
    <item>
      <title>Observability is not just about the tool</title>
      <author>Liran Keren</author>
      <pubDate>Fri, 29 Jan 2021 16:43:14 +0000</pubDate>
      <link>https://dev.to/behalf/observability-is-not-just-about-the-tool-4ond</link>
      <guid>https://dev.to/behalf/observability-is-not-just-about-the-tool-4ond</guid>
      <description>&lt;p&gt;Logs have been with us since the dawn of coding, and with good reason.&lt;br&gt;
Logging helps us debug during development, understand failures in pre-production and production environments, and observe our systems' proper functionality in general.&lt;/p&gt;

&lt;p&gt;With the recent microservices and cloud computing trend, there was a need to create centralized logging solutions that would process logs from hundreds of microservices in real-time.&lt;br&gt;
There are many solutions out there. Some are open-source like ELK; others are paid solutions like &lt;a href="https://www.sumologic.com/"&gt;Sumo Logic&lt;/a&gt;, Coralogix, Logz.io, Loggly, and more.&lt;/p&gt;

&lt;p&gt;These services indeed solve many of the issues related to log management and the monitoring of distributed systems. However, how we formulate logs is up to us, the developers.&lt;/p&gt;

&lt;p&gt;Logs are, in fact, streams of events. &lt;br&gt;
Reading events from the beginning to a certain point helps us understand the state of a specific snapshot in time.&lt;br&gt;
Log events have metadata derived from the log technical context.&lt;br&gt;
Some examples include: host, application name (ex. microservice name), and receive time.&lt;br&gt;
Another metadata point is the log level, which is set by us, the developers.&lt;br&gt;
Finally, there's the "payload" – a schemaless blob of data – a conversation between the developer to their future self.&lt;br&gt;
But should it be schemaless? &lt;/p&gt;

&lt;p&gt;Here’s an example of a log (example 1):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;log.debug("Fetched {} email records from DB. Query={}, Params={}",
     new Object[] { emails.size(), query, query.getParams() });
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The log event that is the output of this code repeats itself every time; however, the values will most likely change.&lt;br&gt;
While it looks like a schemaless string, it has a repeating pattern.&lt;br&gt;
Using Sumo Logic, ELK, Coralogix, or even good old Grep, we can consider &lt;code&gt;"Fetched {} email records from DB."&lt;/code&gt; as a Number field - emailRecordsCount, &lt;code&gt;"Query={},"&lt;/code&gt; as a String field called query and &lt;code&gt;Params&lt;/code&gt; can be parsed to a list of String values.&lt;/p&gt;

&lt;p&gt;Parsing logs into fields in any logging system is the key feature that lets us achieve observability.&lt;br&gt;
After parsing logs into fields, the stream of events transforms into a table. Using this table, we can perform aggregations and analyze things like error count, event streaming latency, login statistics, and many more.&lt;br&gt;
With aggregations, we can build dashboards and set alerts, which are essential to our business continuity.&lt;/p&gt;

&lt;p&gt;While we established that every log event is a repeating pattern, there are serious issues with the simple logging approach: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Hard to parse&lt;/strong&gt; 
While there is a pattern, it is hard to parse it because the developers don’t declare their intentions. Sometimes you'll need complex regex to parse.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Language &amp;amp; Context&lt;/strong&gt;
Sometimes, it's hard to understand the log meaning and context of the log. 
Day-to-day logging is like a conversation between a developer and their future self.
In many cases, only the developer understands and knows the context of the log event.
As time goes by, a developer needs to constantly check their code to understand the original context, the format, and their original intentions when writing the event log. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A tendency for change&lt;/strong&gt;
Most developers don’t cover their logging with unit tests. Changing a log event never changes a feature behavior, so end-to-end tests don’t cover it as well.
We can build alerts and meaningful dashboards in services like Sumo Logic, but there's an inherent possibility that it will break, and we won't know it. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's how we at &lt;a href="https://www.behalf.com"&gt;&lt;strong&gt;Behalf&lt;/strong&gt;&lt;/a&gt; solved these issues:&lt;/p&gt;

&lt;p&gt;Using formats like key=value or JSON makes the job of parsing into fields much more straightforward, and with many services (SumoLogic, Loggly... ), you gain auto-parsing abilities. &lt;/p&gt;

&lt;p&gt;Just choosing a format is not enough, though.&lt;br&gt;
Take the log event from the example above.&lt;br&gt;
Writing it in JSON format would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "emailRecordsCount":"123",
    "query":"SELECT email from people",
    "params": {"firstName":"Jhon"}
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But while one developer will write it this way on one microservice, another developer will probably use different names for the fields, like emailCount or query_params on their microservice.&lt;br&gt;
The log event should not be intimate. &lt;br&gt;
For this purpose at Behalf, we distinguish between &lt;strong&gt;&lt;em&gt;"Debug logs"&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;"Audit logs.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Debug logs&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
These are the logs similar to the log in example 1.&lt;br&gt;
In our methodology, these kinds of logs have Debug level and are used during development.&lt;br&gt;
There's no need for a particular structure; they can be very verbose, they tell a story that the developer who wrote them knows.&lt;br&gt;
They will be seen in development environments, and CI (Continuous integration) runs, but they won't appear in Staging and Production.&lt;br&gt;
They can change without any worry since they won't appear in production in the first place, and no one will establish any monitoring aspects on top of them.&lt;br&gt;
Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's straightforward and fast to code these lines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everything I wrote above (hard to parse, language and context, a tendency to change)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Audit Logs&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
We created a core library service called AuditService that can be used by all microservices.&lt;br&gt;
The AuditService is a simple abstract class that expects any extension of a BaseAuditRecord.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public abstract class AuditService&amp;lt;R extends BaseAuditRecord&amp;gt; { 
   public void audit(R auditRecord) {
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The BaseAuditRecord and its extensions are basic POJOs that represent the schema of the event that we want to audit.&lt;br&gt;
The AuditService.audit() method receives the record object and logs it using JSON format (serialize the record into JSON).&lt;br&gt;
While the BaseAuditRecord provides some basic properties like status, duration, etc., we still want to create different audit layers for various purposes. &lt;br&gt;
First and foremost, we use AuditService extensions in our different Core libraries and platforms that run all our microservices.&lt;br&gt;
For example, to audit our persistence layer, we extend BaseAuditRecord with AuditDbRecord.&lt;br&gt;
AuditDbRecord has the following properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;String operation (e.g., SELECT, UPDATE...)
String query
int numRows
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We extend AuditService with AuditDbService&lt;br&gt;
&lt;code&gt;public class AuditDb extends AuditService&amp;lt;AuditDbRecord&amp;gt; {}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The output appears like this:&lt;br&gt;
&lt;code&gt;2021-01-21 21:30:23.981 INFO 20 [sessionId=, principalId=, flowId=, traceId=5a139a230e15de3c, spanId=5a139a230e15de3c] --- [io-8092-exec-15] c.behalf.core.persistence.audit.AuditDb : {"status":"OK","duration":2,"operation":"SELECT","type":"READ","numRows":0,"table":"agreement","queryName":"findByCustomerId"}&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Pros: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Testability - it can be easily unit tested.
Schema changes are significant and apparent. 
Suppose we need to change AuditService.audit() lines, we check first if an alert or a dashboard uses it.&lt;/li&gt;
&lt;li&gt;The need to create the schema forces the developer to consider observability and monitoring in post-production while in the early development phases. The developer has to determine what tech support teams and DevOps teams will get in terms of logs when the feature goes live.&lt;/li&gt;
&lt;li&gt;Platform thinking - Creates a uniform understanding of the auditing layers, mostly if it belongs to the platform. 
If I'm a developer in team A, I would easily understand team B's services logs because the format, language, and context are the same.
The same goes for quality engineers, tech support, and even Product teams - everyone can understand the platform audit language. &lt;/li&gt;
&lt;li&gt;Searching, parsing, and aggregating becomes easy.
For example, at Behalf, we use Sumo Logic.
If I want to check the average latency on event consumption on all microservices in production, I will do this search in Sumo:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_sourceCategory=prod* AuditBusinessEvents* 
| json auto
| avg (latency)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It searches production logs for all log lines created by the AuditBusinessEvents class, using Sumo's 'json auto' feature to auto parse the JSON fields, and then it aggregates to get the average latency within the time frame.&lt;br&gt;
Again, no need to be a coder to search and process these logs!!&lt;/p&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It takes a little bit more time to implement than regular logs.&lt;/li&gt;
&lt;li&gt;People might find the output not verbose enough (well, that’s the purpose).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use the AuditService to log any fundamental process activity, whether it's a core/platform process or a microservice business logic layer process.&lt;br&gt;
With our structured, testable logs, we gain complete observability, we recognize weak spots, understand our business flows, and easily create alerts and dashboards that don't break.&lt;/p&gt;

&lt;p&gt;We established an observability practice that doesn't break and always extends as more features are introduced into our system.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;log.error ("Oh no, we reached the end of the post");&lt;/code&gt;&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>design</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>How To Learn ReactJS in 2021</title>
      <author>Nkenganyi Clovis</author>
      <pubDate>Fri, 29 Jan 2021 16:34:52 +0000</pubDate>
      <link>https://dev.to/clovissocial/how-to-learn-reactjs-in-2021-389d</link>
      <guid>https://dev.to/clovissocial/how-to-learn-reactjs-in-2021-389d</guid>
      <description>&lt;p&gt;As a passionate web developer, you must have come across the name ReactJS, you might have also tried to learn this library. &lt;/p&gt;

&lt;p&gt;Let's start by asking the question...&lt;br&gt;
&lt;strong&gt;WHAT IS REACT ??&lt;/strong&gt;&lt;br&gt;
According to the official React Documentation, React is defined as &lt;strong&gt;&lt;strong&gt;A JavaScript library for building user interfaces&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we know, in software development doing repetitive tasks is frustrating and developers always look for some framework or method to save their precious time. Here React comes into the picture. &lt;br&gt;
React is component-based and it helps in building frontend pages and web applications in less time and that’s the coolest feature of this library.&lt;/p&gt;

&lt;p&gt;Today in this blog we are going to list down the key skills that are needed to become a proficient React Developer. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Learn the Fundamentals of HTML, CSS, and JavaScript&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should understand the base before moving on in learning this JavaScript library.&lt;br&gt;
Understand the basic building blocks of the website. How HTML, CSS, and JavaScript work. This is because these skills a very vital before you start learning and fully understand React.&lt;br&gt;
Most React features are inherited from JavaScript, so it's good to have a solid foundation in JavaScript. Some of the most used and essential Javascript concepts that are used in React include&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variables, objects, arrays, functions, and classes.&lt;/li&gt;
&lt;li&gt;Common array methods such as .map(), .filter(), .reduce()&lt;/li&gt;
&lt;li&gt;ES6 features such as arrow function, let, const. Learn about ‘this’ keyword, call, apply, and bind method.&lt;/li&gt;
&lt;li&gt;Concepts of Asynchronous JavaScript such as promises, callback, Async/Await.&lt;/li&gt;
&lt;li&gt;Learn how DOM (document object model) works. How to create, select, and update the HTML elements and their attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Fundamentals of Node JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As part of being a React Developer, you will have to do a lot of NPM scripts/commands which I consider any software developer will be very familiar with especially when working with most JavaScript frameworks.&lt;br&gt;
You should have knowledge of NPM (Node package manage). NPM is used to install the Node modules and packages. Learn how to use the basic commands/scripts to install the packages and modules.&lt;br&gt;
When learning React, you will also need to understand the &lt;strong&gt;import&lt;/strong&gt; and &lt;strong&gt;export&lt;/strong&gt; keywords which is also a very essential concept in React to utilize the installed node modules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Learn React Fundamentals&lt;/strong&gt;&lt;br&gt;
Once the above concepts are clear and you have become confident with JavaScript, jump to the React Fundamentals. Learn the core concepts of React. React is based on component-based architecture. You will have to divide the complete UI or JSX into reusable components. &lt;/p&gt;

&lt;p&gt;You will be creating different components for different tasks and these components will be fitted into the parent component. This parent component will be rendered to the user. &lt;/p&gt;

&lt;p&gt;Now the question is…what are the core concepts you should learn in ReactJS. Let’s discuss that…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You will be using JSX syntax in ReactJS. &lt;br&gt;
The syntax of JSX is somewhere similar to HTML but keep in mind that it is different from plain HTML.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn to render the JSX elements. Show and hide elements depending on the conditions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn the concept of State in ReactJS &lt;em&gt;How does it work?&lt;/em&gt; Basically, the state holds the synchronous variable, and changing the value of the state will be reflected in the whole application wherever it is used. Learn how to store and update the data in State.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In React, you will be using props (Hey! What it is actually? ). We know that this might be a new word for you. Basically, props are just like the arguments passed to the function or method. Know when to use it and how to use it. You will be using props as an input argument to the HTML tags.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functional component, class component, and the difference between both of these.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just like in JavaScript, you will handle events in React. Learn how to handle some common events such as onClick, onChange, and onSubmit (You will be using these events in buttons, inputs, and forms).&lt;/p&gt;

&lt;p&gt;NB: The &lt;a href="https://reactjs.org/"&gt;React official tutorial&lt;/a&gt; will help you a lot to understand everything about React. &lt;br&gt;
When you understand the basic concepts, then go-ahead to build projects from scratch on your own. &lt;br&gt;
You can build projects such as...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple calculator app&lt;/li&gt;
&lt;li&gt;Simple todo-app&lt;/li&gt;
&lt;li&gt;Build a shopping cart&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Styling in React&lt;/strong&gt;&lt;br&gt;
In development most of the time, we use plain CSS to give styling to our application. But in React mostly developers use the Component library for easier styling. There are many component libraries available to use but the most popular ones in React are Material UI and Bootstrap. &lt;/p&gt;

&lt;p&gt;There is even what we call &lt;strong&gt;Reactstrap&lt;/strong&gt;, which is like bootstrap main for the react library&lt;/p&gt;

&lt;p&gt;You can also use the utility class library such as Tailwind CSS to style your element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. React Router&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React developers use a third-party library called &lt;strong&gt;react-router-dom&lt;/strong&gt; to create links for different pages, to load the content of different pages, and to redirect to other pages.&lt;br&gt;
Below are some common features of react-router-dom you should know about to work with your application.&lt;/p&gt;

&lt;p&gt;How to use ,  and  components.&lt;br&gt;
How to do navigation using the component and using the useHistory() hook.&lt;br&gt;
Creating dynamic routes using the path prop i.e.  and getting the path values using the useParams() hook. &lt;br&gt;
How  works in React Router.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. React Hooks&lt;/strong&gt;&lt;br&gt;
So you’re done with the basic building blocks and React fundamentals. Now it’s time to learn React Hooks. This new feature was added in React version 16.8. With the help of React Hooks, you can write the React features without using the classes. React hooks allow you to write less code and that makes your app efficient, simpler, and powerful.&lt;/p&gt;

&lt;p&gt;You will be working on mainly 5 core concepts of React Hooks. These five core concepts are given below:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;useState&lt;/strong&gt;&lt;/em&gt;: Most of the time in your React app you will be using this concept to store and manage the data.&lt;br&gt;
&lt;em&gt;&lt;strong&gt;useEffect&lt;/strong&gt;&lt;/em&gt;: You will be using this concept in actions like HTTP requests and working with the Browser API.&lt;br&gt;
&lt;em&gt;&lt;strong&gt;useRef&lt;/strong&gt;&lt;/em&gt;: This will be used to reference JSX elements.&lt;br&gt;
&lt;em&gt;&lt;strong&gt;useContext&lt;/strong&gt;&lt;/em&gt;: This property of React Hooks will be used to access data from React Context to share data among components easily (instead of passing props)&lt;br&gt;
&lt;em&gt;&lt;strong&gt;useReducer&lt;/strong&gt;&lt;/em&gt;: This concept in React hooks will be used to store and manage data across multiple components.&lt;br&gt;
We have discussed only 5 hooks that are important to learn. There are more than 5 hooks but that’s not needed initially in your learning phase. As you will progress and you will encounter problems in your application, you will be learning more hooks slowly. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Redux&lt;/strong&gt;&lt;br&gt;
In your React application, you will have to manage the states. Once your application will start growing it will become a complex application and you will have to manage the states across components. &lt;br&gt;
Redux which a powerful JavaScript library solves this problem and helps in maintaining the state of the application. In Redux, you store all your states in a single source.&lt;br&gt;
You can learn more about Redux in the &lt;a href="https://redux.js.org/"&gt;Official Redux tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Learn to Work With the APIs in React Apps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We know that React is a front-end library to build the user interfaces. A user interacts with the frontend part of the application, access the data from there, or navigate from one page to another page. &lt;/p&gt;

&lt;p&gt;React interacts with the backend code of the application. We get the data from the backend part of the application, we perform actions such as authentication, display the item to the user, searching, registration of the user, etc. &lt;/p&gt;

&lt;p&gt;Mainly there are two ways to work with the data from the backend. The most common and standard way is using the &lt;strong&gt;REST APIs&lt;/strong&gt;. The other and the newer one is &lt;strong&gt;GraphQL API&lt;/strong&gt;. In your work, you will encounter problems where you will have to work with both of the APIs. Learn how to work with both kinds of APIs using React.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope I have run you down on the main concepts or what you need to be successful on your journey in learning React and becoming a React developer.&lt;br&gt;
The more you keep working on projects with React, you will encounter difficulties and this will help you to learn new skills and 3rd party libraries in React that will help you solve your problem&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like this article, please like,  comment and share and make sure to follow me on the following platforms:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/nkenganyi-clovis-4310b41ba/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/clovissocial"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Building map-based data visualizations with Mapbox, React, and Cube.js 🗺</title>
      <author>Igor Lukanin</author>
      <pubDate>Fri, 29 Jan 2021 16:34:39 +0000</pubDate>
      <link>https://dev.to/cubejs/building-map-based-data-visualizations-with-mapbox-react-and-cube-js-4poo</link>
      <guid>https://dev.to/cubejs/building-map-based-data-visualizations-with-mapbox-react-and-cube-js-4poo</guid>
      <description>&lt;p&gt;&lt;em&gt;TL;DR: I'll explain how to build a visually appealing and fast web app with different kinds of maps. It'll be fun.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Hey devs 👋&lt;/p&gt;

&lt;p&gt;As you most likely know, there are many ways to visualize data, but when it comes to location-based (or geospatial) data, map-based data visualizations are the most comprehensible and graphic.&lt;/p&gt;

&lt;p&gt;In this guide, we'll explore how to build a map data visualization with JavaScript (and React) using &lt;a href="https://www.mapbox.com"&gt;Mapbox&lt;/a&gt;, a very popular set of tools for working with maps, navigation, and location-based search, etc.&lt;/p&gt;

&lt;p&gt;We'll also learn how to make this map data visualization interactive (or dynamic), allowing users to control what data is being visualized on the map.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's our plan for today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#toc-1"&gt;Set up the dataset&lt;/a&gt; and launch an API&lt;/li&gt;
&lt;li&gt;
&lt;a href="#toc-2"&gt;Create a frontend app&lt;/a&gt; and integrate it with Mapbox&lt;/li&gt;
&lt;li&gt;Learn how to build &lt;a href="#toc-3"&gt;heatmap visualization&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Learn how to build &lt;a href="#toc-4"&gt;dynamic points visualization&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Learn how to build &lt;a href="#toc-5"&gt;points and events visualization&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Learn how to build &lt;a href="#toc-6"&gt;choropleth visualization&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Have a moment to great feelings in the end 😇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;And... do you wonder what our result is going to look like?&lt;/strong&gt; Not that bad, right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mapbox-demo.cube.dev?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7GlXpBUJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i58or9dhhlbz9kd2j16x.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make this guide even more interesting, we'll use &lt;a href="https://stackoverflow.com/questions"&gt;Stack Overflow&lt;/a&gt; open dataset, publicly available in &lt;a href="https://console.cloud.google.com/marketplace/product/stack-exchange/stack-overflow"&gt;Google BigQuery&lt;/a&gt; and on &lt;a href="https://www.kaggle.com/stackoverflow/stackoverflow"&gt;Kaggle&lt;/a&gt;. With this dataset, we'll be able to find answers to the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where do Stack Overflow users live?&lt;/li&gt;
&lt;li&gt;Is there any correlation between Stack Overflow users' locations and their ratings?&lt;/li&gt;
&lt;li&gt;What is the total and average Stack Oerflow users' rating by country?&lt;/li&gt;
&lt;li&gt;Is there any difference between the locations of people who ask and answer questions?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, to host and serve this dataset via an API, we'll use &lt;a href="https://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; as a database and &lt;a href="https://cube.dev?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide"&gt;Cube.js&lt;/a&gt; as an analytical API platfrom which allows to bootstrap an backend for an analytical app in minutes.&lt;/p&gt;

&lt;p&gt;So, that's our plan — and let's get hacking! 🤘&lt;/p&gt;

&lt;p&gt;If you can't wait to discover how it's built, feel free to study the &lt;a href="https://mapbox-demo.cube.dev?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide"&gt;demo&lt;/a&gt; and the &lt;a href="https://github.com/cube-js/cube.js/tree/master/examples/mapbox"&gt;source code&lt;/a&gt; on GitHub. Otherwise, let's proceed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dataset-and-api" class="anchor"&gt;
  &lt;/a&gt;
  Dataset and API &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Original &lt;a href="https://www.kaggle.com/stackoverflow/stackoverflow"&gt;Stack Overflow dataset&lt;/a&gt; contains locations as strings of text. However, Mapbox best works with locations encoded as &lt;a href="https://en.wikipedia.org/wiki/GeoJSON"&gt;GeoJSON&lt;/a&gt;, an open standard for geographical features based (surprise!) on JSON. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-NyNETU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4h8jm4guvtn6kwi8ad53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-NyNETU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4h8jm4guvtn6kwi8ad53.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's why we've used &lt;a href="https://docs.mapbox.com/#search"&gt;Mapbox Search API&lt;/a&gt; to perform &lt;em&gt;geocoding&lt;/em&gt;. As the geocoding procedure has nothing to do with map data visualization, we're just providing the ready to use dataset with embedded GeoJSON data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-database" class="anchor"&gt;
  &lt;/a&gt;
  Setting Up a Database 🐘
&lt;/h2&gt;

&lt;p&gt;We'll be using PostgreSQL, a great open-source database, to store the Stack Overflow dataset. Please make sure to have PostgreSQL &lt;a href="https://www.postgresql.org/download/"&gt;installed&lt;/a&gt; on your system.&lt;/p&gt;

&lt;p&gt;First, download the &lt;a href="https://cubedev-guides-mapbox.s3.amazonaws.com/so-dataset.sql"&gt;dataset&lt;/a&gt; ⬇️ (the file size is about 600 MB).&lt;/p&gt;

&lt;p&gt;Then, create the &lt;code&gt;stackoverflow__example&lt;/code&gt; database with the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;createdb stackoverflow__example
&lt;span class="nv"&gt;$ &lt;/span&gt;psql &lt;span class="nt"&gt;--dbname&lt;/span&gt; stackoverflow__example &lt;span class="nt"&gt;-f&lt;/span&gt; so-dataset.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-an-api" class="anchor"&gt;
  &lt;/a&gt;
  Setting Up an API 📦
&lt;/h2&gt;

&lt;p&gt;Let's use &lt;a href="https://cube.dev?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide"&gt;Cube.js&lt;/a&gt;, an open-source analytical API platform, to serve this dataset over an API. Run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx cubejs-cli create stackoverflow__example &lt;span class="nt"&gt;-d&lt;/span&gt; postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Cube.js uses environment variables for configuration. To set up the connection to our database, we need to specify the database type and name.&lt;/p&gt;

&lt;p&gt;In the newly created &lt;code&gt;stackoverflow__example&lt;/code&gt; folder, please replace the contents of the .env file with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;CUBEJS_DEVELOPER_MODE=true&lt;/span&gt;
&lt;span class="s"&gt;CUBEJS_API_SECRET=SECRET&lt;/span&gt;
&lt;span class="s"&gt;CUBEJS_DB_TYPE=postgres&lt;/span&gt;
&lt;span class="s"&gt;CUBEJS_DB_NAME=stackoverflow__example&lt;/span&gt;
&lt;span class="s"&gt;CUBEJS_DB_USER=postgres&lt;/span&gt;
&lt;span class="s"&gt;CUBEJS_DB_PASS=postgres&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we're ready to start the API with this simple command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To check if the API works, please navigate to &lt;a href="http://localhost:4000/"&gt;http://localhost:4000&lt;/a&gt; in your browser. You'll see Cube.js Developer Playground, a powerful tool which greatly simplifies data exploration and query building.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_NxXTlxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kf5h5l7nbyhdvs706cqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_NxXTlxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kf5h5l7nbyhdvs706cqa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last thing left to make the API work is to define the &lt;a href="https://cube.dev/docs/getting-started-cubejs-schema?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide"&gt;data schema&lt;/a&gt;: it describes what kind of data we have in our dataset and what should be available at our application.&lt;/p&gt;

&lt;p&gt;Let’s go to the &lt;a href="http://localhost:4000/#/schema"&gt;data schema page&lt;/a&gt; and check all tables from our database. Then, please click on the plus icon and press the “generate schema” button. Voila! 🎉&lt;/p&gt;

&lt;p&gt;Now you can spot a number of new &lt;code&gt;*.js&lt;/code&gt; files in the &lt;code&gt;schema&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;So, our API is set up, and we're ready to create map data visualizations with Mapbox!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#frontend-and-mapbox" class="anchor"&gt;
  &lt;/a&gt;
  Frontend and Mapbox &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Okay, now it's time to write some JavaScript and create the front-end part of our map data visualization. As with the data schema, we can easily scaffold it using Cube.js Developer Playground. &lt;/p&gt;

&lt;p&gt;Navigate to the &lt;a href="http://localhost:4000/#/template-gallery"&gt;templates page&lt;/a&gt; and choose one of predefined templates or click "Create your own". In this guide, we'll be using React, so choose accordingly.&lt;/p&gt;

&lt;p&gt;After a few minutes spent to install all dependencies (oh, these &lt;code&gt;node_modules&lt;/code&gt;) you'll have the new &lt;code&gt;dashboard-app&lt;/code&gt; folder. Run this app with the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;dashboard-app
&lt;span class="nv"&gt;$ &lt;/span&gt;npm start 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Great! Now we're ready to add Mapbox to our front-end app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-mapbox-%F0%9F%97%BA" class="anchor"&gt;
  &lt;/a&gt;
  Setting Up Mapbox 🗺
&lt;/h2&gt;

&lt;p&gt;We'll be using the &lt;a href="http://visgl.github.io/react-map-gl/"&gt;react-map-gl&lt;/a&gt; wrapper to work with Mapbox. Actually, you can find some plugins for React, Angular, and other frameworks in &lt;a href="https://docs.mapbox.com/mapbox-gl-js/plugins/"&gt;Mapbox documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's install &lt;code&gt;react-map-gl&lt;/code&gt; with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; react-map-gl
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To connect this package to our front-end app, replace the &lt;code&gt;src/App.jsx&lt;/code&gt; with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MapGL&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-map-gl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MAPBOX_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MAPBOX_TOKEN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setViewport&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MapGL&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onViewportChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setViewport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'100%'&lt;/span&gt;
      &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'100%'&lt;/span&gt;
      &lt;span class="na"&gt;mapboxApiAccessToken&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MAPBOX_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can see that &lt;code&gt;MAPBOX_TOKEN&lt;/code&gt; needs to be obtained from Mapbox and put in this file.&lt;/p&gt;

&lt;p&gt;Please see the &lt;a href="https://docs.mapbox.com/help/how-mapbox-works/access-tokens/#how-access-tokens-work"&gt;Mapbox documentation&lt;/a&gt; or, if you already have a Mapbox account, just generate it at the &lt;a href="https://account.mapbox.com/access-tokens/"&gt;account page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point we have an empty world map and can start to visualize data. Hurray!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planning-the-map-data-visualization" class="anchor"&gt;
  &lt;/a&gt;
  Planning the Map Data Visualization 🔢
&lt;/h2&gt;

&lt;p&gt;Here's how you can &lt;em&gt;any map data visualization&lt;/em&gt; using Mapbox and Cube.js:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;load data to the front-end with Cube.js&lt;/li&gt;
&lt;li&gt;transform data to GeoJSON format&lt;/li&gt;
&lt;li&gt;load data to Mapbox layers&lt;/li&gt;
&lt;li&gt;optionally, customize the map using the &lt;code&gt;properties&lt;/code&gt; object to set up data-driven styling and manipulations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this guide, we'll follow this path and create four independent map data visualizations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a heatmap layer based on users' location data&lt;/li&gt;
&lt;li&gt;a points layer with data-driven styling and dynamically updated data source&lt;/li&gt;
&lt;li&gt;a points layer with click events&lt;/li&gt;
&lt;li&gt;a choropleth layer based on different calculations and data-driven styling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get hacking! 😎&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#heatmap-visualization" class="anchor"&gt;
  &lt;/a&gt;
  Heatmap Visualization &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Okay, let's create our first map data visualization! 1️⃣&lt;/p&gt;

&lt;p&gt;Heatmap layer is a suitable way to show data distribution and density. That's why we'll use it to show where Stack Overflow users live.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-schema" class="anchor"&gt;
  &lt;/a&gt;
  Data Schema
&lt;/h2&gt;

&lt;p&gt;This component needs quite a simple schema, because we need only such &lt;a href="https://cube.dev/docs/dimensions?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide"&gt;dimension&lt;/a&gt; as “users locations coordinates” and such &lt;a href="https://cube.dev/docs/measures?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide"&gt;measure&lt;/a&gt; as “count”.&lt;/p&gt;

&lt;p&gt;However, some Stack Overflow users have amazing locations like "in the cloud",  "Interstellar Transport Station", or "on a server far far away". Surprisingly, we can't translate all these fancy locations to GeoJSON, so we're using the SQL &lt;code&gt;WHERE&lt;/code&gt; clause to select only users from the Earth. 🌎&lt;/p&gt;

&lt;p&gt;Here's how the &lt;code&gt;schema/Users.js&lt;/code&gt; file should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Users`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`SELECT * FROM public.Users WHERE geometry is not null`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;measures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`count`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;geometry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#web-component" class="anchor"&gt;
  &lt;/a&gt;
  Web Component
&lt;/h2&gt;

&lt;p&gt;Also, we'll need the &lt;code&gt;dashboard-app/src/components/Heatmap.js&lt;/code&gt; component with the following &lt;a href="https://github.com/cube-js/cube.js/blob/master/examples/mapbox/dashboard-app/src/components/Heatmap.js"&gt;source code&lt;/a&gt;. Let's break down its contents!&lt;/p&gt;

&lt;p&gt;First, we're loading data to the front-end with a convenient &lt;a href="https://cube.dev/docs/@cubejs-client-react?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide#use-cube-query"&gt;Cube.js hook&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;resultSet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCubeQuery&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
  &lt;span class="na"&gt;measures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.geometry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To make map rendering faster, with this query we're grouping users by their locations.&lt;/p&gt;

&lt;p&gt;Then, we transform query results to GeoJSON format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FeatureCollection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;features&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultSet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resultSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tablePivot&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;features&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Feature&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.geometry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After that, we feed this data to Mapbox. With &lt;code&gt;react-map-gl&lt;/code&gt;, we can do it this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MapGL&lt;/span&gt;
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'100%'&lt;/span&gt;
      &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'100%'&lt;/span&gt;
      &lt;span class="na"&gt;mapboxApiAccessToken&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MAPBOX_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Source&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'geojson'&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layer&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...{&lt;/span&gt;
          &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heatmap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heatmap-intensity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;intensity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heatmap-radius&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heatmap-weight&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;interpolate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;linear&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heatmap-opacity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MapGL&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that here we use Mapbox data-driven styling: we defined the &lt;code&gt;heatmap-weight&lt;/code&gt; property as an expression and it depends on the "properties.value":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heatmap-weight&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;interpolate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;linear&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can find more information about expressions in &lt;a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/expressions/"&gt;Mapbox docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's the heatmap we've built:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5NAI_ll8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2xn9h0hf5vnppl393v8a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5NAI_ll8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2xn9h0hf5vnppl393v8a.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-links" class="anchor"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.mapbox.com/help/tutorials/make-a-heatmap-with-mapbox-gl-js/"&gt;Heatmap layer example at Mapbox documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/#heatmap"&gt;Heatmap layers params descriptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mapbox.com/introducing-heatmaps-in-mapbox-gl-js-71355ada9e6c"&gt;Some theory about heatmap layers settings, palettes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#dynamic-points-visualization" class="anchor"&gt;
  &lt;/a&gt;
  Dynamic Points Visualization &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;The next question was: is there any correlation between Stack Overflow users' locations and their ratings? 2️⃣&lt;/p&gt;

&lt;p&gt;Spoiler alert: no, there isn't 😜. But it's a good question to understand how dynamic data loading works and to dive deep into Cube.js filters.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#data-schema" class="anchor"&gt;
  &lt;/a&gt;
  Data Schema
&lt;/h1&gt;

&lt;p&gt;We need to tweak the &lt;code&gt;schema/User.js&lt;/code&gt; data schema to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SELECT * FROM public.Users WHERE geometry is not null&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;measures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reputation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reputation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;min&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reputation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;geometry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#web-component" class="anchor"&gt;
  &lt;/a&gt;
  Web Component
&lt;/h2&gt;

&lt;p&gt;Also, we'll need the &lt;code&gt;dashboard-app/src/components/Points.js&lt;/code&gt; component with the following &lt;a href="https://github.com/cube-js/cube.js/blob/master/examples/mapbox/dashboard-app/src/components/Points.js"&gt;source code&lt;/a&gt;. Let's break down its contents!&lt;/p&gt;

&lt;p&gt;First, we needed to query the API to find out an initial range of users reputations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;resultSet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCubeQuery&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;measures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.min&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setInitMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tablePivot&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="nx"&gt;setInitMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tablePivot&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.min&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="nx"&gt;setMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tablePivot&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="nx"&gt;setMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tablePivot&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, we create a &lt;code&gt;Slider&lt;/code&gt; component from &lt;a href="https://ant.design"&gt;Ant Design&lt;/a&gt;, a great open source UI toolkit.  On every chnage to this Slider's value, the front-end will make a request to the database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;resultSet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCubeQuery&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;measures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.geometry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;member&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Users.value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;member&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Users.value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To make maps rendering faster, with this query we're grouping users by their locations and showing only the user with the maximum rating.&lt;/p&gt;

&lt;p&gt;Then, like in the previous example, we transform query results to GeoJSON format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FeatureCollection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;features&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tablePivot&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;features&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Feature&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.geometry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Please note that we've also applied a data-driven styling at the layer properties, and now points' radius depends on the rating value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;circle-radius&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;stops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
    &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2000000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When the data volume is moderate, it's also possible to use only &lt;a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/other/#other-filter"&gt;Mapbox filters&lt;/a&gt; and still achieve desired performance. We can load data with Cube.js once and then filter rendered data with these layer settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; 
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's the visualization we've built:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8GMxDWXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rapoofpwz8mb8owt4q5f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8GMxDWXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rapoofpwz8mb8owt4q5f.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#points-and-events-visualization" class="anchor"&gt;
  &lt;/a&gt;
  Points and Events Visualization &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Here we wanted to show the distribution of answers and questions by countries, so we rendered most viewable Stack Overflow questions and most rated answers. 3️⃣&lt;/p&gt;

&lt;p&gt;When a point is clicked, we render a popup with information about a question.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-schema" class="anchor"&gt;
  &lt;/a&gt;
  Data Schema
&lt;/h2&gt;

&lt;p&gt;Due to the dataset structure, we don't have the user geometry info in the &lt;code&gt;Questions&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;That's why we need to use &lt;a href="https://cube.dev/docs/joins?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide"&gt;joins&lt;/a&gt; in our data schema. It's a &lt;a href="https://cube.dev/docs/joins?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide#parameters-relationship"&gt;one-to-many relationship&lt;/a&gt; which means that one user can leave many questions.&lt;/p&gt;

&lt;p&gt;We need to add the following code to the &lt;code&gt;schema/Questions.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;CUBE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.owner_user_id = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.id`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`belongsTo`&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#web-component" class="anchor"&gt;
  &lt;/a&gt;
  Web Component
&lt;/h2&gt;

&lt;p&gt;Then, we need to have the &lt;code&gt;dashboard-app/src/components/ClickEvents.js&lt;/code&gt; component to contain the following &lt;a href="https://github.com/cube-js/cube.js/blob/master/examples/mapbox/dashboard-app/src/components/ClickEvent.js"&gt;source code&lt;/a&gt;. Here are the most important highlights!&lt;/p&gt;

&lt;p&gt;The query to get questions data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;measures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Questions.count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.geometry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we use some pretty straightforward code to transform the data into geoJSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FeatureCollection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;features&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;resultSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tablePivot&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;features&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Feature&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Questions.count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.geometry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.geometry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The next step is to catch the click event and load the point data. The following code is specific to the &lt;code&gt;react-map-gl&lt;/code&gt; wrapper, but the logic is just to listen to map clicks and filter by layer id:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selectedPoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelectedPoint&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;resultSet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;popupSet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCubeQuery&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.geometry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Questions.title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Questions.views&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Questions.tags&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;member&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Users.geometry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contains&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;selectedPoint&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;selectedPoint&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClickMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setSelectedPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;features&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;feature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;questions-point&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setSelectedPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When we catch a click event on some point, we request questions data filtered by point location and update the popup.&lt;/p&gt;

&lt;p&gt;So, here's our glorious result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R7JaKKRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/he86hvhhhy0x3nptn7bn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R7JaKKRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/he86hvhhhy0x3nptn7bn.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#choropleth-visualization" class="anchor"&gt;
  &lt;/a&gt;
  Choropleth Visualization &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Finally, choropleth. This type of map chart is suitable for regional statistics, so we're going to use it to visualize total and average users’ rankings by country. 4️⃣&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-schema" class="anchor"&gt;
  &lt;/a&gt;
  Data Schema
&lt;/h2&gt;

&lt;p&gt;To accomplish this, we'll need to complicate our schema a bit with a few &lt;a href="https://cube.dev/docs/joins?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide#transitive-joins"&gt;transitive joins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, let's update the &lt;code&gt;schema/Users.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt; &lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SELECT * FROM public.Users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Mapbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;${CUBE}.country = ${Mapbox}.geounit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;belongsTo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;measures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reputation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reputation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The next file is &lt;code&gt;schema/Mapbox.js&lt;/code&gt;, it contains country codes and names:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Mapbox`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`SELECT * FROM public.Mapbox`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;MapboxCoords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;CUBE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.iso_a3 = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;MapboxCoords&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.iso_a3`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`belongsTo`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name_long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;geometry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then comes &lt;code&gt;schema/MapboxCoords.js&lt;/code&gt; which, obviously, hold polygon coordinates for map rendering:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`MapboxCoords`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`SELECT * FROM public.MapboxCoords`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`coordinates`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;shown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Please note that we have a join in &lt;code&gt;schema/Mapbox.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;MapboxCoords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;CUBE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.iso_a3 = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;MapboxCoords&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.iso_a3`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`belongsTo`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And another one in &lt;code&gt;schema/User.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Mapbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;CUBE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.country = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Mapbox&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.geounit`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`belongsTo`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the Stack Overflow dataset, our most suitable column in the &lt;code&gt;Mapbox&lt;/code&gt; table is &lt;code&gt;geounit&lt;/code&gt;, but in other cases, postal codes, or &lt;code&gt;iso_a3&lt;/code&gt;/&lt;code&gt;iso_a2&lt;/code&gt; could work better.&lt;/p&gt;

&lt;p&gt;That's all in regard to the data schema. You don't need to join the &lt;code&gt;Users&lt;/code&gt; cube with the &lt;code&gt;MapboxCoords&lt;/code&gt; cube directly. Cube.js will make all the joins for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-component" class="anchor"&gt;
  &lt;/a&gt;
  Web Component
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/cube-js/cube.js/blob/master/examples/mapbox/dashboard-app/src/components/Choropleth.js"&gt;source code&lt;/a&gt; is contained in the &lt;code&gt;dashboard-app/src/components/Choropleth.js&lt;/code&gt; component. Breaking it down for the last time:&lt;/p&gt;

&lt;p&gt;The query is quite simple: we have a measure that calculates the sum of users’ rankings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;resultSet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCubeQuery&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;measures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;`Users.total`&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.country&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MapboxCoords.coordinates&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we need to transform the result to geoJSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultSet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resultSet&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tablePivot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MapboxCoords.coordinates&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;features&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Feature&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users.country&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`Users.total`&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Polygon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MapboxCoords.coordinates&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After that we define a few data-driven styles to render the choropleth layer with a chosen color palette:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;stops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`rgba(255,100,146,0.1)`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`rgba(255,100,146,0.4)`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`rgba(255,100,146,0.8)`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`rgba(255,100,146,1)`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And that's basically it!&lt;/p&gt;

&lt;p&gt;Here's what we're going to behold once we're done:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2dfBoeUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5hkw9lt5y0odxm06qx1j.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2dfBoeUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5hkw9lt5y0odxm06qx1j.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks beautiful, right?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-glorious-end" class="anchor"&gt;
  &lt;/a&gt;
  The glorious end
&lt;/h1&gt;

&lt;p&gt;So, here our attempt to build a map data visualization comes to its end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Agq-Mivn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qq3wgvxx5ewwgtgydm1h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Agq-Mivn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qq3wgvxx5ewwgtgydm1h.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We hope that you liked this guide. If you have any feedback or questions, feel free to join Cube.js community on &lt;a href="http://slack.cube.dev?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide"&gt;Slack&lt;/a&gt; — we'll be happy to assist you.&lt;/p&gt;

&lt;p&gt;Also, if you liked the way the data was queries via Cube.js API — visit &lt;a href="https://cube.dev?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=mapbox-guide"&gt;Cube.js website&lt;/a&gt; and give it a shot.  Cheers! 🎉&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>mapbox</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Using SVGs in Vuejs made simple</title>
      <author>Jacqueline Binya</author>
      <pubDate>Fri, 29 Jan 2021 16:25:39 +0000</pubDate>
      <link>https://dev.to/jacqueline/using-svgs-in-vuejs-made-simple-2e1a</link>
      <guid>https://dev.to/jacqueline/using-svgs-in-vuejs-made-simple-2e1a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#images-of-the-web" class="anchor"&gt;
  &lt;/a&gt;
  Images of the web
&lt;/h2&gt;

&lt;p&gt;The most commonly used image formats in the web include bitmap, svg and webp.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bitmap" class="anchor"&gt;
  &lt;/a&gt;
  Bitmap
&lt;/h3&gt;

&lt;p&gt;Bitmap images are made up from tiny dots called pixels. Each pixel is actually a square which is assigned a specific color and is arranged in a pattern to form the image. When you zoom in on a bitmap you can actually see each pixel. Image formats like JPEG, PNG and GIF are all bitmap. Bitmap format is suited for highly detailed images like photographs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webp" class="anchor"&gt;
  &lt;/a&gt;
  Webp
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/speed/webp"&gt;Webp&lt;/a&gt; is a highly perfomant image format create by Google it was created to replace bitmap.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svg" class="anchor"&gt;
  &lt;/a&gt;
  SVG
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TyIb1KKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611902092/svg-pic_qexrsj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TyIb1KKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611902092/svg-pic_qexrsj.png" alt="SVG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scalable Vector Graphics (svg) is a vector image format are created from mathematical formula they don't come bundled with information about how they should be painted that can be computed in the rendering device. SVGs are lighter than bitmap and they are used to create sharp images which scale e.g icons, illustrations etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-syntax-of-svg" class="anchor"&gt;
  &lt;/a&gt;
  The syntax of SVG
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;SVG are defined in XML: a markup language.&lt;/li&gt;
&lt;li&gt;The diagram below shows an example of a SVG in raw code:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MqJnoKzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1610570036/svg-sample_k7bupk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MqJnoKzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1610570036/svg-sample_k7bupk.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lets analyse the definition:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;💡SVG usually consists of a variety of elements e.g. &amp;lt;path&amp;gt;, &amp;lt;/style&amp;gt;,&amp;lt;circle&amp;gt; etc. nested inside an svg element. The inner elements enclosed inside the svg tags are used to describe specific properties of the SVG whereas the outer svg element which is normally referred to as the root element basically instantiate and terminate an instance of SVG.The root element may contain attributes like viewBox,  class, id, fill, height, width and xmlns. The id and class attributes are usually used to extend functionality in Javascript or to style the svg element. The id attribute may also be used in XML specific configurations like the setting up of links. The xmlns attribute is a XML namespace, it is used by the browser to determine how to render the SVG.&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-svgs-in-vuejs" class="anchor"&gt;
  &lt;/a&gt;
  Using SVGs in Vuejs
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Generally SVGs can can be incorporated in an HTML document:

&lt;ul&gt;
&lt;li&gt;inline or,&lt;/li&gt;
&lt;li&gt;as external standalone files.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The above listed methods can be used in Vuejs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But before we explore how we can incorporate SVG in a Vuejs web app. First let us create a simple Vuejs application we will use to demonstrate how to embed SVG in Vuejs.&lt;/p&gt;

&lt;p&gt;We will be using Vue CLI to bootstrap our project.&lt;/p&gt;

&lt;p&gt;Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cli.vuejs.org/"&gt;Vue CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a Vuejs project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On your terminal type:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue create &amp;lt;project-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Replace &lt;code&gt;&amp;lt;project-name&amp;gt;&lt;/code&gt; with a unique name for your project. My project is name &lt;code&gt;svg-tutorial&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You will then be prompted to pick a preset for your app, just press Enter to choose the default preset which at the time of publishing this article is: &lt;code&gt;Default ([Vue 2] babel, eslint)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then wait as Vue CLI creates a Vuejs project for you.&lt;/li&gt;
&lt;li&gt;When you project is successfully created🎉, you will get the message below in your terminal:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0SGI-3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611909294/sucesssful-vuejs-install_ddlvl7.png" alt="Successful vuejs project created"&gt;
The message contains handy commands to get you started!&lt;/li&gt;
&lt;li&gt;Let's take a look at our project's file structure paying special attention to the &lt;code&gt;src&lt;/code&gt; folder since most of our work pertaining to SVG will be restricted to that folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
.
├── babel.config.js
├── node_modules
├── package.json
├── package-lock.json
├── public
├── README.md
└── src
    ├── App.vue
    ├── assets
    │   └── logo.png
    ├── components
    │   └── HelloWorld.vue
    └── main.js
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;I have created a sample SVG to use in the interactive examples provided.. You may go ahead and download it by clicking this
&lt;a href="https://raw.githubusercontent.com/JackieBinya/svg-resource-blog/main/sample.svg" class="article-link"&gt;link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may choose to rename the file, then proceed to add it to the root of the &lt;code&gt;src/assets&lt;/code&gt; folder, such that the structure of the &lt;code&gt;src&lt;/code&gt; folder is similar to the one below:&lt;/p&gt;

&lt;pre&gt;
.
├── App.vue
├── assets
│   ├── logo.png
│   └── sample.svg
├── components
│   └── HelloWorld.vue
└── main.js
&lt;/pre&gt;

&lt;h4&gt;
  &lt;a href="#inline-svg" class="anchor"&gt;
  &lt;/a&gt;
  Inline SVG
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kcxXkeiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611922129/inline-svg_jlerxx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kcxXkeiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611922129/inline-svg_jlerxx.png" alt="Inline SVG in Vuejs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using this method you include the &lt;code&gt;svg&lt;/code&gt; directly in your markup. It's important to mention that when the &lt;code&gt;svg&lt;/code&gt; is directly embedded in the document or template as in the case of Vuejs ,there is no need to include the &lt;code&gt;xlmns&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;The pros of using this method are that you can use CSS to style your &lt;code&gt;svg&lt;/code&gt; and use Javascript to extend its functionality just as you would a normal HTML element.&lt;/p&gt;

&lt;p&gt;The main drawback of this method is that if your &lt;code&gt;svg&lt;/code&gt; is large or when you have a lot of &lt;code&gt;svg&lt;/code&gt; your template, your template becomes cluttered. In that case it would be better incorporate SVGs as standalone files as it is explained in the next section.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#external-svg" class="anchor"&gt;
  &lt;/a&gt;
  External SVG
&lt;/h4&gt;

&lt;p&gt;To embed an external SVG in your Vuejs template you use the methods listed below and always ensure that the &lt;code&gt;xlmns&lt;/code&gt; attribute is included in the root element of the SVG otherwise none of the methods provided will work!&lt;/p&gt;

&lt;p&gt;(i) Embedding an external svg as an image element in a Vuejs template:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AQR4giFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611904084/svg-img-implementantion_bhxx8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AQR4giFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611904084/svg-img-implementantion_bhxx8s.png" alt="Embedding an external svg as an image element in a Vuejs template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Replace the &lt;code&gt;&amp;lt;file-name&amp;gt;&lt;/code&gt; with the unique name you gave to the svg resource you downloaded above.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using this method limits how you can manipulate the &lt;code&gt;svg&lt;/code&gt; as it really doesn't exist in the document but it is encapsulated in the &lt;a href="" class="article-body-image-wrapper"&gt;&lt;img&gt;&lt;/a&gt; element. So at most you can only manipulate it as you would a normal image.&lt;/p&gt;

&lt;p&gt;The cons of this method include limitations in styling and in extending the functionality of SVGs and in addition to that if you are dealing with a lot of SVGs in your template it becomes rather cumbersome to keep wrapping them in image elements.&lt;/p&gt;

&lt;p&gt;(ii) Using &lt;code&gt;SVG Loaders&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Vuejs uses Webpack as an asset bundler. Webpack uses a loader for each file type it handles. The loaders for the common file types usually come pre-configured whenever you use Vue CLI to bootstrap your project. What that means is that when you import those file types they can be automatically read. But unfortunately &lt;code&gt;.svg&lt;/code&gt; loaders do not come pre-configured so you have to download them from &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; then configure them manually.&lt;/p&gt;

&lt;p&gt;There are many modules available on npm which are svg vuejs loaders. In this example we will be using the &lt;a href="https://www.npmjs.com/package/vue-svg-loader"&gt;vue-svg-loader&lt;/a&gt;. The set up instructions are listed in the link provided, for those who have never installed and configured a module in Vuejs follow the instructions below:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The instructions below are only suited for a project bootstrapped with Vue CLI.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To install the module type the command below in your terminal:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -D vue-svg-loader vue-template-compiler
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In the root of you project directory, create a &lt;code&gt;vue.config.js&lt;/code&gt; file and copy and paste the code below:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  chainWebpack: (config) =&amp;gt; {
    const svgRule = config.module.rule('svg');

    svgRule.uses.clear();

    svgRule
      .use('babel-loader')e
      .loader('babel-loader')
      .end()
      .use('vue-svg-loader')
      .loader('vue-svg-loader');
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ensure that you save your changes.&lt;/p&gt;

&lt;p&gt;Congrats!!!🎊 &lt;/p&gt;

&lt;p&gt;You have successfully installed and configured the settings of the &lt;code&gt;vue-svg-loader&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;Now, let's proceed to learn how we can use the &lt;code&gt;vue-svg-loader&lt;/code&gt; module to embed SVG in Vuejs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMbqC0Ar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611925461/using-svg-loader_ximunw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMbqC0Ar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611925461/using-svg-loader_ximunw.png" alt="using SVG loaders to embed svg in Vuejs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You first remove all the boilerplate code from the &lt;code&gt;App.vue&lt;/code&gt; file in the &lt;code&gt;src&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Then you copy and paste the code  in diagram above in &lt;code&gt;App.vue&lt;/code&gt;, and save your changes.&lt;/li&gt;
&lt;li&gt;The SGV, I used exists as a standalone file in the assets folder as is named &lt;code&gt;sample.svg&lt;/code&gt;, so depending on what you named your .svg file you may need to tweak the code above.&lt;/li&gt;
&lt;li&gt;Run the command below on your terminal, and then on your browser visit &lt;code&gt;http://localhost:8080/&lt;/code&gt; to view the Vuejs app with the embedded SVG 🚀.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run serve
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The pros of using this method are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your template is kept clean,&lt;/li&gt;
&lt;li&gt;And there are no limitations on how you can style or extend the functionality of your svg.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/hA7ESX7FsE4" class="article-link"&gt;What are Scalable Vector Graphics (SVG) &amp;amp; how are they special? | Web Demystified Episode 4&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>newbie</category>
      <category>vue</category>
      <category>svg</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Implementing React Routes (Part 1-- simple routes)</title>
      <author>Erickeyz</author>
      <pubDate>Fri, 29 Jan 2021 16:19:15 +0000</pubDate>
      <link>https://dev.to/yunweneric/implementing-react-routes-part-1-simple-routes-118g</link>
      <guid>https://dev.to/yunweneric/implementing-react-routes-part-1-simple-routes-118g</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-route" class="anchor"&gt;
  &lt;/a&gt;
  What is a route?
&lt;/h2&gt;

&lt;p&gt;A route is simply a specific path. Just like going home after a class, you might decide to use a specific path to get home. Similarly routes takes us to our target destination.&lt;/p&gt;

&lt;p&gt;In react, we might have several components we want to display at a specific time or action by a user to display a different interface or view. In this case, routes play an important role.&lt;/p&gt;

&lt;p&gt;In this post, we are going to create a simple react app with 3 components (home, about, contact), then use simple routes to navigate to these separate components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-creating-react-app" class="anchor"&gt;
  &lt;/a&gt;
  1. Creating react app:
&lt;/h3&gt;

&lt;p&gt;We are going to use the npx.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app my-app
cd my-app
npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#app-structure" class="anchor"&gt;
  &lt;/a&gt;
  App Structure
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BmSDiUvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2rkdzy1g1760wwioccl4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmSDiUvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2rkdzy1g1760wwioccl4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-creating-the-various-components" class="anchor"&gt;
  &lt;/a&gt;
  2. Creating the various components:
&lt;/h3&gt;

&lt;p&gt;Now I will create a directory called 'components' in the src folder and place all my components in them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;About.js&lt;/li&gt;
&lt;li&gt;Home.js&lt;/li&gt;
&lt;li&gt;Contact.js&lt;/li&gt;
&lt;li&gt;Navbar.js&lt;/li&gt;
&lt;li&gt;Footer.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we are not passing some data for now, we will use stateless(functional) components.&lt;/p&gt;

&lt;p&gt;The sample navbar.js file looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import '../App.css';

let Nav =()=&amp;gt;{
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;nav&amp;gt;
            &amp;lt;div className ='logo'&amp;gt;
                &amp;lt;p&amp;gt;Logo&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;ul&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=""&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=""&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=""&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;/nav&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}

export default Nav
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3install-reactrouterdom" class="anchor"&gt;
  &lt;/a&gt;
  3.Install react-router-dom:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-router-dom
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-import-all-of-the-components-you-created-in-the-appjs-file" class="anchor"&gt;
  &lt;/a&gt;
  4. Import all of the components you created in the App.js file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "./App.css";
import Nav from "./components/nav";
import Footer from "./components/footer";
import About from "./components/about"
import Home from "./components/home"
import Contact from "./components/contact"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-add-your-nav-and-footer-components-in-the-jsx" class="anchor"&gt;
  &lt;/a&gt;
  5. Add your Nav and Footer components in the jsx
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
  return (
      &amp;lt;div className="App"&amp;gt;
        &amp;lt;Nav /&amp;gt;
        &amp;lt;Footer /&amp;gt;
      &amp;lt;/div&amp;gt;

  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-in-the-nav-component-import-navlink-from-the-react-router-module-and-replace-your-anchor-tags-with-the-navlink-tag-the-to-attribute-should-point-to-the-route-you-are-need-eg" class="anchor"&gt;
  &lt;/a&gt;
  6. In the Nav component, import NavLink from the react router module and replace your anchor tags with the NavLink tag. The to Attribute should point to the route you are need. Eg:
&lt;/h3&gt;

&lt;p&gt;'/' and '/home' for Home component&lt;br&gt;
'/about' for About component,&lt;br&gt;
'/contact' for Contact component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {NavLink} from 'react-router-dom';
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;nav&amp;gt;
    &amp;lt;div className ='logo'&amp;gt;
        &amp;lt;p&amp;gt;Logo&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;NavLink to = '/home'&amp;gt;Home&amp;lt;/NavLink&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;NavLink to = '/about'&amp;gt;About&amp;lt;/NavLink&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;NavLink to = '/contact'&amp;gt;Contact&amp;lt;/NavLink&amp;gt;&amp;lt;/li&amp;gt;
         &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-import-the-browserrouter-and-route-from-the-reactrouterdom-in-appjs" class="anchor"&gt;
  &lt;/a&gt;
  7. Import the BrowserRouter and Route from the react-router-dom in App.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserRouter, Route } from "react-router-dom";
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-wrap-the-returning-div-in-the-appjs-component-in-the-browserrouter-tag-then-use-to-the-route-tag-to-specify-each-tag" class="anchor"&gt;
  &lt;/a&gt;
  6. Wrap the returning div in the App.js component in the BrowserRouter tag. Then use to the Route tag to specify each tag.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
  return (
    &amp;lt;BrowserRouter&amp;gt;
      &amp;lt;div className="App"&amp;gt;
        &amp;lt;Nav /&amp;gt;
        &amp;lt;Route exact path = '/' component = {Home}&amp;gt;&amp;lt;/Route&amp;gt;
        &amp;lt;Route  path = '/home' component = {Home}&amp;gt;&amp;lt;/Route&amp;gt;
        &amp;lt;Route  path = '/about' component = {About}&amp;gt;&amp;lt;/Route&amp;gt;
        &amp;lt;Route  path = '/contact' component = {Contact}&amp;gt;&amp;lt;/Route&amp;gt;
        &amp;lt;Footer /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/BrowserRouter&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-save-and-refresh-then-run-the-script" class="anchor"&gt;
  &lt;/a&gt;
  7. Save and refresh then run the script.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should have this display.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bc7HoFRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j1pu6ptr5b4hglw1s2es.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bc7HoFRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j1pu6ptr5b4hglw1s2es.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the link to the github repo. It contains all codes and the css file as well.Please do well to leave your comments and taughts. Thanks&lt;br&gt;
&lt;a href="https://github.com/yunweneric/React-routes"&gt;Github repo&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#next-implementing-react-routespart-2-why-use-navlinks-and-not-link-tags" class="anchor"&gt;
  &lt;/a&gt;
  Next: Implementing React Routes(Part 2- Why Use NavLinks and Not Link tags)
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Lambda expressions in python</title>
      <author>Aswin Barath</author>
      <pubDate>Fri, 29 Jan 2021 16:11:54 +0000</pubDate>
      <link>https://dev.to/aswin2001barath/lambda-expressions-in-python-5ffg</link>
      <guid>https://dev.to/aswin2001barath/lambda-expressions-in-python-5ffg</guid>
      <description>&lt;p&gt;Lambda expressions in python are one-time anonymous functions which we don't need more than once.&lt;/p&gt;

&lt;p&gt;Consider the following example where we use a function to multiply a list of numbers with the mathematical constant pi:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V5vmAUB8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cddv78unsuwiwfbw890y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5vmAUB8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cddv78unsuwiwfbw890y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[3.14, 6.28, 9.42]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What if I say that we could do all of this in one line.&lt;br&gt;
Well, it turns out we can do it.&lt;br&gt;
We can convert the above example into a single line of code using &lt;em&gt;Lambda expressions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HRxXwJka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1mwdlksnzbkrm75fpxoi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HRxXwJka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1mwdlksnzbkrm75fpxoi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[3.14, 6.28, 9.42]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lambda-function" class="anchor"&gt;
  &lt;/a&gt;
  Lambda function
&lt;/h2&gt;

&lt;p&gt;Syntax: &lt;code&gt;lambda arguments : expression&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A lambda function can take any number of arguments, but can only have one expression:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AksZs0Bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tbrruohlgfjdrb3nwu7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AksZs0Bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tbrruohlgfjdrb3nwu7h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;94
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-do-we-need-to-use-lambda-functions" class="anchor"&gt;
  &lt;/a&gt;
  Why do we need to use Lambda functions?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Well, it contributes to the code by reducing the number of lines of functions which we may use only once.&lt;/li&gt;
&lt;li&gt;To take it to the next level, we can return an anonymous function inside another example:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--24wXFN6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i43fua0ehhc72hc5evlp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--24wXFN6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i43fua0ehhc72hc5evlp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;62.800000000000004
119.32000000000001
31.400000000000002
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, we got to use the same function to calculate different values.&lt;br&gt;
You get to create a function definition that takes one argument, and that argument will be multiplied with an unknown number (which you can specify in the future).&lt;/p&gt;

&lt;p&gt;That's the power of lambda expressions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-along-and-learn-more" class="anchor"&gt;
  &lt;/a&gt;
  Code along and learn more...
&lt;/h3&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to use the fileReader to show a file with Javascript</title>
      <author>Moulun Kevin</author>
      <pubDate>Fri, 29 Jan 2021 16:04:05 +0000</pubDate>
      <link>https://dev.to/atndesign/how-to-use-the-filereader-to-show-a-file-with-javascript-3i85</link>
      <guid>https://dev.to/atndesign/how-to-use-the-filereader-to-show-a-file-with-javascript-3i85</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-the-filereader-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;🤔 What is the fileReader ?&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;"The FileReader object lets web applications &lt;strong&gt;asynchronously&lt;/strong&gt; read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read." - MDN web Docs&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-how-does-it-work-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;🤔 So how does it work ?&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The user use an upload type input to transfer the data, when we upload it we'll use a addEventListener onChange like this:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-real-exemple" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;💻 A real exemple&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Here I'm making a poll app, and before sending the datas into the db, I'm letting the user see the result, I'm using react but this does not really matter, you can do it with vanilla Javascript&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-side" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;HTML side&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Here I'm creating a html input element with the type file, I'm using onChange because I'm using react, I'd rather recommend you to add an event listener for the input if you're using something else than react&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-way" class="anchor"&gt;
  &lt;/a&gt;
  React way
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; 
&lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form__cover"&lt;/span&gt; 
&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; 
&lt;span class="na"&gt;onChange=&lt;/span&gt;&lt;span class="s"&gt;{(e)&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; handleFiles(e, 0)}&amp;gt;&lt;span class="nt"&gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vanilla-way" class="anchor"&gt;
  &lt;/a&gt;
  Vanilla way
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; 
&lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form__cover"&lt;/span&gt; 
&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And then into the Javascript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myElement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="c1"&gt;//Do something in it&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-filereader" class="anchor"&gt;
  &lt;/a&gt;
  The fileReader
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleFiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So in the code above we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First declare the variable reader equals to a new Filreader Object / Instance&lt;/li&gt;
&lt;li&gt;Then with define the file equals to the e (event) target (the element targeted) and then the files[0] because we can have an input with multiple files
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readAsDataURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We then here first read the data as Data URL, so the data can be read by the browser as a blob, then we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add an event listener for reader wich listen to the load event and then pass a callback function wich will console log the URL of the file&lt;/li&gt;
&lt;li&gt;Add a error handling with the on error wich is an event listener for error, we then pass a callback function as well and console.log the error returned by the reader &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Using this is really interesting since we can for exemple display a profile picture selected by the user before sending it to the DB, wich allow the user to have a better feedback and not wait until the page has been reload or the server sent back the data&lt;/p&gt;

&lt;p&gt;Thank you for reading this article 🙏, I hope this was helpful for you&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>filereader</category>
      <category>files</category>
    </item>
    <item>
      <title>Errors Are Not Exceptions</title>
      <author>swyx</author>
      <pubDate>Fri, 29 Jan 2021 15:18:16 +0000</pubDate>
      <link>https://dev.to/swyx/errors-are-not-exceptional-1g0b</link>
      <guid>https://dev.to/swyx/errors-are-not-exceptional-1g0b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Errors are unrecoverable, Exceptions are routine. &lt;/li&gt;
&lt;li&gt;Some languages (JavaScript, Python) treat them as synonyms. Others (Java, PHP) build the distinction into the language. Yet others (Go) get it the other way round.&lt;/li&gt;
&lt;li&gt;No matter what way you name things, you should handle Errors and Exceptions separately in your code or bad things happen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because I started out in JS/Python and then went to Go, without touching Java, getting this distinction right took me a few hours of thinking and research. It's not self-evident!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context" class="anchor"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;If you've ever &lt;code&gt;throw&lt;/code&gt;n an error in a function &lt;em&gt;expecting&lt;/em&gt; its invoker to &lt;code&gt;catch&lt;/code&gt; it, &lt;strong&gt;you're doing it wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ok, I'll admit I'm just hamming up a mere opinion for a more eye-catching opening. But I do feel strongly about this so...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was recently reminded of this while going through the Go FAQ and being reminded that &lt;a href="https://golang.org/doc/faq#exceptions"&gt;Go does not have exceptions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What?&lt;/em&gt; If you've always coded in a language that has exceptions, this ought to jump out at you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go does not have &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt;.&lt;/strong&gt; Despite those language constructs existing for decades, Go chose to have &lt;a href="https://blog.golang.org/defer-panic-and-recover"&gt;Defer, Panic, and Recover&lt;/a&gt; instead. By convention and design, Go encodes an extremely strong opinion that &lt;strong&gt;errors should be returned, not thrown&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-why" class="anchor"&gt;
  &lt;/a&gt;
  But Why
&lt;/h2&gt;

&lt;p&gt;Relying on &lt;em&gt;exception&lt;/em&gt; handling to handle &lt;em&gt;errors&lt;/em&gt; either leads to convoluted code or unhandled errors.&lt;/p&gt;

&lt;p&gt;This kind of code is common in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;trySomethingRisky&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;invalid string!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;trySomethingRisky&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;enter valid name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// handle exceptions&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// handle errors&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you're thinking that you don't write this sort of code very often, you're probably not thinking through your failure modes enough. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript doesn't have a native way to indicate whether a function can throw, if you invoke it. So &lt;strong&gt;you cannot lint against it&lt;/strong&gt; — you must either pay this cost earlier in manual code review or later in bug reports.&lt;/li&gt;
&lt;li&gt;An innocent &lt;code&gt;fs.readFileSync&lt;/code&gt; call can bring down a whole server (&lt;a href="https://github.com/mcollina/make-promises-safe"&gt;or memory-leak descriptors&lt;/a&gt;) given the wrong string.&lt;/li&gt;
&lt;li&gt;Promise calls without a &lt;code&gt;catch&lt;/code&gt; in the browser will simply log silent errors (a terrible user experience).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The more function and module boundaries you cross, the more you need to think about defensively adding &lt;code&gt;try&lt;/code&gt;/ &lt;code&gt;catch&lt;/code&gt; and handling the gamut of errors that can happen, and the harder it is to trace where errors begin and where they are handled. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aside - some authors like &lt;a href="https://www.reddit.com/r/golang/comments/9t7con/why_no_trycatch_in_golang_whats_the_theory_behind/e8ust3m/"&gt;this Redditor&lt;/a&gt; and &lt;a href="https://mattwarren.org/2016/12/20/Why-Exceptions-should-be-Exceptional/"&gt;Matt Warren&lt;/a&gt; make a performance driven argument for encouraging developers to not overuse exceptions. Exceptions involve a memory and compute intensive stack search. This matters at scale, but most of us will never run into this so I choose not to make a big deal out of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#errors-vs-exceptions" class="anchor"&gt;
  &lt;/a&gt;
  Errors vs Exceptions
&lt;/h2&gt;

&lt;p&gt;Let's attempt a definition:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Exceptions are expected failures&lt;/strong&gt;, which we should recover from.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Errors are unexpected failures&lt;/strong&gt;. By definition, we cannot recover elegantly from &lt;em&gt;unexpected&lt;/em&gt; failures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might notice the ironic inversion - it is &lt;em&gt;errors&lt;/em&gt; that are "exceptional", while &lt;em&gt;exceptions&lt;/em&gt; are routine. This was very confusing to your humble author.&lt;/p&gt;

&lt;p&gt;This is no doubt due to the fact that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#exception_handling_statements"&gt;JavaScript&lt;/a&gt;, &lt;a href="https://docs.python.org/3/tutorial/errors.html"&gt;Python&lt;/a&gt;, and other languages treat errors and exceptions as synonyms. So we throw &lt;code&gt;Error&lt;/code&gt;s when we really mean to throw exceptions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.guru99.com/error-handling-and-exceptions.html"&gt;PHP&lt;/a&gt; and &lt;a href="https://stackoverflow.com/questions/5813614/what-is-difference-between-errors-and-exceptions"&gt;Java&lt;/a&gt; seem to have this difference baked into the language. &lt;/p&gt;

&lt;p&gt;To make things extra confusing, Go uses &lt;code&gt;error&lt;/code&gt; where other languages would call exceptions, and relies on &lt;code&gt;panic&lt;/code&gt; to "throw" what other languages would call errors. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notes: Chris Krycho observes that you can use Rust, F#, and Elm's &lt;code&gt;Result&lt;/code&gt; in a similar way, and Haskell's &lt;code&gt;Either&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#exception-handling-vs-error-checking" class="anchor"&gt;
  &lt;/a&gt;
  Exception Handling vs Error Checking
&lt;/h2&gt;

&lt;p&gt;The realization that we need different paradigms for handling errors and exceptions is of course not new. &lt;a href="https://en.wikipedia.org/wiki/Exception_handling#Criticism"&gt;Wikipedia's entry on Exception Handling&lt;/a&gt; quotes Tony Hoare (&lt;a href="https://en.wikipedia.org/wiki/Tony_Hoare"&gt;creator of QuickSort, CSP and the null reference&lt;/a&gt;) saying that exception handling is "&lt;strong&gt;dangerous. Do not allow this language in its present state to be used in applications where reliability is critical.&lt;/strong&gt;"&lt;/p&gt;

&lt;p&gt;That was said in 1980, yet here we are 40 years later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-checking-in-go" class="anchor"&gt;
  &lt;/a&gt;
  Error Checking in Go
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Go seems to have a strong opinion that "Errors" are routine and Errors are Exceptional - in direct opposition to other languages. I have opted to use Go-native terminology - minimizing confusion locally at the cost of increasing global confusion.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://blog.golang.org/errors-are-values"&gt;Errors are values&lt;/a&gt; in Go — made to be passed, not thrown. Go's FAQ is worth quoting here:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We believe that coupling exceptions to a control structure, as in the try-catch-finally idiom, results in convoluted code. It also tends to encourage programmers to label too many ordinary errors, such as failing to open a file, as exceptional.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When something goes wrong, your default choice should be using multi-value returns to report errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"42"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"couldn't convert number: %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Converted integer:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This pattern would be subject to the same weaknesses I outlined above, except for the fact that Go will refuse to compile if you 1) don't assign all returned values at the callsite or 2) don't use values that you assign. These two rules combined guide you to handle all errors explicitly near their origin.&lt;/p&gt;

&lt;p&gt;Exceptions still have a place — but the language reminds you how rarely you should use it, by calling it &lt;code&gt;panic()&lt;/code&gt;.  You can still &lt;code&gt;recover()&lt;/code&gt; and treat it like a backdoor &lt;code&gt;try&lt;/code&gt;/ &lt;code&gt;catch&lt;/code&gt; in Go, but you will get judgy looks from all Gophers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-checking-in-node" class="anchor"&gt;
  &lt;/a&gt;
  Error Checking in Node
&lt;/h3&gt;

&lt;p&gt;JavaScript lacks the 2 features I mention above to force you to handle errors.&lt;/p&gt;

&lt;p&gt;To work around this and gently nudge you, Node uses &lt;a href="https://nodejs.org/api/errors.html#errors_error_first_callbacks"&gt;error-first callbacks&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;errorFirstCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;There was an error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/some/file/that/does-not-exist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorFirstCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/some/file/that/does-exist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorFirstCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This pattern is idiomatic in most Node libraries, but the further we get away from Node, the more we tend to forget that there is an alternative to throwing errors, when writing libraries and app code.&lt;/p&gt;

&lt;p&gt;Lastly, it is tempting to &lt;code&gt;promisify&lt;/code&gt; those callbacks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promisify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// i am using fs.stat here, but could be any error-first-callback userland function&lt;/span&gt;

&lt;span class="c1"&gt;// assuming top-level await&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// do something with stats&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// handle errors&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And we are right back where we started - being able to fling errors and exceptions arbitrarily high up and having to handle both in the same place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-reads" class="anchor"&gt;
  &lt;/a&gt;
  Other Reads
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dave.cheney.net/2015/01/26/errors-and-exceptions-redux"&gt;Dave Cheney on Go Errors and Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Haskell Wiki on &lt;a href="https://wiki.haskell.org/Error_vs._Exception"&gt;Errors vs Exceptions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;You can implement a &lt;code&gt;Result&lt;/code&gt; or &lt;code&gt;Maybe&lt;/code&gt; in JS: &lt;a href="https://true-myth.js.org/"&gt;https://true-myth.js.org/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Thanks to &lt;a href="https://twitter.com/charlieyouai"&gt;Charlie You&lt;/a&gt; and &lt;a href="https://twitter.com/robincsl?lang=en"&gt;Robin Cussol&lt;/a&gt; for reviewing drafts of this post.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>languages</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>URI | URL | URN </title>
      <author>Uday Yadav</author>
      <pubDate>Fri, 29 Jan 2021 15:15:16 +0000</pubDate>
      <link>https://dev.to/dev117uday/uri-url-urn-20n9</link>
      <guid>https://dev.to/dev117uday/uri-url-urn-20n9</guid>
      <description>&lt;h4&gt;
  &lt;a href="#the-world-of-uniform-resource-" class="anchor"&gt;
  &lt;/a&gt;
  The world of Uniform Resource ___
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--523Z1C9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.geeksforgeeks.org/wp-content/uploads/20200205203241/gfg30.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--523Z1C9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.geeksforgeeks.org/wp-content/uploads/20200205203241/gfg30.jpg" alt="sum-up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here the word &lt;code&gt;resource&lt;/code&gt; could be anything, take it as a img on your computer for easier understanding&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uri" class="anchor"&gt;
  &lt;/a&gt;
  URI
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;URI&lt;/code&gt; stands for &lt;em&gt;Uniform Resource Identifier&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;URI&lt;/code&gt; contains two things

&lt;ul&gt;
&lt;li&gt;Name&lt;/li&gt;
&lt;li&gt;Location&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;We need URI so identify the resource from its name and also be able to locate it using location&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#url" class="anchor"&gt;
  &lt;/a&gt;
  URL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;URL&lt;/code&gt; stands for &lt;em&gt;Uniform Resource Locator&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;This is basically the address of the resource.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#urn" class="anchor"&gt;
  &lt;/a&gt;
  URN
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;URL&lt;/code&gt; stands for &lt;em&gt;Uniform Resource Name&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;This is basically the name of the resource.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Therefore : &lt;code&gt;URI = URL + URN&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The URI generic syntax consists of a hierarchical sequence of five components&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;URI = scheme:[//authority]path[?query][#fragment]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;where the authority component divides into three subcomponents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;authority = [userinfo@]host[:port]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          userinfo       host      port
          ┌──┴───┐ ┌──────┴──────┐ ┌┴┐
  https://john.doe@www.example.com:123/forum/q/?tag=networking#top
  └─┬─┘   └───────────┬──────────────┘└───────┬───────┘ └───────────┬─────────────┘ └┬┘
  scheme          authority                  path                 query           fragment
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I hope you like this article !&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 29th January 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 29 Jan 2021 14:48:11 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-29th-january-2021-4ml2</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-29th-january-2021-4ml2</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-jerryscript" class="anchor"&gt;
  &lt;/a&gt;
  1. JerryScript
&lt;/h3&gt;

&lt;p&gt;JerryScript: JavaScript engine for the Internet of Things. A lightweight JavaScript engine for resource-constrained devices such as microcontrollers. It can run on devices with less than 64 KB of RAM and less than 200 KB of flash memory.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jerryscript-project"&gt;
        jerryscript-project
      &lt;/a&gt; / &lt;a href="https://github.com/jerryscript-project/jerryscript"&gt;
        jerryscript
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Ultra-lightweight JavaScript engine for the Internet of Things.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/jerryscript-project/jerryscript/blob/master/LOGO.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hK-Qv4hJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jerryscript-project/jerryscript/raw/master/LOGO.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
JerryScript: JavaScript engine for the Internet of Things&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/6f3ba5d49037840ec6ed658bfa9a8da033e3a22c3063c93a6e3ef0ca2fe14e4f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e63652d417061636865253230322e302d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://github.com/jerryscript-project/jerryscript/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_k0mziaV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jerryscript-project/jerryscript/workflows/JerryScript%2520CI/badge.svg" alt="GitHub Actions Status"&gt;&lt;/a&gt;
&lt;a href="https://ci.appveyor.com/project/jerryscript-project/jerryscript/branch/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0550da0dfad8370046638454f8f8b8dd111fc38fd5dd71b7edc2e35c8104c5e1/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6374387265617033357532766f6f61352f6272616e63682f6d61737465723f7376673d74727565" alt="AppVeyor Build Status"&gt;&lt;/a&gt;
&lt;a href="https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fjerryscript-project%2Fjerryscript?ref=badge_shield" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/41433946ce81d2c789840da47477a2eff2c58dee75a9dc59d8f24f28b4f10754/68747470733a2f2f6170702e666f7373612e696f2f6170692f70726f6a656374732f67697425324268747470732533412532462532466769746875622e636f6d2532466a657272797363726970742d70726f6a6563742532466a657272797363726970742e7376673f747970653d736869656c64" alt="FOSSA Status"&gt;&lt;/a&gt;
&lt;a href="https://kiwiirc.com/client/irc.freenode.net/#jerryscript" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a1e564d88a6bd8c3e05a92794c9ce822db1e4e9af37590bb334a7b4642b81822/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6f6e253230667265656e6f64652d627269676874677265656e2e737667" alt="IRC Channel"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JerryScript is a lightweight JavaScript engine for resource-constrained devices such as microcontrollers. It can run on devices with less than 64 KB of RAM and less than 200 KB of flash memory.&lt;/p&gt;
&lt;p&gt;Key characteristics of JerryScript:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Full ECMAScript 5.1 standard compliance&lt;/li&gt;
&lt;li&gt;160K binary size when compiled for ARM Thumb-2&lt;/li&gt;
&lt;li&gt;Heavily optimized for low memory consumption&lt;/li&gt;
&lt;li&gt;Written in C99 for maximum portability&lt;/li&gt;
&lt;li&gt;Snapshot support for precompiling JavaScript source code to byte code&lt;/li&gt;
&lt;li&gt;Mature C API, easy to embed in applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional information can be found on our &lt;a href="http://jerryscript.net" rel="nofollow"&gt;project page&lt;/a&gt; and &lt;a href="https://github.com/jerryscript-project/jerryscript/wiki"&gt;Wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Memory usage and Binary footprint are measured at &lt;a href="https://jerryscript-project.github.io/jerryscript-test-results" rel="nofollow"&gt;here&lt;/a&gt; with real target daily.&lt;/p&gt;
&lt;p&gt;The latest results on  &lt;strong&gt;Raspberry Pi 2&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jerryscript-project.github.io/jerryscript-test-results/?view=rpi2" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e1c7b99131f45652feb3578569bde772b8d08613f80043c9663ef06557e2e502/68747470733a2f2f666972656261736573746f726167652e676f6f676c65617069732e636f6d2f76302f622f6a7372656d6f74652d7465737472756e6e65722e61707073706f742e636f6d2f6f2f7374617475732532466a65727279736372697074253246727069322e7376673f616c743d6d6564696126746f6b656e3d31" alt="Remote Testrunner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IRC channel: #jerryscript on &lt;a href="https://freenode.net" rel="nofollow"&gt;freenode&lt;/a&gt;
Mailing list: &lt;a href="https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/mailto:jerryscript-dev@groups.io"&gt;jerryscript-dev@groups.io&lt;/a&gt;, you can subscribe &lt;a href="https://groups.io/g/jerryscript-dev" rel="nofollow"&gt;here&lt;/a&gt; and access the mailing list archive &lt;a href="https://groups.io/g/jerryscript-dev/topics" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Quick Start&lt;/h2&gt;
&lt;h3&gt;
Getting the sources&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/jerryscript-project/jerryscript.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt;&lt;/pre&gt;…&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jerryscript-project/jerryscript"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-reactbigcalendar" class="anchor"&gt;
  &lt;/a&gt;
  2. react-big-calendar
&lt;/h3&gt;

&lt;p&gt;An events calendar component built for React and made for modern browsers (read: IE10+) and uses flexbox over the classic tables-ception approach.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jquense"&gt;
        jquense
      &lt;/a&gt; / &lt;a href="https://github.com/jquense/react-big-calendar"&gt;
        react-big-calendar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      gcal/outlook like calendar component
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
react-big-calendar&lt;/h1&gt;
&lt;p&gt;An events calendar component built for React and made for modern browsers (read: IE10+) and uses flexbox over the classic tables-ception approach.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jquense.github.io/react-big-calendar/examples/index.html" rel="nofollow"&gt;&lt;strong&gt;DEMO and Docs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Inspired by &lt;a href="http://fullcalendar.io/" rel="nofollow"&gt;Full Calendar&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Use and Setup&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;yarn add react-big-calendar&lt;/code&gt; or &lt;code&gt;npm install --save react-big-calendar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Include &lt;code&gt;react-big-calendar/lib/css/react-big-calendar.css&lt;/code&gt; for styles, and make sure your calendar's container
element has a height, or the calendar won't be visible. To provide your own custom styling, see the &lt;a href="https://raw.githubusercontent.com/jquense/react-big-calendar/master/#custom-styling"&gt;Custom Styling&lt;/a&gt; topic.&lt;/p&gt;
&lt;h2&gt;
Starters&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/arecvlohe/rbc-starter"&gt;react-big-calendar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/arecvlohe/rbc-with-dnd-starter"&gt;react-big-calendar with drag and drop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Run examples locally&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;$ git clone git@github.com:intljusticemission/react-big-calendar.git
$ &lt;span class="pl-c1"&gt;cd&lt;/span&gt; react-big-calendar
$ yarn
$ yarn examples&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Open &lt;a href="http://localhost:3000/examples/index.html" rel="nofollow"&gt;localhost:3000/examples/index.html&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Localization and Date Formatting&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;react-big-calendar&lt;/code&gt; includes three options for handling the date formatting and culture localization, depending
on your preference of DateTime libraries. You can use either the &lt;a href="https://momentjs.com/" rel="nofollow"&gt;Moment.js&lt;/a&gt;, &lt;a href="https://github.com/jquery/globalize"&gt;Globalize.js&lt;/a&gt; or &lt;a href="https://date-fns.org/" rel="nofollow"&gt;date-fns&lt;/a&gt; localizers.&lt;/p&gt;
&lt;p&gt;Regardless of your choice, you &lt;strong&gt;must&lt;/strong&gt; choose a localizer to use this library:&lt;/p&gt;
&lt;h4&gt;
Moment.js&lt;/h4&gt;
&lt;div class="highlight highlight-source-js js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;Calendar&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;&lt;/pre&gt;…&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jquense/react-big-calendar"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-react-select" class="anchor"&gt;
  &lt;/a&gt;
  3. React Select
&lt;/h3&gt;

&lt;p&gt;The Select Component for React.js. A flexible and beautiful Select Input control for ReactJS with multiselect, autocomplete, async and creatable support.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/JedWatson"&gt;
        JedWatson
      &lt;/a&gt; / &lt;a href="https://github.com/JedWatson/react-select"&gt;
        react-select
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Select Component for React.js
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-select" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c1b80d4cebd28b7171dbe06ffa52f02e6c34a30a39c72ef78abbfae8f3cf761c/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f72656163742d73656c6563742e737667" alt="NPM"&gt;&lt;/a&gt;
&lt;a href="https://circleci.com/gh/JedWatson/react-select/tree/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/566ccfab00c7b844dd70255b81a04150035ab40e58e977372086970817757232/68747470733a2f2f636972636c6563692e636f6d2f67682f4a6564576174736f6e2f72656163742d73656c6563742f747265652f6d61737465722e7376673f7374796c653d736869656c64" alt="CircleCI"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/JedWatson/react-select?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5d759482f2403de36332d079c14d2760384857d70af01ad7a293097259a1cf2a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a6564576174736f6e2f72656163742d73656c6563742f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status"&gt;&lt;/a&gt;
&lt;a href="http://thinkmill.com.au/?utm_source=github&amp;amp;utm_medium=badge&amp;amp;utm_campaign=react-select" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7fc59b439b8357b4161c7657f2ee430c11ff0dd7a968c7e059ba5e125a1f704f/68747470733a2f2f7468696e6b6d696c6c2e6769746875622e696f2f62616467652f68656172742e737667" alt="Supported by Thinkmill"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
React-Select&lt;/h1&gt;
&lt;p&gt;The Select control for &lt;a href="https://reactjs.com" rel="nofollow"&gt;React&lt;/a&gt;. Initially built for use in &lt;a href="http://www.keystonejs.com" rel="nofollow"&gt;KeystoneJS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://www.react-select.com" rel="nofollow"&gt;react-select.com&lt;/a&gt; for live demos and comprehensive docs.&lt;/p&gt;
&lt;p&gt;React Select is funded by &lt;a href="https://www.thinkmill.com.au" rel="nofollow"&gt;Thinkmill&lt;/a&gt; and &lt;a href="https://atlaskit.atlassian.com" rel="nofollow"&gt;Atlassian&lt;/a&gt;. It represents a whole new approach to developing powerful React.js components that &lt;em&gt;just work&lt;/em&gt; out of the box, while being extremely customisable.&lt;/p&gt;
&lt;p&gt;For the story behind this component, watch Jed's talk at React Conf 2019 - &lt;a href="https://youtu.be/yS0jUnmBujE" rel="nofollow"&gt;building React Select&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flexible approach to data, with customisable functions&lt;/li&gt;
&lt;li&gt;Extensible styling API with &lt;a href="https://emotion.sh" rel="nofollow"&gt;emotion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Component Injection API for complete control over the UI behaviour&lt;/li&gt;
&lt;li&gt;Controllable state props and modular architecture&lt;/li&gt;
&lt;li&gt;Long-requested features like option groups, portal support, animation, and more&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Using an older version?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/JedWatson/react-select/issues/3585"&gt;v2 to v3 upgrade guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-select.com/upgrade-guide" rel="nofollow"&gt;v1 to v2 upgrade guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;React Select v1 documentation and examples are available at &lt;a href="https://v1.react-select.com" rel="nofollow"&gt;v1.react-select.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
Installation and usage&lt;/h1&gt;
&lt;p&gt;The easiest way to use react-select is to install it from npm and…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/JedWatson/react-select"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-reactour" class="anchor"&gt;
  &lt;/a&gt;
  4. Reactour
&lt;/h3&gt;

&lt;p&gt;Tourist Guide into your React Components&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/elrumordelaluz"&gt;
        elrumordelaluz
      &lt;/a&gt; / &lt;a href="https://github.com/elrumordelaluz/reactour"&gt;
        reactour
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Tourist Guide into your React Components
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/elrumordelaluz/reactour/master//logo.svg"&gt;&lt;img alt="Reactour" title="Reactour" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tzF-u8Xq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/elrumordelaluz/reactour/master/logo.svg" width="250"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Tourist Guide&lt;/strong&gt; into your React Components
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://elrumordelaluz.github.io/reactour/" rel="nofollow"&gt;Demo&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://codesandbox.io/s/6z56m8x18k?module=%2FApp.js" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/90808661433696bc57dce8d4ad732307b5cec6270e6b846f114dcd7ee7f9458a/68747470733a2f2f636f646573616e64626f782e696f2f7374617469632f696d672f706c61792d636f646573616e64626f782e737667" alt="Edit 6z56m8x18k"&gt;
  &lt;/a&gt;
&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;⚠️ The &lt;code&gt;master&lt;/code&gt; branch is currently in &lt;em&gt;development&lt;/em&gt;. Please use the &lt;a href="https://github.com/elrumordelaluz/reactour/tree/v1"&gt;v1 branch&lt;/a&gt; to follow the current versions published.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
Install&lt;/h2&gt;

&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;npm i -S reactour
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn add reactour&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;From &lt;code&gt;v1.9.1&lt;/code&gt; &lt;a href="https://www.styled-components.com/" rel="nofollow"&gt;styled-components&lt;/a&gt; it isn't bundled into the package and is required &lt;code&gt;styled-components@^4&lt;/code&gt; and &lt;code&gt;react@^16.3&lt;/code&gt; due to the use of &lt;a href="https://reactjs.org/docs/refs-and-the-dom.html#creating-refs" rel="nofollow"&gt;createRef&lt;/a&gt;, so: &lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;npm i -S styled-components@^4.0.0
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn add styled-components@^4.0.0&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Add the &lt;code&gt;Tour&lt;/code&gt; Component in your Application, passing the &lt;code&gt;steps&lt;/code&gt; with the elements to highlight during the &lt;em&gt;Tour&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-js js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;React&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;useState&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'react'&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;Tour&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'reactour'&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;steps&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;[&lt;/span&gt;
  &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;selector&lt;/span&gt;: &lt;span class="pl-s"&gt;'.first-step'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-c1"&gt;content&lt;/span&gt;: &lt;span class="pl-s"&gt;'This is my first Step'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c"&gt;// ...&lt;/span&gt;
&lt;span class="pl-kos"&gt;]&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-v"&gt;App&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;[&lt;/span&gt;&lt;span class="pl-s1"&gt;isTourOpen&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;setIsTourOpen&lt;/span&gt;&lt;span class="pl-kos"&gt;]&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useState&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-c1"&gt;false&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-c"&gt;/* other&lt;/span&gt;&lt;/pre&gt;…&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/elrumordelaluz/reactour"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#5-terminalizer" class="anchor"&gt;
  &lt;/a&gt;
  5. Terminalizer
&lt;/h3&gt;

&lt;p&gt;Record your terminal and generate animated gif images or share a web player&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/faressoft"&gt;
        faressoft
      &lt;/a&gt; / &lt;a href="https://github.com/faressoft/terminalizer"&gt;
        terminalizer
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🦄 Record your terminal and generate animated gif images or share a web player
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://terminalizer.com" rel="nofollow"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---R_5kLEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/faressoft/terminalizer/master/img/logo.png%3Fraw%3Dtrue" width="200"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
Terminalizer&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/terminalizer" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/028c5e9e95cdf6890efc52d462b29814823b1cad19a15bea57fc05ce78285f1c/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f7465726d696e616c697a65722e737667" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://github.com/faressoft/terminalizer/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/22f62a3095d919e304f1db859efa95d3d6b2aa8b1de52c1f76b9eed82512a6d0/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f7465726d696e616c697a65722e737667" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/terminalizer/Lobby" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2abbf7583b9c0b555d6f8854ac88d8315cb3872c0f2f7f96542a941c29cf8b54/68747470733a2f2f6261646765732e6769747465722e696d2f6a6f696e5f636861742e737667" alt="Gitter"&gt;&lt;/a&gt;
&lt;a href="https://www.youtube.com/watch?v=QH2-TGUlwu4" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d7da2c078aed6a82ecca74187fac6ea7a0aaf5aedfa089f7a2bd46e0fa167574/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e79616e6361742d617070726f7665642d6666363962342e737667" alt="Unicorn"&gt;&lt;/a&gt;
&lt;a href="https://goo.gl/QJzJu1" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d0d49738784fdd29a6e0cc80f3dece044a6707e499cc17b91ffada8e80fd7138/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f747769747465722d73686172652d3736616265632e737667" alt="Tweet"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Record your terminal and generate animated gif images or share a web player link &lt;a href="https://terminalizer.com" rel="nofollow"&gt;terminalizer.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/faressoft/terminalizer/master//img/demo.gif?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--txLMg7MP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/faressoft/terminalizer/master/img/demo.gif%3Fraw%3Dtrue"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Built to be jusT cOol 👌🦄 !&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you think so, support me with a &lt;code&gt;star&lt;/code&gt; and a &lt;code&gt;follow&lt;/code&gt; 😘&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Built while listening to &lt;a href="https://www.youtube.com/watch?v=QH2-TGUlwu4" rel="nofollow"&gt;Nyan Cat&lt;/a&gt; 😛&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/faressoft/terminalizer/master//img/trending.png?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SnvtMovX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/faressoft/terminalizer/master/img/trending.png%3Fraw%3Dtrue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#whats-next"&gt;What's Next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#getting-started"&gt;Getting Started&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#compression"&gt;Compression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#usage"&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#init"&gt;Init&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#config"&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#record"&gt;Record&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#play"&gt;Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#render"&gt;Render&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#share"&gt;Share&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#generate"&gt;Generate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#configurations"&gt;Configurations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#recording"&gt;Recording&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#delays"&gt;Delays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#gif"&gt;GIF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#terminal"&gt;Terminal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#theme"&gt;Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#watermark"&gt;Watermark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#frame-box"&gt;Frame Box&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#null-frame"&gt;Null Frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#window-frame"&gt;Window Frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#floating-frame"&gt;Floating Frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#solid-frame"&gt;Solid Frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#solid-frame-without-title"&gt;Solid Frame Without Title&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#styling-hint"&gt;Styling Hint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#issues"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/faressoft/terminalizer/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Highly customizable.&lt;/li&gt;
&lt;li&gt;Cross platform (Linux, Windows, MacOS).&lt;/li&gt;
&lt;li&gt;Custom &lt;code&gt;window frames&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Custom &lt;code&gt;font&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Custom &lt;code&gt;colors&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Custom &lt;code&gt;styles&lt;/code&gt; with &lt;code&gt;CSS&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Watermark.&lt;/li&gt;
&lt;li&gt;Edit frames and adjust delays before rendering.&lt;/li&gt;
&lt;li&gt;Skipping frames by a step value to reduce the number of rendered frames.&lt;/li&gt;
&lt;li&gt;Render images with texts on them instead of capturing your screen for better quality.&lt;/li&gt;
&lt;li&gt;The ability to configure
&lt;ul&gt;&lt;li&gt;…&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/faressoft/terminalizer"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-filepond" class="anchor"&gt;
  &lt;/a&gt;
  6. Filepond
&lt;/h3&gt;

&lt;p&gt;A JavaScript library that can upload anything you throw at it, optimizes images for faster uploads, and offers a great, accessible, silky smooth user experience.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pqina"&gt;
        pqina
      &lt;/a&gt; / &lt;a href="https://github.com/pqina/filepond"&gt;
        filepond
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🌊 A flexible and fun JavaScript file upload library
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/pqina/filepond-github-assets/blob/master/logo.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpnmTYRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/pqina/filepond-github-assets/raw/master/logo.svg" height="44" alt="FilePond"&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;A JavaScript library that can upload anything you throw at it, optimizes images for faster uploads, and offers a great, accessible, silky smooth user experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pqina/filepond/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/83d3746e5881c1867665223424263d8e604df233d0a11aae0813e0414d433943/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667" alt="License: MIT"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/filepond" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d5d040a16706a7db6d18fbf9553f4b5c24d00525acd11a64cef69e30f85e1446/68747470733a2f2f62616467652e667572792e696f2f6a732f66696c65706f6e642e737667" alt="npm version"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;21 KB gzipped. FilePond adapters are available for &lt;strong&gt;&lt;a href="https://github.com/pqina/react-filepond"&gt;React&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href="https://github.com/pqina/vue-filepond"&gt;Vue&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href="https://github.com/pqina/ngx-filepond"&gt;Angular&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://github.com/pqina/jquery-filepond"&gt;jQuery&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FilePond is maintained by &lt;strong&gt;&lt;a href="https://twitter.com/rikschennink/" rel="nofollow"&gt;Rik Schennink&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/pqina/filepond-github-assets/blob/master/filepond-animation-01.gif?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OeJ8-3Yu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/pqina/filepond-github-assets/raw/master/filepond-animation-01.gif%3Fraw%3Dtrue" width="370" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Core Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Accepts &lt;strong&gt;directories&lt;/strong&gt;, &lt;strong&gt;files&lt;/strong&gt;, blobs, local URLs, &lt;strong&gt;remote URLs&lt;/strong&gt; and Data URIs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Drop files&lt;/strong&gt;, select on filesystem, &lt;strong&gt;copy and paste files&lt;/strong&gt;, or add files using the API.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Async uploads&lt;/strong&gt; with AJAX, supports &lt;strong&gt;chunk uploads&lt;/strong&gt;, can encode files as base64 data and send along form post.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Accessible&lt;/strong&gt;, tested with AT software like VoiceOver and JAWS, &lt;strong&gt;navigable by Keyboard&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Image optimization&lt;/strong&gt;, automatic image resizing, &lt;strong&gt;cropping&lt;/strong&gt;, filtering, and &lt;strong&gt;fixes EXIF orientation&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Responsive&lt;/strong&gt;, automatically scales to available space, is functional on both &lt;strong&gt;mobile and desktop devices&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://pqina.nl/filepond/" rel="nofollow"&gt;Learn more about FilePond&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
Also need Image Editing?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Doka.js&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pqina/filepond"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-blueprint" class="anchor"&gt;
  &lt;/a&gt;
  7. Blueprint
&lt;/h3&gt;

&lt;p&gt;Blueprint is a React-based UI toolkit for the web. It is optimized for building complex, data-dense web interfaces for desktop applications which run in modern browsers and IE11. This is not a mobile-first UI toolkit.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/palantir"&gt;
        palantir
      &lt;/a&gt; / &lt;a href="https://github.com/palantir/blueprint"&gt;
        blueprint
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A React-based UI toolkit for the web
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/464822/20228152/d3f36dc2-a804-11e6-80ff-51ada2d13ea7.png"&gt;&lt;img height="204" src="https://res.cloudinary.com/practicaldev/image/fetch/s--urv_HboD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/464822/20228152/d3f36dc2-a804-11e6-80ff-51ada2d13ea7.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
&lt;a href="http://blueprintjs.com/" rel="nofollow"&gt;Blueprint&lt;/a&gt; &lt;a href="https://circleci.com/gh/palantir/workflows/blueprint" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3fcf7c8eb7653bcd1e8465d06857eafb479cb4f93b92b7794b4a53626b7a76ac/68747470733a2f2f636972636c6563692e636f6d2f67682f70616c616e7469722f626c75657072696e742f747265652f646576656c6f702e7376673f7374796c653d737667" alt="CircleCI"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Blueprint is a React-based UI toolkit for the web.&lt;/p&gt;
&lt;p&gt;It is optimized for building complex, data-dense web interfaces for &lt;em&gt;desktop applications&lt;/em&gt; which run in modern browsers and IE11. This is not a mobile-first UI toolkit.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/@palantir/scaling-product-design-with-blueprint-25492827bb4a" rel="nofollow"&gt;&lt;strong&gt;Read the introductory blog post ▸&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blueprintjs.com/docs" rel="nofollow"&gt;&lt;strong&gt;View the full documentation ▸&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codesandbox.io/s/blueprint-sandbox-et9xy" rel="nofollow"&gt;&lt;strong&gt;Try it out on CodeSandbox ▸&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/palantir/blueprint/wiki/Frequently-Asked-Questions"&gt;&lt;strong&gt;Read frequently asked questions (FAQ) on the wiki ▸&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Changelog&lt;/h2&gt;
&lt;p&gt;Blueprint's change log and migration guides for major versions live on the repo's &lt;a href="https://github.com/palantir/blueprint/wiki/3.x-Changelog"&gt;Github wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Packages&lt;/h2&gt;
&lt;p&gt;This repository contains multiple projects in the &lt;code&gt;packages/&lt;/code&gt; directory that fall into 3 categories:&lt;/p&gt;
&lt;h3&gt;
Libraries&lt;/h3&gt;
&lt;p&gt;These are the component libraries we publish to NPM.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@blueprintjs/core" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/06754c75673a523c2996083b50d9335c8fcd2d488214c97e369a199355af47aa/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40626c75657072696e746a732f636f72652e7376673f6c6162656c3d40626c75657072696e746a732f636f7265" alt="npm"&gt;&lt;/a&gt; – Core styles &amp;amp; components.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@blueprintjs/datetime" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1e0c08e200346033ac35bd48df514abfb665aa8b8a06f7aabcb61272157a0844/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40626c75657072696e746a732f6461746574696d652e7376673f6c6162656c3d40626c75657072696e746a732f6461746574696d65" alt="npm"&gt;&lt;/a&gt; – Components for interacting with dates and times.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@blueprintjs/icons" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a1f0d5a9047998a9d3a8c135519ee769f77a4075a749d9c05f89eb2e321b283a/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40626c75657072696e746a732f69636f6e732e7376673f6c6162656c3d40626c75657072696e746a732f69636f6e73" alt="npm"&gt;&lt;/a&gt; – Components for generating and displaying icons.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@blueprintjs/popover2" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7ba176aacf440d367260c8dd762b22e71a1871cf29152e475fa77ab393e8e905/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40626c75657072696e746a732f706f706f766572322e7376673f6c6162656c3d40626c75657072696e746a732f706f706f76657232" alt="npm"&gt;&lt;/a&gt; – Popover2 and Tooltip2 components.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@blueprintjs/select" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8670b19f725940e7f580c19e2efe335d1b651221edc02a80781c61be6fb6ff93/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40626c75657072696e746a732f73656c6563742e7376673f6c6162656c3d40626c75657072696e746a732f73656c656374" alt="npm"&gt;&lt;/a&gt; – Components for selecting items from a list.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@blueprintjs/table" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/946b13588c4eefa990410f1ce4a3b346389e82150160d0c17aff28f53ea65964/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40626c75657072696e746a732f7461626c652e7376673f6c6162656c3d40626c75657072696e746a732f7461626c65" alt="npm"&gt;&lt;/a&gt; – Scalable interactive table component.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@blueprintjs/timezone" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e89e83db776dbcd5ee107f6371c8b3eea13b307a860a9804772650cf31d87fab/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40626c75657072696e746a732f74696d657a6f6e652e7376673f6c6162656c3d40626c75657072696e746a732f74696d657a6f6e65" alt="npm"&gt;&lt;/a&gt; – Components for picking timezones.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Applications&lt;/h3&gt;
&lt;p&gt;These are…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/palantir/blueprint"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-ress" class="anchor"&gt;
  &lt;/a&gt;
  8. ress
&lt;/h3&gt;

&lt;p&gt;Modern CSS reset&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/filipelinhares"&gt;
        filipelinhares
      &lt;/a&gt; / &lt;a href="https://github.com/filipelinhares/ress"&gt;
        ress
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🚿 A modern CSS reset
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/42110275576dce6ac537dd8e47eacb554269fbf3c7f087fb3e1440f870fc5eff/687474703a2f2f692e696d6775722e636f6d2f317358746373412e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/42110275576dce6ac537dd8e47eacb554269fbf3c7f087fb3e1440f870fc5eff/687474703a2f2f692e696d6775722e636f6d2f317358746373412e706e67" alt="A brunch and the ress name"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Modern CSS reset&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/filipelinhares/ress" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3aad0c1976325900353172f2a0db265d4e01ff0c6c80e3a6514f40329540e764/68747470733a2f2f7472617669732d63692e6f72672f66696c6970656c696e68617265732f726573732e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://github.com/filipelinhares/ress/blob/master/dist/ress.min.css"&gt;&lt;img src="https://camo.githubusercontent.com/7f94029464e1621911c1608b258da3ac3d0bc712f7fbf9dc95f11fcdb11fff52/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e2f726573733f636f6c6f723d6f72616e6765" alt="Size"&gt;&lt;/a&gt; &lt;a href="https://npmjs.com/ress" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b2d6d00e83b1015fd04604e446a98e065e8cf34745df134120f3c4a2a46d019/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f726573732e737667" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;npm install --save ress&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;bower install --save ress&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Apply &lt;code&gt;box-sizing: border-box;&lt;/code&gt; in all elements.&lt;/li&gt;
&lt;li&gt;Reset &lt;code&gt;padding&lt;/code&gt; and &lt;code&gt;margin&lt;/code&gt; in all elements.&lt;/li&gt;
&lt;li&gt;Specify &lt;code&gt;background-repeat: no-repeat&lt;/code&gt; in all elements and pseudo elements.&lt;/li&gt;
&lt;li&gt;Inherit &lt;code&gt;text-decoration&lt;/code&gt; and &lt;code&gt;vertical-align&lt;/code&gt; to &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove the &lt;code&gt;outline&lt;/code&gt; when hovering in all browsers.&lt;/li&gt;
&lt;li&gt;Specify &lt;code&gt;font-family: monospace&lt;/code&gt; in code elements.&lt;/li&gt;
&lt;li&gt;Reset &lt;code&gt;border-radius&lt;/code&gt; in input elements.&lt;/li&gt;
&lt;li&gt;Specify font inheritance of form elements.&lt;/li&gt;
&lt;li&gt;Remove the default button styling in all browsers.&lt;/li&gt;
&lt;li&gt;Specify textarea resizability to vertical.&lt;/li&gt;
&lt;li&gt;Apply &lt;code&gt;cursor: pointer&lt;/code&gt; to button elements.&lt;/li&gt;
&lt;li&gt;Apply &lt;code&gt;tab-size: 4&lt;/code&gt; in &lt;code&gt;html&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Style &lt;code&gt;select&lt;/code&gt; like a standard input.&lt;/li&gt;
&lt;li&gt;Style &lt;code&gt;cursor&lt;/code&gt; by aria attributes.&lt;/li&gt;
&lt;li&gt;Hide content from screens but not screenreaders.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
Crossbrowser&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ress&lt;/strong&gt; uses &lt;a href="https://github.com/necolas/normalize.css"&gt;Normalize.css&lt;/a&gt; under the hood with some customizations to apply a solid base to start your stylesheet.&lt;/p&gt;
&lt;h2&gt;
Browser support&lt;/h2&gt;
&lt;p&gt;Inherit from &lt;a href="https://github.com/necolas/normalize.css#browser-support"&gt;Normalize&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
CDN&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://unpkg.com" rel="nofollow"&gt;&lt;strong&gt;unpkg&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;https://unpkg.com/ress/dist/ress.min.css&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://rawgit.com" rel="nofollow"&gt;&lt;strong&gt;RawGit&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Production&lt;/span&gt;
https://cdn.rawgit.com/filipelinhares/ress/master/dist/ress.min.css
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Development&lt;/span&gt;
https://rawgit.com/filipelinhares/ress/master/dist/ress.min.css&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/filipelinhares/ress/master/LICENSE.md"&gt;MIT&lt;/a&gt; ©…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/filipelinhares/ress"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-constate" class="anchor"&gt;
  &lt;/a&gt;
  9. Constate
&lt;/h3&gt;

&lt;p&gt;Write local state using React Hooks and lift it up to React Context only when needed with minimum effort.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/diegohaz"&gt;
        diegohaz
      &lt;/a&gt; / &lt;a href="https://github.com/diegohaz/constate"&gt;
        constate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      React Context + State
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/diegohaz/constate/master/logo/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xhXSG708--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/diegohaz/constate/master/logo/logo.png" alt="constate logo" width="300"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
Constate&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://npmjs.org/package/constate" rel="nofollow"&gt;&lt;img alt="NPM version" src="https://camo.githubusercontent.com/aaa40d739ccf2c86f78ab2cb6adeb7c3101cb635d51bf6e6b1ac068d3269faac/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f636f6e73746174652e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;a href="https://npmjs.org/package/constate" rel="nofollow"&gt;&lt;img alt="NPM downloads" src="https://camo.githubusercontent.com/a1d3fe090b7775251ab8e1390145c62dfb908644fc8cf9b60c382d642f62da7f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f636f6e73746174652e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;a href="https://unpkg.com/constate" rel="nofollow"&gt;&lt;img alt="Size" src="https://camo.githubusercontent.com/1d9b65e8a0c49ef39c6c3a2e9ec6927dc08e4be70dcd2617083d83da62edaa26/68747470733a2f2f696d672e626164676573697a652e696f2f68747470733a2f2f756e706b672e636f6d2f636f6e73746174653f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/diegohaz/constate" rel="nofollow"&gt;&lt;img alt="Dependencies" src="https://camo.githubusercontent.com/fe9ae740a734f507ab738e6f9997093a41289dca10b8445ee93f3e58c552f717/68747470733a2f2f696d672e736869656c64732e696f2f64617669642f646965676f68617a2f636f6e73746174652e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/diegohaz/constate" rel="nofollow"&gt;&lt;img alt="Build Status" src="https://camo.githubusercontent.com/b69245ec8cef599a099dafd080d0014b45c98dfe34fb43ff8f0558e309a676b5/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f646965676f68617a2f636f6e73746174652f6d61737465722e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/diegohaz/constate/branch/master" rel="nofollow"&gt;&lt;img alt="Coverage Status" src="https://camo.githubusercontent.com/5efe0f41480b963a18eb13fb517207db5bd893a4d9331bd915cd8fbe5c4cb50e/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f646965676f68617a2f636f6e73746174652f6d61737465722e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Write local state using &lt;a href="https://reactjs.org/docs/hooks-intro.html" rel="nofollow"&gt;React Hooks&lt;/a&gt; and lift it up to &lt;a href="https://reactjs.org/docs/context.html" rel="nofollow"&gt;React Context&lt;/a&gt; only when needed with minimum effort.&lt;/p&gt;
&lt;br&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan="5"&gt;
🕹 CodeSandbox demos 🕹
&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://codesandbox.io/s/github/diegohaz/constate/tree/master/examples/counter?module=/App.js" rel="nofollow"&gt;Counter&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://codesandbox.io/s/github/diegohaz/constate/tree/master/examples/i18n?module=/App.js" rel="nofollow"&gt;I18n&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://codesandbox.io/s/github/diegohaz/constate/tree/master/examples/theming?module=/App.js" rel="nofollow"&gt;Theming&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://codesandbox.io/s/github/diegohaz/constate/tree/master/examples/typescript?module=/App.tsx" rel="nofollow"&gt;TypeScript&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://codesandbox.io/s/github/diegohaz/constate/tree/master/examples/wizard-form?module=/App.js" rel="nofollow"&gt;Wizard Form&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2&gt;
Basic example&lt;/h2&gt;
&lt;div class="highlight highlight-source-js-jsx js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;React&lt;/span&gt;, { &lt;span class="pl-smi"&gt;useState&lt;/span&gt; } &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;react&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;constate&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;constate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 1️⃣ Create a custom hook as usual&lt;/span&gt;
&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-en"&gt;useCounter&lt;/span&gt;() {
  &lt;span class="pl-k"&gt;const&lt;/span&gt; [&lt;span class="pl-smi"&gt;count&lt;/span&gt;, &lt;span class="pl-smi"&gt;setCount&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useState&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt;)
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-en"&gt;increment&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; () &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;setCount&lt;/span&gt;(&lt;span class="pl-smi"&gt;prevCount&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;prevCount&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
  &lt;span class="pl-k"&gt;return&lt;/span&gt; { &lt;span class="pl-smi"&gt;count&lt;/span&gt;, &lt;span class="pl-smi"&gt;increment&lt;/span&gt; };
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 2️⃣ Wrap your hook with the constate factory&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; [&lt;span class="pl-smi"&gt;CounterProvider&lt;/span&gt;, &lt;span class="pl-smi"&gt;useCounterContext&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;constate&lt;/span&gt;(&lt;span class="pl-smi"&gt;useCounter&lt;/span&gt;);

&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-en"&gt;Button&lt;/span&gt;() {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 3️⃣ Use context instead of custom hook&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; { &lt;span class="pl-smi"&gt;increment&lt;/span&gt; } &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useCounterContext&lt;/span&gt;();
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &amp;lt;&lt;span class="pl-ent"&gt;button&lt;/span&gt; &lt;span class="pl-e"&gt;onClick&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-pse"&gt;{&lt;/span&gt;&lt;span class="pl-smi"&gt;increment&lt;/span&gt;&lt;span class="pl-pse"&gt;}&lt;/span&gt;&amp;gt;+&amp;lt;/&lt;span class="pl-ent"&gt;button&lt;/span&gt;&amp;gt;;
}

&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-en"&gt;Count&lt;/span&gt;() {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 4️⃣&lt;/span&gt;&lt;/pre&gt;…&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/diegohaz/constate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-lazy-collections" class="anchor"&gt;
  &lt;/a&gt;
  10. Lazy Collections
&lt;/h3&gt;

&lt;p&gt;Collection of fast and lazy operations&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/RobinMalfait"&gt;
        RobinMalfait
      &lt;/a&gt; / &lt;a href="https://github.com/RobinMalfait/lazy-collections"&gt;
        lazy-collections
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Collection of fast and lazy operations
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
  Lazy Collections
&lt;/h3&gt;
&lt;p&gt;
  Fast and lazy collection operations
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://www.npmjs.com/package/lazy-collections" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/520c1ce29789b4517be85ce9623905fccb64e21020808edd093723e3ed1b1098/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6c617a792d636f6c6c656374696f6e733f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/lazy-collections" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6cf44a944fcd6e64d22560cec32994bbdfb138996f71dda5952447e7a8396d7d/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f6c617a792d636f6c6c656374696f6e733f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/RobinMalfait/lazy-collections/actions"&gt;&lt;img src="https://camo.githubusercontent.com/21e53bdf43dc3b9802d12d0502f1506f1487240563ccf5313fe05918356638bf/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f526f62696e4d616c666169742f6c617a792d636f6c6c656374696f6e732f4e6f646525323043492f6d61737465723f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;/p&gt;




&lt;p&gt;Working with methods like &lt;code&gt;.map()&lt;/code&gt;, &lt;code&gt;.filter()&lt;/code&gt; and &lt;code&gt;.reduce()&lt;/code&gt; is nice
however they create new arrays and everything is eagerly done before going to
the next step.&lt;/p&gt;
&lt;p&gt;This is where lazy collections come in, under the hood we use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol" rel="nofollow"&gt;iterators&lt;/a&gt; and
async iterators so that your data flows like a stream to have the optimal speed.&lt;/p&gt;
&lt;p&gt;All functions should work with both &lt;code&gt;iterator&lt;/code&gt; and &lt;code&gt;asyncIterator&lt;/code&gt;, if one of
the functions uses an &lt;code&gt;asyncIterator&lt;/code&gt; (for example when you introduce
&lt;code&gt;delay(100)&lt;/code&gt;), don't forget to &lt;code&gt;await&lt;/code&gt; the result!&lt;/p&gt;
&lt;div class="highlight highlight-source-js js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;program&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;pipe&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;
  &lt;span class="pl-en"&gt;map&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;x&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s1"&gt;x&lt;/span&gt; * &lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-en"&gt;filter&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;x&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s1"&gt;x&lt;/span&gt; % &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c1"&gt;===&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-en"&gt;filter&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;x&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s1"&gt;x&lt;/span&gt; % &lt;span class="pl-c1"&gt;100&lt;/span&gt; &lt;span class="pl-c1"&gt;===&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-en"&gt;filter&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;x&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s1"&gt;x&lt;/span&gt; % &lt;span class="pl-c1"&gt;400&lt;/span&gt; &lt;span class="pl-c1"&gt;===&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-en"&gt;toArray&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-s1"&gt;program&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-en"&gt;range&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;/pre&gt;…&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/RobinMalfait/lazy-collections"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/iain_freestone"&gt;follow me&lt;/a&gt; on Twitter where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>css</category>
      <category>typescript</category>
    </item>
    <item>
      <title>7 easy ways to become a better developer</title>
      <author>Pasca Vlad</author>
      <pubDate>Fri, 29 Jan 2021 14:45:10 +0000</pubDate>
      <link>https://dev.to/pascavld/7-easy-ways-to-become-a-better-developer-36l6</link>
      <guid>https://dev.to/pascavld/7-easy-ways-to-become-a-better-developer-36l6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I've read dozen of articles on how to become a better developer in the past year&lt;/p&gt;

&lt;p&gt;Here are 7 ways to do so&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-code-every-day-for-as-much-as-you-can" class="anchor"&gt;
  &lt;/a&gt;
  1. Code every day for as much as you can.
&lt;/h2&gt;

&lt;p&gt;This is important especially when you're first starting.&lt;/p&gt;

&lt;p&gt;You can code for as little as 15 minutes.&lt;/p&gt;

&lt;p&gt;It's a lot better to learn for one hour every day than for 7 hours in one day once a week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-practice-makes-perfect" class="anchor"&gt;
  &lt;/a&gt;
  2. Practice makes perfect.
&lt;/h2&gt;

&lt;p&gt;The only difference between you and the developers that are better than you is that they practiced more.&lt;/p&gt;

&lt;p&gt;But it's also very important how you practice which leads us to the point 3...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-active-learning-gtgt-passive-learning" class="anchor"&gt;
  &lt;/a&gt;
  3. Active learning &amp;gt;&amp;gt; passive learning.
&lt;/h2&gt;

&lt;p&gt;What this means? It's a lot better to learn by building projects and playing around with the concepts you learned than just watching the tutorial.&lt;/p&gt;

&lt;p&gt;So start building something as fast as you can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-google" class="anchor"&gt;
  &lt;/a&gt;
  4. Google.
&lt;/h2&gt;

&lt;p&gt;Use Google as much as you can. Every time you don't remember something or can't solve a problem use Google.&lt;/p&gt;

&lt;p&gt;Googling is one of the most important skills of a developer. Use it as a tool to get your job done faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-find-what-resources-work-the-best-for-you" class="anchor"&gt;
  &lt;/a&gt;
  5. Find what resources work the best for you.
&lt;/h2&gt;

&lt;p&gt;Some people learn the best from video courses. Others from books. And others just from building something.&lt;/p&gt;

&lt;p&gt;Make sure you take some time to find which one works the best for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-avoid-tutorial-hell" class="anchor"&gt;
  &lt;/a&gt;
  6. Avoid Tutorial Hell
&lt;/h2&gt;

&lt;p&gt;What does Tutorial Hell mean? It's that thing when you go from one tutorial to another without building something.&lt;/p&gt;

&lt;p&gt;This is the worst thing you can do to yourself because you feel that you're learning something but in reality, you are not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-avoid-distractions-when-learning-how-to-code" class="anchor"&gt;
  &lt;/a&gt;
  7. Avoid distractions when learning how to code
&lt;/h2&gt;

&lt;p&gt;If you want to learn something new you need to be 100% focused on that. &lt;/p&gt;

&lt;p&gt;If you check your phone every 5 minutes you'll get nowhere.&lt;/p&gt;

&lt;p&gt;Remember that 1 hour of focused work is a lot better than 3 hours of distracted work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end" class="anchor"&gt;
  &lt;/a&gt;
  End
&lt;/h2&gt;

&lt;p&gt;I hope that you liked this article and learned something new. And if you did so make sure follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt; where I post Tweets related to this article everyday. &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
