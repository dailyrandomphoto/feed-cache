<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Variables in Python</title>
      <author>Suleiman Ibrahim</author>
      <pubDate>Sat, 04 Dec 2021 17:13:14 +0000</pubDate>
      <link>https://dev.to/princeibs/variables-in-python-3foe</link>
      <guid>https://dev.to/princeibs/variables-in-python-3foe</guid>
      <description>&lt;p&gt;A variable in programming is generally a container or location in the computer’s memory used to store values temporarily. Variables in Python are nothing different from the general programming definition of a variable. Values stored in the variable can then later be used or modified in our programs. This article discusses all the basics you need to know in Python programming language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-are-variables"&gt;What are variables?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#variables-in-python"&gt;Variables in Python&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#variable-naming-convention"&gt;Variable Naming convention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variable-declaration-and-usage"&gt;Variable declaration and usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reassigning-variables"&gt;Reassigning variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operation-on-variables"&gt;Operation on variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variable-scope-local-and-global-variables"&gt;Variable scope: Local and global variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-are-variables"&gt;
  &lt;/a&gt;
  What are Variables?
&lt;/h3&gt;

&lt;p&gt;Variable are reserved locations in the memory of the computer used to hold values that can be used later.&lt;br&gt;
Because the computer stores variables in the Random Access Memory (RAM), variables are created in the memory only when our program is in execution and are lost immediately after the program is terminated. What this means is that the value of a variable can only be accessed when a program is running. When the program has finished execution, these variables are not accessible anymore from anywhere in the computer. In order to use them again, you will have to run the program once again.&lt;/p&gt;

&lt;p&gt;If you wish to store and retrieve variable values in your programs, consider using a file or database to store these variables. Variables stored in files and databases are stored in the secondary storage of the computer (e.g. Hard Disk Drive (HDD)) and remains for as long as you want them. They can also be retrieved from the computer’s memory even after shutting down and booting up the computer.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#variables-in-python"&gt;
  &lt;/a&gt;
  Variables in Python
&lt;/h3&gt;

&lt;p&gt;In Python, variables are nothing different from the definition above. Python allows us to create variables and use them in our programs, as well as manipulate the values of these variables. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#variable-naming-convention"&gt;
  &lt;/a&gt;
  Variable Naming Convention
&lt;/h4&gt;

&lt;p&gt;Below are some of the rules that variables you must abide by when naming variables in Python.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Do not use reserved keywords as a variable name. For example , keywords like class, int, def, while, else, try, e.t.c. &lt;/li&gt;
&lt;li&gt;You cannot use special characters such as @, #, $, %, ^, &amp;amp; , e.t.c. when naming variables&lt;/li&gt;
&lt;li&gt;Variable names are case sensitive. For example, age and Age are two different variables.&lt;/li&gt;
&lt;li&gt;Variable names should start with an alphabet or an underscore(_) character.&lt;/li&gt;
&lt;li&gt;A variable name can only contain the characters A-Z, a-z, 0-9 and underscore(_).&lt;/li&gt;
&lt;li&gt;You cannot start the variable name with a number.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#variable-declaration-and-usage"&gt;
  &lt;/a&gt;
  Variable Declaration and Usage
&lt;/h4&gt;

&lt;p&gt;Variables in python can be declared and used in different ways. Here, we will be exploring some of the ways variables can be declared and used.&lt;br&gt;
The snippet below declares and used the variable &lt;code&gt;message&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# prints the value of message to the console
&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 


&lt;span class="c1"&gt;## output
# Hello, World!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet above is the simplest way you can declare a variable in Python. But wait, what if I need to make my variable names more descriptive?  Python has got your back. According to &lt;a href="https://www.python.org/dev/peps/pep-0008/#id43"&gt;PEP 8 Style guide&lt;/a&gt;, variable names should be lowercase, with words separated by underscores as necessary to improve readability. In a situation where you might want to use long and descriptive variable names, you can simply separate it with an underscore like in the snippet below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# long and descriptive variable names
&lt;/span&gt;&lt;span class="n"&gt;secret_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hey, here is my secret"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secret_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;## output
# Hey, here is my secret
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Python also allows you to declare variables in a more flexible and dynamic way. Unlike other statically typed programming languages like Java, Python is a dynamically typed language and you don’t need to care much about the type of a variable during declaration. You can declare multiple variables of different types on the same line. Let’s see how this looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Declare multiple variables in a single line
# doing it the conventional way
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Prince"&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="n"&gt;hobby&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Swimming"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Name:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" Age:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" Hobby: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hobby&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# doing it the Python way
&lt;/span&gt;&lt;span class="n"&gt;my_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_hobby&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Prince"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Swimming"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Name:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" Age:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" Hobby: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_hobby&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;## output
# Name: Prince  Age: 12  Hobby:  Swimming
# Name: Prince  Age: 12  Hobby:  Swimming
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#reassigning-variables"&gt;
  &lt;/a&gt;
  Reassigning Variables
&lt;/h4&gt;

&lt;p&gt;Python allows you to reassign variables after they are declared, just like most programming languages allow you to. This process is known as “writing into a variable”. When you reassign a variable, the previous value is lost and the new value is then stored.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Reassigning variables
&lt;/span&gt;&lt;span class="n"&gt;my_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# reassign the value of my_age
&lt;/span&gt;&lt;span class="n"&gt;my_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;## output
# 20
# 21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of &lt;code&gt;my_age&lt;/code&gt; was initially 20, but after printing it on the console and then reassigning it, the value changed to 21. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#operation-on-variables"&gt;
  &lt;/a&gt;
  Operation on Variables
&lt;/h4&gt;

&lt;p&gt;You can also perform some operations on the values of your variables. This is one of the great benefits variables give to us. In a situation where you want to perform operations on a very lengthy value many times in your programs. You don’t need to use that length value everywhere in your program. You can simply store the value with a shorter variable name and use it throughout your program. Let’s try this out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Operations on variables
&lt;/span&gt;
&lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.142857143&lt;/span&gt;
&lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;
&lt;span class="n"&gt;perimeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perimeter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;## output
# 276.571428584
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can perform any arithmetic operations on numbers in Python. From the snippet above, we can also operate on variables and literals (2 from the code example), provided they are all numbers (either integers or with decimal points). The value 3.142857143  from the code example is long and you might have a hard time holding it in your head. Storing it in PI makes it easily accessible and can be used throughout our programs.&lt;br&gt;
Strings are also not left out here as well as you can perform operations on strings as shown in the code example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# String operations
&lt;/span&gt;&lt;span class="n"&gt;msg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello"&lt;/span&gt;
&lt;span class="n"&gt;msg2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"World"&lt;/span&gt;
&lt;span class="n"&gt;full_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;msg2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;## output
# HelloWorld
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most common operation on string is &lt;strong&gt;concatenation&lt;/strong&gt;. This is simply appending one string to the end of the other using the (+) operator. You can only concatenate a string with another string. If you try to do otherwise, Python will throw a &lt;code&gt;TypeError&lt;/code&gt;.&lt;br&gt;
The (*) operator can also be used on strings. But instead of appending to the end of the string, it rather duplicates the string according to the integer value specified.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# String operations
&lt;/span&gt;&lt;span class="n"&gt;fav_language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Python"&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fav_language&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;## output
# PythonPythonPythonPythonPython
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also note that the value specified must be an integer. Using otherwise will also throw a &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#variable-scope-local-and-global-variables"&gt;
  &lt;/a&gt;
  Variable Scope: Local and Global Variables
&lt;/h4&gt;

&lt;p&gt;Variables declared in the programs we have written so far are available throughout the program. This means it can be accessed from anywhere in the program.&lt;br&gt;
But things begin to get complicated when we start writing complex programs that involve functions which carry out a particular task. This is where the concept of &lt;strong&gt;variable scope&lt;/strong&gt; come in.&lt;br&gt;
The scope of a variable is the region of our program where the variable can be accessed. A variable can either have two scopes: Local and Global. &lt;br&gt;
A &lt;code&gt;local&lt;/code&gt; variable is a variable accessible within the function or method it is defined. This is useful when we want to isolate a variable from the remaining part of our program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Variable scope
# local variable 
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;my_real_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_real_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# my__real_age is locally available in some_function
&lt;/span&gt;
&lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# execute some_function
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_real_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# my_real_age is not available outside some_function 
&lt;/span&gt;

&lt;span class="c1"&gt;## output
# 19
# NameError: name 'my_real_age' is not defined
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;some_function()&lt;/code&gt; is executed, it prints out the value of &lt;code&gt;my_real_age&lt;/code&gt; to the console because &lt;code&gt;my_real_age&lt;/code&gt; is defined inside the function. But again, when we tried to print &lt;code&gt;my_real_age&lt;/code&gt; outside &lt;code&gt;some_function&lt;/code&gt;, a &lt;code&gt;NameError&lt;/code&gt; was thrown because &lt;code&gt;my_real_age&lt;/code&gt; is only available inside &lt;code&gt;some_function&lt;/code&gt; and not throughout the program. This is because &lt;code&gt;my_real_age&lt;/code&gt; is a local variable.&lt;br&gt;
A &lt;code&gt;global&lt;/code&gt; variable is a variable accessible throughout our program. It remains the same throughout our program and also throughout the module. Use the global variable when you want to use the variable throughout the methods and functions of your program. Let us use the same example from above, but this time making &lt;code&gt;my_real_age&lt;/code&gt; a global variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Variable scope
# global variable
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;my_real_age&lt;/span&gt;
    &lt;span class="n"&gt;my_real_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="c1"&gt;# globally available throughout this program
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_real_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_real_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# my_real_age is now available outside the some_function 
&lt;/span&gt;

&lt;span class="c1"&gt;## output
# 19
# 19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The program above runs successfully without any errors because &lt;code&gt;my_real_age&lt;/code&gt; is now declared as a global variable.&lt;br&gt;
Declaring variables either local or global is useful in cases where you wouldn't want variables to clash in your Python packages and modules. Other programming languages like Java use class variables, instance variables, and local variables for this concept. But it is more simplified with just local and global variables as presented by Python.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Having a good knowledge of variables in any programming language is as important as learning the language itself. This article discusses an overview of variables in Python. It starts with a general view of a variable and then narrows down to the Python view of a variable.&lt;br&gt;
And then discussed the naming convention of variables, declaration and usage, how to reassign variables, the numerous operations you can perform on variables, and finally the scope of a variable.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://docs.python.org/3/tutorial/index.html"&gt;official Python documentation &lt;/a&gt; to know more about variables.&lt;/p&gt;

&lt;p&gt;Feel free to drop your thoughts and suggestions in the discussion box. I will be available to attend to them. And also, if you have any questions, you can as well drop them in the discussion box.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>writing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Learning from the Masters: Design</title>
      <author>Mads Stoumann</author>
      <pubDate>Sat, 04 Dec 2021 17:12:48 +0000</pubDate>
      <link>https://dev.to/madsstoumann/learning-from-the-masters-design-35pg</link>
      <guid>https://dev.to/madsstoumann/learning-from-the-masters-design-35pg</guid>
      <description>&lt;p&gt;I recently bought two &lt;strong&gt;huge&lt;/strong&gt; books on the history of graphic design from Taschen – here's volume one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l9vwc9_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nklczeplni7pzxd6u4v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l9vwc9_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nklczeplni7pzxd6u4v.jpg" alt="History of Graphic Design" width="400" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As each book weighs more than 4 kg, I can only read for about half an hour, or I'll lose the blood-circulation in my legs!&lt;/p&gt;

&lt;p&gt;I find it &lt;em&gt;very&lt;/em&gt; inspirational to look at beautiful designs from these &lt;strong&gt;masters of design&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;One thing I tend to do, and can &lt;strong&gt;highly recommend&lt;/strong&gt;, is trying to &lt;em&gt;recreate a classic design&lt;/em&gt; to something you can use on the web.&lt;/p&gt;

&lt;p&gt;Take a look at this simple example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0akKDHuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/beyglufxogl1ml0ht3hv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0akKDHuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/beyglufxogl1ml0ht3hv.jpeg" alt="Blue Columns" width="768" height="1024"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How would &lt;strong&gt;you&lt;/strong&gt; do this in HTML and CSS?&lt;/p&gt;

&lt;p&gt;There's no right or wrong answer – and you can probably think of &lt;em&gt;many ways&lt;/em&gt; of accomplishing it. And that's the beauty of it: You can chose to do it in a known and familiar way – or chose to challenge yourself, going into unknown territory.&lt;/p&gt;

&lt;p&gt;Either way, I &lt;strong&gt;guarentee&lt;/strong&gt; you'll learn something. I always do.&lt;/p&gt;




&lt;p&gt;Now, back to the blue columns. Notice how each blue column is &lt;em&gt;half&lt;/em&gt; the size of the previous column? In CSS Grid, with the smallest column being &lt;code&gt;1fr&lt;/code&gt;, it's:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.columns&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding five &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s inside a wrapper with &lt;code&gt;class="columns"&lt;/code&gt;, we get this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tjxaijiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q23qmxe4078w9hal55i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tjxaijiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q23qmxe4078w9hal55i.png" alt="Five blue columns" width="880" height="799"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, it's only a matter of &lt;code&gt;translateY()&lt;/code&gt;'ing columns 2-4, adding &lt;code&gt;aspect-ratio: 1/1.75&lt;/code&gt; to the first column, and we have the initial version:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJSgz1sM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxeqz2hyrkcc7tgazv8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJSgz1sM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxeqz2hyrkcc7tgazv8f.png" alt="Finished Blue Columns" width="880" height="1358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How can we “webify” this? That's up to your imagination! For me, the columns look a bit like books on a shelf, so I'll add some dynamic font-sizing using &lt;code&gt;clamp()&lt;/code&gt; and set the &lt;code&gt;writing-mode&lt;/code&gt; to &lt;code&gt;vertical-lr&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/MWEaVPL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Let's look at another example from the book – a beautiful, old movie-poster:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LQUZ0O0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1vbwkv99k14ndv76i1o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LQUZ0O0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1vbwkv99k14ndv76i1o.jpg" alt="No Way Out" width="600" height="744"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For me, this screams “clip-path” – so that's what I did, a bunch of layered &lt;code&gt;clip-path&lt;/code&gt;s:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/WNoxbLX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I also figured this could work as a custom header for an article – so I wrote a small piece on the “imposter syndrome” (something I have to deal with from time to time).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#one-final-example"&gt;
  &lt;/a&gt;
  One final example
&lt;/h2&gt;

&lt;p&gt;There are hundreds of beautiful designs in the Taschen-books – currently, I've fallen in love with this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YI3QjNj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bush8b10gkz99uyawnt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YI3QjNj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bush8b10gkz99uyawnt.jpg" alt="Red Circle" width="594" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've started to create the red circle, using a &lt;code&gt;radial-gradient&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3deg&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#FFF&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;52%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3deg&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;57%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#FFF&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;59%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3deg&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;64%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#FFF&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;66%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3deg&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uMRDAuf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77ra6g0ldnnnwvwi56mi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uMRDAuf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77ra6g0ldnnnwvwi56mi.png" alt="Red Circle CSS" width="772" height="772"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But then again, I might switch to &lt;code&gt;svg&lt;/code&gt;, animate the indivdual rings, add text-on-a-path etc. &lt;/p&gt;

&lt;p&gt;Maybe you might find this whole “recreate classic designs in CSS” silly or a waste of time – but believe me: it's fun, challenging, and &lt;em&gt;always&lt;/em&gt; a great way to learn new stuff!&lt;/p&gt;

&lt;p&gt;If you've become inspired to do something similar, or already &lt;em&gt;have&lt;/em&gt; done, please share links to your work in the comments.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>design</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AWS Re:Invent 2021 #Reaction Final Part</title>
      <author>Gerardo Castro Arica</author>
      <pubDate>Sat, 04 Dec 2021 17:05:48 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-reinvent-2021-reaction-final-part-1m65</link>
      <guid>https://dev.to/aws-builders/aws-reinvent-2021-reaction-final-part-1m65</guid>
      <description>&lt;p&gt;AWS re: Invent 2021 has come to an end. It has been a week of total ecstasy. A week has passed since I published this post at the pre-inaugural midnight madness moment:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XiHZGfTY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zBhlBNbp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497606/182b3786-6675-442f-8997-f1532fb32418.png" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/aws-reinvent-2021-reaction-5e9c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;AWS Re:Invent 2021 #Reaction &lt;/h2&gt;
      &lt;h3&gt;Gerardo Castro Arica for AWS Community Builders  ・ Nov 29 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#news&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Now, let me tell you a summary of the brightest and most outstanding moments that happened for me during Werner's keynote.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keynote with Dr. Werner Vogels&lt;/strong&gt;&lt;br&gt;
Besides having had one of the best intros I have ever seen, listening to Werner's keynote was like going back in time, the beginnings of many services such as EC2 among others were remembered, since 2006. If you see the intro in detail, We will see references to the past like that "box" and we see that Werner remembers when he announced Lambda for the first time. Why so much nod to the past?&lt;/p&gt;

&lt;p&gt;After the nod to the past about EC2 instances, boom! nod to the future with EC2 M1 Mac Instances, what will come next? kind of InstancesVerse? we won't know yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yKfG5cD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m53rmr3jmxo6xlas3snl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yKfG5cD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m53rmr3jmxo6xlas3snl.png" alt="EC2 M1 Mac Instances" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other of the best announcements of this keynote is the launch of 30 new AWS Local Zones, including 2 AWS Local Zones in LATAM. This after highlighting how AWS has been working to offer a better user experience with very low latencies thanks to the large number of regions, and not to mention the more than 216 Edge Locations that it now has.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ojvg_tG4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jxv0uzloceg75yaqjvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ojvg_tG4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jxv0uzloceg75yaqjvt.png" alt="AWS Local Zones" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our much-loved Amplify Studio comes with a huge upgrade. Now it allows us to create applications in a matter of hour, with a nice UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ELvO595--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njweaih4n7p55hanmv9u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ELvO595--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njweaih4n7p55hanmv9u.png" alt="AWS Amplify Studio" width="880" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I liked the most about this new release is its integration with the very powerful design tool &lt;a href="//figma.com"&gt;Figma&lt;/a&gt;. That is, you have the development of your application without the need to throw code, and with a single click, you export all that UI to Figma for prototyping. What more can you ask? Yes, I am a fan of Figma.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhqVUmcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwlh3wk6pdgnfr4oty9l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhqVUmcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwlh3wk6pdgnfr4oty9l.png" alt="Amplify Studio and Figma" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following that line "Dev", because now SDK is compatible with runtime like Swift, Kotlin and Rust.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjSPPsnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/212wqp8guquekldkck7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjSPPsnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/212wqp8guquekldkck7c.png" alt="SDKs" width="880" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sustainability pillar&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P1XfLNzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lkry9qdfss8qa2a3awj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1XfLNzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lkry9qdfss8qa2a3awj.png" alt="Pilar de sostenibilidad" width="880" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Goodbye StackOverFlow, Welcome AWS re:Post&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s6kjApCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny6jj5g9jomxbt4jfao1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s6kjApCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny6jj5g9jomxbt4jfao1.png" alt="AWS re:Post" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You asked for this. Basically, this is your fault.&lt;br&gt;
By Werner Vogels.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3mw_SiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vvhnewh00vvf3m4k2vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3mw_SiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vvhnewh00vvf3m4k2vv.png" alt="AWS Services" width="880" height="368"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to see the complete Keynote, this is the video:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8_Xs8Ik0h1w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>aws</category>
      <category>discuss</category>
      <category>news</category>
      <category>meta</category>
    </item>
    <item>
      <title>Controlling auto publishing for coordinated releases on Netlify</title>
      <author>Phil Hawksworth</author>
      <pubDate>Sat, 04 Dec 2021 16:48:52 +0000</pubDate>
      <link>https://dev.to/netlify/controlling-auto-publishing-for-coordinated-releases-on-netlify-2558</link>
      <guid>https://dev.to/netlify/controlling-auto-publishing-for-coordinated-releases-on-netlify-2558</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Throughout December we'll be &lt;a href="https://www.netlify.com/blog/2021/12/01/highlighting-a-different-netlify-feature-each-day-in-december/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=lock-deploys"&gt;highlighting a different Netlify feature each day&lt;/a&gt;. It might just be the thing you need to unlock those creative juices, and &lt;a href="https://www.netlify.com/blog/2021/12/01/dusty-domains-your-forgotten-domains-raise-money-for-charity/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=lock-deploys"&gt;dust off that domain&lt;/a&gt; you registered but never deployed! Keep an eye &lt;a href="https://www.netlify.com/blog/2021/12/01/highlighting-a-different-netlify-feature-each-day-in-december/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=lock-deploys"&gt;on the blog&lt;/a&gt; and on &lt;a href="https://twitter.com/netlify"&gt;Twitter&lt;/a&gt; for each feature!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By locking deploys you can stick with your currently published deploy even though more updates and builds are taking place. Builds still happen when you commit changes, but they aren't published.&lt;/p&gt;

&lt;p&gt;This is a very good way to say, "hey I will be working on this site all day and I'll be pushing commits as I go, but don't make them live until I'm ready."&lt;/p&gt;

&lt;p&gt;This can be a very helpful technique for coordinating lots of updates for a big launch or announcement. Everything can be readied and verified, and then all go live instantly at the click of a button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-lock-a-deploy"&gt;
  &lt;/a&gt;
  How to lock a deploy
&lt;/h3&gt;

&lt;p&gt;When you deploy a site and navigate to the &lt;code&gt;Deploys&lt;/code&gt; tab of your Netlify UI, you will see a &lt;code&gt;Stop auto publishing&lt;/code&gt; button. If you click that button, the currently published version of this site will be locked and subsequent deploys will be built and queued.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6zeiyWc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.netlify.com/67417e338bab6944322c2a35a9f40879c8a7dec0/b1b0d/img/blog/lock-deploy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6zeiyWc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.netlify.com/67417e338bab6944322c2a35a9f40879c8a7dec0/b1b0d/img/blog/lock-deploy.png" alt="The Stop Auto Publishing button in the Deploys page of the Netlify admin" title="Stop Auto Publishing button" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unlock-a-locked-deploy"&gt;
  &lt;/a&gt;
  Unlock a locked deploy
&lt;/h3&gt;

&lt;p&gt;This part is pretty intuitive as you'd expect. Once clicked, the button state will change to &lt;code&gt;Start auto publishing&lt;/code&gt; will give you the opportunity to unlock the currently locked version and re-start auto-publishing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that previously built deploys will not auto-publish when you re-start auto publishing. You'll need to choose which of your new deploys you want to publish, by clicking &lt;code&gt;Publish deploy&lt;/code&gt; in the summary page of any of your deploys.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cibQ5TTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.netlify.com/2d2bf3b78c17c9e1df9a763a90727e446114ade2/f4578/img/blog/publish-deploy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cibQ5TTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.netlify.com/2d2bf3b78c17c9e1df9a763a90727e446114ade2/f4578/img/blog/publish-deploy.png" alt="The Publish deploy button in a deploy summary page" title="The Publish deploy button" width="880" height="530"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More information
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/site-deploys/manage-deploys/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=lock-deploys#locked-deploys"&gt;Docs: locked deploys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netlify.com/products/build/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=lock-deploys"&gt;Netlify Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>netlify</category>
      <category>tips</category>
      <category>deployment</category>
    </item>
    <item>
      <title>Build a Mini Buymeacoffee dApp Using Solidity + Ethereum Smart Contract + ReactJs + TailwindCSS</title>
      <author>Olubisi Idris Ayinde💡</author>
      <pubDate>Sat, 04 Dec 2021 16:42:44 +0000</pubDate>
      <link>https://dev.to/olanetsoft/build-a-mini-buymeacoffee-dapp-using-solidity-ethereum-smart-contract-reactjs-tailwindcss-26j5</link>
      <guid>https://dev.to/olanetsoft/build-a-mini-buymeacoffee-dapp-using-solidity-ethereum-smart-contract-reactjs-tailwindcss-26j5</guid>
      <description>&lt;p&gt;Blockchain is typically one of the highest-paying programming industries, with developers earning between $150,000 and $175,000 per year on average as salaried employees. Sound interesting, right?&lt;/p&gt;

&lt;p&gt;To learn more about a developer roadmap and how to get started, &lt;a href="https://blog.idrisolubisi.com/web-3-a-developer-roadmap-and-resources-to-get-started"&gt;Check here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we will Build a Mini Buymeacoffee dAPP Using Solidity, Ethereum Smart Contract, ReactJs, and tailwind CSS. It'll be a platform where anyone on the internet can learn a little about us and send us money to purchase coffee + a note, with the information being kept on the blockchain via an Ethereum smart contract. (A smart contract is essentially code that stays on the blockchain and can be read and written from; we'll go over this in more detail later.)&lt;/p&gt;

&lt;p&gt;We'll create the smart contract and deploy it. We will also build a website that will allow people to connect their wallets and engage with our smart contract.&lt;/p&gt;

&lt;p&gt;Here is a link to the &lt;a href="https://buymeacoffee.vercel.app/"&gt;Live Demo&lt;/a&gt; and the GitHub Repositories 👉 &lt;a href="https://github.com/Olanetsoft/buymeacoffee-fe"&gt;Frontend&lt;/a&gt; and &lt;a href="https://github.com/Olanetsoft/buymeacoffee-be"&gt;Backend/Smart Crontract&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let us ensure we have Node/NPM installed on our PC. If you don't have it, head over &lt;a href="https://hardhat.org/tutorial/setting-up-the-environment.html"&gt;here&lt;/a&gt; to for a guide&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project-setup-and-installation"&gt;
  &lt;/a&gt;
  Project Setup and Installation
&lt;/h2&gt;

&lt;p&gt;Next, let's head over to the terminal. We'll need to &lt;code&gt;cd&lt;/code&gt; into the directory we wish to work with and then run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir mini-buymeacoffee-be
cd mini-buymeacoffee-be
npm init -y
npm install --save-dev hardhat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, we should have a hardhat. Let's get a sample project going by running the command below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We'll go with the option of creating a sample project. Accept all requests.&lt;br&gt;
Installing hardhat-waffle and hardhat-ethers is required for the sample project. These are some of the other things we'll be using later:).&lt;/p&gt;

&lt;p&gt;Just in case it didn't do it automatically, we will install these other requirements.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev @nomiclabs/hardhat-waffle ethereum-waffle chai @nomiclabs/hardhat-ethers ethers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To make sure everything is working, run:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We will see a passed test result in our console.&lt;/p&gt;

&lt;p&gt;It is now possible for us to Delete &lt;code&gt;sample-test.js&lt;/code&gt; from the test folder. Delete &lt;code&gt;sample-script.js&lt;/code&gt; from the scripts directory as well. After that, go to contracts and delete &lt;code&gt;Greeter.sol&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The folders themselves should not be deleted!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, under the contracts directory, we'll create a file called CoffeePortal.sol. When using Hardhat, file layout is really crucial, so pay attention!&lt;br&gt;
We're going to start with the basic structure of every contract.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

import "hardhat/console.sol";

contract CoffeePortal {

    constructor() payable {
        console.log("Yo! Smart Contract");
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To build and deploy our smart contract, navigate to the &lt;code&gt;scripts&lt;/code&gt; folder, create a new file called &lt;code&gt;run.js,&lt;/code&gt; and update it with the following code snippet:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const main = async () =&amp;gt; {

// This will actually compile our contract and generate the necessary files we need to work with our contract under the artifacts directory.
  const coffeeContractFactory = await hre.ethers.getContractFactory('CoffeePortal');
  const coffeeContract = await coffeeContractFactory.deploy();

  await coffeeContract.deployed(); // We'll wait until our contract is officially deployed to our local blockchain! Our constructor runs when we actually deploy.

 console.log("Coffee Contract deployed to:", coffeeContract.address);
};

const runMain = async () =&amp;gt; {
  try {
    await main();
    process.exit(0);
  } catch (error) {
    console.log(error);
    process.exit(1);
  }
};

runMain();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's run it!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat run scripts/run.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You should see something similar to what we have below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vkzsUhK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638189667475/M60gQS37I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vkzsUhK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638189667475/M60gQS37I.png" alt="hardhat compilation result" width="880" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a working smart contract 🥳 Let us deploy it to a network by making it available to everyone worldwide.&lt;/p&gt;

&lt;p&gt;Under the &lt;code&gt;scripts&lt;/code&gt; folder, create a file called &lt;code&gt;deploy.js&lt;/code&gt;. Here's the code for it. It looks super similar to run.js.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const main = async () =&amp;gt; {
  const [deployer] = await hre.ethers.getSigners();
  const accountBalance = await deployer.getBalance();

  console.log("Deploying contracts with account: ", deployer.address);
  console.log("Account balance: ", accountBalance.toString());

  const Token = await hre.ethers.getContractFactory("CoffeePortal");
  const portal = await Token.deploy();
  await portal.deployed();

  console.log("CoffeePortal address: ", portal.address);
};

const runMain = async () =&amp;gt; {
  try {
    await main();
    process.exit(0);
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
};

runMain();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now the command below we're going to deploy locally using the localhost network for test:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat run scripts/deploy.js --network localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We should have something similar to what we have below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qz5ytMrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638190358448/Us0z6ba0U.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qz5ytMrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638190358448/Us0z6ba0U.png" alt="Rinkeby Network" width="880" height="211"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-and-deploying-coffeecontract-to-blockchain"&gt;
  &lt;/a&gt;
  Building and Deploying CoffeeContract to Blockchain
&lt;/h2&gt;

&lt;p&gt;Everything is now in place, including the test script and the 'deploy.js' file. With the following code snippet, we'll update the Smart Contract, run.js, and deploy.js files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;contracts/CoffeePortal.sol&lt;/code&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Update &lt;code&gt;scripts/run.js&lt;/code&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Update &lt;code&gt;scripts/deploy.js&lt;/code&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now it's time to get down to business, deploying to the real blockchain.&lt;/p&gt;

&lt;p&gt;We'll need to sign up for an &lt;a href="https://alchemy.com/?r=37c4f8545ef30da7"&gt;Alchemy account&lt;/a&gt; before we can deploy to the blockchain.&lt;/p&gt;

&lt;p&gt;Alchemy basically allows us to broadcast our contract creation transaction so that miners can pick it up as soon as possible. The transaction is then broadcasted to the blockchain as a legitimate transaction once it has been mined. After that, everyone's copy of the blockchain is updated.&lt;/p&gt;

&lt;p&gt;We'll create an app as shown below after signing up. Remember to change the network selection to Rinkeby because that's where we'll be deploying.&lt;/p&gt;

&lt;p&gt;We switched it from mainnet to Rinkeby for a reason. Because it's real money, and it's not worth squandering! We'll start with a "testnet," which is a clone of "mainnet" but utilizes fictitious money so we can experiment as much as we like. However, it's crucial to note that testnets are operated by genuine miners and are designed to simulate real-world conditions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6THJMJc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638229612454/rkzNZJkqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6THJMJc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638229612454/rkzNZJkqe.png" alt="Alchemy App" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Afterward, we will need to grab our keys as shown below, and store them for later use:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I085s4We--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638230176052/6u192pmH3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I085s4We--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638230176052/6u192pmH3.png" alt="Alchemy keys" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll need some fake ETH in our testnet account, and we'll have to request some from the network. This fake ETH can only be used on this testnet. Rinkeby can get some phony ETH by using a faucet.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;th&gt;Amount&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MyCrypto&lt;/td&gt;
&lt;td&gt;&lt;a href="https://app.mycrypto.com/faucet"&gt;https://app.mycrypto.com/faucet&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Buildspace&lt;/td&gt;
&lt;td&gt;&lt;a href="https://buildspace-faucet.vercel.app/"&gt;https://buildspace-faucet.vercel.app/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.025&lt;/td&gt;
&lt;td&gt;1d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ethily&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ethily.io/rinkeby-faucet/"&gt;https://ethily.io/rinkeby-faucet/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.2&lt;/td&gt;
&lt;td&gt;1w&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Official Rinkeby&lt;/td&gt;
&lt;td&gt;&lt;a href="https://faucet.rinkeby.io/"&gt;https://faucet.rinkeby.io/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3 / 7.5 / 18.75&lt;/td&gt;
&lt;td&gt;8h / 1d / 3d&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Table by &lt;a href="https://buildspace.so"&gt;Buildspace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our hardhat.config.js file needs to be updated. This can be found in the smart contract project's root directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
require("@nomiclabs/hardhat-waffle");
require("dotenv").config();

// This is a sample Hardhat task. To learn how to create your own go to
// https://hardhat.org/guides/create-task.html
task("accounts", "Prints the list of accounts", async (taskArgs, hre) =&amp;gt; {
  const accounts = await hre.ethers.getSigners();

  for (const account of accounts) {
    console.log(account.address);
  }
});

// You need to export an object to set up your config
// Go to https://hardhat.org/config/ to learn more

/**
 * @type import('hardhat/config').HardhatUserConfig
 */
module.exports = {
  solidity: "0.8.4",
  networks: {
    rinkeby: {
      url: process.env.STAGING_ALCHEMY_KEY,
      accounts: [process.env.PRIVATE_KEY],
    },
  },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If we look at the code snippet above, we can see that some keys were read from the &lt;code&gt;.env&lt;/code&gt; file, as well as the import at the top of &lt;code&gt;require("dotenv").config()&lt;/code&gt;, which implies we'll need to install the dotenv package and also create a &lt;code&gt;.env&lt;/code&gt; file using the command below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -D dotenv

touch .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Inside the .env file, add the following keys:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STAGING_ALCHEMY_KEY= // Add the key we copied from the Alchemy dashboard here
PRIVATE_KEY= // Add your account private key here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To get our account private key is easy, check out this &lt;a href="https://metamask.zendesk.com/hc/en-us/articles/360015289632-How-to-Export-an-Account-Private-Key"&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now we can run the command to deploy our contract to a real blockchain network&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat run scripts/deploy.js --network rinkeby
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here's what our output should look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BRjAi542--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638231542632/8XWvfuQLM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRjAi542--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638231542632/8XWvfuQLM.png" alt="Rinkeby Output" width="880" height="113"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yay 🥳 we just deployed our contract.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#set-up-frontend-react-client"&gt;
  &lt;/a&gt;
  Set up Frontend React Client
&lt;/h2&gt;

&lt;p&gt;It's time to get our website up and running! Our smart contract is completed, but we need to figure out how our front end can interact with it as soon as possible!&lt;/p&gt;

&lt;p&gt;To create a new project, we use the &lt;code&gt;npx create-next-app -e with-tailwindcss&lt;/code&gt; command to scaffold a new project in a directory of our choice.&lt;/p&gt;

&lt;p&gt;This command creates a Next.js project with TailwindCSS set up. TailwindCSS is a utility-first CSS framework packed with classes to help us style our web page.&lt;/p&gt;

&lt;p&gt;To install the dependencies, we use the commands:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd &amp;lt;project name&amp;gt; 
npm install ethers react-toastify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once the app is created and the dependencies are installed, we will see a message with instructions for navigating to our site and running it locally. We do this with the command.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next.js will start a hot-reloading development environment accessible by default at &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We need to connect our wallet to the blockchain in order for our website to communicate with it. Our website will have permission to call smart contracts on our behalf after we connect our wallet to our website. Remember, it's the same as logging into a website.&lt;/p&gt;

&lt;p&gt;All of our work will be done in index.js, which can be found under &lt;code&gt;pages&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;We need to import abi and update our contractAddress in the code sample above. Let's start by creating a folder named &lt;code&gt;utils&lt;/code&gt;, then using the following command to create a file called &lt;code&gt;CoffeePortal.json&lt;/code&gt; inside the &lt;code&gt;utils&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir utils
touch CoffeePortal.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following that, we'll need our contract address as well as the content that will be updated in the &lt;code&gt;CoffeePortal.json&lt;/code&gt; file. What's the best way to get it? &lt;/p&gt;

&lt;p&gt;Let's go back to the smart contract project we worked on before, then navigate to &lt;code&gt;artifacts/contracts/coffeePortal.json&lt;/code&gt; and copy the entire content inside it, as well as our contract address, which was displayed in our terminal when we deployed our contract to the blockchain.&lt;/p&gt;

&lt;p&gt;We will update the &lt;code&gt;CoffeePortal.json&lt;/code&gt; file with what we copied and also update index.js as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ...

import Head from "next/head";

// Import abi
import abi from "../utils/CoffeePortal.json";

export default function Home() {
  /**
   * Create a variable here that holds the contract address after you deploy!
   */
  const contractAddress = "";  // Add contract address here

   // ...
  return (
    &amp;lt;div className="flex flex-col items-center justify-center min-h-screen py-2"&amp;gt;
      [...]
    &amp;lt;/div&amp;gt;
  );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Its time to test our app, we should have something similar to what we have below when we visit &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---CVz3-IL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234155936/Oa2fK6Yjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---CVz3-IL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234155936/Oa2fK6Yjk.png" alt="DApp landing page" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, clicking connect wallet button should redirect us to the MetaMask UI where we will grant the site access as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrhSTVvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234397266/dUjQPY6X1o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrhSTVvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234397266/dUjQPY6X1o.png" alt="MetaMask" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FRKMUIG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234407639/NcDP4cGoy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FRKMUIG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234407639/NcDP4cGoy.png" alt="MetaMask Connecting" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then our UI should look similar to what is shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Ebrb_-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234464150/gbp-L6l4B.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Ebrb_-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234464150/gbp-L6l4B.png" alt="Buy Me A Coffee - DApp" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now support, by buying a coffee worth $5 and also providing our name and any preferred message to the owner 😊&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJjuPKza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234934356/YCwD8GSlk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJjuPKza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234934356/YCwD8GSlk.png" alt="Buy A Coffee" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGbp7B6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234964158/-u-_9Q-zi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGbp7B6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638234964158/-u-_9Q-zi.png" alt="Connect MetaMask" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9xC9Nn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638235016882/6TjHhS-5R.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9xC9Nn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638235016882/6TjHhS-5R.png" alt="Minning" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Completed...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyRS0CAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638235049991/1tN74rrlc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyRS0CAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638235049991/1tN74rrlc.png" alt="Transaction Completed" width="880" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another coffee support:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUQPEafF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638235139683/68GyVavYH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUQPEafF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638235139683/68GyVavYH.png" alt="Blockchain Transaction" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we observe, the page updates in real-time once a transaction is completed; this is the result of the event we introduced to our smart contract, and React, of course, effortlessly updates the UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we learned how to build a mini buymeacoffee dAPP using solidity, ethereum smart contract, react, and tailwind CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ethereum.org/en/developers/docs/"&gt;Ethereum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dabit3/the-complete-guide-to-full-stack-ethereum-development-3j13"&gt;Fullstack Dapp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unsplash.com/photos/jpsocjU9R7s"&gt;Cover Photo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'd love to connect with you at &lt;a href="https://twitter.com/olanetsoft"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/olubisi-idris-ayinde-05727b17a/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/Olanetsoft"&gt;GitHub&lt;/a&gt; | &lt;a href="https://idrisolubisi.com/"&gt;Portfolio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you in my next blog article. Take care!!!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>web3</category>
    </item>
    <item>
      <title>Security and Authentication in MongoDB</title>
      <author>The Nerdy Dev</author>
      <pubDate>Sat, 04 Dec 2021 16:39:11 +0000</pubDate>
      <link>https://dev.to/thenerdydev/security-and-authentication-in-mongodb-22k4</link>
      <guid>https://dev.to/thenerdydev/security-and-authentication-in-mongodb-22k4</guid>
      <description>&lt;p&gt;Hey guys 👋🏻,&lt;br&gt;
In this article, let us understand about &lt;strong&gt;Security and Authentication in MongoDB&lt;/strong&gt;. We will understand the security aspect from the perspective of developers and NOT for the database admins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eiDELpaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnebhz6azoqxzz1imz22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eiDELpaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnebhz6azoqxzz1imz22.png" alt="Image description" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was first published on &lt;a href="https://the-nerdy-dev.com/"&gt;https://the-nerdy-dev.com/&lt;/a&gt;.&lt;br&gt;
Check the website for more interesting articles and tutorials on Web Development.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-the-most-important-parts-for-securing-the-mongodb-database-"&gt;
  &lt;/a&gt;
  What are the most important parts for securing the mongodb database ?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1XrCn0ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jn1hz8pqzxch92vg6qd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1XrCn0ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jn1hz8pqzxch92vg6qd.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#security-checklist"&gt;
  &lt;/a&gt;
  Security Checklist
&lt;/h2&gt;

&lt;p&gt;For hardening the Mongo Environment and making sure that it is safe and cannot be tampered from outside, we need a security checklist. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#authentication-and-authorization"&gt;
  &lt;/a&gt;
  Authentication and Authorization
&lt;/h2&gt;

&lt;p&gt;The database that we will be using to store data and users will know the users and your code will have to authenticate as a database in order to get data, update data and do all kinds of stuffs with the data that you get back. It is the most important building block for securing your MongoDB environment. &lt;/p&gt;

&lt;p&gt;Another important building block is the &lt;strong&gt;Transport Encryption&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#transport-encryption"&gt;
  &lt;/a&gt;
  Transport Encryption
&lt;/h2&gt;

&lt;p&gt;This means the data that you sent from your app to the server should be encrypted so that no &lt;em&gt;MAN IN THE MIDDLE attack&lt;/em&gt; can compromise your credentials. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#encryption-at-rest"&gt;
  &lt;/a&gt;
  Encryption at Rest
&lt;/h2&gt;

&lt;p&gt;This means that the data in the database also should be encrypted otherwise if someone somehow gets access to your database servers well they can then read plain text information easily.&lt;/p&gt;

&lt;p&gt;So it is a must to store the data in the database in the encrypted format as well.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#auditing"&gt;
  &lt;/a&gt;
  Auditing
&lt;/h2&gt;

&lt;p&gt;This is the pure server admin task and not the concern for the developer but Mongodb provides auditing to servers to see who did what and what actions occurred so that you can control and are aware of what is happening inside the database &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#server-amp-network-config-and-setup"&gt;
  &lt;/a&gt;
  Server &amp;amp; Network Config and Setup
&lt;/h2&gt;

&lt;p&gt;Additionally the server on which you run database server (like physical machine that is running somewhere or the cloud provider like &lt;strong&gt;AWS&lt;/strong&gt;) the instances that we book there the network that you are using for hosting your Mongo Server should also be secure. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#backups-and-software-updates"&gt;
  &lt;/a&gt;
  Backups and Software Updates
&lt;/h2&gt;

&lt;p&gt;As an owner of the database environment you should regularly take backup of your data. The softwares that you are running should be up to date. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#let-us-talk-about-the-below-three-in-great-detail-"&gt;
  &lt;/a&gt;
  Let us talk about the below three in great detail :
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Authentication and Authorization &lt;/li&gt;
&lt;li&gt;Transport Encryption &lt;/li&gt;
&lt;li&gt;Encryption at Rest &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#understanding-the-role-based-access-control"&gt;
  &lt;/a&gt;
  Understanding the Role Based Access Control
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#authentication-and-authorization"&gt;
  &lt;/a&gt;
  Authentication and Authorization
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt; is all about identification of the users in the database&lt;br&gt;
Coming to Authorization,&lt;br&gt;
&lt;strong&gt;Authorization&lt;/strong&gt; is all about what these users may actually do in the database &lt;/p&gt;

&lt;p&gt;MongoDB employs the &lt;strong&gt;Role Based Access Control System&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Let us say we have the MongoDB server with three databases &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Admin database which is the special database that exists out of the box &lt;/li&gt;
&lt;li&gt;Blog database &lt;/li&gt;
&lt;li&gt;Shop database &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Authentication can be enabled in a very easy way and suddenly MongoDBs server only allows access to the authenticated users. &lt;/p&gt;

&lt;p&gt;Let us considered a user like some data analyst/software developer who directly connects with our shell or say we have the app code that uses the driver to connect to the database. The analyst or developer is NOT a user of your application, not the user &lt;br&gt;
of the web application that you are building and we now need to login to the MongoDB Server. With our username and password, we can do that since authentication was enabled that means user needs to exist on the MongoDB server otherwise the login of the user will not be possible. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#now-say-we-get-loggedin-but-we-have-no-rights-to-do-anything"&gt;
  &lt;/a&gt;
  Now say we get loggedin but we have no rights to do anything...
&lt;/h2&gt;

&lt;p&gt;The users in MongoDB are not just entities that are made up of username and passwords but they are also assigned some roles and these roles are basically the group of the privileges &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A privilege is a combination of the resource and the action.&lt;/p&gt;

&lt;p&gt;A resource would be something like the products collection in the Shop database and an action would be an insert() command for example to insert a product for example in our products collection &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Actions are basically the task commands that we can do in our MongoDB database and resources define what resources we can access based on the  access privileges that we are granted. &lt;/p&gt;

&lt;p&gt;Typically multiple privileges are grouped into something called as the &lt;strong&gt;ROLES&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;That means a user has a role and that role includes all the privileges holding actions and resources that makes sense for this user.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;This is the model that MongoDB uses since it is the most flexible model that Mongo has defined for its userbase. This allows us to create multiple owners where we can give every user exactly the rights that every user needs. We do not want to give every user all the rights because if we give all rights to any unauthorized person then they may do something malicious with our database which they were not designated to do. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#different-types-of-database-users"&gt;
  &lt;/a&gt;
  Different types of database users
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Admin&lt;/strong&gt; - A real person who needs to be able to manage the database configuration and create users etc, create new databases, create new collections. The admin would need to be required to be work with data in the database. He does not need to be able to insert or fetch data. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer&lt;/strong&gt; - A developer needs to be able to insert, delete, update or fetch data (all the CRUD operations that we discussed). The developer is not responsible for creating the users and manage the database configurations. This is not your job and the app code should not be able to do that. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Data Scientist&lt;/strong&gt; - A data scientist needs to be able to fetch the data. He/she does not need to be able to create users, manage the database configuration or insert, edit, delete, update the data. His sole responsibility is to work with large amounts of data and derive valuable insights that are important for an organization. Working with large dataset along with strong analytic skills are a must for a data scientist. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-user"&gt;
  &lt;/a&gt;
  CREATING A USER
&lt;/h2&gt;

&lt;p&gt;Let us learn about creating and editing a user in MongoDB.  &lt;/p&gt;

&lt;p&gt;Users are created by a user with special permissions with the&lt;br&gt;&lt;br&gt;
&lt;code&gt;createUser&lt;/code&gt; command. You then create the user with a &lt;code&gt;username&lt;/code&gt; and the &lt;code&gt;password&lt;/code&gt;. This user will have a couple of roles or &lt;strong&gt;atleast&lt;/strong&gt; one role and each role will then contain a bunch of privileges. A user is created on the database. This does not limit the access of the user to that authentication database. But this is the database against which the user will have to authenticate. The exact rights the user has depends on the role that you have assigned to the user. &lt;/p&gt;

&lt;p&gt;If we have the need we can also &lt;code&gt;updateUser&lt;/code&gt; command, this means the admin can update the user that means for example we can use this to change the password &lt;/p&gt;

&lt;p&gt;&lt;code&gt;mongod --auth&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hpfm5QJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9no82gbbxv7hfdn6y9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hpfm5QJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9no82gbbxv7hfdn6y9j.png" alt="Image description" width="798" height="262"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;We can also make use of the command &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;db.auth("username goes here","password goes here")&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;for signing up the user. &lt;/p&gt;

&lt;p&gt;We can also connect by writing  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;mongo -u usernamesgoeshere -p passwordgoeshere&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;But what if we don't have a user to begin with. MongoDB has a special solution which is called the &lt;strong&gt;localhost exception&lt;/strong&gt;. More on this can be read here : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.mongodb.com/manual/core/localhost-exception"&gt;https://docs.mongodb.com/manual/core/localhost-exception&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are allowed to create one user who then can be allowed to create more users. &lt;/p&gt;

&lt;p&gt;For this you need to switch to the &lt;code&gt;admin&lt;/code&gt; database &lt;br&gt;
and run the command &lt;/p&gt;

&lt;p&gt;&lt;code&gt;use admin&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Then create a user&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alex1234&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userAdminAnyDatabase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;]})&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#built-in-roles"&gt;
  &lt;/a&gt;
  Built in Roles
&lt;/h2&gt;

&lt;p&gt;MongoDB ships with a bunch of built in roles to cover most of the &lt;br&gt;
use cases that you may require. You can also create your own roles &lt;br&gt;
but that is pure admin task. &lt;/p&gt;

&lt;p&gt;We got a typical role for the users of the database &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#database-user"&gt;
  &lt;/a&gt;
  Database user
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;read readWrite&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You also got typical admin roles like the &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dbadmin"&gt;
  &lt;/a&gt;
  dbAdmin
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#useradmin"&gt;
  &lt;/a&gt;
  userAdmin
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#dbowner"&gt;
  &lt;/a&gt;
  dbOwner
&lt;/h3&gt;


&lt;h2&gt;
  &lt;a href="#all-database-roles"&gt;
  &lt;/a&gt;
  All database roles
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#readanydatabase"&gt;
  &lt;/a&gt;
  readAnyDatabase
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#readwriteanydatabase"&gt;
  &lt;/a&gt;
  readWriteAnyDatabase
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#useradminanydatabase"&gt;
  &lt;/a&gt;
  userAdminAnyDatabase
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#dbadminanydatabase"&gt;
  &lt;/a&gt;
  dbAdminAnyDatabase
&lt;/h3&gt;

&lt;p&gt;Besides these roles we also have the &lt;strong&gt;cluster administration&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clusters&lt;/strong&gt; are the concept where you have multiple MongoDB servers working together. So that you can have multiple machines running MongoDB servers and store your data which can then work and scale together. And managing this cluster of servers is ofcourse a meaningful task &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#clustermanager"&gt;
  &lt;/a&gt;
  clusterManager
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#clustermonitor"&gt;
  &lt;/a&gt;
  clusterMonitor
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#hostmanager"&gt;
  &lt;/a&gt;
  hostManager
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#clusteradmin"&gt;
  &lt;/a&gt;
  clusterAdmin
&lt;/h3&gt;


&lt;h2&gt;
  &lt;a href="#backuprestore-roles"&gt;
  &lt;/a&gt;
  Backup/Restore roles
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#backup"&gt;
  &lt;/a&gt;
  backup
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#restore"&gt;
  &lt;/a&gt;
  restore
&lt;/h3&gt;


&lt;h2&gt;
  &lt;a href="#superuser-roles"&gt;
  &lt;/a&gt;
  SuperUser Roles
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#dbowneradmin"&gt;
  &lt;/a&gt;
  dbOwner(admin)
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#useradminadmin"&gt;
  &lt;/a&gt;
  userAdmin(admin)
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#useradminanydatabase"&gt;
  &lt;/a&gt;
  userAdminAnyDatabase
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#root-the-most-powerful-role"&gt;
  &lt;/a&gt;
  root (the most powerful role)
&lt;/h3&gt;

&lt;p&gt;root superuser can do everything &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#assigning-roles-to-users-and-databases"&gt;
  &lt;/a&gt;
  ASSIGNING ROLES TO USERS AND DATABASES
&lt;/h3&gt;

&lt;p&gt;Run this command using the credentials of the created user &lt;/p&gt;

&lt;p&gt;&lt;code&gt;mongo --authenticationDatabase admin -u usernamegoeshere -p passwordgoeshere&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;appdev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="na"&gt;pwd&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;roles&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readWrite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Successfully added user: { "user" : "appdev", "roles" : [ "readWrite" ] }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can now authenticate in that user with the following command &lt;br&gt;
&lt;code&gt;db.auth('appdev','dev')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This gives 1. This 1 signal indicates that this works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-ssl-transport-encryption"&gt;
  &lt;/a&gt;
  Adding SSL Transport Encryption
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#transport-encryption"&gt;
  &lt;/a&gt;
  Transport Encryption
&lt;/h2&gt;

&lt;p&gt;We have our application and this could be Node, Django, PHP &lt;br&gt;
application that uses the MongoDB driver to communicate with &lt;br&gt;
MongoDB Server to store the data and ofcourse it is important &lt;br&gt;
that the data is encrypted whilst it is in transport so that &lt;br&gt;
someone who is spoofing our connection can not read our data. &lt;br&gt;
and MongoDB has everything for that built into it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-we-can-secure-our-data-whilst-it-is-own-its-way-from-client-to-the-server-"&gt;
  &lt;/a&gt;
  How we can secure our data whilst it is own its way from client to the server ?
&lt;/h2&gt;

&lt;p&gt;To encrypt the data whilst it is in transport, MongoDB uses &lt;br&gt;
&lt;strong&gt;SSL&lt;/strong&gt; or actually &lt;strong&gt;TLS&lt;/strong&gt; for encryption and uses public private key pair to decrypt this information on the server and to prove &lt;br&gt;
to the server to prove that who we are. It is secure way of &lt;br&gt;
encrypting our data and decrypting our data on the server. &lt;/p&gt;

&lt;p&gt;While its own its way it is consistently updated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#encryption-at-rest"&gt;
  &lt;/a&gt;
  ENCRYPTION AT REST
&lt;/h2&gt;

&lt;p&gt;The data which is stored on our MongoDB Server in a file this &lt;br&gt;
ofcourse might also be encrypted so that we can decrypt there &lt;br&gt;
two different things &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The overall storage (feature built in for enterprise versions)&lt;/li&gt;
&lt;li&gt;The thing as a developer you can do is to encrypt certain values in your code. For example, if you are storing the user password you should hash that password and not store the plain text you can go so far for all data you always have a way for encrypting that. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;So you can encrypt both your data as well as the overall file storage to achieve max security that is possible&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Here are some of the important links that you must reference to know more about Security and Authentication in MongoDB: &lt;/p&gt;

&lt;p&gt;Official "Encryption at Rest" Docs: &lt;a href="https://docs.mongodb.com/manual/core/security-encryption-at-rest/"&gt;https://docs.mongodb.com/manual/core/security-encryption-at-rest/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official Security Checklist: &lt;a href="https://docs.mongodb.com/manual/administration/security-checklist/"&gt;https://docs.mongodb.com/manual/administration/security-checklist/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is SSL/ TLS? =&amp;gt; &lt;a href="https://www.acunetix.com/blog/articles/tls-security-what-is-tls-ssl-part-1/"&gt;https://www.acunetix.com/blog/articles/tls-security-what-is-tls-ssl-part-1/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official MongoDB SSL Setup Docs: &lt;a href="https://docs.mongodb.com/manual/tutorial/configure-ssl/"&gt;https://docs.mongodb.com/manual/tutorial/configure-ssl/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official MongoDB Users &amp;amp; Auth Docs: &lt;a href="https://docs.mongodb.com/manual/core/authentication/"&gt;https://docs.mongodb.com/manual/core/authentication/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official Built-in Roles Docs: &lt;a href="https://docs.mongodb.com/manual/core/security-built-in-roles/"&gt;https://docs.mongodb.com/manual/core/security-built-in-roles/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official Custom Roles Docs: &lt;a href="https://docs.mongodb.com/manual/core/security-user-defined-roles/"&gt;https://docs.mongodb.com/manual/core/security-user-defined-roles/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;⚡Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>mongodb</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Local Storage in React JS!</title>
      <author>Saleh Mubashar</author>
      <pubDate>Sat, 04 Dec 2021 16:23:22 +0000</pubDate>
      <link>https://dev.to/salehmubashar/local-storage-in-react-js-2n33</link>
      <guid>https://dev.to/salehmubashar/local-storage-in-react-js-2n33</guid>
      <description>&lt;p&gt;Hi guys!&lt;/p&gt;

&lt;p&gt;Saving user progress and any temporary information is very essential in a web application. In React JS, this can be achieved using &lt;code&gt;local Storage&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-localstorage"&gt;
  &lt;/a&gt;
  What is localStorage?
&lt;/h2&gt;

&lt;p&gt;Local Storage is a web storage object to save data on a user’s computer locally, meaning it is saved in user sessions and unlike cookies, it has no expiration date. The &lt;code&gt;localStorage()&lt;/code&gt; API allows you to access the Storage object.&lt;br&gt;
We can store all kinds of data in a storage object. It is a built in hook so &lt;strong&gt;you do not need to import anything.&lt;/strong&gt; The best and most common way is to first store data in a state and then in the storage object.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-an-empty-storage-object"&gt;
  &lt;/a&gt;
  Creating an empty Storage object
&lt;/h2&gt;

&lt;p&gt;Firstly we will create an empty storage object. I will not create an entire app in this tutorial but simply show how to use the storage object.&lt;br&gt;
We will create a simple React app and inside a file, in this case App.js, and then create function called &lt;code&gt;saveData()&lt;/code&gt;. We will run this function on a button click. I know, very simple and boing, but the objective here is to learn the localstorage api.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;saveData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Object 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;saveData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Save&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we are creating a new storage object using &lt;code&gt;setItem&lt;/code&gt;. 'Test object ' can be replaced by any string, state or variable. &lt;/p&gt;

&lt;p&gt;Now, if you click the button, the text 'Test object' will be saved. But the question is, &lt;strong&gt;how to view the saved data as a developer&lt;/strong&gt;?🤔.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#viewing-saved-data"&gt;
  &lt;/a&gt;
  Viewing saved data
&lt;/h2&gt;

&lt;p&gt;To see the data or storage object, open dev tools or inspect and go to the application tab as shown below. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J2JkhPe5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhaa83b5jxe1t2fxp4ro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J2JkhPe5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhaa83b5jxe1t2fxp4ro.png" alt="Dev tools" width="880" height="791"&gt;&lt;/a&gt;.&lt;br&gt;
Next, click on the local storage option in the left menu and click on the localhost tab. The Object &lt;code&gt;Object 1&lt;/code&gt; will be visible.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9OdjCL3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ivd5lio5750ai4wfewk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OdjCL3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ivd5lio5750ai4wfewk.png" alt="Object" width="880" height="790"&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Note!&lt;/u&gt;&lt;/strong&gt;: never save sensitive or important info here. It is only used to save temporary info or user progress not things like passwords.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#saving-multiple-items"&gt;
  &lt;/a&gt;
  Saving multiple items.
&lt;/h3&gt;

&lt;p&gt;We can save multiple items as separate objects or a single array in one object. However, always remember to convert an array to a string using &lt;code&gt;JSON.stringify()&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#retrieving-stored-data"&gt;
  &lt;/a&gt;
  Retrieving stored data
&lt;/h2&gt;

&lt;p&gt;We can get the saved data or use it using &lt;code&gt;getItem()&lt;/code&gt;. In the below example, we will display the saved data using a second button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//save data&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;saveData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Object 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;//get data&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Object 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;saveData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Save&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/br&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Display&lt;/span&gt; &lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deleting-storage-objects"&gt;
  &lt;/a&gt;
  Deleting Storage Objects
&lt;/h2&gt;

&lt;p&gt;Storage object are never deleted automatically and must be done by either of the 2 ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Right clicking on the object in the console and deleting it&lt;/li&gt;
&lt;li&gt;Create a delete function in your code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use the &lt;code&gt;localStorage.removeItem()&lt;/code&gt; method to delete and object or its contents through your code by a user event, for example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deleteData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Object 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Thank you all for reading this post!&lt;br&gt;
I hope you all found the video useful.&lt;br&gt;
Check out my other &lt;a href="https://discover.hubpages.com/technology/React-Router-V6-The-Main-Changes"&gt;tutorials&lt;/a&gt; on &lt;a href="https://hubpages.com/@salehmubashar"&gt;hubpages&lt;/a&gt;.&lt;br&gt;
If you like my work, you can buy me a coffee and share your thoughts 🎉☕&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/salehmubashar"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until next time!&lt;br&gt;
Cheers! 🎉&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Debug Docker PHP Project on PHPStorm using Xdebug</title>
      <author>ピメン.ヴィ.ブリタニア</author>
      <pubDate>Sat, 04 Dec 2021 16:22:00 +0000</pubDate>
      <link>https://dev.to/pimenvibritania/debug-docker-php-project-on-phpstorm-using-xdebug-224f</link>
      <guid>https://dev.to/pimenvibritania/debug-docker-php-project-on-phpstorm-using-xdebug-224f</guid>
      <description>&lt;h1&gt;
  &lt;a href="#my-first-article"&gt;
  &lt;/a&gt;
  My First Article
&lt;/h1&gt;

&lt;p&gt;In this article I will share my debugging experience with Xdebug on PHP development environment in Docker, but before going any further, I assume you are familiar with &lt;code&gt;Docker&lt;/code&gt;, &lt;code&gt;Docker Compose&lt;/code&gt;, and using &lt;code&gt;PHPStorm&lt;/code&gt; as your IDE.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h2&gt;

&lt;p&gt;This my structure code:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E4VJ9AbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozk2b4pf62xfo6fs3bhc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E4VJ9AbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozk2b4pf62xfo6fs3bhc.png" alt="Image description" width="324" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I put all of configuration for docker inside &lt;code&gt;docker&lt;/code&gt; folder,  but what conf we need for now is only :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nginx/nginx.conf&lt;/li&gt;
&lt;li&gt;php/conf.d/php.ini&lt;/li&gt;
&lt;li&gt;docker-compose.yml&lt;/li&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is all my configuration:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;nginx/nginx.conf&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server {
    listen 80;
    server_name web;

    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    error_page 404 /index.php;
    root /var/www/public;
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SERVER_NAME $server_name;
        fastcgi_param SERVER_NAME $host;
    }
    location / {
        try_files $uri $uri/ /index.php?$query_string;
        gzip_static on;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Dockerfile&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM php:8.1.0-fpm

ADD https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions /usr/local/bin/

RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    git \
    curl \
    zip \
    nano \
    vim \
    unzip

RUN chmod +x /usr/local/bin/install-php-extensions &amp;amp;&amp;amp; \
    install-php-extensions gd xdebug pdo-mysql

RUN docker-php-ext-install pdo pdo_mysql

RUN php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
RUN php composer-setup.php --install-dir=. --filename=composer
RUN mv composer /usr/local/bin/

COPY ../ /var/www/

WORKDIR /var/www

EXPOSE 9000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;docker-compose.yml&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '3.8'

services:
    app:
        build:
            context: ./
            dockerfile: Dockerfile
        image: myapp/php
        container_name: myapp
        restart: always
        working_dir: /var/www/
        volumes:
            - ../:/var/www
            - ./php/conf.d/php.ini:/usr/local/etc/php/php.ini
            - /tmp/xdebug:/tmp/xdebug
    nginx:
        image: nginx:1.19-alpine
        container_name: mywebserver
        restart: always
        ports:
            - 8000:80
        volumes:
            - ../:/var/www
            - ./nginx:/etc/nginx/conf.d

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;php/conf.d/php.ini&lt;br&gt;
You just copy default php.ini and add these line of xdebug conf, and remember your &lt;code&gt;xdebug.idekey&lt;/code&gt; value&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Xdebug]

xdebug.mode=debug,trace
xdebug.client_host=docker.for.mac.host.internal
xdebug.client_port=9003
xdebug.idekey = docker

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;note : &lt;code&gt;host.docker.internal&lt;/code&gt; for linux&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lets-debugging"&gt;
  &lt;/a&gt;
  Let's debugging
&lt;/h2&gt;

&lt;p&gt;I hope your container runs without any problems, then now we are going to configure PHPStorm.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Here we want to configure our PHP docker interpreter.
a. Go to `Preferences &amp;gt; PHP, add new interpreter, select new interpreter from Docker, vagrant, etc...&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DlBPP18y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy5swoo29y6hxcbo597w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlBPP18y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy5swoo29y6hxcbo597w.png" alt="Image description" width="880" height="244"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGtOLTFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2aildq0pllhnp6if7s9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGtOLTFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2aildq0pllhnp6if7s9.png" alt="Image description" width="498" height="224"&gt;&lt;/a&gt; &lt;br&gt;
  b. Create new Server.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HkCM3wIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0vgsspiw2betr2k7dc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HkCM3wIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0vgsspiw2betr2k7dc4.png" alt="Image description" width="500" height="328"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SvLiBOgS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8ybpphk0z1ja593bu4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SvLiBOgS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8ybpphk0z1ja593bu4e.png" alt="Image description" width="584" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;c. After selecting an Interpreter, we are going to map our working project with container path, my working project path is &lt;code&gt;$HOME/DOO/api docker&lt;/code&gt; and I will map into &lt;code&gt;/var/www/&lt;/code&gt;, so change the &lt;code&gt;Docker container&lt;/code&gt; value:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--asXL705d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss79mxlcgue9kk14haln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asXL705d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss79mxlcgue9kk14haln.png" alt="Image description" width="732" height="777"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;d. This the result :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VGbV7Y9n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73fkt9bkkj1ol7m43gu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VGbV7Y9n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73fkt9bkkj1ol7m43gu6.png" alt="Image description" width="739" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Xdebug configuration.&lt;br&gt;
a. Go to &lt;code&gt;Preferences &amp;gt; PHP &amp;gt; Debug&lt;/code&gt;, set like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fcU5Wt7e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgw7h1myum1a234pk2xr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fcU5Wt7e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgw7h1myum1a234pk2xr.png" alt="Image description" width="880" height="631"&gt;&lt;/a&gt;&lt;br&gt;
b. Go to &lt;code&gt;Preferences &amp;gt; PHP &amp;gt; Debug &amp;gt; Dbgp Proxy&lt;/code&gt;, set like this (note: IDE Key must same with the value of &lt;code&gt;xdebug.idekey&lt;/code&gt; on &lt;code&gt;php.ini&lt;/code&gt;):&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ozpGEvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wifwfsec6uaum4sosiiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ozpGEvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wifwfsec6uaum4sosiiw.png" alt="Image description" width="286" height="174"&gt;&lt;/a&gt;&lt;br&gt;
c. Go to &lt;code&gt;Run &amp;gt; Edit Configurations...&lt;/code&gt;, create a new &lt;code&gt;PHP Remote Debug&lt;/code&gt; configuration:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z830pGoe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et2pfh3vdt6s1uc179zs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z830pGoe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et2pfh3vdt6s1uc179zs.png" alt="Image description" width="660" height="312"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rmna_Fxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ph5obtmuc0q6m4terad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rmna_Fxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ph5obtmuc0q6m4terad.png" alt="Image description" width="880" height="228"&gt;&lt;/a&gt;&lt;br&gt;
d. Go to &lt;code&gt;Run &amp;gt; Web Server Debug Validation&lt;/code&gt;, on &lt;code&gt;Path to create validation script&lt;/code&gt; I point the value into my &lt;code&gt;public&lt;/code&gt; path of project, and &lt;code&gt;URL to validation script&lt;/code&gt; I point to my nginx docker host.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uqYxeThw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmftgwuirx26mctnqve0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uqYxeThw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmftgwuirx26mctnqve0.png" alt="Image description" width="581" height="472"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EXECUTE!&lt;br&gt;
a. Set breakpoint, and turning on &lt;code&gt;Start Listening for PHP Debug Connection&lt;/code&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fcv7BIyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkcvkv77nlvlpu0fhjdz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fcv7BIyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkcvkv77nlvlpu0fhjdz.png" alt="Image description" width="741" height="200"&gt;&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3cNxK4mi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dirxryrysns6p47hduz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3cNxK4mi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dirxryrysns6p47hduz.png" alt="Image description" width="564" height="101"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;b. Go to &lt;code&gt;Run &amp;gt; Debug&lt;/code&gt; then select the configuration what we made earlier (PHP Remote Debug):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aqKBhUUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2u64ax01bt7eoioly72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aqKBhUUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2u64ax01bt7eoioly72.png" alt="Image description" width="418" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;c. Go to your endpoint, and add query string with parameter &lt;code&gt;XDEBUG_SESSION_START&lt;/code&gt; and the value is your &lt;code&gt;IDE Key&lt;/code&gt;, then execute! :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZcGhjRyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vghuigr95oz3ax0q8hm5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZcGhjRyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vghuigr95oz3ax0q8hm5.png" alt="Image description" width="880" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Taraaaaa! &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IvfAR0qF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhc5dkcq6ppqysfpgn2k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IvfAR0qF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhc5dkcq6ppqysfpgn2k.png" alt="Image description" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>php</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Rust procedural macros step by step tutorial</title>
      <author>Alain Viguier</author>
      <pubDate>Sat, 04 Dec 2021 16:06:33 +0000</pubDate>
      <link>https://dev.to/dandyvica/rust-procedural-macros-step-by-step-tutorial-36n8</link>
      <guid>https://dev.to/dandyvica/rust-procedural-macros-step-by-step-tutorial-36n8</guid>
      <description>&lt;p&gt;Rust procedural macros are one of the most exciting feature of the language. They enable you to inject code at compile time, but differently from the method used for generics by monomorphization. Using very specific crates, you can build new code totally from scratch.&lt;/p&gt;

&lt;p&gt;I decided to write this article to share my experience, because event though the different resources are more and more widespread, it's not really straightforward at first sight.&lt;/p&gt;

&lt;p&gt;Let's see how it works. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-procedural-derive-macro"&gt;
  &lt;/a&gt;
  Building a procedural derive macro
&lt;/h2&gt;

&lt;p&gt;The operating principle of the procedural macros is quite simple: take a piece of code, called an input &lt;strong&gt;TokenStream&lt;/strong&gt;, convert it to an abstract syntax tree (&lt;strong&gt;ast&lt;/strong&gt;) which represents the internal structure of that piece for the compiler, build a new &lt;strong&gt;TokenStream&lt;/strong&gt; from what you've got at input (using the &lt;strong&gt;syn::parse()&lt;/strong&gt; method), and inject it in the compiler as an output piece of code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-a-procedural-derive-macro"&gt;
  &lt;/a&gt;
  Using a procedural derive macro
&lt;/h2&gt;

&lt;p&gt;A derive macro is used by declaring the&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive()]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;attribute, like for example the well-known:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(Debug)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-a-procedural-derive-macro"&gt;
  &lt;/a&gt;
  Building a procedural derive macro
&lt;/h2&gt;

&lt;p&gt;Suppose you want to create a &lt;strong&gt;WhoAmI&lt;/strong&gt; derive macro, to just print out the name of the structure under the derive statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(WhoAmI)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;f64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you need to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a brand new lib crate (procedural macros must be defined in their own crate, otherwise if you try to use 
the macro in the same one, you face the following error: &lt;strong&gt;can't use a procedural macro from the same crate that defines it&lt;/strong&gt;)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cargo new &lt;span class="nt"&gt;--lib&lt;/span&gt; &lt;span class="nb"&gt;whoami&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;add the required dependencies to &lt;strong&gt;Cargo.toml&lt;/strong&gt; and flags:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[lib]&lt;/span&gt;
&lt;span class="py"&gt;proc-macro&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="nn"&gt;syn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0.82"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"full"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"extra-traits"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="py"&gt;quote&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0.10"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;define a new regular &lt;strong&gt;fn&lt;/strong&gt; Rust fonction like this one in &lt;strong&gt;lib.rs&lt;/strong&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;proc_macro&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TokenStream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;// no need to import a specific crate for TokenStream&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;syn&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// Generate a compile error to output struct name&lt;/span&gt;
&lt;span class="nd"&gt;#[proc_macro_derive(WhoAmI)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;whatever_you_want&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TokenStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;TokenStream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// convert the input tokens into an ast, specially from a derive&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;syn&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DeriveInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;syn&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nd"&gt;panic!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"My struct name is: &amp;lt;{}&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="py"&gt;.ident&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="nn"&gt;TokenStream&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can't use the regular Rust macros to print out some information on &lt;em&gt;stdout&lt;/em&gt; (like &lt;strong&gt;println!()&lt;/strong&gt;), the only way is to panic with an output message, to stop the compiler and tell that guy to output the message for you. Not really convenient to debug, nor easy to fully understand the nuts and bolts of a procedural macro !&lt;/p&gt;

&lt;p&gt;Now, in order to use that awesome macro (not really handy because it won't compile): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you have to define a new crate:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cargo new thisisme
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;add our macro crate as a dependency:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="c"&gt;# provided both crates are on the same directory level, otherwise replace by your crate's path&lt;/span&gt;
&lt;span class="nn"&gt;whoami&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"../whoami"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;replace &lt;strong&gt;main.rs&lt;/strong&gt; source code with:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// import our crate&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;whoami&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WhoAmI&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(WhoAmI)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;f64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;and compile the whole project:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;error: proc-macro derive panicked
&lt;/span&gt;&lt;span class="gp"&gt; --&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;src/main.rs:3:10
&lt;span class="go"&gt;  |
&lt;/span&gt;&lt;span class="gp"&gt;3 | #&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;derive&lt;span class="o"&gt;(&lt;/span&gt;WhoAmI&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;span class="go"&gt;  |          ^^^^^^
  |
&lt;/span&gt;&lt;span class="gp"&gt;  = help: message: My struct name is: &amp;lt;Point&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your can watch the compiler spitting the error message with defined in the procedural macro.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-procmacro2-crate-for-debugging-and-understanding-procedural-macros"&gt;
  &lt;/a&gt;
  Using the &lt;em&gt;proc-macro2&lt;/em&gt; crate for debugging and understanding procedural macros
&lt;/h2&gt;

&lt;p&gt;The previous method is unwieldy to say the least, and not meant to make you understand how to really leverage from&lt;br&gt;
procedural macros, because you can't really debug the macro (although it can change in the future).&lt;/p&gt;

&lt;p&gt;That's why the &lt;strong&gt;proc-macro2&lt;/strong&gt; exists: you can use its methods, along with its &lt;strong&gt;syn::parse2()&lt;/strong&gt; counterpart, in unit tests or regular binaries. You can then directly output the code generated to &lt;em&gt;stdout&lt;/em&gt; or save it into a "*.rs" file to check its content.&lt;/p&gt;

&lt;p&gt;Let's create a procedural macro artefact which auto-magically defines a function which calculates the summation of all fields, for the &lt;strong&gt;Point&lt;/strong&gt; structure.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a new binary crate
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cargo new fields_sum
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;add the dependencies:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;syn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0.82"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"full"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"extra-traits"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="py"&gt;quote&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0.10"&lt;/span&gt;
&lt;span class="py"&gt;proc-macro2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0.32"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Add the following code in the &lt;strong&gt;main.rs&lt;/strong&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// necessary for the TokenStream::from_str() implementation&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;str&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FromStr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;proc_macro2&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TokenStream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;format_ident&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;syn&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ItemStruct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// struct sample&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"struct Point { x : u16 , y : u16 }"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// create a new token stream from our string&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;TokenStream&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// build the AST: note the syn::parse2() method rather than the syn::parse() one&lt;/span&gt;
    &lt;span class="c"&gt;// which is meant for "real" procedural macros&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ItemStruct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;syn&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;parse2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// save our struct type for future use&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;struct_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="py"&gt;.ident&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;struct_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Point"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;// we have 2 fields&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="py"&gt;.fields&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;// syn::Fields is implementing the Iterator trait, so we can iterate through the fields&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="py"&gt;.fields&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// this is x&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x_field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="nf"&gt;.next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_field&lt;/span&gt;&lt;span class="py"&gt;.ident&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;// this is y&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y_field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="nf"&gt;.next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_field&lt;/span&gt;&lt;span class="py"&gt;.ident&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;// now the most tricky part: use the quote!() macro to generate code, aka a new&lt;/span&gt;
    &lt;span class="c"&gt;// TokenStream&lt;/span&gt;

    &lt;span class="c"&gt;// first, build our function name: point_summation&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;function_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;format_ident!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}_summation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;struct_type&lt;/span&gt;&lt;span class="nf"&gt;.to_lowercase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="c"&gt;// and our argument type. If we don't use the format ident macro, the function prototype&lt;/span&gt;
    &lt;span class="c"&gt;// will be: pub fn point_summation (pt : "Point")&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;argument_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;format_ident!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;struct_type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;// same for x and y&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;format_ident!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_field&lt;/span&gt;&lt;span class="py"&gt;.ident&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;format_ident!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_field&lt;/span&gt;&lt;span class="py"&gt;.ident&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="c"&gt;// the quote!() macro is returning a new TokenStream. This TokenStream is returned to&lt;/span&gt;
    &lt;span class="c"&gt;// the compiler in a "real" procedural macro&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;summation_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;quote!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; #&lt;span class="nf"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;#&lt;span class="n"&gt;argument_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;pt&lt;/span&gt;.#&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt;.#&lt;span class="n"&gt;y&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c"&gt;// output our function as Rust code&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;summation_fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now running our crate gives:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;pub fn point_summation (pt : &amp;amp; Point) -&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;u16 &lt;span class="o"&gt;{&lt;/span&gt; pt &lt;span class="nb"&gt;.&lt;/span&gt; x + pt &lt;span class="nb"&gt;.&lt;/span&gt; y &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, so good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#combining-tokenstreams"&gt;
  &lt;/a&gt;
  Combining &lt;strong&gt;TokenStream&lt;/strong&gt;s
&lt;/h2&gt;

&lt;p&gt;The previous example is straightforward because we knew in advance the number of fields in the struct.&lt;br&gt;
What if we don't know it beforehand ? Well we can use a special construct of &lt;strong&gt;quote!()&lt;/strong&gt; to generate the summation on all fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// create the list of tokens&lt;/span&gt;
&lt;span class="c"&gt;// tokens type is: impl Iterator&amp;lt;Item = TokenStream&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nd"&gt;quote!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt;.#&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c"&gt;// the trick is made by: 0 #(+ #tokens)*&lt;/span&gt;
&lt;span class="c"&gt;// which repeats the + sign on all tokens&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;summation_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;quote!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; #&lt;span class="nf"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;#&lt;span class="n"&gt;argument_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt; #&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; #&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;pub fn point_summation (pt : &amp;amp; Point) -&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;u16 &lt;span class="o"&gt;{&lt;/span&gt; 0 + pt &lt;span class="nb"&gt;.&lt;/span&gt; x + pt &lt;span class="nb"&gt;.&lt;/span&gt; y + pt &lt;span class="nb"&gt;.&lt;/span&gt; z + pt &lt;span class="nb"&gt;.&lt;/span&gt; t &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope this help !&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@smingot?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Stéphane Mingot&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Serving Your Static Files With Express</title>
      <author>Cherrypick14</author>
      <pubDate>Sat, 04 Dec 2021 15:16:44 +0000</pubDate>
      <link>https://dev.to/cherrypick14/serving-your-static-files-with-express-5g00</link>
      <guid>https://dev.to/cherrypick14/serving-your-static-files-with-express-5g00</guid>
      <description>&lt;p&gt;Getting started with Express&lt;/p&gt;

&lt;p&gt;What is Express?&lt;/p&gt;

&lt;p&gt;It's basically a web application framework for Node.&lt;/p&gt;

&lt;p&gt;First things first. Ensure your node.js env is set up. If not and you are a linux user, you can use a tool called Node Version Manager to help install node on your machine. &lt;strong&gt;Note&lt;/strong&gt;: You should have &lt;em&gt;git&lt;/em&gt; and &lt;em&gt;curl&lt;/em&gt; installed. To get started with &lt;em&gt;git&lt;/em&gt; and &lt;em&gt;curl&lt;/em&gt; if at all you don’t have them installed in your system’s package manager. Example on an ubuntu or Debian, one would run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install curl git 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So back to Express. Some of its &lt;strong&gt;merits&lt;/strong&gt; include its &lt;em&gt;flexibility _and _minimality&lt;/em&gt;. To get started using Express, you need to use NPM to install the module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get all dependencies that are needed to run the app, you run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have Express installed and an already existing directory like the one below, you’ll get to see something like this in the package.json file in “dependencies”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IAonJW-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojn4jvsebgkpns57dpe2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IAonJW-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojn4jvsebgkpns57dpe2.png" alt="Image description" width="658" height="754"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's talk about nodemon for a sec:&lt;/p&gt;

&lt;p&gt;From the above snip, you guys can note the nodemon in the devdependencies. It’s actually a tool that  helps node.js based  applications by &lt;strong&gt;automatically restarting&lt;/strong&gt; the node application&lt;br&gt;
when  file changes in the directory are &lt;strong&gt;spotted&lt;/strong&gt;. To install nodemon on your project as dev-dependency, just type;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install nodemon --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So to get started on serving your files with Express, make sure you have all your files &lt;strong&gt;including&lt;/strong&gt; the &lt;em&gt;index.html&lt;/em&gt; in your &lt;strong&gt;public directory&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The files can be served as below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Y2YoBn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcph705ty6x9qbhb5c62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Y2YoBn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcph705ty6x9qbhb5c62.png" alt="Image description" width="658" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Incase this doesn’t work out for you, you can try using serve-index. Much is explained in this article. Check it out here:&lt;/p&gt;

&lt;p&gt;Opened to any feedback. #Learning never stops&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/swlh/serve-directory-listings-in-an-express-app-with-serve-index-ff54f20c9636"&gt;https://medium.com/swlh/serve-directory-listings-in-an-express-app-with-serve-index-ff54f20c9636&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to contribute to open source: a guide for Rails beginners</title>
      <author>Felipe Vogel</author>
      <pubDate>Sat, 04 Dec 2021 14:40:54 +0000</pubDate>
      <link>https://dev.to/fpsvogel/how-to-contribute-to-open-source-a-guide-for-rails-beginners-31oj</link>
      <guid>https://dev.to/fpsvogel/how-to-contribute-to-open-source-a-guide-for-rails-beginners-31oj</guid>
      <description>&lt;p&gt;
  &lt;strong&gt;Table of Contents&lt;/strong&gt;
  &lt;ul&gt;
&lt;li&gt;&lt;a href="#find-a-project"&gt;Find a project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#set-up-the-project-on-your-local-machine"&gt;Set up the project on your local machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#become-familiar-with-the-codebase"&gt;Become familiar with the codebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#find-and-fix-an-issue"&gt;Find and fix an issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;
&lt;p&gt;Here's how I recently got started contributing to open-source Ruby on Rails projects. I'm pretty new to Rails, so if I can do it then you can too! (For more tips for beginning Rubyists, see &lt;a href="https://github.com/fpsvogel/learn-ruby-and-cs"&gt;my study plan&lt;/a&gt;.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-a-project"&gt;
  &lt;/a&gt;
  Find a project
&lt;/h2&gt;

&lt;p&gt;Here are a few beginner-friendly projects that I've come across. If you know of others, please let me know in the comments!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/discourse/discourse"&gt;Discourse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lobsters/lobsters"&gt;Lobsters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://rubyforgood.org/"&gt;Ruby for Good&lt;/a&gt; makes software for nonprofit organizations. Each of their projects has a Slack community, so they're extra easy to get into.

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rubyforgood/human-essentials"&gt;Human Essentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rubyforgood/casa"&gt;CASA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rubyforgood/circulate"&gt;Circulate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rubyforgood/inkind-admin"&gt;InKind Admin&lt;/a&gt; and &lt;a href="https://github.com/rubyforgood/inkind-volunteer"&gt;InKind Volunteer&lt;/a&gt; (Rails + React)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to widen your search, explore the resources at &lt;a href="https://www.firsttimersonly.com/"&gt;First Timers Only&lt;/a&gt;. As you consider projects to contribute to, keep these questions in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is the project active? Does it have recent activity and frequent commits?&lt;/li&gt;
&lt;li&gt;Does the &lt;code&gt;README.md&lt;/code&gt; have beginner-friendly instructions?&lt;/li&gt;
&lt;li&gt;Are there a variety of issues tagged "Good First Issue" or something similar?&lt;/li&gt;
&lt;li&gt;Are you interested in helping the project succeed?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#set-up-the-project-on-your-local-machine"&gt;
  &lt;/a&gt;
  Set up the project on your local machine
&lt;/h2&gt;

&lt;p&gt;Once you've chosen a project, follow the setup instructions in &lt;code&gt;README.md&lt;/code&gt; or &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;. You will probably run into problems; use your Google-fu to solve them. For example, here were my setup problems in Ubuntu in WSL2, for two of the projects listed above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Circulate:&lt;/strong&gt; The &lt;code&gt;bin/webpack-dev-server&lt;/code&gt; command didn't work until I &lt;a href="https://stackoverflow.com/a/69050300/4158773"&gt;downgraded to a previous version&lt;/a&gt;. Also, &lt;code&gt;chromedriver&lt;/code&gt; (for system tests) is not very straightforward to set up in WSL. The guide that worked for me is &lt;a href="https://linuxtut.com/en/c4d4ed7054b2ada463d6/"&gt;this one&lt;/a&gt; supplemented with &lt;a href="https://www.how2shout.com/how-to/use-gdebi-install-google-chrome-ubuntu-linux.html"&gt;this other one&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lobsters:&lt;/strong&gt; The &lt;code&gt;mysql2&lt;/code&gt; gem wasn't installing properly. It turns out I needed to first install MySQL (duh). So I followed &lt;a href="https://ostechnix.com/how-to-use-mysql-with-ruby-on-rails-application/"&gt;this guide&lt;/a&gt;, adding the extra step of &lt;code&gt;sudo service mysql start&lt;/code&gt; after installing the MySQL packages. I also had to &lt;a href="https://superuser.com/questions/980841/why-is-mysqld-pid-and-mysqld-sock-missing-from-my-system-even-though-the-val"&gt;create some missing files&lt;/a&gt; for MySQL and &lt;a href="https://stackoverflow.com/a/42742610/4158773"&gt;create a new MySQL user&lt;/a&gt; for the databases used by Rails. Oh, and I had to &lt;a href="https://stackoverflow.com/a/38538641/4158773"&gt;disable passwords&lt;/a&gt; before creating the new user, otherwise it couldn't be accessed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#become-familiar-with-the-codebase"&gt;
  &lt;/a&gt;
  Become familiar with the codebase
&lt;/h2&gt;

&lt;p&gt;Poke around and get a feel for what the app does and how it works. Here are some good starting points in a Rails app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the readme (of course)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config/routes.rb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the Gemfile&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db/schema.rb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#find-and-fix-an-issue"&gt;
  &lt;/a&gt;
  Find and fix an issue
&lt;/h2&gt;

&lt;p&gt;You can follow roughly these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure you've read the project's &lt;code&gt;README.md&lt;/code&gt; and (if it has one) &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Find an issue that is well-described and seems simple to fix. Often (but not always) these are tagged as "Good First Issue".&lt;/li&gt;
&lt;li&gt;At this point, some projects prefer that you claim the issue or leave a comment. Be sure to follow the project's contributing guidelines. Once you have the OK from the project maintainers, or if there are no pre-contributing steps, then it's time to work on the issue.&lt;/li&gt;
&lt;li&gt;Reproduce the issue on your local machine.&lt;/li&gt;
&lt;li&gt;Write a test that fails because of the issue. (Not all projects require this, but it's a good rule of thumb.)&lt;/li&gt;
&lt;li&gt;Fix the issue, and make sure your new test passes.&lt;/li&gt;
&lt;li&gt;Send back your fix by creating a PR (pull request). To learn how to make a PR, follow the steps in &lt;a href="https://github.com/firstcontributions/first-contributions"&gt;First Contributions&lt;/a&gt;. &lt;a href="https://gist.github.com/Chaser324/ce0505fbed06b947d962"&gt;Here is another guide&lt;/a&gt; with a few extra steps that are good to keep in mind. Also, if you find that you've cloned a project's repo before forking it, &lt;a href="https://gist.github.com/jagregory/710671"&gt;this guide&lt;/a&gt; explains how to get back on track by making your local copy point to your fork.&lt;/li&gt;
&lt;li&gt;Patiently wait for feedback from the project maintainers, and respond if they ask for more input from you.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If all goes well, your pull request will be accepted and you will have made your first contribution to open source! 🎉 From there you can keep an eye out for new issues in your favorite projects so that you can make even more contributions.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>rails</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Helpful Websites for frontend web development </title>
      <author>Mysterio</author>
      <pubDate>Sat, 04 Dec 2021 14:28:59 +0000</pubDate>
      <link>https://dev.to/shubhamtiwari909/helpful-websites-for-frontend-web-development-55a8</link>
      <guid>https://dev.to/shubhamtiwari909/helpful-websites-for-frontend-web-development-55a8</guid>
      <description>&lt;p&gt;Hello guys today i am going to show you some cool websites which can help you in front end web development and it is just for beginners.&lt;br&gt;
Lets get started...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;csslayout.io&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This one is helpful because it provides built-in designs and mini templates for your designs and also provide the snippet code which you can just copy and paste it in your code and adjust the content according to your need.&lt;/p&gt;

&lt;p&gt;Source - &lt;a href="https://csslayout.io/"&gt;https://csslayout.io/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Animate.css&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This one is also helpful as it provides many basic animation effects which can be used just by providing the class name of the animation which you want to use.&lt;/p&gt;

&lt;p&gt;Source - &lt;a href="https://animate.style/"&gt;https://animate.style/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wow.js -
This is also an animation library which you can combine with animate.css because the problem with animate.css animations is that all the animation in animate.css run when the page is loaded so, when you scroll down to the page you wont see the animation which is down to the page because the animation is already done when the page is loaded.So, to solve this problem we use wow.js.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source - &lt;a href="https://wowjs.uk/docs.html"&gt;https://wowjs.uk/docs.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is the link of a video of how to use wow.js with animate.css&lt;/p&gt;

&lt;p&gt;Youtube link - &lt;a href="https://www.youtube.com/watch?v=bd_jHBk8Kzw"&gt;https://www.youtube.com/watch?v=bd_jHBk8Kzw&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hover.css - 
This one is also great as you can create hover effects easily with hover.css by just providing the name of hover effect it the class attribute of the element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have covered the Hover.css tutorial in other blog below -&lt;br&gt;
Source - &lt;a href="https://dev.to/shubhamtiwari909/hover-effects-with-hovercss-52fd"&gt;https://dev.to/shubhamtiwari909/hover-effects-with-hovercss-52fd&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getwaves.io - 
This one is also helpful as you can generate many types of waves effect of any color and shapes and get the source code of it .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source - &lt;a href="https://getwaves.io/"&gt;https://getwaves.io/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uiGradients - 
This one is helpful as you can select the gradient out of many options available here and can generate the code and copy paste it into you css file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source - &lt;a href="https://uigradients.com/#Turquoiseflow"&gt;https://uigradients.com/#Turquoiseflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;THANK YOU FOR READING THIS POST AND IF YOU FIND ANY MISTAKE OR WANTS TO GIVE ANY SUGGESTION PLEASE MENTION IT IN THE COMMENT SECTION.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>uiweekly</category>
    </item>
  </channel>
</rss>
