<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Taking KubeMQ Build &amp; Deploy for a Test Drive: My Thoughts and Impressions</title>
      <author>Michael Bogan</author>
      <pubDate>Thu, 17 Jun 2021 15:12:37 +0000</pubDate>
      <link>https://dev.to/mbogan/taking-kubemq-build-deploy-for-a-test-drive-my-thoughts-and-impressions-1djg</link>
      <guid>https://dev.to/mbogan/taking-kubemq-build-deploy-for-a-test-drive-my-thoughts-and-impressions-1djg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As a full-stack developer who often takes on DevOps and infrastructure responsibilities, the following happens all too frequently. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; I need to set up a backend server for my app!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Google it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google result #1:&lt;/strong&gt; How to set up tech 1, tech 2, and tech 3 in just five minutes, for free!&lt;/p&gt;

&lt;p&gt;(skip the prereqs because who needs those, follow the instructions, hit an error)&lt;/p&gt;

&lt;p&gt;Hmm, let’s try that again…&lt;/p&gt;

&lt;p&gt;(install all the prereqs, follow the instructions, hit another error)&lt;/p&gt;

&lt;p&gt;Okay, maybe it’s just this article. Let’s try a different one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google result #2:&lt;/strong&gt; Make your own tech 2 and tech 3 server using Docker and Kubernetes.&lt;/p&gt;

&lt;p&gt;(follow the instructions, hit an error)&lt;/p&gt;

&lt;p&gt;Well...maybe the third time’s the charm?&lt;/p&gt;

&lt;p&gt;(day passes)&lt;/p&gt;

&lt;p&gt;Guess I’ll try again in the morning…&lt;/p&gt;

&lt;p&gt;While every tool promises to be simple to set up and use, the reality is that setting up infrastructure can be complex and unforgiving without the necessary experience. As such, I tend to shy away from instructions that consist of long lists of command-line operations, as more often than not they don’t work for me.&lt;/p&gt;

&lt;p&gt;I’ve recently been exploring &lt;a href="https://kubemq.io/"&gt;KubeMQ&lt;/a&gt;, a Kubernetes-native message queue. They’ve recently released a new web-based configuration tool called &lt;a href="https://build.kubemq.io"&gt;Build and Deploy&lt;/a&gt; which promises to make infrastructure setup as simple as filling in a form. &lt;/p&gt;

&lt;p&gt;In this article, I’ll cover what KubeMQ is, what Build and Deploy adds, and we’ll run through a test scenario with an API gateway and a Redis backend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-kubemq"&gt;
  &lt;/a&gt;
  What is KubeMQ?
&lt;/h2&gt;

&lt;p&gt;KubeMQ is a Kubernetes-native messaging app that is extremely lightweight and easy to play with. Historically speaking, message queues are large, resource-intensive applications. For example, the latest version of IBM MQ at the time of writing has &lt;a href="https://www.ibm.com/software/reports/compatibility/clarity-reports/report/html/softwareReqsForProduct?deliverableId=E3F333600B7F11EABCF401BE73544226&amp;amp;osPlatforms=Linux&amp;amp;duComponentIds=D005%7CS011%7CS006%7CS010%7CS008%7CS007%7CS009%7CA004%7CA003%7CA001%7CA002&amp;amp;mandatoryCapIds=16&amp;amp;optionalCapIds=30%7C341%7C47%7C12%7C9%7C1%7C25%7C20%7C28%7C184%7C185%7C70%7C16%7C15%7C26#!"&gt;significant hardware requirements&lt;/a&gt;, such as &amp;gt; 1.5 GB disk space and 3 GB of RAM. In contrast, the Docker container for KubeMQ is roughly ~30 MB and installs on my local machine nearly instantly.&lt;/p&gt;

&lt;p&gt;I’ve already written about how KubeMQ can simplify much of the complexity around &lt;a href="https://henryjin.dev/writing/microservice-messaging-in-kubernetes"&gt;connecting microservice architectures&lt;/a&gt; as well as &lt;a href="https://henryjin.dev/writing/kubemq-bridges-for-edge-computing"&gt;communicating between multiple edge and cloud environments&lt;/a&gt;, so I won’t repeat all of that here. To summarize, because it is lightweight and Kubernetes-native, KubeMQ unlocks new possibilities that simply aren’t possible with legacy message queues.&lt;/p&gt;

&lt;p&gt;So far, however, configuration has been a bit more difficult than I would like. &lt;a href="https://docs.kubemq.io/"&gt;Documentation&lt;/a&gt; is somewhat sparse, and configuration happens via either the command line or YML files. There are &lt;a href="https://github.com/kubemq-hub/kubemq-bridges/tree/master/examples"&gt;some examples online&lt;/a&gt;, but without context, it can be difficult to modify them to fit my needs. Through my experience with KubeMQ, configuration has been the main point of friction.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://build.kubemq.io/"&gt;KubeMQ Build &amp;amp; Deploy&lt;/a&gt;, which promises to make it simple to go from 0 to 100 with KubeMQ. Let’s take a look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-kubemq-build-amp-deploy"&gt;
  &lt;/a&gt;
  What is KubeMQ Build &amp;amp; Deploy?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EvV0iX5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhr45dglnu7wagud5iwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EvV0iX5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhr45dglnu7wagud5iwo.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://build.kubemq.io/"&gt;KubeMQ Build &amp;amp; Deploy&lt;/a&gt; is a new web-based tool that generates KubeMQ configuration YML files. These can then be applied to your K8s cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f &amp;lt;insert URL or filename here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, it’s a GUI that allows you to skip the command-line configuration process. As an added bonus, the YML files can be saved and applied any number of times. And as your familiarity with the system grows, you can build upon them by editing them on your own.&lt;/p&gt;

&lt;p&gt;All of these make KubeMQ Build &amp;amp; Deploy useful for a number of scenarios. Prototyping or trying to evaluate whether KubeMQ is for you? Build &amp;amp; Deploy makes that process significantly simpler, as you don’t need to learn YML in order to do so. &lt;/p&gt;

&lt;p&gt;Experienced already and need to build a complex production configuration? Create it in Build &amp;amp; Deploy, and then compare it to what you would have built manually to avoid unforeseen gaps in your infrastructure.&lt;/p&gt;

&lt;p&gt;Enough talk, let’s take it for a spin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-it-out-a-tutorial-to-connect-api-gateways-and-a-redis-store"&gt;
  &lt;/a&gt;
  Try it out! A tutorial to connect API gateways and a Redis store
&lt;/h2&gt;

&lt;p&gt;First, make sure that you have a local installation of Kubernetes (I’ll be using minikube on Windows) and a &lt;a href="https://account.kubemq.io/login/register"&gt;free account with KubeMQ&lt;/a&gt;. Second, make sure that you can successfully initialize KubeMQ:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f https://deploy.kubemq.io/init
kubectl apply -f https://deploy.kubemq.io/key/&amp;lt;your key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a minute or two, check your pods; you should see something like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cm8Fy2Tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pck4qf5ru8nowt0bg91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cm8Fy2Tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pck4qf5ru8nowt0bg91.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;KubeMQ has created a basic three-node cluster for you, and as long as it’s all running we are ready to continue.&lt;/p&gt;

&lt;p&gt;For reference in case you hit any issues, I’ve created a &lt;a href="https://github.com/henryjin3/kubemq-build-deploy"&gt;GitHub repo&lt;/a&gt; with all of my YML files. That said, the whole point is to try out Build &amp;amp; Deploy, let’s keep going and do that!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-the-api-gateway"&gt;
  &lt;/a&gt;
  Set up the API Gateway
&lt;/h3&gt;

&lt;p&gt;Next, head on over to &lt;a href="https://build.kubemq.io/"&gt;KubeMQ Build &amp;amp; Deploy&lt;/a&gt;. Since we already have the cluster, we need to configure the source (API gateway) as well as a target (Redis backend). Let’s start with the source:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IhaDwlZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk6eais2rkmnac0qvrvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IhaDwlZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk6eais2rkmnac0qvrvq.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From there, in the top right search “API” and you should see the HTTP source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_idzPXFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9tu580nx77wo61i02rk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_idzPXFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9tu580nx77wo61i02rk.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Update the name, and let’s make it go from /redis to a KubeMQ Query channel called Redis. Your configuration should look as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ciZQR-bN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdu94ou4bjiqnyt9efbw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciZQR-bN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdu94ou4bjiqnyt9efbw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit Save. Next, hit Deploy at the bottom right. Configure it to expose with a Node Port of 30000, and then hit “Get Deploy Manifests”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vLq47by1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z72lpbjgf8lmokynbmd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vLq47by1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z72lpbjgf8lmokynbmd9.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the link to automatically copy it to your clipboard. From there, paste it in your terminal and apply that configuration. If you want to take a look at the YML, simply copy the URL portion of the command and navigate to that URL in your browser. It should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: core.k8s.kubemq.io/v1alpha1
kind: KubemqConnector
metadata:
  name: kubemq-sources
  namespace: kubemq
spec:
  config: |
    bindings:
    - id: 84691jbourwif3uk
      name: api-source
      properties: {}
      source:
        kind: http
        properties:
          methods: post
          path: /redis
      target:
        kind: kubemq.query
        properties:
          address: kubemq-cluster-grpc.kubemq:50000
          channel: redis
  node_port: 30000
  replicas: 1
  service_type: NodePort
  type: sources
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s continue and set up the Redis backend.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-redis"&gt;
  &lt;/a&gt;
  Set up Redis
&lt;/h3&gt;

&lt;p&gt;Since it’s not part of KubeMQ, Build &amp;amp; Deploy won’t generate the configuration for you. You can go ahead and download &lt;a href="https://github.com/henryjin3/kubemq-build-deploy/blob/main/redis.yaml"&gt;this YML file&lt;/a&gt; from my GitHub which you can just apply. It should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nyqkoaJl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e85l4znvinzbj96301e1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nyqkoaJl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e85l4znvinzbj96301e1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that this is up, let’s wire it all together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-the-redis-target"&gt;
  &lt;/a&gt;
  Configure the Redis Target
&lt;/h3&gt;

&lt;p&gt;Go back to the Build &amp;amp; Deploy homepage, and go to KubeMQ Targets:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pzG-SQrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f317do126iejzvu9s9xd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzG-SQrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f317do126iejzvu9s9xd.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Search and select Redis:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5mlMZWIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c38vjgis07pcn5tpn9ov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mlMZWIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c38vjgis07pcn5tpn9ov.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set the source as the KubeMQ Query “Redis” channel, and change the target connection string to “redis://redis-svc.redis:6379”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEUudhts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0jjkpdphjdxwscqyx4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEUudhts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0jjkpdphjdxwscqyx4p.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit Save and then Deploy. We don’t need to change anything else, so just go ahead and hit “Get Deploy Manifests”, and apply the command.&lt;/p&gt;

&lt;p&gt;To test it out, go ahead and run a POST. You can get the URL by running &lt;code&gt;minikube service list&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Av4vo_ed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51t0w3hijn3vwdmz2c4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Av4vo_ed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51t0w3hijn3vwdmz2c4u.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And then let’s do a POST. I’ll use Postman, although I’ve also provided some &lt;a href="https://github.com/henryjin3/kubemq-build-deploy/blob/main/curl_commands.txt"&gt;sample cURL commands&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1J4RAltW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rs2gm287aog7s7u2oer3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1J4RAltW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rs2gm287aog7s7u2oer3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can do a get (this is a Redis get, not an HTTP GET):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5YMFu7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2n8fbp0emljy5ec2wupi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5YMFu7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2n8fbp0emljy5ec2wupi.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should get something like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqi26IWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoyuu91ppyyk55mfu7jc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqi26IWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoyuu91ppyyk55mfu7jc.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result is a base64 byte array, which can be decoded at a site such as &lt;a href="https://www.motobit.com/util/base64-decoder-encoder.asp"&gt;this one&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mzydUkRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tn30j07ay9reswq9d6dl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mzydUkRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tn30j07ay9reswq9d6dl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s it! Via KubeMQ Build and Deploy, you’ve used KubeMQ and Kubernetes to set up a working link between an API gateway and a Redis backend. The best part is, these YML files can be applied in any Kubernetes cluster, making it easy to turn this prototype into a real production setup.&lt;/p&gt;

&lt;p&gt;Below, I’ll share my overall impressions of this new product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#review-and-impressions"&gt;
  &lt;/a&gt;
  Review and Impressions
&lt;/h2&gt;

&lt;p&gt;Overall, my first experience with KubeMQ Build &amp;amp; Deploy has been really positive! Installing KubeMQ was always easy, and using a fully configured cluster was seamless and performant. &lt;/p&gt;

&lt;p&gt;Configuration used to be a bit of a black box. Now, Build &amp;amp; Deploy makes it a good bit more transparent and straightforward. Plus, going through the tool allows us to experience just how powerful KubeMQ itself is; the number of sources and targets that can be connected is quite high, and it makes me think of all the possibilities. In many cases, I think I could replace some simpler backend services with KubeMQ, and probably end up with something more performant and stable.&lt;/p&gt;

&lt;p&gt;There are several small UI things that could be improved. For example, I wish there was a button to save YML files directly to my computer instead of doing it manually. I also wish there was an option to either save configurations to my account for later editing or even import YML files so that I could add to them via the browser. Right now, without that functionality, the tool is primarily useful for setting up new environments. That said, the tool is quite new and I expect these will be added with time.&lt;/p&gt;

&lt;p&gt;For me, Build &amp;amp; Deploy significantly bridges the gap between installation and production, and I’m already thinking about how I can use this in my current and future projects. What about you?&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
    </item>
    <item>
      <title>Rate Limiting in IPv6 Era Using Probabilistic Data Structures</title>
      <author>Amir Keshavarz</author>
      <pubDate>Thu, 17 Jun 2021 15:01:01 +0000</pubDate>
      <link>https://dev.to/satrobit/rate-limiting-in-ipv6-era-using-probabilistic-data-structures-15on</link>
      <guid>https://dev.to/satrobit/rate-limiting-in-ipv6-era-using-probabilistic-data-structures-15on</guid>
      <description>&lt;p&gt;In any system where two parties communicate with each other, we hear things like rate-limiting, flow control, etc. The problem is that all systems have limits and to protect the system, you'd need to somehow control the flow of information passing through.&lt;/p&gt;

&lt;p&gt;As you may have already figured out, we're going to talk about a specific problem regarding rate-limiting in IPv6 networks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#packets"&gt;
  &lt;/a&gt;
  Packets
&lt;/h2&gt;

&lt;p&gt;When we communicate through computer networks, we need to break down our data into smaller pieces called packets. These packets are basically like the letters you send through the post.&lt;/p&gt;

&lt;p&gt;Each letter (packet) has 3 important components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Source Address&lt;/li&gt;
&lt;li&gt;Destination Address&lt;/li&gt;
&lt;li&gt;The actual data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUl-OdvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rwpoxa2kkufakbiiort.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUl-OdvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rwpoxa2kkufakbiiort.gif" alt="Packet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, real packets also have those things. (The picture only shows the IP header which doesn't include the data body)&lt;/p&gt;

&lt;p&gt;We only care about the source and destination addresses in this context, so we call them a 2-tuple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ip-addresses"&gt;
  &lt;/a&gt;
  IP Addresses
&lt;/h2&gt;

&lt;p&gt;Until now, IPv4 is still dominant in most countries but its address pool is limited, thus, It's not future-proof.&lt;/p&gt;

&lt;p&gt;IPv6 is the successor to the IPv4 and instead of a 32-bit address, it provides 128-bit addresses so It's a huge bump in the case of the address pool.&lt;/p&gt;

&lt;p&gt;IPv4 address pool: 4,294,967,296&lt;br&gt;
IPv6 address pool: 340,282,366,920,938,463,463,374,607,431,768,211,456&lt;/p&gt;

&lt;p&gt;Yep, that's a huge difference.&lt;/p&gt;

&lt;p&gt;Even though IPv6 itself is not a new protocol, but the process of migrating to IPv6 from IPv4 has been a tedious and very long battle. The issue is that IPv6 is not backward compatible and lots of old hardware and software don't and will not support IPv6.&lt;/p&gt;

&lt;p&gt;Nonetheless, IPv6 is already here and its users are rising by the day. Google's statistics show IPv6 availability of its users at around 30.30–35.10% depending on the day of the week (greater on weekends), as of April 2021.&lt;/p&gt;

&lt;p&gt;Before continuing, you can also read another post of mine which goes through different technics on how to implement a rate-limiter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/satrobit/rate-limiting-using-the-token-bucket-algorithm-3cjh"&gt;Rate limiting using the Token Bucket algorithm&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we talked about before, that's not the case for IPv6 addresses because of its huge address pool. Even if you may see no difference in normal times, the existing risk won't be accepted by lots of people.&lt;/p&gt;

&lt;p&gt;So what's the solution? How can we store the frequency of these events in a space-efficient data structure?&lt;br&gt;
Like all solutions, we compromise.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#challenge"&gt;
  &lt;/a&gt;
  Challenge
&lt;/h2&gt;

&lt;p&gt;Even in the simplest forms of rate-limiting, we're required to store the number of times that packets with similar 2-tuple have been processed.&lt;/p&gt;

&lt;p&gt;In most IPv4-era systems, that information is stored in an array or a tree, or some other normal data structure. They'll do the job perfectly since the IPv4 address pool is not that big so keeping all of the data won't be an issue.&lt;/p&gt;

&lt;p&gt;For this purpose, we can use probabilistic data structures, specifically Count-Min Sketch.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#probabilistic-data-structures"&gt;
  &lt;/a&gt;
  Probabilistic Data Structures
&lt;/h2&gt;

&lt;p&gt;Unlike normal data structures which are deterministic, probabilistic data structures are not deterministic and won't give you definite answers but only an estimation or a probability.&lt;/p&gt;

&lt;p&gt;This kind of data structure is useful when an unknown stream of data is being processed.&lt;/p&gt;

&lt;p&gt;You'd be amazed to find out in how many cases we don't really need deterministic data structures especially when we're processing data streams.&lt;/p&gt;

&lt;p&gt;Probabilistic data structures are lossy but that's not really an issue for our use case since we only need to know the heavy-hitters. With an enough large space, the risk of collision should be low enough for most people.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7YlLN1dZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpyqhit4pacxqje9p8rg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7YlLN1dZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpyqhit4pacxqje9p8rg.jpg" alt="Probabilistic data structures from sciencedirect.com"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#countmin-sketch"&gt;
  &lt;/a&gt;
  Count-Min Sketch
&lt;/h2&gt;

&lt;p&gt;The Count-Min Sketch, or CMS for short, is a probabilistic data structure to count the frequencies of events.&lt;/p&gt;

&lt;p&gt;We can argue that the whole CMS is like a 3-D table.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;w&lt;/code&gt;: a fixed width&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;d&lt;/code&gt;: pairwise-independent hash functions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;c&lt;/code&gt;: total count of an event&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xegKw1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqhr2ree2b2lvmobqabx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xegKw1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqhr2ree2b2lvmobqabx.png" alt="Count-Min Sketch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;w&lt;/code&gt; is basically an arbitrary width. The bigger it is, the lower the overestimation is.&lt;br&gt;
&lt;code&gt;d&lt;/code&gt; is a list of hash functions that shouldn't have many collisions with each other.&lt;br&gt;
&lt;code&gt;c&lt;/code&gt; is the number that we increment when an event is repeated.&lt;/p&gt;

&lt;p&gt;The process of incrementing or estimation is really simple.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#incrementing"&gt;
  &lt;/a&gt;
  Incrementing
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Calculate the hash of your event using the hash function &lt;code&gt;h1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Normalize the hash value to the &lt;code&gt;w&lt;/code&gt; so you would get an index.&lt;/li&gt;
&lt;li&gt;Increment the element &lt;code&gt;w[hash]&lt;/code&gt; by 1.&lt;/li&gt;
&lt;li&gt;Repeat the process for all hash functions in &lt;code&gt;d&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#estimation"&gt;
  &lt;/a&gt;
  Estimation
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Calculate the hash of your event using the hash function &lt;code&gt;h1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Normalize the hash value to the &lt;code&gt;w&lt;/code&gt; so you would get an index.&lt;/li&gt;
&lt;li&gt;Get the value of element &lt;code&gt;w[hash]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Repeat the process for all hash functions and then jump to &lt;code&gt;5&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Between all the values that you got, the lowest one is your estimation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you may have already guessed, the whole CMS is quite similar to other probabilistic data structures like bloom filters. It's relatively simple and quite fast.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;Now we can implement a dead simple Count-Min Sketch data structure in Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mmh3&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CountMinSketch&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#1
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#2
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mmh3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="c1"&gt;#3
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#4
&lt;/span&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#5
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#6
&lt;/span&gt;            &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="c1"&gt;#7
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;We require 2 parameters to create a CMS object. &lt;code&gt;w&lt;/code&gt;: the width of our table and &lt;code&gt;d&lt;/code&gt;: number of hash functions.&lt;/li&gt;
&lt;li&gt;We pre-populate the tables with zeros. Notice that one dimension is &lt;code&gt;s&lt;/code&gt; and the other &lt;code&gt;w&lt;/code&gt; which is basically a matrix.&lt;/li&gt;
&lt;li&gt;This is our hash function. It requires 2 parameters. &lt;code&gt;x&lt;/code&gt; which is the input and &lt;code&gt;seed&lt;/code&gt; that is used to seed the mmh3 hash function. &lt;code&gt;seed&lt;/code&gt; needs to be unique for each &lt;code&gt;d&lt;/code&gt;. Later you'll see that I used the index of &lt;code&gt;d&lt;/code&gt; elements for seed but that's not good :) You need to generate random numbers when creating the CMS object for each element. After generating the hash, we normalize it relative to &lt;code&gt;w&lt;/code&gt; to generate an index for &lt;code&gt;w&lt;/code&gt; arrays.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;add&lt;/code&gt; function, we should iterate over all hash function elements (&lt;code&gt;d&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;For each element, we calculate a hash which itself is an index for &lt;code&gt;w&lt;/code&gt; arrays. Now we have an index for both dimension and increment the value by one.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;get&lt;/code&gt; function like the one in &lt;code&gt;add&lt;/code&gt;, we iterate over all hash function elements (&lt;code&gt;d&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Like before, we calculate the hash, and using the table index, we get the value inside and put it in a temporary array named &lt;code&gt;items&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After going through all hash function elements (&lt;code&gt;d&lt;/code&gt;), we select the minimum of all items and return it. This is basically our estimation.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sketch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CountMinSketch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;sketch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"128.3.202.200"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sketch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"128.3.202.200"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sketch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"128.3.202.200"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# prints 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;By combining this and a simple rate-limiter explained in another post (&lt;a href="https://dev.to/satrobit/rate-limiting-using-the-token-bucket-algorithm-3cjh"&gt;Rate limiting using the Token Bucket algorithm&lt;br&gt;
&lt;/a&gt;), You'll have a rate-limiter ready for IPv6.&lt;/p&gt;

&lt;p&gt;There's lots of optimization you can do and one of them is making the object, CIDR-aware. You can also tweak the implementation or use different hash functions to get the best performance possible.&lt;/p&gt;

&lt;p&gt;Even though we used Count-Min Sketch to store the frequency of incoming packets, but its application is extremely broad, especially when you're dealing with stream processing workloads.&lt;/p&gt;

&lt;p&gt;This post was so fun to write and I hope you found it fun to read. :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/IPv6_deployment"&gt;https://en.wikipedia.org/wiki/IPv6_deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.researchgate.net/figure/The-Count-Min-sketch-combines-the-counts-of-multiple-items-and-returns-the-counter_fig1_261130855"&gt;https://www.researchgate.net/figure/The-Count-Min-sketch-combines-the-counts-of-multiple-items-and-returns-the-counter_fig1_261130855&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cse.unsw.edu.au/%7Ecs9314/07s1/lectures/Lin_CS9314_References/cm-latin.pdf"&gt;https://www.cse.unsw.edu.au/~cs9314/07s1/lectures/Lin_CS9314_References/cm-latin.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>computerscience</category>
      <category>python</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Adios FontAwesome, Hola Tabler Icons</title>
      <author>dux</author>
      <pubDate>Thu, 17 Jun 2021 14:58:05 +0000</pubDate>
      <link>https://dev.to/duxtech/adios-fontawesome-hola-tabler-icons-1625</link>
      <guid>https://dev.to/duxtech/adios-fontawesome-hola-tabler-icons-1625</guid>
      <description>&lt;p&gt;&lt;a href="https://tablericons.com/"&gt;Tabler Icons&lt;/a&gt; es una nueva manera que encontré de poder utilizar icons en tus proyectos web. Consta de &lt;strong&gt;1280&lt;/strong&gt; iconos gratuitos en formato SVG que puedes usarlos desde ya. &lt;/p&gt;

&lt;p&gt;Es posible parametrizar los iconos cambiando desde el color hasta el tamaño y el grosor. Dale una chance, es super fácil. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JW8JV9KH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://repository-images.githubusercontent.com/243546335/6463da80-5f41-11ea-8f72-bb8d5dd26f29" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JW8JV9KH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://repository-images.githubusercontent.com/243546335/6463da80-5f41-11ea-8f72-bb8d5dd26f29" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TakeOver.io: A .io game</title>
      <author>FRADAR</author>
      <pubDate>Thu, 17 Jun 2021 14:39:42 +0000</pubDate>
      <link>https://dev.to/fradar/takeover-io-a-io-game-1570</link>
      <guid>https://dev.to/fradar/takeover-io-a-io-game-1570</guid>
      <description>&lt;p&gt;This is the first .io game I have ever made. But there is a problem, as you are playing with bots and A.Is and not real people/multiplayer. It took me a lot of time to create and make this, as I am not familiar with .io games like this. Tell me if you have any suggestions in the comments!&lt;/p&gt;

&lt;p&gt;ABOUT THE GAME: The game is not multiplayer, you are just playing with random named A.I bots. The game is like agar.io, but much more low graphic.Ok so, the rules of the game are that you are supposed to collect mass that is all around the game world and when you are bigger then another circle that is moving, you can take him in your colour of the team, and your team will keep trying to dominate others to win. The other circles in your team are called comrades. Got that? Great. Me neither.&lt;/p&gt;

&lt;p&gt;(Updates on the game are in the editor view in the Javascript window)&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/pen/oNBYXap"&gt;https://codepen.io/FRADAR/pen/oNBYXap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like my games? Follow me on codepen.io&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Google Summer of Code: How to Ensure a Successful Community Bonding Period</title>
      <author>Rohan Lekhwani</author>
      <pubDate>Thu, 17 Jun 2021 14:36:16 +0000</pubDate>
      <link>https://dev.to/rohanlekhwani/google-summer-of-code-how-to-ensure-a-successful-community-bonding-period-2l42</link>
      <guid>https://dev.to/rohanlekhwani/google-summer-of-code-how-to-ensure-a-successful-community-bonding-period-2l42</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Ever wondered what the 21 day GSoC Community Bonding period is about and how to make the most of it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’ve made it to Google Summer of Code — the ultimate open-source development opportunity for students around the world.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/L6EoLS78pcBag/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img alt="Now What?" src="https://i.giphy.com/media/L6EoLS78pcBag/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are automatically entered into a phase called — &lt;strong&gt;Community Bonding Period&lt;/strong&gt; on your dashboard and your GSoC summer officially kicks in.&lt;/p&gt;

&lt;p&gt;If you opt-in you’ll be added to two mailing lists — the GSoC Students List comprising of all the GSoC students accepted this season and the GSoC Alumni list which consists of the &lt;strong&gt;10,000+ GSoCers&lt;/strong&gt; throughout the history of GSoC.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9aM8LVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cy72uo96f7ym5a3ku5i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9aM8LVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cy72uo96f7ym5a3ku5i.jpg" alt="GSoC Profile with the ability to opt into mailing lists"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You would also receive a mail with a customized link to set-up your Payoneer account to recieve your stipend.&lt;/p&gt;

&lt;p&gt;In case you’re aspiring to be a GSoCer you can bookmark &lt;a href="https://docs.google.com/document/d/16jpmv6TP3ZAvJh7BKhnh7C25Jy4H1PFPmqOT7gnAWdw/edit"&gt;this&lt;/a&gt; doc to see what mails are sent by the GSoC organizers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-you-should-do-to-ensure-a-successful-community-bonding-period"&gt;
  &lt;/a&gt;
  What you should do to ensure a successful Community Bonding Period
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Set-up Clear Communication with Mentors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s likely that you’ve interacted with your mentors through text during the application period. Now is the time to get to know them better and there’s nothing better than a one-on-one video call.&lt;/p&gt;

&lt;p&gt;Schedule weekly one-on-one meets with your mentors. Doing this ensures both of you take out time from your schedules and meet at least once a week. This helps in preventing miscommunications and sudden revelations of misunderstandings.&lt;/p&gt;

&lt;p&gt;If possible, also form a channel on any &lt;a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt; your organization uses or else creating one on &lt;a href="https://open.rocket.chat/"&gt;Rocket.Chat&lt;/a&gt; is always a good idea.&lt;/p&gt;

&lt;p&gt;I meet my mentor — &lt;a href="https://www.linkedin.com/in/ramkumarkb?originalSubdomain=sg"&gt;Ramkumar KB&lt;/a&gt; every Friday at 1 PM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get Tasks Prioritized&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s been a month since you submitted your proposal. A lot has changed.&lt;/p&gt;

&lt;p&gt;Maybe a dependency on which a feature you’re about to implement is now deprecated. Maybe your organization needs a feature in your proposal implemented urgently.&lt;/p&gt;

&lt;p&gt;It is important to prioritize your implementation tasks for the upcoming coding period.&lt;/p&gt;

&lt;p&gt;I asked my mentor to set-up a &lt;a href="https://github.com/orgs/RocketChat/projects/40"&gt;Project Roadmap Board&lt;/a&gt; on GitHub to keep track of progress.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V-zGUc2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fff2khd3hlgs447gj9d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-zGUc2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fff2khd3hlgs447gj9d.jpg" alt="GitHub Project Roadmap for my GSoC project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn your stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You might not have coded in a particular language required for your project before. Or you might not be familiar with how things work out internally.&lt;/p&gt;

&lt;p&gt;In my case I had just finished building &lt;a href="https://github.com/RonLek/Rocket.Chat.MemeBuddy"&gt;MemeBuddy&lt;/a&gt; and was getting started with Typescript and the Rocket.Chat Apps Engine.&lt;/p&gt;

&lt;p&gt;You should ask your mentors for resources to learn and they’ll be more than happy to help you out. Even if you feel you have experience working on a particular stack, ask them for resources and you’ll be amazed how much you still don’t know compared to your mentors (they’re mentors for a reason :P ).&lt;/p&gt;

&lt;p&gt;The community bonding period is the best time to get yourself boosted before the coding period starts.&lt;/p&gt;

&lt;p&gt;My awesome mentor sent me resources to learn Typescript. I’ve shared them at the end of the article for those interested in learning Typescript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start Coding Already&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’re done with all the planning why not start coding already?&lt;/p&gt;

&lt;p&gt;You’ll not only get a buffer at the end but also get a chance to try out newer approaches you didn’t mention in your proposal.&lt;/p&gt;

&lt;p&gt;I started working on my target for Week 1 of the Coding Period a week before the Coding Period actually started. Lo and behold:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6wuPIoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj4zrwrphxmqa2zkbpwm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6wuPIoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj4zrwrphxmqa2zkbpwm.jpg" alt="My first GSoC PR (Now Merged)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had my first GSoC PR raised before the week ended.&lt;/p&gt;

&lt;p&gt;This was the second article of my GSoC journey at Rocket.Chat. I’m writing biweekly blogs. Follow my voyage on &lt;a href="https://rohanlekhwani.medium.com/about"&gt;Medium&lt;/a&gt; and Devpost. ⭐&lt;/p&gt;

&lt;p&gt;In case you haven’t checked out the previous blog about How I Got Selected into Google Summer of Code, hit the link below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/rohanlekhwani/how-i-got-selected-into-google-summer-of-code-27"&gt;How I Got Selected into Google Summer of Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are the resources that were shared with me by my mentor for learning Typescript. I found them pretty useful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;Typescript Handbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://typescript-exercises.github.io/"&gt;Typescript Exercises&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescript-weekly.com/"&gt;Typescript Weekly&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Like what I do? Help me pull my next all-nighter. Consider &lt;a href="https://www.buymeacoffee.com/rohanlekhwani"&gt;buying me a coffee&lt;/a&gt;.🥤&lt;/p&gt;

&lt;p&gt;Rohan Lekhwani is an open source contributor and enthusiast. You can connect with him on &lt;a href="https://www.linkedin.com/in/rohanlekhwani/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="http://github.com/RonLek"&gt;GitHub&lt;/a&gt;, &lt;a href="https://twitter.com/Rohanlekhwani"&gt;Twitter&lt;/a&gt;, and his &lt;a href="https://ronlek.github.io/"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>career</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>6 essentials tips for VueJs from 2.5 years experience #1</title>
      <author>CodeOzz</author>
      <pubDate>Thu, 17 Jun 2021 14:25:43 +0000</pubDate>
      <link>https://dev.to/codeozz/6-essentials-tips-for-vuejs-from-2-5-years-experience-1-4h7o</link>
      <guid>https://dev.to/codeozz/6-essentials-tips-for-vuejs-from-2-5-years-experience-1-4h7o</guid>
      <description>&lt;p&gt;Hey how are you ! Welcome here my name is Code Oz and I will share with you some tips on VueJs (I have 2.5 years experience with this framework)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#always-use-validator-on-your-props-in-order-to-check-if-the-value-passed-from-parent-to-child-is-correct"&gt;
  &lt;/a&gt;
  Always use validator on your props, in order to check if the value passed from parent to child is correct
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If validator detect an error, vue will trigger an Vue Warn !&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#trigger-watcher-on-initialization"&gt;
  &lt;/a&gt;
  Trigger Watcher on initialization
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// logic here ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;⚠️ This will be trigger when &lt;code&gt;toto&lt;/code&gt; will changed, but not be triggered at initialization.&lt;/p&gt;

&lt;p&gt;If you want to trigger your watcher during the initialization phase, you can use &lt;code&gt;immediate&lt;/code&gt; property !&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;immediate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// logic here ...&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Handler is the function triggered when property is modified.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#apply-class-and-style-dynamically"&gt;
  &lt;/a&gt;
  Apply class and style dynamically
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ 'background': isActivated ? 'black' : 'white' }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also apply a class/style only if the value is true !&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// If isActivated is false, class will be not applied&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ 'toto-class': isActivated }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#never-use-vif-with-vfor"&gt;
  &lt;/a&gt;
  Never Use V-if with V-for
&lt;/h3&gt;

&lt;p&gt;NEVER ! and why ?&lt;/p&gt;

&lt;p&gt;When you are doing this 👇&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo in todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!todo.isComplete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When you are using both in the same node, the &lt;code&gt;v-for&lt;/code&gt; has a &lt;strong&gt;higher priority&lt;/strong&gt; than &lt;code&gt;v-if&lt;/code&gt;, so &lt;code&gt;v-if&lt;/code&gt; will be trigger in &lt;strong&gt;EACH&lt;/strong&gt; iteration of the &lt;code&gt;v-for&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;To avoid this, you can replace your code by 👇&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todos.length&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo in todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But if you want to use the &lt;code&gt;v-if&lt;/code&gt; for &lt;code&gt;isComplete&lt;/code&gt; attribute, the best way is to create a computed based on the condition.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;todosNotCompleted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isComplete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todos.length&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo in todosNotCompleted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#you-can-pass-all-props-from-parents-to-child"&gt;
  &lt;/a&gt;
  You can pass all props from parents to child
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$props&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/child-component &lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#vmodel"&gt;
  &lt;/a&gt;
  V-model
&lt;/h3&gt;

&lt;p&gt;v-model is a directive in order to create two-way data bindings on a component !&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;edit me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This equal to&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message = $event.target.value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;edit me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Use it as shorthand when you need to update a value or emit a value when this value changed !&lt;/p&gt;

&lt;p&gt;I hope you like these tips ! There are basic and I will share more tips on Vuejs (more advance) afterwards !&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>"this" keyword in Javascript</title>
      <author>Nikhil</author>
      <pubDate>Thu, 17 Jun 2021 14:21:24 +0000</pubDate>
      <link>https://dev.to/tech_nikkhil/this-keyword-in-javascript-3li</link>
      <guid>https://dev.to/tech_nikkhil/this-keyword-in-javascript-3li</guid>
      <description>&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword has been associated with a lot of confusion. The use of the &lt;code&gt;this&lt;/code&gt; keyword depends on context i.e. where it is used. It is associated with object, method, or function through binding.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Binding allows us to set which object will be bound by &lt;code&gt;this&lt;/code&gt; keyword&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are two types of binding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Implicit: which is implied but not stated directly(manually).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explicit: which is stated manually.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#now-lets-get-started-with-the-implicit-binding-of-the-raw-this-endraw-keyword-for-various-use-cases"&gt;
  &lt;/a&gt;
  Now let's get started with the Implicit Binding of the &lt;code&gt;this&lt;/code&gt; keyword for various use cases:
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;In a method of object&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here &lt;code&gt;this&lt;/code&gt; keyword represents the object in which method is declared. Let's understand this with an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const student = {
    name: "Nikhil",
    birthYear: 1999,
    gender: "Male",
    education: "Graduate",
    calcAge(){
    return 2021 - this.birthYear
    }
}

console.log(student.calcAge()); //22
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above example, &lt;code&gt;this&lt;/code&gt; represents &lt;code&gt;student&lt;/code&gt; object. We know this because, to the left of the &lt;em&gt;dot(.)&lt;/em&gt; operator adjacent to the function &lt;code&gt;calcAge()&lt;/code&gt;, we see the &lt;code&gt;student&lt;/code&gt; object. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;In the function expression/ declaration&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here &lt;code&gt;this&lt;/code&gt; keyword represents the Global Object of window. Let's understand this with an example below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_LgzllDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623921935380/h5RorBZgI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_LgzllDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623921935380/h5RorBZgI.png" alt="ss1.png"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K92AvwGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623921950545/4o4BLF3Jx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K92AvwGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623921950545/4o4BLF3Jx.png" alt="ss2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;In the function expression/declaration (in strict mode)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here &lt;code&gt;this&lt;/code&gt; keyword represents &lt;code&gt;undefined&lt;/code&gt; in strict mode. Let's understand this with code snippet below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1pQmVjUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623922422414/oCqYIrtUf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1pQmVjUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623922422414/oCqYIrtUf.png" alt="ss4.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1D63aNtM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623922431902/tMvqj5UFu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1D63aNtM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623922431902/tMvqj5UFu.png" alt="ss3final.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;In Event Handlers/Listeners&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here &lt;code&gt;this&lt;/code&gt; keyword points to the element on which the event is handled/listened. Let's understand by code snippet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p6Ut_-92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623924291446/roEfoyuuq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p6Ut_-92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623924291446/roEfoyuuq.png" alt="ss5.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k1FwzGhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623924299511/GVI2LvFs7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k1FwzGhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623924299511/GVI2LvFs7.png" alt="ss6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;When used in Global context, alone and independent &lt;code&gt;this&lt;/code&gt; keyword points to &lt;code&gt;window&lt;/code&gt; object&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5lAXM13F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623924586195/JNDLIpJDy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5lAXM13F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623924586195/JNDLIpJDy.png" alt="ss8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_EFxBQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623924604224/KScSJyzqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_EFxBQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623924604224/KScSJyzqa.png" alt="ss7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;In arrow functions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here &lt;code&gt;this&lt;/code&gt; keyword represents the &lt;code&gt;owner&lt;/code&gt; of the arrow function. Let's take an example to understand this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--319jKyXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623924773595/PtWc69x0E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--319jKyXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623924773595/PtWc69x0E.png" alt="ss9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pDXxttK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623924781113/cQfsBIDLE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pDXxttK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623924781113/cQfsBIDLE.png" alt="ss10.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hence we should avoid using arrow functions in event listeners.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;When an object is created using the new keyword&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; keyword is used to create an object from the &lt;code&gt;constructor&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let Player = function(name, position){
    this.name = name,
    this.position = position

    this.aboutPlayer= function(){
        console.log(`${this.name} plays at ${this.position}`);
    }
}

let Cristiano = new Player('Cristiano Ronaldo', 'Forward')
let Beckham = new Player('David Beckham', 'Midfield')

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the function player is invoked by a &lt;code&gt;new&lt;/code&gt; keyword. In this case, the &lt;code&gt;new&lt;/code&gt; keyword represents the object for which it is created. So in the first case &lt;code&gt;this&lt;/code&gt; represents &lt;code&gt;Cristiano&lt;/code&gt; and in the second it represents &lt;code&gt;Beckham&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#lets-move-to-explicit-binding-of-raw-this-endraw-keyword-there-are-three-special-methods-call-apply-bind-that-help-in-achieving-explicit-binding"&gt;
  &lt;/a&gt;
  Let's move to Explicit Binding of &lt;code&gt;this&lt;/code&gt; keyword. There are three special methods, call(), apply(), bind() that help in achieving explicit binding.
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's take a look at each one of them along with example.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;call() method&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;call()&lt;/code&gt; method allows for a function/method belonging to one object to be assigned and called for a different object.&lt;br&gt;
Let's see how it works with an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const levelOfEducation = function(){
    console.log(this.education);
}

const student = {
    name: "Nikhil",
    birthYear: 1999,
    gender: "Male",
    education: "Graduate",
    calcAge(){
    return 2021 - this.birthYear
    }

}

levelOfEducation.call(student) // Graduate

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;call()&lt;/code&gt; method is invoked by &lt;code&gt;levelOfEducation()&lt;/code&gt; , which further logs &lt;code&gt;this.education&lt;/code&gt;. But now the function looks for &lt;code&gt;this&lt;/code&gt; keyword, so that gets determined by parameter passed in &lt;code&gt;call()&lt;/code&gt; method. In this way, &lt;code&gt;this&lt;/code&gt; is explicitly binded with a particular object.&lt;/p&gt;

&lt;p&gt;Now suppose the function which we want to call requires parameters, we can also pass in the parameters in &lt;code&gt;call()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const aboutEducation = function(university,place){
    console.log(`${this.name} is ${this.education} from ${university}, ${place}.`);
}

aboutEducation.call(student,'XYZ','Mumbai') // Nikhil is Graduate from XYZ, Mumbai.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now here's the pain point: Let's say we have more parameters we will have to pass each one of them. Passing individually each parameter is a hectic way and to optimize it we have the &lt;code&gt;apply()&lt;/code&gt; method.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;apply() method&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;apply()&lt;/code&gt; method solves the pain of passing parameters individually by allowing to pass an array of arguments. Let's understand this by example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const educationInfo = ['XYZ','Mumbai',2021]

const aboutEducation = function(){
    console.log(`${this.name} is ${this.education} from ${educationInfo[0]}, ${educationInfo[1]} in year ${educationInfo[2]}`);
}

aboutEducation.apply(student,educationInfo)// Nikhil is Graduate from XYZ, Mumbai in year 2021

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here we understand that when we have only &lt;code&gt;one&lt;/code&gt; value argument or no arguments to pass we use &lt;code&gt;call()&lt;/code&gt;, when we have &lt;code&gt;multiple&lt;/code&gt; value arguments to pass we use &lt;code&gt;apply()&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bind() method&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;bind()&lt;/code&gt; method is similar to &lt;code&gt;call()&lt;/code&gt; method but with one difference. The &lt;code&gt;call()&lt;/code&gt; method invokes the function directly, but &lt;code&gt;bind()&lt;/code&gt; method &lt;code&gt;returns a new function&lt;/code&gt; and we can invoke that instead.&lt;br&gt;
Let's understand this with an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const aboutEducation = function(university,place){
    console.log(`${this.name} is ${this.education} from ${university}, ${place}.`);
}

const newFunction = aboutEducation.bind(student,'XYZ','Mumbai') 

newFunction() // Nikhil is Graduate from XYZ, Mumbai.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;bind()&lt;/code&gt; method also allows an object to borrow a method from another object without making a copy of that method. This is overall a vast topic for some other day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Conclusion:&lt;/p&gt;

&lt;p&gt;Implicit Binding&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the method of an object &lt;code&gt;this&lt;/code&gt; references to the object itself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In function expression/declaration it references Window object. On the other hand in &lt;code&gt;strict&lt;/code&gt; mode it is undefined.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the arrow function, &lt;code&gt;this&lt;/code&gt; references the owner of the function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Event Handlers, &lt;code&gt;this&lt;/code&gt; references the element on which event is handled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In objects created with &lt;code&gt;new&lt;/code&gt; keyword using constructor functions, &lt;code&gt;this&lt;/code&gt; references the object itself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In alone and independent, &lt;code&gt;this&lt;/code&gt; references Window object.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Three methods to bind &lt;code&gt;this&lt;/code&gt; keyword explicitly&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;call(): It is used when one value or no arguments are to be passed to the function. &lt;code&gt;call(object, argument-1,...,argument-n)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;apply(): It is used when multiple value arguments are passed to the function. It allows us to pass array as a argument. &lt;code&gt;apply(object, array)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bind(): It is similar to &lt;code&gt;call()&lt;/code&gt;, only difference is it returns a brand new function, which can be invoked later. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Woohoo! 🥳 I hope after reading this long article with patience you must have got complete clarity about &lt;code&gt;this&lt;/code&gt; keyword in JS.&lt;/p&gt;

&lt;p&gt;If you find it useful do share it with your friends. &lt;/p&gt;

&lt;p&gt;Make sure you follow me on &lt;a href="https://twitter.com/Tech_Nikkhil"&gt;Twitter&lt;/a&gt;. I will be posting more such articles. Thanks for reading it till the end. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Zoom, Spotify and others slashed their cloud costs by millions - how did they do it?</title>
      <author>CAST AI</author>
      <pubDate>Thu, 17 Jun 2021 14:20:02 +0000</pubDate>
      <link>https://dev.to/castai/zoom-spotify-and-others-slashed-their-cloud-costs-by-millions-how-did-they-do-it-38b</link>
      <guid>https://dev.to/castai/zoom-spotify-and-others-slashed-their-cloud-costs-by-millions-how-did-they-do-it-38b</guid>
      <description>&lt;p&gt;&lt;strong&gt;In Q1 2021, &lt;/strong&gt;&lt;a href="https://www.cnbc.com/2021/06/01/zoom-zm-earnings-q1-2022.html"&gt;&lt;strong&gt;Zoom reported&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; that its gross margin widened to 73.9% from 69.4% in the previous quarter - primarily thanks to the optimization of public cloud resources.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And Zoom is certainly not the only company that realized the value of optimizing the cloud infrastructure.&lt;/p&gt;

&lt;p&gt;As businesses migrate their workloads to the cloud and build cloud-native applications, they’re starting to realize that overprovisioning and cloud sprawl aren’t just urban legends. &lt;/p&gt;

&lt;p&gt;For startups, the cloud is an essential technology because of its unparalleled support for scalability. But the cloud may quickly turn into a struggle because of growing costs.&lt;/p&gt;

&lt;p&gt;Here's what &lt;a href="https://a16z.com/2021/05/27/cost-of-cloud-paradox-market-cap-cloud-lifecycle-scale-growth-repatriation-optimization/"&gt;a16z&lt;/a&gt; wrote in a recent analysis:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“[...] across 50 of the top public software companies currently utilizing cloud infrastructure, an estimated&lt;strong&gt; $100B of market value &lt;/strong&gt;is being lost among them due to cloud impact on margins — relative to running the infrastructure themselves.”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How can companies deal with the long-term cost implications of the cloud? Cloud cost optimization is the best answer.&lt;/p&gt;

&lt;h2&gt;3 companies that optimized their cloud costs&lt;/h2&gt;

&lt;h2&gt;1. Spotify developed a cost allocation tool to save millions of dollars&lt;/h2&gt;

&lt;p&gt;Service ownership is a key problem in taming cloud costs. Tracking the teams’ responsibility for the cloud bill and keeping costs down is a pain.&lt;/p&gt;

&lt;p&gt;To handle this, &lt;strong&gt;Spotify developed a homegrown solution called &lt;a href="https://redmonk.com/jgovernor/2021/04/28/shifting-cost-optimisation-left-spotify-backstage-cost-insights/"&gt;Cost Insights&lt;/a&gt;&lt;/strong&gt; that tracks the company’s cloud expenses. By doing that, Spotify allows engineers to take ownership of cloud spend &lt;/p&gt;

&lt;p&gt;Spotify also helps its developers by &lt;strong&gt;providing suggestions about optimization strategies&lt;/strong&gt; like &lt;a href="https://cast.ai/blog/guide-to-kubernetes-autoscaling-for-cloud-cost-optimization/" rel="noreferrer noopener"&gt;autoscaling&lt;/a&gt; solutions within the portal. The internal crowdsourced document called Our Cookbook allows engineers to submit insights on what has worked for them in terms of system optimizations to help other teams.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Soon enough, developers started to treat cost optimization like a game - bragging about their victories and motivating other teams to play as well. Spotify is planning to add a leaderboard functionality to play on these social and competitive components of cost control.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Result? Spotify reduced its annual cloud spend by millions of dollars.&lt;/strong&gt; All thanks to helping engineers to make smarter decisions about resource allocation. &lt;/p&gt;

&lt;h2&gt;2. Segment optimized its infra and increased margin by 20%&lt;/h2&gt;

&lt;p&gt;Segment managed to&lt;strong&gt; reduce its infrastructure costs by 30% despite increasing traffic volume by 25%&lt;/strong&gt;, all within six months. &lt;/p&gt;

&lt;p&gt;How come? It was all thanks to incremental optimization of infrastructure decisions.&lt;/p&gt;

&lt;p&gt;Here’s one example: &lt;/p&gt;

&lt;p&gt;Segment has an internal validation service written in Node.js that validates incoming messages to ensure that they meet their message format.&lt;/p&gt;

&lt;p&gt;The team ran the service in containers with one full vCPU and 4GB of memory allocated to each. To publish 200,000 messages per second, Segment needed 800 of these containers, as each container processed 250 messages per second.&lt;/p&gt;

&lt;p&gt;The service still gets the same allocation, but the team rewrote and optimized the logic.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Result? Today, Segment processes 220,000 messages per second across only 340 containers. The throughput per container more than doubled to reach almost 650 messages per second, allowing Segment to cut its expenses for this component in half. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;BTW. Segment is no stranger to cloud cost optimization. The team shared &lt;a href="https://segment.com/blog/the-million-dollar-eng-problem/"&gt;another great story&lt;/a&gt; on their blog on how they handled rapidly growing cloud costs and trimmed their AWS bill by $1 million annually. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KL37fuKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EqX5eb7WMAAOF5F.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAI6LS84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1268236101681963008/1vw2IN5A_normal.jpg" alt="Segment profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Segment
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @segment
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      In the age of the cloud, costs might grow by 10x overnight as a result of a sudden increase in volume or a one-line config change. Businesses need to adjust quickly to stay profitable. &lt;br&gt;&lt;br&gt;Here's how we improved our gross margin by 20% in 90 days. &lt;a href="https://t.co/kuPRZZg4uK"&gt;bit.ly/3keV2fR&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:03 AM - 29 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1343754367267205121" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1343754367267205121" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1343754367267205121" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;3. La Fourche moved to different VMs and saved 69.9% &lt;/h2&gt;

&lt;p&gt;The online grocery store La Fourche was running its containers on Amazon Elastic Kubernetes Service (EKS) and soon saw the cloud bill rise from $1,000 to $10,000. This is when the company’s CTO decided that optimization can’t wait. &lt;/p&gt;

&lt;p&gt;If La Fourche waited any longer, it might have become the next victim to the never-ending cycle of growing cloud bills and long-term savings plans.&lt;/p&gt;

&lt;p&gt;La Fourche started by analyzing the cloud bill in detail. The company turned to the &lt;a href="https://cast.ai/eks-optimizer/"&gt;CAST AI Savings Report&lt;/a&gt; and ran an agent in read-only mode over their EKS infrastructure. The Savings Report showed that moving to different virtual machines would help to slash costs by a lot.&lt;/p&gt;

&lt;p&gt;Beforehand, La Fourche was using 15 t3.2xlarge and 2 t3.xlarge instances. At the time of running, the analysis generated the cost of $4,349.95. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Moving these workloads to 5 c5a.2xlarge instances instead would reduce by a smashing 69.9% ($1,310.40). Next month, La Fourche got a bill that was lower by $3,000.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Over to you&lt;/h2&gt;

&lt;p&gt;The latest edition of the State of the Cloud Report revealed that&lt;strong&gt; 61% of organizations are planning to optimize their use of cloud resources&lt;/strong&gt; in search of cost savings. Cloud cost optimization is the top initiative for the fifth year in a row.&lt;/p&gt;

&lt;p&gt;Reducing cloud costs can make a dramatic impact on a company’s bottom line. The examples we shared above clearly show that infrastructure costs depend on a team’s ability to provision just what it needs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud cost optimization is the low-hanging fruit here - it allows staying in the cloud, but for half of the cost. &lt;/strong&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>aws</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Looking Back on Our First DEV Community Bug Smash</title>
      <author>Christina Gorton</author>
      <pubDate>Thu, 17 Jun 2021 14:05:34 +0000</pubDate>
      <link>https://dev.to/devteam/looking-back-on-our-first-dev-community-bug-smash-3lic</link>
      <guid>https://dev.to/devteam/looking-back-on-our-first-dev-community-bug-smash-3lic</guid>
      <description>&lt;p&gt;In May, the Forem team launched our first DEV Community Bug Smash. This community-wide collaboration was all about improving the &lt;a href="https://github.com/forem/forem"&gt;Forem repository&lt;/a&gt;, encouraging more contributions from the community, and having fun in the process. Thank you to everyone who participated by smashing bugs and helping other contributors with their questions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dev-community-members-who-smashed-bugs"&gt;
  &lt;/a&gt;
  DEV Community Members who Smashed Bugs!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#eli-h-schei-elischei"&gt;
  &lt;/a&gt;
  Eli H Schei (&lt;a class="mentioned-user" href="https://dev.to/elischei"&gt;@elischei&lt;/a&gt;
)
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;”I've been coding for years, but I'm new to the whole open source thing so I decided that the bugsmash would be a fun way to get more involved.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eli took the time to investigate two of the bugs in our repository. Their investigation led to them finding out that both of those bugs were no longer valid! &lt;/p&gt;

&lt;p&gt;Check out Eli’s post to learn more about their first contribution.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/elischei" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rhGQX0YE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lk6SrqbU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/578615/61cdcd3c-b590-460d-a7c8-197d45d1e9ce.jpg" alt="elischei image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/elischei/well-that-was-easy-my-first-contribution-to-bugsmash-54po" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Well that was easy - my first contribution to bugsmash&lt;/h2&gt;
      &lt;h3&gt;Eli H. Schei ・ May 7 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devbugsmash&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Bugs Eli Smashed 🐛&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/4079"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Embedding dev.to comment in Dev.to results in broken HTML
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#4079&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/shushugah"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--azHkcvXg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/7111514%3Fv%3D4" alt="shushugah avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/shushugah"&gt;shushugah&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/4079"&gt;&lt;time&gt;Sep 22, 2019&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On my post a regular dev.to comment was posted (albeit with Japanese characters in their profile) but when I embed their comment in my profile it shows broken HTML 4 tags&lt;/p&gt;
&lt;p&gt;post (broken): &lt;a href="https://dev.to/shushugah/gitlab-hacks-28cg" rel="nofollow"&gt;https://dev.to/shushugah/gitlab-hacks-28cg&lt;/a&gt;
comment (not broken: &lt;a href="https://dev.to/lukeshiru/comment/e7dd" rel="nofollow"&gt;https://dev.to/lukeshiru/comment/e7dd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/7111514/65390801-090ea900-dd62-11e9-8984-dd4fd58f26e9.png" rel="nofollow"&gt;&lt;img width="712" alt="Screenshot 2019-09-22 at 17 54 52" src="https://res.cloudinary.com/practicaldev/image/fetch/s--T7iEoIX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7111514/65390801-090ea900-dd62-11e9-8984-dd4fd58f26e9.png"&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/4079"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/8757"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Podcast episodes not processing HTML
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#8757&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/benhalpern"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Btd6rDfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/3102842%3Fv%3D4" alt="benhalpern avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/benhalpern"&gt;benhalpern&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/8757"&gt;&lt;time&gt;Jun 17, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;code&gt;processed_html&lt;/code&gt; for recent podcast episodes is &lt;code&gt;nil&lt;/code&gt;.... The &lt;code&gt;body&lt;/code&gt; which is the raw content returned from the RSS, is present. So something is wrong with our pipeline.&lt;/p&gt;
&lt;p&gt;Example...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dev.to/devdiscuss/s1-e6-little-known-productivity-tools-big-productivity-gains" rel="nofollow"&gt;https://dev.to/devdiscuss/s1-e6-little-known-productivity-tools-big-productivity-gains&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/8757"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#joe-avila-javila35"&gt;
  &lt;/a&gt;
  Joe Avila (&lt;a class="mentioned-user" href="https://dev.to/javila35"&gt;@javila35&lt;/a&gt;
)
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“My biggest challenge in contributing to open source is believing in myself.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check out Joe’s post to learn more about their experience contributing to Forem.&lt;/p&gt;

&lt;p&gt;Joe helped fix a recurring error for our comment component. While working on this PR, the team was able to identify another issue that will be worked on separately. To see what bug Joe worked on and how he smashed it check out his post.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/javila35" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y43ushEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---ZkQSYKt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/339858/b1532353-1d7d-421a-8dd4-2bfff6bb18e4.png" alt="javila35 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/javila35/smashing-my-first-bug-4629" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Smashing my first bug&lt;/h2&gt;
      &lt;h3&gt;Joe Avila ・ May 18 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devbugsmash&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#arunkc-arunkc"&gt;
  &lt;/a&gt;
  Arun-kc (&lt;a class="mentioned-user" href="https://dev.to/arunkc"&gt;@arunkc&lt;/a&gt;
)
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“The community members were really helpful and encouraging. Especially rhymes, I'm really thankful for your help.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Arun-kc helped create a fix for a more readable “published date” for people using our API. &lt;br&gt;
They are new to contributing to open source. Check out their post to learn more about their experience and reflections after their first contribution.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/arunkc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWf6TU0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OouVfyjv--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620242/59cfbdca-5b92-4e77-aae0-298a669345f5.jpeg" alt="arunkc image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/arunkc/the-first-bug-i-smashed-in-bug-smash-4fc6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The first bug I Smashed in Bug Smash!!&lt;/h2&gt;
      &lt;h3&gt;arunkc ・ May 7 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devbugsmash&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#monica-mateiu-metamoni"&gt;
  &lt;/a&gt;
  Monica Mateiu (&lt;a class="mentioned-user" href="https://dev.to/metamoni"&gt;@metamoni&lt;/a&gt;
)
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Apart from the warm, fuzzy feeling that you've done something nice, the most valuable thing you'll get from open source contributions are the lessons you'll learn.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Monica chose a bug that many community members had commented on already. They took the time to read through the discussions before coming up with a good solution to smash the bug. You can read more about their experience and how they implemented a fix in their post. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/metamoni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnOAWeYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LLoIWqfC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/253427/7537e6db-4687-44b2-8c43-b4db81fb373a.jpeg" alt="metamoni image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/metamoni/improving-skip-navigation-on-dev-2bca" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Improving Skip Navigation on DEV&lt;/h2&gt;
      &lt;h3&gt;Monica Mateiu ・ Jun 16 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devbugsmash&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#future-bug-smash-events"&gt;
  &lt;/a&gt;
  Future Bug Smash Events
&lt;/h2&gt;

&lt;p&gt;Thanks again to everyone who participated and helped clean up Forem's repository. Keep an eye out for more Bug Smash events in the near future. &lt;/p&gt;

&lt;p&gt;In the meantime, if you would like to learn more about contributing to open source check out this stream from &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
 and me.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/npDJGF1-w3w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can also check out this wonderful post by DEV community member &lt;a class="mentioned-user" href="https://dev.to/ceeoreo"&gt;@ceeoreo&lt;/a&gt;
 &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ceeoreo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnpPqWlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xZCqZv2b--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/102841/e1a65308-9b86-49be-8dec-3a6ecac71489.jpeg" alt="ceeoreo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/codesandboxio/how-to-make-your-first-open-source-contribution-2oim" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Make Your First Open Source Contribution&lt;/h2&gt;
      &lt;h3&gt;Ceora Ford ・ May 6 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#coding&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>opensource</category>
      <category>meta</category>
      <category>devbugsmash</category>
    </item>
    <item>
      <title>The Easiest Way to Monitor Ruby: Automatic Instrumentation</title>
      <author>Milica Maksimovic</author>
      <pubDate>Thu, 17 Jun 2021 13:56:54 +0000</pubDate>
      <link>https://dev.to/appsignal/the-easiest-way-to-monitor-ruby-automatic-instrumentation-44af</link>
      <guid>https://dev.to/appsignal/the-easiest-way-to-monitor-ruby-automatic-instrumentation-44af</guid>
      <description>&lt;p&gt;Setting up a proper monitoring overview over your application's performance is a complex task. Normally, you'd first need to figure out what you need to monitor, then instrument your code, and finally make sense of all the data that has been emitted.&lt;/p&gt;

&lt;p&gt;However, with a few things set in place, and an APM that natively supports Ruby, it's easier than ever to take this step. In this post, we'll show you how you can do it too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-instrumentation-handsfree-apm-setup"&gt;
  &lt;/a&gt;
  Automatic Instrumentation - Handsfree APM Setup
&lt;/h2&gt;

&lt;p&gt;To discover which pieces of your code are causing your performance issues, you’ll need to add instrumentation to it. That way, you can break down all the actions and measure which ones are the slowest.&lt;/p&gt;

&lt;p&gt;With AppSignal’s automatic instrumentation, we take away as much manual work as we can. Just run &lt;a href="https://docs.appsignal.com/ruby/command-line/install.html"&gt;a few commands through the CLI&lt;/a&gt;, and you’ll be set.&lt;/p&gt;

&lt;p&gt;Our monitoring agent detects the different parts of your infrastructure and automatically instruments it. This enables AppSignal app to digest, process, monitor, and show you the graphs and dashboards you need the most.&lt;/p&gt;

&lt;p&gt;That means that for example for the &lt;a href="https://graphql-ruby.org/"&gt;graphql gem for Ruby&lt;/a&gt;, AppSignal will  instrument every GraphQL request that comes in, meaning it will provide a breakdown of all events in the request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outofthebox-instrumentation"&gt;
  &lt;/a&gt;
  Out-of-the-box Instrumentation
&lt;/h2&gt;

&lt;p&gt;We've made a list of all the tools AppSignal supports. It's pretty extensive:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Framework&lt;/td&gt;
&lt;td&gt;&lt;a href="https://docs.appsignal.com/ruby/integrations/rails.html"&gt;Rails&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rails features&lt;/td&gt;
&lt;td&gt;Action Mailer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rails features&lt;/td&gt;
&lt;td&gt;Action Cable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rails features&lt;/td&gt;
&lt;td&gt;Active Record&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rails features&lt;/td&gt;
&lt;td&gt;Active Job&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rails features&lt;/td&gt;
&lt;td&gt;Caching&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Supported through ActiveRecord&lt;/td&gt;
&lt;td&gt;PostgreSQL, MySQL, SQLite, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Heroku integration&lt;/td&gt;
&lt;td&gt;&lt;a href="https://docs.appsignal.com/metrics/host-metrics/heroku.html"&gt;Heroku PostgreSQL&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Framework&lt;/td&gt;
&lt;td&gt;&lt;a href="https://docs.appsignal.com/ruby/integrations/padrino.html"&gt;Padrino&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Framework&lt;/td&gt;
&lt;td&gt;&lt;a href="https://docs.appsignal.com/ruby/integrations/sinatra.html"&gt;Sinatra&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gem&lt;/td&gt;
&lt;td&gt;Rack&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gem&lt;/td&gt;
&lt;td&gt;WebMachine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Web server&lt;/td&gt;
&lt;td&gt;Puma&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Web server&lt;/td&gt;
&lt;td&gt;Unicorn&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ORM&lt;/td&gt;
&lt;td&gt;DataMapper&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ORM&lt;/td&gt;
&lt;td&gt;Sequel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ORM&lt;/td&gt;
&lt;td&gt;MongoDB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;API&lt;/td&gt;
&lt;td&gt;Grape&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;API&lt;/td&gt;
&lt;td&gt;GraphQL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Standard library&lt;/td&gt;
&lt;td&gt;Net::HTTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Background job&lt;/td&gt;
&lt;td&gt;Que&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Background job&lt;/td&gt;
&lt;td&gt;Sidekiq&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Background job&lt;/td&gt;
&lt;td&gt;Delayed Job&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Background job&lt;/td&gt;
&lt;td&gt;Resque&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Background job&lt;/td&gt;
&lt;td&gt;Shoryuken&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gem&lt;/td&gt;
&lt;td&gt;Rake&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;As I've said, the list is pretty long, which is why we won't dive into each and every tool in this post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-frameworks-and-apis"&gt;
  &lt;/a&gt;
  Web Frameworks and APIs
&lt;/h2&gt;

&lt;p&gt;AppSignal supports instrumentation of web requests in Ruby on Rails, Padrino, and Sinatra out-of-the-box. APIs using Grape or the GraphQL gem are also supported.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ruby-on-rails"&gt;
  &lt;/a&gt;
  Ruby on Rails
&lt;/h3&gt;

&lt;p&gt;The AppSignal integration for Rails works by tracking exceptions and performance in requests. When an error occurs in a controller during a request AppSignal will report it. Performance issues will be based on the duration of a request and create a timeline of events detailing which parts of the application took the longest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8aFHO-uT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/dashboard.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8aFHO-uT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/dashboard.png" alt="dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's even possible to track how long it took for HTTP requests to arrive at the Rails app through a loadbalancer of web server. If it's not on by default, set up the &lt;a href="https://docs.appsignal.com/ruby/instrumentation/request-queue-time.html"&gt;request queue time&lt;/a&gt; tracking header and AppSignal will automatically graph the queue time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fel277ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/output.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fel277ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/output.png" alt="queue time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;p&gt;AppSignal supports the &lt;a href="https://graphql-ruby.org/"&gt;graphql gem for Ruby&lt;/a&gt;. It will instrument every GraphQL request that comes in and provide a breakdown of all events in the request. You'll be able to see how long it took to parse, validate and execute your resolvers. Events from the app's web framework and database calls are of course included in this breakdown.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IeBx1dSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/graphql-event-timeline.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IeBx1dSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/graphql-event-timeline.png" alt="Screenshot of event timeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is great for those who wish to debug GraphQL queries that seem to take a long time, and you're not sure where the slowdown could be occurring. Don't forget about &lt;a href="https://docs.appsignal.com/application/anomaly-detection/#setting-up-triggers"&gt;our anomaly triggers&lt;/a&gt; here also - these can be very useful for alerting when the query time reaches a certain threshold.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sinatra-padrino-and-grape"&gt;
  &lt;/a&gt;
  Sinatra, Padrino and Grape
&lt;/h3&gt;

&lt;p&gt;Sinatra, Padrino and Grape are web and API frameworks for Ruby that can be part of an app in different ways. They are either a standalone app or mounted on a larger Rails app. Depending on how the app is mounted on a web server some different installation steps are needed for &lt;a href="https://docs.appsignal.com/ruby/integrations/sinatra.html"&gt;Sinatra&lt;/a&gt;, &lt;a href="https://docs.appsignal.com/ruby/integrations/padrino.html"&gt;Padrino&lt;/a&gt; and &lt;a href="https://docs.appsignal.com/ruby/integrations/grape.html"&gt;Grape&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once installed Sinatra, Padrino, Grape requests are all instrumented: errors and performance measurements are reported when traffic hits the API. Every (API) endpoint is its own action in AppSignal to easily find which endpoint encountered which error. As with Rails apps the performance breakdown provides insight in what database queries or other parts or the app were slower than others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#databases"&gt;
  &lt;/a&gt;
  Databases
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#active-record-and-other-orms"&gt;
  &lt;/a&gt;
  Active Record and other ORMs
&lt;/h3&gt;

&lt;p&gt;To see how long a request took querying the database, open a incident detail page. On top of the page the types of events recorded in the request are broken down per group. Here you can see how much time in total was spend on what type of operation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--09Bei9Bv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/active-record-sample-breakdown.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--09Bei9Bv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/active-record-sample-breakdown.png" alt="IncidentPageWithPostGreSQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we zoom in further on the performance of this sample, further down the page you'll find a timeline of all events in the request in the order they occurred. This provides you with an overview of each query that was executed and which ones are taking the longest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mK2gM4GE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/active-record-event-timeline.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mK2gM4GE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/active-record-event-timeline.png" alt="IncidentPageTimelineWithPostGreSQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The integration shows you the tracing for database calls, so you can see what query is the root of your evil (or genius) 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--foWAUKIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/active-record-event-timeline-hover.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--foWAUKIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/active-record-event-timeline-hover.png" alt="IncidentPageTracingWithPostGreSQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#n1-queries"&gt;
  &lt;/a&gt;
  N+1 queries
&lt;/h3&gt;

&lt;p&gt;Worried there may be N+1 queries occurring in the request and that's what is slowing it down? If we detect N+1 queries a warning will appear in the event timeline for those events that were detected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t55wT3r1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/n-plus-one.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t55wT3r1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/n-plus-one.png" alt="IncidentPageWithPostGreSQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#redis"&gt;
  &lt;/a&gt;
  Redis
&lt;/h3&gt;

&lt;p&gt;With Redis integration, you'll see your calls to Redis appear in the Event Timeline:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h_9LJAEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/redis-event-timeline.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_9LJAEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/redis-event-timeline.png" alt="Screenshot of event timeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll also be able to see the name of the command sent to Redis and the address of the Redis instance that the query was made to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ut3szOMQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/redis-event-timeline-hover.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ut3szOMQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/redis-event-timeline-hover.png" alt="Screenshot of event timeline flyout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is great news for those who wish to debug long running calls to a Redis cache. You can even set an anomaly trigger to send an alert on requests that run for a super long time!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background-jobs"&gt;
  &lt;/a&gt;
  Background Jobs
&lt;/h2&gt;

&lt;p&gt;Whenever a background job is queued with Sidekiq, Delayed::Job, Resque, Shoryuken and Que AppSignal will automatically report errors and performance measurements. All &lt;a href="https://docs.appsignal.com/ruby/integrations/active-job.html"&gt;Active Job&lt;/a&gt; adapters are also supported, and some background job libraries like Sidekiq and Delayed::Job report even more metadata from the libraries themselves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uMtMkfDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/background-jobs-event-timeline.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uMtMkfDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-03/background-jobs-event-timeline.png" alt="IncidentPageWithPostGreSQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sending-emails-with-action-mailer"&gt;
  &lt;/a&gt;
  Sending emails with Action Mailer
&lt;/h3&gt;

&lt;p&gt;If Rails mailers using Action Mailer are set up to &lt;code&gt;deliver_later&lt;/code&gt; they will also be routed through Active Job and can count on the same level of instrumentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#websockets"&gt;
  &lt;/a&gt;
  Websockets
&lt;/h2&gt;

&lt;p&gt;Using Action Cable in your Rails app? AppSignal automatically reports errors and performance measurements for messages and subscriptions. Every message is instrumented separately so even long running channels will report all activity. They are grouped per action giving a clear overview of how each individual action is performing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-appsignal-monitoring-made-easy-and-sweet"&gt;
  &lt;/a&gt;
  Try AppSignal: Monitoring Made Easy And Sweet 🍪
&lt;/h2&gt;

&lt;p&gt;Over the past 7 years, we've helped thousands of developers to automatically instrument their code, and we'd love you to &lt;a href="https://www.appsignal.com/ruby"&gt;try us out as well&lt;/a&gt;. When you do, feel free to reach out, we'll send you a free box of &lt;a href="https://www.appsignal.com/waffles"&gt;stroopwafels&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS. If you are helping the world with a great OSS project, &lt;a href="https://blog.appsignal.com/2020/10/20/appsignal-is-free-for-open-source-software-and-for-good-projects.html"&gt;we help you back&lt;/a&gt; with a free AppSignal account. Spread the word to the maintainers you value!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>devops</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>How to make Vim your text editor and customizable IDE</title>
      <author>Meet Gor</author>
      <pubDate>Thu, 17 Jun 2021 13:56:41 +0000</pubDate>
      <link>https://dev.to/mrdestructive/how-to-make-vim-your-text-editor-and-customizable-ide-42p4</link>
      <guid>https://dev.to/mrdestructive/how-to-make-vim-your-text-editor-and-customizable-ide-42p4</guid>
      <description>&lt;p&gt;We all are asked to use visual studio code and other rich looking editors as a beginners text editor or an IDE but that makes a habit of a rich and pleasing interface of running and debugging programs, and that is the reason we don't feel good to use command line or the terminal. Terminal or Command line are quite important to learn and are powerful as well.  &lt;/p&gt;

&lt;p&gt;Vim is a text editor, not any text editor but a special and one of the fastest out there, if you use it wisely. Vim can be used in the terminal which means it can run terminal commands inside the editor interface. That makes it quite a great option to improve your terminal command skills and also for enhancing your Linux knowledge. You can run program files from vim itself just by a few keystrokes. This text editor is preinstalled in most of the Linux distributions and hence you could quickly edit some files without going anywhere.  &lt;/p&gt;

&lt;p&gt;So that being said, vim is not easy to learn, you have to put some effort to reap the fruits of saving time in the longer run. It takes time to get used to the commands and key combination of Vim.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#download-vim"&gt;
  &lt;/a&gt;
  Download VIM
&lt;/h2&gt;

&lt;p&gt;But, let us get our feet wet in learning a few commands in Vim.  &lt;/p&gt;

&lt;p&gt;To download vim you can go to the official  &lt;a href="https://www.vim.org/download.php"&gt;Vim website&lt;/a&gt; .  &lt;/p&gt;

&lt;p&gt;Firstly let us understand how to open vim from command line or the terminal  &lt;/p&gt;

&lt;p&gt;If you are on windows you have to add the vim.exe file's path to the environment variable PATH. After that open CMD or terminal for windows 10 and type vim and enter. You are in Vim.  &lt;/p&gt;

&lt;p&gt;If you are in Linux or MacOS, then open the terminal and type vim and enter.  &lt;/p&gt;

&lt;p&gt;After you are in Vim, you will surely be trying to type something right? else you are not a geek ; )&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vim-basics"&gt;
  &lt;/a&gt;
  VIM Basics
&lt;/h2&gt;

&lt;p&gt;You won't see anything happening even if you are typing. This is because are 4 basic modes in Vim, understand it like a room.  The modes are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Normal Mode&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Insert Mode&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Command Mode&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Mode&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wait a second, you should learn how to move in vim first but you cannot learn everything at once, So take it bit by bit.&lt;/p&gt;

&lt;p&gt;To navigate around vim like blazing fast you can use h,j,k and l.  I know its wired but you will get used to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;h&lt;/strong&gt;  -&amp;gt; move left.    ( hop left)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;l&lt;/strong&gt;   -&amp;gt; move right.   (opposite of left)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;k&lt;/strong&gt;  -&amp;gt; move up.       ( keep it up)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;j&lt;/strong&gt;   -&amp;gt; move down.   ( jump down!!)&lt;/p&gt;

&lt;p&gt;If you want to apply certain movements several times you can use numbers before hjkl to move the number of times in that directon.&lt;/p&gt;

&lt;p&gt;Let's say you type 23j , here you will go down 23 lines. You can also use : and number to jump to  a particular line of that number, :12 moves you to the 12th line . &lt;/p&gt;

&lt;p&gt;The default mode is the &lt;strong&gt;Normal mode&lt;/strong&gt; where you can navigate in your file ,like a passage way between different rooms. Each other mode is accessible via Normal mode. You have to enter normal mode before switching to other three modes. By default after opening vim you are in Normal mode. You cannot start inserting text in the file while being in Normal mode but you can replace text and edit the existing text in the file such as substitution or cut/paste in Normal Mode. &lt;strong&gt;Press ESC to enter Normal mode&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The main mode in VIM is &lt;strong&gt;Insert mode&lt;/strong&gt;, where the actual typing and text editing takes place, &lt;strong&gt;Enter i to enter insert mode&lt;/strong&gt;. After entering i you can type anything you want. After you feel satisfied with writing in VIM, you can escape out of the insert mode (room) and enter the normal mode (passage way). Now the biggest question VIM beginners ask &lt;strong&gt;"HOW ON EARTH SHOULD I EXIT OUT OF VIM ??"&lt;/strong&gt; . Take a breath dear, you need to save your file first. To do that let's explore a different mode.&lt;/p&gt;

&lt;p&gt;The next crucial mode is &lt;strong&gt;Command mode&lt;/strong&gt;, where you have to remember some commands to do something. Lets continue from where we left. To save our file,  &lt;strong&gt;Press :  and Voila!! you are in Command mode&lt;/strong&gt;. After it depends you want to save file, quit vim , save file and quit vim or quit vim without saving file. OK that is too much to take in one go. Be sure to be in Command mode to press the following keys (i.e. press colon before any keys if you were in normal mode).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;w&lt;/strong&gt;     -&amp;gt; save file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;q&lt;/strong&gt;      -&amp;gt; quit vim.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;wq&lt;/strong&gt;     -&amp;gt; save file and quit vim.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;q!&lt;/strong&gt;      -&amp;gt; quit vim without saving file.&lt;/p&gt;

&lt;p&gt;These are some few of the commands available in VIM :)&lt;/p&gt;

&lt;p&gt;So now lets talk about &lt;strong&gt;Visual mode&lt;/strong&gt;, the little helper mode (room) to do cut/ copy in VIM. There are many ways to edit or add text in Visual mode. You  have options to choose from character by character, line by line or block by block. &lt;strong&gt;To enter Visual mode press v&lt;/strong&gt;. This gets you into character by character highlighting whether you want to cut the text or copy (yank) the text. After selecting the portion you can either cut that portion or copy it in vim register. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;y&lt;/strong&gt;     -&amp;gt; Copy the selected portion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;d&lt;/strong&gt;     -&amp;gt; Cut the selected portion.&lt;/p&gt;

&lt;p&gt;You can use &lt;strong&gt;V (Shift+V) to enter Line Visual mode&lt;/strong&gt;, this selects or highlights the portion line by line and not single letter by letter.&lt;/p&gt;

&lt;p&gt;You can also use &lt;strong&gt;Ctrl+V to enter Block Visual mode&lt;/strong&gt;, this selects a block of code .&lt;/p&gt;

&lt;p&gt;Here is a good way to remember switching between basic modes in VIM -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--plqtMRyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613912016216/SXavZAkPH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--plqtMRyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613912016216/SXavZAkPH.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#switching-between-basic-modes-in-vim"&gt;
  &lt;/a&gt;
  Switching between basic modes in VIM
&lt;/h3&gt;

&lt;p&gt;It seems to be quite slower than VS Code, doesn't it? Ya, I know its kinda slow but with time it picks up pace, just like a train. Spend time in VIM and it will be worth it. No Text editor is so powerful than VIM, it is so for a reason. If you are curious to dive deeper just dive in fully or stay in VS Code and your fancy.  There is a great community around VIM and you'll be happy surely to be a part of it. Oh! Quick fact even VS Code has a extension for VIM ;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-more-basics"&gt;
  &lt;/a&gt;
  Some more Basics
&lt;/h2&gt;

&lt;p&gt;You can do your most of basic programming using this but to be a bit faster you can use some tweaked commands to do stuff like,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I&lt;/strong&gt;     -&amp;gt; Enter insert mode to the character at the beginning. ( i puts you in insert mode to the cursor)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a&lt;/strong&gt;  -&amp;gt; Enter insert mode adjacent right to the cursor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;   -&amp;gt; Enter insert mode at the end of the line.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;o&lt;/strong&gt;    -&amp;gt; Enter insert mode a line below cursor.&lt;/p&gt;

&lt;p&gt;O   -&amp;gt; Enter insert mode a line above cursor.&lt;/p&gt;

&lt;p&gt;This commands are an optimized way to enter insert mode in a suitable way. This commands can be used as per needs and quite significantly improve editing speed.&lt;/p&gt;

&lt;p&gt;You can also shift from one mode to Normal mode by pressing Ctrl+C or Ctrl+{ . Whatever you feel good with.&lt;/p&gt;

&lt;p&gt;Pasting is programmer's everyday tasks. No, its good as a beginner and only if you are not running as it is. In VIM you can paste from your previous copied text using Visual mode or deleted chunk just using p to paste. Remember if you are on a character it will paste on starting from where your cursor is, which means your character on current cursor will be overwritten. You can also use "0p to paste from copied buffer.&lt;/p&gt;

&lt;p&gt;If you are pasting from a external source i.e. out of VIM, you have to use "+p . It pastes from the next character from cursor.   &lt;/p&gt;

&lt;p&gt;If you want to search a word in a file, you can use navigation commands like hjkl but there's a faster way around, If you press / and type the word you are searching for , you will get the first instance of that word. If there are multiple instances of the same word, you can press n to go t the next instance. You can also press Shift+N to move to the previous instance of the word.&lt;/p&gt;

&lt;p&gt;Some more word searching ahead. Say if you are already on the word which you want to find its instance, then you could press * to move to its next instance and # will do the same backward. Oh ! that was smooth.&lt;/p&gt;

&lt;p&gt;You can see that we are just using our keyboards while using vim. This is a great feature of old but gold text editors like vim and others that make you faster on keyboard and avoid mouse traps. &lt;/p&gt;

&lt;p&gt;If you want to jump to the end of the block or a paragraph you can use { and } to go to the beginning and the end of it respectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;G&lt;/strong&gt;    -&amp;gt; to the end of file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gg&lt;/strong&gt; -&amp;gt; to the beginning of file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;L&lt;/strong&gt;     -&amp;gt; move cursor to the end of screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:%s/old/new/g
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in Command mode -&amp;gt; replace the old word with new word throughout the file(g)&lt;/p&gt;

&lt;p&gt;Ctrl p   in Insert mode    -&amp;gt; auto complete reference from current file.&lt;/p&gt;

&lt;p&gt;So these are some quick and pretty good commands to get started with and feel VIM. But this is just VIM used 25% efficiency , you would have to go to the command line or terminal to run and compile program you have written. It could waste a lot of  time. But as a beginner this is pretty decent and helps to learn the core programming, behind scenes of compiling and learning new stuff and commands. It gets pretty exciting if you have got the basics cleared. But be sure to make it thorough.&lt;/p&gt;

&lt;p&gt;Its time to use VIM to its actual powers. VIM + terminal. It can get quite fast. So beware!!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-programs-from-vim"&gt;
  &lt;/a&gt;
  Running Programs from VIM
&lt;/h2&gt;

&lt;p&gt;It turns out that you could go to the command mode and run terminal commands  from there just use ! before the command first.&lt;/p&gt;

&lt;p&gt;Linux/Mac Users: use terminal from vim&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:!ls    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Linux   : Use terminal commands from vim&lt;br&gt;
Windows : use CMD commands from vim&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:!dir
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could also use other command which are appropriate to be executed from vim.&lt;/p&gt;

&lt;p&gt;Here is where the trick comes in, you don't have to quit vim now to compile or run the program.&lt;/p&gt;

&lt;p&gt;Lets say you are writing a C++/C code and you have clang compiler. Then you could use c++ and c respectively command with appropriate file handles to compile from vim. Here's the command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:!c++ % -o %:r
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, % stands for current file and :r removes the extension of the file. So we are creating a executable file without the extension and hence :r. And to execute the file, simply type,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:!%:r
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will execute the program. If Windows users face a issue like the file is not identified as a batch file or executable file , you should add .exe after :r to make it a exe file.&lt;/p&gt;

&lt;p&gt;For python or other interpreted language it is quite simple, just the interpreters name with the file name as it is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:!python filename.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:!python %
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could find your preferred  language's CLI tool and set up for your environment and get it plugged with VIM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mapping-in-vim"&gt;
  &lt;/a&gt;
  Mapping in VIM
&lt;/h3&gt;

&lt;p&gt;But this is not it! There is a long way to master VIM. Its not possible to know everything about anything. So for getting more fast I'll introduce VIM's fastest tool and the part where it really shines. Mapping!!&lt;/p&gt;

&lt;p&gt;You could map (assign) some keys to do a particular task in different modes. Just imagine typing cpp and running the program or py and running the program ,no need to go to the mouse to click run button and close the window. It gets really blazing fast. Only your creativity is the limit. Mapping commands are also called as macros.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap cpp :!c++ % -o %:r  &amp;amp;&amp;amp;  %:r
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap py :!python %
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above commands nmap means in Normal mode MAP cpp and then followed by the command which for this case it is executed in the command mode. There can be various permutations you could make like imap or xmap in Insertion mode and Visual mode and so on.  From mapping ,its basically left hand side mapped to right hand side. The key combination to the left and command to be executed to the right. The noremap makes the map non recursive, which means it makes the keymap only once at a time, this avoid any potential crash of a command with other. There are several options out there to make the keymap suitable for the particular needs.&lt;/p&gt;

&lt;p&gt;You will surely say, "Do i have to do it every time I run the program or every time I use VIM?"&lt;/p&gt;

&lt;p&gt;Well, You can :) but you should not. Because there's a way around it and this is the fuel of VIM or the soul for its Speed.&lt;/p&gt;

&lt;p&gt;Yes, I am talking about VIM CONFIGURATION FILE or vimrc&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-run-commands-filevimrc"&gt;
  &lt;/a&gt;
  VIM Run Commands File(vimrc)
&lt;/h3&gt;

&lt;p&gt;This is really a nasty feature of vim. You could tailor you vim editor as per your needs. You have to write the command once and it will run from the vimrc file. Making a vimrc file is a bit overwhelming in the beginning so , you should have a concrete knowledge of VIM commands and you should remember commands as well. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make a file called ~/.vimrc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should be using VIM to edit it or write it of course! Type vim ~/.vimrc in terminal or cmd&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter some commands such as set file type indent on , set number , you can find a  &lt;a href="https://vim.fandom.com/wiki/Example_vimrc"&gt;sample vimrc file &lt;/a&gt; on google and understand its commands and uses.&lt;br&gt;
Paint your plain canvas vimrc with your own creativity.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From here you can add the mappings and other key combinations that you might have been using while learning VIM to your vimrc.VIM also has plugins and more customizable tweaks that can enhance your productivity. &lt;/p&gt;

&lt;p&gt;You could always get more help in VIM by using :help commandname. Also you can learn from vimtutor from terminal or CMD.&lt;/p&gt;

&lt;p&gt;If you want to dive in more deeper , i link some few resources and video links to get your vim skills to new level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.vim.org/docs.php"&gt;VIM Official Documentation. &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://vim.fandom.com/wiki/Vim_Tips_Wiki"&gt;VIM fandom Wiki&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://catswhocode.com/vim-commands/"&gt;130+ VIM commands. &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://scotch.io/tutorials/getting-started-with-vim-an-interactive-guide"&gt;Vim Interactive Guide.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=H3o4l4GVLW0&amp;amp;list=PLm323Lc7iSW_wuxqmKx_xxNtJC_hJbQ7R"&gt;Vim as your editor.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Vim is a tool that can get quite handy for programmers and it stands out from rest of the text editors. By using Vim you will be in very rare people who can make something from almost nothing. Because in VIM you make everything from commands to mapping from customization to functionality. This cannot be done overnight for sure and you would  say you are wasting time in the initial stage but no, you are actually building a foundation for more efficiency and speed. If still you want to use VS Code ,you can use it freely . Because it won't matter much , at the end of the day its programming skills that win the race.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is quite a huge topic and everything could not be explained in a article, it should be self-explored and learnt from various sources to get its best functioning as per needs. This was a quick guide how and why you should be using VIM as a text editor or as a customizable IDE. As you might have seen its functionality is quite customizable and it is quite powerful tool for a programmer. Happy Coding and VIMing ;)&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>vim</category>
      <category>linux</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Step by Step - Repository Pattern and Unit of Work with Asp.Net Core 5</title>
      <author>Mohamad Lawand</author>
      <pubDate>Thu, 17 Jun 2021 13:56:22 +0000</pubDate>
      <link>https://dev.to/moe23/step-by-step-repository-pattern-and-unit-of-work-with-asp-net-core-5-3l92</link>
      <guid>https://dev.to/moe23/step-by-step-repository-pattern-and-unit-of-work-with-asp-net-core-5-3l92</guid>
      <description>&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;In this article we will be exploring Unit of work and Repository pattern with EF Core and .Net 5. &lt;/p&gt;

&lt;p&gt;You can watch the full video on Youtube:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-jcf1Qq8A-4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Please find the source code on GitHub:&lt;br&gt;
&lt;a href="https://github.com/mohamadlawand087/v33-repo-uow"&gt;https://github.com/mohamadlawand087/v33-repo-uow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what we will cover today:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Repository Pattern&lt;/li&gt;
&lt;li&gt;Why do we want to use Repository Pattern&lt;/li&gt;
&lt;li&gt;What is Unit of Work (UoW)&lt;/li&gt;
&lt;li&gt;Benefits of UoW&lt;/li&gt;
&lt;li&gt;Ingredients &amp;amp; Accounts&lt;/li&gt;
&lt;li&gt;Code and Implementations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always you will find the source code in the description down below. Please like, share and subscribe if you like the video. It will really help the channel&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-a-repository-pattern"&gt;
  &lt;/a&gt;
  What is a Repository Pattern
&lt;/h3&gt;

&lt;p&gt;The repository pattern is talked about a lot, especially in the API-and-microservice-heavy world that .net core shines in.&lt;/p&gt;

&lt;p&gt;The repository pattern is a strategy for &lt;em&gt;abstracting data access layer&lt;/em&gt;. So what is a data layer? it is made up of the code in the application that is responsible of storing and retrieving the data.&lt;/p&gt;

&lt;p&gt;Adding, removing, updating, and selecting items from this collection is done through a series of straightforward methods, without the need to deal with database concerns like connections, commands, cursors, or readers. Using this pattern can help achieve loose coupling and can keep domain objects persistence ignorant.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-use-repository-pattern"&gt;
  &lt;/a&gt;
  Why use Repository Pattern
&lt;/h3&gt;

&lt;p&gt;There are many reasons why we want to use code absatractions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce code duplication: it will allow us to use the DRY design principle, where we write the code once and we can utilise it anywhere we want in our code&lt;/li&gt;
&lt;li&gt;loose coupling to underlying persistance technology: in case we need to switch our database from MSSQL to PostgreSQL. Only on the data layer implementation changes will need to be made, not where we are consuming the data access layer. This will facilitate the changes, reduce the chance of errors.&lt;/li&gt;
&lt;li&gt;Testability is much more easier, Repository pattern will allow us to mock our database so we can perform our tests&lt;/li&gt;
&lt;li&gt;Separation of Concerns: seperate application functionalities based on function, which facilitates evolving and maintaining the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#what-is-unit-of-work-uow"&gt;
  &lt;/a&gt;
  What is Unit of Work (UoW)
&lt;/h3&gt;

&lt;p&gt;If the Repository pattern is our abstraction over the idea of persistent storage, the Unit of Work (UoW) pattern is our abstraction over the idea of atomic operations. It will allow us to finally and fully decouple our service layer from the data layer.&lt;/p&gt;

&lt;p&gt;The unit of work pattern now manages the database states. Once all updates of the entities in a scope are completed, the tracked changes are played onto the database in a transaction so that the database reflects the desired changes. &lt;/p&gt;

&lt;p&gt;Thus, the unit of work pattern tracks a business transaction and translates it into a database transaction, wherein steps are collectively run as a single unit. To ensure that data integrity is not compromised, the transaction commits or is rolled back discretely, thus preventing indeterminate state.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#benefits-of-unit-of-work-uow"&gt;
  &lt;/a&gt;
  Benefits of Unit of Work (UoW)
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Abstract Data Access Layer and Business Access Layer from the Application.&lt;/li&gt;
&lt;li&gt;Manage in-memory database operations and later saves in-memory updates as one transaction into database.&lt;/li&gt;
&lt;li&gt;Facilitates to make the layers loosely-coupled using dependency injection.&lt;/li&gt;
&lt;li&gt;Facilitates to follow unit testing or test-driven development (TDD).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#ingredients"&gt;
  &lt;/a&gt;
  Ingredients
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;VS Code (&lt;a href="https://code.visualstudio.com/download"&gt;https://code.visualstudio.com/download&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Dotnet 5 SDK (&lt;a href="https://dotnet.microsoft.com/download"&gt;https://dotnet.microsoft.com/download&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#code-time"&gt;
  &lt;/a&gt;
  Code time
&lt;/h3&gt;

&lt;p&gt;We will start by checking our dotnet SDK&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to install the entity framework tool&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt; &lt;span class="n"&gt;tool&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="p"&gt;--&lt;/span&gt;&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;dotnet&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ef&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to create our application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new webapi &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"PocketBook"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the application is created we navigate to our source code in Vs Code, the first thing we do is check that the application build successfully. &lt;/p&gt;

&lt;p&gt;We open the terminal if you don't see it open go to View ⇒ Terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet build
dotnet run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to add the required packages to utilise SQLLite and Entity Framework Core&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.Sqlite
dotnet add package Microsoft.EntityFrameworkCore.Tools
dotnet add package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we add the packages we need to update the appsettings.json to include the connection string to our database&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ConnectionStrings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DefaultConnection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DataSource=app.db;Cache=Shared&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will start by cleaning up our application from some of the boiler plate code that has been created. We need to delete the following files&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WeatherForecast.cs&lt;/li&gt;
&lt;li&gt;Controllers/WeatherForecastController.cs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the clean up we will start by creating our ApplicationDbContext. We need to create a Data folder in he root directory, and then will create the ApplicationDbContext class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;PocketBook.Data&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationDbContext&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ApplicationDbContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DbContextOptions&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we add our ApplicationDbContext we need to update the startup class to utilise the DbContext&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseSqlite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DefaultConnection"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
            &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddDatabaseDeveloperPageExceptionFilter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will continue by creating our Models, inside our root folder directory. Inside the Models folder we will create a new class called User&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to add our Model to the application DbContext by adding the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationDbContext&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The DbSet property will tell EF Core tha we have a table that needs to be created&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;DbSet&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Users&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ApplicationDbContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DbContextOptions&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// On model creating function will provide us with the ability to manage the tables properties&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnModelCreating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelBuilder&lt;/span&gt; &lt;span class="n"&gt;modelBuilder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OnModelCreating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modelBuilder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we update the ApplicationDbContext we need to create a new migration script to prepare the EF Core to update our database&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet ef migrations add &lt;span class="s2"&gt;"Initial migration and Adding the User table"&lt;/span&gt;
dotnet ef database update 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the database update is completed, we can check our sqlite db with the SQLite browser, we can see that the table has been created for us.&lt;/p&gt;

&lt;p&gt;Now we need to start by creating our repositories. Inside the root directory of our application let us create a new folder called Core, inside the core folder will create another folder called IRepositories. Inside the IRepositories folder will create a new interface called IGenericRepository and we populate the interface as following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IGenericRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;All&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Upsert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need a new interface called IUserRepository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IUserRepository&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IGenericRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now inside the Core folder we need to create a new folder called IConfiguration where the UoW configs will be. In side the IConfiguration we need to create an interface called IUnitOfWork&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IUnitOfWork&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;IUserRepository&lt;/span&gt; &lt;span class="n"&gt;Users&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;CompleteAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to create a Repository folder inside the Core folder, inside the Repository folder we need to create GenericRepository class and utilise it as follow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GenericRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IGenericRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="n"&gt;DbSet&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dbSet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ILogger&lt;/span&gt; &lt;span class="n"&gt;_logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;GenericRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ILogger&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbSet&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;_logger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;dbSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FindAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;dbSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NotImplementedException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;All&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NotImplementedException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;dbSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;ToListAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Upsert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NotImplementedException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to create our UserRepository in the Repository folder as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GenericRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;IUserRepository&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UserRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ILogger&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;All&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;dbSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToListAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LogError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"{Repo} All function error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserRepository&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Upsert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;existingUser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;dbSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefaultAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;existingUser&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;existingUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;existingUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;existingUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LogError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"{Repo} Upsert function error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserRepository&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;exist&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;dbSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefaultAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exist&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;dbSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exist&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LogError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"{Repo} Delete function error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserRepository&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the Repository has been created now we need to create our UnitofWork class inside the Data folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UnitOfWork&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IUnitOfWork&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IDisposable&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ILogger&lt;/span&gt; &lt;span class="n"&gt;_logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IUserRepository&lt;/span&gt; &lt;span class="n"&gt;Users&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UnitOfWork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ILoggerFactory&lt;/span&gt; &lt;span class="n"&gt;loggerFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;_logger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loggerFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"logs"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UserRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_logger&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;CompleteAsync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveChangesAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that the Unit of work is created we need to update the startup class, so it will be injected in our dependency injection framework. To do this we need to go to the startup class in the root folder and add the following in the ConfigureServices method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IUnitOfWork&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UnitOfWork&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us create our controller inside our controller folder, create a new class called UsersController.cs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ApiController&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[controller]"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ControllerBase&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ILogger&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UsersController&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IUnitOfWork&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UsersController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;ILogger&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UsersController&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;IUnitOfWork&lt;/span&gt; &lt;span class="n"&gt;unitOfWork&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;_logger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;_unitOfWork&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unitOfWork&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;All&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{id}"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;HttpPost&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NewGuid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

              &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CompleteAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;CreatedAtAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GetItem"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JsonResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Somethign Went wrong"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{id}"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;UpdateItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;BadRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Upsert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CompleteAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

          &lt;span class="c1"&gt;// Following up the REST standart on update we need to return NoContent&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;NoContent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{id}"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;DeleteItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;BadRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CompleteAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
