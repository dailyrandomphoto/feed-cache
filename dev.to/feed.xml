<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Disadvantages of Css-in-Js ?</title>
      <author>sakethk</author>
      <pubDate>Thu, 01 Jul 2021 17:12:29 +0000</pubDate>
      <link>https://dev.to/sakethkowtha/disadvantages-of-css-in-js-56gf</link>
      <guid>https://dev.to/sakethkowtha/disadvantages-of-css-in-js-56gf</guid>
      <description>&lt;p&gt;I am a big fan of &lt;code&gt;CSS-in-JS&lt;/code&gt; especially &lt;code&gt;styled-components&lt;/code&gt; but in this article i want to discuss about disadvantages of using CSS-in-JS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Difficulty to learn for the devs who are new to react syntax.&lt;/li&gt;
&lt;li&gt;The class names themselves are dynamically generated, too, essentially breaking caching as things can change between builds/renders.&lt;/li&gt;
&lt;li&gt;Css-in-js parses all the style definitions into plain vanilla CSS and put everything inside &lt;code&gt;style&lt;/code&gt; tag in &lt;code&gt;index.html&lt;/code&gt; file. This will increase html file size.&lt;/li&gt;
&lt;li&gt;Adds lots of unnecessary code while parsing to vanilla css.&lt;/li&gt;
&lt;li&gt;Browser will not start interpreting the styles until styled-components has parsed them and added them to the DOM, which slows down rendering.&lt;/li&gt;
&lt;li&gt;Most of the UI libraries and frameworks won't support this approach.&lt;/li&gt;
&lt;li&gt;We can't use other css utilities like SCSS, LESS and PostCSS.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>cssinjs</category>
      <category>react</category>
    </item>
    <item>
      <title>10 Tips for Safe and Secure Remote Working for Developers
</title>
      <author>Andriy Zapisotskyi</author>
      <pubDate>Thu, 01 Jul 2021 17:10:15 +0000</pubDate>
      <link>https://dev.to/azapisotskyi/10-tips-for-safe-and-secure-remote-working-for-developers-19fg</link>
      <guid>https://dev.to/azapisotskyi/10-tips-for-safe-and-secure-remote-working-for-developers-19fg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#10-tips-for-safe-and-secure-remote-working"&gt;
  &lt;/a&gt;
  10 Tips for Safe and Secure Remote Working
&lt;/h1&gt;

&lt;p&gt;Modern employees require more flexibility than their previous counterparts. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.studocu.com/row/document/kenyatta-university/communication-skills/essays/the-way-we-work-has-changed/11470168/view"&gt;54%&lt;/a&gt; of employees say they’d rather shift to a career that offers them more flexibility. In other words, organizations are more likely to retain employees if they offer flexible work arrangements.&lt;/p&gt;

&lt;p&gt;But shifting from in-person work to remote work comes with a full host of changes. The most crucial one? Making sure your remote team is set up to work safely and securely. &lt;/p&gt;

&lt;p&gt;But before we touch on 10 tips to improve your remote team’s security, let’s take a look at the importance of safe and secure remote working.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-importance-of-safe-and-secure-remote-working"&gt;
  &lt;/a&gt;
  The importance of safe and secure remote working
&lt;/h3&gt;

&lt;p&gt;Now that more employees are working remotely, many companies are using &lt;a href="https://www.frevvo.com/cloud-workflow-software"&gt;cloud based workflows&lt;/a&gt;, so everyone has access to real-time information and documents. With employees being able to access company information from anywhere in the world, data security is more important than ever.&lt;/p&gt;

&lt;p&gt;But the average remote employee may not have the set-up that businesses require to protect sensitive and proprietary information.&lt;/p&gt;

&lt;p&gt;Without business-grade security, businesses are leaving themselves open to compliance issues, brand damage, leaked data, financial loss, and other legal and costly risks.&lt;/p&gt;

&lt;p&gt;That’s why it’s crucial to be proactive about protecting your business’s security. &lt;/p&gt;

&lt;p&gt;To protect your business, check out the following 10 safety tips.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-tips-for-safe-and-secure-remote-working"&gt;
  &lt;/a&gt;
  10 Tips for Safe and Secure Remote Working
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-use-a-vpn"&gt;
  &lt;/a&gt;
  1: Use a VPN
&lt;/h3&gt;

&lt;p&gt;Our first tip for increasing home and remote network security is providing employees with access to a virtual private network (VPN).&lt;/p&gt;

&lt;p&gt;VPNs act like a highly protected tunnel within another network connection you manage. All data stays within the tunnel, meaning: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No one outside the VPN has the authority to access it&lt;/li&gt;
&lt;li&gt;Your data never mingles with or leaks out into the internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VPNs also unlock geographically restricted content without encrypting your traffic (so it doesn’t affect your internet speed).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--niVLB5vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwizoogi2s286douveb5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--niVLB5vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwizoogi2s286douveb5.jpeg" alt="VPN"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When choosing a VPN, look for one that offers 24/7 customer support, native apps for multiple operating systems and devices, and international servers, like &lt;a href="https://vpnguru.com/reviews/expressvpn/"&gt;ExpressVPN&lt;/a&gt;does.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-keep-hr-processes-and-data-confidential"&gt;
  &lt;/a&gt;
  2: Keep HR processes and data confidential
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.crazyegg.com/blog/best-peo-companies/"&gt;HR processes&lt;/a&gt; and data contain sensitive information that could lead to business and legal problems if compromised. &lt;/p&gt;

&lt;p&gt;Because of this, HR teams need a way to access important data to do their jobs without sacrificing security. The answer? &lt;/p&gt;

&lt;p&gt;Storing data securely and making it accessible to the right people.&lt;/p&gt;

&lt;p&gt;To do this, you’ll either need to use a tool like Microsoft’s Compliance Manager in Microsoft 365 or you can hire a professional employer organization (PEO) service provider to handle it for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-have-a-safe-contract-signing-process"&gt;
  &lt;/a&gt;
  3: Have a safe contract signing process
&lt;/h3&gt;

&lt;p&gt;Remote working means that you’ll likely hire your team without seeing them face-to-face. &lt;/p&gt;

&lt;p&gt;From non-disclosure agreements to work contracts and W-4s, new employees have a lot of forms to sign.&lt;/p&gt;

&lt;p&gt;To make sure your onboarding process is secure, you’ll need to use &lt;a href="https://www.pandadoc.com/contract-management-software/"&gt;contract management software&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This ensures that all documents are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In order&lt;/li&gt;
&lt;li&gt;Signed and dated electronically &lt;/li&gt;
&lt;li&gt;Encrypted and secured from lurkers &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having a safe contract signing process is also important for other contracts and forms, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client contracts&lt;/li&gt;
&lt;li&gt;Vendor contracts&lt;/li&gt;
&lt;li&gt;Tax forms &lt;/li&gt;
&lt;li&gt;Legal forms&lt;/li&gt;
&lt;li&gt;Banking forms &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-share-documents-securely"&gt;
  &lt;/a&gt;
  4: Share documents securely
&lt;/h3&gt;

&lt;p&gt;Collaboration and file sharing are integral parts of a remote business.&lt;/p&gt;

&lt;p&gt;Whether it’s NDA, &lt;a href="https://www.conversion.ai/templates"&gt;copy templates&lt;/a&gt;, product description, or ad copy – all documents have to be shared securely across the whole team.&lt;/p&gt;

&lt;p&gt;To help your employees securely share files, consider using protected &lt;a href="https://wordable.io/open-a-pdf-in-google-docs/"&gt;PDFs and private Google docs&lt;/a&gt; with assigned permissions. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M2mMGS5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drhg8yfs00uhm2vt1znx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M2mMGS5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drhg8yfs00uhm2vt1znx.jpeg" alt="Lumin PDF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to encourage your employees to refrain from collaborating and sharing files through email. Although sharing through email is usually quick and easy, it’s best to avoid &lt;a href="https://dev.to/baldikov/how-to-secure-the-communication-of-your-remote-team-3g0"&gt;communicating&lt;/a&gt; and transferring files this way if confidential information is involved.&lt;/p&gt;

&lt;p&gt;If you have to use email to send or receive a file, always triple-check where it’s coming from or where you’re sending it to make sure it’s a valid and secure email address.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-issue-devices-to-your-team"&gt;
  &lt;/a&gt;
  5: Issue devices to your team
&lt;/h3&gt;

&lt;p&gt;When employees use their own devices to work from home, they tend to use devices that are less secure than business-issued devices. &lt;/p&gt;

&lt;p&gt;It’s possible that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Their devices don’t have proper security applications installed&lt;/li&gt;
&lt;li&gt;They don’t update their software&lt;/li&gt;
&lt;li&gt;They could be using the same simple password for all logins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even worse, they could be accessing insecure websites like torrents or suspicious sites using those same devices. This increases the risk of data leaks and viruses plaguing your confidential files. &lt;/p&gt;

&lt;p&gt;To avoid this, consider issuing professional devices to your employees that your IT team recommends. If this isn’t possible, see if your IT team can tighten the security around your employees’ personal devices. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-use-antivirus-software"&gt;
  &lt;/a&gt;
  6: Use antivirus software
&lt;/h3&gt;

&lt;p&gt;Your business probably already uses cybersecurity tools to protect against &lt;a href="https://dev.to/pranav2612000/phishinder-a-phishing-detection-tool-3ff0"&gt;phishing&lt;/a&gt;, viruses, malware, and ransomware on business hardware. &lt;/p&gt;

&lt;p&gt;But if employees are using personal devices for work, they need high-level protection too. &lt;/p&gt;

&lt;p&gt;To make sure they use antivirus software, provide them with security software programs and ask them to show you proof that they’ve been installed. You can also provide a list of acceptable security software programs as an alternative. &lt;/p&gt;

&lt;p&gt;In the end, there’s no way around it — everyone needs antivirus software to work safely. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-implement-remote-working-policies"&gt;
  &lt;/a&gt;
  7: Implement remote working policies
&lt;/h3&gt;

&lt;p&gt;Implementing remote work &lt;a href="https://dev.to/mannuelf/content-security-policy-on-netlify-guide-4p0c"&gt;security policies&lt;/a&gt; shows your team that your business is serious about having security measures in place. This also holds your staff accountable for working securely.&lt;/p&gt;

&lt;p&gt;After choosing which policies to implement, make sure to coach your team, so they fully understand what’s expected of them.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zOu5G8Yr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f54e2tfvuaucl90061bp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zOu5G8Yr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f54e2tfvuaucl90061bp.png" alt="Policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your security policies may include rules about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Screen positioning &lt;/li&gt;
&lt;li&gt;Session logout&lt;/li&gt;
&lt;li&gt;Sharing access&lt;/li&gt;
&lt;li&gt;Alternative work sites &lt;/li&gt;
&lt;li&gt;Lockable, burglar-resistant office equipment &lt;/li&gt;
&lt;li&gt;Backup media storage&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#8-encourage-employees-to-report-suspicious-attempts"&gt;
  &lt;/a&gt;
  8: Encourage employees to report suspicious attempts
&lt;/h3&gt;

&lt;p&gt;Employees often feel nervous reporting suspicious attempts or potential cyber incidents. They may fear losing their job, getting penalized, or being questioned about breaching security policies. &lt;/p&gt;

&lt;p&gt;But encouraging employees to report cyber incidents can make them feel more comfortable about coming forward when something happens. &lt;/p&gt;

&lt;p&gt;To foster open communication, create a single source dedicated to reporting suspicious activity via a dedicated messaging group, Slack channel, or IT support email. This way, they’ll know exactly how to report the incident when they’re working from home. &lt;/p&gt;

&lt;p&gt;It’s also important to ask employees to report suspicious activity, even if they broke one of your security policies. To encourage them to do this, ensure employees that they won’t face harsh disciplinary action if they come forward. Then, offer additional security training so they can be better equipped to follow policies in the future. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-provide-security-training-and-reminders-to-your-team"&gt;
  &lt;/a&gt;
  9: Provide security training and reminders to your team
&lt;/h3&gt;

&lt;p&gt;Conducting security training in the form of webinars, workshops, and video classes helps employees better understand how to work safely. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AX1eDG7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acs1imw7e94n6kgfvbih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AX1eDG7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acs1imw7e94n6kgfvbih.png" alt="Remote work security"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When deciding on a training program, choose one that’s hands-on. This way, employees can practice sharing files, updating software, configuring their routers, installing virus protection, and using VPNs. &lt;/p&gt;

&lt;p&gt;One more important point, use LastPass as a password management system or any other &lt;a href="https://blog.appsumo.com/lastpass-alternative/"&gt;LastPast alternative&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s also important to explain exactly what to do if something goes awry. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-prepare-for-a-security-breach"&gt;
  &lt;/a&gt;
  10: Prepare for a security breach
&lt;/h3&gt;

&lt;p&gt;Remember, security is a team effort. It’s not really a question of if you’ll have a security breach, but rather when you’ll have one.&lt;/p&gt;

&lt;p&gt;To make sure your business will still be up and running when that happens, have backup systems in place. &lt;/p&gt;

&lt;p&gt;What will you do if an employee’s device is stolen?&lt;/p&gt;

&lt;p&gt;What will you do if a manager accidentally opens a phishing email?&lt;/p&gt;

&lt;p&gt;Have a backup plan in place in case anything happens. That way, you won’t lose productivity, even if your systems and networks are breached. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And that’s it! We hope these 10 tips for safe and secure remote working are just what you needed to read. &lt;/p&gt;

&lt;p&gt;With careful planning and training, your team will be on its way to operating as securely as possible.&lt;/p&gt;

&lt;p&gt;Are you curious about the history of cloud-based workflows, AKA the main reason businesses can operate and collaborate remotely? &lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss/episodes/172"&gt;Then check out our podcast episode “The History of the Cloud.”&lt;/a&gt;&lt;/p&gt;

</description>
      <category>remote</category>
      <category>workstations</category>
      <category>programming</category>
      <category>security</category>
    </item>
    <item>
      <title>How to build an ECommerce App with React</title>
      <author>Ashutosh Kumar Singh</author>
      <pubDate>Thu, 01 Jul 2021 17:05:16 +0000</pubDate>
      <link>https://dev.to/stormkit/how-to-build-an-ecommerce-app-with-react-27fe</link>
      <guid>https://dev.to/stormkit/how-to-build-an-ecommerce-app-with-react-27fe</guid>
      <description>&lt;p&gt;In this tutorial, we will build an E-commerce App with &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; using &lt;a href="https://buttercms.com/"&gt;ButterCMS&lt;/a&gt; and &lt;a href="https://snipcart.com/"&gt;Snipcart&lt;/a&gt;. We will use &lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt;, a modular and accessible component library, to style the app. &lt;br&gt;
Finally, we will deploy our ecommerce app with &lt;a href="https://www.stormkit.io/"&gt;Stormkit&lt;/a&gt;, a serverless deployment service for JavaScript apps similar to Vercel or Netlify.&lt;/p&gt;

&lt;p&gt;If you want to jump right into the code, check out the &lt;a href="https://github.com/lelouchB/react-ecommerce-butter"&gt;GitHub Repo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And here's a link to the deployed version: &lt;a href="https://yakscythe-49dgnn.stormkit.dev/"&gt;https://yakscythe-49dgnn.stormkit.dev/&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge of HTML, CSS &amp;amp; JavaScript&lt;/li&gt;
&lt;li&gt;Basic knowledge of &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Node &amp;amp; NPM installed on the local development machine.&lt;/li&gt;
&lt;li&gt;Any code editor of your choice.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"&gt;React Dev Tools&lt;/a&gt; (optional)&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://buttercms.com/"&gt;Butter CMS Account&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://app.snipcart.com/register"&gt;Snipcart Account&lt;/a&gt; (free forever in test mode)&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://www.stormkit.io/"&gt;Stormkit Account&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-is-buttercms"&gt;
  &lt;/a&gt;
  What is ButterCMS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://buttercms.com/"&gt;ButterCMS&lt;/a&gt; is a SaaS start-up that delivers value to Developers and Marketers through a &lt;a href="https://buttercms.com/blog/what-is-headless-cms"&gt;headless, API-based CMS (Content Management System)&lt;/a&gt; and blogging platform. Butter is a developer-friendly CMS that enables developers to build modern apps while also providing their marketing teams with the tools needed to make website content updates. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-snipcart"&gt;
  &lt;/a&gt;
  What is Snipcart
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://snipcart.com/"&gt;Snipcart&lt;/a&gt; is HTML based fully customizable shopping cart that you can integrate with any web stack in few simple steps and start accepting international payments in minutes. With Snipcart's management dashboard, you can track abandoned carts, sales, orders, customers, and more.&lt;/p&gt;

&lt;p&gt;Snipcart works perfectly with Headless CMS like Butter and speeds up your development process, provides better security, and functionality to your ecommerce app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-stormkit"&gt;
  &lt;/a&gt;
  What is Stormkit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.stormkit.io/"&gt;Stormkit&lt;/a&gt; is a serverless hosting and deployment service for JavaScript applications. It enables you to focus on developing your application instead of wasting time by automating deployments, logs, hosting, scaling, TLS certificates and much more with state of the art best practices and features like &lt;a href="https://www.stormkit.io/docs/features/multiple-environments"&gt;multiple environments&lt;/a&gt;, &lt;a href="https://www.stormkit.io/docs/features/staged-rollouts"&gt;staged rollouts&lt;/a&gt;, &lt;a href="https://www.stormkit.io/docs/features/remote-config"&gt;remote Config&lt;/a&gt; and &lt;a href="https://www.stormkit.io/docs/features/snippets"&gt;snippets&lt;/a&gt;. This makes Stormkit something like a low-code frontend infrastructure service for developers.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-setup-and-install-react"&gt;
  &lt;/a&gt;
  How to Setup and Install React
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you will use Create React App template to quickly create the initial React app. Run the following command in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app react-ecommerce-butter
&lt;span class="nb"&gt;cd &lt;/span&gt;react-ecommerce-butter
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last command, &lt;code&gt;npm start&lt;/code&gt;, will start the React development server on your system's port 3000.  Head over to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; in your browser to view your React app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1x6IeDLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv0wjyn9l84fw9izr0st.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1x6IeDLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv0wjyn9l84fw9izr0st.png" alt="React App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can stop the development server by hitting &lt;strong&gt;CTRL+C&lt;/strong&gt; in the terminal. &lt;/p&gt;

&lt;p&gt;In this tutorial, you will use Chakra UI to style your ecommerce app. Run the following command to install Chakra UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4 react-icons
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update &lt;code&gt;src/index.js&lt;/code&gt; to wrap your react app with the &lt;code&gt;ChakraProvider&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;reportWebVitals&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./reportWebVitals&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;reportWebVitals&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file to store ButterCMS and Snipcart API keys securely as environment variables. Run the following command to create the &lt;code&gt;.env&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to create a &lt;a href="https://buttercms.com/"&gt;free ButterCMS account&lt;/a&gt;. After creating an account, head over to &lt;a href="https://buttercms.com/settings/"&gt;https://buttercms.com/settings/&lt;/a&gt; and copy the &lt;strong&gt;Read API Token&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7JAOFGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fg0wiqlu4q7vjv72uk3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7JAOFGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fg0wiqlu4q7vjv72uk3v.png" alt="ButterCMS API Token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Navigate to &lt;a href="https://app.snipcart.com/register"&gt;https://app.snipcart.com/register&lt;/a&gt; in your browser and create a free Snipcart account if you haven't already.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i8LwrGCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5txe0wq8vwgxy7tiojq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8LwrGCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5txe0wq8vwgxy7tiojq.png" alt="Snipcart Account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating the Snipcart account, head over to &lt;a href="https://app.snipcart.com/?ReturnUrl=%2fdashboard%2faccount%2fcredentials"&gt;account settings&lt;/a&gt; and copy the &lt;strong&gt;PUBLIC TEST API KEY&lt;/strong&gt; under Credentials.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eAXhEXIi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpijioadwvhvm2rh90j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eAXhEXIi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpijioadwvhvm2rh90j1.png" alt="Snipcart API Key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste both Butter CMS API Key and Snipcart Public Test API Key in the &lt;code&gt;.env&lt;/code&gt; file as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;REACT_APP_BUTTER_ECOMMERCE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="nv"&gt;REACT_APP_SNIPCART_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-create-products-on-butter"&gt;
  &lt;/a&gt;
  How To Create Products on Butter
&lt;/h2&gt;

&lt;p&gt;In this section, you will create the products for your ecommerce app on Butter. In this tutorial, you will create an ecommerce platform named &lt;strong&gt;Cookie Jar&lt;/strong&gt;, where customers can buy different varieties of cookies. Hence, the products for this ecommerce platform will be &lt;strong&gt;cookies&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Navigate to your &lt;a href="https://buttercms.com/content/collections/"&gt;Butter Dashboard&lt;/a&gt; and then create a new collection named &lt;strong&gt;cookies&lt;/strong&gt; with the following fields. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt; - Type: &lt;code&gt;Number&lt;/code&gt; - &lt;code&gt;isRequired&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt; - Type: &lt;code&gt;Short Text&lt;/code&gt; - &lt;code&gt;isRequired&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;description&lt;/code&gt; - Type: &lt;code&gt;Long Text&lt;/code&gt; - &lt;code&gt;isRequired&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;price&lt;/code&gt; - Type: &lt;code&gt;Number&lt;/code&gt; - &lt;code&gt;isRequired&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;image&lt;/code&gt; - Type: &lt;code&gt;Media&lt;/code&gt; - &lt;code&gt;isRequired&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can create an ecommerce app on any product like shoes, sports stuff, craft, etc. You can add additional fields like ratings, reviews, stock, etc., to your ecommerce app, but these are the bare minimum required for any ecommerce app.&lt;/p&gt;

&lt;p&gt;You can add the fields by dragging and dropping the corresponding field types.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YEP2Qjgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yeaahhhy6sabyiqotpgc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YEP2Qjgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yeaahhhy6sabyiqotpgc.png" alt="Fields Drag N Drop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding the fields, click on the &lt;strong&gt;Create Collection&lt;/strong&gt; button, name the collection &lt;code&gt;cookies&lt;/code&gt;, and hit &lt;strong&gt;Save as a Collection&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oHGzU9-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hw1x3l2n5w3slzp389e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oHGzU9-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hw1x3l2n5w3slzp389e.png" alt="New Cookie"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will also need to add some dummy data to the &lt;code&gt;cookies&lt;/code&gt; collection. You can either copy the dummy data from &lt;a href="https://yakscythe-49dgnn.stormkit.dev/"&gt;https://yakscythe-49dgnn.stormkit.dev/&lt;/a&gt; or add your favorite cookies.&lt;/p&gt;

&lt;p&gt;Make sure to hit &lt;strong&gt;Publish&lt;/strong&gt; after adding the cookies, aka products. You can come back and add more products or edit them whenever you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--itvUyh-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asz2yutzy9y2zri898tz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--itvUyh-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asz2yutzy9y2zri898tz.png" alt="Publish"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is how your &lt;code&gt;cookies&lt;/code&gt; collection will look after adding products to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4P1RpB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ibgt064b95jpk81e9pi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4P1RpB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ibgt064b95jpk81e9pi.png" alt="ButterCMS Cookies Collection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-fetch-and-display-products"&gt;
  &lt;/a&gt;
  How To Fetch and Display Products
&lt;/h2&gt;

&lt;p&gt;In this section, you will fetch the data  from Butter CMS and display them as products on your ecommerce app. &lt;/p&gt;

&lt;p&gt;You will use the &lt;code&gt;buttercms&lt;/code&gt; library to fetch data from ButterCMS. Run the following command in your project's root directory to install &lt;code&gt;buttercms&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i buttercms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update &lt;code&gt;App.js&lt;/code&gt; file with the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Butter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;buttercms&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;butter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Butter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_BUTTER_ECOMMERCE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProducts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;butter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cookies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allProducts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;setProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allProducts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you start by creating an instance of &lt;code&gt;Butter&lt;/code&gt; using your ButterCMS API key stored in &lt;code&gt;.env&lt;/code&gt; file and accessed using &lt;code&gt;process.env.REACT_APP_BUTTER_ECOMMERCE&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Then you create a state named &lt;code&gt;products&lt;/code&gt; to store the data fetched from ButterCMS using the &lt;code&gt;useState()&lt;/code&gt; hook. Hooks are functions that use React features like defining a state without writing a class.&lt;/p&gt;

&lt;p&gt;You fetch the collection named &lt;code&gt;cookies&lt;/code&gt; using butter's &lt;code&gt;.retrieve()&lt;/code&gt; method inside the React's &lt;code&gt;useEffect()&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;You then access the response from ButterCMS and store it inside the &lt;code&gt;products&lt;/code&gt; state using the &lt;code&gt;setProducts()&lt;/code&gt; method. Here is how the state &lt;code&gt;products&lt;/code&gt; look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"meta"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;125151&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Biscotti Cookies"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Biscotti actually means “twice baked” and the cookie is indeed baked twice, resulting in its hard and crunchy texture."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://cdn.buttercms.com/UqbFGAJLTGqtYqF2UajV"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"meta"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;113778&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Chocolate Chip Cookies"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Chocolate chip cookies are the perennial classic and longtime fan favorite. "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://cdn.buttercms.com/Xe1zfNvRCiOOI4LPuoVb"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To display the product's data, you iterate over the &lt;code&gt;products&lt;/code&gt; state using the &lt;code&gt;.map()&lt;/code&gt; method and display the data on the page using curly brackets &lt;code&gt;{}&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Head over to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;. Here is how your ecommerce app will look like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_EjkH0vm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2odeubfek389zv2stfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_EjkH0vm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2odeubfek389zv2stfn.png" alt="App without Styling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though your app needs styling, but you are getting all the required data from ButterCMS successfully. Now, you will use Chakra UI to style the app. Update &lt;code&gt;App.js&lt;/code&gt; with Chakra UI components to style your ecommerce app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Divider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SimpleGrid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FiShoppingCart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FiShoppingBag&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/fi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Butter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;buttercms&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;butter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Butter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_BUTTER_ECOMMERCE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProducts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;butter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cookies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allProducts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;setProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allProducts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt; &lt;span class="na"&gt;maxW&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container.xl"&lt;/span&gt; &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100vh"&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt; &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"space-between"&lt;/span&gt; &lt;span class="na"&gt;alignContent&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;
          &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;
          &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;
          &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2rem"&lt;/span&gt;
          &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"gray.900"&lt;/span&gt;
          &lt;span class="na"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Robo"&lt;/span&gt;
          &lt;span class="na"&gt;my&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5px"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Cookie Jar
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;
          &lt;span class="na"&gt;my&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5px"&lt;/span&gt;
          &lt;span class="na"&gt;colorScheme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;
          &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ghost"&lt;/span&gt;
          &lt;span class="na"&gt;leftIcon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FiShoppingBag&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"24px"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"lg"&lt;/span&gt;
          &lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          View Cart
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Divider&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;mt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SimpleGrid&lt;/span&gt;
          &lt;span class="na"&gt;minChildWidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"300px"&lt;/span&gt;
          &lt;span class="na"&gt;align&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;
          &lt;span class="na"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;
          &lt;span class="na"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"40px"&lt;/span&gt;
          &lt;span class="na"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;
              &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt;
              &lt;span class="na"&gt;maxW&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"sm"&lt;/span&gt;
              &lt;span class="na"&gt;borderWidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1px"&lt;/span&gt;
              &lt;span class="na"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"lg"&lt;/span&gt;
              &lt;span class="na"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"lg"&lt;/span&gt;
              &lt;span class="na"&gt;_hover&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt;
                &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"350px"&lt;/span&gt;
                &lt;span class="na"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"cover"&lt;/span&gt;
                &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Picture of &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;roundedTop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"lg"&lt;/span&gt;
              &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"6"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;
                  &lt;span class="na"&gt;mt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;
                  &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"space-between"&lt;/span&gt;
                  &lt;span class="na"&gt;alignContent&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;
                &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;
                    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2xl"&lt;/span&gt;
                    &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"semibold"&lt;/span&gt;
                    &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h4"&lt;/span&gt;
                    &lt;span class="na"&gt;textTransform&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"uppercase"&lt;/span&gt;
                    &lt;span class="na"&gt;lineHeight&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tight"&lt;/span&gt;
                    &lt;span class="na"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Roboto"&lt;/span&gt;
                  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;
                    &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h4"&lt;/span&gt;
                    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2xl"&lt;/span&gt;
                    &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bold"&lt;/span&gt;
                    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"teal.600"&lt;/span&gt;
                  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    $&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;
                  &lt;span class="na"&gt;mt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"gray.500"&lt;/span&gt;
                  &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;
                  &lt;span class="na"&gt;leftIcon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FiShoppingCart&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"24px"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                  &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"lg"&lt;/span&gt;
                  &lt;span class="na"&gt;mt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                  &lt;span class="na"&gt;isFullWidth&lt;/span&gt;
                  &lt;span class="na"&gt;colorScheme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;
                  &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"outline"&lt;/span&gt;
                  &lt;span class="na"&gt;alignSelf&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

                &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                  Add to Cart
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SimpleGrid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you import different Chakra UI components like &lt;code&gt;Container&lt;/code&gt;, &lt;code&gt;Flex&lt;/code&gt;, etc., and use them to style your app. Except for styling, the code used to fetch and display the data on the app remains the same.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will not discuss how these components are used in-depth; you can refer to &lt;a href="https://chakra-ui.com/docs/getting-started"&gt;official Chakra UI docs&lt;/a&gt; to learn more about these components.&lt;/p&gt;

&lt;p&gt;Here is how your app will look.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YmWWinBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bii84a6s8766argfq0zb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmWWinBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bii84a6s8766argfq0zb.png" alt="Chakra UI Styled App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have created two buttons in the above code, &lt;code&gt;View Cart&lt;/code&gt;, which shows users their cart, and &lt;code&gt;Add to Cart&lt;/code&gt;, which adds the product to the cart. These buttons don't work yet; you will integrate them with Snipcart in the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-integrate-snipcart-with-react-app"&gt;
  &lt;/a&gt;
  How To Integrate Snipcart With React App
&lt;/h2&gt;

&lt;p&gt;In this section, you will configure and integrate Snipcart with your ecommerce app. &lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;public/index.html&lt;/code&gt; file and add the following code inside the &lt;code&gt;&amp;lt;Head&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://app.snipcart.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.snipcart.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.snipcart.com/themes/v3.2.0/default/snipcart.css"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, add the following code in &lt;code&gt;public/index.html&lt;/code&gt; before closing &lt;code&gt;&amp;lt;Body&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script
  &lt;/span&gt;&lt;span class="na"&gt;async&lt;/span&gt;
  &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.snipcart.com/themes/v3.2.0/default/snipcart.js"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"snipcart"&lt;/span&gt;
  &lt;span class="na"&gt;data-config-modal-style=&lt;/span&gt;&lt;span class="s"&gt;"side"&lt;/span&gt;
  &lt;span class="na"&gt;data-api-key=&lt;/span&gt;&lt;span class="s"&gt;"%REACT_APP_SNIPCART_KEY%"&lt;/span&gt;
  &lt;span class="na"&gt;hidden&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Snipcart API Key stored in &lt;code&gt;.env&lt;/code&gt; file is being accessed in the above code using &lt;code&gt;%REACT_APP_SNIPCART_KEY%&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;Add to Cart&lt;/code&gt; button in &lt;code&gt;src/App.js&lt;/code&gt; like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;
  &lt;span class="na"&gt;leftIcon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FiShoppingCart&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"24px"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"lg"&lt;/span&gt;
  &lt;span class="na"&gt;mt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;isFullWidth&lt;/span&gt;
  &lt;span class="na"&gt;colorScheme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;
  &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"outline"&lt;/span&gt;
  &lt;span class="na"&gt;alignSelf&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"snipcart-add-item"&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Add to Cart
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you pass the data required by Snipcart, like the product's name, id, description, etc.&lt;/p&gt;

&lt;p&gt;Here is the &lt;code&gt;Add to Cart&lt;/code&gt; button in action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ffk36xvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgg5l99n93m6hu2s2dz3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ffk36xvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgg5l99n93m6hu2s2dz3.gif" alt="Add to Cart GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, update the &lt;code&gt;View Cart&lt;/code&gt; button like with &lt;code&gt;className="snipcart-checkout"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;
  &lt;span class="na"&gt;my&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5px"&lt;/span&gt;
  &lt;span class="na"&gt;colorScheme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;
  &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ghost"&lt;/span&gt;
  &lt;span class="na"&gt;leftIcon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FiShoppingBag&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"24px"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"lg"&lt;/span&gt;
  &lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"snipcart-checkout"&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  View Cart
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This button will show the current items in the cart to the user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWJ9MZze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzlotnro1lcndr4adcw5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWJ9MZze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzlotnro1lcndr4adcw5.gif" alt="View Cart GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run the following commands in the terminal to commit your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="s2"&gt;"Finished building the React Ecommerce app"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-deploy-your-ecommerce-app-with-stormkit"&gt;
  &lt;/a&gt;
  How to Deploy your Ecommerce App with Stormkit
&lt;/h2&gt;

&lt;p&gt;In this section, you will deploy the ecommerce app with the free tier of Stormkit. &lt;/p&gt;

&lt;p&gt;The first step is to push your code to a GitHub repository. Create an account on &lt;a href="https://github.com/"&gt;https://github.com/&lt;/a&gt; if you haven't already.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6aDlItCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eguo833m8dx9gm0ctp8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6aDlItCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eguo833m8dx9gm0ctp8c.png" alt="Create an account on GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Navigate to &lt;a href="https://github.com/new"&gt;https://github.com/new&lt;/a&gt; and create a new GitHub repo with &lt;code&gt;react-ecommerce-butter&lt;/code&gt; as the repo name. You can skip other fields for now. Finally, click on the &lt;code&gt;Create repository&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vPGYFhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hip4tiv43gic6jcfg6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vPGYFhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hip4tiv43gic6jcfg6h.png" alt="Create new Repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the next page, you will be provided with the code to push your code to GitHub. Copy the commands from the second section, i.e., &lt;code&gt;...or push an existing repository from the command line&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I2sGQdca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lqthf6icqhai34oaccj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I2sGQdca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lqthf6icqhai34oaccj.png" alt="Push Commands"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The commands will be similar to this but will contain your GitHub username.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote add origin https://github.com/lelouchB/react-ecommerce-butter.git
git branch &lt;span class="nt"&gt;-M&lt;/span&gt; main
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last command will push your code to GitHub. Head over to &lt;a href="https://app.stormkit.io/auth"&gt;https://app.stormkit.io/auth&lt;/a&gt; and login using GitHub OAuth.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bEgf28RQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52koprgi0khk6qv4jqp0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bEgf28RQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52koprgi0khk6qv4jqp0.png" alt="Stormkit account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the GitHub icon under &lt;strong&gt;Where can we find your codebase?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aTjrADme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4g8s8icwj47dne1ph45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aTjrADme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4g8s8icwj47dne1ph45.png" alt="Where can we find your codebase?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be asked to connect your repositories with Stormkit. You can choose to connect all your repositories or select only the &lt;code&gt;react-ecommerce-butter&lt;/code&gt; repo. &lt;/p&gt;

&lt;p&gt;Select the &lt;code&gt;react-ecommerce-butter&lt;/code&gt; repository and proceed further.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SKqjw-sa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddtq371ded2dh74lbnct.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SKqjw-sa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddtq371ded2dh74lbnct.png" alt="Select the repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be redirected to your Stormkit dashboard, where your newly connected app would appear. Select the app you want to deploy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U9YDd5YY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogjgpg4nz6q2fbonps22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U9YDd5YY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogjgpg4nz6q2fbonps22.png" alt="Stormkit Dashboard with New App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On your app dashboard, you will be provided with a default &lt;code&gt;production&lt;/code&gt; environment. You can create as many environments as you want. In this tutorial, we will deploy using the default &lt;code&gt;production&lt;/code&gt; environment.&lt;/p&gt;

&lt;p&gt;Before deploying, you will need to set the environment variables in your &lt;code&gt;production&lt;/code&gt; environment; else your deployment will fail. &lt;/p&gt;

&lt;p&gt;Click on the &lt;code&gt;production&lt;/code&gt; environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---PXdBWGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3mdwjlkym2x2jl50tln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---PXdBWGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3mdwjlkym2x2jl50tln.png" alt="Production Enviroment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, click on the &lt;code&gt;Edit&lt;/code&gt; button or the pencil icon to edit the environment configurations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W--j413A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37pjub7cg1h354pjpvd6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W--j413A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37pjub7cg1h354pjpvd6.png" alt="Edit Configurations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A modal will appear with current environment configurations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E9-ED6vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fc0ows50bm835hye4l2x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E9-ED6vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fc0ows50bm835hye4l2x.png" alt="Modal with Enviroment Configurations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll to the bottom of the modal; you will see the &lt;strong&gt;Build configuration&lt;/strong&gt; and &lt;strong&gt;Environment variables&lt;/strong&gt; sections. &lt;/p&gt;

&lt;p&gt;Under &lt;strong&gt;Build configuration,&lt;/strong&gt; type &lt;code&gt;build&lt;/code&gt; under &lt;strong&gt;Public folder&lt;/strong&gt; field and add &lt;code&gt;npm run build&lt;/code&gt; command under &lt;strong&gt;Build command&lt;/strong&gt; field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESdyIz9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/800nesmk4r0s9cbr9sx1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESdyIz9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/800nesmk4r0s9cbr9sx1.png" alt="Build configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Under &lt;strong&gt;Environment variables&lt;/strong&gt;, add &lt;code&gt;REACT_APP_BUTTER_ECOMMERCE&lt;/code&gt; and &lt;code&gt;REACT_APP_SNIPCART_KEY&lt;/code&gt; environment variables with their values and click on the &lt;strong&gt;Update environment&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kg5F4lvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dxpphqwchq4jnuoeyzf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kg5F4lvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dxpphqwchq4jnuoeyzf.png" alt="Environment Variables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, click on the &lt;strong&gt;Deploy now&lt;/strong&gt; button to deploy your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wcFazYpf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rwlpxmd0rrkk9vb6ukw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wcFazYpf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rwlpxmd0rrkk9vb6ukw.png" alt="Deploy Now"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A modal will appear to select the environment, select the &lt;strong&gt;production&lt;/strong&gt; environment and click on &lt;strong&gt;Deploy now&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKfg65QX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xf5v2bb7m21j0ywg8op.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKfg65QX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xf5v2bb7m21j0ywg8op.png" alt="Choose Enviroment and Deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Deploy now&lt;/strong&gt; will trigger the deployment process, which you can see live on your dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LR6_eyWG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w83nmu8rzaduju480ufz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LR6_eyWG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w83nmu8rzaduju480ufz.png" alt="Deployment Process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the deployment process completes, you will be provided with a preview URL of your deployed website. &lt;/p&gt;

&lt;p&gt;If the preview looks good, you can publish it to production by going to the &lt;strong&gt;Deployments&lt;/strong&gt; tab and clicking on the triple dots across the latest commit, i.e., &lt;code&gt;Finished building the React Ecommerce app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hqhuAIkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l2kdmoy78mh1afyjzom.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hqhuAIkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l2kdmoy78mh1afyjzom.png" alt="Publish button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A modal will appear, deselect the sync sliders option and then scroll the bar to 100%, i.e., to the end. Finally, click on &lt;strong&gt;Publish to production&lt;/strong&gt; button to publish the app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hwMWmjFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ut1dq9p9qmtqn2vtla7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hwMWmjFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ut1dq9p9qmtqn2vtla7t.png" alt="Publish to production"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, your ecommerce app has been deployed. You can see the deployed version of this project &lt;a href="https://yakscythe-49dgnn.stormkit.dev/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2xsumbyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jjsitenpe7pw74y5qe0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2xsumbyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jjsitenpe7pw74y5qe0.png" alt="Congrats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we learned how to build an Ecommerce App with React.js using ButterCMS and Snipcart. Finally, we deployed our ecommerce app with Stormkit. You can follow this tutorial and create your own version of this project. &lt;/p&gt;

&lt;p&gt;Here are a few ideas to get you started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Style the app using other UI libraries like &lt;a href="https://react-bootstrap.github.io/"&gt;React Bootstrap&lt;/a&gt;, &lt;a href="https://material-ui.com/"&gt;Material UI&lt;/a&gt;, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snipcart.com/blog/stripe-checkout-form-integration-vs-snipcart"&gt;Integrate a Payment Gateway like Stripe.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auth0.com/docs/quickstart/spa/react/01-login"&gt;Add Authentication Portal with Auth0.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some additional resources that can be helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://buttercms.com/"&gt;ButterCMS Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stormkit.io/docs"&gt;Stormkit Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://buttercms.com/"&gt;Snipcart Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chakra-ui.com/docs/getting-started"&gt;Chakra UI Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>headlesscsms</category>
      <category>ecommerce</category>
      <category>snipcart</category>
    </item>
    <item>
      <title>Announcing: The Relicans Summer Camp 🏕️</title>
      <author>Pachi 🪐 (she/her/ela)</author>
      <pubDate>Thu, 01 Jul 2021 16:33:41 +0000</pubDate>
      <link>https://dev.to/newrelic/announcing-the-relicans-summer-camp-36if</link>
      <guid>https://dev.to/newrelic/announcing-the-relicans-summer-camp-36if</guid>
      <description>&lt;p&gt;The &lt;a href="https://therelicans.com"&gt;TheRelicans.com&lt;/a&gt; is a welcoming, inclusive community of developers, educators and creators, with one mission: &lt;strong&gt;Teach the world to code!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this goal in mind, &lt;strong&gt;we’re big fans of creating content around tech&lt;/strong&gt; — from tutorials to discussions to waxing poetic about Ruby, we talk about it all.&lt;/p&gt;

&lt;p&gt;These days, many developers are self-taught from online resources, and who among us has not Googled a tutorial for a difficult-to-solve problem? We all make use of these resources, and for many of us, seeing devs we can relate to sharing their coding experiences is part of our entry into tech.&lt;/p&gt;

&lt;p&gt;Coding is a specific skill, but creating content around technical topics is another skill entirely. Many developers we’ve talked to want to share their own knowledge to give back what they’ve learned to the community and help better their own understanding by teaching, but it can be hard to get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-relicans-summer-camp"&gt;
  &lt;/a&gt;
  The Relicans Summer Camp
&lt;/h2&gt;

&lt;p&gt;This is where The Relicans Summer Camp comes in!&lt;/p&gt;

&lt;p&gt;We want to help aspiring content creators level up their skills. To do this, we’re hosting a month-long series of challenges to help you take the first steps. The challenges are geared toward total beginners, but anyone is welcome to join and expand their content abilities.&lt;/p&gt;

&lt;p&gt;Wondering how to write blogs? We got you. Want to start speaking at conferences or launch a YouTube channel? Well, we got you covered there as well. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-us-for-the-following-topics"&gt;
  &lt;/a&gt;
  Join us for the following topics:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;YouTube — July 5-9 hosted by &lt;a href="https://twitter.com/RealChrisSean"&gt;Chris&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/endingwithali"&gt;Ali&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Open Source — July 12-16 hosted by &lt;a href="https://twitter.com/ChaelCodes"&gt;Chael&lt;/a&gt; &amp;amp; &lt;a href="/https://twitter.com/wyhaines"&gt;Kirk&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Writing — July 19-23 hosted by &lt;a href="https://twitter.com/xoMiaMoore"&gt;Mia&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/pachicodes"&gt;Pachi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Public Speaking — July 26-30 hosted by &lt;a href="https://twitter.com/AishaBlake"&gt;Aisha&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/aaronbassett"&gt;Aaron&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-join"&gt;
  &lt;/a&gt;
  How to Join
&lt;/h2&gt;

&lt;p&gt;Each week, we will post a challenge on &lt;strong&gt;Monday&lt;/strong&gt;, then host a livestream at 10am Pacific (1pm Eastern) on Tuesday around that week’s topic,  &lt;a href="https://twitch.tv/new_relic"&gt;on our Twitch channel&lt;/a&gt;. &lt;br&gt;
By completing the challenge, you will have created something that you can continue to build on and grow your skills as a content creator! &lt;/p&gt;

&lt;p&gt;You can learn more on  &lt;a href="https://www.therelicans.com/t/relicanssummercamp"&gt;#RelicansSummerCamp&lt;/a&gt;— make sure you have an account on TheRelicans.com if you don’t already.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And of course, we’re here to support you!&lt;/strong&gt; &lt;br&gt;
Our instructors will be standing by to answer your questions each week, and don’t forget to join &lt;a href="https://discord.gg/ZhHktV5B"&gt;The Relicans Discord&lt;/a&gt; for more conversation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-ready-everyone-we-start-on-monday-july-5th"&gt;
  &lt;/a&gt;
  Get ready, everyone. We start on Monday, July 5th!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/W2iIU7pl8ubHdDdlN0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/W2iIU7pl8ubHdDdlN0/giphy.gif" alt="Get ready GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-topics-are-you-most-looking-forward-to"&gt;
  &lt;/a&gt;
  Which topic(s) are you most looking forward to?
&lt;/h2&gt;

&lt;p&gt;Please let us know below in the comments section!&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>codenewbie</category>
      <category>content</category>
      <category>therelicans</category>
    </item>
    <item>
      <title>Git For Dummies</title>
      <author>Adriano Martins</author>
      <pubDate>Thu, 01 Jul 2021 16:27:24 +0000</pubDate>
      <link>https://dev.to/reviewpad/git-for-dummies-10ed</link>
      <guid>https://dev.to/reviewpad/git-for-dummies-10ed</guid>
      <description>&lt;p&gt;&lt;em&gt;We started &lt;a href="https://reviewpad.com/blog/category/for-dummies/"&gt;this series&lt;/a&gt; with&lt;/em&gt; &lt;a href="https://reviewpad.com/blog/code-reviews-for-dummies/"&gt;&lt;em&gt;a quick introduction to code reviews&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, and now we are extending the analogy and applying it to one of the most important tools of our trade: Git. It’s a revolutionary technology that entirely changed the field when it came to be in 2005, and we are going to explain how it works.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Think of &lt;strong&gt;a book&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;How many authors does a book have? One, you say? Not necessarily. Every kind of book, from &lt;a href="https://www.bookdepository.com/Sleeping-Beauties/9781473681286"&gt;fiction&lt;/a&gt; to &lt;a href="https://www.bookdepository.com/Freakonomics/9780061956270"&gt;non-fiction&lt;/a&gt;, from &lt;a href="https://www.bookdepository.com/The-Dead-Are-Arising/9781631491665"&gt;serious journalistic inquiries&lt;/a&gt; to &lt;a href="https://www.bookdepository.com/Good-Omens-Neil-Gaiman/9781473200852?ref=grid-view&amp;amp;qid=1625100862402&amp;amp;sr=1-1"&gt;the most commercial of novels&lt;/a&gt;, can have several authors.&lt;/p&gt;

&lt;p&gt;Let us tell you how collaborating on a book usually happens, and you will understand how Git works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-you-are-writing-as-a-team"&gt;
  &lt;/a&gt;
  1. You are writing as a team
&lt;/h3&gt;

&lt;p&gt;Let’s say you are writing a book and you have a co-author. Now, in the before-times, when the Internet wasn’t a key part of everything we do, you would probably write down your bit, they would write down theirs, and you would need to either meet physically or exchange documents somehow (mail, a delivery man, etc.) to be able to compare and contrast versions.&lt;/p&gt;

&lt;p&gt;This has a number of problems.&lt;/p&gt;

&lt;p&gt;You can’t work on the same section at the same time, for one. If you want to both work on the same section, one of the writers will have to combine the different documents.&lt;/p&gt;

&lt;p&gt;What happens if an author wants to make a change to a chapter that is already written? What happens if an author makes a lot of changes, and the others dislike it and want to go back to the old text?&lt;/p&gt;

&lt;p&gt;Writing code as a team had many of the same challenges before Git came along. Git is a VCS, or Version Control System.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-a-good-vcs-changes-everything"&gt;
  &lt;/a&gt;
  2. A good VCS changes everything
&lt;/h3&gt;

&lt;p&gt;Contemporary writers have Dropbox, Google Docs, and other tools that allow for synchronous work. No one really exchanges paper manuscripts anymore because computers and the Internet make life significantly easier.&lt;/p&gt;

&lt;p&gt;These tools use one form or another of a VCS much like Git.&lt;/p&gt;

&lt;p&gt;If a team of writers is writing their manuscript on, say, Google Docs, they can do a number of things that were impossible in the past, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  All writers can collaborate on the same document at the same time;&lt;/li&gt;
&lt;li&gt;  The main version of the book will always be up-to-date, regardless of changes;&lt;/li&gt;
&lt;li&gt;  Past versions can be accessed easily;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are plenty of VCSs out there that facilitate development, but Git is definitely the most popular, and it allows developers to do all of these exact same things. The most popular Code Hosting companies using Git are GitHub, GitLab, and BitBucket. Yes, &lt;strong&gt;Git and GitHub are not the same thing&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-keeping-track-of-every-line-written"&gt;
  &lt;/a&gt;
  3. Keeping track of every line written
&lt;/h3&gt;

&lt;p&gt;When you’re an author working on a book, you are going to take great care with the wording and every choice made. This is every bit as true even if you have co-authors.&lt;/p&gt;

&lt;p&gt;This is why modern VCSs such as Google Docs (which is more than a little bit inspired by VCSs) have a number of features that allow you to keep track of what’s happening while you and everyone else works.&lt;/p&gt;

&lt;p&gt;You can, for instance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Download and upload up-to-date versions of the book;&lt;/li&gt;
&lt;li&gt;  Create alternate/temporary versions of the book which you can share with the other authors;&lt;/li&gt;
&lt;li&gt;  Join temporary versions with the main one;&lt;/li&gt;
&lt;li&gt;  Easily deal with new chapters added while other writers worked on other parts of the book;&lt;/li&gt;
&lt;li&gt;  Go back to older versions in case something was deleted or lost;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But what if a writer particularly likes or dislikes a specific line, section, or chapter, and wants to know who wrote it?&lt;/p&gt;

&lt;p&gt;You can &lt;strong&gt;do that too&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When VCSs came up with the ability to identify the author of every single line of code, this changed things. Now it’s normal.&lt;/p&gt;

&lt;p&gt;Most of the things we’ve listed are taken for granted. They seem like the basic features of any online text editor. Every single one of these features was introduced or made mainstream by Git, though, and every single one was hailed as the key innovation they truly were.&lt;/p&gt;

&lt;p&gt;So now, as a way to break this little analogy we’ve built, here’s some Git terminology and what it compares to:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Writing a book in a team with a VCS&lt;/th&gt;
&lt;th&gt;Writing code in a team with Git&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Book&lt;/td&gt;
&lt;td&gt;Code Project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Book Section or Chapter&lt;/td&gt;
&lt;td&gt;Project Folder or File&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Main version of the book&lt;/td&gt;
&lt;td&gt;&lt;a href="https://git-scm.com/book/en/v2/Git-Branching-Branch-Management"&gt;&lt;code&gt;Main&lt;/code&gt; branch, or &lt;code&gt;Head&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Download the book for the first time&lt;/td&gt;
&lt;td&gt;Check out the project – &lt;a href="https://git-scm.com/docs/git-checkout"&gt;&lt;code&gt;git checkout&lt;/code&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update the book to the latest version&lt;/td&gt;
&lt;td&gt;Pull changes, or Fetch changes – &lt;a href="https://git-scm.com/docs/git-pull"&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/a&gt; / &lt;a href="https://git-scm.com/docs/git-fetch"&gt;&lt;code&gt;git fetch&lt;/code&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Temporary version to try new ideas&lt;/td&gt;
&lt;td&gt;Branch – &lt;a href="https://git-scm.com/docs/git-branch"&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Request to join temporary version to the main&lt;/td&gt;
&lt;td&gt;Pull request, or Merge request – &lt;a href="https://git-scm.com/docs/git-request-pull"&gt;&lt;code&gt;git request-pull&lt;/code&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Join temporary version to the main&lt;/td&gt;
&lt;td&gt;Merge branches, or pull changes to Main branch – &lt;a href="https://git-scm.com/docs/git-merge"&gt;&lt;code&gt;git merge&lt;/code&gt;&lt;/a&gt; / &lt;a href="https://git-scm.com/docs/git-pull"&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/a&gt; / &lt;a href="https://git-scm.com/docs/git-fetch"&gt;&lt;code&gt;git fetch&lt;/code&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Save changes on the computer&lt;/td&gt;
&lt;td&gt;Commit changes – &lt;a href="https://git-scm.com/docs/git-commit"&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Upload changes to the team server&lt;/td&gt;
&lt;td&gt;Push changes – &lt;a href="https://git-scm.com/docs/git-push"&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Find who wrote a line of text&lt;/td&gt;
&lt;td&gt;&lt;a href="https://git-scm.com/docs/git-blame"&gt;&lt;code&gt;git blame&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
Git terminology






&lt;p&gt;We hope you enjoyed this little foray into Git, and please let us know what topics we can explain next in this &lt;a href="https://reviewpad.com/blog/category/for-dummies/"&gt;“For Dummies” series&lt;/a&gt; in the comments or on Twitter (&lt;a href="https://twitter.com/codereviewpad"&gt;@reviewpad&lt;/a&gt;)!&lt;/p&gt;

</description>
      <category>git</category>
      <category>vcs</category>
      <category>explainlikeimfive</category>
    </item>
    <item>
      <title>Best 6 Free Icons Pack For Web Dev And Designer</title>
      <author>Innocent Coder</author>
      <pubDate>Thu, 01 Jul 2021 16:03:37 +0000</pubDate>
      <link>https://dev.to/innocentcoder/best-6-free-icons-pack-for-web-dev-and-designer-3064</link>
      <guid>https://dev.to/innocentcoder/best-6-free-icons-pack-for-web-dev-and-designer-3064</guid>
      <description>&lt;p&gt;This post repost from:- &lt;a href="https://the-dev-community.blogspot.com/best-6-free-icons-pack-for-web-dev-and"&gt;https://the-dev-community.blogspot.com/best-6-free-icons-pack-for-web-dev-and&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ricon-v1-demo-240-essential-interface-icons"&gt;
  &lt;/a&gt;
  Ricon v.1 Demo — 240 Essential Interface Icons
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HomsSz7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2te0mrvt3ikavnx6ilt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HomsSz7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2te0mrvt3ikavnx6ilt.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
A growing pack of 240 fully vector icons. Icons are based on a 24px grid system and balanced among each other using common proportions, curvatures, and white spaces. The set is designed to save your time and enhance your design - no matter if it's a &lt;br&gt;
website, mobile app, slide deck, or print design.&lt;/p&gt;

&lt;p&gt;link :- &lt;a href="https://remadesign.gumroad.com/l/ricon"&gt;https://remadesign.gumroad.com/l/ricon&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#blobs-icons"&gt;
  &lt;/a&gt;
  Blobs Icons
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQVmCHz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka4enujihh68c067630k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQVmCHz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka4enujihh68c067630k.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Enjoy a custom set of icons made to be highly customized. Change colors and sizes without having to worry about scalability issues. Add a unique look and feeling to your design and express more with less text.&lt;/p&gt;

&lt;p&gt;link :- &lt;a href="https://www.baianat.com/freebies/blobs"&gt;https://www.baianat.com/freebies/blobs&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#gamer-life-free-icon-pack"&gt;
  &lt;/a&gt;
  Gamer Life Free Icon Pack
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KoZ-yn4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jhg914zoxgmahlsax4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KoZ-yn4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jhg914zoxgmahlsax4k.png" alt="image"&gt;&lt;/a&gt; &lt;br&gt;
Check out this free icon pack made by Aakash Raj Dahal. A nice collection of free icons related to video gaming that you can use for web and mobile application interfaces. Icons are available in SVG, PNG, AI, and Figma file formats. All the 250 icons come in two weights: regular and light. Again, thanks to Aakash Raj Dahal for creating and sharing these free icons.&lt;/p&gt;

&lt;p&gt;link  :- &lt;a href="https://themeui.net/gamer-life-free-icon-pack/"&gt;https://themeui.net/gamer-life-free-icon-pack/&lt;/a&gt; &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#comercily-ecommerce-free-icon-set"&gt;
  &lt;/a&gt;
  Comercily – eCommerce Free Icon Set
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hGJ4KhAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub2zwc9hiuy5rqx9o3bh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGJ4KhAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub2zwc9hiuy5rqx9o3bh.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Here is a nice little freebie from Dipa Inhouse. Comercily is a free icon set for eCommerce and any transactional websites. The kit includes 40 well-crafted scalable vector icons. Icons are available in Figma, Sketch, SVG, EPS, and PNG file formats. Again thanks to Dipa Inhouse for sharing this freebie!&lt;/p&gt;

&lt;p&gt;link :- &lt;a href="https://themeui.net/comercily-ecommerce-free-icon-set/"&gt;https://themeui.net/comercily-ecommerce-free-icon-set/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#free-christmas-icons-set"&gt;
  &lt;/a&gt;
  Free Christmas Icons Set
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f8ZKRX82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bt7h7hjom3vhb6fe16m7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f8ZKRX82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bt7h7hjom3vhb6fe16m7.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
On the occasion of Christmas, Iconscout has designed for us special Christmas icons that come in three different styles line, flat, and colored outline. The icons come in PNG and SVG formats. You can use them anywhere you want. They are free of cost and can be used in both personal and commercial use.&lt;/p&gt;

&lt;p&gt;link :- &lt;a href="https://themeui.net/free-christmas-icons-set/"&gt;https://themeui.net/free-christmas-icons-set/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#line-icon-pack"&gt;
  &lt;/a&gt;
  Line Icon Pack
&lt;/h1&gt;

&lt;p&gt;A set of free icons that started as a side project. Now it has 320+ icons and still growing. A nice design resource you can use for your next project. The freebie is compatible with today’s popular design tools. Huge thanks to Petr Bilek for providing us with this awesome free icons.&lt;/p&gt;

&lt;p&gt;link :- &lt;a href="https://themeui.net/line-icon-pack/"&gt;https://themeui.net/line-icon-pack/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/innocentcoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGJ5NE5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ICZsIDfS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620705/764eb964-ecd2-4875-90c2-142dfc2f639c.jpg" alt="innocentcoder"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/innocentcoder/top-5-best-resources-to-learn-javascript-e3p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top 5 Best Resources To Learn Javascript&lt;/h2&gt;
      &lt;h3&gt;Innocent Coder ・ Jun 27 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>discuss</category>
      <category>css</category>
      <category>career</category>
    </item>
    <item>
      <title>Lessons Learned from Programming at Google w/ Hyrum Wright &amp; Titus Winters (Part 1)</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 01 Jul 2021 15:48:44 +0000</pubDate>
      <link>https://dev.to/linearb/lessons-learned-from-programming-at-google-w-hyrum-wright-titus-winters-part-1-5d5c</link>
      <guid>https://dev.to/linearb/lessons-learned-from-programming-at-google-w-hyrum-wright-titus-winters-part-1-5d5c</guid>
      <description>&lt;p&gt;Google is a titan of technology with one of the largest codebases in the world - and there are many lessons to be learned from how Google has scaled.&lt;/p&gt;

&lt;p&gt;In the first episode of a two-part series, Senior Google Staff Engineers Hyrum Wright and Titus Winters join the &lt;a href="https://open.spotify.com/episode/2r5ZD46J8mueaopwBlYJs6?si=OQENpmnzRNu2HerRnpt-yw&amp;amp;dl_branch=1"&gt;Dev Interrupted podcast&lt;/a&gt; to discuss lessons learned from programming at Google and to talk about their new book.&lt;/p&gt;

&lt;p&gt;Both guests bring a deep understanding of software engineering to the show: Hyrum is semi-famous as the "Hyrum" of Hyrum's Law; while Titus is responsible for managing 250 million lines of code and over 12,000 developers. &lt;/p&gt;

&lt;p&gt;Their book, &lt;a href="https://abseil.io/resources/swe-book"&gt;&lt;em&gt;Software Engineering at Google: Lessons Learned from Programming Over Time&lt;/em&gt;&lt;/a&gt;, is available for free online. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2r5ZD46J8mueaopwBlYJs6"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What is &lt;a href="https://www.hyrumslaw.com/"&gt;Hyrum's Law&lt;/a&gt; and how did it come to exist?&lt;/li&gt;
&lt;li&gt;The role of time in relation to software engineering&lt;/li&gt;
&lt;li&gt;The "real" goal of software engineering&lt;/li&gt;
&lt;li&gt;How Google thinks about scale&lt;/li&gt;
&lt;li&gt;Why every line of code is a lability&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>code</category>
      <category>scaling</category>
      <category>softwareengineering</category>
    </item>
    <item>
      <title>Connection and Collaboration on Polywork</title>
      <author>Cassidy Williams</author>
      <pubDate>Thu, 01 Jul 2021 15:42:24 +0000</pubDate>
      <link>https://dev.to/cassidoo/connection-and-collaboration-on-polywork-47kl</link>
      <guid>https://dev.to/cassidoo/connection-and-collaboration-on-polywork-47kl</guid>
      <description>&lt;p&gt;Hello!&lt;/p&gt;

&lt;p&gt;I'm Cassidy, and I'm the Director of Developer Experience at &lt;a href="https://www.netlify.com/?utm_source=devto&amp;amp;utm_medium=polywork-cs&amp;amp;utm_campaign=devex-cs"&gt;Netlify&lt;/a&gt;, and an Advisor for &lt;a href="https://www.polywork.com/cassidoo"&gt;Polywork&lt;/a&gt;, and an Advisor for &lt;a href="https://contenda.co/"&gt;Contenda&lt;/a&gt;, and a Chief Product Officer at &lt;a href="https://www.cosynd.com/"&gt;Cosynd&lt;/a&gt;, and a podcast host, and a newsletter author, and a meme-maker, and... well many other things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#joining-polywork"&gt;
  &lt;/a&gt;
  Joining Polywork
&lt;/h2&gt;

&lt;p&gt;I first heard of Polywork and the concept of "polyworking" last year when I talked with their team, and I loved it right away. For someone like me, it's hard to convey online all the things I do. I have my personal website, which mostly works (except I am pretty bad at updating it), I have LinkedIn, which shows my job titles, I have Twitter, which is good for spamming the world... but nothing that really shows the right highlights I want people to see.&lt;/p&gt;

&lt;p&gt;And thus, &lt;a href="https://www.polywork.com/cassidoo"&gt;my Polywork profile was born&lt;/a&gt;! It's not fully complete, but I can't tell you how nice it is to just have a place for allll of the work I do. My little data-hoarder heart is happy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-others"&gt;
  &lt;/a&gt;
  Finding others
&lt;/h2&gt;

&lt;p&gt;Another element that I like about Polywork is the fact that my profile, and others, are discoverable! This is something that I couldn't achieve with my personal website (outside of just SEOing it a ton), and something that pushed me over the edge of using it more and more. I'm able to see others who like &lt;a href="https://www.polywork.com/badges/mechanical-keyboard-enthusiast"&gt;mechanical keyboards&lt;/a&gt;, &lt;a href="https://www.polywork.com/badges/speaker"&gt;speak at events&lt;/a&gt;, &lt;a href="https://www.polywork.com/badges/memer"&gt;like memes&lt;/a&gt;, or &lt;a href="https://www.polywork.com/badges/founder"&gt;found companies&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;What's particularly exciting though, and something that I worked specifically with the Polywork team on, is being able to collaborate with all of these people 👀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-others"&gt;
  &lt;/a&gt;
  Working with others
&lt;/h2&gt;

&lt;p&gt;Sometimes when you're starting a new project, thinking about a new venture, or just needing advice, it's hard to know who to turn to. On other platforms, can go through your connections and try to find the right person, and hope that they might be open to those sorts of conversations. On Polywork, you know exactly what people are open to talking about!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---EBKue3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czssr734c1epzmw8ulbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---EBKue3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czssr734c1epzmw8ulbp.png" alt="Collaboration options with Cassidy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you set up your profile, you can say that you might be open to collaborating on some content, being a mentor to someone, etc. By specifying these topics upfront, it's like setting virtual boundaries for yourself, and for others.&lt;/p&gt;

&lt;p&gt;That being said: one of my favorite parts of how these collaboration features were implemented was the moderation features. We talked about this ton to get it just right, and I'm really pleased with where it's at.&lt;br&gt;
When someone contacts you, and it's not relevant to the topic that they said, or something that you're open to, you can immediately ignore or block the person. I don't know about you, but as a lady on the World Wide Web I often have to deal with... creepy dudes in the DMs on Twitter and LinkedIn. On Polywork, if someone is continuously messaging people spammy or inappropriate content to other users and they get blocked multiple times, &lt;strong&gt;Polywork will block them entirely&lt;/strong&gt;. By emphasizing this type of moderation first, I think Polywork has a real opportunity to become one of the safest places to collaborate on the Internet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-us"&gt;
  &lt;/a&gt;
  Join us!
&lt;/h2&gt;

&lt;p&gt;Polywork has a long way to go, but their team is super open to trying things that users suggest (and have been since the beginning, which is really why I joined as an advisor)! Between the boundaries people can set, controls people have over their profile, or even just reducing certain systems of stress (like no "like" buttons on anything), they've been very thoughtful, and I'm excited to see where it goes.&lt;/p&gt;

&lt;p&gt;If you'd like to join Polywork to check it out, &lt;a href="https://www.polywork.com/users/sign_up_vip"&gt;sign up here&lt;/a&gt; and use VIP code &lt;code&gt;cassidoo-pikachoo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

</description>
      <category>polywork</category>
      <category>collaboration</category>
    </item>
    <item>
      <title>GitHub for storage</title>
      <author>Siddharth</author>
      <pubDate>Thu, 01 Jul 2021 15:39:46 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/github-for-storage-2gjm</link>
      <guid>https://dev.to/siddharthshyniben/github-for-storage-2gjm</guid>
      <description>&lt;p&gt;I've been seeing GitHub repositories used for many things other than code – awesome lists, music, travel logs. But the next thing is data storage. &lt;a href="https://github.com/utterance/utterances"&gt;Utterances, for example,&lt;/a&gt; is a commenting system that creates a new GitHub issue for every blog post written and syncs its comments and blog post comments.&lt;/p&gt;

&lt;p&gt;I could see myself making a whole blog based on GitHub, and hosted on GitHub pages – All blog posts are in a folder. A GitHub action converts all the blog posts in the folder to a static site. Wanna write a guest post? Open a PR. Comments could be based on GitHub issues. Spellcheck in checks. Code review. Line comments. And much, much more.&lt;/p&gt;

&lt;p&gt;And this is not only for GitHub. For example, an app that uses a blogging platform's API could store its config as a draft post. And so on. And I can't wait to see what people make of this.&lt;/p&gt;

</description>
      <category>github</category>
    </item>
    <item>
      <title>Getting To Know Flutter: Google Maps Integration</title>
      <author>TheOtherDev/s</author>
      <pubDate>Thu, 01 Jul 2021 15:35:59 +0000</pubDate>
      <link>https://dev.to/theotherdevs/getting-to-know-flutter-google-maps-integration-304a</link>
      <guid>https://dev.to/theotherdevs/getting-to-know-flutter-google-maps-integration-304a</guid>
      <description>&lt;p&gt;In this tutorial you will learn how to add an interactive map provided by Google Maps in your Flutter app. We will use the official Google Maps package &lt;a href="https://pub.dev/packages/google_maps_flutter"&gt;https://pub.dev/packages/google_maps_flutter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will skip the "Getting started" part that you can find in the home page of the package to go directly o the juicy part. &lt;br&gt;
In brief you have to create an API Key from the Google Cloud Platform and set the key n your native Android and iOS projects.&lt;/p&gt;

&lt;p&gt;We will start from a simple app, which is the one that you can find in the Readme of the package, a simple map centered in the Google Plex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Flutter Google Maps Demo'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="n"&gt;GoogleMapsFlutter&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GoogleMapsFlutter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_GoogleMapsFlutterState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_GoogleMapsFlutterState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_GoogleMapsFlutterState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GoogleMapsFlutter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Completer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GoogleMapController&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Completer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;CameraPosition&lt;/span&gt; &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CameraPosition&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;target:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;37.42796133580664&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;122.085749655962&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;zoom:&lt;/span&gt; &lt;span class="mf"&gt;14.4746&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;GoogleMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;initialCameraPosition:&lt;/span&gt; &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;onMapCreated:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GoogleMapController&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;_controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#add-a-marker"&gt;
  &lt;/a&gt;
  Add a marker
&lt;/h1&gt;

&lt;p&gt;Let's add a marker in the center of the google plex, to do this the &lt;code&gt;GoogleMap&lt;/code&gt; Widget has a &lt;code&gt;markers&lt;/code&gt;parameter that takes a Set of Markers objects. So the body of our Scaffold becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;GoogleMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;mapType:&lt;/span&gt; &lt;span class="n"&gt;MapType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;initialCameraPosition:&lt;/span&gt; &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;onMapCreated:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GoogleMapController&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;_controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="nl"&gt;markers:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;defaultMarker&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;markerId:&lt;/span&gt; &lt;span class="n"&gt;MarkerId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'google_plex'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When creating the Marker you can specify the content of the &lt;code&gt;InfoWindow&lt;/code&gt; that will appear if the marker is tapped. With the onTap parameter you can also set a function that will be called if the marker is tapped.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;defaultMarker&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;markerId:&lt;/span&gt; &lt;span class="n"&gt;MarkerId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'google_plex'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;infoWindow:&lt;/span&gt; &lt;span class="n"&gt;InfoWindow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;"You've tapped the Google Plex"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;snippet:&lt;/span&gt; &lt;span class="s"&gt;'Enjoy'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Marker tapped'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
              &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#use-a-custom-image-for-the-marker"&gt;
  &lt;/a&gt;
  Use a custom image for the marker
&lt;/h1&gt;

&lt;p&gt;To use a custom image for your markers you will have to create a &lt;code&gt;BitmapDescriptor&lt;/code&gt;, don't worry you can create one of it from an image from the assets but this is an asynchronous function so we will have to load our image, and our markers, in the &lt;code&gt;initState&lt;/code&gt; function. Le's define 2 variables in our state, one for the bitmap descriptor and one for our markers and populate them in initState.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;  &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;_markerBitmap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;?&lt;/span&gt; &lt;span class="n"&gt;_markers&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_loadMarkers&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;_loadMarkers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_markerBitmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromAssetImage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;ImageConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;'assets/location_marker.png'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;_markers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;
      &lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;_markerBitmap&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;defaultMarker&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;markerId:&lt;/span&gt; &lt;span class="n"&gt;MarkerId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'google_plex'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;infoWindow:&lt;/span&gt; &lt;span class="n"&gt;InfoWindow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;"You've tapped the Google Plex"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;snippet:&lt;/span&gt; &lt;span class="s"&gt;'Enjoy'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Marker tapped'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;]);&lt;/span&gt;

    &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to use the markers that we've just created in our &lt;code&gt;GoogleMap Widget&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;GoogleMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;mapType:&lt;/span&gt; &lt;span class="n"&gt;MapType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;initialCameraPosition:&lt;/span&gt; &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;onMapCreated:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GoogleMapController&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;_controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="nl"&gt;markers:&lt;/span&gt; &lt;span class="n"&gt;_markers&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ILlTYEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9i0436fv5iewkg87xo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ILlTYEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9i0436fv5iewkg87xo8.png" alt="Google maps screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ensure-that-all-markers-are-visible"&gt;
  &lt;/a&gt;
  Ensure that all markers are visible
&lt;/h1&gt;

&lt;p&gt;If you have a lot of markers and you don't know their positions, for example if the markers come from an API call, you will like to have all of them visible in the map. To do this we need to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calculate the maps bounds to fit all the marker&lt;/li&gt;
&lt;li&gt;Create a Camera request update&lt;/li&gt;
&lt;li&gt;Perform the camera request update on the &lt;code&gt;GoogleMapController&lt;/code&gt; object to move the camera&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So our function to load the markers become:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;_loadMarkers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_markerBitmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromAssetImage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;ImageConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;'assets/location_marker.png'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// The positions of our markers&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.968046&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;94.420307&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.33328&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;89.132008&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;33.755787&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;116.359998&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;33.844843&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;116.54911&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.92057&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;93.44786&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.240309&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;91.493619&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.968041&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;94.419696&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.333304&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;89.132027&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;33.755783&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;116.360066&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;33.844847&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;116.549069&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Create the markers from the positions&lt;/span&gt;
    &lt;span class="n"&gt;_markers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;positions&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;_markerBitmap&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;defaultMarker&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;markerId:&lt;/span&gt; &lt;span class="n"&gt;MarkerId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;${e.latitude}&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="si"&gt;${e.longitude}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;infoWindow:&lt;/span&gt; &lt;span class="n"&gt;InfoWindow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;"You've tapped &lt;/span&gt;&lt;span class="si"&gt;${e.latitude}&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="si"&gt;${e.longitude}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;snippet:&lt;/span&gt; &lt;span class="s"&gt;'Enjoy'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Marker tapped'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
              &lt;span class="o"&gt;},&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Calculate the bounds to fit all the markers&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_boundsFromLatLngList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Create the camera update with the bounds calculated&lt;/span&gt;
    &lt;span class="n"&gt;CameraUpdate&lt;/span&gt; &lt;span class="n"&gt;u2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CameraUpdate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newLatLngBounds&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Animate the camera to update&lt;/span&gt;
    &lt;span class="n"&gt;GoogleMapController&lt;/span&gt; &lt;span class="n"&gt;googleMapController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;future&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;googleMapController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;animateCamera&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;LatLngBounds&lt;/span&gt; &lt;span class="n"&gt;_boundsFromLatLngList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNotEmpty&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LatLng&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;infinity&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;LatLngBounds&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;northeast:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;southwest:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#moving-forward"&gt;
  &lt;/a&gt;
  Moving forward
&lt;/h1&gt;

&lt;p&gt;If you want to find a complete example &lt;a href="https://github.com/lorenzOliveto/flutter-google-maps-demo"&gt;check out this repository&lt;/a&gt;.&lt;br&gt;
You can use this as a base to implement an awesome map in your application.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Make a Twitter Bot Using Python</title>
      <author>Evan J</author>
      <pubDate>Thu, 01 Jul 2021 14:46:28 +0000</pubDate>
      <link>https://dev.to/ejach/how-to-make-a-twitter-bot-using-python-2l1k</link>
      <guid>https://dev.to/ejach/how-to-make-a-twitter-bot-using-python-2l1k</guid>
      <description>&lt;p&gt;Hello!&lt;br&gt;
This tutorial will demonstrate how to create a simple Twitter bot using the Tweepy library in Python.&lt;br&gt;
This tutorial will be separated into four parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-a-twitter-developer-account"&gt;Setting up a Twitter Developer Account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-the-application-using-python"&gt;Creating the Application using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-the-application"&gt;Running the Application&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/tweepy/"&gt;Tweepy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.twitter.com/"&gt;Twitter Developer Account&lt;/a&gt; (Will explain in the next section)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-a-twitter-developer-account"&gt;
  &lt;/a&gt;
  Setting up a Twitter Developer Account
&lt;/h3&gt;

&lt;p&gt;To create a Twitter bot you must apply for a Twitter Developer Account detailed in &lt;a href="https://developer.twitter.com/en/apply-for-access"&gt;this&lt;/a&gt; link.&lt;br&gt;
You must describe the use-cases that you intend to satisfy using their API. This application process can take anywhere from an hour to a day, so be patient!&lt;br&gt;
Once accepted you will get an email detailing how to access the developer portal. Login to the developer portal and follow the steps to create a Twitter app.&lt;br&gt;
Make sure your app has &lt;code&gt;Read + Write + Read and post direct messages&lt;/code&gt; permissions by going to this screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fOETXjYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zkntkga090qncu9gtbz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fOETXjYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zkntkga090qncu9gtbz.PNG" alt="Permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once it is created and the permissions are set, hit the Key 🗝 icon next to your app, and you should see this screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wW66PPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue98bzcbqk0z3tnkpoyd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wW66PPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue98bzcbqk0z3tnkpoyd.PNG" alt="Developer Keys"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generate and take note of the &lt;code&gt;API key/secret&lt;/code&gt; and the &lt;code&gt;access token/secret&lt;/code&gt;. I recommend putting them in a text document, as you cannot access them again once they are generated.&lt;br&gt;
Next we will go over creating the application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-the-application-using-python"&gt;
  &lt;/a&gt;
  Creating the Application using Python
&lt;/h3&gt;

&lt;p&gt;We will be creating a Twitter bot that simply tweets &lt;code&gt;Hello world!&lt;/code&gt;&lt;br&gt;
The file structure by the end of this tutorial will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;├───twitterbot
  └───.env             &lt;span class="c"&gt;# File that contains our keys&lt;/span&gt;
  └───main.py          &lt;span class="c"&gt;# Our main application&lt;/span&gt;
  └───requirements.txt &lt;span class="c"&gt;# The packages we will be using&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To start out, create an empty directory using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo mkdir &lt;/span&gt;twitterbot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And &lt;code&gt;cd&lt;/code&gt; into the directory using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;twitterbot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create two files called &lt;code&gt;main.py&lt;/code&gt; and &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;br&gt;
In requirements.txt, insert the line:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tweepy==3.10.0
python-dotenv==0.17.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, to install the required packages, run:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;tweepy&lt;/code&gt; is the library that utilizes the Twitter API, and &lt;code&gt;python-dotenv&lt;/code&gt; is the library that allows environment variables to be utilized in your program.&lt;br&gt;
Second, we will go over where to put the keys/tokens.&lt;br&gt;
Create a file called &lt;code&gt;.env&lt;/code&gt; and paste the following with the keys you generated in the earlier steps:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;consumer_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XXX        &lt;span class="c"&gt;# Found in the API/Secret section&lt;/span&gt;
&lt;span class="nv"&gt;consumer_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XXX     &lt;span class="c"&gt;# Found in the API/Secret section&lt;/span&gt;
&lt;span class="nv"&gt;access_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XXX        &lt;span class="c"&gt;# Found in the Access Token/Secret section&lt;/span&gt;
&lt;span class="nv"&gt;access_token_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XXX &lt;span class="c"&gt;# Found in the Access Token/Secret section&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It is a good practice to utilize environment variables when dealing with sensitive credentials like this. &lt;strong&gt;Never&lt;/strong&gt; put your credentials directly in your code.&lt;br&gt;
Next we will go over how to utilize the credentials in our code. In our &lt;code&gt;main.py&lt;/code&gt; file, add the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;

&lt;span class="c1"&gt;# Loads the .env file for the credentials
&lt;/span&gt;&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Credentials set in the .env file
&lt;/span&gt;&lt;span class="n"&gt;consumer_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'consumer_key'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;consumer_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'consumer_secret'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'access_token'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;access_token_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'access_token_secret'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We will now implement the &lt;code&gt;tweepy&lt;/code&gt; library to use these credentials and authenticate with Twitter:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create API object
&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Checks if the credentials entered are correct
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify_credentials&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Authentication: FAILED'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Authentication: OK'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, we will implement a function that handles the tweet itself as well as a &lt;code&gt;main&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# If authenticate returns true, execute the following
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;# Calls the API to tweet the following
&lt;/span&gt;        &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello World!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Tweet has been sent!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# If authenticate returns false, print the following
&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Tweet has not been sent.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#running-the-application"&gt;
  &lt;/a&gt;
  Running the Application
&lt;/h3&gt;

&lt;p&gt;Now that all of our code has been implemented, you can run the program using &lt;code&gt;python main.py&lt;/code&gt; and you should see the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Authentication: OK
Tweet has been sent!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And you should see that your tweet has been sent:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6xNQFwvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb5quk1cfcucj7g3e1su.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6xNQFwvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb5quk1cfcucj7g3e1su.png" alt="tweet"&gt;&lt;/a&gt;&lt;br&gt;
Congratulations! You have successfully created a Twitter bot using Python!&lt;br&gt;
If you need to view the files we created for any reason, check it out on GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ejach"&gt;
        ejach
      &lt;/a&gt; / &lt;a href="https://github.com/ejach/twitterbot"&gt;
        twitterbot
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is an example Twitter bot that uses the tweepy library. It was written for an article that can be read on dev.to.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
twitterbot&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://dev.to/ejach/how-to-make-a-twitter-bot-using-python-2l1k" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5a9af6a2a27b0f9d715af46178094ea9cbac197c057030c802bdbd35f4421bde/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6465762e746f2d626c61636b3f7374796c653d666f722d7468652d6261646765266c6f676f3d6465762e746f" alt="dev.to"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is an example Twitter bot that uses the tweepy library.
It was written for an article that can be read on &lt;a href="https://dev.to/ejach/how-to-make-a-twitter-bot-using-python-2l1k" rel="nofollow"&gt;dev.to&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ejach/twitterbot"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>twitter</category>
      <category>python</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How should you prepare for your first interview as a developer? </title>
      <author>Ankur Tyagi</author>
      <pubDate>Thu, 01 Jul 2021 14:26:26 +0000</pubDate>
      <link>https://dev.to/tyaga001/how-should-you-prepare-for-your-first-interview-as-a-developer-3g79</link>
      <guid>https://dev.to/tyaga001/how-should-you-prepare-for-your-first-interview-as-a-developer-3g79</guid>
      <description>&lt;p&gt;Over the last few years, I’ve mentored over 300+ students and working professionals on how to prepare for interviews to land their dream job. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-my-top-tips-on-how-to-prepare-for-your-first-interview"&gt;
  &lt;/a&gt;
  Here are my top tips on how to prepare for your first interview.
&lt;/h2&gt;

&lt;p&gt;Before your interview, you have to immensely prepare. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before you say a word in your interview, the recruiter will instantly notice if you have done your homework and practiced. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do all of the work upfront so that when you go into the interview, you’ve already won.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do you need to do before your interview?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-do-your-research"&gt;
  &lt;/a&gt;
  1 - Do your research.
&lt;/h2&gt;

&lt;p&gt;15 - 30 minutes skimming the website is NOT research.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“One of the biggest complaints of hiring managers is that many job interview candidates know very little about the company they’re interviewing for”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-remember-that-no-one-cares-about-you"&gt;
  &lt;/a&gt;
  2- Remember that no one cares about you.
&lt;/h2&gt;

&lt;p&gt;The recruiters have a job to do. &lt;/p&gt;

&lt;p&gt;They need to hire good talent that will positively help the company.&lt;/p&gt;

&lt;p&gt;They will look for below in you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are YOU going to be a good team player?&lt;/li&gt;
&lt;li&gt;Are YOU going to exceed at your position?&lt;/li&gt;
&lt;li&gt;Are YOU going to be the right fit for the company?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This mentality isn’t evil, it’s just life.&lt;/p&gt;

&lt;p&gt;But now you know the rules, let’s learn how to play the game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-make-the-interview-a-conversation"&gt;
  &lt;/a&gt;
  3- Make the interview a conversation.
&lt;/h2&gt;

&lt;p&gt;"The biggest lesson I’ve learned" in my career. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People do business with people they love, trust, and respect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If they have the vibe that you are not trustworthy or that you’re not easy to work with,&lt;/p&gt;

&lt;p&gt;THEY WILL NOT HIRE YOU.&lt;/p&gt;

&lt;p&gt;End of story.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-time-for-the-show-now-interview-conversation"&gt;
  &lt;/a&gt;
  4- Time for the show now (Interview conversation)
&lt;/h2&gt;

&lt;p&gt;Real winners PLAN things out before they start.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To start acing interviews, write down 5 focus points in your life that you want to highlight about yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It could be your past work experience, volunteer work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-learn-about-the-interviewer"&gt;
  &lt;/a&gt;
  5- Learn about the interviewer
&lt;/h2&gt;

&lt;p&gt;Read your email carefully which HR shared with you, you’ll be told the names of the people who’ll be on the interview panel.&lt;/p&gt;

&lt;p&gt;Google them and find their Twitter/LinkedIn account and search if they’ve published any pages or articles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-remember-to-breath"&gt;
  &lt;/a&gt;
  6- Remember to breath
&lt;/h2&gt;

&lt;p&gt;When I first started interviewing, I would get super nervous. &lt;/p&gt;

&lt;p&gt;I was so afraid of failing and it reflected in my interviews. &lt;/p&gt;

&lt;p&gt;I would speak really quickly and often rush to answer the question.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s a secret I wish someone told me when I first started out&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You don’t always have to answer right away.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Slow down, take a breath &amp;amp; really spend time being thoughtful about your answer to the question. &lt;br&gt;
And even if you don’t know the answer, remember that it’s okay to say No.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-i-dont-know"&gt;
  &lt;/a&gt;
  7- I don’t know
&lt;/h2&gt;

&lt;p&gt;Be prepared to say it. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don’t know the answer, don’t pretend as you do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;People will often read right through it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-know-your-own-resume"&gt;
  &lt;/a&gt;
  8- Know your own resume?
&lt;/h2&gt;

&lt;p&gt;Again, so obvious. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yet folks come into an interview not having looked at their resume in a while. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And I've had people have to think a bit when I ask them about something right there on the resume they sent me.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please give yourself some time to look at it before you arrive at the interview. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should also review it carefully when preparing stories to help you answer interview questions.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;"Don't miss out" Follow your mentor  on Twitter 👉 &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;TheAnkurTyagi&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you would like to discuss about your career growth issues in detail with me 1-1, you can hire me on HireTheAuthor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hiretheauthor.com/theankurtyagi"&gt;Book 1-1 Call or Chat Subscription &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can buy me a beer if you feel generous. Happy coding!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ankurtyagi"&gt;BUY Me a Beer.&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>career</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
