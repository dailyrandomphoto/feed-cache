<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Secret input in python, Get input secretly and in a personalized way!</title>
      <author>Matin Najafi</author>
      <pubDate>Tue, 04 May 2021 19:12:07 +0000</pubDate>
      <link>https://dev.to/matin/secret-input-in-python-get-input-secretly-and-in-a-personalized-way-30ab</link>
      <guid>https://dev.to/matin/secret-input-in-python-get-input-secretly-and-in-a-personalized-way-30ab</guid>
      <description>&lt;p&gt;In the Python programming language, we use the input () command to get input from the user, which we all know. But sometimes we want to get the input so that the user actually enters it, but it can not be displayed in command prompt! In these cases, we use the local ‘’getpass‘’ library.&lt;br&gt;
Now we want to write a secret input function together that performs the getpass operation, but makes the appearance of the program more beautiful and hides the entries with a star or the custom display. (Like a password entry in html)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7yztu8PD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk0q25hmtd5bnpt4q34c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7yztu8PD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk0q25hmtd5bnpt4q34c.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we are not allowed to perform an operation when receiving a simple input in Python, let’s use pynput and get the input of the user keyboard&lt;br&gt;
In this short article, I want to make the code of this class available to you, but before that, I will give you a brief description.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;p&gt;This class receives your input with pynput and performs the simulation completely with a few simple terms and prints.&lt;br&gt;
The function of this function is such that the user input is received using pynput, but because pynput receives the user input in any place and we only want to receive the input that the user enters in the console, a function to receive the active window in the form of cross We write -platform and using this function, we put the condition in on_press that the inputs are received only in the console.&lt;br&gt;
To display the stars and any other costume characters as input, we must print it with a blank end. But it is not possible to print them using print ()! So we do this using the sys module and the sys.stdout command and print the expressions. Click to read a little about sys.stdout printing.&lt;br&gt;
Until now, inputs are received and a star or any other character is printed while typing! Now we want to make sure that if the character was wrong and we hit backspace, that character will be deleted from the console.&lt;br&gt;
If we pay attention, the inputs that are sent in on_press have a value called char that we can receive the value. But for keys such as Inter, backspace, arrow keys, etc., it is not like this and it is raised. So we bet that if the key entered is equal to pynput.keyboard.Key.backspace, the backup operation will be performed and a return will be made so that the continuation of the function code does not work. Now how to clear the input from the console? Just print the phrase ‘\b \b’ using sys.stdout. To be precise, each \b reverses the input once, but the character is not deleted after that. So we put a space after that to replace the input with a space after that and the character is removed from the user’s view and we go back again with \b once as if there was a backspace in the input once.&lt;br&gt;
Note that if you want to get the show to the user as desired, the user may give a multi-digit show. So multiply the phrase ‘\b \b’ by the number of show characters so that there is no problem.&lt;br&gt;
Done! So far we can type and delete the typed phrase. Be a little careful. If we hit too much backspace, the custom printed prompt will also be deleted. To prevent this, we create a numeric variable called on_char and set its value to 0. For each on_press we add a number to this variable. But we bet on backspace that if this variable is less than or equal to 0, it will retry and the function will not run. This way we can prevent this problem.&lt;br&gt;
So far we have made a show entry! Now we want to receive the user inputs and save them in a variable so that when the user enters the enter key, those saved inputs will be returned. Simply create a self.value in our &lt;strong&gt;init&lt;/strong&gt; class and put the key.char in each on_press, which is equivalent to the user input string character, and in the case of backspace, by converting the self.value to a list, and popping the last character And convert self.value to string again using join, delete the last letters.&lt;br&gt;
Note that for this section, put a try and except because it is possible to enter separation keys that do not have a value of char, so if except, do a simple return.&lt;br&gt;
For when the user enters the enter key, because we turned on the listener by join method and we can not simply stop the listener, so we start the listener in a fan and on_press in the same function. We put that function privately in &lt;strong&gt;init&lt;/strong&gt; so that the user can not use it.&lt;br&gt;
The problem with pynput is that when we press the Enter key, once the phrases we have typed so far are pasted and entered! To prevent this, if the user enters enter, we put an empty getpass.getpass to take this input imperceptibly!&lt;br&gt;
Almost done! Now call the function exactly below &lt;strong&gt;init&lt;/strong&gt; and then return the self.value value in &lt;strong&gt;str&lt;/strong&gt;. For added security, you can delete variables other than self.value with del. The codes of this useful class are available here:&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>python</category>
      <category>input</category>
      <category>secret</category>
      <category>trick</category>
    </item>
    <item>
      <title>19 Simple Hover Animation Using CSS</title>
      <author>Kiran Raj R</author>
      <pubDate>Tue, 04 May 2021 19:08:53 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/19-simple-hover-animation-using-css-1l36</link>
      <guid>https://dev.to/kiranrajvjd/19-simple-hover-animation-using-css-1l36</guid>
      <description>&lt;p&gt;Here is the 19 simple, beginner level hover animation using CSS. The logic behind the examples are briefly explained as comments in the CSS code section. The before and after pseudo elements are used with simple CSS transform property, JavaScript is not used in these examples. Hope you will like it, happy coding.&lt;/p&gt;

&lt;p&gt;Codepen &lt;a href="https://codepen.io/kiran-r-raj/pen/ZEezrJy"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/ZEezrJy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>A Hitchhiker's Guide to SQLite with Python</title>
      <author>Arctype Team</author>
      <pubDate>Tue, 04 May 2021 19:08:26 +0000</pubDate>
      <link>https://dev.to/arctype/a-hitchhiker-s-guide-to-sqlite-with-python-3c9j</link>
      <guid>https://dev.to/arctype/a-hitchhiker-s-guide-to-sqlite-with-python-3c9j</guid>
      <description>&lt;p&gt;To explore SQLite along with Python, which is a user-friendly and no-nonsense language, we are going to &lt;strong&gt;build a simple tic-tac-toe game.&lt;/strong&gt; So buckle up and get your machines ready!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-sqlite-and-embedded-databases"&gt;
  &lt;/a&gt;
  Introduction to SQLite and Embedded Databases
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.sqlite.org/index.html"&gt;SQLite&lt;/a&gt; is a small, self-contained, client/embedded database written in the &lt;a href="https://en.wikipedia.org/wiki/C_programming_language"&gt;C Programming language&lt;/a&gt; and can be summarized using the following points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application library.&lt;/li&gt;
&lt;li&gt;Directly writes to disk.&lt;/li&gt;
&lt;li&gt;Cross-platform, stable, and the most &lt;a href="https://www.sqlite.org/mostdeployed.html"&gt;widely deployed and used database engine.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Zero configuration.&lt;/li&gt;
&lt;li&gt;Automatic recovery.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sqlite.org/copyright.html"&gt;Public domain license.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we are going to see many of these features in action. Features such as data replication, network access, etc., are intentionally absent from SQLite since it was built for a much more lightweight use case. SQLite databases are very useful in constrained environments such as mobile devices, lightweight desktop apps, IoT devices, and games.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-sqlite-with-python"&gt;
  &lt;/a&gt;
  Setting Up SQLite with Python
&lt;/h2&gt;

&lt;p&gt;Let's get our learning environment up and running by installing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 3;&lt;/li&gt;
&lt;li&gt;any IDE for Python coding—I recommend PyCharm;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://arctype.com/"&gt;Arctype SQL Client&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;and SQLite tools installed on your OS for CLI (Mac OS comes with it by default).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#library-setup-and-database-creation"&gt;
  &lt;/a&gt;
  Library Setup and Database Creation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Sqlite3&lt;/code&gt; comes packaged with Python by default and there is no need to install any additional libraries. Let's go ahead and import &lt;code&gt;Sqlite3&lt;/code&gt; and then create our database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect('sqlite.db')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. The database is now created and we can create tables and insert data now. Isn't this a breeze when compared to setting up a full-blown RDBMS?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-are-sqlite-databases-stored"&gt;
  &lt;/a&gt;
  Where Are SQLite Databases Stored?
&lt;/h2&gt;

&lt;p&gt;Once you run the above application, a &lt;code&gt;sqlite.db&lt;/code&gt; file is automatically created at the project root level. As we will see later, this file will be re-used whenever the application is started. We can customize the location of this file by just connecting to the database with its path.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;conn = sqlite3.connect('data/sqlite.db')&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This will create the &lt;code&gt;sqlite.db&lt;/code&gt; file inside the &lt;code&gt;data&lt;/code&gt; folder. Keep in mind that the directory &lt;code&gt;data&lt;/code&gt; needs to be created beforehand. The file extension &lt;code&gt;.db&lt;/code&gt; is also optional—SQLite will just create a binary file with the name we provide it with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-and-managing-an-sqlite-database"&gt;
  &lt;/a&gt;
  Configuring and Managing an SQLite Database
&lt;/h2&gt;

&lt;p&gt;As we just saw, there is no configuration required to get our database set up. Since it is an application library, there is no server and the database comes up and goes down with the connection initiated by the application running behind it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-to-an-sqlite-database-from-the-command-line"&gt;
  &lt;/a&gt;
  Connecting to an SQLite Database from the Command Line
&lt;/h2&gt;

&lt;p&gt;SQLite (version 3) comes pre-installed on Mac OS operating systems. For other platforms, we can download the CLI and other tools from the &lt;a href="https://sqlite.org/download.html"&gt;SQLite website itself&lt;/a&gt;. The command line can be invoked by typing the command &lt;code&gt;sqlite3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWC_r-19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWC_r-19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_2.png" alt="SQLite Command Line"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that I have connected directly to the database that I used from the Python script. We can do so by using &lt;code&gt;sqlite3 /path/to/file&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-sample-tables-and-running-basic-queries"&gt;
  &lt;/a&gt;
  Creating Sample Tables and Running Basic Queries
&lt;/h2&gt;

&lt;p&gt;Let's create a table for testing purposes.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;create table testing(id int, name text);&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;And then insert some rows into the table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;insert into testing values(100, 'Name1');
insert into testing values(101, 'Name2');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see the records by doing a simple &lt;code&gt;select *&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lq3W-wxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lq3W-wxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_3.png" alt="SQLite command line select statement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a ton of helper functions that SQLite provides to learn more about tables and the schema. Below are some of the functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5viedyM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5viedyM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_4.png" alt="SQLite command line helper functions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.tables&lt;/code&gt; gives me information about all of the tables. &lt;code&gt;.schema&lt;/code&gt; gives the information about a specific table. &lt;a href="https://www.sqlite.org/pragma.html#pragma_table_info"&gt;pragma table_info&lt;/a&gt; is a function that gives more information about the table (i.e. the data type and column name).&lt;/p&gt;

&lt;p&gt;Now, let's connect to this database using our Python script and try to read these tables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect('data/sqlite.db')

cursor = conn.cursor()

cursor.execute('SELECT * FROM testing')

rows = cursor.fetchall()

for row in rows:
    print(row)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above code will print.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(100, 'Name1')&lt;br&gt;
(101, 'Name2')&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example-tictactoe-game-using-python-and-sqlite"&gt;
  &lt;/a&gt;
  An Example Tic-Tac-Toe Game Using Python and SQLite
&lt;/h2&gt;

&lt;p&gt;Let's consider a real-world use case—games. Games in mobile applications make heavy use of SQLite for storing their game status and then sync to a backend server periodically/based on a user trigger. In this example, we will see a Tic-Tac-Toe game developed in Python that uses SQLite to store game data and player information. We can then query this database offline to retrieve game-related information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-table-design-for-tictactoe"&gt;
  &lt;/a&gt;
  Database Table Design for Tic-Tac-Toe
&lt;/h2&gt;

&lt;p&gt;Before we attempt to write the game, let's create our database ER diagram that is going to represent our tables.&lt;/p&gt;

&lt;p&gt;First, we are going to create our &lt;code&gt;Player&lt;/code&gt; table which has the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;created_date&lt;/code&gt; which is going to be used to store the player data. Next, we are going to create our &lt;code&gt;Game&lt;/code&gt; table which will have the player details, game status, and winner details. The Entity-Relationship diagram for these tables is given below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z0dvE2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Group-21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z0dvE2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Group-21.png" alt="tic tac toe game database relationship diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could further normalize this by introducing a game status entity, but we are looking for a simple model to understand SQLite rather than a perfect design. Based on this spec, tables can be created accordingly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE player(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT,
  created DATETIME DEFAULT CURRENT_TIMESTAMP
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE game(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  first_player_id INTEGER,
  second_player_id INTEGER,
  created DATETIME DEFAULT CURRENT_TIMESTAMP,
  game_status TEXT,
  winner_id INTEGER,
  FOREIGN KEY (first_player_id) REFERENCES player (id),
  FOREIGN KEY (second_player_id) REFERENCES player (id),
  FOREIGN KEY (winner_id) REFERENCES player (id)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The database is now set up, so let's code our game!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-the-tictactoe-game-in-python"&gt;
  &lt;/a&gt;
  Coding the Tic-Tac-Toe Game in Python
&lt;/h2&gt;

&lt;p&gt;Before starting to write everything out in Python, let's first determine our game's logic.  For this simple example, I would recommend something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Initialize game board   
  Initialize users 
    Game logic (While loop based on exit conditions) 
      Begin game logic 
  End
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to a simple two-dimensional array to hold the game board. Instead of walking through every element of the code, I am going to paste the whole code below and give a high-level walkthrough since the code is pretty self-explanatory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"""
The Game board is a two D array emulating the X*Y Tic Tac Toe Game
"""
global game_board
# Constants
place_already_filled = "Given place is already filled. Provide an empty place from the board"
invalid_move = "Invalid move. Enter a value within the board dimension."
invalid_value = "Invalid value. Enter an integer value within the board dimension."
game_over_tie = "Game Over. It is a tie."


def initialise_gameboard(dimensions):
    global game_board
    dimensions = int(dimensions)
    # Fill with empty strings
    game_board = [[' ' for _ in range(dimensions)] for _ in range(dimensions)]


def print_board():
    print("**************************")
    for item in game_board:
        print(item)
    print("**************************")


def check_game_status(x_pos, y_pos, player):
    row_match = True
    column_match = True
    left_diagonal_match = True
    right_diagonal_match = True

    for i in range(0, len(game_board)):
        if game_board[x_pos][i] != game_board[x_pos][y_pos]:
            row_match = False

    for i in range(0, len(game_board)):
        if game_board[i][y_pos] != game_board[x_pos][y_pos]:
            column_match = False

    for i in range(0, len(game_board)):
        if game_board[i][i] != game_board[x_pos][y_pos]:
            left_diagonal_match = False
        if game_board[i][len(game_board) - i - 1] != game_board[x_pos][y_pos]:
            right_diagonal_match = False

    print_board()

    if row_match or column_match or left_diagonal_match or right_diagonal_match:
        return f"Player {player} has won"
    else:
        return "Playing"


def game():
    dimensions = input("Enter board dimensions (3 for a 3x3 board): ")
    first_user = input("Enter first user name : ")
    second_user = input("Enter second user name: ")
    initialise_gameboard(dimensions)
    player = first_user
    count = 1

    while True:
        print(f"It's user : {player}'s turn")
        positions = input("Enter move position (x,y) : ").split(",")

        try:
            x_pos = int(positions[0]) - 1
            y_pos = int(positions[1]) - 1
        except ValueError:
            print(invalid_value)
            continue

        if x_pos &amp;lt; 0 or x_pos &amp;gt;= len(game_board) or y_pos &amp;lt; 0 or y_pos &amp;gt;= len(game_board):
            print(invalid_move)
            continue

        if game_board[x_pos][y_pos] != ' ':
            print(place_already_filled)
            continue

        if player is first_user:
            game_board[x_pos][y_pos] = 'X'
        else:
            game_board[x_pos][y_pos] = 'O'

        count = count + 1

        game_status = check_game_status(x_pos, y_pos, player)

        if game_status != "Playing":
            print(game_status)
            break

        if count == len(game_board) * len(game_board) + 1:
            print_board()
            print(game_over_tie)
            break

        # Switch players after
        if player is first_user:
            player = second_user
        else:
            player = first_user

    another_game = input("Do you want to play another game (Y/N) : ")

    if another_game.lower() == 'y' or another_game == 'Y':
        game()


game()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The game is nothing fancy. As you can see, the &lt;code&gt;game&lt;/code&gt; method is where the core logic begins.&lt;/p&gt;

&lt;p&gt;Go ahead and try it out. Below is a sample game output on the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter board dimensions (3 for a 3x3 board): 3
Enter first user name : p1
Enter second user name: p2
It's user : p1's turn
Enter move position (x,y) : 1,1
**************************
['X', ' ', ' ']
[' ', ' ', ' ']
[' ', ' ', ' ']
**************************
It's user : p2's turn
Enter move position (x,y) : 2,2
**************************
['X', ' ', ' ']
[' ', 'O', ' ']
[' ', ' ', ' ']
**************************
It's user : p1's turn
Enter move position (x,y) : 1,3
**************************
['X', ' ', 'X']
[' ', 'O', ' ']
[' ', ' ', ' ']
**************************
It's user : p2's turn
Enter move position (x,y) : 2,3
**************************
['X', ' ', 'X']
[' ', 'O', 'O']
[' ', ' ', ' ']
**************************
It's user : p1's turn
Enter move position (x,y) : 1,2
**************************
['X', 'X', 'X']
[' ', 'O', 'O']
[' ', ' ', ' ']
**************************
Player p1 has won
Do you want to play another game (Y/N) : n

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can put the above code in a separate &lt;code&gt;game.py&lt;/code&gt; file for clarity. Now to the next part, integrating this game with our database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sqlite-integration"&gt;
  &lt;/a&gt;
  SQLite Integration
&lt;/h2&gt;

&lt;p&gt;Now, we have to make the user entries whenever the users have been created and make game entries when the game is won or a draw. Before we create our queries, let's make the actual Data Access layer methods (i.e. creating a player entry and a game entry).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect('data/sqlite.db')


def create_player(name):
    query = f"INSERT INTO player(name) VALUES ('{name}')"
    cursor = conn.cursor()
    cursor.execute(query)
    conn.commit()
    user_id = cursor.lastrowid
    cursor.close()
    return user_id


def create_game(first_player_id, second_player_id, game_status, winner_id):
    query = f"INSERT INTO game(first_player_id, second_player_id, game_status, winner_id) " \
            f"VALUES ({first_player_id}, {second_player_id}, '{game_status}', {winner_id})"

    cursor = conn.cursor()
    cursor.execute(query)
    conn.commit()
    cursor.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can use these simple methods from our game:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Paste below code anywhere after getting the user details
first_user_id = dao.create_player(first_user)
second_user_id = dao.create_player(second_user)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Paste below code when checking for game status i.e 
# game_status != "Playing"
winner_id = second_user_id

if player == first_user:
   winner_id = first_user_id

dao.create_game(first_user_id, second_user_id, game_status, winner_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can do a similar code for storing game status during draw as well. Now we can play the game and the data should be recorded in our tables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-and-exporting-data-from-sqlite"&gt;
  &lt;/a&gt;
  Importing and Exporting Data from SQLite
&lt;/h2&gt;

&lt;p&gt;Having now played a few test games, it's now time to examine the data. As everyone knows, Arctype makes querying, analyzing, and visualizing data better than ever, so before we continue, we need to learn about importing and exporting data from SQLite.  Data can be exported/imported either at the table or database level. The table level is typically used to export to other databases/applications and the database level is typically used for backup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-and-exporting-sqlite-tables"&gt;
  &lt;/a&gt;
  Importing and Exporting SQLite Tables
&lt;/h2&gt;

&lt;p&gt;Apart from programmatic integration, once can easily export data from an SQLite database using data export facility. The most commonly used db agnostic standard is a &lt;code&gt;CSV&lt;/code&gt; format. Let's export our game table.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 -header -csv /path/to/sqlite.db/ 'select * from game;' &amp;gt; game.csv&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;game.csv&lt;/code&gt; would contain the below content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;id,first_player_id,second_player_id,created,game_status,winner_id
1,1,2,"2021-04-25 18:19:07","Player p1 has won",1
2,3,4,"2021-04-25 18:23:23","Player p2 has won",4
3,7,8,"2021-04-26 05:20:04","Player p1 has won",7
4,9,10,"2021-04-26 05:25:44",Draw
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is very similar to other database systems.&lt;/p&gt;

&lt;p&gt;Import is quite easy, first we need to create a &lt;code&gt;.sql&lt;/code&gt; file with the below content.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.import /path/to/csv game&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;And then from the command line,&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/database &amp;lt; /path/to/sql/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-and-exporting-databases"&gt;
  &lt;/a&gt;
  Importing and Exporting Databases
&lt;/h2&gt;

&lt;p&gt;Database backup is actually pretty easy, just copy the SQLite file to back up system. But this method is usually difficult since users/application might be running simultaneously and the data is stored in a binary format. To do a point-in-time snapshot/human readable snapshot when the database is running/being used then we can dump the database content to a file format of our choice.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/db .dump &amp;gt; dump.sql&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dump.sql&lt;/code&gt; content will look like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE player(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT,
  created DATETIME DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO player VALUES(1,'p1','2021-04-25 18:18:55');
INSERT INTO player VALUES(2,'p2','2021-04-25 18:18:55');
INSERT INTO player VALUES(3,'p1','2021-04-25 18:23:05');
INSERT INTO player VALUES(4,'p2','2021-04-25 18:23:05');
INSERT INTO player VALUES(5,'p1','2021-04-26 05:16:56');
INSERT INTO player VALUES(6,'p2','2021-04-26 05:16:56');
INSERT INTO player VALUES(7,'p1','2021-04-26 05:19:04');
INSERT INTO player VALUES(8,'p2','2021-04-26 05:19:04');
INSERT INTO player VALUES(9,'p1','2021-04-26 05:24:44');
INSERT INTO player VALUES(10,'p2','2021-04-26 05:24:44');
CREATE TABLE game(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  first_player_id INTEGER,
  second_player_id INTEGER,
  created DATETIME DEFAULT CURRENT_TIMESTAMP,
  game_status TEXT,
  winner_id INTEGER,
  FOREIGN KEY (first_player_id) REFERENCES player (id),
  FOREIGN KEY (second_player_id) REFERENCES player (id),
  FOREIGN KEY (winner_id) REFERENCES player (id)
);
INSERT INTO game VALUES(1,1,2,'2021-04-25 18:19:07','Player p1 has won',1);
INSERT INTO game VALUES(2,3,4,'2021-04-25 18:23:23','Player p2 has won',4);
INSERT INTO game VALUES(3,7,8,'2021-04-26 05:20:04','Player p1 has won',7);
INSERT INTO game VALUES(4,9,10,'2021-04-26 05:25:44','Draw',NULL);
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('player',10);
INSERT INTO sqlite_sequence VALUES('game',4);
COMMIT;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depending on what data is there, the above SQL file content might change but the backup/format is just plain SQL.&lt;/p&gt;

&lt;p&gt;If we are not bothered about human readability then we can just dump it in a native format like below.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/db ".backup db_backup.db"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Import for binary files are quite similar -&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/db ".restore db_backup.db"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Import for SQL file -&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/db &amp;lt; dump.sql&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying-our-sqlite-game-data-in-arctype"&gt;
  &lt;/a&gt;
  Querying Our SQLite Game Data in Arctype
&lt;/h2&gt;

&lt;p&gt;Our SQLite data is now ready to be loaded into Arctype.  This can be achieved in one of two ways—by creating and populating new tables using the SQLite-generated database file or by importing CSV data into existing tables.  First, let's create a new SQLite database by adding a new connection:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7aR2jqZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Screen-Shot-2021-05-04-at-10.26.37-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7aR2jqZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Screen-Shot-2021-05-04-at-10.26.37-AM.png" alt="arctype new connection page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you can choose a name for your new database.  For this example, &lt;code&gt;tictactoe&lt;/code&gt; seems fitting enough:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6bUMCTQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.27.24-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6bUMCTQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.27.24-AM.png" alt="arctype name new SQLite connection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, it's time to import our data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-sqlite-tables-into-arctype"&gt;
  &lt;/a&gt;
  Importing SQLite Tables into Arctype
&lt;/h2&gt;

&lt;p&gt;We can create and populate tables in our new SQLite database using the SQL table dump from above. Simply copy and paste the contents of the &lt;code&gt;dump.sql&lt;/code&gt; file into a query, remove the manual &lt;code&gt;BEGIN TRANSACTION;&lt;/code&gt; and &lt;code&gt;COMMIT;&lt;/code&gt; lines (Arctype automatically wraps all of your statements in transactions) and click 'Run':&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nXCPMqLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Screen-Shot-2021-05-04-at-10.28.03-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXCPMqLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Screen-Shot-2021-05-04-at-10.28.03-AM.png" alt="arctype query window create tables and insert data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it!  Your tables should be successfully created and filled with data. This method is fairly simple, but is only recommended for your initial data import—deleting and re-creating tables with increasingly large datasets is unsustainable, so ultimately, you'll want to simply import new data into your existing tables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-csv-data-into-existing-arctype-sqlite-tables"&gt;
  &lt;/a&gt;
  Importing .CSV Data into Existing Arctype SQLite Tables
&lt;/h2&gt;

&lt;p&gt;Let's say we have already created our &lt;code&gt;game&lt;/code&gt; and &lt;code&gt;player&lt;/code&gt; tables, rather than dropping them and creating new tables using the SQL from our &lt;code&gt;dump.sql&lt;/code&gt; file, we can instead simply import the table data from our CSV files.  As you remember from above, we exported our tables into &lt;code&gt;game.csv&lt;/code&gt; and &lt;code&gt;player.csv&lt;/code&gt; respectively.  First, select the table into which you want to import CSV data, and then click the "Import CSV" button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--694mVzak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.03.32-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--694mVzak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.03.32-AM.png" alt="arctype import CSV window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, simply review the data preview and click 'Accept' if everything looks correct:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b9P-MY_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.03.53-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b9P-MY_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.03.53-AM.png" alt="arctype accept CSV import window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#viewing-and-querying-game-data-in-arctype"&gt;
  &lt;/a&gt;
  Viewing and Querying Game Data in Arctype
&lt;/h2&gt;

&lt;p&gt;Now that all of our data has been imported into Arctype, you can view it by simply selecting the table of your choosing.  Here is our &lt;code&gt;game&lt;/code&gt; table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L7MSnuVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.28.36-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L7MSnuVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.28.36-AM.png" alt="arctype table view of game data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quite similarly, this is what our &lt;code&gt;player&lt;/code&gt; table looks like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--THTdt9lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.28.50-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--THTdt9lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.28.50-AM.png" alt="Player Table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now for the fun part, let's select players who have won the most games.  Simply open a new tab and select "query":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9jeRcYME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.11.52-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jeRcYME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.11.52-AM.png" alt="arctype create a new query window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's run this query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  player.name,
  count(*) AS count
FROM
  player
  JOIN game ON player.id = game.winner_id
GROUP BY
  player.name
ORDER BY
  COUNT DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your results should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1S26Ev4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.14.14-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1S26Ev4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.14.14-AM.png" alt="Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, in terms of its querying capabilities, SQLite is as powerful as any SQL database. We can run more queries like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which players were involved in most games that ended up in a draw?&lt;/li&gt;
&lt;li&gt;Which players lost the most?&lt;/li&gt;
&lt;li&gt;Which player got scores more than the average wins?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-tradeoffs-of-using-sqlite"&gt;
  &lt;/a&gt;
  What Are The Trade-Offs of Using SQLite?
&lt;/h2&gt;

&lt;p&gt;SQLite is often misunderstood and not properly utilized. Yes, it comes under the category of client/embedded database but is essentially trying to solve a very different problem. So, comparing SQLite with MySQL/PostgreSQL/Other RDBMS is definitely not the right way. In most environments, SQLite actually works in tandem with such client-server databases as we just saw in the examples above.&lt;/p&gt;

&lt;p&gt;In some situations, SQLite can be used without any second thoughts, while in others, a more careful analysis of the project requirements may be necessary. The SQLite webpage on &lt;a href="https://www.sqlite.org/whentouse.html"&gt;when to use SQLite&lt;/a&gt; is pretty comprehensive. Below are some of the key highlights from that page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SQLite only supports one writer at a time per database file&lt;/strong&gt;. So it is not suited for heavy concurrent writes. Readers can be N where N is decided by various factors such as OS, hardware, and other apps running on the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will first run into hardware issues before running into database size issues with SQLite as it supports &lt;strong&gt;281TB&lt;/strong&gt; of data storage.  Good luck hitting that limit!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQLite can handle traffic very well—in fact, the website &lt;a href="https://www.sqlite.org/index.html"&gt;https://www.sqlite.org/&lt;/a&gt; itself is hosted on SQLite and it handles close to 400K to 500K hits per day. &lt;strong&gt;So unless you are on a fairly high traffic website (queries per second/qps measure), then SQLite should serve you very well.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key thing with any software is to use the right tool for the right use case. At the end of the day, that's what Software craftsmanship/Software Engineering is all about.&lt;/p&gt;

&lt;p&gt;Closing Thoughts&lt;br&gt;
Let's pause and observe how widely SQLite is used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mac OSX comes with SQLite by default.&lt;/li&gt;
&lt;li&gt;Python 3 comes with SQLite by default.&lt;/li&gt;
&lt;li&gt;Windows 10 uses SQLite internally—it cannot operate without it.&lt;/li&gt;
&lt;li&gt;Built into PHP and Ruby as well.&lt;/li&gt;
&lt;li&gt;There are tons of others places where it is used. The &lt;a href="https://www.sqlite.org/famous.html"&gt;well-known users page&lt;/a&gt; gives a good list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SQLite is literally everywhere. It is very widely used and extremely well tested and almost a drop-in replacement for &lt;code&gt;fopen&lt;/code&gt; in Linux. Learning it and befriending SQLite has a lot of advantages and it is a must-have tool for every programmer. Hopefully, this article along with its examples gave a good introduction to SQLite. So go ahead and play with it and before jumping to the conclusion of using a client-server RDBMS, give SQLite a try and you will be surprised at how it simplifies the tech stack and operations around it.&lt;/p&gt;

</description>
      <category>sqlite</category>
      <category>guide</category>
      <category>coding</category>
      <category>programming</category>
    </item>
    <item>
      <title>What I learned defining the Selection Process for a Software Engineer in the startup where I work</title>
      <author>charly3pins</author>
      <pubDate>Tue, 04 May 2021 18:37:50 +0000</pubDate>
      <link>https://dev.to/charly3pins/what-i-learned-defining-the-selection-process-for-a-software-engineer-in-the-startup-where-i-work-5fl3</link>
      <guid>https://dev.to/charly3pins/what-i-learned-defining-the-selection-process-for-a-software-engineer-in-the-startup-where-i-work-5fl3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I have been working at &lt;a href="https://arex.io"&gt;AREX Markets&lt;/a&gt; since November 2018 and since then, the company has changed a lot. When I joined it we were a team of aprox 10 people (~5 techs) and now we are close to 50. I have always liked the startup environment more than a big enterprise because of all the challenges that this entails. You have to do a lot of things and be involved in a lot of issues, as your job position or other unrelated ones, and I like that a lot. During the last weeks, or rather months, we have been interviewing a lot of people as we are growing in terms of business and we need to scale the technical team, so we started with the hiring of more software engineers.&lt;/p&gt;

&lt;p&gt;The first step was defining what kind of &lt;strong&gt;Selection Process&lt;/strong&gt; we wanted to follow. We did it all the team together and that was the first valuable thing we can extract. If you pretend to define a selection process in your company without the input from the team that will participate in it, that's bad. Everybody needs to give their input and be involved on that part as later on they will be part of it and if all goes successfully the new member will join the team, so they need to be comfortable with the decision.&lt;/p&gt;

&lt;p&gt;Having said that, you could be asking what's that process? Let me summarize it in the following lines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selection-process"&gt;
  &lt;/a&gt;
  Selection Process
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; First of all the hiring manager has a &lt;strong&gt;call&lt;/strong&gt; with the candidate to explain the details of the team, tech stack, the role duties and basically knowing him/her and clarify the possible doubts he/she could have.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; If the call is okay, the next step is to do the &lt;strong&gt;Technical challenge&lt;/strong&gt;. For that we offer 3 options.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Technical challenge&lt;/strong&gt;. Classic challenge that you send to the candidate an exercise to solve in X days.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Technical portfolio&lt;/strong&gt;. If the candidate has a project(s) that cover the minimum requirements expected in the Tech Challenge can share them with the team instead of doing a Tech challenge. (Ex: sharing the repo in GitHub).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Live coding session&lt;/strong&gt;. Invitation to the candidate to do a coding session together in our office. (For obvious reasons during this year this option wasn't possible to do).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Technical review&lt;/strong&gt;. The team reviews the code from the candidate and has a call with him/her where they give the feedback from the code reviewed and ask questions and clarify doubts to the candidate more focused in the team and tech stack.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Product interview&lt;/strong&gt;. If the Technical review is okay, the last step is to have a call with the Product team to see if the candidate apart of having the tech skills needed (validated on the previous phase), it has the mentality and attitude that the team needs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Final feedback&lt;/strong&gt;. After the last call the candidate receives feedback being hired or not. Depending on the case it is a call or an email. &lt;/p&gt;

&lt;p&gt;As you can see the process is not super innovative or disruptive but it is the one we all agreed and were comfortable working with. One thing that I want to highlight is regarding the Technical part. We all has been in interviews before and we wanted to do the process that we would have liked to find if we had been the interviewees. For that reason we offered the option of showing code already done instead of yes-or-yes asking for a technical challenge per se. That was a must because we all have spent a lot of hours in a tech challenge and then we end up with no feedback at all, just an email saying thanks for participating but sorry you're not the chosen one. That's the first point and the second is related to the last sentence; we agreed to do a phone call to every candidate that presented the technical part, even if we don't like it or we have doubts, the call was a must. We failed on that part because at the end with a lot of candidates on the pipeline we had to cancel I believe 2-3 calls, but for the remaining 90% we did. That was really helpful for us in order to clarify the doubts in the code review and to ask more questions and going deep in some topics with the candidates. Also to see how they react against positive/negative feedback and the kind of answers or arguments they tried to use to justify the wrong things. That was really productive in my opinion and the part that I enjoyed most in the whole process. Also, the final feedback was another mandatory thing for us so we elaborate a list with the comments although it was a declined candidate, but in order to give him/her the most valuable information possible to know why we didn't choose him/her.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-review"&gt;
  &lt;/a&gt;
  Code Review
&lt;/h2&gt;

&lt;p&gt;Focusing with the code reviews, I elaborated a list with the more common things that we found during that phase and I think it's important to share with you in order to check it if you're interviewer but also if you're gonna be interviewed and you're in the technical challenge part, check these points before you submit it:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Poor README&lt;/strong&gt;. This was the biggest issue we've found in all across the candidates. Except a few ones, the majority provided a very short README with no indicatoins in how to run the project, or not detailed enough. Not indicate the dependencies needed (if you need to download or install something in order to run it). No explanation of the commands (if Makefile provided). No explanation regarding what's the project about (specially important with the ones that weren't solving our Tech Challenge). Lack of TODO with the pending features that weren't possible to cover but added there as an invitation to be discussed in the technical revision call.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Failing tests&lt;/strong&gt;. Some of the challenges, luckily a few, weren't passing their own tests. Basically that means the candidate didn't execute the tests before submitting the challenge and that's a red flag for that part.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Very few comments across the code&lt;/strong&gt;. I will be honest with you, I don't like comments in the code. For me a code that needs comments, is a code that is complex. So the code should be simple enough that is understandable without comments, otherwise you're over complicating it. Having said that, in Go the documentation is autogenerated for the exported types, functions, methods, etc... from the comments. So these comments are the ones that I accept and I personally think are necessary for understanding the context, but not the comments like "getting user" a line above the "repo.getuser()".&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Code commented&lt;/strong&gt;. Some challenges arrived with a lot of commented code. Not the comments I was saying before for document the code. I mean code commented with &lt;code&gt;//&lt;/code&gt;  or entire blocks &lt;code&gt;/**/&lt;/code&gt;. We all know that for Technical challenges specifically, usually the time you have is reduced as you're working in a site and you wanna change, so you apply to different places. Then if you pass the initial phase you're asked to show your code. So you can end up with N tests to deliver for the same week, apart from your daily job and your "real life". But if you quickly check your code you will find it easily if you commented some code just for testing or for an initial approach and then don't need it anymore, and clean it before submitting it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Hardcoded values&lt;/strong&gt;. Related to the previous point there were a lot of challenges with hardcoded values that caused the reviewing team to manipulate the code in order to make it run or make the tests pass. As much as possible try to use environment variables or provide a config file. And if none of that is possible at least add a section in the README with those.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;Having applied all this and having iterated during these months the numbers I think are pretty good. We have all made a very big effort devoting a lot of time to the selection process either looking for candidates, being on phone calls, reviewing code or giving feedback on candidates. We have managed to grow the team by approximately 12 people in 3 months! In the future I plan to publish a new post on how we have organized the teams and how the integration of all the new teammates who have joined the team has gone.&lt;/p&gt;

&lt;p&gt;Comment your learnings and tips during your Selection processes or interviews here or contact me on my social networks for any comments, questions or suggestions so that we can all learn from each other and improve the selection processes of our sector.&lt;/p&gt;

</description>
      <category>life</category>
      <category>startup</category>
      <category>softwareengineer</category>
    </item>
    <item>
      <title>Making a web component that makes kittens cry, apparently</title>
      <author>SparkedScience</author>
      <pubDate>Tue, 04 May 2021 18:36:46 +0000</pubDate>
      <link>https://dev.to/sparkedscience/making-a-web-component-that-makes-kittens-cry-apparently-fgm</link>
      <guid>https://dev.to/sparkedscience/making-a-web-component-that-makes-kittens-cry-apparently-fgm</guid>
      <description>&lt;p&gt;I like to find shortcuts for programming problems. While working on the ELMS:LN web components project, I noticed they like to copy-paste br tags to show off intersection observers. So, to make life easier, I made a simple b-r tag. It apparently makes kittens cry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intersection-observers"&gt;
  &lt;/a&gt;
  Intersection observers
&lt;/h2&gt;

&lt;p&gt;These are used for conditional rendering. An element on the page using intersection observers will not render until the viewable page is within a certain range of the element. For example, say at the end of a long webpage is a &lt;a href="https://github.com/elmsln/lrnwebcomponents/tree/master/elements/wikipedia-query"&gt;wikipedia element&lt;/a&gt;. The actual rendering of the wikipedia page, and the API calls to get the information, won't occur until the element is visible on the page. This is very helpful for slower or more taxed connections. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#br"&gt;
  &lt;/a&gt;
  b-r
&lt;/h2&gt;

&lt;p&gt;The b-r tag does not use intersection observers, but it was created to show off the usage of it. &lt;a href="https://github.com/elmsln/lrnwebcomponents/tree/master/elements/b-r"&gt;b-r&lt;/a&gt; has two modes; numbered and automatic. The developer can supply an amount of br tags to insert, and the element will create the line breaks. If no input is supplied, the tag will get the height of the viewable window and insert br tags to push the rest of the content off of the screen. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback-loops"&gt;
  &lt;/a&gt;
  Feedback loops
&lt;/h2&gt;

&lt;p&gt;My first solution was not elegant, but it worked. (Shamefully, my mentality with most first iterations.) I had a simple for loop to add the tags to the page. During my IST 402 class, my professor used my tag to teach on tag properties and a different way to add tags to html code. He also helped us understand how to make a tag stateful. Honestly, the best help this tag needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-kittens"&gt;
  &lt;/a&gt;
  The kittens
&lt;/h2&gt;

&lt;p&gt;b-r is a tag I made in less than a day for a specific use case. I know copy-pasting a br tag is easy, I'm guilty of that. While the first iteration of just user input was not extremely helpful, I believe the second iteration of conditional numbering based on window height can be useful when working across developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts-on-web-components"&gt;
  &lt;/a&gt;
  Final thoughts on Web components
&lt;/h2&gt;

&lt;p&gt;This is by far not the last web component I will make or work on; My barcode-reader still has a ways to go. Maybe I'll get the chance to bring that project to THON. Either way, web components are here to stay, and I don't plan on going anywhere. Highly adaptable, very useful, and easily portable.&lt;br&gt;
Except with dev.to. Social media isn't really my thing, but I try to stay updated. So expect monthly(?) updates.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React-Native FileManager with Firebase Storage</title>
      <author>David Gregorian</author>
      <pubDate>Tue, 04 May 2021 18:34:57 +0000</pubDate>
      <link>https://dev.to/gregorian/react-native-filemanager-with-firebase-storage-19gh</link>
      <guid>https://dev.to/gregorian/react-native-filemanager-with-firebase-storage-19gh</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CTQLrocQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9aio981gusrlzz3126z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTQLrocQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9aio981gusrlzz3126z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This is a simple example how to implement a file manager with React-Native, Firebase &amp;amp; Typescript for iOS &amp;amp; Android.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-i-will-cover-in-this-post"&gt;
  &lt;/a&gt;
  What I will cover in this post:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fetch &amp;amp; display files from the firebase storage&lt;/li&gt;
&lt;li&gt;Open a file picker and upload the file to firebase&lt;/li&gt;
&lt;li&gt;View &amp;amp; download the files on iOS &amp;amp; Android&lt;/li&gt;
&lt;li&gt;Delete files from the firebase storage&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#attention"&gt;
  &lt;/a&gt;
  Attention
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;To keep it simple, I did not add any styles and only used the file names as unique identifiers.&lt;/li&gt;
&lt;li&gt;Please don't do this in a production app. Use GUIDs instead.&lt;/li&gt;
&lt;li&gt;You should split the code into different files. This example has some inline functions, that should be placed somewhere else.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h1&gt;

&lt;p&gt;This component uses the following npm packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;react-native-firebase&lt;/li&gt;
&lt;li&gt;react-native-document-picker&lt;/li&gt;
&lt;li&gt;react-native-image-picker&lt;/li&gt;
&lt;li&gt;react-native-fs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(You need to follow the README setups of these npm packages in advance)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FirebaseStorageTypes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@react-native-firebase/storage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AntDesignIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-vector-icons/AntDesign&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TouchableOpacity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ActionSheetIOS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;RNFS&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FileViewer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-file-viewer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;launchImageLibrary&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-image-picker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DocumentPicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-document-picker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pickDocument&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;DocumentPicker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DocumentPicker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allFiles&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileCopyUri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pickAttachmenet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OS&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Document&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cancel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;ActionSheetIOS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showActionSheetWithOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;cancelButtonIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pick a data type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Open Image Picker&lt;/span&gt;
          &lt;span class="nx"&gt;launchImageLibrary&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;photo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;didCancel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Open Document Picker&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pickDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// exit&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// For Android we can just use the normal DocumentPicker, as it can also access images&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pickDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FileManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;uploads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUploads&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FirebaseStorageTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Reference&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uploads&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;listRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listAll&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;setUploads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;uploads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TouchableOpacity&lt;/span&gt;
              &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;RNFS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DocumentDirectoryPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;RNFS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;downloadFile&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                  &lt;span class="na"&gt;fromUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDownloadURL&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                  &lt;span class="na"&gt;toFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;localPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="nx"&gt;FileViewer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
              &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TouchableOpacity&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AntDesignIcon&lt;/span&gt;
              &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`delete &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                  &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;onPress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uploads&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fileRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                      &lt;span class="nx"&gt;setUploads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uploads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                  &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;]);&lt;/span&gt;
              &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TouchableOpacity&lt;/span&gt;
        &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Upload&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;attachmentInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pickAttachmenet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attachmentInfo&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uploads&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attachmentInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Alternatively use custom guids as file names&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fileRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attachmentInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="nx"&gt;setUploads&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;uploads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Mitigation of SSRF Vulnerabilities</title>
      <author>Anvil Engineering</author>
      <pubDate>Tue, 04 May 2021 18:33:12 +0000</pubDate>
      <link>https://dev.to/useanvil/mitigation-of-ssrf-vulnerabilities-15gb</link>
      <guid>https://dev.to/useanvil/mitigation-of-ssrf-vulnerabilities-15gb</guid>
      <description>&lt;p&gt;Businesses rely on &lt;a href="//www.useanvil.com/developers"&gt;Anvil&lt;/a&gt; for many of their most critical processes. Being in that critical path for business software, reliability and—more importantly—security is something we take very seriously at Anvil. As part of our security practices, we undergo regular auditing, pen-testing and certification to make sure we're as good as we can be on the security front. This dedication to security has allowed us to achieve our &lt;code&gt;SOC 2 Type 2&lt;/code&gt; compliance. Our SOC 2 designation recognizes the effort and policies that we take to actively guard against attacks and vulnerabilities.  In this post, I'm going to dive into one of those vulnerabilities, the Server Side Request Forgery (&lt;a href="https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"&gt;SSRF&lt;/a&gt;) attack, and discuss the steps we have taken to protect ourselves and our customers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-ssrf"&gt;
  &lt;/a&gt;
  What is SSRF?
&lt;/h2&gt;

&lt;p&gt;Before we dive deeper, let’s briefly review what an SSRF attack is. Here's a good description I found:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Server-side request forgery is a web security vulnerability that allows an attacker to induce the server-side application to make HTTP requests to an arbitrary domain of the attacker's choosing. In typical SSRF examples, the attacker might cause the server to make a connection back to itself, or to other web-based services within the organization's infrastructure, or to external third-party systems."&lt;/em&gt; &lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Why would this be bad? Let’s imagine a website that performs SEO analysis of web pages for its users. This website accepts a URL from Userland. A server visits that URL and then analyzes the results and displays them back to the user. Now, imagine if that URL was something like &lt;code&gt;"http://localhost/insecure-admin-page.php"&lt;/code&gt;, or &lt;code&gt;"file:///etc/passwd"&lt;/code&gt;. You can see how you might quickly become &lt;a href="https://www.urbandictionary.com/define.php?term=pwned"&gt;&lt;code&gt;pwned&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anvils-exposure"&gt;
  &lt;/a&gt;
  Anvil's Exposure
&lt;/h2&gt;

&lt;p&gt;We have several parts of the system where it's necessary for us to ingest URLs from Userland. We couldn't just stop accepting this input, so we had to take some steps to protect ourselves from SSRF.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Disclaimer: An SSRF vulnerability is potentially quite serious for any application. In order to prevent leaking any useful information about our system in this post, and to prevent readers from thinking about a "copy pasta" from this post as a way to close their SSRF exposure, I will only provide very loose pseudo code examples, and not reference any particular libraries, packages or frameworks. This post is only meant to be an interesting resource, so please do your own homework before implementing any of the things discussed here.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In all of our APIs, we enforce a JSON schema validation of all accepted data. In addition to checking the basic shape and types of data in a given payload, most tools will allow you to perform additional validation on the data. Here's a basic validation schema example to consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// A payload validation schema&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;urlFromUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;validUrl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, &lt;code&gt;validUrl&lt;/code&gt; is a reference to a custom format that we registered with the validator. As you might have guessed, the validator will check that the value provided to &lt;code&gt;urlFromUser&lt;/code&gt; is a &lt;code&gt;string&lt;/code&gt;, and then pass that value to our &lt;code&gt;validUrl&lt;/code&gt; function, which will return a boolean indicating if the value is acceptable or not. Here's what the &lt;code&gt;validUrl&lt;/code&gt; function might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validUrl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;http|https&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a nice start, but it's pretty naive. While it makes sure that the URL is in fact an HTTP(S) resource, it doesn't check to see if that resource is &lt;code&gt;"localhost"&lt;/code&gt;, &lt;code&gt;"127.0.0.1"&lt;/code&gt;, or any other IPs that are considered "private". We can do better.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mitigation"&gt;
  &lt;/a&gt;
  Mitigation
&lt;/h1&gt;

&lt;p&gt;So that we didn't have to become experts in private IPs, we enlisted the help of a library that handles all of that for us. &lt;/p&gt;

&lt;p&gt;Our validation function might now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validUrl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;http|https&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;someIpChecker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPrivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice. Now a hacker can't provide us with something like &lt;code&gt;"http://127.0.0.1/admin.php"&lt;/code&gt; or we will reject the input.&lt;/p&gt;

&lt;p&gt;But wait a minute. What if the hacker owns the domain &lt;code&gt;not-evil-i-swear.com&lt;/code&gt;, and has their DNS record set to resolve to &lt;code&gt;"127.0.0.1"&lt;/code&gt;? With the above validation, you would be &lt;code&gt;pwned&lt;/code&gt;. This means that in order to truly know if a URL is trying to access a private IP, you have to check with DNS first to see what it resolves to.&lt;/p&gt;

&lt;p&gt;The validation might then look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validUrl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;http|https&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;someIpChecker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPrivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;someIpChecker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPrivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dnsLookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice, nice. This feels pretty solid and smart.&lt;/p&gt;

&lt;p&gt;But wait another minute. What if the provided URL is validated on its way &lt;strong&gt;&lt;em&gt;into&lt;/em&gt;&lt;/strong&gt; the system, but we don't use it right away - or we will be using it repeatedly in the &lt;strong&gt;&lt;em&gt;future&lt;/em&gt;&lt;/strong&gt;? What's to stop a hacker from changing the DNS entry from something innocuous to &lt;code&gt;"127.0.0.1"&lt;/code&gt; after we've run our checks and have decided to let it into the system? Answer: &lt;code&gt;pwned&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To prevent this scenario, we had to dig into the library we use to perform our web requests with these URLs. Fortunately, this library has a hook where we can intercept the moment &lt;em&gt;after&lt;/em&gt; it's resolved the DNS entry for a URL, but &lt;em&gt;before&lt;/em&gt; it's actually gone out and begun connecting to it. In this hook, we check the resolved host to see if it's private, and if so, we will block the request.&lt;/p&gt;

&lt;p&gt;Nice, nice, nice.&lt;/p&gt;

&lt;p&gt;But wait yet another minute. What if that URL resolves to a non-private IP, so we make the initial request, but then that request results in a redirect to another IP (or &lt;code&gt;host&lt;/code&gt; that resolves to an IP) that is private? If your web request library doesn't trigger your protection code in that case, too: you are &lt;code&gt;pwned&lt;/code&gt;. Better make sure your web request library handles this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Any time a system accepts input from Userland it is putting itself at risk from potential bad actors. There are myriad examples of this: &lt;a href="https://owasp.org/www-community/attacks/SQL_Injection"&gt;SQL Injection&lt;/a&gt;, &lt;a href="https://owasp.org/www-community/attacks/xss/"&gt;XXS Injection&lt;/a&gt;, and &lt;a href="https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"&gt;SSRF&lt;/a&gt; to name just a few. The tough part is that in order for your website or application to do anything interesting, oftentimes you need to accept such input. It's a calculated risk that can be mitigated to the point of acceptability by using safeguards and steps along the way. Hopefully this post provides some useful information for preventing your systems from SSRF vunerabilities!&lt;/p&gt;

&lt;p&gt;If you have questions, please do not hesitate to contact us at:&lt;br&gt;
&lt;a href="//mailto:developers@useanvil.com"&gt;developers@useanvil.com&lt;/a&gt;&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://portswigger.net/web-security/ssrf"&gt;https://portswigger.net/web-security/ssrf&lt;/a&gt; &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>security</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 04 May 2021 18:06:04 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-3o6g</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-3o6g</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Editorial note:&lt;/strong&gt; Hi everyone! Gracie here. You might have seen me around DEV — I'm the Content Manager at Forem and an admin/moderator of CodeNewbie Community and DEV. I'll be sharing the Top 7 and weekly newsletter while Jess is away on parental leave. I'm very excited to be a part of your weekly ritual for the next few months! Thanks for having me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-want-to-make-sure-all-we-have-to-do-is-look-for-talent"&gt;
  &lt;/a&gt;
  "I want to make sure all we have to do is look for talent"
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/resourcefulmind"&gt;@resourcefulmind&lt;/a&gt;
 shares a glimpse inside their experience as a software developer in Nigeria. Thank you for trusting the DEV Community with your reflections, feelings, frustrations, and honest reporting ❤️  I learned so much from your article.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/resourcefulmind" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1WOJJiNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--QecMLNY1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/435270/7ca3876e-ca85-478e-a2fa-c634f4a78121.png" alt="resourcefulmind image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/resourcefulmind/a-beginner-s-journey-into-software-development-in-nigeria-86b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A beginner’s journey into software development in Nigeria.&lt;/h2&gt;
      &lt;h3&gt;Opeyemi Stephen ・ Apr 29 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#your-emotional-amp-mental-state-as-a-dev-has-a-direct-impact-on-your-work"&gt;
  &lt;/a&gt;
  "Your emotional &amp;amp; mental state as a dev has a direct impact on your work"
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/tyaga001"&gt;@tyaga001&lt;/a&gt;
, I see so many posts on DEV alone that communicate this truth. Highly recommend this post!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tyaga001" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Evcp20bP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--AmHxNsux--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/350031/9de7de32-e1b3-438e-b86e-375c9e85f10b.jpeg" alt="tyaga001 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tyaga001/7-uncomfortable-truths-about-being-a-developer-1gec" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 uncomfortable truths about being a developer.&lt;/h2&gt;
      &lt;h3&gt;Ankur Tyagi ・ May  2 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#when-you-hear-of-automation-what-comes-to-your-mind"&gt;
  &lt;/a&gt;
  "When you hear of automation what comes to your mind?"
&lt;/h2&gt;

&lt;p&gt;That's the question &lt;a class="mentioned-user" href="https://dev.to/kalashin1"&gt;@kalashin1&lt;/a&gt;
 asks in this post — then, they go on to helpfully rewire your answer to make CI/CD more comprehensible. Thanks, Kinanee!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kalashin1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WTfoD9W0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--C2So3Ds7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/444740/616b7e59-a732-437f-b6d1-14c5955d9ae7.jpg" alt="kalashin1 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kalashin1/automate-the-hell-out-of-your-code-3j42" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Automate the hell out of your code&lt;/h2&gt;
      &lt;h3&gt;Kinanee Samson ・ May  2 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#mens-sana-in-corpore-sano"&gt;
  &lt;/a&gt;
  “Mens Sana in Corpore Sano”
&lt;/h2&gt;

&lt;p&gt;Or, “a healthy mind in a healthy body” as the Romans used to say. &lt;a class="mentioned-user" href="https://dev.to/creativetim_official"&gt;@creativetim_official&lt;/a&gt;
 helps developers examine ways to reduce burnout to achieve more balance and less burnout in this post.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/creativetim_official" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rgtwhngc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--q-ISCoq8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/180698/1049dc0e-ab4a-42f8-91a6-262e7df1e65e.png" alt="creativetim_official image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/creativetim_official/how-to-prevent-burnout-while-working-as-a-web-developer-46oa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Prevent Burnout While Working as a Web Developer&lt;/h2&gt;
      &lt;h3&gt;Creative Tim ・ Apr 29 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#burnout&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#setting-up-a-new-system-is-a-neverending-task"&gt;
  &lt;/a&gt;
  "Setting up a new system is a neverending task..."
&lt;/h2&gt;

&lt;p&gt;— but &lt;a class="mentioned-user" href="https://dev.to/erikaheidi"&gt;@erikaheidi&lt;/a&gt;
 is pretty happy with the current state of their new laptop! Take a look at how they got there with an awesome Ubuntu setup process...&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/erikaheidi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i6eXk8o4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--95Vsc3-S--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/162988/b604f249-a248-4582-80e3-4a781d054e3f.jpeg" alt="erikaheidi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/erikaheidi/setting-up-a-fresh-ubuntu-21-04-desktop-as-personal-computer-41i3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Setting Up a Fresh Ubuntu 21.04 Desktop as Personal Computer&lt;/h2&gt;
      &lt;h3&gt;Erika Heidi ・ May  2 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ubuntu&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#setup&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#web-components-can-be-useful-in-the-right-context"&gt;
  &lt;/a&gt;
  Web components &lt;em&gt;can&lt;/em&gt; be useful in the right context
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/emileperron"&gt;@emileperron&lt;/a&gt;
 shows us &lt;em&gt;which&lt;/em&gt; contexts make the most sense to use them in. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/emileperron" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dGkDUoXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--IeEm8106--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/624340/24b2b84a-6d71-4ffc-940f-f021100cf7d6.jpg" alt="emileperron image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/emileperron/web-components-in-2021-the-good-the-bad-and-the-ugly-3kg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Web components in 2021: the Good, the Bad and the Ugly&lt;/h2&gt;
      &lt;h3&gt;Émile Perron ・ May  2 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webcomponents&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#interview-prep-js-edition"&gt;
  &lt;/a&gt;
  Interview prep: JS edition
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/pietraszek"&gt;@pietraszek&lt;/a&gt;
 shares some common JavaScript questions and simple code tests you might face in a future interview. Helpful! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pietraszek" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8U7dyeTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--waz08J2K--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/619004/c73a18b6-09d5-46b2-9acc-bc930ca5bf62.jpeg" alt="pietraszek image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pietraszek/interview-questions-part-2-javascript-lno" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Interview questions: JavaScript&lt;/h2&gt;
      &lt;h3&gt;Lukasz Pietraszek ・ Apr 27 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#interview&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Choosing your best JavaScript framework(which works for you - An intro with real-time scenarios)</title>
      <author>vishwasnarayanre</author>
      <pubDate>Tue, 04 May 2021 17:59:04 +0000</pubDate>
      <link>https://dev.to/vishwasnarayan5/choosing-your-best-javascript-framework-which-works-for-you-an-intro-with-real-time-scenarios-27dc</link>
      <guid>https://dev.to/vishwasnarayan5/choosing-your-best-javascript-framework-which-works-for-you-an-intro-with-real-time-scenarios-27dc</guid>
      <description></description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>cloud</category>
    </item>
    <item>
      <title>CPANdeps end of life</title>
      <author>David Cantrell</author>
      <pubDate>Tue, 04 May 2021 17:53:56 +0000</pubDate>
      <link>https://dev.to/drhyde/cpandeps-end-of-life-1pdf</link>
      <guid>https://dev.to/drhyde/cpandeps-end-of-life-1pdf</guid>
      <description>&lt;p&gt;Back in 2007 I wrote CPANdeps, a web site which analysed dependencies between distributions on the CPAN, and displayed them along with their &lt;a href="http://www.cpantesters.org/"&gt;CPAN testers&lt;/a&gt; results.&lt;/p&gt;

&lt;p&gt;I have decided to retire it, for several reasons. First, &lt;a href="https://metacpan.org/"&gt;metacpan&lt;/a&gt; has sprouted tentacles to do the dependency analysis. Second, the code is a mess and it needs quite a bit of work to cope with the current size of the CPAN-testers database. But third, and most importantly, the employer that I left over a year ago are withdrawing the free hosting.&lt;/p&gt;

&lt;p&gt;I've not actually &lt;em&gt;used&lt;/em&gt; the site myself for a while, preferring the &lt;a href="https://metacpan.org/pod/distribution/CPAN-FindDependencies/bin/cpandeps"&gt;command line version&lt;/a&gt;. That, like metacpan, doesn't include test results, but I've found that I generally don't care much. Nigh on everything Just Works on every platform I care about.&lt;/p&gt;

&lt;p&gt;It's going away on or shortly after the 17th of May. If anyone would like to take it over and host it themselves please email me.&lt;/p&gt;

</description>
      <category>perl</category>
      <category>cpan</category>
      <category>dependencies</category>
    </item>
    <item>
      <title>Pixie is now open source</title>
      <author>Nočnica Fee</author>
      <pubDate>Tue, 04 May 2021 17:31:50 +0000</pubDate>
      <link>https://dev.to/newrelic/pixie-is-now-open-source-335k</link>
      <guid>https://dev.to/newrelic/pixie-is-now-open-source-335k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#pixie-is-amazing"&gt;
  &lt;/a&gt;
  Pixie is amazing
&lt;/h1&gt;

&lt;p&gt;Since its launch we’ve seen tremendous enthusiasm for Pixie’s vision of toil-free cloud observability. &lt;/p&gt;

&lt;p&gt;Pixie runs entirely inside your Kubernetes clusters without storing any customer data outside. Avoid trading-off depth of visibility due to the hassle and cost of trucking petabytes of telemetry off-cluster.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pixie-is-now-open-source"&gt;
  &lt;/a&gt;
  Pixie is now open source
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=27037102"&gt;New Relic has open sourced Pixie&lt;/a&gt;, and we are in the process of contributing it to CNCF under an Apache 2.0 license. When we acquired &lt;a href="https://newrelic.com/blog/nerd-life/pixie-developer-first-observability"&gt;Pixie Labs in December 2020&lt;/a&gt;, we were enthralled by the instant visibility this platform delivers for cloud native applications without any code changes.&lt;/p&gt;

&lt;p&gt;In 2008, New Relic was the first SaaS company that enabled engineers to instantly monitor their Ruby applications. It was a magical moment, and today Pixie redelivers this experience. With one command, you can light up your entire cloud environment and get telemetry immediately. We believe all developers should get access to this phenomenal developer experience that reduces friction to observability and saves valuable time that you can use for developing better software. To make that happen, we are also devoting a majority of Pixie’s engineering resources to this open source project.&lt;/p&gt;

&lt;p&gt;Our commitment to open source and CNCF extends beyond our platinum membership, governing board seat, and Pixie contribution. &lt;a href="https://newrelic.com/blog/best-practices/introducing-open-source-agents-and-projects"&gt;All our instrumentation agents, integrations, and SDKs are available in open source&lt;/a&gt;, giving developers access to our turnkey instrumentation so they can customize to their needs. &lt;a href="https://opensource.newrelic.com/projects/open-telemetry"&gt;OpenTelemetry is the instrumentation standard&lt;/a&gt; going forward in New Relic. To make it easy to adopt this open standard of instrumentation, we are providing a native OpenTelemetry protocol endpoint to ingest data and curated, first-class out-of-the-box user experiences that simplify analysis and troubleshooting. New Relic is also a founding member of &lt;a href="https://newsroom.eclipse.org/news/announcements/eclipse-foundation-launches-adoptium-working-group-multi-vendor-delivery-java"&gt;Eclipse Adoptium&lt;/a&gt;, a leading provider of fully compatible, high-quality distributions of Java runtimes based on OpenJDK source codes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pixie-on-aws"&gt;
  &lt;/a&gt;
  Pixie on AWS
&lt;/h1&gt;

&lt;p&gt;We are on a mission to make observability part of every developer’s workflow and we can’t do that alone. Last fall, we &lt;a href="https://newrelic.com/blog/nerdlog/free-observability-plan-aws-marketplace"&gt;announced a strategic collaboration&lt;/a&gt; agreement with AWS to accelerate innovation and cloud migration for our shared customers. We are excited to extend our collaboration with &lt;a href="https://aws.amazon.com/blogs/opensource/gathering-insights-on-kubernetes-applications-services-and-network-traffic-with-pixie/"&gt;AWS on Pixie&lt;/a&gt;, to provide Pixie Open Source on AWS Cloud. Get started today with &lt;a href="http://eksworkshop.com/intermediate/241_pixie/deploy_pixie/"&gt;Pixie on Amazon Elastic Kubernetes Service (EKS)&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>observability</category>
      <category>opensource</category>
    </item>
    <item>
      <title>What is Neural Rendering?</title>
      <author>Hugo</author>
      <pubDate>Tue, 04 May 2021 17:07:42 +0000</pubDate>
      <link>https://dev.to/zumolabs/what-is-neural-rendering-44m0</link>
      <guid>https://dev.to/zumolabs/what-is-neural-rendering-44m0</guid>
      <description>&lt;p&gt;As our world becomes increasingly digitized, the methods by which we render these virtual worlds are rapidly changing. Neural rendering has huge potential in improving many aspects of the rendering pipeline by leveraging generative machine learning techniques. What is neural rendering? In this article we'll introduce the concept, compare it to classical computer graphics, and discuss what it means for the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classic-rendering"&gt;
  &lt;/a&gt;
  Classic Rendering
&lt;/h2&gt;

&lt;p&gt;Creating 3D virtual worlds today is a complicated and involved process. Each item, or asset, in a virtual scene is represented by a polygon mesh (Slide 1). This polygon mesh can either be modeled by an artist, or scanned into existence: both of these processes are manual and time consuming. The more detailed we want this specific asset to be, the more polygons the mesh will have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WmjgPeam--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tv8di9rzm91gt9006oh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WmjgPeam--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tv8di9rzm91gt9006oh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The polygon mesh is only the beginning. Each surface in this 3D world also has a corresponding material, which determines the appearance of the mesh. At runtime, the material and mesh of the object are used as inputs to shader programs, which calculate the appearance of the object under given lighting conditions and a specific camera angle (Slide 2). Over the years, many different shader programs have been developed, though the fundamental principle is the same: use the laws of physics to calculate the appearance of an object. This is most evident in the approach known as Ray Tracing, where every light ray is traced from its source down to every surface it bounces on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7hPGNFhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xoututppz3r1vmhviqqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7hPGNFhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xoututppz3r1vmhviqqb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This render pipeline can create amazing results: every CGI effect in every movie you have seen, and every game you have ever played uses some form of this "classical computer graphics" pipeline. The main pain point for this pipeline is in the huge amount of work required to explicitly define every object and every material, and the large computation required to render a realistic or complex scene. Which leads us to the question: what if we didn't have to define every object and calculate every light bounce?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-neural-rendering"&gt;
  &lt;/a&gt;
  Enter Neural Rendering
&lt;/h2&gt;

&lt;p&gt;So, what is neural rendering? Though still a very young field, it's one which has grown to encompass a large number of techniques-GANs are a form of neural rendering. The key concept behind neural rendering approaches is that they are differentiable. A differentiable function is one whose derivative exists at each point in the domain. This is important because machine learning is basically the chain rule with extra steps: a differentiable rendering function can be learned with data, one gradient descent step at a time. Learning a rendering function statistically through data is fundamentally different from the classic rendering methods we described above, which calculate and extrapolate from the known laws of physics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oPann5oU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfy5vmw4nlrf7zhmbasd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oPann5oU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfy5vmw4nlrf7zhmbasd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the coolest flavors of neural rendering is novel view synthesis. In this problem, a neural network learns to render a scene from an arbitrary viewpoint. Slides 3 and 4 are figures from two great papers on this topic: one from Google Research [1] and the other from Facebook Reality Labs [2]. Both of these works use a volume rendering technique known as ray marching. Ray marching is when you shoot out a ray from the observer (camera) through a 3D volume in space and ask a function: what is the color and opacity at this particular point in space? Neural rendering takes the next step by using a neural network to approximate this function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fdqAFrZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d722f8rjbrvyybfh8ns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fdqAFrZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d722f8rjbrvyybfh8ns.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future-of-rendering"&gt;
  &lt;/a&gt;
  The Future of Rendering
&lt;/h2&gt;

&lt;p&gt;We really just scratched the surface when it comes to neural rendering. If you want to learn more, we recommend this super extensive summary paper [3]. But before we go, what could this mean for the future?&lt;br&gt;
With neural rendering, we no longer need to physically model the scene and simulate the light transport, as this knowledge is now stored implicitly inside the weights of a neural network. This means that it will be possible to render your face, while it is inside a VR headset (Slide 5), without ever having to store or distort a 3D polygon mesh of your face!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--igQqggOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5xm1owmo5gsgh0gjgn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--igQqggOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5xm1owmo5gsgh0gjgn5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With neural rendering, the compute required to render an image is also no longer tied to the complexity of the scene (the number of objects, lights, and materials), but rather the size of the neural network (time required to perform a forward pass). This opens up the door for the possibility of really high quality rendering at a blazingly fast frame rate.&lt;br&gt;
If you're interested in the intersection of machine learning and 3D, please check out our open source synthetic data toolkit zpy [5]. Your feedback, commits, and feature requests will be invaluable as we continue to build a more robust set of tools for generating synthetic data. Who knows? Perhaps the next great neural rendering model will be trained using data generated with zpy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;[1] NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis (arxiv.org/pdf/2003.08934.pdf)&lt;br&gt;
[2] Neural Volumes: Learning Dynamic Renderable Volumes from Images (arxiv.org/pdf/1906.07751.pdf)&lt;br&gt;
[3] State of the Art on Neural Rendering (arxiv.org/pdf/2004.03805.pdf)&lt;br&gt;
[4] zpy: an open source synthetic data toolkit.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
