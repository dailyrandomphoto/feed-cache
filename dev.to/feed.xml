<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What I know about SSH</title>
      <author>michaeldrrc</author>
      <pubDate>Sat, 10 Apr 2021 00:37:07 +0000</pubDate>
      <link>https://dev.to/michaeldrrc/what-i-know-about-ssh-5ckk</link>
      <guid>https://dev.to/michaeldrrc/what-i-know-about-ssh-5ckk</guid>
      <description>&lt;p&gt;Authentication into a server are done in two ways mostly: username and password, and SSH keys. SSH keys are widely known to be more secure than a username and password due to advanced security techniques. So for fun, in my first post I want to discuss some of the details about the SSH protocol, ssh keys, and how to ssh into any server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssh-overview"&gt;
  &lt;/a&gt;
  SSH overview
&lt;/h2&gt;

&lt;p&gt;There are two computers involved in ssh. One is the client, who issues the ssh command, and the other is the host, which is running the ssh server. There are two requirements to ssh into a host machine. First, the client must have a ssh key pair. An ssh key pair can be generated using a command 'ssh-keygen' which comes pre-installed on Linux and Windows. This will create two separate files, a public key and a private key. This is known as an ssh key pair. The other requirement to gain access to the host machine is that the host must store the client's public key. The client's public key is stored in a file called 'authorized_keys' on the host&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-public-and-private-key"&gt;
  &lt;/a&gt;
  What is a public and private key?
&lt;/h2&gt;

&lt;p&gt;A public key is able to encrypt messages, and a private key is able to encrypt and decrypt messages. A message encrypted by a public key can only be decrypted by its corresponding private key. A public key and its corresponding private key forms a key pair. It is ok to distribute a public key, but not a private key. The reason for this is that if any third party has access to your private key, they can pretend to be you and authenticate themselves into any server which recognizes your public key. A private key should be kept very secure for this reason.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-ssh-work-simplified"&gt;
  &lt;/a&gt;
  How does SSH work? (simplified)
&lt;/h2&gt;

&lt;p&gt;When the client lets the server know it wants to authenticate, the following steps are carried out. Keep in mind this is simplified but captures the main points of a ssh authentication session. &lt;/p&gt;

&lt;p&gt;This is an example of a successful authentication:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client informs the server that it wants to start a ssh session&lt;/li&gt;
&lt;li&gt;A session id is created&lt;/li&gt;
&lt;li&gt;The client sends its public key to the host. &lt;/li&gt;
&lt;li&gt;If the client's public key is in the file 'authorized_keys', a random string called a 'seed' is created, and the host encrypts the seed using the client's public key. &lt;/li&gt;
&lt;li&gt;The host sends the encrypted seed to the client. &lt;/li&gt;
&lt;li&gt;The client decrypts the server's message to reveal the seed using its corresponding private key. &lt;/li&gt;
&lt;li&gt;The client combines the seed with the session id, and sends it back to the host.&lt;/li&gt;
&lt;li&gt;The client generates a hash of the combined seed and session id for itself.&lt;/li&gt;
&lt;li&gt;The host generates a hash of the combined seed and session id for itself.&lt;/li&gt;
&lt;li&gt;The host compares its hash with the client's hash. If they are the same, the client must have the corresponding private key, so the client is authenticated.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An unsuccessful authentication would go wrong at step 5. If the wrong private key is used to try to decrypt the server's message, the result will not be the seed, it will just be a random string. At step 10 the hashes will not be the same so authentication fails.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-ssh-into-any-server-quick"&gt;
  &lt;/a&gt;
  How to ssh into any server (quick)
&lt;/h2&gt;

&lt;p&gt;To ssh into any server, follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ssh-keygen
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;into the terminal of the ssh client. When asked for a passphrase just press enter.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a folder called '.ssh' on the host in the home directory of a user of your choice. If the '.ssh' folder is already present ignore this step.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a blank file called 'authorized_keys' in the '.ssh' folder on the host. If the file 'authorized keys' is present ignore this step.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There should be a file called 'id_rsa.pub' in the '.ssh' folder in the home directory of the client. Open this file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open 'authorized_keys' on the host.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure you are on a blank new line in 'authorized_keys'. Paste the contents of 'id_rsa.pub' into 'authorized_keys'. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type in ssh . You should now be successfully authenticated and running a terminal on the host!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: A passphrase in step 1 could be added for extra security but this is just a super quick way to get ssh working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That is all. This is my first blog post so thanks for viewing :)&lt;/p&gt;

</description>
      <category>ssh</category>
      <category>host</category>
      <category>client</category>
      <category>keys</category>
    </item>
    <item>
      <title>Create Awesome Product Card | UI Design | E-commerce Card | Using Only Html5 &amp; CSS3</title>
      <author>Ahmad Emran</author>
      <pubDate>Sat, 10 Apr 2021 00:30:00 +0000</pubDate>
      <link>https://dev.to/ahmadbassamemran/create-awesome-product-card-ui-design-e-commerce-card-using-only-html5-css3-553p</link>
      <guid>https://dev.to/ahmadbassamemran/create-awesome-product-card-ui-design-e-commerce-card-using-only-html5-css3-553p</guid>
      <description>

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3IYlUpjsKfI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/AhmadEmran?sub_confirmation=1"&gt;&lt;strong&gt;Please do not forget to subscribe in my channel:&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ahmadbassamemran/embed/GRryraq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Fast Connect - New online web-conference platform</title>
      <author>Elman Huseynov</author>
      <pubDate>Sat, 10 Apr 2021 00:24:55 +0000</pubDate>
      <link>https://dev.to/huseyn0w/fast-connect-new-online-web-conference-platform-3p3i</link>
      <guid>https://dev.to/huseyn0w/fast-connect-new-online-web-conference-platform-3p3i</guid>
      <description>&lt;p&gt;This application is developed for creating fast and standalone video conferences without any registration.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;COVID-19 Changed the world...&lt;/strong&gt; &lt;br&gt; Since year 2020 world is different. Majority of people change the way of workflow from Office to Remote mode. &lt;br&gt;&lt;br&gt;
We are required to use different enterprise applications to create a communication between each other. &lt;br&gt;&lt;br&gt;
Each of them has their own advantages, but in most cases you have to register or download application to use it. &lt;br&gt;&lt;br&gt;
Besides, you have to pay for &lt;strong&gt;"Premium"&lt;/strong&gt; accounts sometimes if you want to have extra options. &lt;br&gt;&lt;br&gt;
Moreover, in some countries, you can not use that popular softwares, because they have been blocked. &lt;br&gt;&lt;br&gt;
&lt;strong&gt;So this is the time when Fast Connect comes around...&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
By using our application you &lt;strong&gt;DO NOT NEED&lt;/strong&gt; to download anything to your device, or pay for anything. &lt;br&gt;&lt;br&gt;
You can create new conference and use all features for &lt;strong&gt;ABSOLUTELY FREE&lt;/strong&gt; and &lt;strong&gt;without registration&lt;/strong&gt; ;) &lt;br&gt;&lt;br&gt;
All you have to do is to make 2 steps: &lt;br&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create unique ID for conference, send it to all your collegues. 
&lt;/li&gt;
&lt;li&gt;Enter that ID at homepage and start your conference. 

Good luck and have a good time =)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://serene-refuge-81999.herokuapp.com/"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/huseyn0w/Fast-Connect"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linkedin.com/in/huseyn0w"&gt;My Linkedin Profile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No registration and NO "PREMIUM" accounts&lt;/li&gt;
&lt;li&gt;Realtime video/audio conference with unlimited number of users&lt;/li&gt;
&lt;li&gt;Different rooms creating option for conferations&lt;/li&gt;
&lt;li&gt;Chat for sending messages&lt;/li&gt;
&lt;li&gt;Screen Sharing option&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Technologies that used in creation of this app:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React JS&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;Material UI&lt;/li&gt;
&lt;li&gt;Node / Express js&lt;/li&gt;
&lt;li&gt;Socket IO&lt;/li&gt;
&lt;li&gt;Peer JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Like it ? Please star the project and share in return ;)&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webrtc</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
    </item>
    <item>
      <title>Start with Python</title>
      <author>Shaheryar</author>
      <pubDate>Fri, 09 Apr 2021 23:56:35 +0000</pubDate>
      <link>https://dev.to/shaheryaryousaf/start-with-python-1cg6</link>
      <guid>https://dev.to/shaheryaryousaf/start-with-python-1cg6</guid>
      <description>&lt;p&gt;We will learn about the following concepts of python.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;print()&lt;/li&gt;
&lt;li&gt;input()&lt;/li&gt;
&lt;li&gt;String Concatenation&lt;/li&gt;
&lt;li&gt;String Manipulation&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#print"&gt;
  &lt;/a&gt;
  print()
&lt;/h3&gt;

&lt;p&gt;This function is used to print any data (string, integer, a boolean value, etc) in the python console.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make sure to use single or double quotes in the print function, if you are going to print a string. Don't need quotes if you are going to print any other data type.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print("Hello World!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  input()
&lt;/h3&gt;

&lt;p&gt;This function is used to get input from the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;input("What is your name?")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output will be print next to the input.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;We can store data values in variables, to use them later. Following are some rules to write variables in python and you should keep them in mind.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A variable name must start with a letter or the underscore character&lt;/li&gt;
&lt;li&gt;A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )&lt;/li&gt;
&lt;li&gt;Variable names are case-sensitive (age, Age, and AGE are three different variables)&lt;/li&gt;
&lt;li&gt;A variable name cannot start with a number
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var name = "John Doe"
print(name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;name value (John Doe) will print in the next line.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can test your code here. &lt;a href="https://www.programiz.com/python-programming/online-compiler/"&gt;https://www.programiz.com/python-programming/online-compiler/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#project"&gt;
  &lt;/a&gt;
  Project
&lt;/h4&gt;

&lt;p&gt;You can check the Brand name generator project, you can check here.&lt;br&gt;
&lt;a href="https://dev.to/shaheryaryousaf/brand-name-generator-in-python-3744"&gt;https://dev.to/shaheryaryousaf/brand-name-generator-in-python-3744&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Brand Name Generator in Python</title>
      <author>Shaheryar</author>
      <pubDate>Fri, 09 Apr 2021 23:56:19 +0000</pubDate>
      <link>https://dev.to/shaheryaryousaf/brand-name-generator-in-python-3744</link>
      <guid>https://dev.to/shaheryaryousaf/brand-name-generator-in-python-3744</guid>
      <description>&lt;p&gt;We are going to create a Brand name generator project in python, it is a fairly simple project for beginners.&lt;/p&gt;

&lt;p&gt;Users will answer some questions and our program will generate a Brand name for them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;city = input("What is your city name?\n")
pet = input("What is your pet name?\n")
print("Your Band Name can be " + city + " " + pet)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can test the code by going on this link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.programiz.com/python-programming/online-compiler/"&gt;https://www.programiz.com/python-programming/online-compiler/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Getting form body data in your SvelteKit endpoints</title>
      <author>Dana Woodman</author>
      <pubDate>Fri, 09 Apr 2021 23:23:45 +0000</pubDate>
      <link>https://dev.to/danawoodman/getting-form-body-data-in-your-sveltekit-endpoints-4a85</link>
      <guid>https://dev.to/danawoodman/getting-form-body-data-in-your-sveltekit-endpoints-4a85</guid>
      <description>&lt;p&gt;Most of the time when working with forms, we opt to override the browser's default behavior (via &lt;code&gt;&amp;lt;form on:submit|preventDefault={handleSubmit}&amp;gt;&lt;/code&gt;), but sometimes we just want a simple form submission. &lt;/p&gt;

&lt;p&gt;In those cases, you may find yourself with an empty body coming into your SvelteKit endpoints. If that is you, read on!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h1&gt;

&lt;p&gt;Suppose we have an HTML form like this and we want to &lt;code&gt;POST&lt;/code&gt; it's content to our endpoint at &lt;code&gt;/newsletter&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/newsletter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we tried to access &lt;code&gt;req.body&lt;/code&gt; from our endpoint directly, we would get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReadOnlyFormData {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#accessing-form-data"&gt;
  &lt;/a&gt;
  Accessing form data
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;What the heck is this?&lt;/strong&gt; With a little searching, you can see it defined in the SvelteKit types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ReadOnlyFormData&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;has&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for the weirdos among us, you can &lt;a href="https://github.com/sveltejs/kit/blob/master/packages/kit/src/core/http/get_body/read_only_form_data.js"&gt;check out the code for the &lt;code&gt;ReadOnlyFormData&lt;/code&gt; class on Github&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But the tl;dr is that for form data, SvelteKit gives us this little class that we can use to pull out values in our endpoints.&lt;/p&gt;

&lt;p&gt;Here is how to use the basic property accessors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// "sveltegroupie3000"&lt;/span&gt;

&lt;span class="c1"&gt;// Get an array of values (useful for checkboxes and selects)&lt;/span&gt;
&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;favIceCreamFlavors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// ['vanilla', 'toffee', 'caramel']&lt;/span&gt;

&lt;span class="c1"&gt;// Check if a value exists (useful for boolean checkboxes)&lt;/span&gt;
&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;agreeToTerms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to get all the form data, you'll need to access the &lt;code&gt;Iterators&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Get all items in the form in an "entries" type array:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="c1"&gt;// [ [ "name": "Rich Harris" ], [ "hobbies", "svelte" ], [ "hobbies": "journalism" ] ]&lt;/span&gt;

&lt;span class="c1"&gt;// Get each keys:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="c1"&gt;// [ "name", "hobbies", "hobbies" ]&lt;/span&gt;

&lt;span class="c1"&gt;// Get all values:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="c1"&gt;// [ [ "Rich Harris" ], [ "svelte" ], [ "journalism" ] ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should be able to work with your HTML form data, high five! 🙏&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#going-further"&gt;
  &lt;/a&gt;
  Going further
&lt;/h1&gt;

&lt;p&gt;If you're like me, you'd rather just have a nice little object to play with of all your form data. If you want something like this, try out the following helper function to parse your form data and modify as desired:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFormBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;()].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Usage:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFormBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this you can now access your form data as you're probably use to with thinks like Express.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#fin"&gt;
  &lt;/a&gt;
  Fin
&lt;/h1&gt;

&lt;p&gt;Thanks for reading and hope this was helpful! 🤓&lt;/p&gt;

&lt;p&gt;This post was inspired by a question @Teunminator in Svelte's #svelte-kit Discord channel, thanks for a fun challenge!&lt;/p&gt;

&lt;p&gt;PS: If you're trying to implement file uploads, you'll like see &lt;code&gt;Error: File upload is not yet implemented&lt;/code&gt; which is because SvelteKit does not yet support it (as of this writing). You'll have to upload your files in other ways until then.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow me on &lt;a href="https://dev.to/danawoodman"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://twitter.com/DanaWoodman"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/danawoodman"&gt;Github&lt;/a&gt; for more web dev and startup related content&lt;/em&gt; 🤓&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>sveltekit</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Secret Weapons: Pen and Paper</title>
      <author>Anthony</author>
      <pubDate>Fri, 09 Apr 2021 23:17:16 +0000</pubDate>
      <link>https://dev.to/toymachine/secret-weapons-pen-and-paper-1nhb</link>
      <guid>https://dev.to/toymachine/secret-weapons-pen-and-paper-1nhb</guid>
      <description>&lt;p&gt;When doing computer work there is an obvious inclination to doing your note-taking and documenting on the computer. And this makes sense, as it makes your notes accessible from anywhere and you never have to worry about losing them. The problem is that you are making major trade-offs when it come to retention and consideration of your thoughts. &lt;/p&gt;

&lt;p&gt;Any number of studies and articles over the past few years have highlighted the positives of handwritten notes. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.frontiersin.org/articles/10.3389/fpsyg.2020.01810/full"&gt;The Importance of Cursive Handwriting Over Typewriting for Learning in the Classroom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://journals.sagepub.com/doi/abs/10.1177/0956797614524581"&gt;The Pen Is Mightier Than the Keyboard: Advantages of Longhand Over Laptop Note Taking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://commons.lib.jmu.edu/cgi/viewcontent.cgi?article=1056&amp;amp;context=lexia"&gt;The Benefits of Hand-written Versus Digital Notetaking in College Lectures&lt;/a&gt; [PDF]&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gse.harvard.edu/news/uk/17/08/note-taking-low-tech-often-best"&gt;For Note Taking, Low-Tech Is Often Best&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It turns out what we learned in grade school was correct: writing things down means you are better able to recall them later. This, it turns out, needs to be done with pen and paper to be effective as typed notes doing see the same level of positive effect. &lt;/p&gt;

&lt;p&gt;This might be disheartening news for many of us who have lost what little handwriting capabilities we had and can type much faster than we can write longhand, but perhaps the slowness of handwritten notes is the key. For example, during a lecture, the slowness of writing requires one to listen, process, and then take abbreviated notes. A strong typist can capture the &lt;a href="https://www.huffingtonpost.com.au/2016/04/21/writing-by-hand-benefits_n_9735384.html"&gt;lecture almost word for word&lt;/a&gt;, focusing only on the typing. &lt;/p&gt;

&lt;p&gt;Studies also point to the laptops as being distracting. Despite your intention to focus on the topic at hand -- be is a lecture, a speech, a presentation, or a Zoom call -- laptops are filled with distractions where a pen and paper has no battery, alerts, pop-ups, or ability to quickly search for more information on a topic. &lt;/p&gt;

&lt;p&gt;Of course notebooks come with their own problems. A misplaced backpack or spilled coffee and lead to a disaster, with dozens of hours of work lost. This is something that would (almost) never happen with Google Docs, or at least would be completely avoidable with digital notes. &lt;/p&gt;

&lt;p&gt;This risk can be mitigated by taking notes by hand first, perhaps &lt;a href="https://unsharpen.com/whats-the-deal-with-moleskine/"&gt;in a nice notebook&lt;/a&gt; with a water-safe, pigmented pen and then to type in the notes later. This would be usefully for important information that is worth considering twice. It is also possible to simply scan in documents, which can be done at incredible speed and accuracy with any document scanner. &lt;/p&gt;

&lt;p&gt;My recommendation? Keep a paper notebook and a reliable pen at handy. Jot down your thoughts there, especially those taken on an important call, during a meeting with stakeholders, and other places where proper retention matters. Don't change your workflow for long pieces of text that you are going to drop into your notepad and search through later -- computers are great at that. So improve your notetaking when it matters and then stay efficient everywhere else. &lt;/p&gt;

</description>
      <category>writing</category>
      <category>notes</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A python regex to validate roman numerals</title>
      <author>Alexandre Donciu-Julin</author>
      <pubDate>Fri, 09 Apr 2021 23:13:41 +0000</pubDate>
      <link>https://dev.to/alexdjulin/a-python-regex-to-validate-roman-numerals-2g99</link>
      <guid>https://dev.to/alexdjulin/a-python-regex-to-validate-roman-numerals-2g99</guid>
      <description>&lt;p&gt;&lt;em&gt;Note: This is my first post, I hope you'll like it :)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#im-not-gonna-lie-to-you-i-love-regex"&gt;
  &lt;/a&gt;
  I'm not gonna lie to you... I LOVE REGEX!
&lt;/h3&gt;

&lt;p&gt;As a kid, I grew up playing adventure games full of puzzles and riddles. Looking for the solution was a personal quest, a treasure hunt. Finding it was so exciting, but not as much as jumping on another riddle!&lt;/p&gt;

&lt;p&gt;When I discovered regular expressions on my journey to become a (good) python programmer, I felt that same excitement. I was blown away by the countless possibilities these were offering. Deciphering one was like suddenly being able to read hieroglyph, writing one was like discovering I could speak a foreign language. Although I know they should be used with caution and in special cases only, I keep pushing myself to use them everywhere I can. &lt;/p&gt;

&lt;p&gt;That's why, when &lt;a href="https://www.codewars.com/kata/51b66044bce5799a7f000003/train/python"&gt;Codewars&lt;/a&gt; challenged me to write a function to convert roman numerals from/to Arabic numbers, I could not resist writing a regex to help me solve that problem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GVGQwud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s41hungkq8yztw9nsj3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GVGQwud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s41hungkq8yztw9nsj3.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enough-chitchat-lets-get-our-hands-dirty"&gt;
  &lt;/a&gt;
  Enough chit-chat, let's get our hands dirty.
&lt;/h3&gt;

&lt;p&gt;My first task was to validate if the user input was a valid roman numeral. To sum up, roman numerals consists of the following symbols:&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbIOaJP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cte88ws99u84t39vn7uy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbIOaJP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cte88ws99u84t39vn7uy.png" alt="image"&gt;&lt;/a&gt;Source: &lt;a href="https://en.wikipedia.org/wiki/Roman_numerals"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems that the thousands unit [M] does not extend past [MMM], which means that the biggest roman number would be [MMMCMXCIX], or 3999. I'm not sure if numbers could go higher than that and why the limit, anyway for the sake of this problem I limited myself with numbers between 1 and 3999.&lt;/p&gt;

&lt;p&gt;Now the trick is that the symbols placement is very important. If you don't put them in the right order, the resulting number would be invalid and unreadable. As listed in the table up there, numerals should start with thousands [M] 1000, followed by hundreds [D/C] 500/100, then dozens [L/X] 50/10, and finally units [V/1] 5/1.&lt;/p&gt;

&lt;p&gt;BUT, that's not it! Numerals can only repeat 3 times like [CCC] 300 before switching to a combo of two numerals like [CD] 400. So you can still have a [C] 100 before an [M] 1000, like in [CM] 900 for instance.&lt;/p&gt;

&lt;p&gt;Bit confusing, isn't it? &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--07jrPsfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyd4koybrd8kqlqrf8be.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--07jrPsfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyd4koybrd8kqlqrf8be.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#alright-lets-recap-our-conditions"&gt;
  &lt;/a&gt;
  Alright, let's recap our conditions:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Roman numbers are ranging from [I] 1 to [MMMCMXCIX] 3999&lt;/li&gt;
&lt;li&gt;Numerals should follow a precise order: [M] 1000 / [D] 500 / [C] 100 / [L] 50 / [X] 10 / [V] 5 / [I] 1&lt;/li&gt;
&lt;li&gt;A numeral cannot repeat more than 3 times, it then uses a pair&lt;/li&gt;
&lt;li&gt;The following pairs are allowed: [CM] 900 / [ID] 400 / [XC] 90 / [XL] 40 / [IX] 9 / [IV] 4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you start to see our REGEX showing up? :)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-translate-this-into-code"&gt;
  &lt;/a&gt;
  Let's translate this into code.
&lt;/h3&gt;

&lt;p&gt;For this we are going to use a tag I find really helpful when writing regex is the verbose one (&lt;em&gt;re.VERBOSE&lt;/em&gt; or &lt;em&gt;re.X&lt;/em&gt;) It allows you to spread your pattern on multiple lines and be more readable. Let's try it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_roman_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"""   
                                ^M{0,3}
                                (CM|CD|D?C{0,3})?
                                (XC|XL|L?X{0,3})?
                                (IX|IV|V?I{0,3})?$
            """&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow, that looks amazing already! Let's take a closer look at these 4 lines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;^M{0,3}&lt;/strong&gt; = Between 0 and 3 [M] at the beginning [^] of the string&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;(CM|CD|D?C{0,3})?&lt;/strong&gt; = One pair [CM] or one pair [CD] or [D], followed by up to 3 [C]. Each element is optional [?], as well as the whole block [()?]&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;(XC|XL|L?X{0,3})?&lt;/strong&gt; = One pair [XC] or one pair [XL] or [L], followed by up to 3 [X]. Each element is optional [?], as well as the whole block [()?]&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;(IX|IV|V?I{0,3})?$&lt;/strong&gt; = One pair [IX] or one pair [IV] or [V], followed by up to 3 [I]. Each element is optional [?], as well as the whole block [()?], which should be at the end of the string [$]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#lets-test-our-code"&gt;
  &lt;/a&gt;
  Let's test our code
&lt;/h3&gt;

&lt;p&gt;I'm using a simple fstring calling my function and comparing the string against our pattern to validate the numeral or not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;num_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'MMDCCLXXIII'&lt;/span&gt;
&lt;span class="n"&gt;num_invalid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'CCCMMVIIVV'&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_valid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'not'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_roman_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_valid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;a roman number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_invalid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'not '&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_roman_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_invalid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;a roman number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output:
# MMDCCLXXIII is a roman number
# CCCMMVIIVV is not a roman number
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That wasn't so bad after all! Now look at this and tell me it's not the most beautiful thing you've seen in your life:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;CM&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XC&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;XL&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IX&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;IV&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;?$&lt;/span&gt;&lt;span class="s"&gt;'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTEdWmN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubznh8stkc79wcn5njdk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTEdWmN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubznh8stkc79wcn5njdk.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all folks! Let me know if you are interested by the second part of the challenge: converting roman numerals from/to Arabic numbers and I will share my solution.&lt;/p&gt;

&lt;p&gt;Stay safe out there and read you soon :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>regex</category>
      <category>beginners</category>
      <category>regularexpressions</category>
    </item>
    <item>
      <title>Create developer story just like stackoverflow with react and chakraUi</title>
      <author>Muhammad Ahmad</author>
      <pubDate>Fri, 09 Apr 2021 22:38:15 +0000</pubDate>
      <link>https://dev.to/m_ahmad/create-developer-story-just-like-stackoverflow-with-react-and-chakraui-21a2</link>
      <guid>https://dev.to/m_ahmad/create-developer-story-just-like-stackoverflow-with-react-and-chakraui-21a2</guid>
      <description>&lt;p&gt;Today I updated my portfolio website with a story page.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#at-the-moment-im-showing"&gt;
  &lt;/a&gt;
  At the moment, I'm showing
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Educational institutes &lt;/li&gt;
&lt;li&gt;Companies list&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#further-ill-add"&gt;
  &lt;/a&gt;
  Further, I'll add
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Blogs or videos&lt;/li&gt;
&lt;li&gt;Open-source&lt;/li&gt;
&lt;li&gt;Feature or Apps&lt;/li&gt;
&lt;li&gt;Certifications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demo Link:&lt;/strong&gt; &lt;a href="https://mahmad.me/#/story-timeline"&gt;Story page&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;GitHub Repo:&lt;/strong&gt; &lt;a href="https://github.com/MA-Ahmad/portfolio-v2"&gt;Repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>react</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to ace a coding interview even if you can't solve the problem</title>
      <author>Erin Schaffer</author>
      <pubDate>Fri, 09 Apr 2021 21:32:34 +0000</pubDate>
      <link>https://dev.to/educative/how-to-ace-a-coding-interview-even-if-you-can-t-solve-the-problem-25a5</link>
      <guid>https://dev.to/educative/how-to-ace-a-coding-interview-even-if-you-can-t-solve-the-problem-25a5</guid>
      <description>&lt;p&gt;At most major tech companies, coding problems are the biggest part of the interview process. Some major tech companies have such difficult coding interviews that software engineers often spend months preparing for them. Unfortunately, no matter how much you prepare, it’s impossible to prepare for every problem. The questions in the interviews are designed to be difficult, and they can stump even the most experienced developers. Luckily, there are steps you can take to help yourself get unstuck.&lt;/p&gt;

&lt;p&gt;Here, we’ve outlined a process you can follow along with some advice to help you approach even the most difficult problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We will cover:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#part-1"&gt;Taking a deep breath&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-2"&gt;Clarifying the problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-3"&gt;Creating good examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-4"&gt;Doing it by hand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-5"&gt;Going simple, then optimizing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-6"&gt;Taking a hint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-7"&gt;Next steps for your learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taking-a-deep-breath"&gt;
  &lt;/a&gt;
  Taking a deep breath
&lt;/h2&gt;

&lt;p&gt;The first thing to do when you think you can’t solve the problem is to take a deep breath. Remember that no interview is perfect and that mistakes are expected. These questions are designed to be extremely challenging -- no one will have the perfect answer right away. Even the most seasoned candidates wouldn’t be expected to answer them quickly. From here, there are steps you can take to tackle the problem.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clarifying-the-problem"&gt;
  &lt;/a&gt;
  Clarifying the problem
&lt;/h2&gt;

&lt;p&gt;Before taking it any further, start by clarifying the problem. Sometimes, interviewers will purposely leave out some important details. Asking questions is a good thing and will show your interviewer that you’re thinking deeply about the problem and seeking to understand it better. Asking clarifying questions is a skill that you’ll regularly use as a developer, so your interview is a great place to showcase this skill. &lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-good-examples"&gt;
  &lt;/a&gt;
  Creating good examples
&lt;/h2&gt;

&lt;p&gt;Now that you’ve clarified your understanding of the question, it’s time to create some examples. Think of some possible inputs and what the expected outputs would be for them. Think about a few edge cases that may need special consideration.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to explain your process out loud. Your interviewer doesn’t necessarily care if you can solve this specific problem perfectly, they care about gaining insight into your problem-solving methods that will lend themselves to the job you’re applying for. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#doing-it-by-hand"&gt;
  &lt;/a&gt;
  Doing it by hand
&lt;/h2&gt;

&lt;p&gt;If a solution doesn’t immediately come to mind, it can be helpful to solve the problem by hand first. Forget that this is a coding interview for a second. If you were asked to solve this problem by hand, how would you approach the problem? Try to reverse engineer your thought process. Sometimes, nerves can cause us to get caught up in algorithms, but take away the coding, and we can quickly arrive at a solution.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#going-simple-then-optimizing"&gt;
  &lt;/a&gt;
  Going simple, then optimizing
&lt;/h2&gt;

&lt;p&gt;It’s much better to have an inefficient solution than no solution at all. A lot of the time, it’s easier to come up with something that simply works. From there, you can discuss steps you could follow to improve it or mention potential bottlenecks and how to fix them. &lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taking-a-hint"&gt;
  &lt;/a&gt;
  Taking a hint
&lt;/h2&gt;

&lt;p&gt;If you’re totally stuck, it’s okay to ask for a hint. It’s better to ask and actually get somewhere than end up with nothing. If possible, ask for a hint on something specific to give you the best chance of getting unstuck. Remember, your interviewer is on your side and wants to see you do well.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps-for-your-learning"&gt;
  &lt;/a&gt;
  Next steps for your learning
&lt;/h2&gt;

&lt;p&gt;It seems coding interviews are only getting harder, causing even the most experienced candidates to become stuck. Luckily, you now have a process to follow in case you ever get stuck on a coding problem in an interview. The best thing you can do is to study and prepare as much as you can before your interview. To learn more about how to prepare for your coding interview, check out Educative’s course, &lt;a href="https://www.educative.io/courses/grokking-the-coding-interview?affiliate_id=5082902844932096&amp;amp;utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=grokking-ci&amp;amp;gclid=Cj0KCQiA1KiBBhCcARIsAPWqoSpGI906622ESC7ZqU9CasJWwTj4Pt3nLALX1IkWo8MXMumKgcCeLycaAtKXEALw_wcB"&gt;&lt;strong&gt;Grokking the Coding Interview: Patterns for Coding Questions&lt;/strong&gt;&lt;/a&gt;, where you’ll learn about the 16 patterns for coding questions. The techniques taught in this course have helped developers land jobs at top companies, such as Amazon, Google, Facebook, and Microsoft.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-reading-about-coding-interviews"&gt;
  &lt;/a&gt;
  Continue reading about coding interviews
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/coding-interview-faq-preparation-guide"&gt;The Coding Interview FAQ: preparation, evaluation, and structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/crack-amazon-coding-interview-questions"&gt;Cracking the top Amazon coding interview questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/How-can-I-prepare-for-interviews-in-any-big-software-company/answer/Fahim-ul-Haq"&gt;How can I prepare for interviews in any big software company?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/5-tried-and-true-techniques-to-prepare-for-a-coding-interview"&gt;5 tried and true techniques to prepare for a coding interview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>computerscience</category>
      <category>career</category>
      <category>interview</category>
      <category>coding</category>
    </item>
    <item>
      <title>Sort array in O(n) time</title>
      <author>Prateek budhiraja</author>
      <pubDate>Fri, 09 Apr 2021 21:06:25 +0000</pubDate>
      <link>https://dev.to/prateekbud/sort-array-in-o-n-time-1f8g</link>
      <guid>https://dev.to/prateekbud/sort-array-in-o-n-time-1f8g</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This method only works with an array with numbers that meets some conditions. As I am not an alien from some other galaxy to prove the laws of mathematics wrong 👽!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Preface&lt;/strong&gt;&lt;br&gt;
We know that the fastest algorithm to sort an array takes &lt;code&gt;O(n*log(n))&lt;/code&gt; time, which is also mathematically backed.&lt;br&gt;&lt;br&gt;
But in the quest to do something on a Friday night rather than overthinking why my friends haven't invited to their party 😑, I chose this.     &lt;/p&gt;

&lt;p&gt;This algorithm is based on one condition that the numbers are scattered by MSB's which means there should only be one number from each range category. i.e.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dO820WyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46ixno7obdsp1q6o9yad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dO820WyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46ixno7obdsp1q6o9yad.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
To get this range we will look at the most significant 1 bit of an element (fist encounter of 1 from the left). Which actually tells the highest number it can make.&lt;br&gt;
We can found that with the help of &lt;code&gt;bit manipulations&lt;/code&gt; and then we will decide the position(index) of the number in the array based on its MSB position.&lt;/p&gt;

&lt;p&gt;Let's code the &lt;code&gt;No Friends Sort&lt;/code&gt;! &lt;br&gt;
&lt;em&gt;As I am home on a Friday night, and every number that it sorts is far from each other!&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public void noFriendSort(){
    int[] arr= {45, 1, 5, 150, 100,  3, 24, 11, 460};
    int[] newarr=new int[9];
    for(int v : arr) {
        int temp=v;
        int count=0;
        for(int i=1; i&amp;lt;=9; i++) {
            temp=temp&amp;gt;&amp;gt;1;
            if(temp==0)
                break;
            count++;
           }
        newarr[count]=v;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code can sort values till 511, though it can go up to the range of int, but the higher the number, the less sense the code makes. As the inputs should be more scattered. So the time complexity of this code would be &lt;code&gt;O(n*9)&lt;/code&gt; which is &lt;code&gt;O(n)&lt;/code&gt;.&lt;br&gt;
But as it only considers one number per range, now I can say that I successfully wasted my Friday night 😶.&lt;/p&gt;

&lt;p&gt;But it delivers what it says &lt;code&gt;sort array in O(n)&lt;/code&gt;!&lt;br&gt;
Google I will be waiting for your call.&lt;/p&gt;

</description>
      <category>sort</category>
      <category>java</category>
      <category>algorithms</category>
      <category>bitmanipulation</category>
    </item>
    <item>
      <title>Open source MERN survey APP for you to Learn and contribute</title>
      <author>Shashank Katte</author>
      <pubDate>Fri, 09 Apr 2021 21:02:18 +0000</pubDate>
      <link>https://dev.to/shashankkatte/open-source-mern-survey-app-for-you-to-learn-and-contribute-5b8a</link>
      <guid>https://dev.to/shashankkatte/open-source-mern-survey-app-for-you-to-learn-and-contribute-5b8a</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/shashankkatte/feedbackr-mern"&gt;Github link here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feedbackr is an Opensource and free survey app. 📝. Use it as a starter app to build your own custom feedback collection App or use it as your reference to explore a production ready MERN App.&lt;/p&gt;

&lt;p&gt;If you are exploring MERN stack, this app will show you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;how to use &lt;strong&gt;React and Redux&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Routing with &lt;strong&gt;React routing&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using reusable &lt;strong&gt;Redux Forms&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Payments with &lt;strong&gt;Stripe&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Google OAuth Authentication&lt;/strong&gt; with &lt;strong&gt;Passport.js&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Persisting data into &lt;strong&gt;MongoDB&lt;/strong&gt; and using &lt;strong&gt;Mongoose&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;strong&gt;webhooks&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending Automated &lt;strong&gt;Emails&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;API key handling techniques&lt;/strong&gt; and  Deployment strategy with configs to &lt;strong&gt;Heroku&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a very good App for you to practice your MERN Skills and contribute to opensource. See you there!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/shashankkatte/feedbackr-mern"&gt;Github link here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The App is based off of learnings from great teachers like Stephen Grider, Brad traversy, Max - Academind, Freecodecamp and many more.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
