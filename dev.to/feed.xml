<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>3 ways to prevent micro-burnouts</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 09 Jun 2021 05:14:52 +0000</pubDate>
      <link>https://dev.to/sandordargo/3-ways-to-prevent-micro-burnouts-2jbh</link>
      <guid>https://dev.to/sandordargo/3-ways-to-prevent-micro-burnouts-2jbh</guid>
      <description>&lt;p&gt;I've been proposing some topics for a person I'm mentoring and one was "productivity/motivation". She immediately became quite excited about the idea, so I asked what is going on.&lt;/p&gt;

&lt;p&gt;She told me that she is regularly facing issues regarding her motivation and therefore her productivity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-in-bursts"&gt;
  &lt;/a&gt;
  Working in bursts
&lt;/h2&gt;

&lt;p&gt;It turned out that she is often doing unpaid overtime to meet some deadlines. Usually afterwards she has a period when there is less tasks to do, but she doesn't really work less. She is losing a lot of time during those more slack periods because she is not concentrated and whatever time is left for her, she doesn't use to have a rest or to learn something new.&lt;/p&gt;

&lt;p&gt;Is there a problem with this? You might say no, but I think there is. To say the truth, it doesn't matter what I think or what you think about this. She said it's a problem to her and it's happening with her, so that's a problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#without-proper-rest-towards-a-burnout"&gt;
  &lt;/a&gt;
  Without proper rest, towards a burn-out
&lt;/h2&gt;

&lt;p&gt;The results of these long hours manifest in extra tiredness felt after the overloaded sprints, after the burst of overtimes. This makes sense, we cannot overload ourselves in the long run without paying a penalty and even in the short terms we can see some harmful effects.&lt;/p&gt;

&lt;p&gt;This is not a problem if it's handled the right way. Think about sprinters. They have to deliver extreme performance in a (few) hundred meters. But after, they get some rest. They wouldn't be able to sprint through a marathon. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x28V9N_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kw9i0otgtgcji9zyg9y8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x28V9N_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kw9i0otgtgcji9zyg9y8.jpg" alt="Bolt running and resting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's not different at work. You cannot crunch for weeks and than claim that everything is fine. It's probably OK to do a full-nighter once in a while (though I would discourage you from doing it), but you cannot work late night every day and stay mentally healthy.&lt;/p&gt;

&lt;p&gt;In fact, one of the departments I worked for had such a problem - luckily it got solved before I joined. Due to extremely bad management, people were doing overtime for long times, and of course, the productivity dropped even below. By the time they kind of finished their project, people were so much fed up with the situation that in a year everyone left. The first one was the manager and but she didn't leave voluntarily. Even that didn't save the team, it had to be rebuilt from its ashes.&lt;/p&gt;

&lt;p&gt;What my mentee is experiencing is in fact a form of burnout. A micro-burnout. After each sprint (not using the agile terms here), she experiences lack of motivation, exhaustion, lack of performance. It's not dangerous yet, she can climb back to her previous states, but if she doesn't change her attitude she can soon find herself in a situation where it will be impossible for her to come back. Or better to say to find any motivation to come back.&lt;/p&gt;

&lt;p&gt;She will eventually burn out following this pattern.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solutions"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h2&gt;

&lt;p&gt;You might argue if what I call a micro-burnout is a burnout or if it can lead to a "real burnout". I'm not a doctor of any kind. Probably you are not either. But we can agree that it's not healthy to regularly do unpaid overtime without having a clear goal in mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preserve-yourself-youre-in-a-marathon"&gt;
  &lt;/a&gt;
  Preserve yourself, you're in a marathon
&lt;/h3&gt;

&lt;p&gt;You might commit to do this for 2 years until you become a tech lead, a manager, whatever. I wouldn't advise to do so, I think there are better ways - more on that in my future book &lt;a href="https://leanpub.com/thesenioritytrap/"&gt;The Seniority Trap&lt;/a&gt; - but at least you have a plan. Most people have no plans. They work hard, because they take pride in it, because of their ego, but they have no idea where they want to end up.&lt;/p&gt;

&lt;p&gt;Working so hard without a plan simply paves the road to an early job switch at best, psychological and physical problems at worst.&lt;/p&gt;

&lt;p&gt;I remember what probably my so-far best boss used to tell one of my colleagues who used to put in a lot of overtime. "Look, Josh (not his real name), go home. I don't need someone who works so much in a day. I need someone who will be still here and work for me in a year." He nailed it. You have to find a sustainable pace to serve your team in the long run.&lt;/p&gt;

&lt;p&gt;A great manager understands this and acts proactively. A good manager understands if you tell him that you cannot keep working like that because it will harm you and eventually the team. A bad one will not understand anything like that, so you should leave.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-are-always-so-many-tasks-manage-your-expectations-manage-your-time"&gt;
  &lt;/a&gt;
  There are always so many tasks, manage your expectations, manage your time
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;We have to consider that the amount of work to be done is always more than our resources would allow us to complete. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's something we have to live with both as an individual contributor and both as a manager.&lt;/p&gt;

&lt;p&gt;If we don't understand it as a manager, we will chase away our best people one way or another. If we don't understand it as an individual contributor, we will suffer and always feel dissatisfied.&lt;/p&gt;

&lt;p&gt;I'm a firm believer that we are responsible of our state. Let it be mental, physical, financial, whatever. So before you start blaming your manager you should also consider what if it's a you problem. What if the workload is normal, but you struggle. Maybe you have to top up your skills, maybe it's about your time management skills, maybe it's projecting unreal expectations.&lt;/p&gt;

&lt;p&gt;I knew people who were technically very competent, not extremely productive people who spent significantly more time at work than the average others simply because - according to them - they had very poor time management skills. If that's the case, you should start working on those skills, there are good trainings on them. I really liked the classroom trainings of &lt;a href="https://uk.linkedin.com/in/john-b-may-b7b6821"&gt;John. B. May&lt;/a&gt;. As a start, let me share &lt;a href="https://www.sandordargo.com/blog/2018/12/05/reconquering-my-job"&gt;this summary&lt;/a&gt; with you based on John's course.&lt;/p&gt;

&lt;p&gt;Let give you a sneak peek:&lt;br&gt;
1) Mute your IM and e-mail client and check them at regular intervals. &lt;br&gt;
2) Block out uninterrupted times in your agenda. Preferably at 2 hour longs, but longer the better.&lt;br&gt;
3) Use the pomodoro technique and work for at least 25 minutes without checking anything. No e-mail, no IM, no social media, just focused work on one task.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://www.sandordargo.com/blog/2018/12/05/reconquering-my-job"&gt;Click here for more details!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#span-out-the-workload-or-vary-your-weeks"&gt;
  &lt;/a&gt;
  Span out the workload or vary your weeks
&lt;/h3&gt;

&lt;p&gt;Yet another possibility is that your workload is really just varying. E.g. for accountants it's quite usual, they have more work at certain periods of the month and of the year as well.&lt;/p&gt;

&lt;p&gt;It's fine, if you and your management can handle it properly. If one week you work 60 hours, the next week you should work 20 and take the time to recover, or maybe you can take two 30-hour weeks, if you prefer. If you have such long weeks regularly, you should make sure that you take the time for rest. But you should also examine what you could do in order to span that workload over multiple weeks and to have a balanced workload. In software development, often this is just a planning and communication issue.&lt;/p&gt;

&lt;p&gt;In case it's not and it's indeed not possible to span that work out then it's crucial to set up weeks with varying working hours. It'll not only give you time for recovery, but it will also make you more productive. As &lt;a href="https://en.wikipedia.org/wiki/Parkinson%27s_law"&gt;Parkinson's law&lt;/a&gt; says, work expands to fill the time allotted. If you have 40 hours to do 20 hours of work, for sure it will take up 40 hours. Limit it and you'll find a way to do it in 20 hours.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we explored the phenomenon of micro-burnouts. You might experience it after working very-hard for a couple of weeks or days but you don't take time to rest afterwards. Instead you just fall back to your normal hours. Repeat this cycle and it's more and more likely that you're going to experience micro-burnouts. You'll know that you have it when you experience unreasonable tiredness, demotivation and you feel that each of your tasks take too much time compared to previous experiences.&lt;/p&gt;

&lt;p&gt;How to overcome this? I don't know, but I collected a couple of techniques to prevent it!&lt;/p&gt;

&lt;p&gt;First of all, you must understand that there will be always more work to do than hours in the day. Once that sinks in, you have to prioritize and delegate your tasks (when possible) and definitely communicate the changing priorities if that affects for your team.&lt;/p&gt;

&lt;p&gt;Often, you just have to stop those churns. Maybe nobody expects you to work so much and they don't even award it. Maybe it's your own expectations or ego. Let it go.&lt;/p&gt;

&lt;p&gt;You have to think about your time management as well. It can simply be that you are slow, scattered, while technically good at the same time.&lt;/p&gt;

&lt;p&gt;If you often have longer periods of overtime followed by periods of less work, you should sit down with your boss, with your team and either try to span out the work for more equal workloads or you have to plan shorter weeks after long ones to give yourself recovery time.&lt;/p&gt;

&lt;p&gt;Have you ever experienced micro-burnouts? What did you do to overcome or to prevent them?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>watercooler</category>
      <category>mentalhealth</category>
      <category>career</category>
      <category>management</category>
    </item>
    <item>
      <title>🔴 Build Twitter Clone using HTML and CSS - Tutorial</title>
      <author>Somanath Goudar</author>
      <pubDate>Wed, 09 Jun 2021 05:00:19 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/build-twitter-clone-using-html-and-css-tutorial-aop</link>
      <guid>https://dev.to/somanathgoudar/build-twitter-clone-using-html-and-css-tutorial-aop</guid>
      <description>&lt;p&gt;Hello, Everyone. Lets Learn to build Twitter Clone using just HTML &amp;amp; CSS. I Just Love to build these to practice my HTML &amp;amp; CSS Skills. I made a tutorial video to help beginners to improve there html &amp;amp; css skills to build real world projects.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;➜ Tutorial Video:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TSsPAOmTFsM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Github:&lt;/strong&gt; &lt;a href="https://github.com/somanath-goudar/html-css-projects"&gt;https://github.com/somanath-goudar/html-css-projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA"&gt;Subscribe&lt;/a&gt; to My YouTube Channel, Tomorrow I Will also be building &lt;strong&gt;Hulu Clone&lt;/strong&gt; with just HTML &amp;amp; CSS.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;➜ You may also like my other posts:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/facebook-clone-using-just-html-css-beginners-tutorial-2fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;FACEBOOK Clone Using just HTML &amp;amp; CSS - Beginners Tutorial&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/build-a-youtube-clone-with-just-html-css-for-complete-beginners-4fk1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a YouTube Clone with just HTML &amp;amp; CSS + Responsive - For  Beginners&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ Mar 21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/build-tiktok-clone-in-just-30-mins-using-html-and-css-213l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🔴 Build TikTok Clone using HTML and CSS&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 24 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>html</category>
    </item>
    <item>
      <title>Converting ER-Diagram to Relational Model</title>
      <author>hebaShakeel</author>
      <pubDate>Wed, 09 Jun 2021 04:58:39 +0000</pubDate>
      <link>https://dev.to/hebashakeel/converting-er-diagram-to-relational-model-1h6j</link>
      <guid>https://dev.to/hebashakeel/converting-er-diagram-to-relational-model-1h6j</guid>
      <description>&lt;p&gt;&lt;strong&gt;Rule 1:&lt;/strong&gt; Conversion of an entity set into a table&lt;br&gt;
a) Representation of Strong Entity set with simple attributes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PlgAvxI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gl818w200gpx7b3j18c6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PlgAvxI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gl818w200gpx7b3j18c6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;b) Representation of Strong entity set with Composite Attributes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNk81ZLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qllykdo5u4bk7ixxdl1y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNk81ZLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qllykdo5u4bk7ixxdl1y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;c) Representation of Strong entity set with a multi-valued attribute.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ImnHANbb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrwoxvllm0anz02ghs9x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ImnHANbb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrwoxvllm0anz02ghs9x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ccTo8yFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddjzd8p41i1nm273l992.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ccTo8yFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddjzd8p41i1nm273l992.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;d) Representation of Weak entity set.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DmKNijt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2c34hwmr3cy0ov8riev4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DmKNijt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2c34hwmr3cy0ov8riev4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule 2:&lt;/strong&gt; Conversion of Relationship into Relation.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ez2C-Q45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbkmc8scx0buinugfs2j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ez2C-Q45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbkmc8scx0buinugfs2j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank You!&lt;br&gt;
See you soon again.&lt;/p&gt;

</description>
      <category>database</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>How can I encrypt my web-traffic myself?</title>
      <author>Calin Baenen</author>
      <pubDate>Wed, 09 Jun 2021 03:36:41 +0000</pubDate>
      <link>https://dev.to/baenencalin/how-can-i-encrypt-my-web-traffic-myself-4179</link>
      <guid>https://dev.to/baenencalin/how-can-i-encrypt-my-web-traffic-myself-4179</guid>
      <description>&lt;p&gt;Essentially, how can I get started writing my own VPN?&lt;br&gt;
I want to stop tracking from any (and preferably all) sources (that don't need to track me (having exceptions can be a good thing)).&lt;/p&gt;

</description>
      <category>help</category>
      <category>watercooler</category>
      <category>encryption</category>
      <category>vpn</category>
    </item>
    <item>
      <title>Tips and Tricks in Javascript</title>
      <author>Pratap Sharma</author>
      <pubDate>Wed, 09 Jun 2021 03:31:05 +0000</pubDate>
      <link>https://dev.to/pratap2210/tips-and-tricks-in-javascript-4gak</link>
      <guid>https://dev.to/pratap2210/tips-and-tricks-in-javascript-4gak</guid>
      <description>&lt;p&gt;In this article, let us cover some tips and tricks of Javascript everyone should be aware of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#convert-to-boolean"&gt;
  &lt;/a&gt;
  Convert to boolean
&lt;/h2&gt;

&lt;p&gt;All values in javascript are &lt;code&gt;truthy&lt;/code&gt; except for &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;""&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;,&lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt; and of course &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can easily switch between &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; by using the negative operator(&lt;code&gt;!&lt;/code&gt;), which also converts the type to &lt;strong&gt;boolean&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Amazing right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#convert-to-number"&gt;
  &lt;/a&gt;
  Convert to Number
&lt;/h2&gt;

&lt;p&gt;Converting to number can be easily achieved using the &lt;strong&gt;addition operator&lt;/strong&gt; (&lt;code&gt;+&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "10"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "string"&lt;/span&gt;

&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "number"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How cool is that?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-float-to-integer"&gt;
  &lt;/a&gt;
  Quick float to integer
&lt;/h2&gt;

&lt;p&gt;There are several ways to convert &lt;strong&gt;float to an integer&lt;/strong&gt; by using &lt;code&gt;Math.floor()&lt;/code&gt;, &lt;code&gt;Math.ceil()&lt;/code&gt; or &lt;code&gt;Math.round()&lt;/code&gt;, but there is also a quicker way to convert a &lt;strong&gt;float to an integer&lt;/strong&gt; by using the &lt;strong&gt;bitwise OR operator&lt;/strong&gt; (&lt;code&gt;|&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;11.5&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 11&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;11.5&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// -11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Wow! Amazing right? I started using this more frequently now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#shortcircuit-evaluation"&gt;
  &lt;/a&gt;
  Short-Circuit Evaluation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#using-ampamp"&gt;
  &lt;/a&gt;
  Using &amp;amp;&amp;amp;
&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; will return the first &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;falsy&lt;/code&gt; value. If every operand is expected to be &lt;code&gt;true&lt;/code&gt;, then the last evaluated expression will be returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-"&gt;
  &lt;/a&gt;
  Using ||
&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;||&lt;/code&gt; will return the first &lt;code&gt;true&lt;/code&gt; of &lt;code&gt;truthy&lt;/code&gt; value. If every operand is expected to be &lt;code&gt;false&lt;/code&gt;, then the last evaluated expression will be returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Short-Circuit evaluation is widely used in any programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filter-unique-values-from-an-array"&gt;
  &lt;/a&gt;
  Filter unique values from an array
&lt;/h2&gt;

&lt;p&gt;You can easily find &lt;strong&gt;unique values&lt;/strong&gt; using the &lt;code&gt;Set&lt;/code&gt; data structure. The &lt;strong&gt;Set&lt;/strong&gt; was introduced in &lt;strong&gt;ES6&lt;/strong&gt; along with the spread operator (&lt;code&gt;...&lt;/code&gt;). Let us use both the new concept to filter unique values of an array.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I know you'll use this a lot. You can thank me later. 😄&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uniqueArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uniqueArr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 1, 2, 3, 4, 5, 6 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#self-calling-function-or-iife"&gt;
  &lt;/a&gt;
  Self calling function or IIFE
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;IIFE - Immediately Invoked Function Expression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is often called as &lt;strong&gt;Self-Invoked Annonymous Function&lt;/strong&gt; or &lt;strong&gt;IIFE&lt;/strong&gt;. It is a function that executes automatically when it gets created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am running automatically&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="c1"&gt;//I am running automatically&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about &lt;strong&gt;IIFE&lt;/strong&gt; &lt;a href="https://pratapsharma.in/javascript-interview-questions/#explain-why-the-following-doesnt-work-as-an-iife-code-classlanguage-textfunction-foo-code-what-needs-to-be-changed-to-properly-make-it-an-iife"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-a-random-item-from-an-array"&gt;
  &lt;/a&gt;
  Get a random item from an array
&lt;/h2&gt;

&lt;p&gt;We can use &lt;code&gt;Math.random()&lt;/code&gt; and &lt;code&gt;Math.floor()&lt;/code&gt; methods to get a random item from an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pratap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Prasar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sudip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Shiva&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;randomName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;It is also one of the most commonly used tricks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#primitive-operations-can-be-faster-than-function-calls"&gt;
  &lt;/a&gt;
  Primitive operations can be faster than function calls
&lt;/h2&gt;

&lt;p&gt;Keep in mind that primitive operations can be faster than function calls.&lt;/p&gt;

&lt;p&gt;Instead of using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#empty-an-array"&gt;
  &lt;/a&gt;
  Empty an array
&lt;/h2&gt;

&lt;p&gt;You can empty an array using the &lt;code&gt;array.length&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dumarray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;dumarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dumarray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// []&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#to-sum-it-up"&gt;
  &lt;/a&gt;
  To sum it up
&lt;/h2&gt;

&lt;p&gt;This is it from this article. I hope I'm able to help you with top Javascript tips and tricks.&lt;/p&gt;

&lt;p&gt;💌 If you'd like to receive more tutorials in your inbox, you can sign up for the newsletter &lt;a href="https://pratap.substack.com"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please don't hesitate to drop a comment here if I miss anything. Also, let me know if I can make the post better.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tips</category>
      <category>tricks</category>
      <category>devs</category>
    </item>
    <item>
      <title>A cheat sheet for working with JSON Data in JavaScript</title>
      <author>Rahul Banerjee</author>
      <pubDate>Wed, 09 Jun 2021 02:50:16 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/a-cheat-sheet-for-working-with-json-data-in-javascript-10b5</link>
      <guid>https://dev.to/rahulbanerjee99/a-cheat-sheet-for-working-with-json-data-in-javascript-10b5</guid>
      <description>&lt;p&gt;In this article, we will be doing some common operations while working with JSON data in JavaScript&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--gPXjeb1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1400399836801736708/8CJ1eeAt_normal.png" alt="Rahul Banerjee 👨‍💻 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Rahul Banerjee 👨‍💻
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/rahulbanerjee99"&gt;@rahulbanerjee99&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Football Unites Countries ⚽️&lt;br&gt;&lt;br&gt;JSON unites programming languages { 💻 : 💯 }&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/code"&gt;#code&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies"&gt;#CodeNewbies&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Python"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:43 AM - 03 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1400297064492322821" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1400297064492322821" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1400297064492322821" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Let's assume we have a JSON file with the following data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#f00"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#0f0"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have truncated the data but it's basically a list of objects with a color and its corresponding hex value.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: I am using Node.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#reading-json-files"&gt;
  &lt;/a&gt;
  Reading JSON Files
&lt;/h3&gt;

&lt;p&gt;There are a couple of ways you could read JSON from a local file&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-require"&gt;
  &lt;/a&gt;
  Using require
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pathToJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathToJSON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-fs-and-json"&gt;
  &lt;/a&gt;
  Using fs and JSON
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pathToJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathToJson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pretty-printing-json"&gt;
  &lt;/a&gt;
  Pretty Printing JSON
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pathToJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathToJson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code snippet formats the JSON data and makes it look cleaner and easy to read.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loading-json-from-a-string"&gt;
  &lt;/a&gt;
  Loading JSON from a String
&lt;/h3&gt;

&lt;p&gt;We will use the JSON.parse() function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
[
    {
        "color": "red",
        "value": "#f00"
    },
    {
        "color": "green",
        "value": "#0f0"
    }
]
`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringJSON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#converting-objects-to-a-json-string"&gt;
  &lt;/a&gt;
  Converting Objects to a JSON String
&lt;/h3&gt;

&lt;p&gt;We will use JSON.stringify(). Below are some commonly formatted data you can convert to a JSON string.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#object"&gt;
  &lt;/a&gt;
  Object
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#array-of-objects"&gt;
  &lt;/a&gt;
  Array of Objects
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dictionary1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dictionary2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dictionary3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#object-of-objects"&gt;
  &lt;/a&gt;
  Object of Objects
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dictionary1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dictionary2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dictionary3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#array-of-arrays"&gt;
  &lt;/a&gt;
  Array of Arrays
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;helo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;python&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#saving-json-data-into-a-file"&gt;
  &lt;/a&gt;
  Saving JSON data into a file
&lt;/h3&gt;

&lt;p&gt;The data will be converted to a JSON string using JSON.stringify() and then stored in a file. If the file doesn't exist, it will create a new file. If the file does exist, it will overwrite the data in the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dictionary1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dictionary2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dictionary3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;outputData.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parsing-json"&gt;
  &lt;/a&gt;
  Parsing JSON
&lt;/h3&gt;

&lt;p&gt;Parsing a JSON file depends on the format of the data, it could be a simple object, an array of objects, etc. The logic to parse JSON data will vary case by case. The syntax is the one we follow while traversing arrays or objects. The following code snippets might be helpful. In most cases, you will have to use some combination of the below cases.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parsing-json-stored-as-an-object"&gt;
  &lt;/a&gt;
  Parsing JSON stored as an object
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
    DATA FORMAT
    {  
         "key1" : "value1", 
        "key2" : "value2",
        "key3" : "value3"
    }
 */&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#parsing-json-stored-as-a-list-of-dictionaries"&gt;
  &lt;/a&gt;
  Parsing JSON stored as a list of dictionaries
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
    DATA FORMAT
    [
        { "dictionary1" : "value1"},
        { "dictionary2" : "value2"},
        { "dictionary3" : "value3"}
    ]
 */&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#parsing-json-stored-as-a-dictionary-of-dictionaries"&gt;
  &lt;/a&gt;
  Parsing JSON stored as a dictionary of dictionaries
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
    DATA FORMAT
    {
        "dictionary1" : {"key1" : "value1"},
        "dictionary2" : {"key2" : "value2"},
        "dictionary3" : {"key3" : "value3"}
    }
 */&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#parsing-json-stored-as-a-list-of-lists"&gt;
  &lt;/a&gt;
  Parsing JSON stored as a list of lists
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
    DATA FORMAT
    [
        [1,2,3,4],
        ["helo" , "world" , "python"]
    ]
 */&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#json-data-transformation"&gt;
  &lt;/a&gt;
  JSON Data Transformation
&lt;/h3&gt;

&lt;p&gt;In the below sections we will transform some JSON Data and store it in a new file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cy3X8uP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622925689137/5eFY_QMIA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cy3X8uP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622925689137/5eFY_QMIA.png" alt="UntitledCASE1.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./outputData.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Saved Data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#case2-dictionary-of-dictionaries-to-a-list-of-dictionaries"&gt;
  &lt;/a&gt;
  Case2: Dictionary of Dictionaries to a List of Dictionaries
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s625Jqss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622927518228/urJ51QxIb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s625Jqss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622927518228/urJ51QxIb.png" alt="UntitledCASE2.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./outputData.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Saved Data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#case3-list-of-dictionaries-to-a-list-of-lists"&gt;
  &lt;/a&gt;
  Case3: List of Dictionaries to a List of Lists
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNd6nTJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622928048461/rp7J1UqSe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNd6nTJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622928048461/rp7J1UqSe.png" alt="UntitledCASE3.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./outputData.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Saved Data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;&lt;p&gt;Connect with me on &lt;a href="https://www.linkedin.com/in/rahulbanerjee2699/" rel="noreferrer noopener"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/rahulbanerjee99" rel="noreferrer noopener"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>AWS Amplify AppSync GraphQL custom resolver examples</title>
      <author>Yinlin Chen</author>
      <pubDate>Wed, 09 Jun 2021 02:39:22 +0000</pubDate>
      <link>https://dev.to/yinlinchen/aws-amplify-appsync-graphql-custom-resolver-examples-1ek4</link>
      <guid>https://dev.to/yinlinchen/aws-amplify-appsync-graphql-custom-resolver-examples-1ek4</guid>
      <description>&lt;p&gt;AWS Amplify is great! It handles AppSync backend with AWS resources, like DynamoDB, ElasticSearch, etc for you. However, sometimes these default generated GraphQL schema and resolvers are not fulfill our business need. We create an &lt;a href="https://github.com/yinlinchen/amplify-appsync-graphql"&gt;Amplify Appsync GraphQL&lt;/a&gt; GitHub repo to document some of the custom AppSync Resolver.&lt;/p&gt;

&lt;p&gt;There are three steps to create your custom resolvers using AWS Amplify CLI&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Step1: Add custom type to the schema&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add custom &lt;code&gt;Query&lt;/code&gt;, &lt;code&gt;Mutation&lt;/code&gt; or &lt;code&gt;Subscription&lt;/code&gt; type to your schema.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Step2: Create custom resolver template&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Request and response template should be located in &lt;code&gt;&amp;lt;project-root&amp;gt;/amplify/backend/api/&amp;lt;api-name&amp;gt;/resolvers&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Graphql Transformer follows &lt;code&gt;&amp;lt;TypeName&amp;gt;.&amp;lt;FieldName&amp;gt;.&amp;lt;req/res&amp;gt;.vlt&lt;/code&gt; as convention to name the resolvers.

&lt;ul&gt;
&lt;li&gt;Request template: &lt;code&gt;Query.myCustomQuery.req.vtl&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Response template: &lt;code&gt;Query.myCustomQuery.res.vtl&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Step3: Add resolvers resource by creating a custom stack&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; By default, there is a file called &lt;code&gt;CustomResources.json&lt;/code&gt; in &lt;code&gt;&amp;lt;project-root&amp;gt;/amplify/backend/api/&amp;lt;api-name&amp;gt;/stacks&lt;/code&gt; directory of your API.&lt;/li&gt;
&lt;li&gt;Example: &lt;a href="//examples/CustomResource.json"&gt;CustomResource.json&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, we provides these examples:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/yinlinchen/amplify-appsync-graphql/blob/master/docs/basic.md"&gt;Basic models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yinlinchen/amplify-appsync-graphql/blob/master/docs/search.md"&gt;Enable basic search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yinlinchen/amplify-appsync-graphql/blob/master/docs/fuzzysearch.md"&gt;Fuzzy search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yinlinchen/amplify-appsync-graphql/blob/master/docs/interfacetype.md"&gt;Query for Interface type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yinlinchen/amplify-appsync-graphql/blob/master/docs/andoroperation.md"&gt;Search with AND/OR operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yinlinchen/amplify-appsync-graphql/blob/master/docs/multifields.md"&gt;Multi-fields search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yinlinchen/amplify-appsync-graphql/blob/master/docs/searchableinput.md"&gt;Custom searchable input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yinlinchen/amplify-appsync-graphql/blob/master/docs/uniontype.md"&gt;Query for Union type&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can deploy the entire example app here:&lt;br&gt;
&lt;a href="https://console.aws.amazon.com/amplify/home#/deploy?repo=https://github.com/yinlinchen/amplify-appsync-graphql"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ubBy37ks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://oneclick.amplifyapp.com/button.svg" alt="amplifybutton"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We hopes these examples help! Please feel free to contribute more custom examples to us and make it better!&lt;/p&gt;

</description>
      <category>amplify</category>
      <category>aws</category>
      <category>graphql</category>
      <category>appsync</category>
    </item>
    <item>
      <title>FutureBuilder and StreamBuilder in Flutter </title>
      <author>Yohan Malshika</author>
      <pubDate>Wed, 09 Jun 2021 02:17:32 +0000</pubDate>
      <link>https://dev.to/yohanym95/futurebuilder-and-streambuilder-in-flutter-g6m</link>
      <guid>https://dev.to/yohanym95/futurebuilder-and-streambuilder-in-flutter-g6m</guid>
      <description>&lt;p&gt;Hi All, Hope you are all doing well. Today I am planning to tell you about FutureBuilder and StreamBuilder widgets in Flutter.&lt;/p&gt;

&lt;p&gt;In this article, I will tell you,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FutureBuilder widget&lt;/li&gt;
&lt;li&gt;How to use FutureBuilder Widget&lt;/li&gt;
&lt;li&gt;StreamBuilder widget&lt;/li&gt;
&lt;li&gt;How to use StreamBuilder Widget&lt;/li&gt;
&lt;li&gt;Difference between FutureBuilder and StreamBuilder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the FutureBuilder widget in Flutter?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FutureBuilder is a widget that uses Future operations which easily determine the current state of the Future and you can choose what to show when the data is loading and when it is available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use the FutureBuilder widget?&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';

class FutureBuilderTest extends StatefulWidget {
  @override
  _FutureBuilderTestState createState() =&amp;gt; _FutureBuilderTestState();
}

class _FutureBuilderTestState extends State&amp;lt;FutureBuilderTest&amp;gt; {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter 101'),
      ),
      body: Container(
        child: FutureBuilder(
          future:
              FirebaseDatabase.instance.reference().child("Examples").once(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.done) {
              return Example(snapshot.data);
            }else{
              return CircularProgressIndicator();
            }
          },
        ),
      ),
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the above example for the FutureBuilder widget. In that example, I retrieve data from the firebase real-time database and by using the FutureBuilder Widget. Because it uses the Future operation.&lt;/p&gt;

&lt;p&gt;FutureBuilder requires 2 parameters,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;future&lt;/strong&gt;: A method that returns a future object&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;builder&lt;/strong&gt;: widgets that will be returned during different states of a future builder.&lt;/p&gt;

&lt;p&gt;As well as there is another parameter called the &lt;strong&gt;initialData&lt;/strong&gt;. we can use it as a default value until and unless we get the value from the future.&lt;/p&gt;

&lt;p&gt;Also, you can see we can load any widget while loading the data, and also we can handle load any widget or handle it when the snapshot has any error by using the &lt;strong&gt;snapshot.hasError&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (snapshot.connectionState == ConnectionState.done) {
  if(snapshot.hasError){
     return SomethingWentWrong();
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What is the StreamBuilder widget in Flutter?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;StreamBuilder is a widget that uses stream operations and basically, it rebuilds its UI when it gets the new values that are passed via Stream it listens to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use StreamBuilder widget in flutter?&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';

class StreamBuilderTest extends StatefulWidget {
  @override
  _StreamBuilderTestState createState() =&amp;gt; _StreamBuilderTestState();
}

class _StreamBuilderTestState extends State&amp;lt;StreamBuilderTest&amp;gt; {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter 101'),
      ),
      body: Container(
        child: StreamBuilder(
          stream: FirebaseDatabase.instance
              .reference()
              .child("Examples")
              .once()
              .asStream(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.done) {
              return Example(snapshot.data);
            }else{
              return CircularProgressIndicator();
            }
          },
        ),
      ),
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;StreamBuilder requires 2 parameters,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;stream&lt;/strong&gt;: A method that returns a stream object&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;builder&lt;/strong&gt;: widgets that will be returned during different states of a streambuilder.&lt;/p&gt;

&lt;p&gt;As well as there is another parameter called the &lt;strong&gt;initialData&lt;/strong&gt; like intialData parameter in FutureBuilder. we can use it as a default value until and unless we get the value from the stream.&lt;/p&gt;

&lt;p&gt;As I mentioned before, we can load any widget while loading the data, and also we can handle load any widget or handle it when the snapshot has any error by using the &lt;strong&gt;snapshot.hasError&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And Also you can see FutureBuilder and StreamBuilder using the &lt;strong&gt;AsyncSnapshot&lt;/strong&gt;. What is that?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AsyncSnapshot is a class that wraps the latest received data from the stream or future objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Difference between FutureBuilder and StreamBuilder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Basically, StreamBuilder and FutureBuilder have the same behavior and they listen to changes on their respective object(Future and Stream). But their difference comes with how they listen to &lt;strong&gt;async calls&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When we use FutureBuilder, it has only one response. because it uses the Future object and Future has one and only one response. Basically, Future is used to handle HTTP requests. So we listen on a Future is its state. when it’s done or had an error, that’s it.&lt;/p&gt;

&lt;p&gt;When we use StreamBuilder, it uses stream object, and stream like a pipe, when you put a value on the one end and if there is a listener on the other hand it will receive the value that you put. It usually is the representation of web-sockets or events (such as click). By listening to a &lt;code&gt;Stream&lt;/code&gt; you'll get each new value and also if the &lt;code&gt;Stream&lt;/code&gt; had an error or completed.&lt;/p&gt;

&lt;p&gt;So That’s it for today. I think you learned something new from my article.&lt;/p&gt;

&lt;p&gt;See you again soon with another article !!&lt;/p&gt;

&lt;p&gt;Happy Coding 👽!!!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>tutorial</category>
      <category>dart</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Understanding Cross-Site Request Forgery (CSRF or XSRF)</title>
      <author>Danilo César</author>
      <pubDate>Wed, 09 Jun 2021 01:14:31 +0000</pubDate>
      <link>https://dev.to/danilo/understanding-cross-site-request-forgery-csrf-or-xsrf-3d95</link>
      <guid>https://dev.to/danilo/understanding-cross-site-request-forgery-csrf-or-xsrf-3d95</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is also available in the following languages: &lt;a href="https://danilocsar.medium.com/entendendo-cross-site-request-forgery-csrf-ou-xsrf-1a5f2ed35a0d"&gt;Portuguese&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;On the last article we have learned how we can prevent some&lt;/em&gt; Cross-Site Scripting &lt;em&gt;(XSS) attacks by using proper sanitization techniques on our web server. Now, let's take a look at another vulnerability that also can cause problems on web pages that are not complying with the adequate security methods.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 If you did not read the previous article on this series, “&lt;a href="https://dev.to/danilo/secure-get-and-post-requests-using-php-k50"&gt;Secure GET and POST requests using PHP&lt;/a&gt;”, I suggest you to do, as some knowledge on what are &lt;em&gt;HTTP Requests&lt;/em&gt;, and how they do work, may be required in order to understand the following concepts — and, also, it can help you to increase your webpages' security.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Let's investigate another one of the most common web vulnerabilities: the &lt;em&gt;Cross-Site Request Forgery&lt;/em&gt; (CSRF), that tricks unwary users by making them execute unwanted actions on other web pages that they are already authenticated.&lt;/p&gt;

&lt;p&gt;For a better illustration on the problem, let's suppose this scenario: you are logged in on your bank's account, which web server is not aware of best practices on web development; you noticed a strange transaction involving a person or a company you never heard about; on another browser's tab, you search for their name, and accessed their website. Now, even if you did not authenticate or connect to your bank's account into this unknown web page, and did not use a (secure) third-party challenge-response systems, our fictional malicious web page may already change your password, transferred your funds, or made a purchase using your credentials.&lt;/p&gt;

&lt;p&gt;Sounds scary, right? Even that most modern browsers are committed to create “sandboxes” and limiting cookies' usage that are not on same-site's policy, there are many users on the world wide web using outdated web browsers, and clicking on every link that pops up on their monitors — most of them claiming that the user is a winner for entering the site on this specific date and time, or for completing a survey that they did not even hear about.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYX-ldPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623200215957/q010wJ8jR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYX-ldPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623200215957/q010wJ8jR.png" alt="Entrepreneur in Tin Can with String - Vector Image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tin can conversation. Designed by &lt;a href="https://www.wannapik.com"&gt;Wannapik&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the past, some of the most accessed websites on the internet had suffered some sort of attacks related to CSRF, like &lt;a href="http://www.internetnews.com/security/article.php/3835596/Facebook+Hit+by+CrossSite+Request+Forgery+Attack.htm"&gt;Facebook&lt;/a&gt;, &lt;a href="http://blog.internetnews.com/skerner/2008/02/black-hat-netflix-csrf-vulnera.html"&gt;Netflix&lt;/a&gt;, &lt;a href="http://www.internetnews.com/security/article.php/3717106"&gt;Gmail&lt;/a&gt;, &lt;a href="https://people.eecs.berkeley.edu/~daw/teaching/cs261-f11/reading/csrf.pdf"&gt;YouTube, and the New York Times&lt;/a&gt;, but also web applications, such as &lt;a href="http://blog.internetnews.com/skerner/2009/04/mozilla-firefox-309-fixes-xss.html"&gt;Mozilla Firefox&lt;/a&gt; and the &lt;a href="http://www.internetnews.com/security/article.php/3777276/Apple+Updates+to+Fix+Open+Source+Security+Issues.htm"&gt;Apache HTTP Server&lt;/a&gt;. According to &lt;a href="https://people.eecs.berkeley.edu/~daw/teaching/cs261-f11/reading/csrf.pdf"&gt;this paper&lt;/a&gt;, many of them have already solved the problems, and others, thanks to the open developer community, fixed it as well.&lt;/p&gt;

&lt;p&gt;By performing unwanted functions on legitimate user's session, those bad agents use &lt;em&gt;their&lt;/em&gt; web links to initiate any arbitrary action they want on &lt;em&gt;our&lt;/em&gt; website, which had already validated user's session cookie, and have it stored. That's the worst part on XSRF attack: it does not solely rely on the website's administrator behalf, it depends on how browsers work, and on users' behavior too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-csrf-works"&gt;
  &lt;/a&gt;
  How CSRF works
&lt;/h2&gt;

&lt;p&gt;Let's revisit our example of the malicious page that performed an attack without the user's knowledge.&lt;/p&gt;

&lt;p&gt;The first condition to the CSRF attack successfully works is a situation where the legitimate user is logged in on a trustful website, by keeping a session information such as &lt;em&gt;HTTP Cookies&lt;/em&gt;, that also ensures shorthand verification of the users' credentials, so they don't need to inform their username and password on every request to the web server.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"&gt;MDN Web Docs&lt;/a&gt;, &lt;em&gt;HTTP&lt;/em&gt; Cookies are typically used to tell if two requests came from the same browser. Also, they remember stateful information for the stateless &lt;em&gt;HTTP&lt;/em&gt; protocol, or encrypted &lt;em&gt;HTTPS&lt;/em&gt; protocol.&lt;/p&gt;

&lt;p&gt;The second condition is a request coming from a malicious website that makes the user's browser send a request to the web server where the user is previously authenticated, by doing a &lt;em&gt;GET&lt;/em&gt; or &lt;em&gt;POST&lt;/em&gt; request. It can be done, for example, by creating a web form, using HTML, whose target page is an unsecure web page on the trustful server.&lt;/p&gt;

&lt;p&gt;In simple terms, the &lt;em&gt;Cross-Site Request Forgery&lt;/em&gt; (CSRF) attack forges the request that is being sent to a trustful web server, so it is “crossing sites”. The following figure explains how does the CSRF attack work: the attacking site uses the users' authenticated session on the web browser in order to execute a trusted action on a trusted website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_hep-KU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623200278583/do7nHydAP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_hep-KU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623200278583/do7nHydAP.png" alt="souza2009.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Image: Souza, 2009.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the purposes of this article, we will not cover this method on real-world applications, as our goal is not exploit any service, but, instead, to develop better implementations for the web.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-1-http-post-method"&gt;
  &lt;/a&gt;
  Example #1: &lt;em&gt;HTTP POST&lt;/em&gt; method
&lt;/h3&gt;

&lt;p&gt;If the target page isn't CSRF-protected, those bad agents can successfully do whatever they want using the user's credentials. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"evil-form"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"http://my.trustful.bank/transfer?amount=123&amp;amp;account=stevie"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click here&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, assume the page does really exist on the internet, and so the &lt;code&gt;trustful.bank&lt;/code&gt; uses an &lt;em&gt;HTTP&lt;/em&gt; request to send the amount of &lt;code&gt;123&lt;/code&gt; dollars to a client identified as &lt;code&gt;stevie&lt;/code&gt;, on the page &lt;code&gt;/transfer-funds&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 This is not a good practice, so I am sure your (real) bank is secure, and protected against it. If they are not, like any other web server, the consequences would be devastating, and it may cause some legal issues, as they wouldn't be complying with most of the Data Privacy and Protection Regulations, such as &lt;a href="https://en.wikipedia.org/wiki/General_Data_Protection_Regulation"&gt;GDPR 🇪🇺&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/General_Personal_Data_Protection_Law"&gt;LGPD 🇧🇷&lt;/a&gt;, nowadays.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#example-2-automatic-behavior"&gt;
  &lt;/a&gt;
  Example #2: Automatic behavior
&lt;/h3&gt;

&lt;p&gt;Those bad agents don't even need the user directly interacting with the submit button in order to achieve the sending result. They could, for example, change it to an &lt;code&gt;onload&lt;/code&gt; event that fires whenever the user's browser renders the page, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;onload=&lt;/span&gt;&lt;span class="s"&gt;"document.getElementById('evil-form').submit();"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"evil-form"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"http://my.trustful.bank/transfer"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"account"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"stevie"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"amount"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click here&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, many web servers allow both &lt;em&gt;HTTP&lt;/em&gt; &lt;em&gt;GET&lt;/em&gt; and &lt;em&gt;POST&lt;/em&gt; requests, so CSRF attacks could probably work on both of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-3-without-web-forms"&gt;
  &lt;/a&gt;
  Example #3: Without web forms
&lt;/h3&gt;

&lt;p&gt;It goes even worse, as bad agents are not limited to the HTML web forms. They can use, for example, a simple &lt;code&gt;img&lt;/code&gt; tag, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://my.trustful.bank/transfer?amount=123&amp;amp;to=stevie"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This attack can also force a user to follow a redirection, by inserting it on the &lt;code&gt;httpd.conf&lt;/code&gt; or &lt;code&gt;.htaccess&lt;/code&gt; file on their web server, like this examples taken from “&lt;a href="https://www.amazon.com/XSS-Attacks-Scripting-Exploits-Defense/dp/1597491543"&gt;XSS Attacks: Cross Site Scripting Exploits and Defense&lt;/a&gt;” (2007) book:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;Redirect 302 /a.jpg https://somebank.com/transferfunds.asp?amnt=1000000&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;acct=123456
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would produce a request as the following one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /a.jpg HTTP/1.0
Host: ha.ckers.org
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3
Accept: image/png,*/*;q=0.5
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Proxy-Connection: keep-alive
Referer: http://somebank.com/board.asp?id=692381
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the following server response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTP/1.1 302 Found
Date: Fri, 23 Mar 2007 18:22:07 GMT
Server: Apache
Location: https://somebank.com/transferfunds.asp?amnt=1000000&amp;amp;acct=123456
Content-Length: 251
Connection: close
Content-Type: text/html; charset=iso-8859-1

&amp;lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&amp;gt;
&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;302 Found&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Found&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;The document has moved &amp;lt;a href="https://somebank.com/transferfunds.asp?amnt=1000000&amp;amp;amp;acct=123456"&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, whenever the web browser performs the redirection, it will follow back to the informed location with the &lt;em&gt;HTTP Cookies&lt;/em&gt; intact, but the referring &lt;em&gt;URL&lt;/em&gt; may not change to the redirection page, what makes it even worse, because the user may not easily detect on referring *URL*s.&lt;/p&gt;

&lt;p&gt;Who could imagine a single line could cause so much trouble, right? So, please remember: internet security is never too much, so there is always something new to learn and to apply.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#csrf-andor-xss-attacks"&gt;
  &lt;/a&gt;
  CSRF and/or XSS attacks
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Cross-Site Scripting&lt;/em&gt; (XSS) and the &lt;em&gt;Cross-Site Request Forgery&lt;/em&gt; (CSRF) attacks share some things in common, but they are not the same. Also, they can be used and implemented together.&lt;/p&gt;

&lt;p&gt;An example of this combination was the “&lt;a href="https://www.vice.com/en/article/wnjwb4/the-myspace-worm-that-changed-the-internet-forever"&gt;MySpace Worm&lt;/a&gt;” (also known as “Samy worm”, or “JS.Spacehero worm”), developed by Samy Kamkar, then a 19-year-old developer, in 2005, who created a script by adding a few words that infected some people's profiles to make him friends with, on this social network, but then quickly spread out of control, and he hit almost a million friend requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QUaEHk29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623200307528/6mMJhlguu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QUaEHk29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623200307528/6mMJhlguu.png" alt="myspace_from_vice.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Part of Kamkar's MySpace profile showing how many friends he had after his script, on 2005. Image: &lt;a href="https://www.vice.com/en/article/wnjwb4/the-myspace-worm-that-changed-the-internet-forever"&gt;VICE&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although its attack was ultimately harmless, a bad agent could have injected malicious code that would compromised the whole web server, if no one had noticed or taken the threat seriously.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 The &lt;em&gt;Cross-Site Request Forgery&lt;/em&gt; is also known as XSRF, as well as CSRF, following the acronym for &lt;em&gt;Cross-Site Scripting&lt;/em&gt; (XSS). The probable reason for this one is to avoid the confusion with &lt;em&gt;Cascading Style Sheets&lt;/em&gt;, used for stylize web pages, whose acronym is CSS too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-prevent-csrf-attacks"&gt;
  &lt;/a&gt;
  How to prevent CSRF attacks
&lt;/h2&gt;

&lt;p&gt;So, how we can prevent CSRF attacks? There are some things we need to do:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-keep-your-web-browsers-uptodate"&gt;
  &lt;/a&gt;
  1. Keep your web browsers up-to-date
&lt;/h3&gt;

&lt;p&gt;You'd be surprised on how many users are still using outdated web browsers and applications on their daily basis. The reasons for it are uncountable, such as the lack of information (on how to do it, and why), the compatibility with a specific version (there are many situations where the retro-compatibility doesn't exist), or even the specifications of their contracts on their companies' behalf — and I am not talking just about web browsers.&lt;/p&gt;

&lt;p&gt;As a user, the first measure to take is to keep your web browser updated to the latest version. The most used applications make use of &lt;a href="https://webkit.org/"&gt;WebKit&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Gecko"&gt;Gecko&lt;/a&gt;, or other browser engine, that has been currently developed and supported by the open community of developers. They are aware of these issues, and committed to solving these problems in a short term. Some of these companies behind major web browsers also have “bug bounty programs”, so they reward security researchers who can find a unique bug that may compromise user's data and privacy.&lt;/p&gt;

&lt;p&gt;If you are a developer, you should alert your users that outdated application may cause some problems, including CSRF attacks, and they may be exposing their personal data to bad agents on the internet. As a bonus, this practice helps you to deliver better user experience, as updated browsers also include new functions and APIs that enhances the usability on many websites.&lt;/p&gt;

&lt;p&gt;By the way, recently, &lt;a href="https://blog.google/products/ads-commerce/2021-01-privacy-sandbox/"&gt;Google&lt;/a&gt; and &lt;a href="https://hacks.mozilla.org/2020/08/changes-to-samesite-cookie-behavior/"&gt;Mozilla&lt;/a&gt; have announced several improvements on the security of their browsers engines, such as the “privacy sandbox”, better &lt;em&gt;HTTP Cookies&lt;/em&gt; policies, and JavaScript blocking mechanisms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-check-the-http-referrer-header"&gt;
  &lt;/a&gt;
  2. Check the HTTP Referrer header
&lt;/h3&gt;

&lt;p&gt;Most requests on modern web browser include two metadata that can help us to validate where the source is: the &lt;code&gt;Origin&lt;/code&gt; and the &lt;code&gt;Referrer&lt;/code&gt; header information.&lt;/p&gt;

&lt;p&gt;As a developer, you can check whenever a request is made to your web server if the &lt;code&gt;Origin&lt;/code&gt; and &lt;code&gt;Referrer&lt;/code&gt; header data came from the same site. If it does not, you can ignore it, and don't proceed any functions from this &lt;code&gt;Origin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, there are few situations that it won't be possible, and you may potentially block legitimate requests coming from users behind a corporate &lt;em&gt;proxy&lt;/em&gt; or other similar features. Also, there are many ways to forge these headers' information, therefore many authors say it could be not the best way to protect web servers from CSRF attacks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-implement-samesite-attribute"&gt;
  &lt;/a&gt;
  3. Implement SameSite attribute
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;SameSite&lt;/code&gt; attribute (&lt;a href="https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-02"&gt;RFC6265bis&lt;/a&gt;) can really help us by mitigating CSRF attack, because an unauthorized website would not complete their request into our web server if they're using a cross-site request.&lt;/p&gt;

&lt;p&gt;In order to make our &lt;em&gt;HTTP&lt;/em&gt; Cookies restricted to the same-site location, we can implement this attribute by setting it to the &lt;em&gt;HTTP&lt;/em&gt; response header. So, our &lt;em&gt;HTTP&lt;/em&gt; Cookie can be restricted to a first-party or same-site context. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Set-Cookie: TOKEN=1bf3dea9fbe265e40d3f9595f2239103; Path=/; SameSite=lax
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;According to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite"&gt;MDN Web Docs&lt;/a&gt;, the &lt;code&gt;SameSite&lt;/code&gt; attribute can accept one of three values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Lax&lt;/strong&gt; — default if the &lt;code&gt;SameSite&lt;/code&gt; attribute is not specified; &lt;em&gt;HTTP Cookies&lt;/em&gt; can be sent when the user navigates to the cookie's origin site. They are not sent on normal cross-site subrequests (for example, to load images or frames into a third party site), but are sent when a user is navigating to the origin site (for example, when following a link).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;None&lt;/strong&gt; — &lt;em&gt;HTTP Cookies&lt;/em&gt; will be sent in all contexts, and can be sent on both originating and cross-site requests. This should only be used in secure contexts, like when the &lt;code&gt;Secure&lt;/code&gt; attribute is also set;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Strict&lt;/strong&gt; — &lt;em&gt;HTTP Cookies&lt;/em&gt; can be only to the same site as the one that originated it.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 If you're dealing with personal sensitive data, such as the ones used for users' authentication, on your web server, you should set a short lifetime for the &lt;em&gt;HTTP Cookies&lt;/em&gt;. Also, you should set the &lt;code&gt;SameSite&lt;/code&gt; attribute to &lt;code&gt;Strict&lt;/code&gt; or &lt;code&gt;Lax&lt;/code&gt;, so an unauthenticated request would not be effectively served to the web server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notice that you should use the &lt;code&gt;SameSite&lt;/code&gt; attribute along with an &lt;em&gt;anti-CSRF token&lt;/em&gt;, as some &lt;em&gt;HTTP Requests&lt;/em&gt;, specially the &lt;em&gt;GET&lt;/em&gt;, &lt;em&gt;HEAD&lt;/em&gt; and &lt;em&gt;POST&lt;/em&gt; methods, will be executed even if the request was not allowed, in some circumstances, and should return an &lt;em&gt;HTTP&lt;/em&gt; error code in response. Anyway, a simple request was made and &lt;a href="https://stackoverflow.com/a/67020180"&gt;executed on the server-side&lt;/a&gt;. Fortunately, there are other ways to solve this, like using along with a random value generated by a complex and secure mathematical method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-add-random-tokens"&gt;
  &lt;/a&gt;
  4. Add random tokens
&lt;/h3&gt;

&lt;p&gt;One of the most common methods of CSRF mitigation is by using an &lt;em&gt;anti-CSRF token&lt;/em&gt;, a random, secret, and unique token sent on requests to the web server. Whenever the request is made, the web server could check for this data: if they match, then it is allowed to continue with the processing; if they not, then the request can be rejected.&lt;/p&gt;

&lt;p&gt;This token can be generated for each request, stored on the web server, and then inserted on the client's request — directly on the web form, or attached to the &lt;em&gt;HTTP&lt;/em&gt; request —, so it will be possible to detect requests from unauthorized locations to our web server.&lt;/p&gt;

&lt;p&gt;The bad agents can't read the token, if used along with the &lt;code&gt;SameSite&lt;/code&gt; attribute, and they can't proceed in any function on our website if they don't have the token matching to the one the web server previously set to this specific request.&lt;/p&gt;

&lt;p&gt;This can be done by specifying an &lt;em&gt;anti-CSRF token&lt;/em&gt;, on the same site as the trustful server, and including it to a new HTML web form, like the following one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"good-form"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"http://my.trustful.bank/transfer"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"token"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1bf3dea9fbe265e40d3f9595f2239103"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"account"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"stevie"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"amount"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the client-side, we can set an &lt;em&gt;anti-CSRF token&lt;/em&gt; in PHP, like this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'token'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bin2hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;random_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 1bf3dea9fbe265e40d3f9595f2239103&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Still on the client-side, if we are using JavaScript, we can add an &lt;em&gt;anti-CSRF token&lt;/em&gt;, and send it as an &lt;em&gt;X-Header&lt;/em&gt; information on a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"&gt;XMLHttpRequest&lt;/a&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;readCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TOKEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                       &lt;span class="c1"&gt;// Get the HTTP Cookie that we previously set, identified as "TOKEN"&lt;/span&gt;
&lt;span class="nx"&gt;httpRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-CSRF-Token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Then, send it as an "X-CSRF-Token" header information&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps 🚶
&lt;/h2&gt;

&lt;p&gt;As mentioned before, internet security is never too much, so there is always something more to learn and apply. In order to build safer applications, be sure to follow the next article on this series, and read the further references to get more details about the best practices on web development.&lt;/p&gt;

&lt;p&gt;If you have any questions or suggestions on how to build more secure applications, share it in the comments. 📣&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;[1] Zeller, W., &amp;amp; Felten, E. W. (2008). Cross-site request forgeries: Exploitation and prevention. Bericht, Princeton University. &lt;a href="https://www.cs.memphis.edu/~kanyang/COMP4420/reading/csrf.pdf"&gt;https://www.cs.memphis.edu/~kanyang/COMP4420/reading/csrf.pdf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[2] Souza, J. (2009). Cross-Site Scripting &amp;amp; Cross-Site Request Forgery. Brasília, Universidade de Brasília. &lt;a href="https://cic.unb.br/~rezende/trabs/johnny.pdf"&gt;https://cic.unb.br/~rezende/trabs/johnny.pdf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[3] Seth Fogie, Jeremiah Grossman, Robert Hansen, Anton Rager, and Petko D. Petkov. XSS Attacks: Cross Site Scripting Exploits and Defense. Syngress, 2007.&lt;/p&gt;

&lt;p&gt;[4] "Cross-Site Request Forgeries and You", from &lt;em&gt;Coding Horror&lt;/em&gt;: &lt;a href="https://blog.codinghorror.com/cross-site-request-forgeries-and-you/"&gt;https://blog.codinghorror.com/cross-site-request-forgeries-and-you/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[5] "Using HTTP cookies", from &lt;em&gt;MDN Web Docs&lt;/em&gt; (Mozilla Developer Network): &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[6] "CSRF", from &lt;em&gt;MDN Web Docs&lt;/em&gt; (Mozilla Developer Network): &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/CSRF"&gt;https://developer.mozilla.org/en-US/docs/Glossary/CSRF&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>php</category>
    </item>
    <item>
      <title>What is the value of learning to learn in AWS</title>
      <author>Christopher Thompson H.</author>
      <pubDate>Wed, 09 Jun 2021 01:07:23 +0000</pubDate>
      <link>https://dev.to/aws-builders/what-is-the-value-of-learning-to-learn-in-aws-1dbm</link>
      <guid>https://dev.to/aws-builders/what-is-the-value-of-learning-to-learn-in-aws-1dbm</guid>
      <description>&lt;p&gt;Human beings learn to modify their skills and abilities through observation, practice or reasoning. This is called &lt;strong&gt;"learning"&lt;/strong&gt;. In simple words, from a young age we learn to acquire knowledge so as not to make the same mistakes twice, or to simply be better people.&lt;/p&gt;

&lt;p&gt;Approaching this concept from the world of work, it is very common at the beginning of our career to leave a university or in the course of it to leave wanting to apply what you have learned over many years of effort. However, when you leave a world of learning what the study of a profession is like, you enter a deeper and more intriguing one, realizing that what you know is only 1% of what you could know, and that in reality everything is more challenging to how they taught it to you.&lt;/p&gt;

&lt;p&gt;Depending on where you arrive, it will be partly how you develop or how you learn to learn. Yes, I said "learn to learn." Your first job will be essential to know how to develop your skills or start your ninja path. However, this is a double-edged sword. Why learning to learn can be a double-edged sword? It is simple. &lt;strong&gt;If you learn the wrong way, then it will be much more difficult for you to adjust to the real world when you leave that job&lt;/strong&gt;. I'm telling you because I was about to fall down that road. That is why I will teach you how to detect it in time and how to take the right path.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-one-learn-to-be-your-own-center"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step One: Learn to Be Your Own Center&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;One of the hardest things when you're inexperienced, rookie, young Padawan, inexperienced licensed professional, enthusiastic youth, or how you put yourself on your resume, is to question the why of things. This is because if we are arriving as inexperienced we will need to observe others how they solve problems or how they face them (Learn from them).  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jOo7ytX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wk3j36t2dtojsmap16xv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOo7ytX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wk3j36t2dtojsmap16xv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over the years this idea has been mutating due to generational changes that have occurred. It can occur in different situations in the working world, for example: When a leader or boss tells you to start a task, and details the problem, reason, but never tells you how to solve it and only tells you "Solve it for tomorrow." Vualah! This is a clear clue that it will not be a guided path and it will be a path where you will have to figure out how to solve or fulfill that task.&lt;/p&gt;

&lt;p&gt;If you are someone proactive, it will be very useful to ask that same leader how you could solve it or who you should look for to know how to do it. But if you are a not so proactive or shy person, with a hope that they will guide you in your early days, it will be very difficult for you to do that. On the contrary, you will most likely feel disappointed that they did not actually tell you how to solve something, even saving as a resource or answer the fact that they did not teach you how to solve it and that for that reason you have not done it yet. It is important to note that the proactivity of current generations have been changing the reason to be proactive, and older generations increasingly find it more difficult to understand what makes people or their teams proactive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymWIoepe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecfqn6a3ud1hm2o3713z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymWIoepe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecfqn6a3ud1hm2o3713z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore, you must learn to be your own center by looking around how others work to know your reason for being proactive. If you come to a job for the first time, you will have to understand that even if they have a “culture” or an “attempted culture” actually imposed by whoever created the company, it does not mean that you cannot get out of that circle and be better than that. If you come to conclude that with your analysis, that the culture that the company follows is a passionate and attractive culture to your way of thinking, you will be in the right place. But ... What if you don't like that culture? What if you think that the way of working of your first job does not seem correct to you? Should you accept it and learn that way? You will clearly have to improve it. And if you can't do it or they won't let you, it means you're not in the right place. And don't worry, improving it does not mean that you will have a war. On the contrary, it will improve your workplace even generating good results.&lt;/p&gt;

&lt;p&gt;Some time ago, talking with some guys who left my current job, I realized in reality that they did not leave because of an “opportunity” that came from nowhere or by magic. Rather, they decided to show their profiles as open to receiving opportunities. Who has not done it? When you already want to leave a job, you put on professional networks that you are open to receiving offers. But in reality this has always been a choice. You decide when you want to receive offers or when you want to find out more about them. Outdated companies and boomers don't take the time to understand why they are doing it. They only focus on the superficial, on the "He has not returned our hand" or on the "He lacked being more committed to us." But they never really wonder why he decided to accept the other offer or why he decided to find out more about them. You agree to be part of a process that can get you out of that circle that you don't want to be in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lPV_GpBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ytzaewl5ybws9ibts65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lPV_GpBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ytzaewl5ybws9ibts65.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is why (and hopefully pass it well) it is important to know that should not scare you to decide your own path. To decide to be your own center, where you will have to create the trust to decide if the business culture that is imposed on you is the one that really represents you. This is how a real culture is formed.&lt;/p&gt;

&lt;p&gt;And now you will ask yourself: Why is this young man telling me all this? Well, because here comes the next point: What if I like where I am, but I am learning the wrong way? How do I know if I am learning the right way?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-decide-how-i-want-to-learn"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2: Decide how I want to learn&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Something that I can rescue from my current job is that I learned to know how I want to learn. I was saved from a learning obligation because I discovered that I want to be better than I am used to being. The idea of studying the wrong way, going the easy way, studying for a medal, studying or memorizing test questions, or studying to "meet a business goal" didn't suit me. Discovering this was not easy.&lt;/p&gt;

&lt;p&gt;In the beginning I was part of that system. I felt strange because I was actually able to learn that way and generate results. However, I felt that learning the fast way, when speaking with professionals who learned the slow way, the difference was huge. I could pretend that I knew a lot or that even with my medals I felt with the ability to face any question since they trusted me. But actually, they knew more than I did, and in a way, it showed. Therefore, some external professionals helped me understand which path to choose.&lt;/p&gt;

&lt;p&gt;I had the opportunity that during the start-up process, I met very professional people who helped me understand how I should decide how to learn. If it hadn't been for those people, I'd practically still be within the imposed system and maybe I'd still just be someone with medals. They had a study plan guided in the right way and with the right people. In the context that I work in, which is the world of Amazon Web Services, these people were the best people who could tell me how I should learn from AWS. The &lt;a href="https://aws.amazon.com/es/professional-services/"&gt;Amazon Professional Services&lt;/a&gt; team. They were professionals prepared to face any challenge in the cloud, and who would leave any partner company defeated if they made a competition of who was cooler. But in reality, they were normal people who had understood how they should learn, because Amazon as a company has a very interesting culture regarding people's learning. They showed me some secrets regarding how they learned, what was the platform, how they related to their peers, their networks, etc. An almost hidden world for a mere mortal outside of Amazon. Seeing this made me realize that learning the fast path was really only a long-term sentence. Since then, I never wanted to follow that path again and became independent from my knowledge.&lt;/p&gt;

&lt;p&gt;What if they hadn't helped me? What if you don't have someone to help you? Well, I'm sure that understanding that you are the center of your attention, you will still discover how you want to learn. Not so naturally or spontaneously, but anyway you would have come to the same conclusion that everyone must understand which paths exist and which one to choose. In fact, by reading this post you are getting a boost from someone who wants to help you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-grow"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 3: Grow&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3FiY89---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf0wowakj94dt4xka4aw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3FiY89---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf0wowakj94dt4xka4aw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you were already partially able to figure out the conclusion of step one and two, I congratulate you. You are already growing. You are already learning. Very few people are able to do it, and very few know how to do it. While there will never be an owner of the truth and I clearly am not, there will always be someone who can guide you to discover your own truth. Don't let others take ownership of your truth, or force you to follow their truth. By reading this post, it is a form of growth.&lt;/p&gt;

&lt;p&gt;And rest assured, taking these steps will not always be easy. I never said it was. You will have to make difficult decisions, or think of optimal strategies to advance to a better place. Sometimes you will feel exhausted, distant, or disappointed. But you should know that in the end, the result is worth it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bonus-where-to-look-for-a-correct-study-plan"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Bonus: Where to look for a correct Study Plan&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;While I showed you part of my vision for not studying incorrectly, I have not yet told you how to look up your study plan correctly. In this case, I will tell you about my experience to learn about Amazon Web Services, but you can carry out this search or plan with any other topic you want to study.&lt;/p&gt;

&lt;p&gt;First of all, I never recommend studying only the questions of some exam. That alternative is the worst they could recommend, because there is no real learning or understanding of the current context of all the services that involve the AWS cloud. AWS internal teams occupy their own platforms to learn, and this is clearly not a problem for them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-recommendations"&gt;
  &lt;/a&gt;
  My recommendations
&lt;/h3&gt;

&lt;p&gt;This does not mean that you cannot do mock or mock exams, where here comes my first recommendation. &lt;a href="https://www.whizlabs.com/"&gt;Whizlabs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U7c4CCSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0269ii7drb98mez4snn4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U7c4CCSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0269ii7drb98mez4snn4.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whizlabs"&gt;
  &lt;/a&gt;
  Whizlabs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.whizlabs.com/"&gt;Whizlabs&lt;/a&gt; is a platform where its greatest power is based on simulation exams of various subjects. They have exams for almost all cloud providers where each question has its justification and its link to official documentation. For me this site was a great help to start simulating a real exam. It also has courses and labs to test AWS services.&lt;/p&gt;

&lt;p&gt;Another recommendation that I can give you is &lt;a href="https://www.qwiklabs.com/"&gt;QwikLabs&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qwiklabs"&gt;
  &lt;/a&gt;
  QwikLabs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nKxS8Wxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2mhpea88khohgmj1rvo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nKxS8Wxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2mhpea88khohgmj1rvo.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a site where you can test your skills on administration consoles prepared for the specific laboratory. They are quite useful since it has a global subscription where if you pay for it you will be able to access all the existing laboratories on the platform. Be very careful with doing something that is not in the laboratory instructions, because they can cancel your account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tutorialsdojo"&gt;
  &lt;/a&gt;
  TutorialsDojo
&lt;/h3&gt;

&lt;p&gt;Finally another of the sites that have helped me a lot to learn the right way, is at &lt;a href="https://tutorialsdojo.com/"&gt;TutorialsDojo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6u6JgA6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm7l22et9m79t5l8c2f4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6u6JgA6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm7l22et9m79t5l8c2f4.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This site is a great place to start running quizzes and practical exams to address most of the existing certifications in cloud providers.&lt;/p&gt;

&lt;p&gt;Other platforms that I recommend are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudacademy.com/"&gt;CloudAcademy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#courses-i-recommend"&gt;
  &lt;/a&gt;
  Courses I Recommend
&lt;/h3&gt;

&lt;p&gt;I tell you that all over the internet there are a variety of courses that will really show you a correct context of AWS. However, one of my biggest secrets of my knowledge is Adrian's courses. These have positively impacted me. These courses come with an extreme dedication to improving the content you create every day.&lt;/p&gt;

&lt;p&gt;Each course or sheet is Adrian's own creation with the sole objective of explaining the concepts of the cloud in the best way possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_p2v1s_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aly6mu8h90nv0s5tu9dz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_p2v1s_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aly6mu8h90nv0s5tu9dz.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The truth is that I have had other courses in other providers such as Udemy, Cloud Academy, aws.training, etc. But I have never seen such a dedicated and practical course as this. It also has many practical examples that will help you understand the concepts of the cloud.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>aws</category>
      <category>discuss</category>
      <category>startup</category>
    </item>
    <item>
      <title>I added a JavaScript arcade game to my portfolio's homepage</title>
      <author>Chris Greening</author>
      <pubDate>Tue, 08 Jun 2021 22:44:14 +0000</pubDate>
      <link>https://dev.to/chrisgreening/i-added-a-javascript-arcade-game-to-my-portfolio-s-homepage-1jmf</link>
      <guid>https://dev.to/chrisgreening/i-added-a-javascript-arcade-game-to-my-portfolio-s-homepage-1jmf</guid>
      <description>&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; old video games. &lt;/p&gt;

&lt;p&gt;One of my fondest memories as a kid is going to a diner on Long Island with my grandparents every Friday evening and playing Galaga (still my all time favorite) at a beat-up old arcade cabinet in the diner's entrance. &lt;/p&gt;

&lt;p&gt;My dad would give me $1 worth of quarters and I'd stretch them for an hour racking a higher score each time I played.&lt;/p&gt;

&lt;p&gt;I love old video games so much that I recently spent dozens of hours adding one to my portfolio's &lt;a href="//www.christophergreening.com"&gt;homepage&lt;/a&gt; just for the heck of it using JavaScript and &lt;a href="http://paperjs.org/"&gt;Paper.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--znDl05we--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02mokf60uu3s8ejuj3h8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--znDl05we--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02mokf60uu3s8ejuj3h8.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#a-brief-wistful-origin-story-snake"&gt;
  &lt;/a&gt;
  A brief, wistful origin story 🐍
&lt;/h2&gt;

&lt;p&gt;At heart I am a Python developer. The first program I ever wrote (aside from &lt;em&gt;hello_world.py&lt;/em&gt;) was a &lt;em&gt;Zork&lt;/em&gt;-style fantasy text adventure I imaginatively named &lt;em&gt;Dungeon!&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7aU_kpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w3b30x9mwxt1y1n9vi2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7aU_kpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w3b30x9mwxt1y1n9vi2.png" alt="Dungeon text adventure homescreen showing title and author name Chris Greening"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code was ugly. It was monolithic. It was 1,333 lines of spaghetti code. I loved every second of it.  &lt;/p&gt;

&lt;p&gt;Every time I didn't know something I would hit the web, look it up, and duct tape whatever I learned into my Frankenstein's monster &lt;em&gt;dungeon.py&lt;/em&gt; 'til it worked. &lt;/p&gt;

&lt;p&gt;To put it in perspective, here is a short snippet of the original source 😅:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDUNKdvV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w31zhf50mrw7h9h2kprc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDUNKdvV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w31zhf50mrw7h9h2kprc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To this day, &lt;em&gt;Dungeon!&lt;/em&gt; is perhaps my proudest and most important piece of code I have ever written. &lt;/p&gt;

&lt;p&gt;The reason I bring this story up is because it shows how I approach learning new skills in software development (and life in general).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#implementing-the-javascript-arcade-game"&gt;
  &lt;/a&gt;
  Implementing the JavaScript arcade game
&lt;/h2&gt;

&lt;p&gt;I will be the first to admit I am not great at JavaScript. &lt;/p&gt;

&lt;p&gt;That's not to say I'm terrible but I don't know React, Vue, Angular, or many other JavaScript frameworks or libraries.&lt;/p&gt;

&lt;p&gt;I just know enough to get by.&lt;/p&gt;

&lt;p&gt;All I knew when I first started developing my portfolio was that I wanted an arcade game front and center and I was going to figure out how to do it. &lt;/p&gt;

&lt;p&gt;Luckily one of the few libraries I did know of is the vector graphics scripting lib &lt;a href="http://paperjs.org/download/"&gt;Paper.js&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Even more lucky is it comes with an example of an Asteroids clone when you download the source files... the perfect place to start. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-iXd3zF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zx7qenybfzl54arsswjt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-iXd3zF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zx7qenybfzl54arsswjt.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#fast-forward-to-now"&gt;
  &lt;/a&gt;
  Fast forward to now
&lt;/h2&gt;

&lt;p&gt;I'll spare you the boring details (at least a couple dozen hours worth) of me trying 10,000 ways that didn't work but I'm proud of the way that finally did: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xvuKs0rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mabyv33f8rtqy9kjh427.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xvuKs0rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mabyv33f8rtqy9kjh427.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far I've implemented optional sound effects, a night mode toggle, and a CRT filter. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LzPIiZgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esi9tl6ylkcy1ganc6ai.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LzPIiZgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esi9tl6ylkcy1ganc6ai.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm excited to keep adding features as time goes on and it's inspired me to dive further into web development and formally learn (and love) JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-me-feedback"&gt;
  &lt;/a&gt;
  Give me feedback!
&lt;/h2&gt;

&lt;p&gt;Check my site out for yourself and let me know what you think in the comments below! I'd also love to hear about the projects you're personally proud of ❤️&lt;/p&gt;

&lt;p&gt;&lt;a href="//www.christophergreening.com"&gt;www.christophergreening.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side note: Unfortunately the game itself isn't (currently) playable on mobile 😅 but the site itself is mobile-friendly and you can mess around with nightmode, CRT filter, etc.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>blogging</category>
    </item>
    <item>
      <title>Top Ten Git Tips &amp; Tricks</title>
      <author>Honeybadger Staff</author>
      <pubDate>Tue, 08 Jun 2021 22:21:21 +0000</pubDate>
      <link>https://dev.to/honeybadger/top-ten-git-tips-tricks-53n0</link>
      <guid>https://dev.to/honeybadger/top-ten-git-tips-tricks-53n0</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally written by &lt;a href="https://www.honeybadger.io/blog/git-tricks/#authorDetails"&gt;Julie Kent&lt;/a&gt; on the &lt;a href="https://www.honeybadger.io/blog/git-tricks/"&gt;Honeybadger Developer Blog&lt;/a&gt;.&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;This article complements &lt;a href="https://www.honeybadger.io/blog/how-does-git-work/"&gt;‘Understanding How Git Works’&lt;/a&gt;. Now that you have an understanding of the plumbing, it's time to level up your skills. Hopefully, these tips and tricks will increase your efficiency and productivity as a developer. It will help you spend more time coding and less time trying to decide whether to &lt;code&gt;git merge&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt;. Without further ado, let's get into it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-blank-commits"&gt;
  &lt;/a&gt;
  10. Blank commits
&lt;/h2&gt;

&lt;p&gt;Have you ever found yourself making a small tweak to the README so that you can kick-off a build (or some other integration) and try to debug an issue? I used to do this fairly frequently, until I found out about the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit --allow empty -m 'it works!'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This allows you to trigger a commit and kick off a workflow without having to make a trivial change to a README or some other file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-make-your-log-pretty"&gt;
  &lt;/a&gt;
  9. Make your log pretty!
&lt;/h2&gt;

&lt;p&gt;This one is more fun, and sometimes, adding a bit of color does help our eyes and brain read what's on the screen better.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --pretty=oneline --graph --decorate --all&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here's an example of what you can expect:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKhb7NY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/git-tricks/gitlog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKhb7NY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/git-tricks/gitlog.png" alt="example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-clean-up-your-local-branches"&gt;
  &lt;/a&gt;
  8. Clean up your local branches
&lt;/h2&gt;

&lt;p&gt;If you're like me, you enjoy keeping things tidy, and this includes your computer. :) I fell in love with the &lt;code&gt;git config&lt;/code&gt; setting, which deletes local branches that have been removed from the remote when doing a &lt;code&gt;fetch&lt;/code&gt; or &lt;code&gt;pull&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global fetch.prune true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Similarly, you can delete local branches that have been merged into the master by running this code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch --merged master | grep -v "master" | xargs -n 1 git branch -d&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-rebase-oopsie"&gt;
  &lt;/a&gt;
  7. Rebase oopsie
&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;git rebase&lt;/code&gt; is an extremely valuable command, but sometimes, you accidentally rebase away a commit and start sweating. Or, maybe that's just me. :) &lt;code&gt;git reflog&lt;/code&gt; to the rescue! As long as you've committed your work, it still lives in your local working copy. Using &lt;code&gt;git reflog&lt;/code&gt;, you can find the SHA1 that you need something from. Then, run &lt;code&gt;git checkout &amp;lt;SHA1&amp;gt;&lt;/code&gt;, copy what you need, and run &lt;code&gt;git checkout HEAD&lt;/code&gt; to return to the most recent commit in the branch. Crisis averted!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-no-more-blaming"&gt;
  &lt;/a&gt;
  6. No more blaming!
&lt;/h2&gt;

&lt;p&gt;There's a bug, and you can't figure it out. Sometimes, you want/need to reach out to the person who wrote the code that does not appear to be working. You run &lt;code&gt;git blame&lt;/code&gt;, which will show each line's last commit change and who changed it. Cooooool, but ugh, running &lt;code&gt;git blame&lt;/code&gt; just doesn't feel very nice. Good news! You can change the alias using this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global alias.investigate blame&lt;/code&gt; (You can change &lt;code&gt;investigate&lt;/code&gt; to whatever word you'd like)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-advanced-raw-git-add-endraw-"&gt;
  &lt;/a&gt;
  5. Advanced &lt;code&gt;git add&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Sometimes, I get carried away to the point that I realize I have way more changes in a file than make sense to commit together. I recently learned that you can use &lt;code&gt;git add -p&lt;/code&gt; to selectively organize your commits. Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOcRCaVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/git-tricks/gitadd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOcRCaVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/git-tricks/gitadd.png" alt="exampleadd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-speaking-of-that-raw-p-endraw-flag"&gt;
  &lt;/a&gt;
  4. Speaking of that &lt;code&gt;p&lt;/code&gt; flag
&lt;/h2&gt;

&lt;p&gt;It can also be used with &lt;code&gt;git stash&lt;/code&gt; when you don't want to stash &lt;em&gt;all files&lt;/em&gt; or the entirety of one file with changes. When running &lt;code&gt;git stash -p&lt;/code&gt;, you will see a similar interactive screen as &lt;code&gt;git add -p&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-automate-raw-git-bisect-endraw-"&gt;
  &lt;/a&gt;
  3. Automate &lt;code&gt;git bisect&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is more of an advanced tip. If you haven't heard of &lt;code&gt;git bisect&lt;/code&gt; yet, I recommend reading &lt;a href="https://www.metaltoad.com/blog/beginners-guide-git-bisect-process-elimination"&gt;this blog post&lt;/a&gt;. After reading the blog post, you’ll know that using &lt;code&gt;git bisect&lt;/code&gt; can require a lot of commands, which can limit its usefulness. Because of this complexity, you might be compelled to write a script that can automate some of this process. You can then use this nifty command to run your script.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git bisect run my_script arguments&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can include a number of arguments. Read more about &lt;code&gt;git bisect&lt;/code&gt; and how to use the &lt;code&gt;run&lt;/code&gt; command &lt;a href="https://git-scm.com/docs/git-bisect#_bisect_run"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-have-some-fun"&gt;
  &lt;/a&gt;
  2. Have some fun
&lt;/h2&gt;

&lt;p&gt;Make use of emojis by bookmarking &lt;a href="https://gist.github.com/rxaviers/7360908"&gt;this cheatsheet&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-need-help"&gt;
  &lt;/a&gt;
  1. Need help?
&lt;/h2&gt;

&lt;p&gt;I'm always amazed by how quickly I forget about the built-in help tools within a number of applications and CLI's. I'll be trying an endless number of Stack Overflow answers to solve my problem, and finally, I'll remember&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git help&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You essentially have all of the Git documentation at your fingertips! If you're completely new to Git or just want a nice refresher, you can even run&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git help tutorial&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which will run you through the basics.&lt;/p&gt;

&lt;p&gt;Finally, if you want to get documentation for a specific command, you can run, for example, &lt;code&gt;man git-log&lt;/code&gt; if you want to know more about the &lt;code&gt;git log&lt;/code&gt; command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Well, there you have it! I hope that you've at least come across something new that you didn't know before or refreshed your memory about a command you might have forgotten about. Git is an amazingly powerful tool, and we should make the most of it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-honeybadger"&gt;
  &lt;/a&gt;
  About Honeybadger
&lt;/h2&gt;

&lt;p&gt;Honeybadger has your back when it counts. We're the only error tracker that combines exception monitoring, uptime monitoring, and cron monitoring into a single, simple to use platform.  &lt;/p&gt;

&lt;p&gt;Our mission: to tame production and make you a better, more productive developer. &lt;a href="https://www.honeybadger.io/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
    </item>
  </channel>
</rss>
