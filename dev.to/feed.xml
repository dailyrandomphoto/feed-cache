<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Red Wine Quality prediction using AzureML, AKS with TensorFlow Keras</title>
      <author>Ambarish Ganguly</author>
      <pubDate>Sat, 24 Apr 2021 02:46:51 +0000</pubDate>
      <link>https://dev.to/ambarishg/red-wine-quality-prediction-using-azureml-aks-with-tensorflow-keras-mnn</link>
      <guid>https://dev.to/ambarishg/red-wine-quality-prediction-using-azureml-aks-with-tensorflow-keras-mnn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-we-trying-to-do"&gt;
  &lt;/a&gt;
  What are we trying to do
&lt;/h1&gt;

&lt;p&gt;Predict the Quality of Red Wine using &lt;strong&gt;Tensorflow Keras deep learning framework&lt;/strong&gt; given certain attributes such as fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, and alcohol&lt;/p&gt;

&lt;p&gt;We divide our approach into &lt;strong&gt;2 major blocks&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Building the Model in Azure ML
&lt;/li&gt;
&lt;li&gt;Inference from the Model in Azure ML
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Building the model in Azure ML&lt;/strong&gt; has the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the Azure ML workspace
&lt;/li&gt;
&lt;li&gt;Upload data into the Azure ML Workspace
&lt;/li&gt;
&lt;li&gt;Create the code folder
&lt;/li&gt;
&lt;li&gt;Create the Compute Cluster
&lt;/li&gt;
&lt;li&gt;Create the Model
&lt;/li&gt;
&lt;li&gt;Create the Compute Environment &lt;/li&gt;
&lt;li&gt;Create the Estimator &lt;/li&gt;
&lt;li&gt;Create the Experiment and Run&lt;/li&gt;
&lt;li&gt;Register the Model
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Inferencing from the model&lt;/strong&gt; in Azure ML has the following steps:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the Inference Script&lt;/li&gt;
&lt;li&gt;Create the Inference Dependencies&lt;/li&gt;
&lt;li&gt;Create the Inference Config&lt;/li&gt;
&lt;li&gt;Create the Inference Clusters
&lt;/li&gt;
&lt;li&gt;Deploy the Model in the Inference Cluster
&lt;/li&gt;
&lt;li&gt;Get the predictions
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please read the other post &lt;a href="https://dev.to/ambarishg/azure-ml-aks-and-a-bit-of-mlops-2gj7"&gt;Red Wine Quality prediction using AzureML, AKS&lt;/a&gt;. This was done using machine learning techniques and not using deep learning. The same thing is accomplished here but using the deep learning framework Keras. Most of the things remain the same compared to the machine learning method, but a few steps change. I am going to highlight the changed aspects here only so that it is easy to follow.        &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Change / No Change&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Create the Azure ML workspace&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Upload data into the Azure ML   Workspace&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the code folder&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Compute Cluster&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Model&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Change&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Compute Environment&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Change&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Estimator&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Change&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Experiment and Run&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Register the Model&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#create-the-model"&gt;
  &lt;/a&gt;
  Create the Model
&lt;/h1&gt;

&lt;p&gt;The model that we create here makes use of a &lt;code&gt;repeatable block&lt;/code&gt; made up of&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dense Layer&lt;/li&gt;
&lt;li&gt;Dropout&lt;/li&gt;
&lt;li&gt;BatchNormalization
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last layer is a Dense layer of a single neuron.   &lt;/p&gt;

&lt;p&gt;This block is repeated &lt;code&gt;3&lt;/code&gt; times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;writefile&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folder_training_script&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azureml.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Run&lt;/span&gt;
&lt;span class="c1"&gt;# from utils import load_data
&lt;/span&gt;
&lt;span class="c1"&gt;# let user feed in 2 parameters, the dataset to mount or download, and the regularization rate of the logistic regression model
&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'--data-folder'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'data_folder'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'data folder mounting point'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;###
&lt;/span&gt;&lt;span class="n"&gt;data_folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'winedata'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Data folder:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;red_wine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'winequality_red.csv'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;keras&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tensorflow.keras&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callbacks&lt;/span&gt;


&lt;span class="c1"&gt;# Create training and validation splits
&lt;/span&gt;&lt;span class="n"&gt;df_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;red_wine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frac&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;red_wine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"quality"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;df_train_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;df_train_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_train_stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;df_train_stats&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'mean'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;df_train_stats&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'std'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Split features and target
&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'quality'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;X_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_valid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'quality'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;X_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;X_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_valid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_train&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'quality'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;y_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_valid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'quality'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="n"&gt;early_stopping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EarlyStopping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;min_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# minimium amount of change to count as an improvement
&lt;/span&gt;    &lt;span class="n"&gt;patience&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# how many epochs to wait before stopping
&lt;/span&gt;    &lt;span class="n"&gt;restore_best_weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;input_shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sequential&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="c1"&gt;# the hidden ReLU layers
&lt;/span&gt;    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_shape&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BatchNormalization&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BatchNormalization&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BatchNormalization&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="c1"&gt;# the linear output layer 
&lt;/span&gt;    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'adam'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'mae'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;validation_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_valid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_valid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;callbacks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;early_stopping&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;# put your callbacks in a list
&lt;/span&gt;    &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# turn off training log
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;history_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Get the experiment run context
&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'min_val_loss'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'val_loss'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'outputs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exist_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# note file saved in the outputs folder is automatically uploaded into experiment record
&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'outputs/my_model'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#create-the-compute-environment"&gt;
  &lt;/a&gt;
  Create the Compute Environment
&lt;/h1&gt;

&lt;p&gt;The compute environment makes use of the curated environment &lt;code&gt;AzureML-TensorFlow-2.2-GPU&lt;/code&gt; provided by AzureML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azureml.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;
&lt;span class="n"&gt;curated_env_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'AzureML-TensorFlow-2.2-GPU'&lt;/span&gt;
&lt;span class="n"&gt;tf_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;curated_env_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#create-the-estimator"&gt;
  &lt;/a&gt;
  Create the Estimator
&lt;/h1&gt;

&lt;p&gt;We change the estimator to make use of the curated environment &lt;code&gt;environment_definition = tf_env&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azureml.train.estimator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Estimator&lt;/span&gt;

&lt;span class="n"&gt;script_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'--data-folder'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_mount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;# Create an estimator
&lt;/span&gt;&lt;span class="n"&gt;estimator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Estimator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;folder_training_script&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;script_params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;script_params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;compute_target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compute_target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Run the experiment on the remote compute target
&lt;/span&gt;                      &lt;span class="n"&gt;environment_definition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf_env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;entry_script&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'train.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#predict-the-data"&gt;
  &lt;/a&gt;
  Predict the data
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Predicting or Inferencing from the model&lt;/strong&gt; in Azure ML has the following steps:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the Inference Script&lt;/li&gt;
&lt;li&gt;Create the Inference Dependencies&lt;/li&gt;
&lt;li&gt;Create the Inference Config&lt;/li&gt;
&lt;li&gt;Create the Inference Clusters
&lt;/li&gt;
&lt;li&gt;Deploy the Model in the Inference Cluster
&lt;/li&gt;
&lt;li&gt;Get the predictions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Same as in the previous section, we do not explain in detail the steps which are the same in building the model using the machine learning work. We would highlight only the step which has changed from the previous implementation.    &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Change / No Change&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Create the Inference Script&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Change&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Inference Dependencies&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Not required&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Inference Config&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Change&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Inference Clusters&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deploy the Model in the Inference Cluster&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get the predictions&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-the-inference-script"&gt;
  &lt;/a&gt;
  Create the Inference Script
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;writefile&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folder_training_script&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;keras&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azureml.core.model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;

&lt;span class="c1"&gt;# Called when the service is loaded
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;
    &lt;span class="c1"&gt;# Get the path to the registered model file and load it
&lt;/span&gt;    &lt;span class="n"&gt;model_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'wine_model'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Called when a request is received
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="c1"&gt;# Get the input data as a numpy array
&lt;/span&gt;        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
        &lt;span class="c1"&gt;# Get a prediction from the model
&lt;/span&gt;        &lt;span class="n"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;log_txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Data:'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' - Predictions:'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Return the predictions as any JSON serializable format
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# return error message back to the client
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-the-inference-dependencies"&gt;
  &lt;/a&gt;
  Create the Inference Dependencies
&lt;/h2&gt;

&lt;p&gt;We do not require this step since we use a curated environment  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-inference-config"&gt;
  &lt;/a&gt;
  Create the Inference Config
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azureml.core.model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InferenceConfig&lt;/span&gt;

&lt;span class="n"&gt;classifier_inference_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InferenceConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'./winecode'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                              &lt;span class="n"&gt;entry_script&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"score.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                             &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tf_env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use the curated environment &lt;code&gt;tf_env&lt;/code&gt; created earlier to prepare the Inference Config  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this post, we have highlighted the code which would change when using the Keras deep learning framework compared to the method which we have used for building the model using machine learning.  &lt;/p&gt;

&lt;p&gt;Thank you for reading. Please do leave your comments. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>7 Simple Menu Icon Animation For Beginners </title>
      <author>Kiran Raj R</author>
      <pubDate>Sat, 24 Apr 2021 02:37:06 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/7-simple-menu-icon-animation-for-beginners-25oa</link>
      <guid>https://dev.to/kiranrajvjd/7-simple-menu-icon-animation-for-beginners-25oa</guid>
      <description>&lt;p&gt;Here is the list of 7 simple menu icon animation (hamburger) for beginners. All animation are done with CSS transform property, no framework, no complex JavaScript. A few lines of JavaScript is used, just to mimic the checkbox behavior. Play with them, if you find any errors let me know, Happy Coding.&lt;/p&gt;

&lt;p&gt;You can uses this &lt;a href="https://cubic-bezier.com/#.17,.67,.83,.67"&gt;website&lt;/a&gt; to get your own cubic-bezier value.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/QWdzgLN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/BapvZya?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/LYxMLEJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/xxgmrGj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/XWpoggE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/zYNyzda?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/xxgmraM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>animation</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Scientific Programming School - Special Offer!</title>
      <author>Scientific Programming School</author>
      <pubDate>Sat, 24 Apr 2021 01:00:43 +0000</pubDate>
      <link>https://dev.to/scientificschool/scientific-programming-school-course-bundle-2hji</link>
      <guid>https://dev.to/scientificschool/scientific-programming-school-course-bundle-2hji</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8D8_GdE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td8ckum6us1fwtgdsgxx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8D8_GdE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td8ckum6us1fwtgdsgxx.png" alt="Scientific Programming School $12 Course Bundle Offer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;course bundle purchase&lt;/strong&gt; will enable you enrol to all the currently 🔥 bundled-courses at just one price. Anything published after the bundle is purchased won't be included, but you may re-purchase the new courses/ bundle anytime. If you are not happy, we'll offer you 100% refund!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://scientificprogramming.io/bundle-offer"&gt;https://scientificprogramming.io/bundle-offer&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The courses are designed for &lt;strong&gt;Computer Science&lt;/strong&gt; or any &lt;strong&gt;STEM discipline&lt;/strong&gt; students to help guide them with the aspects of scientific programming such as data structures, algorithms, methods/functions, exception handling, functional programming, object-oriented programming, regular expressions, variables and operators, conditional statements and loops, arrays, classes and objects, encapsulation, polymorphism, and inheritance, abstract classes and Interfaces, anonymous and Inner Classes, parallel programming, HPC, threads, CUDA and so on. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYtpTA_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tda3p60gwntxc2r0ip4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYtpTA_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tda3p60gwntxc2r0ip4b.png" alt="Run Scientific Code Interactively!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We created a small &lt;strong&gt;private virtual cluster&lt;/strong&gt; with Docker technology to support our courses. The platform is powered by Digital Ocean's multiple droplets (VPS) with a highly scalable design (read our devlogs to learn more).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Bundle?&lt;/strong&gt; Because we believe sharing knowledge is the most wonderful human capability. Sharing your skills and knowledge is a powerful and generous way to give back and change the world for the better!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-platform"&gt;
  &lt;/a&gt;
  About the Platform
&lt;/h2&gt;

&lt;p&gt;The Scientific Programming School (&lt;strong&gt;&lt;a href="https://scientificprogramming.io"&gt;scientificprogramming.io&lt;/a&gt;&lt;/strong&gt;) is the next generation platform for creating and delivering interactive courses on high performance computing topics. It is an interactive educational &lt;br&gt;
platform that helps you to learn Linux, Devops, HPC and Scientific programming languages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We choose dev.to platform to promote, because it's got the best of the best readers who will value our attempt to spread the knowledge of scientific programming!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>startup</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Expo SDK 41</title>
      <author>Expo Team</author>
      <pubDate>Fri, 23 Apr 2021 23:02:17 +0000</pubDate>
      <link>https://dev.to/expo/expo-sdk-41-1f2j</link>
      <guid>https://dev.to/expo/expo-sdk-41-1f2j</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRk7PTwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdqsbfehonsots7vahff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRk7PTwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdqsbfehonsots7vahff.png" alt="Stylized number 41"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today we're announcing the release of &lt;strong&gt;Expo SDK 41&lt;/strong&gt;. SDK 41 includes React Native 0.63, the same version as in SDK 40. Thank you to everyone that [helped with beta testing[(&lt;a href="https://blog.expo.io/expo-sdk-41-beta-is-now-available-958edcd78991"&gt;https://blog.expo.io/expo-sdk-41-beta-is-now-available-958edcd78991&lt;/a&gt;). (&lt;em&gt;Curious why we didn't include the recently released React Native 0.64? &lt;a href="https://expo.fyi/react-native-releases"&gt;Learn more&lt;/a&gt;.&lt;/em&gt;)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%EF%B8%8F-highlights"&gt;
  &lt;/a&gt;
  ⚡️ Highlights
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Android apps now target Android R (11 / SDK 30)&lt;/strong&gt;. This comes with some significant changes for location permissions, media library (related to &lt;a href="https://android-doc.github.io/guide/topics/providers/document-provider.html"&gt;StorageAccessFramework&lt;/a&gt;), and constants. Please note that these changes also impact SDK &amp;lt;= 40 projects in Expo Go, but they will not impact SDK &amp;lt;= 40 standalone apps. Refer to &lt;a href="https://expo.fyi/android-r"&gt;expo.fyi/android-r&lt;/a&gt; for more information.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The recommended version of react-native-reanimated has been updated to v2&lt;/strong&gt;. If you would like to use v2 features in your app, you need to add the &lt;a href="https://docs.swmansion.com/react-native-reanimated/docs/installation/#babel-plugin"&gt;Reanimated v2 Babel plugin&lt;/a&gt;. You can continue to use v1 features (eg: those used by React Navigation v5) without adding the new Babel plugin. Please note that if you use the new features from v2, you will not be able to use remote JS debugging in your app! If you use v2 APIs, JS debugging is only possible using Flipper and Hermes, which are not yet fully supported in the managed workflow. (&lt;em&gt;We plan to investigate integrating Hermes during the next SDK cycle, but we don't currently expect to have it ready for SDK 42.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;lottie-react-native has been updated to the latest version (3.5.0)&lt;/strong&gt;. Your existing animations should continue to work as before, but if you encounter any issues please &lt;a href="https://github.com/expo/expo/issues"&gt;file an issue&lt;/a&gt; and share the animation file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The new version of react-native-screens (v3) "enables screens" by default&lt;/strong&gt;. If you encounter any related issues, you can report the issue and opt out with &lt;code&gt;enableScreens(false)&lt;/code&gt;. Be sure to update to the latest v4 patch release of React Navigation if you use v4.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Improvements were made across the SDK to ensure compatibility with EAS Build&lt;/strong&gt;. A big part of this SDK has been making the necessary underlying changes to support EAS Build for managed projects. You can now use EAS Build with Expo managed apps to reduce the size of your standalone apps by up to 10x! &lt;a href="https://blog.expo.io/eas-build-april-preview-update-ebd7dff9dd25"&gt;Learn more about the latest EAS Build updates&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The expo package is now 93% smaller in production and better than ever&lt;/strong&gt;. We've simplified the experience so the &lt;code&gt;.expo&lt;/code&gt; extension is no longer needed (and so we removed it), and neither is the &lt;code&gt;--target bare|managed&lt;/code&gt; flag - updates will run in either context provided the native runtime is compatible. We've improved consistency across the managed and bare workflow, removed legacy code, and improved tree-shaking on the package using &lt;code&gt;@expo/metro-config&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To see the full list of new features and fixes, refer to the &lt;a href="https://github.com/expo/expo/blob/master/CHANGELOG.md"&gt;changelog&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#expo%C2%A0go"&gt;
  &lt;/a&gt;
  🏡 Expo Go
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;We changed sign in to use &lt;code&gt;expo-web-browser&lt;/code&gt; so we can leverage our &lt;a href="https://blog.expo.io/four-new-security-features-to-protect-your-expo-apps-cdf3e409a1b0"&gt;existing web auth flow with two-factor-authentication&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can now see &lt;a href="https://blog.expo.io/expo-organizations-a-simpler-way-to-work-as-a-team-5dc244f0efcb"&gt;teams and organizations&lt;/a&gt; that you are a part of in the &lt;em&gt;Profile&lt;/em&gt; tab, and their associated projects show up in your recent projects below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6rY_UGRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wie90orw7gnupg8pq5u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6rY_UGRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wie90orw7gnupg8pq5u8.png" alt="Accounts &amp;amp; Organizations screenshot on mobile phones"&gt;&lt;/a&gt;Notice the "Accounts &amp;amp; Organizations" section and the shared "Recent Projects" list below it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#expo%C2%A0cli"&gt;
  &lt;/a&gt;
  🌐 Expo CLI
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Integrated Developer Tools&lt;/strong&gt;: Open the developer menu, inspect elements, and monitor performance all from the CLI. Just run &lt;code&gt;expo start&lt;/code&gt; then press "m" to toggle the dev menu, and "shift+M" to toggle the performance monitor or element inspector across native apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iZ8FwgDy2Ek"&gt;
&lt;/iframe&gt;It was either a heavily compressed but still 7mb gif or a YouTube video, so we went for the YouTube video.
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Force Reloading&lt;/strong&gt;: Shaking your devices every few minutes can get exhausting! Now you can reload connected phones, tablets, simulators, and browsers all by pressing "r" in the Terminal UI. This works across iOS, Android, web, and on physical devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wIH0OEmLgy8"&gt;
&lt;/iframe&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Automatic TypeScript setup&lt;/strong&gt;: Setting up TypeScript can be a pain, so we've completely automated it! Just create a blank &lt;code&gt;tsconfig.json&lt;/code&gt; and run &lt;code&gt;expo start&lt;/code&gt;, we'll take care of the rest! Learn more: &lt;a href="https://docs.expo.io/guides/typescript/"&gt;"TypeScript" in the Expo docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cUhwuPif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neum1v776b28igfd16j7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cUhwuPif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neum1v776b28igfd16j7.gif" alt="GIF of following the instructions in a terminal window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Vastly better errors&lt;/strong&gt;: No one likes errors - that's why in SDK 41 we've refined them to be as concise, and useful as possible! We only surface the most relevant stack traces and point to exactly where the error or warning is. We've also improved source maps, and muted generated code traces.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQMd8Qrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmyabirypop0bk95ncma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQMd8Qrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmyabirypop0bk95ncma.png" alt="before and after screenshots of error log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Debug your config&lt;/strong&gt;: The new &lt;code&gt;expo config&lt;/code&gt; command enables you to view the evaluated results of &lt;code&gt;app.config.js&lt;/code&gt; or &lt;code&gt;app.json&lt;/code&gt;. You can use &lt;code&gt;expo config --type public&lt;/code&gt; to see the app manifest used in &lt;code&gt;expo publish&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Better interactions with Apple Store Connect from your terminal&lt;/strong&gt;: Faster, smarter authentication, better error handling, and - for the first time ever - get full insight into complex issues right from the console. Where other tools &lt;code&gt;401&lt;/code&gt;, Expo CLI gives you links to resolve issues in seconds. Need to update your payment or accept a contract? Resolve in a couple clicks, and get back to developing incredible (or at least "good") apps!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rlZrXXRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfyffordonfzzjrxbmb9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rlZrXXRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfyffordonfzzjrxbmb9.png" alt="A terminal window showing information about a rejected request from App Store Connect due to an expired Developer Program membership."&gt;&lt;/a&gt;A terminal window showing information about a rejected request from App Store Connect due to an expired Developer Program membership.&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The --config is flag deprecated&lt;/strong&gt;. We suggest using &lt;code&gt;app.config.js&lt;/code&gt; instead. The &lt;code&gt;--config&lt;/code&gt; flag will continue to be supported for existing use cases for the foreseeable future, but it will not be supported in some situations in bare workflow projects, and it will also not be supported on EAS Build. Learn more: &lt;a href="https://expo.fyi/config-flag-migration"&gt;Migrating away from &lt;code&gt;--config&lt;/code&gt; in Expo CLI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The &lt;code&gt;--target flag&lt;/code&gt; is deprecated for SDK 41+&lt;/strong&gt;. This was used to provide slightly different behavior when in a managed or bare app environment, but it ended up being tricky to use because updates published with the &lt;code&gt;bare&lt;/code&gt; target could not run in Expo Go, and updates published with the &lt;code&gt;managed&lt;/code&gt; target could not run in a bare app. We now do any necessary adjustments to accommodate the environment at runtime, so an update bundle will work in either context, provided that the native runtime is compatible with the update.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Versioned Metro Config&lt;/strong&gt;: Rather than adding &lt;code&gt;@expo/metro-config&lt;/code&gt; to your &lt;code&gt;package.json&lt;/code&gt;, you can now import it through the expo package with the vendored &lt;code&gt;expo/metro-config&lt;/code&gt; import. This ensures that your project is always using a compatible version of the package. Learn More: &lt;a href="https://docs.expo.io/guides/customizing-metro/"&gt;Customizing Metro&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Introducing Config Plugins (beta)&lt;/strong&gt;: Config plugins are an important step towards making it possible for library authors to make their native modules part of the Expo ecosystem. This system is in beta, with a more stable release planned for SDK 42. Learn more: &lt;a href="https://docs.expo.io/guides/config-plugins/"&gt;Config Plugins&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#%F0%9F%8F%97-deprecations-renamings-and%C2%A0removals"&gt;
  &lt;/a&gt;
  🏗 Deprecations, renamings, and removals
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Deprecated globals have been removed from the expo package&lt;/strong&gt;.As a result, &lt;code&gt;expo-linear-gradient&lt;/code&gt;, &lt;code&gt;expo-linking&lt;/code&gt;, &lt;code&gt;expo-location&lt;/code&gt;, &lt;code&gt;expo-permissions&lt;/code&gt;, and &lt;code&gt;expo-sqlite&lt;/code&gt; are no longer automatically installed in every project by default as dependencies of &lt;code&gt;expo&lt;/code&gt;. If you were depending on &lt;code&gt;global.expo.LinearGradient&lt;/code&gt; or similar, please install the respective package and import the API from there instead, eg: &lt;code&gt;import { LinearGradient } from 'expo-linear-gradient';&lt;/code&gt;. Refer to &lt;a href="http://expo.fyi/deprecated-globals"&gt;expo.fyi/deprecated-globals&lt;/a&gt; for more information.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Files with the .expo.* extension (eg: MyComponent.expo.js) are no longer recognized as source files.&lt;/strong&gt; If your project source code or dependencies include any files with the &lt;code&gt;.expo.*&lt;/code&gt; extension, &lt;code&gt;expo-cli&lt;/code&gt; will let you know when you upgrade. Refer to &lt;a href="//expo.fyi/expo-extension-migration"&gt;expo.fyi/expo-extension-migration&lt;/a&gt; for more information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcuqhJVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp1jqobz7hzu1t6kd0ll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcuqhJVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp1jqobz7hzu1t6kd0ll.png" alt="Terminal window showing a warning that projects with .expo.* file extensions are deprecated"&gt;&lt;/a&gt;We thought the .expo file extension was neat but it ended up not being necessary or particularly useful, and simplicity wins over neat things.&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;expo-permissions has been deprecated in favor of module-specific permissions methods.&lt;/strong&gt; You should migrate from using &lt;code&gt;Permissions.askAsync&lt;/code&gt; and &lt;code&gt;Permissions.getAsync&lt;/code&gt; to the permissions methods exported by modules that require the permissions. For example: you should replace calls to &lt;code&gt;Permissions.askAsync(Permissions.CAMERA)&lt;/code&gt; with &lt;code&gt;Camera.requestPermissionsAsync()&lt;/code&gt;. There shouldn't be two ways to do an identical thing in a single SDK, and so we picked our preferred approach and are consolidating around it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@react-native-community/async-storage&lt;/code&gt; is now &lt;code&gt;@react-native-async-storage/async-storage&lt;/code&gt;&lt;/strong&gt;. AsyncStorage is next in the packages that are gradually migrating out of the &lt;code&gt;@react-native-community&lt;/code&gt; scope on npm (&lt;a href="https://github.com/react-native-community/discussions-and-proposals/blob/master/partners/0001-organization-repository-policy.md"&gt;more context on why this is happening available here&lt;/a&gt;). We will take care of switching the packages in your dependencies in &lt;code&gt;package.json&lt;/code&gt; when you run &lt;code&gt;expo upgrade&lt;/code&gt;, but after that you will need to either manually update your imports in your source code, or run &lt;code&gt;npx expo-codemod sdk41-async-storage [your-source-directory]&lt;/code&gt; to update it automatically.
Along with this superficial change in package names comes a fix for an issue that occurs when ejecting your project; more information in &lt;a href="https://github.com/expo/expo/issues/8220"&gt;this issue&lt;/a&gt; and these &lt;a href="https://github.com/react-native-async-storage/async-storage/pull/563"&gt;pull&lt;/a&gt; &lt;a href="https://github.com/react-native-async-storage/async-storage/pull/559"&gt;requests&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@expo/metro-config&lt;/code&gt; is now vendored by the &lt;code&gt;expo&lt;/code&gt; package&lt;/strong&gt;. If your &lt;code&gt;metro.config.js&lt;/code&gt; uses &lt;code&gt;@expo/metro-config&lt;/code&gt;, you should switch over to importing it from the &lt;code&gt;expo&lt;/code&gt; package instead. Remove &lt;code&gt;@expo/metro-config&lt;/code&gt; from your &lt;code&gt;package.json&lt;/code&gt; dependencies and change your import in &lt;code&gt;metro.config.js&lt;/code&gt; from &lt;code&gt;@expo/metro-config&lt;/code&gt; to &lt;code&gt;expo/metro-config&lt;/code&gt;. Learn more: &lt;a href="https://docs.expo.io/guides/customizing-metro/"&gt;Customizing Metro&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Legacy Notifications API has been removed&lt;/strong&gt;.The legacy Notifications library (imported from the &lt;code&gt;expo&lt;/code&gt; package) has been deprecated since SDK 38, and is now fully removed in SDK 41. If you're still relying on this package, you should &lt;a href="https://github.com/expo/fyi/blob/master/LegacyNotifications-to-ExpoNotifications.md"&gt;upgrade to &lt;code&gt;expo-notifications&lt;/code&gt;&lt;/a&gt;, which has plenty of improvements and additional features. Learn more: &lt;a href="https://expo.fyi/LegacyNotifications-to-ExpoNotifications"&gt;How to migrate from Expo's LegacyNotifications to the new expo-notifications library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;👋 iOS 10 support has been dropped - Expo SDK 41 supports iOS 11+&lt;/strong&gt;. More information on this from our &lt;a href="https://blog.expo.io/expo-sdk-40-is-now-available-d4d73e67da33"&gt;SDK 40 release notes&lt;/a&gt;:&lt;em&gt;iOS 10 is the last version of iOS that still supports 32-bit simulator builds (x86), and to keep Expo npm packages smaller, we plan to publish only 64-bit pre-build binaries for simulators (x64 and arm64). This has been past due - the last time we dropped an iOS version was over two years ago, when we dropped support for iOS 9 in September 2018. Apple no longer reports usage statistics for iOS 10 directly, but you can get a rough idea from reading the &lt;a href="https://developer.apple.com/support/app-store/"&gt;App Store - iOS and iPadOS usage table&lt;/a&gt; - 6% of all devices use iOS 11 or lower at the time of writing.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;🟢 Node 10 support will be dropped soon from Expo CLI&lt;/strong&gt;.
It's not that we have anything against the number 10, but Node 10 is about to be replaced by Node 12 as the Maintenance LTS release.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;🧹 Dropped SDK 37; will drop SDK 38 next release&lt;/strong&gt;. We routinely drop SDK versions that have low usage in order to reduce the number of versions we need to support. This release sees the end of life for SDK 37. As usual, your standalone apps built with SDK 37 will continue to work; however, SDK 37 projects will no longer work within the latest version of Expo Go. If you want to re-run &lt;code&gt;expo build&lt;/code&gt;, then you'll need to upgrade from SDK 37, preferably to SDK 41 so you won't need to update again for a while (and also because each Expo version is better than the last!). &lt;strong&gt;Our next release is planned for June/July 2021 and, at that time, we'll be dropping support for SDK 38&lt;/strong&gt;. If your project is running on SDK 38, consider upgrading to a newer version in the coming months.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#upgrading-your%C2%A0app"&gt;
  &lt;/a&gt;
  ➡️ Upgrading your app
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#managed-workflow"&gt;
  &lt;/a&gt;
  Managed workflow
&lt;/h2&gt;

&lt;p&gt;Here's how to upgrade your app to Expo SDK 41 from 40:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update to the latest version of Expo CLI: &lt;code&gt;npm i -g expo-cli&lt;/code&gt;. &lt;a href="mailto:expo-cli@4.4.1"&gt;expo-cli@4.4.1&lt;/a&gt; or greater is required.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;expo upgrade&lt;/code&gt; in your project directory.&lt;/li&gt;
&lt;li&gt;If you are using &lt;code&gt;react-navigation&lt;/code&gt; v4, please be sure to update to the latest v4 patch release. This is required due to changes in the version of &lt;code&gt;react-native-screens&lt;/code&gt; included in SDK 41.&lt;/li&gt;
&lt;li&gt;Refer to the "Deprecations, renamings, and removals" section above for breaking changes that are most likely to impact your app.&lt;/li&gt;
&lt;li&gt;Make sure to check the &lt;a href="https://github.com/expo/expo/blob/master/CHANGELOG.md"&gt;changelog&lt;/a&gt; for all other breaking changes!&lt;/li&gt;
&lt;li&gt;Update the Expo app on your phones from the App Store / Google Play. expo-cli&lt;code&gt;will automatically update your apps in simulators if you delete the existing apps, or you can run&lt;/code&gt;expo client:install:ios&lt;code&gt;and&lt;/code&gt;expo client:install:android`.&lt;/li&gt;
&lt;li&gt;If you built a standalone app previously, &lt;a href="https://docs.expo.io/versions/latest/workflow/publishing/#limitations"&gt;remember&lt;/a&gt; that you'll need to create a new build in order to update the SDK version. Run &lt;code&gt;expo build:ios&lt;/code&gt; and/or &lt;code&gt;expo build:android&lt;/code&gt; when you are ready to do a new build for submission to stores.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bare-workflow"&gt;
  &lt;/a&gt;
  Bare workflow
&lt;/h2&gt;

&lt;p&gt;The Bare workflow lets you operate independently of the Expo SDK cycle, updating RN versions and versions of individual Expo packages however and whenever you want. However, if you do stick roughly to Expo SDK versions, these steps will help you to upgrade to Expo SDK 41 from 40:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the latest version of CocoaPods - 1.10.0 or greater is required.&lt;/li&gt;
&lt;li&gt;Update to the latest version of Expo CLI: &lt;code&gt;npm i -g expo-cli&lt;/code&gt;. &lt;a href="mailto:expo-cli@4.4.1"&gt;expo-cli@4.4.1&lt;/a&gt; or greater is required.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;expo upgrade&lt;/code&gt; in your project directory.&lt;/li&gt;
&lt;li&gt;Update to &lt;code&gt;platform :ios, '11.0'&lt;/code&gt; in your Podfile.&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;compileSdkVersion&lt;/code&gt; and &lt;code&gt;targetSdkVersion&lt;/code&gt; to 30 in &lt;code&gt;android/build.gradle&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you are using &lt;code&gt;react-navigation&lt;/code&gt; v4, please be sure to update to the latest v4 patch release. This is required due to changes in the version of &lt;code&gt;react-native-screens&lt;/code&gt; included in SDK 41.&lt;/li&gt;
&lt;li&gt;Rebuild your native projects with &lt;code&gt;npm run ios&lt;/code&gt; and &lt;code&gt;npm run android&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make sure to check the &lt;a href="https://github.com/expo/expo/blob/master/CHANGELOG.md"&gt;changelog&lt;/a&gt; for other breaking changes!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>mobile</category>
      <category>reactnative</category>
      <category>ios</category>
      <category>android</category>
    </item>
    <item>
      <title>Replace Loops using Recursion</title>
      <author>Randy Rivera</author>
      <pubDate>Fri, 23 Apr 2021 22:48:13 +0000</pubDate>
      <link>https://dev.to/rthefounding/replace-loops-using-recursion-3npg</link>
      <guid>https://dev.to/rthefounding/replace-loops-using-recursion-3npg</guid>
      <description>&lt;p&gt;Recursion is the concept that a function can be expressed in terms of itself. To help understand this, start by thinking about the following task: Add the first n elements of an array to create the product of those elements. we can rewrite sum in terms of itself and never need to use a loop.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here we write a recursive function, sum(arr, n), that returns the sum of the first n elements of an array arr. &lt;/li&gt;
&lt;li&gt;Note: Recursive functions must have a base case when they return without calling the function again (in this example, when n &amp;lt;= 0), otherwise they can never finish executing.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sum(arr, n) {
if (n &amp;lt;= 0) {
  return 0;
} else {
  return sum(arr, n - 1) + arr[n - 1];
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(sum([2, 3, 4, 5], 3)); will display 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// sum([2, 3, 4, 5], 3 - 1) + arr[3 - 1];
// sum([2, 3, 4 ,5], 2) + arr[2];
// sum([2, 3, 4, 5], 2) + 4;
//        n = 2

// sum([2, 3, 4, 5], 2 - 1) + arr[2 - 1];
// sum([2, 3, 4, 5], 1) + arr[1];
// sum([2, 3, 4, 5], 1) + 3; 
//      n = 1             3

// sum([2, 3, 4, 5], 1 - 1) + arr[1 - 1];
// sum([2  3, 4, 5], 0) + arr[0];
// sum([2, 3, 4, 5], 0) + 2;
//      n = 0             2

//      we hit our base case so now n = 0

// 0 + 2 + 3 + 4 = 9
// we want it to return 9 because 4 + 3 + 2 = 9;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>Ruby on Rails GitHub Action Workflow</title>
      <author>Harish Babu</author>
      <pubDate>Fri, 23 Apr 2021 22:36:43 +0000</pubDate>
      <link>https://dev.to/chekkan/ruby-on-rails-github-action-workflow-eeo</link>
      <guid>https://dev.to/chekkan/ruby-on-rails-github-action-workflow-eeo</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l4fnFlyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1522776851755-3914469f0ca2%3Fcrop%3Dentropy%26cs%3Dtinysrgb%26fit%3Dmax%26fm%3Djpg%26ixid%3DMnwxMTc3M3wwfDF8c2VhcmNofDQxfHxydWJ5JTIwb24lMjByYWlsc3xlbnwwfHx8fDE2MTkyMTcyMjA%26ixlib%3Drb-1.2.1%26q%3D80%26w%3D2000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l4fnFlyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1522776851755-3914469f0ca2%3Fcrop%3Dentropy%26cs%3Dtinysrgb%26fit%3Dmax%26fm%3Djpg%26ixid%3DMnwxMTc3M3wwfDF8c2VhcmNofDQxfHxydWJ5JTIwb24lMjByYWlsc3xlbnwwfHx8fDE2MTkyMTcyMjA%26ixlib%3Drb-1.2.1%26q%3D80%26w%3D2000" alt="Ruby on Rails GitHub Action Workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The goal is to start running tests that is part of my code base with each push to &lt;code&gt;main&lt;/code&gt; and also any pull requests to &lt;code&gt;main&lt;/code&gt; branch. This blog post will not cover any linting or deployment of the ruby on rails web application. The final yaml is tested with ruby version &lt;code&gt;3.0.0&lt;/code&gt; and ruby on rails version &lt;code&gt;6.1.3.1&lt;/code&gt; at the time of writing. Skip to end of the post to view the finished yaml.&lt;/p&gt;

&lt;p&gt;We will start with &lt;a href="https://github.com/actions/starter-workflows/blob/ffb4bccd2d52e308ec66fa63f218d93db6dd94a1/ci/ruby.yml"&gt;recommended ruby starter workflow yaml file&lt;/a&gt; from GitHub actions page. The starter file provides you with a matrix with various ruby versions. Because, the workflow I am setting up is for a web application that will be deployed to an environment with a specific ruby version install, I will delete the &lt;code&gt;strategy&lt;/code&gt; section completely and also specify my ruby version to &lt;code&gt;3.0&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Ruby&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ruby/setup-ruby@473e4d8fe5dd94ee328fdfca9f8c9c7afc9dae5e&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;ruby-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.0&lt;/span&gt;
        &lt;span class="na"&gt;bundler-cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;# runs 'bundle install' and caches installed gems automatically&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am planning on deploying the application in a docker container running on linux. Therefore, I've set my build environment to be an &lt;code&gt;ubuntu&lt;/code&gt; base image. If you are developing on something other than linux (which is my case), you will also need to add support for linux with your bundle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle lock &lt;span class="nt"&gt;--add-platform&lt;/span&gt; x86_64-linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the ruby setup step, the next step thats already provided is the test step with &lt;code&gt;bundle rake&lt;/code&gt; command. I have my project setup to run with mysql database. Therefore, we need to define a service for mysql for the tests to pass. Read more about service containers at &lt;a href="https://docs.github.com/en/actions/guides/about-service-containers#about-service-containers"&gt;G&lt;/a&gt;&lt;a href="https://docs.github.com/en/actions/guides/about-service-containers#about-service-containers"&gt;itHub documentation site&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Label used to access the service container&lt;/span&gt;
      &lt;span class="na"&gt;mysql&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Docker Hub image and tag&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mysql:8.0&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-secret-password&lt;/span&gt;
          &lt;span class="na"&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;db_name&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# replace with actual name&lt;/span&gt;
          &lt;span class="na"&gt;MYSQL_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;test_user&lt;/span&gt;
          &lt;span class="na"&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;password&lt;/span&gt;
        &lt;span class="c1"&gt;# Set health checks to wait until mysql has started&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;-&lt;/span&gt;
          &lt;span class="s"&gt;--health-cmd "mysqladmin ping -h localhost -u root -p$$MYSQL_ROOT_PASSWORD"&lt;/span&gt;
          &lt;span class="s"&gt;--health-interval 10s&lt;/span&gt;
          &lt;span class="s"&gt;--health-timeout 5s&lt;/span&gt;
          &lt;span class="s"&gt;--health-retries 5&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now a container will be spun up my GitHub action and made available on the port you specified. The &lt;code&gt;options&lt;/code&gt; section specifies that the service is only ready when &lt;code&gt;mysqladmin ping&lt;/code&gt; command succeeds. The next step is to setup the database required for your tests. To do that, we will make use of the &lt;code&gt;DATABASE_URL&lt;/code&gt; environment variable and the &lt;code&gt;bin/rails db:setup&lt;/code&gt; &lt;a href="https://guides.rubyonrails.org/active_record_migrations.html#setup-the-database"&gt;command&lt;/a&gt;. Make sure to use the prefix &lt;code&gt;bin&lt;/code&gt;. You can read more about configuration and order of preference at &lt;a href="https://guides.rubyonrails.org/configuring.html#configuring-a-database"&gt;ruby on rails documentation site&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup test database&lt;/span&gt;
      &lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bin/rails db:setup&lt;/span&gt;
      &lt;span class="s"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mysql2://test_user:password@127.0.0.1:3306/&amp;lt;db_name&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure that &lt;code&gt;DATABASE_URL&lt;/code&gt; environment variable starts with &lt;code&gt;mysql2&lt;/code&gt;. For some reason, I can't seem to use &lt;code&gt;localhost&lt;/code&gt; for the hostname part. If someone could point me to the reason, that will be much appreciated 🙏.&lt;/p&gt;

&lt;p&gt;After the database is setup, you might also have to make sure that &lt;code&gt;webpacker&lt;/code&gt; is installed. Refer to the &lt;a href="https://edgeguides.rubyonrails.org/webpacker.html#installing-webpacker"&gt;documentation&lt;/a&gt; for up to date information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Webpacker&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bin/rails webpacker:install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final yaml file...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ruby&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Label used to access the service container&lt;/span&gt;
      &lt;span class="na"&gt;mysql&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Docker Hub image and tag&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mysql:8.0&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3306:3306&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-secret-password&lt;/span&gt;
          &lt;span class="na"&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;db_name&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#replace with name&lt;/span&gt;
          &lt;span class="na"&gt;MYSQL_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;test_user&lt;/span&gt;
          &lt;span class="na"&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;password&lt;/span&gt;
        &lt;span class="c1"&gt;# Set health checks to wait until mysql has started&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;-&lt;/span&gt;
          &lt;span class="s"&gt;--health-cmd "mysqladmin ping -h localhost -u root -p$$MYSQL_ROOT_PASSWORD"&lt;/span&gt;
          &lt;span class="s"&gt;--health-interval 10s&lt;/span&gt;
          &lt;span class="s"&gt;--health-timeout 5s&lt;/span&gt;
          &lt;span class="s"&gt;--health-retries 5&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Ruby&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ruby/setup-ruby@473e4d8fe5dd94ee328fdfca9f8c9c7afc9dae5e&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;ruby-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.0&lt;/span&gt;
        &lt;span class="na"&gt;bundler-cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;# runs 'bundle install' and caches installed gems automatically&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup test database&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bin/rails db:setup&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mysql2://test_user:password@127.0.0.1:3306/&amp;lt;db_name&amp;gt;&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Webpacker&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bin/rails webpacker:install&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run tests&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bundle exec rake&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>rails</category>
      <category>ruby</category>
      <category>github</category>
      <category>ci</category>
    </item>
    <item>
      <title>Take care of your physiological needs to make optimal architectural decisions 🤔
</title>
      <author>Krzysztof Platis</author>
      <pubDate>Fri, 23 Apr 2021 21:42:30 +0000</pubDate>
      <link>https://dev.to/krisplatis/take-care-of-your-physiological-needs-to-make-optimal-architectural-decisions-1ldd</link>
      <guid>https://dev.to/krisplatis/take-care-of-your-physiological-needs-to-make-optimal-architectural-decisions-1ldd</guid>
      <description>&lt;p&gt;&lt;strong&gt;As a software architect, your most important skill is making optimal decisions. But your brain totally depends on your body. When you're sleepy 🛏️, hungry 🍴 or need to visit a toilet 🚽, your brain gets disturbed. Then it can hardly make any well-balanced judgements. Don't force yourself to finish your task first, unless you want to make some bad decision. When feeling strange or anxious, just pause, take care of yourself and get back to your work. You’ll finish your task better when calmed down.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The great book “Self-Reg” (by Stuart Shanker) explained to me the implication: neglecting physiological needs cause higher susceptibility to stress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfregulation"&gt;
  &lt;/a&gt;
  Self-regulation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#read-the-signals-from-your-body"&gt;
  &lt;/a&gt;
  Read the signals from your body
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;tapping your fingers nervously&lt;/li&gt;
&lt;li&gt;shaking your leg&lt;/li&gt;
&lt;li&gt;feeling a headache&lt;/li&gt;
&lt;li&gt;ruminating past mistakes or thinking about things which can go wrong&lt;/li&gt;
&lt;li&gt;getting easily frustrated by small problems&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#identify-your-stressors"&gt;
  &lt;/a&gt;
  Identify your stressors
&lt;/h3&gt;

&lt;p&gt;Ask yourself: “Why now?”&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;did you have enough sleep today? Wanna yawn?&lt;/li&gt;
&lt;li&gt;are you hungry? Is it now your usual time for a meal?&lt;/li&gt;
&lt;li&gt;are you thirsty?&lt;/li&gt;
&lt;li&gt;do you need to visit a toilet?&lt;/li&gt;
&lt;li&gt;do you need more movement?&lt;/li&gt;
&lt;li&gt;are you tired of noise?&lt;/li&gt;
&lt;li&gt;is anyone or anything else stressing you?&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#reduce-your-stressors"&gt;
  &lt;/a&gt;
  Reduce your stressors
&lt;/h3&gt;

&lt;p&gt;When you know what your body needs, satisfy it. “Turn down the volume” of your stressor. 🔇&lt;br&gt;
If you cannot switch it off completely, take a break and use your best tricks that calm you down. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;eat 🥪&lt;/li&gt;
&lt;li&gt;drink 🥤 &lt;/li&gt;
&lt;li&gt;take a walk 🚶‍♂️&lt;/li&gt;
&lt;li&gt;listen to relaxing music 🎧&lt;/li&gt;
&lt;li&gt;make your coffee ☕️&lt;/li&gt;
&lt;li&gt;take a short power nap 🛏&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#our-highest-priority-is-to-protect-our-ability-to-set-priorities"&gt;
  &lt;/a&gt;
  “Our highest priority is to protect our ability to set priorities”
&lt;/h2&gt;

&lt;p&gt;(Essentialism - Greg McKeown)&lt;/p&gt;

&lt;p&gt;When you’re stressed out, your perception doesn’t adapt quickly to changing circumstances. You focus easily on irrelevant details and loose the big picture. You invest time in perfectionism for things that don’t deserve it. &lt;/p&gt;

&lt;p&gt;To make optimal decisions you often need to rely on your intuition. It’s a general body’s feeling of comfort or discomfort when evaluating some idea. But any neglected physiological need can disrupt your gut feeling.&lt;/p&gt;

&lt;p&gt;If you don’t reduce your stressor for too long, the tension escalates and you totally loose the essence. Your attention can hardly get away from what you’ve been working on for long time. That can be a vicious circle which may disrupt both your health and the health of the project’s architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;In every work day you face challenges which require from you setting priorities and making judgements. So you need your brain to stay efficient. But it totally depends on your body, so you should take care of it. Read it's signals, identify stressors and reduce them. It's for the sake of your health and the health of your project which depend on your optimal decisions. 😉&lt;/p&gt;

</description>
      <category>5days5blogposts</category>
      <category>decisions</category>
      <category>selfcare</category>
    </item>
    <item>
      <title>Bearers of the bad news</title>
      <author>Ania Gajecka</author>
      <pubDate>Fri, 23 Apr 2021 21:40:19 +0000</pubDate>
      <link>https://dev.to/annadayl/bearers-of-the-bad-news-41md</link>
      <guid>https://dev.to/annadayl/bearers-of-the-bad-news-41md</guid>
      <description>&lt;p&gt;Testing is often seen as a destructive activity. Spotting and reporting failures may be regarded as criticism against the product and against the author. I, as a software tester, am the bearer of the &lt;em&gt;bad news&lt;/em&gt;. We are the messengers of undesired revelations about issues. &lt;/p&gt;

&lt;p&gt;Testing is important. It considerably contributes to assuring that the application does everything that it was designed for. Looking for defects requires curiosity, attention to detail and professional pessimism. You probably want to know as soon as possible that something is wrong with your product. Defects found during testing will save time and money later. Win-win!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>5days5blogposts</category>
    </item>
    <item>
      <title>How to Use Visme to Help Your Desing Projects Stand Out</title>
      <author>Sarah Bartley</author>
      <pubDate>Fri, 23 Apr 2021 21:17:21 +0000</pubDate>
      <link>https://dev.to/theoriginalbpc/how-to-use-visme-to-help-your-desing-projects-stand-out-2hj0</link>
      <guid>https://dev.to/theoriginalbpc/how-to-use-visme-to-help-your-desing-projects-stand-out-2hj0</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published September 28, 2019 on BritishPandaChick Codes. I made tweaks to the original post so it works for The Practical Dev.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On July 11, I was tagged in a Twitter thread where developers were sharing their 5 favorite tools or apps they couldn't live without then tagging more developers so the list of resources would continue to grow. My tweet listed five things I regularly use when I code or blog. My 5 favorite tools are Google, Twitter, Github, CodePen, and Canva.&lt;/p&gt;
 

&lt;p&gt;You've already seen CodePen here on some of the code tutorial posts. Github is online platform developers use to host their code on the web. Canva is an online graphic design tool. I regularly use Canva to create banners and logos for websites.&lt;/p&gt;

&lt;p&gt;After this tweet was published, I went on with the rest of my day. A few days later, Visme sent me an e-mail about the tweet I posted. They asked me if they knew about their design tool.&lt;/p&gt;

&lt;p&gt;They asked me to take a closer look at their tool and play around with it so I could share it with you here. Visme gave me a complimentary premium account to use for this review. I started playing around with Visme once I finished the Skillcrush 300 series.&lt;/p&gt;

&lt;p&gt;After playing around with the tool and making some projects, here's my official guide I promised for Visme. This post will show you how to use Visme to create your own design projects such as the blog graphic I made for today's post.&lt;/p&gt;

&lt;h2&gt;What is Visme?&lt;/h2&gt;

&lt;p&gt;Visme is a data presentation and visualization tool that allows users to make a variety of visual content. Users can use the platform to create different professional graphics and presentations. Think of this tool as a mix of Microsoft PowerPoint, Adobe Photoshop, and Google Drive. You can learn more about Visme from this video on their YouTube channel.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jpYosGCV9vI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;How much does Visme cost?&lt;/h3&gt;

&lt;p&gt;At the time of this post, you can buy Visme as an individual, school, or business. You can pay per month or yearly. Individual basic membership is completely free. You’ll be limited with the number of projects, storage, and templates but you’ll still be able to get the main benefits from Visme.&lt;/p&gt;

&lt;p&gt;The individual standard plan is $14 a month. You get more storage and projects you can keep on the platform. Other perks include creating color palettes, downloading projects as PDFs, and no Visme brand on projects.&lt;/p&gt;

&lt;p&gt;The individual complete membership is $25 a month. Members get the full benefits of the platform including privacy controls, slide library, and downloading as HTML code.

&lt;/p&gt;
&lt;p&gt;Do you want to use Visme for your business or at your school? Visme offers standard and complete packages for businesses and schools. A business single package is $25 a month while an education single package is $30 a semester.&lt;/p&gt;

&lt;p&gt;You can contact the customer service team to learn more. If you would like to learn more about Visme's pricing, head to the Visme website and see how they break down their prices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.visme.co/"&gt;==&amp;gt; Click here to learn more about Visme!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;So how do I use Visme?&lt;/h2&gt;

&lt;p&gt;You can make a Visme account by creating your own username and password. Users can also use their Google or Facebook accounts to login. Once you login, you will be taken straight to the dashboard.&lt;/p&gt;

&lt;p&gt;At the top of the dashboard beside the help icon and the bell for notifications, you will see your account name and e-mail. If you click on this, it will open to a sub-menu with the account type and account number. You will want to keep note of this in case you need to contact Visme customer service and discuss your account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1RLa8Wwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51135118040_2988b6efaa_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1RLa8Wwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51135118040_2988b6efaa_m.jpg" alt="Visme Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you login to Visme, you'll see all the projects you made here. You can also see these projects in all projects or my projects on the black sidebar navigation menu. Other things you can see on the sidebar menu are share with me, slide library, and my folders.&lt;/p&gt;

&lt;p&gt;Share with me is where you can see projects others have shared with you. Slide library is where you can find all the slides you have saved for future presentations. Then My Folders is where you can make or see folders.&lt;/p&gt;

&lt;p&gt;At the end of the sidebar is the trash, my brand, analytics, and form results. Trash is where you find all the projects you've deleted. My brand is where you'll be able to save your brand information such as fonts, color palette, logos, and templates.&lt;/p&gt;

&lt;p&gt;Analytics is where you will be able to track users visiting your published projects and download this data. Form result is where you can find data from any forms you make. Like the analytics, you can download this information too if you like.&lt;/p&gt;

&lt;h2&gt;Let's create a brand new project!&lt;/h2&gt;

&lt;p&gt;You can create a brand new project in two ways. You can click the button in the main dashboard window at the bottom of the create button at the top of the black sidebar menu. Once you click the create button, you will be taken to a page to decide which project you will make.&lt;/p&gt;

&lt;p&gt;At the top of the page, you will see a black navigation menu with the types of projects you can make. Visme allows users to create presentations, infographics, documents, printables, web graphics, social graphics, and custom size. Custom size allows users to create any size project they would like.&lt;/p&gt;

&lt;p&gt;Users can set the width and the height of their projects by pixels, inches, or centimeters. You can also select by common sizes such as presentation (16.9), presentation (4.3), US letter, A4, Infographic, and business card. Once you click on a type of project you want to build, the page will show users theme templates Visme has created or a blank project.&lt;/p&gt;

&lt;p&gt;If you click on presentations, users can access libraries of ready-use slides Visme has created. Documents, printables, web graphics, and social graphics will have a sub-menu at the top of the page which shows users the different types of projects you can make. So if you would like to make a menu, you can find menu templates by clicking printables then menus in the sub-menu that appears underneath the black navigation menu.&lt;/p&gt;

&lt;h2&gt;Creating a Pinterest Graphic&lt;/h2&gt;

&lt;p&gt;Let's start with the Pinterest graphic. Once I click the social graphics and pick the Pinterest icon, I'm taken straight to the Visme workspace. The image below is what the Visme workspace looks like for almost every project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wod5UlHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51134227923_8cf19d1029_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wod5UlHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51134227923_8cf19d1029_m.jpg" alt="Visme Canvas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the top of the page is the black navigation bar. You can click on the three bars icon go back to the dashboard, view the options, change settings and modify your canvas size. Besides the three bars icon, you'll find the save, undo, help, and project name. You can click on the project name to change it to anything you like. I changed mine to sample-pinterest for this review.&lt;/p&gt;

&lt;p&gt;Now let's start with the left side of the workspace. The left navigation bar is where you'll find everything you need to make any project. Here you'll find layouts, basics, graphics, data, media, theme colors, and my files.&lt;/p&gt;

&lt;p&gt;When you click on each of these icons on the navigation bar, a window will open up to show samples and different content you can use to create your designs. Some of these items will give you ones Visme provides but you still are able to add your own items for your design. I'm going to start by adding text to my blog graphic.&lt;/p&gt;

&lt;p&gt;When I add text to my Visme canvas, a menu bar will appear for the text. This is where you can change the fonts, colors, font size, and more. You can add effects, animation, or arrange the text on the canvas. You can even turn your text into a link.&lt;/p&gt;

&lt;p&gt;As you add items to the canvas, Visme will show you a preview of your project on the right side of the screen. You can also click the preview button at the top right navigation menu to preview your project up closer. If you would like to add more pages, you can press the add page icon at the top of the right window.&lt;/p&gt;

&lt;p&gt;When you are working on your project and what to edit on the text, you click on the text you want to change to get the text menu. Clicking the text once will give you the following menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--96j260-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51134009226_c331946322_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--96j260-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51134009226_c331946322_m.jpg" alt="Text Menu at the top of the Visme canvas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This menu allows users to change the text by adding the following to a text box.&lt;/p&gt;


&lt;ul&gt;

&lt;li&gt;spacing&lt;/li&gt;

&lt;li&gt;fill&lt;/li&gt; 
&lt;li&gt;border&lt;/li&gt;

&lt;li&gt;special characters&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;alignment&lt;/li&gt;

&lt;p&gt;The rest of the menu gives you similar items that were in the original text menu such as effect, animate and duplicate. If you double-check on the menu, you will be able to change the fonts, font size, and colors.&lt;/p&gt;

&lt;p&gt;I am going to add a line in between my logo and graphic text. In order to add shapes, I'm going to click on the graphics icon on the left menu and click lines. I just picked the line I wanted and double-click it to have it appear on the canvas.&lt;/p&gt;

&lt;p&gt;Then I just need to move the line and change the line size by clicking on the black dots that appear when I click on the line. If you click on the line, you can open up the icon menu to change the color, thickness or flip the icon vertically.&lt;/p&gt;

&lt;h2&gt;Ready to publish?&lt;/h2&gt;

&lt;p&gt;It is time to think about how you want to publish it. Now that you are satisfied with your project, you can publish it. I'm going to download my Pinterest graphic.&lt;/p&gt;

&lt;p&gt;In order to do this, I just need to click on the download button on the top right of the black navigation bar. When I click the button, a window opens with several options. These options include downloading the project as an image,  document, or HTML5 file.&lt;/p&gt;

&lt;p&gt;Visme gives users two options for image and document. You can download the project as a JPG or a PNG file. Visme gives users the option to download the image as a high resolution at the top so just switch the button if you want a high-resolution image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SFaw5qCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51134248833_ca4cb80a5f_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SFaw5qCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51134248833_ca4cb80a5f_m.jpg" alt="How to Use Visme to Help Your Design Projects Stand Out"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you would like to download it as a document, you choose between the PDF or PPTX.  PDF files have a button that users can click to show bleed marks. Bleed marks just show the areas that need to be trimmed after the project is printed. So if you want your project professionally printed, you can turn the bleed marks on.&lt;/p&gt;

&lt;p&gt;Visme encourages users to use HTML5 if they plan on using any animations or effects since this file type will preserve all these so you can use them offline. They even include a gear icon for advanced settings for HTML5 files so you can change the page design, display options, social/engagement, and audio controls I am going to click the PNG image.&lt;/p&gt;

&lt;p&gt;As soon as I click the PNG option, my design project is generated and the project is downloaded to my computer. If it doesn't automatically download, you might get a window saying that you've been chosen to open your Visme file from the Visme website. It will ask what you want to do with this file from opening it or saving it.&lt;/p&gt;

&lt;h2&gt;Sharing Projects Online&lt;/h2&gt;

&lt;p&gt;If you would like to share your project online, click the share button on the black navigation bar. This opens a window with three options. First, you can publish it on the web and get a shareable link.&lt;/p&gt;

&lt;p&gt;This will also allow Google to index your project. You can share your project privately. Two, you can share your project privately and allow certain people access to your project. Third, you can embed your projects on your website or blog.&lt;/p&gt;

&lt;p&gt;On the top right corner of the share online window, you'll see the gear for advanced settings. Advanced settings are where you want to change page design, display options, audio controls, and social/engagement. You can change any of these settings for any of the share online options.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is everything you need to know to start making design projects on Visme. If you need any help using the Visme workspace, Visme has tons of great ways to help you with your projects. You can get tips from the Visme blog. There are tons of great posts on their blog for creating awesome Visme designs.&lt;/p&gt;

&lt;p&gt;You can also use the Help icon on your Visme dashboard to find more guides and tutorials. You can also e-mail the Visme customer service team with any questions. Once you've made a Visme account, you can register for one of the free webinars Visme hosts every Thursday.&lt;/p&gt;

&lt;p&gt;Each webinar has the Visme team walking viewers through the Visme tool and answer any questions live on the webinar you might have. You can ask the customer service team for a webinar link if you would like to attend the webinar.&lt;/p&gt;

&lt;p&gt;Have you used Visme before? Share your experience with the Visme tool in the comments. You can also share any design tips you have in the comments.&lt;/p&gt;


&lt;/ul&gt;

</description>
      <category>visme</category>
      <category>design</category>
    </item>
    <item>
      <title>Would you use a webapp to search linux commands</title>
      <author>Vivek</author>
      <pubDate>Fri, 23 Apr 2021 21:16:17 +0000</pubDate>
      <link>https://dev.to/vivekweb2013/would-you-use-a-webapp-to-search-linux-commands-26kl</link>
      <guid>https://dev.to/vivekweb2013/would-you-use-a-webapp-to-search-linux-commands-26kl</guid>
      <description>&lt;p&gt;How do you remember the options and flags supported by a specific linux command, do you use search engine every time to look for the supported options and flags.&lt;/p&gt;

&lt;p&gt;You might have some commands with lots of options which might take too long to type. Do you store such commands for reusing them? where do you store them? maybe in notes app or some text documents?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqFibUWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvuqzir6gghf3k4t9xpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqFibUWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvuqzir6gghf3k4t9xpm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Would you use a free web application to store the commands for you privately. Try a free webapp I've developed to give back to community which has gave me so much.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://commandhunt.com"&gt;https://commandhunt.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's completely free, allows copying a command with a single click, generate the commands using nicely designed user interface (by selecting required flags and filling necessary values for required options).&lt;/p&gt;

&lt;p&gt;your valued feedback is much appreciated.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>
Top 10 best extensions for VScode - #1</title>
      <author>Francisco</author>
      <pubDate>Fri, 23 Apr 2021 21:01:06 +0000</pubDate>
      <link>https://dev.to/franciscode/top-10-best-extensions-for-vscode-1-414l</link>
      <guid>https://dev.to/franciscode/top-10-best-extensions-for-vscode-1-414l</guid>
      <description>&lt;p&gt;Hello everybody! This is my first post in English, today we will see the 10 best extensions for Visual Studio Code.&lt;/p&gt;

&lt;p&gt;VSCode extensions serve to speed up certain tasks that can take away valuable seconds in our work, that's why the community of this code editor has created several tools for its useful operation.&lt;/p&gt;

&lt;p&gt;Today I bring you, my top 10 extensions for Visual Studio Code.&lt;/p&gt;

&lt;p&gt;When we start Visual Studio Code we will have what we should be used to, that's right, the typical welcome screen in every code editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--axaARdJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qztcpi4trwmifpl72vmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--axaARdJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qztcpi4trwmifpl72vmb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we will have to go to the extensions box:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ab5Gytrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyv5pe1uyj6acrx1yp0r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ab5Gytrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyv5pe1uyj6acrx1yp0r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now we only need to look for the following extensions&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_hGTB76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vgxjx4ifaw2seoe6pc8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_hGTB76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vgxjx4ifaw2seoe6pc8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We simply search for its name in the text box, and select the first one.&lt;/p&gt;

&lt;p&gt;We will click on install&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZf83Of---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucl0j37j8qel20jk1xp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZf83Of---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucl0j37j8qel20jk1xp2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What does this extension do?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;This extension is used to format the document, in other words to tidy it up and clean it up.&lt;/p&gt;

&lt;p&gt;To use it we will simply have to be in the file in which we want to clean it, for example this very, very messy HTML file 😂.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BxYF6pHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/confeiojvuopfjvppmej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BxYF6pHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/confeiojvuopfjvppmej.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use the extension press the following key combination:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And type Format Document and press Enter&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dwBaZJnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o6mwtiv65kjrl4iuakz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dwBaZJnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o6mwtiv65kjrl4iuakz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or simply &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Shift + Alt + F&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;And with this we will have our code in order!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-server"&gt;
  &lt;/a&gt;
  Live Server
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sfm-4zyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx3t1dvvjp21hdxkga5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sfm-4zyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx3t1dvvjp21hdxkga5f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As in the previous extension, simply click on install.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;To use it, simply type&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And type Live server&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QohgOw13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q7fabxbsrsrikno5qae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QohgOw13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q7fabxbsrsrikno5qae.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the one that says &lt;strong&gt;"Open with live Server"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Or to make it shorter, we will make the following combination&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Alt + L + O&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will open our default browser and give us a view of our HTML file, this extension allows us to simply save the files with VSCode with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl + S&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And the changes will already be in the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#material-icon-theme"&gt;
  &lt;/a&gt;
  Material Icon Theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--woqZ6h1M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3znfo5hp8ubfs318ljo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--woqZ6h1M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3znfo5hp8ubfs318ljo8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension will give us a wide variety of icons for a wide variety of files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1LibXKwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmh2w1kykx1zc0or4muh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1LibXKwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmh2w1kykx1zc0or4muh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As in the previous ones, we will look for it by its name and click on install.&lt;/p&gt;

&lt;p&gt;Once installed, the following window will appear&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hhA0opL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xer0t1x2jec12j90ye2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hhA0opL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xer0t1x2jec12j90ye2i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We should select the one that says Material Icon Theme&lt;/p&gt;

&lt;p&gt;And that's it! we have new icons for our visual studio code!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ok ok, we already have 3 extensions, there is still a lot left, but let's not be discouraged!!! We will have our very nice Code Editor at the end of this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#indent-rainbow"&gt;
  &lt;/a&gt;
  Indent Rainbow
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFeYw8FC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rblh59epae8ioxi8pdy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFeYw8FC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rblh59epae8ioxi8pdy2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension will help us a lot to order our code, the installation is the same as we have followed before, (The search for it, and simply give the button to install)&lt;/p&gt;

&lt;p&gt;The installation is very fast and to check that it is ready we will go to our test file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JdrThvuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xry3gk868724s7e2e3r2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JdrThvuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xry3gk868724s7e2e3r2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see this extension will help us to guide us, to see where a tag or key starts and where it ends.  &lt;/p&gt;

&lt;p&gt;And now the following extension will give an excellent essence to our editor&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-monokai-theme"&gt;
  &lt;/a&gt;
  One Monokai Theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OL9ymktw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hui3hh2qzpwpr1in6wg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OL9ymktw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hui3hh2qzpwpr1in6wg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the One Monokai theme, to install it we must follow the procedure previously discussed and when we install it, the following will appear&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aalgtDgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84jvkng7dtqjxg1wy3ml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aalgtDgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84jvkng7dtqjxg1wy3ml.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And simply select the option One Monokai&lt;/p&gt;

&lt;p&gt;When we go back to our test HTML file it will look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SBtDH342--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fg2gqkeopt0qamg74sp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SBtDH342--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fg2gqkeopt0qamg74sp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well well, then I decided to leave this post until here so as not to extend it too much, and also not to fill the reader with so much information haha.&lt;br&gt;
I hope this post will be very supported as it is my first post in English, thank you very much for reading, remember to leave the Heart, Unicorn and save&lt;/p&gt;

&lt;p&gt;Keep Programming!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>plugin</category>
      <category>discuss</category>
      <category>editor</category>
    </item>
    <item>
      <title>Simple way to transform any Google Sheet to JSON</title>
      <author>Krzysztof Kopieczek</author>
      <pubDate>Fri, 23 Apr 2021 20:53:02 +0000</pubDate>
      <link>https://dev.to/kopieczekdev/simple-way-to-transform-any-google-sheet-to-json-1o74</link>
      <guid>https://dev.to/kopieczekdev/simple-way-to-transform-any-google-sheet-to-json-1o74</guid>
      <description>&lt;p&gt;Solution is really easy, but with one big drawback - the sheet needs to accessed publicly on the Internet. In my case this is not a permanent feature - I just have to move data from one source to another one, but I would not recommend this solution if you deal with sensitive data. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prepare-the-sheet"&gt;
  &lt;/a&gt;
  Prepare the sheet
&lt;/h1&gt;

&lt;p&gt;Go to &lt;strong&gt;File &amp;gt; Publish to the web&lt;/strong&gt; and select &lt;strong&gt;Entire Document &amp;gt; Web Page&lt;/strong&gt;. That's all here, just close the window. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qd75C4Sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7n6dszibuh8j3osy76b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qd75C4Sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7n6dszibuh8j3osy76b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, copy the sheet id from the URL in the browser.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-saviour"&gt;
  &lt;/a&gt;
  The saviour
&lt;/h1&gt;

&lt;p&gt;&lt;a href="http://gsx2json.com"&gt;gsx2json&lt;/a&gt; is a tool which does all the magic for us. Please go to the project website and buy a coffee to the author if it helped you. It saved me a ton of time!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#get-the-data"&gt;
  &lt;/a&gt;
  Get the data
&lt;/h1&gt;

&lt;p&gt;I use C# but the code is quite simple. Just create the url with the sheet id and get the JSON.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using System.Net;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sheetId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1zpss4g850wpb9YltdzefCyvl2Vl4gDZ-Ip4Hk-dQjOk"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"http://gsx2json.com/api?id=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sheetId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DownloadStringTaskAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the &lt;a href="http://gsx2json.com/api?id=1zpss4g850wpb9YltdzefCyvl2Vl4gDZ-Ip4Hk-dQjOk"&gt;link&lt;/a&gt; to the API if you'd like to review the JSON created by gsx2json.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#transform-the-data"&gt;
  &lt;/a&gt;
  Transform the data
&lt;/h1&gt;

&lt;p&gt;Now, when you got the data, do whatever it has to be done. Here is an example of extracting rows from the JSON response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using Newtonsoft.Json.Linq;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"rows"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToObject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h1&gt;

&lt;p&gt;Remember to unpublish the sheet from the Internet. And that's all!&lt;/p&gt;

</description>
      <category>5days5blogposts</category>
      <category>googlesheets</category>
      <category>csharp</category>
      <category>json</category>
    </item>
  </channel>
</rss>
