<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to implement Elastic Search Using Spring Boot?</title>
      <author>ROHAN KADAM</author>
      <pubDate>Mon, 13 Dec 2021 03:54:13 +0000</pubDate>
      <link>https://dev.to/rohan2596/how-to-implement-elastic-search-using-spring-boot-ljb</link>
      <guid>https://dev.to/rohan2596/how-to-implement-elastic-search-using-spring-boot-ljb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#elastic-search"&gt;
  &lt;/a&gt;
  Elastic Search
&lt;/h2&gt;

&lt;p&gt;Hello 👋Its Rohan Kadam😊&lt;/p&gt;

&lt;p&gt;Elastic Search !! What is elastic search? Why elastic Search? How to use elastic search Using Spring boot?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4N0hUNAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2AGHjTu-J0hLUm_v6IQK7_MA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4N0hUNAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2AGHjTu-J0hLUm_v6IQK7_MA.png" alt="Elastic Search Using Spring Boot" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-elastic-search"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.elastic.co/what-is/elasticsearch"&gt;What is Elastic Search?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Elasticsearch is a distributed, free and open search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. Elasticsearch is built on Apache Lucene and was first released in 2010 by Elasticsearch N.V. (now known as Elastic).&lt;/p&gt;

&lt;p&gt;Known for its simple REST APIs, distributed nature, speed, and scalability, Elasticsearch is the central component of the Elastic Stack, a set of free and open tools for data ingestion, enrichment, storage, analysis, and visualization. Commonly referred to as the ELK Stack (after Elasticsearch, Logstash, and Kibana), the Elastic Stack now includes a rich collection of lightweight shipping agents known as Beats for sending data to Elasticsearch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-elastic-search"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.elastic.co/what-is/elasticsearch"&gt;Why use Elastic Search?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Elasticsearch is fast.&lt;/strong&gt; Because Elasticsearch is built on top of Lucene, it excels at full-text search. Elasticsearch is also a near real-time search platform, meaning the latency from the time a document is indexed until it becomes searchable is very short — typically one second. As a result, Elasticsearch is well suited for time-sensitive use cases such as security analytics and infrastructure monitoring.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elasticsearch is distributed by nature.&lt;/strong&gt; The documents stored in Elasticsearch are distributed across different containers known as &lt;em&gt;shards&lt;/em&gt;, which are duplicated to provide redundant copies of the data in case of hardware failure. The distributed nature of Elasticsearch allows it to scale out to hundreds (or even thousands) of servers and handle petabytes of data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elasticsearch comes with a wide set of features.&lt;/strong&gt; In addition to its speed, scalability, and resiliency, Elasticsearch has a number of powerful built-in features that make storing and searching data even more efficient, such as data rollups and index lifecycle management.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Elastic Stack simplifies data ingest, visualization, and reporting.&lt;/strong&gt; Integration with Beats and Logstash makes it easy to process data before indexing into Elasticsearch. And Kibana provides real-time visualization of Elasticsearch data as well as UIs for quickly accessing application performance monitoring (APM), logs, and infrastructure metrics data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-implement-elastic-search-in-spring-boot"&gt;
  &lt;/a&gt;
  How to implement Elastic Search in Spring Boot?
&lt;/h3&gt;

&lt;p&gt;Elastic Search is widely been used by industry today for developing search engines. Its best known for its high-performance searching and querying. Today we are going to implement the elastic search using the spring boot and the programming language Java. This part of we going to cover the CRUD operations for the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-how-to-generate-spring-boot-project"&gt;
  &lt;/a&gt;
  Step 1: How to generate Spring Boot Project?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://start.spring.io/"&gt;&lt;strong&gt;Spring Initializr&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-which-dependencies-should-i-include"&gt;
  &lt;/a&gt;
  Step 2: Which dependencies should I include?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zPPNlbz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2836/1%2AjQHsgtgX2qv9JuD4Mc7Zuw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zPPNlbz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2836/1%2AjQHsgtgX2qv9JuD4Mc7Zuw.png" alt="Rest high-level Client -Elastic Search" width="880" height="346"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-what-will-be-the-configuration-for-elastic-search"&gt;
  &lt;/a&gt;
  Step 3: What will be the Configuration for Elastic Search?
&lt;/h3&gt;

&lt;p&gt;The Java High-Level REST Client works on top of the Java Low-Level REST client. Its main goal is to expose API specific methods, that accept request objects as an argument and return response objects, so that request marshalling and response un-marshalling is handled by the client itself.&lt;/p&gt;

&lt;p&gt;Each API can be called synchronously or asynchronously. The synchronous methods return a response object, while the asynchronous methods, whose names end with the async suffix, require a listener argument that is notified (on the thread pool managed by the low-level client) once a response or an error is received.&lt;/p&gt;

&lt;p&gt;The Java High-Level REST Client depends on the Elasticsearch core project. It accepts the same request arguments as the TransportClient and returns the same response objects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h7RRW5Cz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3224/1%2A64bxPIoAaZsuIY9OtV7oJQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h7RRW5Cz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3224/1%2A64bxPIoAaZsuIY9OtV7oJQ.png" alt="Configuration -Elastic Search" width="880" height="711"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To perform CRUD operations we need to define storage for storing our data object. In the case of elastic search, types like a table in an SQL database, where the index is the SQL database. However, that is not a good way to approach type . In the Example below are use notes document /entity/model it can have multiple fields such as title, descriptions etc.RestClient dependencies provide us with methods such as&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-document-index.html"&gt;**IndexRequest&lt;/a&gt;**:- To create a new index for the object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-document-update.html"&gt;**UpdateRequest&lt;/a&gt;**:- To update a existing index.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-document-delete.html"&gt;**DeleteRequest&lt;/a&gt;**:- To Delete an index from the elastic table.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-search.html"&gt;**SearchRequest&lt;/a&gt;**:- To Perform a search from the database.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e8UoQrVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4044/1%2A7bPSMQ2OQi-0fPNh83wrLA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e8UoQrVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4044/1%2A7bPSMQ2OQi-0fPNh83wrLA.png" alt="Business -Logic For CRUD Operations" width="880" height="2591"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:-
&lt;/h3&gt;

&lt;p&gt;In the article, we tried to answers many questions related to Elastic Search and how to implement the same using Spring boot. Elastic Search powerfully features such as indexing and fast querying are used by many fortune 500 companies to provide service to others.&lt;/p&gt;

&lt;p&gt;Please do share and like💖 if you find the article useful. Follow me on medium &lt;a href="https://dev.toundefined"&gt;Rohan Ravindra Kadam&lt;/a&gt; and on Twitter at &lt;a href="https://twitter.com/rohankadam25"&gt;**rohankadam25&lt;/a&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high.html"&gt;&lt;strong&gt;Java High-Level REST Client | Java REST Client [master] | Elastic&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.elastic.co/"&gt;&lt;strong&gt;Free and Open Search: The Creators of Elasticsearch, ELK &amp;amp; Kibana | Elastic&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RewtI9lv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2AmRwSuSvhuRcZKS3uElP6bg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RewtI9lv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2AmRwSuSvhuRcZKS3uElP6bg.png" alt="Thank You, Viewers — Rohan Kadam" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elasticsearch</category>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Difference between localStorage and sessionStorage</title>
      <author>Pankaj Kumar</author>
      <pubDate>Mon, 13 Dec 2021 03:01:48 +0000</pubDate>
      <link>https://dev.to/pankajkumar/difference-between-localstorage-and-sessionstorage-5a40</link>
      <guid>https://dev.to/pankajkumar/difference-between-localstorage-and-sessionstorage-5a40</guid>
      <description>&lt;p&gt;Websites hosted on a browser have no capacity of having any memory to store user's data. A user visiting from one page to another page on a website will be treated as a new user every time. The browser provides different types of storage mechanisms (localStorage, sessionStorage, cookies) to overcome this issue. Storage mechanism enables the website you are visiting to keep track of your movement from one page to another page so that the same information doesn't get asked which is already given to the website.&lt;/p&gt;

&lt;p&gt;localStorage, sessionStorage, and cookies are all client storage solutions that store in a single file in the user's system. Session data is stored on the server where the application/website is hosted. localStorage and sessionStorage, part of the web storage API, are two awesome tools to save the data in format of key/value pairs locally.&lt;/p&gt;

&lt;p&gt;In this article, We will try to understand the difference between localStorage and sessionStorage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-localstorage"&gt;
  &lt;/a&gt;
  What is localStorage?
&lt;/h2&gt;

&lt;p&gt;It is a type of web storage that allows websites/applications to store and access data in the browser with no expiration date. This means the data stored in the browser will persist even after the browser window has been closed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Save data to localStorage
localStorage.setItem('key', 'Value');

// Get saved data from localStorage
let lastname = localStorage.getItem('key');

// Remove saved data from localStorage
localStorage.removeItem('key');

// Remove all saved data from localStorage
localStorage.clear();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-sessionstorage"&gt;
  &lt;/a&gt;
  What is sessionStorage?
&lt;/h2&gt;

&lt;p&gt;The sessionStorage object stores data for only one session, Meaning the data is deleted when the browser tab is closed.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Save data to sessionStorage
sessionStorage.setItem('key', 'value');

// Get saved data from sessionStorage
let lastname = sessionStorage.getItem('key');

// Remove saved data from sessionStorage
sessionStorage.removeItem('key');

// Remove all saved data from sessionStorage
sessionStorage.clear();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#difference-between-localstorage-and-sessionstorage"&gt;
  &lt;/a&gt;
  Difference between localStorage and sessionStorage
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#localstorage"&gt;
  &lt;/a&gt;
  localStorage
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;data stored with localStorage has no expiration date, and gets cleared only through JavaScript, or clearing the Browser cache / Locally Stored Data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The storage limit is the maximum amongst the three.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The data stored in localStorage persists until explicitly deleted. Changes made are saved and available for all current and future visits to the site.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It works on the same-origin policy. So, data stored will only be available on the same origin.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sessionstorage"&gt;
  &lt;/a&gt;
  sessionStorage
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It stores data only for a session, meaning that the data is stored until the browser (or tab) is closed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data is never transferred to the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changes are only available per window (or tab in browsers like Chrome and Firefox). Changes made are saved and available for the current page, as well as future visits to the site on the same window. Once the window is closed, the storage is deleted.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;localStorage and sessionStorage are performing similar tasks but with some very basic differences.&lt;/p&gt;

&lt;p&gt;This article was originally posted over &lt;a href="https://jsonworld.com"&gt;JsonWorld&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>10 Best Forum to become a good Developer in 2022</title>
      <author>New Linux Helper</author>
      <pubDate>Mon, 13 Dec 2021 02:47:35 +0000</pubDate>
      <link>https://dev.to/developerbishwas/10-best-forum-to-become-a-good-developer-in-2022-2cgm</link>
      <guid>https://dev.to/developerbishwas/10-best-forum-to-become-a-good-developer-in-2022-2cgm</guid>
      <description>&lt;p&gt;This is the list of some top 5 growing programming related forums/communities you must join. These forums may help you to get your answers for bug fixes and related topics. Also, joining this forum may help you to be a good developer. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Webmatrices Forum&lt;br&gt;
A lot of posts of this forum ranks on Google. Also, this forum is nicely popular among new developers. It has the highest &lt;strong&gt;&lt;code&gt;Daily Pageviews per Visitor: 6.1&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;daily time on site: 5:52&lt;/code&gt;&lt;/strong&gt;. It also has a decent amount of content in it. Users mostly talk about web/app development, game development and blogging/SEO related stuff here. This forum is also growing really fast.&lt;br&gt;
Suggest you to join this forum if you wanna learn about web development frameworks (Django, vue), API security, web scraping, automation, gameDevelopment and blogging/SEO.&lt;br&gt;
Visit here: &lt;a href="https://webmatrices.com/t/programming"&gt;https://webmatrices.com/&lt;/a&gt;&lt;br&gt;
Also, this forum has no ads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Codeproject&lt;br&gt;
This forum is somehow popular on the web. According to Alexa rank, it has 1.53 Daily Pageviews per Visitor and 1:50 daily time on site. It has slightly lesser ranks than Webmatrices. The number of content, questions and answers is also pretty good. People generally talk about Python, C++ and Ai related stuff here.&lt;br&gt;
Visit here: &lt;a href="https://www.codeproject.com/"&gt;https://www.codeproject.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Codeguru&lt;br&gt;
This website is genuinely awesome for learning OS-related stuff. It has 1.3 Daily Pageviews per Visitor and 1:26 daily time on site. People discuss C programming, Onion architecture, .NET, vb.net and other OS-related stuff. Joining this forum would be great if you wanna about OS. Although there's a decrement rate in the Alexa rank of this forum website, I guess the rate will be changed soon.&lt;br&gt;
Visit here: &lt;a href="https://forums.codeguru.com/"&gt;https://forums.codeguru.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DaniWeb&lt;br&gt;
This website is also somehow related to hardware and OS related stuff. Daily Pageviews per Visitor and daily time on site are 1.3 and 1:34 respectively. Members usually discuss VB.NET, Computer Hardware, Python and os related stuff.&lt;br&gt;
I suggest you join this forum if you really wanna dive more into OS, hardware development and C programming.&lt;br&gt;
Visit here: &lt;a href="https://www.daniweb.com/"&gt;https://www.daniweb.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;thecodingforums&lt;br&gt;
This forum is the smallest of all mentioned here, but growing really nice. 1.4 Daily Pageviews per Visitor and 0:57 Daily Time on Site is the Alexa report of this site. People here talk about Python GUI, Tkinter, HTML, CSS and Java. I suggest you join this forum if you're really new to the programming world.&lt;br&gt;
Visit here: &lt;a href="https://www.thecodingforums.com/"&gt;https://www.thecodingforums.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;As I mentioned, these are growing forums, you are the one who gonna be another growth factor of these forums.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By the way, this is the repost of my last article. &lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>django</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 22: XSLT</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Mon, 13 Dec 2021 00:49:59 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-22-xslt-4am6</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-22-xslt-4am6</guid>
      <description>&lt;p&gt;In the late 1990s and early 2000s there was an XML craze. People even wanted to replace HTML with some XML variant, and literally the only "advantage" it would have over HTML was that if you made any typos, the website would just refuse to display anything at all. Somehow that was supposed to be a huge selling point.&lt;/p&gt;

&lt;p&gt;Eventually common sense prevailed, but back then XML craze was going so hot, people were asking questions like - what if I need to turn XML into XML? I know, I'l use XML! That's how XSLT came to be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;

&lt;p&gt;We can't really do conventional Hello, World!, as the whole XSLT model is turning XML into XML, but let's do something simple anyway.&lt;/p&gt;

&lt;p&gt;Here's &lt;code&gt;hello.xml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;persons&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Alice&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Bob&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/persons&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's &lt;code&gt;hello.xslt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsl=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/XSL/Transform"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"xml"&lt;/span&gt; &lt;span class="na"&gt;indent=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"/persons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;messages&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"person"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/messages&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"person"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;message&amp;gt;&lt;/span&gt;Hello, &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;!&lt;span class="nt"&gt;&amp;lt;/message&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then run it like this, &lt;code&gt;xsltproc&lt;/code&gt; is even preinstalled on OSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;$ xsltproc hello.xslt hello.xml
&lt;span class="cp"&gt;&amp;lt;?xml version="1.0"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;messages&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;message&amp;gt;&lt;/span&gt;Hello, Alice!&lt;span class="nt"&gt;&amp;lt;/message&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;message&amp;gt;&lt;/span&gt;Hello, Bob!&lt;span class="nt"&gt;&amp;lt;/message&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/messages&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what's going on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first, the &lt;code&gt;&amp;lt;?xml&amp;gt;&lt;/code&gt; boilerplate and some namespaces and versions. It's best to just copy paste paste it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;xsl:output&lt;/code&gt; specifies output mode, in this case we want to generate XML and indent it automatically for readability. Not every kind of XML should be indented like that.&lt;/li&gt;
&lt;li&gt;Then we have two templates with &lt;code&gt;xsl:template&lt;/code&gt; - top level one for &lt;code&gt;/persons&lt;/code&gt; and then second one for each &lt;code&gt;/person&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If this seems to you like a bit crazy way to code, then you're not wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text-output"&gt;
  &lt;/a&gt;
  Text output
&lt;/h3&gt;

&lt;p&gt;In addition to generating XML, XSLT can also generate HTML and plain text. Let's try some plain text. We need to be very careful to get all the spaces and newlines in the right places, so this look extremely verbose.&lt;/p&gt;

&lt;p&gt;Here's &lt;code&gt;text.xml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;persons&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Alice&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;surname&amp;gt;&lt;/span&gt;Cooper&lt;span class="nt"&gt;&amp;lt;/surname&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Bob&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;surname&amp;gt;&lt;/span&gt;Smith&lt;span class="nt"&gt;&amp;lt;/surname&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/persons&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's &lt;code&gt;text.xslt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsl=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/XSL/Transform"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"/persons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"person"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"person"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;Hello, &lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"surname"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;!&lt;span class="ni"&gt;&amp;amp;#10;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello, Alice Cooper!
Hello, Bob Smith!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;We could just generate the whole thing from scratch, but I think it's more true to the purpose of XSLT if we start with this &lt;code&gt;fizzbuzz.xml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;fizzbuzz&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;number&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/number&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;number&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/number&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;number&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/number&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;number&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/number&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;number&amp;gt;&lt;/span&gt;100&lt;span class="nt"&gt;&amp;lt;/number&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/fizzbuzz&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we could do this for &lt;code&gt;fizzbuzz.xslt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsl=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/XSL/Transform"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"/fizzbuzz"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:variable&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:choose&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:when&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;"$i mod 15 = 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;FizzBuzz&lt;span class="nt"&gt;&amp;lt;/xsl:when&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:when&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;"$i mod 3 = 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Fizz&lt;span class="nt"&gt;&amp;lt;/xsl:when&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:when&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;"$i mod 5 = 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Buzz&lt;span class="nt"&gt;&amp;lt;/xsl:when&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:otherwise&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$i"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/xsl:otherwise&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:choose&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#10;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates exactly the FizzBuzz sequence you're expecting.&lt;/p&gt;

&lt;p&gt;There's things happenings here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;xsl:variable&lt;/code&gt; sets a local variable &lt;code&gt;i&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;xsl:choose&lt;/code&gt; with &lt;code&gt;xsl:whene&lt;/code&gt; and &lt;code&gt;xsl:otherwise&lt;/code&gt; decide which FizzBuzz branch to take&lt;/li&gt;
&lt;li&gt;there's also &lt;code&gt;xsl:if&lt;/code&gt; we could use instead&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h3&gt;

&lt;p&gt;XSLT went through many iterations. XSLT 2.0 would actually make this reasonably easy, thanks to more flexible &lt;code&gt;xsl:for-each&lt;/code&gt;, but the XSLT processor that comes with OSX only supports XSLT 1.0, and it's not the only one - a lot of XSLT software never went past XSLT 1.0. So let's give it a go - we don't have loops, but we have recursion.&lt;/p&gt;

&lt;p&gt;Basically we first figure out how many iterations we want, then call &lt;code&gt;iteration(1, 20)&lt;/code&gt;. It will then check if current index reached max - if yes, that will be the end of it, otherwise it will call &lt;code&gt;iteration(2, 20)&lt;/code&gt;, which will call &lt;code&gt;iteration(3, 20)&lt;/code&gt; and so on until &lt;code&gt;iteration(20, 20)&lt;/code&gt; eventually stops.&lt;/p&gt;

&lt;p&gt;Here's &lt;code&gt;loop.xml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;loop&amp;gt;&lt;/span&gt;20&lt;span class="nt"&gt;&amp;lt;/loop&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;loop.xslt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsl=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/XSL/Transform"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"max"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;Iteration &lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$i"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#10;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:if&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;"$max &amp;gt; $i"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$i + 1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"max"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$max"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:if&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"/loop"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"max"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ xsltproc loop.xslt loop.xml
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;

&lt;p&gt;And now that we can loop, we can generate the Fibonacci sequence.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fib.xml&lt;/code&gt; is just the max value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;fib-sequence&amp;gt;&lt;/span&gt;20&lt;span class="nt"&gt;&amp;lt;/fib-sequence&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And let's do &lt;code&gt;fib.xslt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsl=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/XSL/Transform"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fib"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;xsl:choose&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:when&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;"2 &amp;gt;= $n"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/xsl:when&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:otherwise&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;xsl:variable&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fib"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$n - 1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/xsl:variable&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;xsl:variable&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fib"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$n - 2"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/xsl:variable&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$a + $b"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/xsl:otherwise&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:choose&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"max"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;fib(&lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$i"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;) = &lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fib"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$i"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#10;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:if&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;"$max &amp;gt; $i"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$i + 1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"max"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"$max"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:if&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;"/fib-sequence"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iteration"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"max"&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we define recursive function &lt;code&gt;fib(n)&lt;/code&gt; for calculating the Fibonacci value&lt;/li&gt;
&lt;li&gt;we define &lt;code&gt;iteration(i, max)&lt;/code&gt; which will do our looping&lt;/li&gt;
&lt;li&gt;we call &lt;code&gt;iteration(1, max)&lt;/code&gt; at top level &lt;code&gt;/fib-sequence&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the output is as expected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fib(1) = 1
fib(2) = 1
fib(3) = 2
fib(4) = 3
fib(5) = 5
fib(6) = 8
fib(7) = 13
fib(8) = 21
fib(9) = 34
fib(10) = 55
fib(11) = 89
fib(12) = 144
fib(13) = 233
fib(14) = 377
fib(15) = 610
fib(16) = 987
fib(17) = 1597
fib(18) = 2584
fib(19) = 4181
fib(20) = 6765
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;XSLT 2.0 would make it slightly more readable as we wouldn't ned recursive looping, but in the end it would still be quite dreadful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-xslt"&gt;
  &lt;/a&gt;
  Should you use XSLT?
&lt;/h3&gt;

&lt;p&gt;Absolutely not.&lt;/p&gt;

&lt;p&gt;XSLT is basically a joke language, except unlike with Emojicode, Befunge, Brainfuck, and such, people who created it weren't in on the joke.&lt;/p&gt;

&lt;p&gt;Just about every real language does XML processing better than XSLT. Just pick your favorite.&lt;/p&gt;

&lt;p&gt;Usually Ruby or Python is a close call, but in this case the first choice is very clearly Ruby. Ruby's Nokogiri is nearly perfect, and for some reason all Python's XML libraries I've tried (and I've tried a lot of them), had a lot of issues. Of course that's just relatively speaking, any of Python's libraries is still far better than using XSLT.&lt;/p&gt;

&lt;p&gt;There are no excuses to use XSLT. It's unsuitable for any purpose, in any version.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-22-xslt"&gt;Code for the XSLT episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>xml</category>
      <category>xslt</category>
    </item>
    <item>
      <title>JavaScript Anti-patterns</title>
      <author>Medhat Dawoud</author>
      <pubDate>Sun, 12 Dec 2021 23:14:15 +0000</pubDate>
      <link>https://dev.to/medhatdawoud/javascript-anti-patterns-2nia</link>
      <guid>https://dev.to/medhatdawoud/javascript-anti-patterns-2nia</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post was originally published on my own blog, so you can check it out from &lt;a href="https://medhatdawoud.net/blog/javascript-anti-patterns"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usually people search for patterns to follow but some of them are searching for the anti-patterns to avoid, In my opinion both are equally important, as by knowing them you are leveling up your skills in programming using a specific tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-design-patterns"&gt;
  &lt;/a&gt;
  What are the design patterns?
&lt;/h3&gt;

&lt;p&gt;To understand what are the anti-patterns we need first to define what is a pattern. a pattern is usually a well known solution for a recurring problem, or we can first talk about the concept through a food metaphor.&lt;/p&gt;

&lt;p&gt;This plate (for people who don't know) is a street Egyptian food called "Koshary", I picked it because it has quite a lot of ingredients including rice, pasta, hummus, lentil, tomato sauce, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_k12xO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/e/e9/Egyptian_food_Koshary.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_k12xO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/e/e9/Egyptian_food_Koshary.jpg" alt="koshary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's imagine the first person who made this dish, how did he think about it? did he add all together from the beginning? did he try other ingredients that didn't work out? how did he picked each of them? I believe that can be applied to any other food.&lt;/p&gt;

&lt;p&gt;Now if you search on the recipe of making &lt;a href="https://en.wikipedia.org/wiki/Koshary"&gt;Egyptian Koshary&lt;/a&gt; you can find it everywhere, that's because some people has made this documented after making several trials, these trials introduced a pattern and this recipe is the design pattern to get the same dish (results) every time.&lt;/p&gt;

&lt;p&gt;If we project that on programming, so design patterns are simply good solutions for recurring problems, our ancestor developers made in the past and documented it for us not to repeat same issues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-antipatterns"&gt;
  &lt;/a&gt;
  What are the anti-patterns?
&lt;/h3&gt;

&lt;p&gt;We can imagine now what is an anti-pattern, it is basically also some documents for bad recipes, telling people that we tried this before and here are the results, it was simply a bad idea to do the same again.&lt;/p&gt;

&lt;p&gt;same for programming, anti-patterns are simply a bad solution for a recurring problem, people thought about it in the past and documented that their trials ended with failure or bad results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-might-be-thinking-why-we-might-have-antipatterns-in-javascript"&gt;
  &lt;/a&gt;
  You might be thinking, why we might have anti-patterns in JavaScript?
&lt;/h3&gt;

&lt;p&gt;The reasons for having anti-patterns despite of having developer guide for all tools might be one of the following or all of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Different &lt;a href="https://en.wikipedia.org/wiki/Programming_paradigm"&gt;programming languages paradigm&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Going with the easy shortcut solutions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adopting the “for now” phrase (which pile tech debt with bad practices)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lake for experience in the tool used (new developers to JavaScript)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Or much more ...&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#antipatterns-examples"&gt;
  &lt;/a&gt;
  Anti-Patterns Examples
&lt;/h2&gt;

&lt;p&gt;Now we understand the terminologies, let's have some Anti-patterns / Bad practices to avoid in you next project or maybe enhance your current project whenever you notice one of them 😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#0-naming-convention"&gt;
  &lt;/a&gt;
  0. Naming convention
&lt;/h3&gt;

&lt;p&gt;Your naming convention needs to be very clear and descriptive, whenever you see a variable or a function name you should be able to guess what to expect as a value coming from there, have a look into the following examples&lt;/p&gt;

&lt;h4&gt;Bad&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This is a user name&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat Dawoud&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// This is for a year&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;yyyy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;

&lt;span class="c1"&gt;// This function should duplicate a number&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This function is checking if 2 numbers are equal&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Good&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This is a user name&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat Dawoud&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// This is for a year&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;

&lt;span class="c1"&gt;// This function should duplicate a number&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This function is checking if 2 numbers are equal&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#1-magic-numbers-or-strings"&gt;
  &lt;/a&gt;
  1. Magic numbers or strings
&lt;/h3&gt;

&lt;p&gt;You might face in the code some magic number or a strings, I call them magic because you or one of the your team mates might be wondering from where does this number or string come, a bit confusing, check the examples below for more clarification:&lt;/p&gt;

&lt;h4&gt;Bad&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Calculate circle circumference which equal to&lt;/span&gt;
&lt;span class="c1"&gt;// 2 * radius * pi&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;circleCircumference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This is one day in milliseconds&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oneDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;86400000&lt;/span&gt;

&lt;span class="c1"&gt;// Time to live is 6 weeks&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeToLive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

&lt;span class="c1"&gt;// This is checking if the user is admin&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Good&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;circleCircumference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;PI&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This is one day in milliseconds&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oneDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="c1"&gt;// 86400000&lt;/span&gt;

&lt;span class="c1"&gt;// Time to live is 6 weeks&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeToLiveInDays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="c1"&gt;// 42&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ADMIN_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ADMIN_NAME&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-improper-use-of-truthy-and-falsy-values"&gt;
  &lt;/a&gt;
  2. Improper use of Truthy and Falsy values
&lt;/h3&gt;

&lt;p&gt;In JavaScript, Falsy and Truthy values are a bit different than other tools, and by Falsy that means equal to false, and Truthy means when we check it is equal to true, we have about 5 different values which are Falsy in JavaScript which might be wise if you check for each one in the proper way instead of checking in general if they are falsy, check below for best practices.&lt;/p&gt;

&lt;h4&gt;Bad&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Good&lt;/h4&gt;  

&lt;p&gt;(A comment in front of each value tells you how to check that value)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// This is okay to check undefined&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// check -&amp;gt; x !== 0 || x &amp;gt; 0&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// check -&amp;gt; x !== '' || x?.length &amp;gt; 0&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// check -&amp;gt; x ?? true : false&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;
&lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// check -&amp;gt; isNaN(x)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-modify-dom-in-loop"&gt;
  &lt;/a&gt;
  3. Modify DOM in loop
&lt;/h3&gt;

&lt;p&gt;Modifying DOM is one of the most expensive operations that might happen in the browser, because it cause a reflow/repaint for the page, adding or modifying DOM in a loop is the worst, instead you can use something called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment"&gt;DocumentFragment&lt;/a&gt; which will be created in memory and cause the reflow only once after the loop as follow:&lt;/p&gt;

&lt;h4&gt;Bad&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create 10 elements and push them to document&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
  &lt;span class="c1"&gt;// every loop iteration a new element is created&lt;/span&gt;
  &lt;span class="c1"&gt;// and get added to document node what causes&lt;/span&gt;
  &lt;span class="c1"&gt;// re-paint and re-flow&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Good&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// DocumentFragment are saved in memory&lt;/span&gt;
&lt;span class="c1"&gt;// push elements all at once into the document node&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fragment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DocumentFragment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
  &lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-new-object-in-raw-arrayprototypereduce-endraw-"&gt;
  &lt;/a&gt;
  4. New Object in &lt;code&gt;Array.prototype.reduce&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The problem here is to try to create a new Object in each round in &lt;code&gt;reduce&lt;/code&gt; function, trying to make it immutable however if is creating already a new Object/Array in each route so mutating it is fine otherwise you will end up creating extra Objects in memory.&lt;/p&gt;

&lt;h4&gt;Bad&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adam&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Karma&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// spread operator is creating a new Obj&lt;/span&gt;
&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Expected Output&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   Medhat: true, Adam: false, Karma: true&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Good&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adam&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Karma&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;

&lt;span class="c1"&gt;// Expected Output&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   Medhat: true, Adam: false, Karma: true&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-manipulate-arguments"&gt;
  &lt;/a&gt;
  5. Manipulate arguments
&lt;/h3&gt;

&lt;p&gt;Here is a very common issue for beginners, the thing is that non-primitive data types are passing by reference not by value, which means when you make an object &lt;code&gt;let obj = { name: 'Medhat' };&lt;/code&gt; and create another variable to copy that object like &lt;code&gt;let obj2 = obj&lt;/code&gt; actually &lt;code&gt;obj2&lt;/code&gt; in pointing at the same object in memory and if you make a change like &lt;code&gt;obj2.name = 'Adam'&lt;/code&gt; also &lt;code&gt;obj&lt;/code&gt; will have "Adam" as a name.&lt;/p&gt;

&lt;p&gt;In javaScript you can access all arguments or a function through an object named &lt;code&gt;arguments&lt;/code&gt;, given what we understand above, mutating the arguments object will make a mess, check the example below to understand what I mean&lt;/p&gt;

&lt;h4&gt;Bad&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;makePerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makePerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Medhat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; {"name":"green","age":"green","color":"green"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'd advice not to ever mutate the &lt;code&gt;arguments&lt;/code&gt; object, if you want to achieve the above result without a problem you might deep-copy the object using &lt;code&gt;let argCopy = Object.assign({}, arguments);&lt;/code&gt; or by sending the color argument to as a last argument and make it optional.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this article you should have learnt what are design patterns and what are the anti-patterns, learnt that the Koshary is an awesome food from the Egyptian cuisine, learnt 6 different example of anti-patterns/bad practices to avoid in your next JavaScript project.&lt;/p&gt;

&lt;p&gt;I've talked about this topic before in an online event and here is the &lt;a href="https://docs.google.com/presentation/d/18A1utrkOpcVtA8sQp-Fz8aVfXOUDyH2Gl-2UM7uxH7A/edit?usp=sharing"&gt;presentation&lt;/a&gt;, feel free to tweet to me if you have any comment or addition to the info in this article.&lt;/p&gt;

&lt;p&gt;Tot ziens 👋&lt;/p&gt;

</description>
      <category>patterns</category>
      <category>antipatterns</category>
      <category>bestpractices</category>
    </item>
    <item>
      <title>Python Tools for Data Science: The Best Python Packages, Libraries and Frameworks</title>
      <author>images.cv</author>
      <pubDate>Sun, 12 Dec 2021 22:55:50 +0000</pubDate>
      <link>https://dev.to/imagescv/python-tools-for-data-science-the-best-python-packages-libraries-and-frameworks-28im</link>
      <guid>https://dev.to/imagescv/python-tools-for-data-science-the-best-python-packages-libraries-and-frameworks-28im</guid>
      <description>&lt;p&gt;&lt;strong&gt;If you're just getting started with data science, then Python programming is a great language to start with. It's the most popular programming language for data scientists and it has many powerful packages, libraries and frameworks that are designed specifically for their needs. In this post, we'll take a look at some of the best tools out there - so read on if you want to get up-to-speed quickly!&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://numpy.org/"&gt;NumPy&lt;/a&gt; is the fundamental package for scientific computing in Python. It provides an efficient and comprehensive array-processing facility that can handle large multi-dimensional arrays. NumPy also contains high-level mathematical functions for linear algebra, Fourier transforms, and other operations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; is a powerful data analysis library that provides everything you need to manipulate, process, and analyze data in Python. It's built on top of NumPy, which means that it uses efficient arrays to handle structured data. Pandas is great for working with time series analysis (e.g., stocks prices) or relational data (e.g., Excel files).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://seaborn.pydata.org/"&gt;Seaborn&lt;/a&gt; is a powerful statistical plotting library for Python that's built on top of Matplotlib. It provides a wide range of high-level plotting functions for statistical data, as well as support for customizing the look and feel of your plots. Seaborn is great for visualizing regression models or clustering data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scikit-learn.org/"&gt;Scikit-Learn &lt;/a&gt; is a versatile machine learning library that provides tools for data mining, preprocessing and modeling. You can use this tool to do everything from clustering your text data to building random forests or deep neural networks. What's really great about Scikit-learn is that it allows you to work with Python code instead of having to learn a new language.&lt;/p&gt;




&lt;p&gt;These are just some of the best Python tools for data science - there are many others out there that can help you get your job done quickly and efficiently. So don't be afraid to experiment with different libraries and frameworks until you find the one that's right for you!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Using MongoDB with Node.JS</title>
      <author>Pepper.</author>
      <pubDate>Sun, 12 Dec 2021 22:33:22 +0000</pubDate>
      <link>https://dev.to/peppermints/using-mongodb-with-nodejs-4n94</link>
      <guid>https://dev.to/peppermints/using-mongodb-with-nodejs-4n94</guid>
      <description>&lt;p&gt;First, create a new project.&lt;/p&gt;

&lt;p&gt;CD into the project folder and run &lt;code&gt;npm init&lt;/code&gt;. Follow those steps until you're done.&lt;/p&gt;

&lt;p&gt;Run: &lt;code&gt;npm i mongodb&lt;/code&gt;. This will install the official MongoDB driver for Node.&lt;/p&gt;

&lt;p&gt;Create an &lt;code&gt;index.js&lt;/code&gt;, or &lt;code&gt;main.js&lt;/code&gt;, depending on your main file when you ran &lt;code&gt;npm init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside there: add this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const {MongoClient} = require("mongodb");
const mongouri = 'mongodb://your_connection_string';
const client = new MongoClient(mongouri);

client.connect().then(console.log("Connected to MongoDB"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congrats, if you run &lt;code&gt;node .&lt;/code&gt;, you should see 'Connected to MongoDB'.&lt;/p&gt;

&lt;p&gt;Let's create a quick question database by using an asynchronous function. Add this above &lt;code&gt;client.connect().then(console.log("Connected to MongoDB"));&lt;/code&gt; and under the constants:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function createListing(db, collection, data) {
    await client.db(db).collection(collection).insertOne(data);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, under &lt;code&gt;client.connect(...&lt;/code&gt;, put:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;createListing('question', 'questions', {
    question: "What's 2+2?",
    answer: 4
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go ahead and run &lt;code&gt;node .&lt;/code&gt;. If you have access to your database, you should see that listing in the database.&lt;/p&gt;

&lt;p&gt;Let's read a listing and compare an answer by creating another asynchronous function. Under the 'createListing' function, add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function readListing(db, collection, data) {
    const result = await client.db(db).collection(collection).findOne(data);
    if(result === null || result === undefined) {
        return false;
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, let's remove the lines where we created our listing, and we will replace it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let guess = 4;
const res = readListing('question', 'questions', {
    answer: guess
});
if(res === false) {
    console.log("Oops, you got it wrong.");
} else {
    console.log("Yay! You got it right!");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, we will run &lt;code&gt;node .&lt;/code&gt;, it should output: "Yay! You got it right!"&lt;/p&gt;

&lt;p&gt;Congratulations! You've just created and read data from a database!&lt;/p&gt;

&lt;p&gt;To the beginners: Keep learning. You never know what you can accomplish if you keep putting your all into it. This tutorial has just showed you how to use one of the BEST databases out there, very easily. So go and do what we all beginners &lt;em&gt;should&lt;/em&gt; do, keep learning, and keep attempting new things. Good luck!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>I made a Bandersnatch clone. Come interview me!</title>
      <author>Bruno Noriller</author>
      <pubDate>Sun, 12 Dec 2021 22:25:14 +0000</pubDate>
      <link>https://dev.to/noriller/i-made-a-bandersnatch-clone-come-interview-me-5bkg</link>
      <guid>https://dev.to/noriller/i-made-a-bandersnatch-clone-come-interview-me-5bkg</guid>
      <description>&lt;p&gt;It's amazing how complex something can get.&lt;br&gt;
And something like this sure demanded a lot, especially because, many of the APIs I had never used.&lt;br&gt;
And also... all the event listeners and triggers... so many triggers.&lt;/p&gt;

&lt;p&gt;My player has a fraction of the functionalities a player like Youtube has, and yet I was already drowning in endless "pages" of events.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-stack"&gt;
  &lt;/a&gt;
  The stack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next.js / React.js

&lt;ul&gt;
&lt;li&gt;Mostly because is what I'm used to... and since I'm using React, no reason not to go with Next, even though I'm not actually using anything it offers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chakra UI

&lt;ul&gt;
&lt;li&gt;I love the developer experience of Chakra UI. I mean... what's more intuitive than &lt;code&gt;fontSize={[1em', '1.2em', '1.5em']}&lt;/code&gt; to handle breakpoint values?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS S3/Cloudfront

&lt;ul&gt;
&lt;li&gt;The videos are hosted there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Github of the project: &lt;a href="https://github.com/Noriller/bander-interview"&gt;https://github.com/Noriller/bander-interview&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-im-not-using"&gt;
  &lt;/a&gt;
  What I'm not using
&lt;/h3&gt;

&lt;p&gt;The video data should probably be inside a CMS... and if I want to make it a "boilerplate" of sorts for other things, I could probably refactor a lot to make all the configuration taken from a CMS... &lt;br&gt;
If I did that, I could actually put Next to use and have multiple different copies, each one for one occasion.&lt;br&gt;
But that will come another time...&lt;/p&gt;

&lt;p&gt;And tests... I chose not to have tests because the components are either too humble or too "godly".&lt;br&gt;
The actual video player has too many triggers going on and I was changing a lot from commit to commit, alongside learning the APIs... so, I'm ashamed to say... it's not tested.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-player"&gt;
  &lt;/a&gt;
  The player
&lt;/h2&gt;

&lt;p&gt;What do you need for a player?&lt;/p&gt;

&lt;p&gt;I choose to go vanilla on this one, using the pure &lt;code&gt;&amp;lt;video /&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;For those who don't know, the most important APIs for the player are the &lt;code&gt;[HTMLMediaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement)&lt;/code&gt; and the &lt;code&gt;[Media Source API](https://developer.mozilla.org/en-US/docs/Web/API/MediaSource)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTMLMediaElement&lt;/code&gt; is the one you use for the video components.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Media Source API&lt;/code&gt; is the one you use if you want full control of the buffer you're using on your video. (This one, basically gives you player superpowers!)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#things-to-consider"&gt;
  &lt;/a&gt;
  Things to consider
&lt;/h3&gt;

&lt;p&gt;When making the best video player possible... you probably want to make your own controls, so give a look at my &lt;a href="https://dev.to/noriller/the-fullscreen-api-4mbj"&gt;Fullscreen API&lt;/a&gt; article.&lt;/p&gt;

&lt;p&gt;And, when I think about a video player I think about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Play/Pause&lt;/li&gt;
&lt;li&gt;Volume&lt;/li&gt;
&lt;li&gt;Video Quality&lt;/li&gt;
&lt;li&gt;Playback Speed&lt;/li&gt;
&lt;li&gt;Seek bar&lt;/li&gt;
&lt;li&gt;Fullscreen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All with buttons (or clicks) and with listeners for the keyboard. &lt;/p&gt;

&lt;p&gt;Of course, you're always free to not implement something, maybe because it's something you think your app shouldn't do... (as I did!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#interview"&gt;
  &lt;/a&gt;
  Interview?
&lt;/h2&gt;

&lt;p&gt;Fine, you want to see the finished product right?&lt;/p&gt;

&lt;p&gt;But first...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#whats-the-interview-about"&gt;
  &lt;/a&gt;
  What's the interview about?
&lt;/h3&gt;

&lt;p&gt;And the interview is actually a job interview... mine!&lt;br&gt;
You can interview me at &lt;a href="https://noriller-interview.vercel.app/"&gt;https://noriller-interview.vercel.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm currently job hunting for a job opportunity outside Brazil (where I'm currently living).&lt;br&gt;
And since I had little success, I decided to spice my portfolio a bit while making sure I could get interviewed by anyone who wants it.&lt;br&gt;
There are a lot of opportunities out there, but for reasons... even when I got to the interview phase...&lt;/p&gt;

&lt;p&gt;If you or your company is hiring... I want to work with you!&lt;br&gt;
I like frontend, but I'm fullstack. And while I do have some years of programming, I'm considering even junior positions (I do still have a lot to learn!).&lt;br&gt;
I would love to work on-site or hybrid... so I would need sponsorship.&lt;/p&gt;

&lt;p&gt;If not, you can always help by sharing... maybe someone will want to work with an "outside the box" guy who made a Bandersnatch clone to get interviews.&lt;/p&gt;

&lt;p&gt;If you want, you can share this very message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Check this out: mad lad made a Bandersnatch clone to get interviews!
Watch here: https://noriller-interview.vercel.app/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And regardless of that... feel free to add me on &lt;a href="https://www.linkedin.com/in/noriller/"&gt;Linkedin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a special thanks, I have to acknowledge another "outside the box" person who used a chatbot to get a lot of interviews. I saw in the news somewhere, a few months ago and since I can do frontend... well... there you have it.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>javascript</category>
      <category>devjournal</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Introduction to Blockchain Technology and  Development.</title>
      <author>Daniel Onuoha  Agbo</author>
      <pubDate>Sun, 12 Dec 2021 22:09:39 +0000</pubDate>
      <link>https://dev.to/shieldstring/introduction-to-blockchain-technology-and-development-4g50</link>
      <guid>https://dev.to/shieldstring/introduction-to-blockchain-technology-and-development-4g50</guid>
      <description>&lt;p&gt;After going through the material here, you would've learned a lot about Blockchain and What it is all about. Let's dive in 🚀.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  🔰Definition
&lt;/h3&gt;

&lt;p&gt;A Blockchain is a decentralized distributed ledger network that is cryptographically secured.&lt;/p&gt;

&lt;p&gt;Think of it as a database where different features can be built on such as coins, apps etc and no single entity has control over it. This allows for transparency, security and gives everyone full control of their assets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#networks"&gt;
  &lt;/a&gt;
  🔰Networks:
&lt;/h3&gt;

&lt;p&gt;We have 3 major types of networks in computing, they are:&lt;br&gt;
Centralized, Decentralized and Distributed Networks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YV1Minqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb3fec07pta7l3mh5pie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YV1Minqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb3fec07pta7l3mh5pie.png" alt="Image description" width="600" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a centralized network, all the data and information is regulated by a single entity. Example Facebook, WhatsApp etc they are all centralized.&lt;/p&gt;

&lt;p&gt;In a decentralized network, different nodes on the network have equally control and the source of Truth is checked on the network to ensure that everyone has a correct copy regardless of if any node tampers with It's copy.&lt;/p&gt;

&lt;p&gt;In a distributed network, there are not only few nodes that have access to the data but the idea is stretched such that it is peer-to-peer and every participant in the network has equal access.&lt;/p&gt;

&lt;p&gt;A Blockchain combines the features of a Decentralized &amp;amp; a Distributed network, to provide transparency, security and peer-to-peer interaction.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#blockchain-development"&gt;
  &lt;/a&gt;
  💻&lt;strong&gt;Blockchain Development&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The idea of Blockchain Development is all about building on the Blockchain.&lt;/p&gt;

&lt;p&gt;This can be anything from Cryptocurrencies, tokens, smart contracts or dApps. What do all these mean.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cryptocurrency"&gt;
  &lt;/a&gt;
  🔰Cryptocurrency:
&lt;/h2&gt;

&lt;p&gt;This is a digital currency that runs on the Blockchain Network. Similar to the way we have physical cash or fiat. Cryptocurrencies can be stored in a wallet and used as a viable means of exchange.&lt;/p&gt;

&lt;p&gt;*A wallet can be an App or Device that stores the digital assets. And is accessible using a private key.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tokens"&gt;
  &lt;/a&gt;
  🔰 Tokens:
&lt;/h2&gt;

&lt;p&gt;Tokens serve as digital assets on the blockchain. They are very similar to native Cryptocurrencies in the sense that they can be easily created by any entity for the purpose of generating funds, driving a product on the blockchain or providing incentives for the use of certain services provided on the blockchain. Tokens can equally be traded and fungible(divisible into smaller parts). Most tokens are usually distributed with an Initial Coin Offering (ICO)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smart-contracts"&gt;
  &lt;/a&gt;
  🔰Smart Contracts:
&lt;/h2&gt;

&lt;p&gt;A smart contract is a self-executing contract with the terms of the agreement between buyer and seller being directly written into lines of code. The code and the agreements contained therein exist across a distributed, decentralized blockchain network. The code controls the execution, and transactions are track-able and irreversible.&lt;/p&gt;

&lt;p&gt;Smart contracts permit trusted transactions and agreements to be carried out among disparate, anonymous parties without the need for a central authority, legal system, or external enforcement mechanism.&lt;/p&gt;

&lt;p&gt;In simple terms smart contracts are just pieces of code that enables transactions, entities, apps etc to interact with the Blockchain Network without a 3rd party.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nfts"&gt;
  &lt;/a&gt;
  🔰NFTS
&lt;/h2&gt;

&lt;p&gt;(NON-FUNGIBLE TOKENS)&lt;/p&gt;

&lt;p&gt;These are digital assets that are not divisible as the name implies. Unlike Cryptocurrencies which can be exchange and look identical, NFTs are unique and have a metadata that ties them to the identity of it's owner.&lt;/p&gt;

&lt;p&gt;NFTs are a revolution because it has created a means to define the authenticity of assets and can be tied to documents, real estate, arts etc.&lt;/p&gt;

&lt;p&gt;Imagine writing a book and selling it as an NFT, this would mean that whosoever buys it has sole ownership of it and everybody would know that they own it. They can choose to sell it or transfer it at any perceived value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🔰Conclusion
&lt;/h2&gt;

&lt;p&gt;Blockchain  technology  might  become  the  defining technology of the future, specifically because it has unique  building  blocks  that  allow  us  to  build  trust enabling  infrastructures.  Where  we  go  from  here would be a defining moment that future generations would be grateful for and understanding how it all fits in would go a long way to enable everyone to be a part of this alternate possibility.&lt;/p&gt;

</description>
      <category>career</category>
      <category>javascript</category>
      <category>web3</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>A Simple chat app using Socket.io with NodeJS and ReactJS </title>
      <author>Malik-Idrees</author>
      <pubDate>Sun, 12 Dec 2021 21:16:52 +0000</pubDate>
      <link>https://dev.to/malikidrees/a-simple-chat-app-using-socketio-with-nodejs-and-reactjs-46i0</link>
      <guid>https://dev.to/malikidrees/a-simple-chat-app-using-socketio-with-nodejs-and-reactjs-46i0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#i-have-used"&gt;
  &lt;/a&gt;
  I have used:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS with Express for server side logic&lt;/li&gt;
&lt;li&gt;ReactJS to build a simple client app&lt;/li&gt;
&lt;li&gt;Socket.io for real-time connection between both sides&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://reactsocket.netlify.app"&gt;Live Preview&lt;/a&gt;&lt;br&gt;
Connect from two different tabs or two different PC's to test it out&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5d_UFbHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avw8utrdbq9rhq29b6y9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5d_UFbHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avw8utrdbq9rhq29b6y9.PNG" alt="shows the landing page" width="880" height="349"&gt;&lt;/a&gt;&lt;br&gt;
You can use it to understand how sockets work in react with a bit of touch from Material UI.&lt;/p&gt;

&lt;p&gt;I am a full stack developer and i created this small app to understand working of sockets. Here is another &lt;a href="https://youtu.be/ZwFA3YMfkoc"&gt;resource&lt;/a&gt; to learn about socket by JavaScript Mastery.&lt;br&gt;
Source code will be available soon!oops&lt;br&gt;
Stay Tuned  for more coming soon! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h3&gt;

&lt;p&gt;A detailed article about creating API's using Node.js and MongoDb along with In-memory testing and optional GitHub actions to test and deploy to Heroku whenever I have free time.&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://dev.tomalik-idrees"&gt;https://github.com/malik-Idrees&lt;/a&gt; ⭐&lt;br&gt;
Fiverr: &lt;a href="https://www.fiverr.com/share/27Yy04"&gt;imidrees&lt;/a&gt; ✨&lt;br&gt;
Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>socket</category>
    </item>
    <item>
      <title>Caso de uso: RegEx</title>
      <author>bug_elseif</author>
      <pubDate>Sun, 12 Dec 2021 21:10:45 +0000</pubDate>
      <link>https://dev.to/feministech/caso-de-uso-regex-19bn</link>
      <guid>https://dev.to/feministech/caso-de-uso-regex-19bn</guid>
      <description>&lt;p&gt;Podemos identificar padrões em uma cadeia de caracteres usando Expressões Regulares (&lt;em&gt;Regular Expression&lt;/em&gt; ou RegEx).&lt;/p&gt;

&lt;p&gt;Para validar o formato de um CPF, por exemplo, é necessário que esteja no seguinte padrão:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;xxx.xxx.xxx-xx&lt;/code&gt; (cada &lt;code&gt;x&lt;/code&gt; corresponde à um dígito decimal)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então através de uma RegEx conseguimos identificar se esse padrão foi seguido ou não.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução
&lt;/h2&gt;

&lt;p&gt;Usando a linguagem de programação Python, importa-se o módulo &lt;code&gt;re&lt;/code&gt; que fornece operações de expressões regulares.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cria-se uma função &lt;code&gt;validar&lt;/code&gt; a qual recebe uma string &lt;code&gt;cpf&lt;/code&gt;, ela retorna &lt;code&gt;válido&lt;/code&gt; ou &lt;code&gt;inválido&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpf&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;validador&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expressao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;validador&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'válido'&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'inválido'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#primeiro-caso"&gt;
  &lt;/a&gt;
  Primeiro caso
&lt;/h2&gt;

&lt;p&gt;Usando a função &lt;code&gt;re.match&lt;/code&gt;, compara-se o &lt;code&gt;cpf&lt;/code&gt; com a expressão regular compilada &lt;code&gt;expressao&lt;/code&gt;, ela retorna um &lt;code&gt;Match Object&lt;/code&gt; caso combine, do contrário retorna &lt;code&gt;None&lt;/code&gt;, o valor é atribuído à variável &lt;code&gt;validador&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A expressão escrita a seguir contém alguns símbolos com significado especial, são eles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^&lt;/code&gt; sinaliza o início de uma linha ou string&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$&lt;/code&gt; sinaliza o fim de uma linha ou string&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\d&lt;/code&gt; corresponde aos dígitos decimais de 0 a 9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um detalhe importante, o uso de &lt;code&gt;.&lt;/code&gt; também possui um significado especial e para retirar esse significado usa-se a &lt;code&gt;\&lt;/code&gt; antes do caracter, assim ele se torna o &lt;code&gt;.&lt;/code&gt; (ponto literal).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;expressao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^\d\d\d\.\d\d\d\.\d\d\d-\d\d$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Essa expressão é escrita de uma forma simples, repetindo os caracteres no formato esperado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evitando-repeti%C3%A7%C3%A3o-de-elementos"&gt;
  &lt;/a&gt;
  Evitando repetição de elementos
&lt;/h2&gt;

&lt;p&gt;Podemos reescrevê-la usando mais recursos implementados no módulo &lt;code&gt;re&lt;/code&gt;, usando o conceito de repetição de elementos da RegEx representados por chaves &lt;code&gt;{}&lt;/code&gt;, aplicando-o ao conjunto de dígitos &lt;code&gt;\d&lt;/code&gt; que é repetido um certo número de vezes, obtem-se:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;expressao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^\d{3}\.\d{3}\.\d{3}-\d{2}$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#evitando-repeti%C3%A7%C3%A3o-de-trechos"&gt;
  &lt;/a&gt;
  Evitando repetição de trechos
&lt;/h2&gt;

&lt;p&gt;Outra forma de expressar a RegEx é usando o conceito de grupos. Nesse caso podemos agrupar um trecho do formato que se repete, fazendo um grupo de 3 dígitos e um &lt;code&gt;.&lt;/code&gt; (ponto literal), que devem ser repetidos duas vezes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;expressao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^(\d{3}\.){2}\d{3}-\d{2}$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exemplos-de-execu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Exemplos de execução
&lt;/h2&gt;

&lt;p&gt;Usaremos três exemplos para testar a validação do CPF:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'111.222.333-44'&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'1234.123.789-88'&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'123.12.789-88'&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'abs.ert.yui.lk'&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'''
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    '''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Analisando a saída obtida, notamos que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O exemplo &lt;code&gt;a&lt;/code&gt; está no formato correto.&lt;/li&gt;
&lt;li&gt;O exemplo &lt;code&gt;b&lt;/code&gt; contém mais dígitos do que o esperado no primeiro trecho.&lt;/li&gt;
&lt;li&gt;O exemplo &lt;code&gt;c&lt;/code&gt; contém menos dígitos do que o esperado no segundo trecho.&lt;/li&gt;
&lt;li&gt;O exemplo &lt;code&gt;d&lt;/code&gt; apresenta caracteres não-dígitos, sendo inválido.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    O CPF: 111.222.333-44 é válido
    O CPF: 1234.123.789-88 é inválido
    O CPF: 1234.12.789-88 é inválido
    O CPF: abs.ert.yui.lk é inválido
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Considerações
&lt;/h2&gt;

&lt;p&gt;Vimos que uma RegEx pode ser escrita de várias formas para validar o mesmo padrão e ainda existem diversas outras maneiras, podendo levar em conta a legibilidade ou complexidade da escrita para fazer sua escolha.&lt;/p&gt;

&lt;p&gt;Aprendendo mais sobre os recursos do &lt;a href="https://docs.python.org/pt-br/3/library/re.html"&gt;módulo &lt;em&gt;re&lt;/em&gt; do Python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Estudando mais sobre &lt;a href="https://aurelio.net/regex/"&gt;expressões regulares&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se escreve &lt;a href="https://www.flip.pt/Duvidas-Linguisticas/Duvida-Linguistica/DID/745"&gt;caracter/caráter/caracteres&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</description>
      <category>python</category>
      <category>regex</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>OSD600 - Final Release</title>
      <author>DukeManh</author>
      <pubDate>Sun, 12 Dec 2021 20:55:37 +0000</pubDate>
      <link>https://dev.to/dukemanh/osd600-final-release-2pl</link>
      <guid>https://dev.to/dukemanh/osd600-final-release-2pl</guid>
      <description>&lt;p&gt;For release 0.4, I decided to take the the time to participate in the 2021 GitHub Action hackathon and continue to contribute to Telescope.&lt;/p&gt;

&lt;p&gt;About the same time we worked on integrating GitHub Continuous Integration into our SSG project, GitHub announced they are holding &lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4"&gt;2021 GitHub Action&lt;/a&gt; hackathon in collaboration with Dev. This year, we’re encouraged to utilize existing GitHub Actions to create workflows solutions other developers can utilize to solve problems with open source. &lt;a href="https://dev.to/dukemanh/run-prettier-eslint-on-changed-files-and-run-tests-on-changed-workspaces-25n8"&gt;My submission&lt;/a&gt; was a workflow to run code linter and formatter on only changed files and run test on only changed workspaces of a monorepo. I used what learned from building an SSG in OSD600 to build this project. After all, I walked away having a deeper understanding of GitHub actions, from exploring many existing actions, to building a useful one and publishing it to GitHub marketplace.&lt;/p&gt;

&lt;p&gt;The other contributions were for improving website accessibility and responsiveness in Telescope. These fixed some of the minor issues I encountered while using Telescope myself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Truncate post titles at 2 lines vs 1&lt;/li&gt;
&lt;li&gt;Fluid post titles&lt;/li&gt;
&lt;li&gt;Smaller code block padding on mobile&lt;/li&gt;
&lt;li&gt;Smaller code font-size&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; for date data. Interesting, I learned that &lt;a href="https://github.com/humphd"&gt;David&lt;/a&gt; was the &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=629801"&gt;original author&lt;/a&gt; of the &lt;time&gt; element, implemented 11 years ago. Thank you Dave for your many contributions in open-source technology.&lt;/time&gt;
&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; cannot be descendant of &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; DOM warning&lt;/li&gt;
&lt;li&gt;Do not skip heading levels (e.g, from &lt;code&gt;h1&lt;/code&gt; to &lt;code&gt;h3&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2594"&gt;#2594&lt;/a&gt;, &lt;br&gt;
&lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2593"&gt;#2593&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
