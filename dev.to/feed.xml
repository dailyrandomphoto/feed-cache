<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Use Consistent Hashing in a System Design Interview?</title>
      <author>Arslan Ahmad</author>
      <pubDate>Sat, 19 Jun 2021 23:25:03 +0000</pubDate>
      <link>https://dev.to/arslan_ah/how-to-use-consistent-hashing-in-a-system-design-interview-33ge</link>
      <guid>https://dev.to/arslan_ah/how-to-use-consistent-hashing-in-a-system-design-interview-33ge</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9cLaUyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akcu5t3nf8xrpybgpysl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9cLaUyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akcu5t3nf8xrpybgpysl.png" alt="Consistent Hashing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While designing a scalable system, one of the most important aspects is defining how the data will be partitioned and replicated across servers.&lt;/p&gt;

&lt;p&gt;Let's first define partitioning and replication so that we are on the same page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data partitioning:&lt;/strong&gt; It is the process of distributing data across a set of servers. It improves the scalability and performance of the system.&lt;br&gt;
&lt;strong&gt;Data replication:&lt;/strong&gt; It is the process of making multiple copies of data and storing them on different servers. It improves the availability and durability of the data across the system.&lt;/p&gt;

&lt;p&gt;Data partition and replication strategies lie at the core of any distributed system. A carefully designed scheme for partitioning and replicating the data &lt;strong&gt;enhances the performance, availability, and reliability of the system&lt;/strong&gt; and also defines how efficiently the system will be scaled and managed.&lt;/p&gt;

&lt;p&gt;David Karger et al. first introduced Consistent Hashing in their &lt;a href="https://dl.acm.org/doi/10.1145/258533.258660"&gt;1997 paper&lt;/a&gt; and suggested its use in distributed caching. Later, Consistent Hashing was adopted and enhanced to be used across many distributed systems. In this lesson we will see how Consistent Hashing efficiently solves the problem of data partitioning and replication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-data-partitioning"&gt;
  &lt;/a&gt;
  What is data partitioning?
&lt;/h2&gt;

&lt;p&gt;As stated above, the act of distributing data across a set of nodes is called data partitioning. There are two challenges when we try to distribute data:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How do we know on which node a particular piece of data will be stored?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When we add or remove nodes, how do we know what data will be moved from existing nodes to the new nodes? Additionally, how can we minimize data movement when nodes join or leave?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A naive approach will use a suitable hash function to map the data key to a number. Then, find the server by applying modulo on this number and the total number of servers. For example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Vv25yJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a9urexl2nbwgbhoud5x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Vv25yJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a9urexl2nbwgbhoud5x.jpg" alt="Data partitioning using simple hashing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The scheme described in the above diagram solves the problem of finding a server for storing/retrieving the data. But when we add or remove a server, all our existing mappings will be broken. This is because the total number of servers will be changed, which was used to find the actual server storing the data. So to get things working again, we have to &lt;strong&gt;remap all the keys&lt;/strong&gt; and move our data based on the new server count, which will be a &lt;strong&gt;complete mess!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consistent-hashing-to-the%C2%A0rescue"&gt;
  &lt;/a&gt;
  Consistent Hashing to the rescue
&lt;/h2&gt;

&lt;p&gt;Distributed systems can use Consistent Hashing to distribute data across nodes. Consistent Hashing maps data to physical nodes and ensures that &lt;strong&gt;only a small set of keys move when servers are added or removed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consistent Hashing stores the data managed by a distributed system in a ring. Each node in the ring is assigned a range of data. Here is an example of the consistent hash ring:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sHFBOj7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k63qezdvk3cbqjmhlkby.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sHFBOj7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k63qezdvk3cbqjmhlkby.jpg" alt="Consistent Hashing ring"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With consistent hashing, the ring is divided into smaller, predefined ranges. Each node is assigned one of these ranges. The start of the range is called a &lt;strong&gt;token&lt;/strong&gt;. This means that each node will be assigned one token. The range assigned to each node is computed as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Range start:&lt;/strong&gt;  Token value&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Range end:&lt;/strong&gt;    Next token value - 1&lt;/p&gt;

&lt;p&gt;Here are the tokens and data ranges of the four nodes described in the above diagram:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GzsmQdES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlw4s0wghomgxl8lifoe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzsmQdES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlw4s0wghomgxl8lifoe.png" alt="Token ranges"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whenever the system needs to read or write data, the first step it performs is to apply the MD5 hashing algorithm to the key. The output of this hashing algorithm determines within which range the data lies and hence, on which node the data will be stored. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The MD5 (aka MD5 Message-Digest Algorithm) is a hashing function that accepts a message of any length as input and returns as output a fixed-length digest value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As we saw above, each node is supposed to store data for a fixed range. Thus, the hash generated from the key tells us the node where the data will be stored. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mbpv8NhO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrnufz3hguss1vt01p09.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mbpv8NhO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrnufz3hguss1vt01p09.jpg" alt="Distributing data on the Consistent Hashing ring&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Consistent Hashing scheme described above works great when a node is added or removed from the ring, as in these cases, since only the next node is affected. For example, when a node is removed, the next node becomes responsible for all of the keys stored on the outgoing node. However, this scheme can &lt;strong&gt;result in non-uniform data and load distribution&lt;/strong&gt;. This problem can be solved with the help of Virtual nodes.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-nodes"&gt;
  &lt;/a&gt;
  Virtual nodes
&lt;/h2&gt;

&lt;p&gt;Adding and removing nodes in any distributed system is quite common. Existing nodes can die and may need to be decommissioned. Similarly, new nodes may be added to an existing cluster to meet growing demands. To efficiently handle these scenarios, Consistent Hashing makes use of virtual nodes (or Vnodes).&lt;/p&gt;

&lt;p&gt;As we saw above, the basic Consistent Hashing algorithm assigns a single token (or a consecutive hash range) to each physical node. This was a static division of ranges that requires calculating tokens based on a given number of nodes. This scheme made adding or replacing a node an expensive operation, as, in this case, we would like to rebalance and distribute the data to all other nodes, resulting in moving a lot of data. Here are a few potential issues associated with a manual and fixed division of the ranges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Adding or removing nodes&lt;/strong&gt;: Adding or removing nodes will result in recomputing the tokens causing a significant administrative overhead for a large cluster.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hotspots&lt;/strong&gt;: Since each node is assigned one large range, if the data is not evenly distributed, some nodes can become hotspots&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a distributed system, any server responsible for a huge partition of data can become a bottleneck for the system. A large share of data storage and retrieval requests will go to that node which can effectively bring the performance of the whole system down. Such loaded servers are called hotspots. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Node rebuilding&lt;/strong&gt;: Since each node's data might be replicated (for fault-tolerance) on a fixed number of other nodes, when we need to rebuild a node, only its replica nodes can provide the data. This puts a lot of pressure on the replica nodes and can lead to service degradation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To handle these issues, Consistent Hashing introduces a new scheme of distributing the tokens to physical nodes. Instead of assigning a single token to a node, the hash range is divided into multiple smaller ranges, and each physical node is assigned several of these smaller ranges. Each of these subranges is considered a Vnode. With Vnodes, instead of a node being responsible for just one token, it is responsible for many tokens (or subranges). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ecyw_wOk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxq07w772atiqe0z4fsb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ecyw_wOk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxq07w772atiqe0z4fsb.jpg" alt="Comparing Consistent Hashing ring with and without Vnodes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Practically, Vnodes are &lt;strong&gt;randomly distributed&lt;/strong&gt; across the cluster and are generally &lt;strong&gt;non-contiguous&lt;/strong&gt; so that no two neighboring Vnodes are assigned to the same physical node or rack. Additionally, nodes do carry replicas of other nodes for fault tolerance. Also, since there can be heterogeneous machines in the clusters, some servers might hold more Vnodes than others. The figure below shows how physical nodes A, B, C, D, &amp;amp; E use Vnodes of the Consistent Hash ring. Each physical node is assigned a set of Vnodes and each Vnode is replicated once.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WHH3dg4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyko0g3uleqv3ew9iql7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WHH3dg4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyko0g3uleqv3ew9iql7.jpg" alt="Mapping Vnodes to physical nodes on a Consistent Hashing ring"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-vnodes"&gt;
  &lt;/a&gt;
  Advantages of Vnodes
&lt;/h3&gt;

&lt;p&gt;Vnodes gives the following advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; As Vnodes help spread the load more evenly across the physical nodes on the cluster by dividing the hash ranges into smaller subranges, this speeds up the rebalancing process after adding or removing nodes. When a new node is added, it receives many Vnodes from the existing nodes to maintain a balanced cluster. Similarly, when a node needs to be rebuilt, instead of getting data from a fixed number of replicas, many nodes participate in the rebuild process. &lt;/li&gt;
&lt;li&gt; Vnodes make it easier to maintain a cluster containing heterogeneous machines. This means, with Vnodes, we can assign a high number of sub-ranges to a powerful server and a lower number of sub-ranges to a less powerful server.&lt;/li&gt;
&lt;li&gt; In contrast to one big range, since Vnodes help assign smaller ranges to each physical node, this decreases the probability of hotspots.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#data-replication-using-consistent-hashing"&gt;
  &lt;/a&gt;
  Data replication using Consistent Hashing
&lt;/h2&gt;

&lt;p&gt;To ensure highly available and durability, Consistent Hashing replicates each data item on multiple N nodes in the system where the value N is equivalent to the replication factor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The replication factor is the number of nodes that will receive the copy of the same data. For example, a replication factor of two means there are two copies of each data item, where each copy is stored on a different node.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each key is assigned to a &lt;strong&gt;coordinator node&lt;/strong&gt; (generally the first node that falls in the hash range), which first stores the data locally and then replicates it to 'N-1' clockwise successor nodes on the ring. This results in each node owning the region on the ring between it and its 'Nth' predecessor. In an &lt;strong&gt;eventually consistent&lt;/strong&gt; system, this replication is done asynchronously (in the background).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In eventually consistent systems, copies of data don't always have to be identical as long as they are designed to eventually become consistent. In distributed systems, eventual consistency is used to achieve high availability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9srEbWeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwpqwzenp3bb164vwz4m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9srEbWeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwpqwzenp3bb164vwz4m.jpg" alt="Data replication in Consistent Hashing&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consistent-hashing-use-cases"&gt;
  &lt;/a&gt;
  Consistent Hashing use cases
&lt;/h2&gt;

&lt;p&gt;Amazon’s &lt;a href="https://www.allthingsdistributed.com/2007/10/amazons_dynamo.html"&gt;Dynamo&lt;/a&gt; and Apache &lt;a href="https://en.wikipedia.org/wiki/Apache_Cassandra"&gt;Cassandra&lt;/a&gt; use Consistent Hashing to distribute and replicate data across nodes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-further-reading"&gt;
  &lt;/a&gt;
  References and further reading
&lt;/h2&gt;

&lt;p&gt;Have a look at &lt;a href="https://www.educative.io/courses/grokking-adv-system-design-intvw?aff=VOY6"&gt;Grokking the Advanced System Design Interview &lt;/a&gt; for some good examples of how distributed systems use Consistent Hashing.&lt;/p&gt;

&lt;p&gt;Check &lt;a href="https://www.designgurus.org/"&gt;Design Gurus&lt;/a&gt; for some good courses on Programming and System Design interviews.&lt;/p&gt;

</description>
      <category>distributedsystems</category>
      <category>bigdata</category>
      <category>career</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Serverless Static Wordpress on AWS for $0.01 a day</title>
      <author>Pete Wilcock</author>
      <pubDate>Sat, 19 Jun 2021 23:21:14 +0000</pubDate>
      <link>https://dev.to/aws-builders/serverless-static-wordpress-on-aws-for-0-01-a-day-1b29</link>
      <guid>https://dev.to/aws-builders/serverless-static-wordpress-on-aws-for-0-01-a-day-1b29</guid>
      <description>&lt;p&gt;You’ll think this article is clickbait, but it’s not. I’ve built a fully-functional &lt;strong&gt;static&lt;/strong&gt; serverless Wordpress solution on AWS, with Global CDN, WAF and A-Grade SSL for literally one cent per day. It’s &lt;em&gt;fast&lt;/em&gt;, resilient, scalable, and unlike many Wordpress sites, not susceptible to brute-force login attacks.  What’s more: &lt;strong&gt;You can do it too&lt;/strong&gt;. It’s wrapped up in an open-source Terraform module and I’m kind of hoping it’ll break the internet with its accessible simplicity. You can set this up from a standing start in less than 30 minutes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-serverless-static-wordpress-do"&gt;
  &lt;/a&gt;
  What does Serverless Static Wordpress do?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/TechToSpeech/terraform-aws-serverless-static-wordpress"&gt;Serverless Static Wordpress&lt;/a&gt;&lt;/strong&gt; is a Community Terraform Module from TechToSpeech that needs nothing more than a registered domain name with its DNS pointed at AWS.  It creates a complete infrastructure framework that allows you to launch a temporary, transient Wordpress container. You then log in and customise it like any Wordpress site, and finally publish it as a static site fronted by a global CloudFront CDN and S3 Origin. When you’re done you shut down the Wordpress container and it costs you almost nothing.  The emphasis is on extremely minimal configuration as the majority of everything you’d need is pre-installed and pre-configured in line with industry best practices and &lt;em&gt;highly efficient&lt;/em&gt; running costs. Have an existing site that you'd like to convert to Serverless Static Wordpress? No problem.  There’s a lot to get through here so this story is broken up into two different articles; &lt;strong&gt;The Short Version&lt;/strong&gt; and &lt;a href="https://www.techtospeech.com/serverless-static-wordpress-on-aws-the-long-version/"&gt;&lt;strong&gt;The Long Version&lt;/strong&gt;&lt;/a&gt;. Pick the first one if you want to grab this thing and get started immediately, and the second one if you want to know exactly how this solution works under the hood and learn about all of the work it took to put it together.  If you are familiar with AWS this will go a lot faster, but even if this is your first time &lt;strong&gt;The Short Version&lt;/strong&gt; steps should get you up and running in no time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uq-ykJnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj6oechff6x86lbjnshd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uq-ykJnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj6oechff6x86lbjnshd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-short-version"&gt;
  &lt;/a&gt;
  The Short Version
&lt;/h2&gt;

&lt;p&gt;For all of these steps we’ll use the example domain &lt;a href="http://www.peter.cloud"&gt;www.peter.cloud&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-create-an-aws-account"&gt;
  &lt;/a&gt;
  Step 0 - &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/"&gt;Create an AWS account&lt;/a&gt;.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#step-1-the-domain"&gt;
  &lt;/a&gt;
  Step 1 - The domain
&lt;/h3&gt;

&lt;p&gt;In your AWS account, &lt;a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html"&gt;create a Route53 Hosted Zone&lt;/a&gt; for your domain name. Once created, this will display four DNS nameservers for your new website. Go to wherever your domain name is registered (it could be AWS itself, or anywhere else), and update the DNS Servers to the four just created. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-the-tools-and-credentials"&gt;
  &lt;/a&gt;
  Step 2 - The tools and credentials
&lt;/h3&gt;

&lt;p&gt;Ensure you have &lt;a href="https://www.terraform.io/downloads.html"&gt;Terraform&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html"&gt;AWS-CLI&lt;/a&gt; (with a user and credentials) and optionally (but preferably) &lt;a href="https://docs.docker.com/engine/install/"&gt;Docker&lt;/a&gt; with the service started. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-the-code-and-the-plan"&gt;
  &lt;/a&gt;
  Step 3 - The code and the plan
&lt;/h3&gt;

&lt;p&gt;Check the &lt;a href="https://github.com/TechToSpeech/terraform-aws-serverless-static-wordpress"&gt;GitHub README&lt;/a&gt; for the project for extensive code examples to get set up and deploying quickly. The module does _almost_ everything by itself, but there are a couple of extra resources specified here that’ll make it a &lt;strong&gt;completely&lt;/strong&gt; hands-off end-to-end process. These are the parts that need docker installed and the AWS CLI configured properly with a default region and profile. Terraform init, plan, and apply, then sit back and get a drink. The full end-to-end creation process here should take about 10 minutes. Unless you did something wrong, this should complete without errors - but just in case it does try running the plan and apply steps again. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-launch-wordpress"&gt;
  &lt;/a&gt;
  Step 4 - Launch Wordpress
&lt;/h3&gt;

&lt;p&gt;What you did in Step 3 is create everything you need to launch Wordpress and publish your static site - but it’s not launched yet. If you didn’t add the optional Terraform resource to trigger the CodeBuild job, you’ll need to head to the CodeBuild console in your chosen region and start the ‘-serverless-wordpress-docker-build’ job and wait for it to complete (it’ll take about 2 minutes).  Modify the ‘launch’ attribute of your module from 0 to 1, and then run ‘terraform apply’ again. Wordpress will now launch. The first-time set-up will take roughly 5 minutes while the initial site is created, configured, and the necessary plugins are installed.  By default, your Wordpress installation will become available at &lt;a href="http://wordpress.yourdomain.com"&gt;http://wordpress.yourdomain.com&lt;/a&gt; (Why no SSL for this part? Check &lt;a href="https://www.techtospeech.com/serverless-static-wordpress-on-aws-the-long-version/"&gt;&lt;strong&gt;The Long Version&lt;/strong&gt;&lt;/a&gt; for details) The default username is ‘supervisor’ and default password is ‘techtospeech.com’. You can either override these, along with the default subdomain, in the module’s configuration, or modify them after you log into Wordpress. &lt;strong&gt;Please make sure you do!&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-post-and-publish"&gt;
  &lt;/a&gt;
  Step 5 - Post and Publish
&lt;/h3&gt;

&lt;p&gt;This is now a Wordpress installation like any other. You can install most plugins (although any with explicit server-side functionality won’t work in a static site), any themes you like, and even import an existing site backup. SEO plugins like &lt;strong&gt;Yoast&lt;/strong&gt; work just fine. If the site is idle for more than 5 minutes the backend database will pause (to save money), but simply refreshing the admin console will make it start up again after a few seconds of delay. Whenever you want to stop the container, toggle the ‘launch’ attribute of your Terraform configuration back to 0 and re-run ‘terraform apply’. You can also manually scale the ECS Service to 0 tasks in the AWS console. A better method of one-tap launching and stopping the site will be coming in future! Stopping the container doesn’t lose any data - the database will be saved in the background, along with any files, images, plugins or themes you installed. Its state is perfectly preserved until the next time you launch it.  But - &lt;strong&gt;it is critically important that you remember to shut the container down when you’re done&lt;/strong&gt;. Otherwise it’ll keep on running - it won’t cost you too much if it does but the whole point of this solution is to save money, not waste it! (Another future update will have an auto-shutdown-when-idle feature) When you’re ready it’s time to publish. Check out the &lt;a href="https://github.com/leonstafford/wp2static"&gt;WP2Static plugin&lt;/a&gt; that has been automatically installed for you, along with the &lt;a href="https://github.com/leonstafford/wp2static-addon-s3"&gt;WP2Static S3 Addon&lt;/a&gt;. &lt;a href="https://ljs.dev/"&gt;Leon Stafford&lt;/a&gt; is the creator of these plugins. He’s &lt;strong&gt;the&lt;/strong&gt; open-source static Wordpress guru without whom this project would not have a deployment mechanism. I talk more about Leon in &lt;a href="//httsp://www.techtospeech.com/serverless-static-wordpress-on-aws-the-long-version/"&gt;&lt;strong&gt;The Long Version&lt;/strong&gt;&lt;/a&gt;.  You can check out all of the WP2Static options you can tweak to configure your deployment, but the auto-setup has pre-filled everything you need to publish. Hit the ‘Generate Static Site’ button and periodically refresh the log to check on status. This will now crawl and rewrite every URL to a neat static version that then gets pushed directly into the S3 bucket backing the static version of the site.  This process can be as fast as 3-5 minutes or much longer if you have a larger site. We’re working on faster methods for these different steps (and &lt;a href="https://github.com/leonstafford/wp2static/issues"&gt;help is gratefully received&lt;/a&gt;!) but at the moment the version bundled with this set-up is stable and reliable with a little patience.  Once the process completes…. You’re done! Head to the https version of your site (in this example, &lt;a href="https://www.peter.cloud"&gt;https://www.peter.cloud&lt;/a&gt;) and be amazed at how your website looks identical to how it did before, except now it’s serverless, static, cached with a Global CDN and won’t go down to some feeble DDoS probing or wp-login brute-forcing. In fact, try to go to &lt;a href="https://www.peter.cloud/wp-admin"&gt;https://www.peter.cloud/wp-admin&lt;/a&gt; - ha! Doesn’t exist! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-really-only-001-a-day"&gt;
  &lt;/a&gt;
  Is it really only $0.01 a day?
&lt;/h2&gt;

&lt;p&gt;Yes, but also no. It depends.  Consider the typical use case. You’re a nerdy tech person with a personal blogging site (and I am, check out &lt;a href="https://www.petewilcock.com"&gt;petewilcock.com&lt;/a&gt;), you’ve got a few articles, you probably get between 50 and 200 hits a day. With that kind of traffic the site will run in its static form without any intervention for around $0.01 a day - completely legitimately. On the other hand, if you’re a globally-popular massive content-generation business with thousands of articles and millions of hits a month… it’ll cost more. Your only variable cost with traffic is CloudFront distribution charges, and you can mitigate these by either getting a discount with a &lt;a href="https://www.techtospeech.com/aws-announces-cloudfront-security-savings-bundle/"&gt;CloudFront Security Savings Bundle&lt;/a&gt;, or if you’re a particularly big player you can enquire about custom CloudFront pricing directly to AWS. WAF has some unavoidable fixed costs that completely falsify my clickbait title and will add at least $0.60 a day to running costs. But if you're suspeptible enough to need the WAF, I'm guessing you can afford it.  As I run several static Wordpress sites using this set-up, I’ve paid literally $1 a month for a Savings Bundle and that covers a lot of my usage. Previously I was running a T3 web hosting server with CPanel licencing that cost around $600 a year. Now it’s not a strictly fair comparison for a few reasons (this set-up doesn’t handle email at the moment for example - but look out for a future update!), but you start to get an idea of the difference between this and a ‘conventional’ hosting set-up for a basic website. Even other providers of ‘Static’ Wordpress sites can’t compete with this, because they need a profit-margin and you don’t.  The only other costs to be aware of are the ECS Fargate container running costs that backs Wordpress (and it runs in Spot mode so it’s &lt;em&gt;very&lt;/em&gt; cheap), and the RDS Aurora Serverless v1 database that backs the Wordpress database. This is actually the most expensive bit (and you guessed it, a future version will offer a cheaper alternative if you want to sacrifice the features and convenience), but you’re only charged for the time you’re actively modifying the site. As an example, if I’m editing the site for several hours, this might cost around $0.30. The key part is that the vast majority of the time when you’re not adding content, it costs practically nothing. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h3&gt;

&lt;p&gt;No set-up is ever perfect, so if you have any issues with the Terraform module please &lt;a href="https://github.com/TechToSpeech/terraform-aws-serverless-static-wordpress/issues"&gt;report them on our GitHub&lt;/a&gt; and we’ll take a look. Contributions are also welcome! If you experience an issue with the WP2Static plugin, &lt;a href="https://github.com/leonstafford/wp2static/issues"&gt;check out their issues page&lt;/a&gt; for common issues and solutions and the chances are anything you encounter can be tweaked to work as you’d like. You will be free to upgrade the plugin, or Wordpress itself, whenever you like - but always take a backup first! I recommend &lt;a href="https://wordpress.org/plugins/updraftplus/"&gt;UpdraftPlus&lt;/a&gt; as a great free Wordpress backup plugin. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h2&gt;

&lt;p&gt;Firstly another reminder. &lt;strong&gt;Don’t forget to turn off your Wordpress container when you’re done!&lt;/strong&gt; This module is the culmination of many months of painful iterations both to get it working for myself, and then extensively bashing it into shape so I could publish it publicly without embarrassing myself. It leverages all of my experience of AWS since I started with it back in 2014 and compresses every element of DevOps and web development I’ve ever learned into a tight solution that can work for anybody. I hope it works for you! To learn more about this mad journey, check out &lt;a href="https://www.techtospeech.com/serverless-static-wordpress-on-aws-the-long-version/"&gt;&lt;strong&gt;The Long Version&lt;/strong&gt;&lt;/a&gt; article. \&lt;/p&gt;

&lt;p&gt;-- Pete Wilcock is a 9x AWS Certified DevOps Consultant, AWS Community Builder, and Technical Writer for TechToSpeech. If I’m not &lt;em&gt;possibly&lt;/em&gt; losing my mind and &lt;em&gt;definitely&lt;/em&gt; my social life buried in some project, you can find me on &lt;a href="https://www.linkedin.com/in/petewilcock/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/WilcockPete"&gt;Twitter&lt;/a&gt;, &lt;a href="https://github.com/petewilcock"&gt;GitHub&lt;/a&gt;, or &lt;a href="https://www.petewilcock.com/"&gt;my personal site&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>serverless</category>
      <category>aws</category>
      <category>cdn</category>
    </item>
    <item>
      <title>Terminal</title>
      <author>CODETOPIA-COMMUNITY</author>
      <pubDate>Sat, 19 Jun 2021 23:11:31 +0000</pubDate>
      <link>https://dev.to/codetopiacommunity/terminal-3fnm</link>
      <guid>https://dev.to/codetopiacommunity/terminal-3fnm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#getting-a-terminal-for-windows-cmder"&gt;
  &lt;/a&gt;
  Getting a terminal for windows (cmder)
&lt;/h2&gt;

&lt;p&gt;Before we proceed with this blog article, I would want to inform you that there is a video about this article on Codetopia’s YouTube channel. You can watch it or read this post or preferably do both.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zCQt6TBr5OY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-terminal"&gt;
  &lt;/a&gt;
  What is a terminal?
&lt;/h3&gt;

&lt;p&gt;From experience, I can tell that about 90% of learners who begin their way into the development world or into computing often know nothing about the terminal and often get confused when anything about it is mentioned. What is the terminal? one may ask. The terminal is actually an interface where instructions known as commands could be given to the computer to carry out. Unlike the normal GUI (Graphical User Interface) where the mouse is used to click buttons and other graphical elements in order to issue commands, we have another interface called the CLI (short for Command-Line Interface) of which the terminal happens to fall under, and it is through the terminal that commands are written to give out a task. Let us take for instance, a shutdown operation. Using the normal way, a user would click a few buttons in order to achieve that. That same task (shutdown) could be carried out with the terminal but within a short amount of time. Since this tutorial is actually not dedicated to the deep stuffs about the terminal, we’ll not go deep into it. But below is just a glance of what a linux terminal looks like.&lt;br&gt;
&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WBsD8IAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9uviws92oat2uji9hcp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBsD8IAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9uviws92oat2uji9hcp.png" alt="ubuntu terminal"&gt;&lt;/a&gt;&lt;/p&gt;
ubuntu terminal





&lt;p&gt;For the unix and linux users, a terminal is no news because most of the operations on these operating systems require the use of terminals. But for some windows users, it’s a big pool of confusion and fear. Windows terminals have proven to be insufficient as it is very inefficient and slow in accomplishing some computational and development task. But in recent times, developers have contributed to developing terminal tools to aid windows users and developers complete their computational and development task with ease. So lets get straight into it. We’ll not be using windows’ default terminal (command prompt) but a terminal tool called cmder (commander). But first We’ll need to install it. Cmder is a software package created out of pure frustration over the absence of nice and efficient console emulators on Windows. It is based on amazing software, and spiced up with the Monokai color scheme and a custom prompt layout, looking sexy from the start. Follow the instructions below to install Cmder.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to this link -&amp;gt; &lt;a href="https://cmder.net/"&gt;https://cmder.net/&lt;/a&gt; and scroll down till you see something like the picture below&lt;br&gt;
&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ROjZIvQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0o21mnoyn4b0nuy2bzq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROjZIvQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0o21mnoyn4b0nuy2bzq.png" alt="cmder download page"&gt;&lt;/a&gt;&lt;/p&gt;
cmder download page



&lt;p&gt;&lt;br&gt;
&lt;strong&gt;N.B:&lt;/strong&gt; There are two options to download from namely the &lt;strong&gt;Mini&lt;/strong&gt; and &lt;strong&gt;Full&lt;/strong&gt;. If you choose the &lt;strong&gt;Mini&lt;/strong&gt;, you would have limited features and would have to install git with cmder manually (don’t worry, will show you how very soon). But if you choose the &lt;strong&gt;full&lt;/strong&gt; setup with git, then you don’t need to install &lt;em&gt;git&lt;/em&gt; again. In this case it is recommended to go in for the &lt;strong&gt;full&lt;/strong&gt; version.&lt;br&gt;
After hitting the download button, Wait for it to finish downloading&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After downloading, you have to extract the zipped file into the &lt;strong&gt;Program Files&lt;/strong&gt; directory in your &lt;strong&gt;local C drive&lt;/strong&gt;.&lt;br&gt;
If you don’t have an extraction tool or software for the extraction, I recommend &lt;a href="https://www.win-rar.com"&gt;winrar&lt;/a&gt;.&lt;br&gt;
Before you extract the files into your Program Files, you first have to create a new folder in the Program Files directory. Let’s do that together.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;First open a new file explorer&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--awgw-NOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhu2qno8a4zbbdtlqp90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--awgw-NOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhu2qno8a4zbbdtlqp90.png" alt="windows file explorer"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;click on &lt;strong&gt;This PC&lt;/strong&gt; located on the left pane of your file explorer&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAni-Dxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhmitrnwrdwa6dyhq59q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAni-Dxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhmitrnwrdwa6dyhq59q.png" alt="This PC"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Double click on Local Disk (C:) to open&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q9nv3-QG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rakem41cnmgsgh6gfns1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q9nv3-QG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rakem41cnmgsgh6gfns1.png" alt="Local Disk (C:)"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;locate &lt;strong&gt;Program Files&lt;/strong&gt; and launch it &lt;em&gt;(it’s just Program Files not Program Files (x86))&lt;/em&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXc3VgVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur55ixjzqqmj9cw8zqni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXc3VgVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur55ixjzqqmj9cw8zqni.png" alt="program files"&gt;&lt;/a&gt;&lt;br&gt;
After opening the &lt;strong&gt;Program Files&lt;/strong&gt; directory, create a new folderyou can create a new folder by simply using the shortcut Ctrl+Shift+n or using the GUI way which is &lt;strong&gt;right clicking on an empty space in the directory (folder), selecting new and then folder&lt;/strong&gt;. Grant administrative permissions if you are being asked by your computer by clicking yes, continue or ok.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70XyMIsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak6ht3zqh9fg6vdn35cs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70XyMIsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak6ht3zqh9fg6vdn35cs.png" alt="new folder"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now rename that folder to any name you want. But due to pratical reasons, I recommend you name is &lt;strong&gt;commander&lt;/strong&gt;&lt;br&gt;
To rename a folder, you have to right click on that folder and choose rename from the pop-up menu. After selecting rename, type the name you want to give to your folder and press enter&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iCrau8_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1zn54sj20wg5b7lmfe8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iCrau8_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1zn54sj20wg5b7lmfe8.png" alt="commander folder"&gt;&lt;/a&gt; Now that we are done creating our folder in the Program Files directory, Its time to extract the cmder zipped files to our &lt;strong&gt;commander folder&lt;/strong&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Locate the cmder downloaded zipped file. (Which should be in your downloads directory or folder.).&lt;br&gt;
After locating it, right click on it and select &lt;strong&gt;Open with WinRAR&lt;/strong&gt; (if only you have &lt;a href="https://www.win-rar.com"&gt;winrar&lt;/a&gt; installed)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---R2Wi1yN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f8wvakpgo7sq9fqfk6m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---R2Wi1yN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f8wvakpgo7sq9fqfk6m.png" alt="open cmder with winrar"&gt;&lt;/a&gt;&lt;br&gt;
After opening with winrar, you should see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M-wFcVx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4tukzbfbiqikucjy72g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M-wFcVx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4tukzbfbiqikucjy72g.png" alt="cmder launched with winrar"&gt;&lt;/a&gt;&lt;br&gt;
After opening cmder with winrar, go back to your &lt;strong&gt;program files&lt;/strong&gt; directory and open the &lt;strong&gt;commander&lt;/strong&gt; folder we created.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ORoiuOlf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spbqewor3x8rlewimlgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ORoiuOlf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spbqewor3x8rlewimlgb.png" alt="commander folder"&gt;&lt;/a&gt;&lt;br&gt;
Now open the cmder zipped folder and the commander folder side by side on your windows&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ejB5Ip0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhrotwleaar7ldpib4i7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ejB5Ip0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhrotwleaar7ldpib4i7.png" alt="open folder side by side"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now highlight all the files and folders in the cmder winrar directory&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---bh7JgBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1r9upk8js5qiclbfjml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---bh7JgBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1r9upk8js5qiclbfjml.png" alt="highlight files and folder in the cmder winrar folder"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;To highlight on your windows, press and hold the left button of your mouse and drag the mouse over the object you want to hightlight&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After highlighting all the files and folders in the cmder winrar directory, drag all the files and folders and drop it into the commander folder (which is opened by the side of the cmder winrar directory). After droping the files and folder into the commander folder, your should see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b04rOhhp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4piksmfnig7l7o802vz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b04rOhhp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4piksmfnig7l7o802vz.png" alt="extraction in progress"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;since we are extracting to the &lt;strong&gt;commander&lt;/strong&gt; directory which is located in the &lt;strong&gt;Program Files&lt;/strong&gt; directory in our &lt;strong&gt;Local Disk (C:)&lt;/strong&gt;, we may need to grant administrative rights. To do this, click on &lt;strong&gt;Do this for all current items&lt;/strong&gt;, click on &lt;strong&gt;continue&lt;/strong&gt; and wait for it to complete the extraction&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmswqXo5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqpefjbc1tnf3kt3w20h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmswqXo5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqpefjbc1tnf3kt3w20h.png" alt="granting administrative rights"&gt;&lt;/a&gt;&lt;br&gt;
After the extraction you should see these bunch of files and folders in your commander directory&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7pgn8TQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/snuk5a11grfavngegtxr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pgn8TQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/snuk5a11grfavngegtxr.png" alt="extraction complete"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now double click on the &lt;strong&gt;cmder&lt;/strong&gt; icon in the &lt;strong&gt;commander&lt;/strong&gt; directory to begin the installation &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--67tuA1ky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3idlelgspw044hunja3q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67tuA1ky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3idlelgspw044hunja3q.png" alt="cmder icon in commander directory"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After launching cmder, cmder will begin to run some script for the installation&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fo2HrHkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuqmj3rmhyy1idtd6t75.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fo2HrHkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuqmj3rmhyy1idtd6t75.png" alt="cmder running scripts"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We finally now have a very powerful and cool terminal on our windows that we can use to perform command line tasks.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-might-want-to-do-this"&gt;
  &lt;/a&gt;
  You might want to do this
&lt;/h2&gt;

&lt;p&gt;Some of you might realize that after you install cmder and try to find it by searching it name in your windows search box, it’s nowhere to be found on your windows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LscQBjOy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6a0fydoxfly4r6sy91ua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LscQBjOy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6a0fydoxfly4r6sy91ua.png" alt="windows search box"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is on your windows alright but you just have to do a couple of configurations to make it searchable. Like editing your environment variables or pinning it to your start menu. The formal is quite complicated for beginners so we will focus on the latter. To make cmder searchable on your windows, just follow these simple steps to get it done&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to the &lt;strong&gt;commander&lt;/strong&gt; folder which contains the extracted cmder files and launch it (which is located in your Program Files directory which is also located in your C local disk)&lt;/li&gt;
&lt;li&gt;After launching it, locate and &lt;strong&gt;right click&lt;/strong&gt; on the cmder icon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----zVamiM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7kd8tei6ahrn00clag9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----zVamiM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7kd8tei6ahrn00clag9.png" alt="right click on the cmder icon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;click on &lt;strong&gt;Pin to Start&lt;/strong&gt; from the pop-up menu&lt;/li&gt;
&lt;li&gt;Now go to your start menu and you will now find cmder in there
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7x4ZrB_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4irqgffx2ehtaxbvnzu.png" alt="cmder on start menu"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good job! Cmder is now searchable on your windows. You can confirm that by doing a quick search in your windows search box&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bRbUWlLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pctxz584w6x6lu0g17ld.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bRbUWlLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pctxz584w6x6lu0g17ld.png" alt="searching cmder in windows search box"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bounus-round"&gt;
  &lt;/a&gt;
  BOUNUS ROUND
&lt;/h2&gt;

&lt;p&gt;The cmder terminal also has some cool settings that you can play around with. You can alter changes to the font, the color scheme, font family, font style etc. To access these settings, you have to right click on either the top-most or bottom section of your terminal and click on settings.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GewWNpZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wts9pdcp1mnqwogvvym4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GewWNpZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wts9pdcp1mnqwogvvym4.png" alt="cmder terminal settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the pop-up dialog box, you can make a couple of changes and select &lt;strong&gt;“save settings”&lt;/strong&gt; after you are done.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4cSGtCAG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wagmyyqrgyzdfbzcl60u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4cSGtCAG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wagmyyqrgyzdfbzcl60u.png" alt="cmder settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we are not focusing on altering changes to cmder in this blog post, we won’t dive further. But you can make your own changes to suit your taste and preference.&lt;/p&gt;

&lt;p&gt;:-) Good luck on your new journey with your cool windows terminal&lt;/p&gt;

</description>
      <category>terminal</category>
      <category>cli</category>
      <category>console</category>
      <category>cmder</category>
    </item>
    <item>
      <title>Building Microservices in Go: REST APIs - OpenAPI 3 and Swagger UI</title>
      <author>Mario Carrion</author>
      <pubDate>Sat, 19 Jun 2021 22:25:16 +0000</pubDate>
      <link>https://dev.to/mariocarrion/building-microservices-in-go-rest-apis-openapi-3-and-swagger-ui-8o1</link>
      <guid>https://dev.to/mariocarrion/building-microservices-in-go-rest-apis-openapi-3-and-swagger-ui-8o1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-swagger-openapi"&gt;
  &lt;/a&gt;
  What is Swagger? OpenAPI?
&lt;/h2&gt;

&lt;p&gt;Swagger/OpenAPI allows us to document and collaborate with our users, specifically it allows to define the resources, parameters, types, fields and everything that describes the APIs we are building. Swagger and OpenAPI are two different things, it's better explained on &lt;a href="https://swagger.io/blog/api-strategy/difference-between-swagger-and-openapi/"&gt;the original blog post&lt;/a&gt;, but the idea is basically this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;OpenAPI&lt;/em&gt;: Specification&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Swagger&lt;/em&gt;: Tools for implementing the specification&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This post includes Amazon affiliate links. If you click on one of them and you make a purchase I'll earn a commission. Please notice your final price &lt;strong&gt;is not&lt;/strong&gt; affected at all by using those links.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HwtOAc0M08o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;The code used for this post is &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/tree/074bbb9f4d0f79e5bced943c10c56013705969a9"&gt;available on Github&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#implementing-openapi-3"&gt;
  &lt;/a&gt;
  Implementing OpenAPI 3
&lt;/h2&gt;

&lt;p&gt;Using Swagger 2.0 in Go well-known to be supported by packages like &lt;a href="https://github.com/go-swagger/go-swagger"&gt;github.com/go-swagger/go-swagger&lt;/a&gt; and &lt;a href="https://github.com/swaggo/swag"&gt;github.com/swaggo/swag&lt;/a&gt; however it gets more complicated when trying to use something much more recent like OpenAPI 3, in those cases really we have a few packages we can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/getkin/kin-openapi"&gt;github.com/getkin/kin-openapi/openapi3&lt;/a&gt;: to generate OpenAPI 3.0 documentation, and&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/deepmap/oapi-codegen"&gt;github.com/deepmap/oapi-codegen&lt;/a&gt;: to generate Go client and server boilerplate from OpenAPI 3 specifications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For generating the OpenAPI 3.0 document, we are going to be using the &lt;code&gt;getkin/kin-openapi/openapi3&lt;/code&gt; package, our example already defines &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/blob/074bbb9f4d0f79e5bced943c10c56013705969a9/internal/rest/open_api.go"&gt;a function that does that for us&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This function is long and it could a turn off for a lot of people, however I like it the way it is because it allows me to explicitly indicate the values I need, there's no magic (like in &lt;code&gt;go-swagger&lt;/code&gt; or &lt;code&gt;swagger/swag&lt;/code&gt; for example), it's a pro/con depending on how you see it because everything it's more manual.&lt;/p&gt;

&lt;p&gt;In the end, the code needed to represent our API will be equivalent to the code written to build that structure. For example, taking the basic OpenAPI details, it looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// NewOpenAPI3 instantiates the OpenAPI specification for this service.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewOpenAPI3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;openapi3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Swagger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;swagger&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;openapi3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Swagger&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;OpenAPI&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"3.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;openapi3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="s"&gt;"ToDo API"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"REST APIs used for interacting with the ToDo Service"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="s"&gt;"0.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;License&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;openapi3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;License&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;"https://opensource.org/licenses/MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;Contact&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;openapi3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/MarioCarrion/todo-api-microservice-example"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;Servers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;openapi3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Servers&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;openapi3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Local development"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="s"&gt;"http://0.0.0.0:9234"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// ... more code ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that function defined and with a &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/blob/074bbb9f4d0f79e5bced943c10c56013705969a9/cmd/openapi-gen/main.go"&gt;helper binary&lt;/a&gt; we call &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/blob/074bbb9f4d0f79e5bced943c10c56013705969a9/internal/rest/open_api.go#L11"&gt;&lt;code&gt;go generate&lt;/code&gt;&lt;/a&gt; to build the YAML and JSON files we need to describe our API.&lt;/p&gt;

&lt;p&gt;In practice the code in that &lt;code&gt;cmd/openapi-gen/main.go&lt;/code&gt; looks basically like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;swagger&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewOpenAPI3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// openapi3.json&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;swagger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"openapi3.json"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0644&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// XXX: explicitly ignoring errors&lt;/span&gt;

    &lt;span class="c"&gt;// openapi3.yaml&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;swagger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"openapi3.yaml"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0644&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// XXX: explicitly ignoring errors&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last thing is to make those &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/blob/074bbb9f4d0f79e5bced943c10c56013705969a9/internal/rest/open_api.go#L190-L206"&gt;files available&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;RegisterOpenAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;swagger&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewOpenAPI3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/openapi3.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// ... code here ...&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodGet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/openapi3.yaml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// ... code here ...&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodGet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementing-swagger-ui"&gt;
  &lt;/a&gt;
  Implementing Swagger UI
&lt;/h2&gt;

&lt;p&gt;We built out OpenAPI 3 files, now as part of our HTTP handlers we are going to allow our users to interact with the &lt;a href="https://github.com/swagger-api/swagger-ui"&gt;Swagger UI&lt;/a&gt; to invoke our API, this is something that you may or not want to have in production, I personally prefer only allowing internal environments to support this UI for testing purposes.&lt;/p&gt;

&lt;p&gt;To support the Swagger UI our your API we need to download all the &lt;a href="https://github.com/swagger-api/swagger-ui/tree/master/dist"&gt;&lt;code&gt;dist&lt;/code&gt; files&lt;/a&gt; from the original repository and then embed them as part of your API as a new handler, for example copying the files over to &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/tree/074bbb9f4d0f79e5bced943c10c56013705969a9/cmd/rest-server/static/swagger-ui"&gt;&lt;code&gt;cmd/rest-server/static/swagger-ui&lt;/code&gt;&lt;/a&gt;, and then embedding those using the new &lt;code&gt;embed&lt;/code&gt; package included in Go 1.16, using something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;//go:embed static&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FS&lt;/span&gt;


&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// ... other code ...&lt;/span&gt;

    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;fsys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"static"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PathPrefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/static/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StripPrefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/static/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsys&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

    &lt;span class="n"&gt;srv&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c"&gt;// ... other code ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that code in place we will be able to request &lt;code&gt;http://address:port/static/swagger-ui&lt;/code&gt; and load our API using the OpenAPI 3 file we generated previously, one really important thing to change is the &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/blob/074bbb9f4d0f79e5bced943c10c56013705969a9/cmd/rest-server/static/swagger-ui/index.html#L42"&gt;&lt;code&gt;index.html&lt;/code&gt; file&lt;/a&gt; to refer to the local &lt;code&gt;openapi3.json&lt;/code&gt; file and perhaps you want to generate that file depending on environment so it always points to the right HTTP URL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-client-and-serve-code-from-openapi-3"&gt;
  &lt;/a&gt;
  Generating Client and Serve code from OpenAPI 3
&lt;/h2&gt;

&lt;p&gt;Another interesting thing we can do after generating our OpenAPI 3 documentation is to generate boilerplate that represents Go types matching the original API, for that we use a package we mentioned earlier: &lt;a href="https://github.com/deepmap/oapi-codegen"&gt;github.com/deepmap/oapi-codegen&lt;/a&gt;. The way it works is like this:&lt;/p&gt;

&lt;p&gt;We install the generator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deepmap&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;oapi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;codegen&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;oapi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;codegen&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="m"&gt;.5.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then using &lt;code&gt;go generate&lt;/code&gt; when generate &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/blob/074bbb9f4d0f79e5bced943c10c56013705969a9/internal/rest/open_api.go#L12-L13"&gt;our types&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;//go:generate oapi-codegen -package openapi3 -generate types  -o ../../pkg/openapi3/task_types.gen.go openapi3.yaml&lt;/span&gt;
&lt;span class="c"&gt;//go:generate oapi-codegen -package openapi3 -generate client -o ../../pkg/openapi3/client.gen.go     openapi3.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which in our example will create a bunch of types in the &lt;code&gt;pkg&lt;/code&gt; package that then we can use to programmatically build some code to interact with out API, like the &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/blob/074bbb9f4d0f79e5bced943c10c56013705969a9/cmd/cli/main.go"&gt;following example&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;openapi3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClientWithResponses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://0.0.0.0:9234"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// XXX: explicitly ignoring errors&lt;/span&gt;

    &lt;span class="n"&gt;priority&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;openapi3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Priority_low&lt;/span&gt;

    &lt;span class="n"&gt;respC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateTaskWithResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c"&gt;// XXX: explicitly ignoring errors&lt;/span&gt;
        &lt;span class="n"&gt;openapi3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateTaskJSONRequestBody&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Dates&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;openapi3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dates&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;newPtrTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                &lt;span class="n"&gt;Due&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;newPtrTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hour&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;newPtrStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sleep early"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;Priority&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c"&gt;// ... other code ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#parting-words"&gt;
  &lt;/a&gt;
  Parting words
&lt;/h2&gt;

&lt;p&gt;Documenting REST APIs in Go using Swagger 2.0 is relatively well supported and easy to do, there are a few different alternatives, however the concern you may have is that you're depending on technologies that are already old, if you want to explore the most recent alternatives like OpenAPI 3 things get more complicated, because the options are much more manual and really state of the art, which is a fair concern for people looking for long term solutions.&lt;/p&gt;

&lt;p&gt;So what's the best approach? The way I see it is, if you're not willing to invest resources trying out new state-of-the-art tools then using Swagger 2.0 is your answer; however if you're willing to contribute back to the community exploring the OpenAPI 3 options is better because in the end it benefits everybody.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommended-reading"&gt;
  &lt;/a&gt;
  Recommended Reading
&lt;/h2&gt;

&lt;p&gt;If you're looking to sink your teeth into more REST and Web Programming I recommend the following books:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/32yFwFe"&gt;The Design of Web APIs (2019)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/2MQHYmo"&gt;Irresistible APIs (2016)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/30euJ1U"&gt;Go Web Programming (2016)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3n6ztRZ"&gt;REST in Practice (2010)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>openapi</category>
      <category>swagger</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Memento Vivere</title>
      <author>swyx</author>
      <pubDate>Sat, 19 Jun 2021 21:47:04 +0000</pubDate>
      <link>https://dev.to/swyx/memento-vivere-5eak</link>
      <guid>https://dev.to/swyx/memento-vivere-5eak</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kYfNvmF0Bqw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“When you grow up you tend to get told that the world is the way it is and your life is just to live your life inside the world. Try not to bash into the walls too much. Try to have a nice family life, have fun, save a little money. That's a very limited life. Life can be much broader once you discover one simple fact: &lt;strong&gt;Everything around you that you call life was made up by people that were no smarter than you.&lt;/strong&gt; And you can change it, you can influence it… Once you learn that, you'll never be the same again.”&lt;/p&gt;

&lt;p&gt;— Steve Jobs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The common reminder, "&lt;em&gt;Memento mori&lt;/em&gt;", is often interpreted as a call to withdraw our ambitions and not take pride in our achievements.&lt;/p&gt;

&lt;p&gt;I worry that this makes us too fatalistic, nihilistic, and self centered. "Nothing I do matters, so why should I bother?"&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Memento mori&lt;/em&gt; is no guide to life. Fortunately, I've found it has an opposite: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Memento vivere&lt;/strong&gt;. &lt;em&gt;Remember that you must LIVE&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The way things are is often how we think the way things will always be. But nothing could be further from the truth:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The iPhone was introduced in 2007, 14 years ago.&lt;/li&gt;
&lt;li&gt;The World Wide Web was invented in 1990, 31 years ago.&lt;/li&gt;
&lt;li&gt;The Personal Computer revolution started in 1977,  44 years ago.&lt;/li&gt;
&lt;li&gt;Richard Nixon took the US off the gold standard in 1971, meaning the current international financial system is only 50 years old.&lt;/li&gt;
&lt;li&gt;Color TV first aired in 1951, 70 years ago.&lt;/li&gt;
&lt;li&gt;Nuclear bombs were developed in 1945, 76 years ago.&lt;/li&gt;
&lt;li&gt;Automatic washing machines rolled out in the 1930s.&lt;/li&gt;
&lt;li&gt;Home radios and refrigerators were first introduced in the 1920's.&lt;/li&gt;
&lt;li&gt;Henry Ford first sold the Model T automobile in 1908.&lt;/li&gt;
&lt;li&gt;Thomas Edison started the Edison Electric Illuminating Company in 1882.&lt;/li&gt;
&lt;li&gt;Alexander Graham Bell made the first telephone call in 1876.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What are we doing today that will find its place on a list like this, 100 years from now?&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f34uOJdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E1jUwuxWEAECcAQ.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRQre8eY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1392506710737264644/2XYRwHPB_normal.jpg" alt="Arthur G.P. 🧦🔰🥑 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Arthur G.P. 🧦🔰🥑
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @artisanrocky
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I feel like people do not fully understand how much life changed for our species between 1900 and 2000.&lt;br&gt;&lt;br&gt;I still struggle to comprehend it.&lt;br&gt;&lt;br&gt;These events are 66 years apart. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      01:10 AM - 17 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1394098022523490305" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1394098022523490305" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1394098022523490305" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>reflections</category>
    </item>
    <item>
      <title>How to Make a Bar Chart Race With Python in 2 Minutes</title>
      <author>Lorenzo Felletti</author>
      <pubDate>Sat, 19 Jun 2021 21:35:41 +0000</pubDate>
      <link>https://dev.to/lorenzofelletti/how-to-make-a-bar-chart-race-with-python-in-2-minutes-4999</link>
      <guid>https://dev.to/lorenzofelletti/how-to-make-a-bar-chart-race-with-python-in-2-minutes-4999</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-create-a-cool-bar-chart-race-animation-the-easiest-way"&gt;
  &lt;/a&gt;
  How to create a cool bar chart race animation the easiest way.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; having Python installed on your pc or being registered for Google Colaboratory.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-0"&gt;
  &lt;/a&gt;
  Step 0
&lt;/h1&gt;

&lt;p&gt;First create a new directory for the project (if you use Google Colaboratory skip to step 1)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir my_bar_chart_race
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a new virtual environment, and activate it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 -m venv venv
source venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h1&gt;

&lt;p&gt;If you haven’t already, install pandas&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the library we’ll use to create the bar chart race named, you won’t guess it, bar_chart_race&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 instll bar_chart_race
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h1&gt;

&lt;p&gt;Now that we have the necessary libraries installed, let’s load our data.&lt;/p&gt;

&lt;p&gt;In this tutorial, we’ll create a bar chart animation of the 2020 MotoGP World Championship’s title race. If you’re not familiar with this sport — that’s bad — don’t worry.&lt;br&gt;
I will sum it up briefly for you to better understand what the data means.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-motogp-works"&gt;
  &lt;/a&gt;
  How MotoGP works
&lt;/h2&gt;

&lt;p&gt;MotoGP is the premier class of motorcycle road racing. A championship is held every year and consists of many races (or Grand Prix). After each Grand Prix, each rider gains some points depending on his final position at the GP. At the end of the season, the rider with the most point wins the championship.&lt;/p&gt;

&lt;p&gt;The point system in use since 1993 is the following:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eptc5CT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf2hmvafy5nnwz83053c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eptc5CT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf2hmvafy5nnwz83053c.png" alt="1_fF8ZmCdekNvNOqRSpmEMsw"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-dataset"&gt;
  &lt;/a&gt;
  The dataset
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KuikBJ9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khbp03pwtujvoutv9xo7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuikBJ9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khbp03pwtujvoutv9xo7.png" alt="1_Ae6Xx-cugqR_oSVK0S4tBg (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the dataset &lt;a href="https://gist.github.com/lorenzofelletti/36df65f62e927108b628614030a25cda"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h1&gt;

&lt;p&gt;Now the cool part: coding!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#import-the-libraries"&gt;
  &lt;/a&gt;
  Import the libraries
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bar_chart_race&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bcr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#load-the-dataset"&gt;
  &lt;/a&gt;
  Load the dataset
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./2020-championship.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'race'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#let-the-magic-happen"&gt;
  &lt;/a&gt;
  Let the magic happen
&lt;/h2&gt;

&lt;p&gt;The final result is only one line of code away&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;bcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar_chart_race&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'2020 MotoGP Championship Race'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'h'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'desc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_bars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;steps_per_period&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;period_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, we’ve done with the coding. You can save and run the program, and you will obtain as output the bar chart race video.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#done"&gt;
  &lt;/a&gt;
  Done!
&lt;/h1&gt;

&lt;p&gt;Congrats, you’ve finished. As easy as that.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZVJ2n3m-bug"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That was just a short introduction to this library. You can unleash your imagination creating much more advanced races with it.&lt;/p&gt;

</description>
      <category>python</category>
      <category>chart</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 10 Programming Interview Questions</title>
      <author>Vikram Aditya</author>
      <pubDate>Sat, 19 Jun 2021 21:25:07 +0000</pubDate>
      <link>https://dev.to/thevik/top-10-programming-interview-questions-17c1</link>
      <guid>https://dev.to/thevik/top-10-programming-interview-questions-17c1</guid>
      <description>&lt;h5&gt;
  &lt;a href="#in-this-tutorial-i-have-provided-the-most-common-coding-interview-questions"&gt;
  &lt;/a&gt;
  In this Tutorial, I have Provided the Most Common Coding Interview Questions
&lt;/h5&gt;

&lt;p&gt;We are all aware that answering the most basic coding or programming interview questions determines how we perform in an interview. The interview may be for Java, C++, or a JavaScript requirement, but the basis remains the same, that is how strong we are in the foundations of programming logic.&lt;/p&gt;

&lt;p&gt;Also if our approach is prompt and subtle in an interview, the probability of selection is higher. So read on for cracking the coding interview questions.&lt;/p&gt;

&lt;p&gt;Q #1) How can you reverse a string?&lt;/p&gt;

&lt;p&gt;Q #2) How to get the matching characters in a string?&lt;/p&gt;

&lt;p&gt;Q #3) How to get the non-matching characters in a string?&lt;/p&gt;

&lt;p&gt;Q #4) How do you prove that the two strings are anagrams?&lt;/p&gt;

&lt;p&gt;Q #5) How to calculate the number of numerical digits in a string?&lt;/p&gt;

&lt;p&gt;Q #6) How to compute the first character of a string that is not repeated?&lt;/p&gt;

&lt;p&gt;Q #7) How to get the matching elements in an integer array?&lt;/p&gt;

&lt;p&gt;Q #8) Implement the insertion sort algorithm.&lt;/p&gt;

&lt;p&gt;Q #9) How to perform swapping two strings by not using a third variable?&lt;/p&gt;

&lt;p&gt;Q #10) Implement the process of reversing a linked list.&lt;/p&gt;

&lt;p&gt;Q #11) How to get the length of a linked list?&lt;/p&gt;

&lt;p&gt;Q #12) How to verify if a number is prime or not?&lt;/p&gt;

&lt;p&gt;Q #13) Compute the first five Fibonacci numbers.&lt;/p&gt;

&lt;p&gt;Q #14) How to reverse a number?&lt;/p&gt;

&lt;p&gt;Q #15) Determine the factors of a number.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#i-have-a-instagram-theme-page-related-to-programming-you-can-follow-it-if-you-want-to-"&gt;
  &lt;/a&gt;
  I have a &lt;a href="https://www.instagram.com/gecko_code/"&gt;Instagram Theme Page&lt;/a&gt; related to programming, you can follow it if you want to :)
&lt;/h5&gt;

&lt;p&gt;If this blog gets a good response then I will provide the answers of this questions ( who don't know that ) although you can always search the questions and get the answers yourself&lt;/p&gt;

&lt;p&gt;You can also tell the topic in which you want the next blog :)&lt;/p&gt;

&lt;p&gt;Yup another small blog though ;-;&lt;/p&gt;

</description>
      <category>ios</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to easily create beautiful particles animations for your website using tsParticles</title>
      <author>Matteo Bruni</author>
      <pubDate>Sat, 19 Jun 2021 21:15:48 +0000</pubDate>
      <link>https://dev.to/matteobruni/how-to-easily-create-beautiful-particles-animations-for-your-website-using-tsparticles-p36</link>
      <guid>https://dev.to/matteobruni/how-to-easily-create-beautiful-particles-animations-for-your-website-using-tsparticles-p36</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-add-tsparticles-in-your-website"&gt;
  &lt;/a&gt;
  How to add tsParticles in your website
&lt;/h2&gt;

&lt;p&gt;Have you seen particles effect in some websites and you want one too?&lt;/p&gt;

&lt;p&gt;Do you have particles.js installed but it have problems or it's too heavy for your users?&lt;/p&gt;

&lt;p&gt;Are you searching a new animation for your website?&lt;/p&gt;

&lt;p&gt;Well, you are in the right place. &lt;code&gt;tsParticles&lt;/code&gt; is a new library, started from the particles.js codebase, to have some particles animations in your website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jsdelivr.com/package/npm/tsparticles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQZaerad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://data.jsdelivr.com/v1/package/npm/tsparticles/badge%3Fstyle%3Drounded" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QK8k0q0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/cdnjs/v/tsparticles%3Fv%3D1.29.0" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5tViNt04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/tsparticles" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ctaaxWav--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dw/tsparticles" alt="npm dls"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React, Vue, Angular, Svelte, jQuery, Preact, Inferno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. 🤩&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from the old particles.js library.&lt;/p&gt;
&lt;h2&gt;
&lt;strong&gt;&lt;em&gt;Library installation&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;Hosting / CDN&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please use this hosts or your own to&lt;/em&gt;&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Let's start with the installation&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#cdn"&gt;
  &lt;/a&gt;
  CDN
&lt;/h4&gt;

&lt;p&gt;If you want to use a CDN to link the library, or use them to download the files here are the instructions&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#cdnjs"&gt;
  &lt;/a&gt;
  cdnjs
&lt;/h5&gt;

&lt;p&gt;Let's start with the most famous and used.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cdnjs.com/libraries/tsparticles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1WGK_8KR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/642y2uvateqnnes28o2z.png" alt="cdnjs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;tsparticles.min.js&lt;/code&gt; file is marked as default and you can see it highlighted, you can use the right buttons to copy the url, copy all the &lt;code&gt;script&lt;/code&gt; tag or just the SRI hash.&lt;/p&gt;

&lt;p&gt;I recommend to copy the &lt;code&gt;script&lt;/code&gt; tag so you can use it safely in your website&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#jsdelivr"&gt;
  &lt;/a&gt;
  jsDelivr
&lt;/h5&gt;

&lt;p&gt;Another famous CDN is supported too and this is easy to use too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jsdelivr.com/package/npm/tsparticles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--an-BfI2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89yvraapj8jnxlmctupw.png" alt="jsDelivr"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just copy the script tag (I recommend the integrity check) and you're ready to include it in your page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  NPM
&lt;/h4&gt;

&lt;p&gt;If you are using NPM you can simply run one of these commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;tsparticles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add tsparticles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you have it ready in your &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#wrappers"&gt;
  &lt;/a&gt;
  Wrappers
&lt;/h4&gt;

&lt;p&gt;This project have also some official wrappers for some Javascript frameworks to easily use and configure this library&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#web-components"&gt;
  &lt;/a&gt;
  Web Components
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SN1ASHd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/web-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SN1ASHd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/web-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c7vqJd5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/web-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c7vqJd5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/web-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Web Components checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/web/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#jquery"&gt;
  &lt;/a&gt;
  jQuery
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6No_SpYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/jquery-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6No_SpYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/jquery-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KPrLGss0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/jquery-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KPrLGss0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/jquery-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with jQuery checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/jquery/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#vuejs-2x"&gt;
  &lt;/a&gt;
  VueJS 2.x
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E1WVrkET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/particles.vue%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1WVrkET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/particles.vue%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s3hSl1Q2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/particles.vue%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s3hSl1Q2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/particles.vue%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with VueJS checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/vue/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#vuejs-3x"&gt;
  &lt;/a&gt;
  VueJS 3.x
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8RSZoggI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/particles.vue3%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8RSZoggI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/particles.vue3%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8mgFwz6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/particles.vue3%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8mgFwz6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/particles.vue3%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with VueJS 3.x checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/vue3/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#reactjs"&gt;
  &lt;/a&gt;
  ReactJS
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ydc1umZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/react-tsparticles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ydc1umZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/react-tsparticles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iXj-JZwP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/react-tsparticles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iXj-JZwP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/react-tsparticles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with ReactJS checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/react/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#angular-cli"&gt;
  &lt;/a&gt;
  Angular CLI
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atY6eHTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/ng-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atY6eHTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/ng-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0XX-YfvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/ng-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0XX-YfvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/ng-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Angular CLI checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/angular/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#svelte"&gt;
  &lt;/a&gt;
  Svelte
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AbVqCm2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/svelte-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbVqCm2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/svelte-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HaCDkzqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/svelte-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HaCDkzqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/svelte-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Svelte checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/svelte/README.md?version=1.29.0"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#preact"&gt;
  &lt;/a&gt;
  Preact
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JK5q0Ldj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/preact-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JK5q0Ldj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/preact-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EMpXDgoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/preact-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EMpXDgoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/preact-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Preact checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/preact/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#riotjs"&gt;
  &lt;/a&gt;
  Riot.js
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m1KTpJ9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/riot-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m1KTpJ9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/riot-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C2pgZ19R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/riot-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2pgZ19R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/riot-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Riot.js checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/riot/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#inferno"&gt;
  &lt;/a&gt;
  Inferno
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uEyNB1pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/inferno-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uEyNB1pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/inferno-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ym4GC9vW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/inferno-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ym4GC9vW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/inferno-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Inferno checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/inferno/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#solidjs"&gt;
  &lt;/a&gt;
  Solid.js
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OyK-OFPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/solid-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OyK-OFPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/solid-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w2kOl607--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/solid-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2kOl607--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/solid-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Solid.js checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/solid/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h4&gt;

&lt;p&gt;First of all you need to find the &lt;code&gt;tsparticles.min.js&lt;/code&gt; downloaded with the instructions above.&lt;/p&gt;

&lt;p&gt;Once you are ready with the &lt;code&gt;script&lt;/code&gt; tag included you have two option to start using tsParticles.&lt;/p&gt;

&lt;p&gt;If you are using it with NPM, you need to import tsParticles like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tsParticles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tsParticles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// this is supported in TypeScript too&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#javascript-object"&gt;
  &lt;/a&gt;
  Javascript Object
&lt;/h5&gt;

&lt;p&gt;You can use a Javascript object containing all options like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* omitted for brevity, I'll describe the options in this series */&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;tsParticles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;element id&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//&amp;lt;element id&amp;gt; is a placeholder sample, use it without &amp;lt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#external-json-file"&gt;
  &lt;/a&gt;
  External Json File
&lt;/h5&gt;

&lt;p&gt;Otherwise you can use an external JSON file, it's easier to maintain because you need to change only this file and not your scripts that could be minified or something like that.&lt;/p&gt;

&lt;p&gt;The JSON file is loaded like this&lt;/p&gt;

&lt;p&gt;&lt;em&gt;particles.json&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// omitted for brevity, I'll describe all the options in this series&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;tsParticles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;element id&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;particles.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//&amp;lt;element id&amp;gt; is a placeholder sample, use it without &amp;lt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#particles-manager-object"&gt;
  &lt;/a&gt;
  Particles Manager object
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;load&lt;/code&gt; and &lt;code&gt;loadJSON&lt;/code&gt; methods returns a &lt;code&gt;Promise&amp;lt;Container&amp;gt;&lt;/code&gt; object, the &lt;code&gt;Container&lt;/code&gt; object is the object containing the canvas, the particles and all is needed to work.&lt;/p&gt;

&lt;p&gt;You can access it using the method &lt;code&gt;tsParticles.dom()&lt;/code&gt; which returns a &lt;code&gt;Container[]&lt;/code&gt; with all containers initialized or &lt;code&gt;tsParticles.domItem(index)&lt;/code&gt; which returns the specified &lt;code&gt;Container&lt;/code&gt; if found, &lt;code&gt;index&lt;/code&gt; is the array index, just a managed version of &lt;code&gt;tsParticles.dom()[index]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to unwrap the &lt;code&gt;Promise&lt;/code&gt; you can await the load methods if you are using an async function or use the &lt;code&gt;then&lt;/code&gt; method (Official API &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let's see a sample of &lt;code&gt;then&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;tsParticles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;element id&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* omitted for brevity */&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// container is ready to be used&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The container object is really useful if you want to make particles more interactive or customizable.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#properties"&gt;
  &lt;/a&gt;
  Properties
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;actualOptions&lt;/code&gt;: The current options loaded in the object, some changes to this object can be effective only after a &lt;code&gt;refresh()&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;play(force)&lt;/code&gt;: Starts the animations or resume from &lt;code&gt;pause&lt;/code&gt;, &lt;code&gt;force&lt;/code&gt; is an optional boolean parameter to force the animation. This method doesn't allocate resources, just plays the animations.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pause()&lt;/code&gt;: Pauses the animations. This method doesn't clean any resource, just pauses the animations.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;start()&lt;/code&gt;: Starts the container, reallocates all the resources freed by &lt;code&gt;stop&lt;/code&gt;. Can't start after &lt;code&gt;destroy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stop()&lt;/code&gt;: Stops the container, frees unneeded resources.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;destroy()&lt;/code&gt;: Destroys the container and invalidates it. The container will be unusable after this, any method called on it can return an error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;refresh()&lt;/code&gt;: This methods is a shorthand of &lt;code&gt;stop&lt;/code&gt;/&lt;code&gt;start&lt;/code&gt; cycle. This method is good to reload options changed by code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exportImage(callback, type, quality)&lt;/code&gt;: Exports the current canvas image, &lt;code&gt;background&lt;/code&gt; property of &lt;code&gt;options&lt;/code&gt; won't be rendered because it's css related. The &lt;code&gt;callback&lt;/code&gt; is a function that handles the exported image, &lt;code&gt;type&lt;/code&gt; is the image type you want to export and &lt;code&gt;quality&lt;/code&gt; the quality of the image, these two parameters are optional.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exportConfiguration()&lt;/code&gt;: Exports the current configuration using &lt;code&gt;options&lt;/code&gt; property returning a JSON string representing the &lt;code&gt;options&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;draw()&lt;/code&gt;: Draws a single frame of animation, if you want to handle it yourself just &lt;code&gt;pause&lt;/code&gt; the container and call &lt;code&gt;draw&lt;/code&gt; when you need it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getAnimationStatus()&lt;/code&gt;: Returns a boolean with the animation status, &lt;code&gt;true&lt;/code&gt; is playing, &lt;code&gt;false&lt;/code&gt; is paused&lt;/p&gt;

&lt;p&gt;&lt;code&gt;addClickHandler(callback)&lt;/code&gt;: Adds a click event handler for this particles container. The callback must accept 2 parameters: (the mouse event and the clicked particles array, all the particles that are in the click position will be there)&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>html</category>
      <category>typescript</category>
    </item>
    <item>
      <title>FARM STACK [ FastAPI +React+ mongoDB]</title>
      <author>Bek Brace</author>
      <pubDate>Sat, 19 Jun 2021 21:09:31 +0000</pubDate>
      <link>https://dev.to/bekbrace/farm-stack-fastapi-react-mongodb-3699</link>
      <guid>https://dev.to/bekbrace/farm-stack-fastapi-react-mongodb-3699</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oGwszbCH5Z4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is my latest video on YouTube, the FARM stack course, although this stack is not as popular as MERN, MEAN , LAMP, JAM etc.. it is my favorite stack, I created a full fledged application using FARM stack for a client who wanted to take orders for her flower shop that consists of 4 branches in the Polish capital, Warsaw.&lt;/p&gt;

&lt;p&gt;The prerequisites to follow along is to have the basic understanding of the following  :&lt;/p&gt;

&lt;p&gt;1- HTTP request methods&lt;br&gt;
2- Async/Await Syntax&lt;br&gt;
3- Python language in general and FASTAPI in particular&lt;br&gt;
4- JavaScript ES6 and React JS basics&lt;br&gt;
5- Database systems, and specially NOSQL&lt;br&gt;
6- Fundamentals of MongoDB&lt;br&gt;
7- How client talks to the server (Axios/ HTTP methods)&lt;/p&gt;

&lt;p&gt;I hope you will enjoy the video, you can contact me here by dropping a comment or you can mail me on &lt;a href="mailto:info@bekbrace.com"&gt;info@bekbrace.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href="https://github.com/BekBrace/FARM-Stack-Course"&gt;https://github.com/BekBrace/FARM-Stack-Course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a good one - Bek&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>python</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JS30 Days 11- 14</title>
      <author>Alexandra</author>
      <pubDate>Sat, 19 Jun 2021 21:00:04 +0000</pubDate>
      <link>https://dev.to/beendra/js30-days-11-14-hed</link>
      <guid>https://dev.to/beendra/js30-days-11-14-hed</guid>
      <description>&lt;p&gt;This post is a few days late because I had a bit of a setback this week. My apartment lost power and internet for a couple of days, everything is fixed now but it was definitely stressful to deal with. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-11-custom-html5-video-player"&gt;
  &lt;/a&gt;
  Day 11 - Custom HTML5 Video Player 📀
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/beendra/JS30/tree/main/11%20-%20Custom%20HTML5%20Video%20Player"&gt;GitHub&lt;/a&gt;&lt;br&gt;
The versaitlity of event listeners is amazing. I was suprised that with a few choice event listeners and functions that most of the functionality of a video player can be created. I had thought that this one would be way more complicated than it was. I think my favorite function created in this app was handleProgress() for updating the progress bar while the video was playing. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWnrs2C_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nyqebsjdpvz99xx934c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWnrs2C_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nyqebsjdpvz99xx934c.png" alt="Screen Shot 2021-06-18 at 9.15.03 PM"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#day-12-koanmi-code-key-sequence-detection"&gt;
  &lt;/a&gt;
  Day 12 - KOANMI Code, Key Sequence Detection
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/beendra/JS30/tree/main/12%20-%20KONAMI"&gt;GitHub&lt;/a&gt;&lt;br&gt;
KONAMI code is when someone inputs a sequence of keys and then it causes something to happen like an easter egg on a site. To make that happen there needs to be key sequence detection on an input/the window/etc for that secret key to be heard. I like that this exercise gave some more pracitce with using .splice() on an array and I loved that there is such a thing as cornify_add(). The creativity of fellow developers is always amazing to me.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHYOhhZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o9smceu7ffbj6032h9o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHYOhhZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o9smceu7ffbj6032h9o.png" alt="Screen Shot 2021-06-19 at 2.45.34 PM"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#day-13-slide-in-on-scroll"&gt;
  &lt;/a&gt;
  Day 13 - Slide in on Scroll
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/beendra/JS30/tree/main/13%20-%20Slide%20'n%20Scroll"&gt;GitHub&lt;/a&gt;&lt;br&gt;
This was a little more complicated than I expected. This one created a page where images were hidden and would slide into the frame and become visible on scroll. Since the event listener was on scroll, a debounce function was used. The debounce function is available in many languages and it limits the rate that a function will fire at. So it will only run the function we need through debounce by the designated amount of time given which makes for a smoother running and more efficient application. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R7BFkzQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ga1iwvcq1zi8u8hpz3f8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R7BFkzQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ga1iwvcq1zi8u8hpz3f8.png" alt="Screen Shot 2021-06-19 at 3.10.35 PM"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#day-14-"&gt;
  &lt;/a&gt;
  Day 14 -
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/beendra/JS30/tree/main/14%20-%20ObjectsArrays%20ReferenceVsCopy"&gt;GitHub&lt;/a&gt;&lt;br&gt;
This exercise was all about Object and Arrays and making a reference vs. a copy and how they can be manipulated. If you make a reference to an array and update that array it will edit the original array as well because it is an array reference and not an array copy. So they both are pointing to the same array. To fix this a copy needs to be made instead. There are a few techniques to do this. You could .slice() to make a copy of an array. You can also create a new array and concat the old one or even use the ES6 spread operator. When those new copies of arrays are created and updated, the original one is not changed. This also applies to objects. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>javascript30</category>
      <category>learninpublic</category>
    </item>
    <item>
      <title>How to learn to code FAST!</title>
      <author>Vikram Aditya</author>
      <pubDate>Sat, 19 Jun 2021 20:39:25 +0000</pubDate>
      <link>https://dev.to/thevik/how-to-learn-to-code-fast-3o9j</link>
      <guid>https://dev.to/thevik/how-to-learn-to-code-fast-3o9j</guid>
      <description>&lt;p&gt;Hello my gorgeous friends on the internet, hope you are doing very good, and fancy today, in today's blog, I want to give you the number one tip, that's not a dirty joke, Okay, I'm gonna give you the number one tip that I follow to become a better developer and increase our skills.&lt;/p&gt;

&lt;p&gt;So lets just get in the blog,&lt;/p&gt;

&lt;p&gt;The number one tip is to create project and stumped you in tutorials. That's the number one tip that you should follow. Whenever you're learning anything development related, whether that be Python, or JavaScript, or development or game development or whatever. That's the number one tip is not to follow tutorials as much as you might think. And to actually start building out the things that you want. And again, this is like so obvious that you might everybody might be like, yeah, mobile, obviously, you want this for building out your tanks. But it's actually a very fine line here. And a lot of people fall into this trap. And you never really realize that, wait, I actually done more tutorials. And I've done projects. And this happened to me a bunch of times, and it's still hard habit to break.&lt;/p&gt;

&lt;p&gt;If you don't actually put that thing that you learned to the test. Well, it's not going to work out, right. And school, that's probably one of the biggest problems is that you learn everything in memory, you do the test, you get the good score, and then you never use it again. And you're gonna forget. So the number one tip is, again, I'm not saying that don't do tutorials, because tutorials are a great resource to get the basics down. But I'm saying don't fall into that rabbit hole of just doing tutorials because you feel like you're not good enough to start your own project. So my philosophy has always been to start from the basics, just learn from the beginning and just get a good grasp of how that technology works. And how you can put together something super simple. And after that, like literally have to concentrate and take deep breaths, yoga breaths, and be like, Okay, I'm done with the tutorial. That's it.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#i-have-a-instagram-theme-page-related-to-programming-you-can-follow-it-if-you-want-to-"&gt;
  &lt;/a&gt;
  I have a &lt;a href="https://www.instagram.com/gecko_code/"&gt;Instagram Theme Page&lt;/a&gt; related to programming, you can follow it if you want to :)
&lt;/h5&gt;

&lt;p&gt;So yeah that's all I got for today, yup its my first blog and pretty small but hope you liked it and learned something :D&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introduction to threading and multiprocessing: Concurrency &amp; Parallelism in Python
</title>
      <author>Adarsh Punj</author>
      <pubDate>Sat, 19 Jun 2021 20:24:31 +0000</pubDate>
      <link>https://dev.to/adarshpunj/introduction-to-threading-and-multiprocessing-concurrency-parallelism-in-python-48o</link>
      <guid>https://dev.to/adarshpunj/introduction-to-threading-and-multiprocessing-concurrency-parallelism-in-python-48o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Most of us have come across terms like multithreading, parallel processing, multiprocessing, concurrency, etc., though each of these terms has its own meaning. In a broader sense, we need these because we want to avoid some kind of latency (or have an illusion of doing so) in the execution of regular programs.&lt;/p&gt;

&lt;p&gt;To do this, we try to write code that doesn’t necessarily runs in order (non-sequential) and all this boils down to two different concepts — concurrency and parallelism.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  Concurrency
&lt;/h2&gt;

&lt;p&gt;I came across concurrency when I was trying to download ~5000 images from the web. I had collected image URLs from Flickr, and these images had to be passed on to a team doing annotation (labelling).&lt;/p&gt;

&lt;p&gt;This is how a sequential program to download images would look like:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests

def download_image(URL, filename):
    image = requests.get(URL)

    with open(f'{filename}.png','wb') as f:
        f.write(image.content)


flickr_URLs = [
    'https://live.staticflickr.com/6022/5941812700_0f634b136e_b.jpg',
    'https://live.staticflickr.com/3379/3492581209_485d2bfafc_b.jpg',
    'https://live.staticflickr.com/7309/27729662905_e896a3f604_b.jpg',
    'https://live.staticflickr.com/8479/8238430093_eb19b654e0_b.jpg',
    'https://live.staticflickr.com/5064/5618934898_659bc060cd_b.jpg',
    'https://live.staticflickr.com/3885/14877957549_ccb7e55494_b.jpg',
    'https://live.staticflickr.com/5473/11720191564_76f3f56f12_b.jpg',
    'https://live.staticflickr.com/2837/13546560344_835fc79871_b.jpg',
    'https://live.staticflickr.com/140/389494506_55bcdc3664_b.jpg',
    'https://live.staticflickr.com/5597/15253681909_0cc91c77d5_b.jpg',
    'https://live.staticflickr.com/1552/24085836504_3d850f03e7_b.jpg',
    'https://live.staticflickr.com/7787/26655921703_ee95e3be8e_b.jpg',
    'https://live.staticflickr.com/423/32290997650_416303457b_b.jpg',
    'https://live.staticflickr.com/4580/37683207504_053315d23f_b.jpg',
    'https://live.staticflickr.com/3225/2454495359_92828d8542_b.jpg',
    'https://live.staticflickr.com/7018/6640810853_22634c6667_b.jpg',
    'https://live.staticflickr.com/7681/17285538029_363c8760ea_b.jpg',
    'https://live.staticflickr.com/7630/16622584999_0654c8d564_b.jpg',
    'https://live.staticflickr.com/6160/6207543047_da2c66c2f6_b.jpg',
    'https://live.staticflickr.com/2921/14251116921_a97d7a46ce_b.jpg'
]

for url in flickr_URLs:
    filename = url.split(‘/')[-1]
    download_image(url, filename)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It does the job but we spent most of the time waiting for the source URLs to respond. When we scale this program to 5,000 images this “wait time” becomes humongous.&lt;/p&gt;

&lt;p&gt;The above program sends a request to a URL, waits until the image loads (gets response from server), writes it to disk, and only then sends a new request until the list exhausts.&lt;/p&gt;

&lt;p&gt;However, rather than waiting for the first URL to load, shouldn’t we send a new request in the meantime? Once we receive some response from a previously sent request, we can write the corresponding image to the disk. By doing this we are not letting the latency block our main program.&lt;/p&gt;

&lt;p&gt;We can achieve this by starting a new “thread”, along with the main thread using built-in Python module called &lt;code&gt;threading&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s how you create a thread:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;thread = threading.Thread(download_image, args=[url, filename])
thread.start()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mFxdMmfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pythongasm.com/static/src/007/creating-threads.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFxdMmfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pythongasm.com/static/src/007/creating-threads.png" alt="creating-threads"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that’s one thread. You need to create many threads, so let’s loop over. Here’s what’s the threaded version of this program would look like:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import threading
import requests

def download_image(URL, filename):
    ...

flickr_URLs = [...]

threads = []
for url in flickr_URLs:
    filename = url.split('/')[-1]
    thread = threading.Thread(target=download_image, args=[url, filename])
    thread.start()
    threads.append(thread)

for thread in threads:
    thread.join()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We call &lt;code&gt;.join()&lt;/code&gt; on a thread to join it to the main thread — telling Python to wait for a thread to terminate before moving further down in the file.&lt;/p&gt;

&lt;p&gt;In this program, we created 20 threads. But how many threads are too many? If we have 5,000 URLs, should we start 5000 threads?&lt;/p&gt;

&lt;p&gt;First of all, you should know that you can start multiple threads but they won’t be running simultaneously. It’s just that while one thread is waiting for some I/O operation, another one starts working in the meantime. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O68AOFpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pythongasm.com/static/src/007/columnstwoinone.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O68AOFpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pythongasm.com/static/src/007/columnstwoinone.gif" alt="juggler"&gt;&lt;/a&gt; &lt;em&gt;It might look like the juggler is juggling two balls but in reality, at any given point he only has one ball in his hand. Source: Library of Juggling&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since your OS continuously switches thread to thread, deciding which one should run at a given time, managing hundreds of threads will eat up a big chunk of resources.&lt;/p&gt;

&lt;p&gt;So a simple workaround is this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MAX_THREADS = 10
threads = []
for url in flickr_URLs:
    if len(threads)&amp;gt;MAX_THREADS:
        for thread in threads:
            thread.join()

        threads = []

    filename = url.split('/')[-1]   
    thread = threading.Thread(target=download_image, args=[url, filename])
    thread.start()
    threads.append(thread)

for thread in threads:
    thread.join()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We’re only starting &lt;code&gt;MAX_THREADS&lt;/code&gt; at once, waiting for them to terminate (we're doing that by calling&lt;code&gt;.join()&lt;/code&gt;), and then starting the next &lt;code&gt;MAX_THREADS&lt;/code&gt; threads.&lt;/p&gt;

&lt;p&gt;However, there’s a modern way of doing this which we will see later in this article.&lt;/p&gt;

&lt;p&gt;Some implementations of Python like PyPy, IronPython can run multiple threads simultaneously but this isn’t the case with the default implementation, that’s CPython.&lt;/p&gt;

&lt;p&gt;Notice how we didn’t need CPU power to speed up this task of downloading images. These are I/O bound tasks — it’s like cooking food, for example.  If you’re preparing a dish, and at some point you need to preheat your microwave oven, you won’t be looking for more manpower to speed up your cooking. You’re better off utilising the preheating time into…maybe chopping down some veggies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kqyY0G0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pythongasm.com/static/src/007/concurrency-python-example.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kqyY0G0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pythongasm.com/static/src/007/concurrency-python-example.gif" alt="concurrency-python"&gt;&lt;/a&gt; &lt;em&gt;Python cutting down veggies while the oven finishes up preheating&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That’s concurrency. But what if a task is bottlenecked by the CPU, rather than networking and IO? That brings us to parallelism.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parallelism"&gt;
  &lt;/a&gt;
  Parallelism
&lt;/h2&gt;

&lt;p&gt;Now suppose you’re done with cooking, and it’s time to do the dishes. Can you apply the concept of concurrency here? Pick the knife and start cleaning it, switch over to the bowl you used for pouring milk, start washing it, and then move on to the plates, then back to the knife you were washing some time ago.&lt;/p&gt;

&lt;p&gt;At best, it won’t make any difference to the execution time of this task. And in most of the cases, doing this will make the process slower as you are taking some time in switching back and forth to different utensils (yes, multithreading can also slow down tasks).&lt;/p&gt;

&lt;p&gt;If you’re looking to expedite this task, you need manpower. Some friend who washes the bowl while you cleanse knives and forks — more friends, the better.&lt;/p&gt;

&lt;p&gt;This is how a CPU heavy task looks like, where you can use multiple CPU cores to speed up the task. Let’s try to apply this using Python.&lt;/p&gt;

&lt;p&gt;We’re trying to find out product of prime numbers upto a number n using a function &lt;code&gt;productOfPrimes&lt;/code&gt;, such that &lt;code&gt;productOfPrimes(10) -&amp;gt; 210&lt;/code&gt; (product of 2, 3, 5, 7)&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import time

def productOfPrimes(n):

    ALL_PRIMES_UPTO_N = []

    for i in range(2, n):

        PRIME = True
        for j in range(2, int(i/2)+1):
            if i%j==0:
                PRIME = False
                break

        if PRIME:
            ALL_PRIMES_UPTO_N.append(i)


    print(f"{len(ALL_PRIMES_UPTO_N)} PRIME NUMBERS FOUND")

    product = 1
    for prime in ALL_PRIMES_UPTO_N:
        product = product*prime

    return product

init_time = time.time()
LIMITS = [50328,22756,39371,44832]

for lim in LIMITS: 
    productOfPrimes(lim)

fin_time = time.time()
print(f"TIME TAKEN: {fin_time-init_time}")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Nested loops, lots of division — pretty heavy on the CPU. The execution took ~10 seconds on 1.1 GHz quad core Intel i5 processor. However, out of 4 cores, we just used one.&lt;/p&gt;

&lt;p&gt;To manage multiple cores and processes, we use this module called &lt;code&gt;multiprocessing&lt;/code&gt; in python.&lt;/p&gt;

&lt;p&gt;Let’s see if multiprocessing improves this result. Syntactically, it’s quite similar to how we started threads:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import multiprocessing

def productOfPrimes():
    …

if __name__ == "__main__":  
    processes = []
    LIMITS = [50328,22756,39371,44832] 

    for lim in LIMITS:
        process = multiprocessing.Process(target=productOfPrimes, args=[lim])
        process.start()
        processes.append(process)

    for process in processes:
        process.join()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This does the same thing in a little over 4 seconds. &lt;code&gt;productOfPrimes&lt;/code&gt; was simulatenously executed on multiple cores available in the CPU.&lt;/p&gt;

&lt;p&gt;Now let's talk a bit about numbers. How many processes can a quad-core CPU can execute simultaneously? Shouldn't it be only 4? Yes, but that doesn't mean the OS can't hold more than 4 processes in memory. There's a difference in executing processes and just holding them in memory.&lt;/p&gt;

&lt;p&gt;Run this bash command to see the number of processes running on your system:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ps -e | wc -l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So if you start 20 processes from Python, it won't throw an error saying you don't have enough cores. The OS will just manage these 20 processes over whatever cores are available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pool-of-threads-and-processes"&gt;
  &lt;/a&gt;
  Pool of Threads and Processes
&lt;/h2&gt;

&lt;p&gt;We’ve seen how we can implement the concepts of concurrency and parallelism using threading and multiprocessing modules. However, we’ve a sexier, more Pythonic way of doing this using the concurrent.futures module (ships with Python).&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import concurrent.futures

def download_image(URL, filename):
    ...

flickr_URLs = [...]
with concurrent.futures.ThreadPoolExecutor() as executor:
    results = executor.map(download_image, flickr_URLs)

for result in results:
        print(result)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We can do something similar using &lt;code&gt;ProcessPoolExecutor&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import concurrent.futures

def productOfPrimes(n):
    ...

LIMITS = [...]

if __name__ == "__main__": 
    with concurrent.futures.ProcessPoolExecutor() as executor:
        results = executor.map(productOfPrimes, LIMITS)

for result in results:
    print(result)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XCyanxkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pythongasm.com/static/src/007/concurrent.futures-python.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XCyanxkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pythongasm.com/static/src/007/concurrent.futures-python.png" alt="concurrent.futures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#threads-processes-os"&gt;
  &lt;/a&gt;
  Threads, Processes, OS
&lt;/h2&gt;

&lt;p&gt;Technically, threads run inside a process. When we create 4 threads, they share the same process, thus the same memory, and a lot of other OS level stuff (process control block, address space, etc.). The same is not true for processes. Each process has memory space of its own and run independently.&lt;/p&gt;

&lt;p&gt;On the other hand, processes can run simultaneously — unlike in multithreading where the OS just keeps switching over and over to manage latency inside the same process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We’ve seen how we can implement concurrency and parallelism in Python which are fundamentally very different, and have use cases of their own. There are more things to talk about like problems with threading, GIL, asynchronicity, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-readings-and-attributions"&gt;
  &lt;/a&gt;
  Further Readings and Attributions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://stackoverflow.com/q/5201852/10065556"&gt;What is a "thread" (really)?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://stackoverflow.com/q/1050222/10065556"&gt;What is the difference between concurrency and parallelism?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://zetcode.com/python/multiprocessing/"&gt;Python multiprocessing&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>datascience</category>
      <category>linux</category>
    </item>
  </channel>
</rss>
