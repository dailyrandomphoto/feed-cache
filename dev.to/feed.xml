<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Do AWS Reserved Instances and Savings Plans really reduce costs?</title>
      <author>CAST AI</author>
      <pubDate>Tue, 29 Jun 2021 14:57:00 +0000</pubDate>
      <link>https://dev.to/castai/do-aws-reserved-instances-and-savings-plans-really-reduce-costs-1eph</link>
      <guid>https://dev.to/castai/do-aws-reserved-instances-and-savings-plans-really-reduce-costs-1eph</guid>
      <description>&lt;p&gt;Allocating cloud costs is hard, and forecasting them is even harder.&lt;/p&gt;

&lt;p&gt;Pinterest once committed to paying a smashing $170 million for AWS services in advance and was then forced to buy extra capacity at a much higher rate, &lt;strong&gt;spending some $20 million more than estimated&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How are you supposed to reserve capacity in advance when you have no idea how much of it your company is going to need one or three years from now?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the core problem of products like AWS Reserved Instances and Savings Plans.&lt;/p&gt;

&lt;p&gt;Keep on reading to find out why they’re so risky and what you could be doing instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s a guide I prepared for you:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#awsreservedinstancesbasics"&gt;AWS Reserved Instances: the basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#howdoreservedinstanceswork"&gt;How do Reserved Instances work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#howmuchcanyousavewithreservedinstances"&gt;How much can you save with Reserved Instances?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#risksofreservedinstances"&gt;Here’s what you risk with AWS Reserved Instances&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href="#paythepriceforchangingrequirements"&gt;You will pay a steep price for changing requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vendorlockin"&gt;You will get locked-in with AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#losingflexibility"&gt;You will lose all flexibility&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reservedinstancessetupisdifficult"&gt;Also, setting up AWS Reserved Instances is super difficult&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#savingsplansarentasolution"&gt;And AWS Savings Plans aren’t going to save you&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#howtosolvethis"&gt;How to deal with that? Simple, avoid Reserved Instances and Savings Plans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="awsreservedinstancesbasics"&gt;AWS Reserved Instances: the basics&lt;/h2&gt;

&lt;p&gt;Companies choose Reserved Instances because they come with substantial discounts compared to pay-as-you-go On-Demand pricing.&lt;/p&gt;

&lt;p&gt;All it takes is &lt;strong&gt;committing to a specified cloud capacity for a specified period of time&lt;/strong&gt;. In AWS, it’s one year or three years. In some cases, you also get a guarantee that certain resources will be available to you in a given hosting region. &lt;/p&gt;

&lt;h3 id="howdoreservedinstanceswork"&gt;How do Reserved Instances work? &lt;/h3&gt;

&lt;p&gt;It’s all just like regular instance purchases. Select an instance type, size, platform, and region - and you’re done! It’s like getting a voucher you can use to get a discount any time during your chosen reservation period, often sharing it among teams.&lt;/p&gt;

&lt;p&gt;And the larger your upfront payment, the larger the discount.&lt;/p&gt;

&lt;h2 id="howmuchcanyousavewithreservedinstances"&gt;How much can you save with Reserved Instances?&lt;/h2&gt;

&lt;p&gt;According to AWS, the EC2 Reserved Instances offer &lt;strong&gt;discounts of up to 75%&lt;/strong&gt; compared to On-Demand pricing. &lt;/p&gt;

&lt;p&gt;But there’s a catch. &lt;/p&gt;

&lt;p&gt;A Reserved Instance operates on a “use it or lose it” basis. Every hour that your instance goes unused is an hour lost (together with any financial benefits).&lt;/p&gt;

&lt;p&gt;To make the most of your Reserved Instance, you need to maximize your use of it. This means that you need to know exactly what your teams will need in advance. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Reserving capacity in advance to get the instances you use all the time at a discount seems like a smart move. After all, you’ll keep on using these cloud resources. But it comes at a price many teams aren’t aware of.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="risksofreservedinstances"&gt;Here’s what you risk with AWS Reserved Instances&lt;/h2&gt;

&lt;h3 id="paythepriceforchangingrequirements"&gt;1. You will pay a steep price for changing requirements &lt;/h3&gt;

&lt;p&gt;When you commit to given resources or levels of usage, you’re basically assuming that your requirements aren’t going to change while the contract is running. &lt;/p&gt;

&lt;p&gt;But in the cloud world, a year of commitment is an eternity. &lt;/p&gt;

&lt;p&gt;Not even tech giants with entire departments dedicated to cost optimization are capable of making accurate forecasts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Pinterest as an example. &lt;/strong&gt;During one holiday season, its users spent so much time on the platform that the company’s cloud bill &lt;a href="https://www.theinformation.com/articles/as-aws-use-soars-companies-surprised-by-cloud-bills"&gt;went flying over the initial estimates&lt;/a&gt;. At that point, Pinterest had already committed to paying $170 million to AWS. And then it had to get some extra capacity and ended up spending $20 million more than forecasted. &lt;/p&gt;

&lt;h3 id="vendorlockin"&gt;2. You will get locked-in with AWS&lt;/h3&gt;

&lt;p&gt;By entering into this type of contract with AWS, you’re running the risk of &lt;a href="https://cast.ai/blog/vendor-lock-in-and-how-to-break-free/"&gt;vendor lock-in&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This means that &lt;strong&gt;you'll become dependent on AWS&lt;/strong&gt; &lt;strong&gt;for one or three years&lt;/strong&gt;. Using the products and services of another provider won’t make any sense when you’ve already paid for services upfront. It would also generate substantial switching costs. &lt;/p&gt;

&lt;p&gt;But what if AWS doesn’t have a solution for a challenge your team is going to face in 10 months from the moment you sign the contract? &lt;/p&gt;

&lt;h3 id="losingflexibility"&gt;3. You will lose all flexibility&lt;/h3&gt;

&lt;p&gt;Your requirements might change in the future. When was the last time you had to deal with a requirement that stayed static for a year or two?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When facing a new challenge, your team might have to commit to even more or get stuck with unused capacity that you’ve already paid for. Either way, you’re on the losing side.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You’ll have no flexibility of scaling or ability to configure multi-region/zone distribution easily.&lt;/p&gt;

&lt;h2 id="reservedinstancessetupisdifficult"&gt;Also, setting up AWS Reserved Instances is super difficult&lt;/h2&gt;

&lt;p&gt;Selecting the optimal Reserved Instance that will meet your application’s workload needs is very complicated, to say the least.&lt;/p&gt;

&lt;p&gt;Keeping pace with the latest AWS offerings and choosing from nearly &lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/"&gt;400 EC2 instance types&lt;/a&gt; is already a challenge. Add to it the need to analyze your application’s needs and workload patterns. &lt;/p&gt;

&lt;p&gt;Manual methods are time-consuming and imprecise, making the entire endeavor quite risky. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Using solutions for cloud bill analysis to determine your Reserved Instances or Savings Plans requirements is a bad idea. The insights they provide might lead you to reserving capacity based on the instance you’re using now, even if they’re the wrong type and size. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When you reserve the wrong instances, you’ll end up overprovisioning your application and wasting a lot of money in the long run.&lt;/p&gt;

&lt;h2 id="savingsplansarentasolution"&gt;And AWS Savings Plans aren’t going to save you&lt;/h2&gt;

&lt;p&gt;A Savings Plan could be the answer to the lack of flexibility of Reserved Instances.&lt;/p&gt;

&lt;p&gt;When buying a Savings Plan, you’re committing to a specific amount of compute that your teams can use over 1 or 3 years. All the usage that's part of your commitment will be covered by your contract. Anything extra will incur additional payments at the On-Demand rate.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Sure, you’re not committing to specific instance types and configurations. But you’re still running the risk of locking yourself in with AWS. And you commit to paying for cloud resources that might make zero sense for your company in 1 or 3 years. &lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="howtosolvethis"&gt;How to deal with that? Simple, avoid Reserved Instances and Savings Plans&lt;/h2&gt;

&lt;p&gt;Instead of falling into the trap of reserving capacity upfront for a discounted price, consider cloud cost optimization techniques such as rightsizing, autoscaling, and Spot Instances.&lt;/p&gt;

&lt;p&gt;They allow you to stay flexible and reduce your cloud bill by making sure that your teams provision just what they need. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try this free &lt;a href="https://cast.ai/eks-optimizer/"&gt;Savings Report&lt;/a&gt; before committing to a pricy Savings Plan to see how much you could potentially save while retaining the flexibility.&lt;/strong&gt;&lt;/p&gt;



</description>
      <category>aws</category>
      <category>devops</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Essential AWS Landing Zone and Control Tower Resources</title>
      <author>Lee Wynne</author>
      <pubDate>Tue, 29 Jun 2021 14:37:21 +0000</pubDate>
      <link>https://dev.to/leewynne/essential-aws-landing-zone-and-control-tower-resources-2ifj</link>
      <guid>https://dev.to/leewynne/essential-aws-landing-zone-and-control-tower-resources-2ifj</guid>
      <description>&lt;p&gt;You are looking to get into AWS for the first time, you may know a bit about platform architecture such as Regions, Availability Zones, EC2, S3, VPN's etc but you may not know that there is a whole other space around procurement, billing, and AWS account, organization and OU structure that needs to be considered as part of any enterprise-grade service, especially at scale.&lt;/p&gt;

&lt;p&gt;Here are some useful resources to get you started down that path.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#useful-youtube-videos"&gt;
  &lt;/a&gt;
  Useful YouTube Videos
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-aws-control-tower"&gt;
  &lt;/a&gt;
  What is AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/daLvEb44d5Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-aws-control-tower-to-govern-multiaccount-aws-environments-grc313r"&gt;
  &lt;/a&gt;
  Using AWS Control Tower to Govern Multi-Account AWS Environments (GRC313-R)
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2t-VkWt0rKk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-aws-control-tower-to-govern-multiaccount-aws-environments-grc313r"&gt;
  &lt;/a&gt;
  Using AWS Control Tower to Govern Multi-Account AWS Environments (GRC313-R)
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1124VPrQiWo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-governance-at-scale-with-aws-control-tower"&gt;
  &lt;/a&gt;
  Build governance at scale with AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Zxrs6YXMidk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0aws-control-tower-tutorial-deep-dive-demo-implement-aws-landing-zone-using-aws-control-tower"&gt;
  &lt;/a&gt;
   AWS Control Tower Tutorial / Deep Dive / Demo - Implement AWS Landing zone using AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ih4_llUIED4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0provisioning-users-in-aws-control-tower-using-aws-sso"&gt;
  &lt;/a&gt;
   Provisioning Users in AWS Control Tower Using AWS SSO
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/y_n9xN5mg1g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-onboard-existing-aws-accounts-onto-aws-control-tower"&gt;
  &lt;/a&gt;
  How to onboard existing AWS accounts onto AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/43RBVFac7LU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-control-tower-well-architected-deployment"&gt;
  &lt;/a&gt;
  AWS Control Tower Well Architected Deployment
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_56QP_PK7iA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-control-tower-easiest-way-to-set-up-and-govern-aws-at-scale"&gt;
  &lt;/a&gt;
  AWS Control Tower: Easiest way to set up and govern AWS at scale
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/l2M4A_shquU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programmatically-create-an-aws-account-with-aws-control-tower"&gt;
  &lt;/a&gt;
  Programmatically Create an AWS Account with AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t0gxOsByOlA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#useful-articles-from-around-the-wen"&gt;
  &lt;/a&gt;
  Useful Articles from around the Wen
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#my-architecture-aws-control-tower-vs-aws-landing-zone"&gt;
  &lt;/a&gt;
  My Architecture: AWS Control Tower vs AWS Landing Zone
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Both Control Tower and Landing Zone help set up and manage secure multi-account AWS environments. Which one should customers use? Let's take a closer look and figure out together.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;[Read more]&lt;a href="https://www.mitocgroup.com/blog/my-architecture-aws-control-tower-vs-aws-landing-zone/"&gt;https://www.mitocgroup.com/blog/my-architecture-aws-control-tower-vs-aws-landing-zone/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-landing-zone-versus-aws-control-tower"&gt;
  &lt;/a&gt;
  AWS Landing Zone versus AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;AWS Landing Zone and AWS Control Tower help set up and govern a new, secure, multi-account AWS environment based on AWS best practices. Both consist of core accounts and resources which will implement an initial security baseline. The following table compares the managed service (AWS Control Tower) with the solution (AWS Landing Zone).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article also includes some great references&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://globaldatanet.com/blog/aws-landing-zone-versus-aws-control-tower"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-migrate-from-aws-landing-zone-to-aws-control-tower"&gt;
  &lt;/a&gt;
  When to Migrate from AWS Landing Zone to AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Landing zones have traditionally been how enterprises would address this concern, as they use a best practice security approach to help ensure the safe setup of AWS accounts. Yet, with the introduction of AWS Control Tower, enterprises may consider migrating from AWS Landing Zone to AWS Control Tower. Today we’ll walk you through why you might want to migrate, but first, we’ll start with a little background.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Amazon knows that when you have multiple AWS accounts, it can be hard to manage, control and secure all of them in one go. Enter AWS Control Tower. It combines power and simplicity, making it easy to set up, govern and secure your multiple accounts using built-in services from AWS like AWS Organizations, AWS Service Catalog, AWS Single Sign-on, AWS IAM, AWS Config, AWS Cloudtrail, and more. This combination of services makes life easy and secure for your AWS accounts. You can also provision new accounts very quickly using the Control Tower dashboard with limited steps. Last, it also provides built-in guardrails to protect your accounts.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uk.nttdataservices.com/en/blog/tech-blog/when-to-migrate-from-aws-landing-zone-to-aws-control-tower"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reddit-landing-zone-vs-control-tower"&gt;
  &lt;/a&gt;
  Reddit : Landing Zone vs. Control Tower?
&lt;/h2&gt;


&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/aws/comments/bv86j6/landing_zone_vs_control_tower/" rel="noopener noreferrer"&gt;
            Landing Zone vs. Control Tower?
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;May 31 '19&lt;/span&gt;
          &lt;span&gt;Author: Jjmc7&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
&lt;p&gt;We are currently rolling out AWS Landing Zone but i have been seeing that Control Tower is essentially a service offering for Landing Zone and should be out soon. I was just wondering if anyone is testing one or the other and has any input. We are definitely going to use one or the other to execute our multi account…&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/aws/comments/bv86j6/landing_zone_vs_control_tower/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#aws-control-tower-everything-you-need-to-know"&gt;
  &lt;/a&gt;
  AWS Control Tower: Everything You Need To Know
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You may have heard of AWS Control Tower, AWS Organizations and AWS Service Catalog – but what are these services and how do they integrate with one another?  What are the benefits of leveraging Control Tower and the underlying services?  If you’re interested to learn more, please read on and we’ll answer these questions and more below.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What Is AWS Control Tower?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AWS Control Tower automates the ‘ at scale’ build out of a multi account structure on AWS.  For large companies migrating to AWS, it makes sense to have a multi account architecture, as different business functions will have different access requirements, compliance requirements and so on – these functions can be segregated easily between accounts.  With AWS Control Tower, administrators can set up a new multi-account environment with a single click in the AWS Management Console.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AWS Control Tower creates an orchestration layer for other AWS services including AWS Organizations, AWS Service Catalog and AWS Single Sign-on – this Orchestration layer makes it easier for administrators who are managing more than a handful of AWS accounts.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.logicata.com/blog/aws-control-tower/"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-aws-landing-zone-with-aws-control-tower"&gt;
  &lt;/a&gt;
  Setting Up AWS Landing Zone with AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Many years ago, I was working in a company where everything had to be created from scratch. Defining the requirements, designing the Rack, configuring the firewall, routers, and storage to be able to save data, defining user management, how to create all the infrastructure, and the list went on and on. This was a definitive infrastructure that hosted all customers and then managed them. Today, the way of thinking and drawing the entire infrastructure has changed. It has become much simpler thanks to flexibility and automation tools, but many of the requirements are the same.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When we start thinking about AWS and what customers want to do on AWS, we need to first think about requirements to better understand what the customers need. For example, which is the right service to use? What about security, governance, and baseline? How many accounts should I create for my customer based on own use cases? How many users, groups, and what permissions should they have?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let me introduce you to the concept of a Landing Zone and Control Tower, and why they work well together.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.mobiquity.com/insights/setting-up-aws-landing-zone-with-aws-control-tower"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-reddit-aws-control-tower-landing-zone-questions"&gt;
  &lt;/a&gt;
  More Reddit: AWS Control Tower Landing Zone questions
&lt;/h2&gt;


&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/aws/comments/gmu14w/aws_control_tower_landing_zone_question/" rel="noopener noreferrer"&gt;
            AWS Control Tower Landing Zone question
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;May 19 '20&lt;/span&gt;
          &lt;span&gt;Author: ixion&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;After looking at alternatives, I'm very heavily leaning toward AWS Control Tower Landing Zone, but I had some burning questions. I can't seem to find too much relevant or recent documentation on this. The landing zone pattern vs AWS Landing Zone vs AWS Control Tower Landing Zone definitely contributes to the confusion! I've read, for example, that you shouldn't…&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/aws/comments/gmu14w/aws_control_tower_landing_zone_question/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/aws/comments/hwwy1u/managing_aws_accounts_for_an_organization_aws/" rel="noopener noreferrer"&gt;
            Managing AWS accounts for an organization: AWS Control Tower v.s. Landing Zone v.s. Terraform?
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;Jul 24 '20&lt;/span&gt;
          &lt;span&gt;Author: thorn42&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I'm looking into the best way to manage a relatively small number (&amp;lt;50) of AWS accounts in an organization. AWS is trying to push for Control Tower or Landing Zone, but I'm not sure of the added-value compared to Terraform.&lt;/p&gt;

&lt;p&gt;More precisely, I've PoC'ed managing the following with Terraform:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Master account: Organization, children accounts, OUs, service control policies, tagging…&lt;/li&gt;
&lt;/ul&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/aws/comments/hwwy1u/managing_aws_accounts_for_an_organization_aws/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/aws/comments/cqa2jc/experience_with_control_tower_vs_managing/" rel="noopener noreferrer"&gt;
            Experience with Control Tower vs managing Organizations and access directly?
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;Aug 14 '19&lt;/span&gt;
          &lt;span&gt;Author: CanyonSlim&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
&lt;p&gt;I've started working with an organization that's only just getting their feet wet with AWS. A couple weeks before I came on board they started using Control Tower to manage multiple accounts and provision access to them. They're happy with it, and it seems relatively user friendly, but I have concerns about potential issues that could pop up long term…&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/aws/comments/cqa2jc/experience_with_control_tower_vs_managing/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/aws/comments/capjnh/when_to_use_aws_control_tower/" rel="noopener noreferrer"&gt;
            When to use AWS Control Tower
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;Jul  8 '19&lt;/span&gt;
          &lt;span&gt;Author: Flipphones&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
&lt;p&gt;Hey all,&lt;/p&gt;

&lt;p&gt;&amp;amp;#x200B;&lt;/p&gt;

&lt;p&gt;I've been looking at using AWS Control Tower for the past few days. From what I'm reading with their documentation, you need a new AWS account to then launch service. &lt;/p&gt;

&lt;p&gt;I already have an existing multi-account infrastructure so would I be able to add these accounts to the new org?&lt;/p&gt;

    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/aws/comments/capjnh/when_to_use_aws_control_tower/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/aws/comments/a1bm4u/aws_control_tower_govern_a_secure_compliant/" rel="noopener noreferrer"&gt;
            AWS Control Tower - govern a secure, compliant, multi-account environment
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;Nov 28 '18&lt;/span&gt;
          &lt;span&gt;Author: ryankearney&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/aws/comments/a1bm4u/aws_control_tower_govern_a_secure_compliant/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#slide-shows"&gt;
  &lt;/a&gt;
  Slide shows
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#implementing-your-landing-zone"&gt;
  &lt;/a&gt;
  Implementing your landing zone
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/1bam8QhXycDHFY" alt="1bam8QhXycDHFY on slideshare.net" width="100%" height="450"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-landing-zone-step-by-step"&gt;
  &lt;/a&gt;
  AWS Landing Zone step by step
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/1F7KJqf6BG9Z8V" alt="1F7KJqf6BG9Z8V on slideshare.net" width="100%" height="450"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecting-security-amp-governance-across-your-aws-landing-zone"&gt;
  &lt;/a&gt;
  Architecting Security &amp;amp; Governance Across Your AWS Landing Zone
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/DpbH3Zch428ac0" alt="DpbH3Zch428ac0 on slideshare.net" width="100%" height="450"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-aws-control-tower-to-govern-multiaccount-aws-environments-at-scale"&gt;
  &lt;/a&gt;
  Using AWS Control Tower to govern multi-account AWS environments at scale
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/9gJsXTXNOi73D" alt="9gJsXTXNOi73D on slideshare.net" width="100%" height="450"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>aws</category>
    </item>
    <item>
      <title>How to build a Ruby on Rails app on AWS for beginners - Part 2.</title>
      <author>Lee Wynne</author>
      <pubDate>Tue, 29 Jun 2021 14:34:31 +0000</pubDate>
      <link>https://dev.to/leewynne/how-to-build-a-ruby-on-rails-app-on-aws-for-beginners-part-2-21al</link>
      <guid>https://dev.to/leewynne/how-to-build-a-ruby-on-rails-app-on-aws-for-beginners-part-2-21al</guid>
      <description>&lt;p&gt;Now it is time to provision our database. We are going to go with Postgres. &lt;/p&gt;

&lt;p&gt;There are 2 ways to do this on AWS, we can either install Postgres into our ec2 Linux host, or we can provision the database separately in AWS LightSail as a PaaS RDS database.&lt;/p&gt;

&lt;p&gt;In this example we are just going to install Postgres locally on our LightSail ec2 instance.&lt;/p&gt;

&lt;p&gt;This is a fairly simple process, first of lets install a recent version of Postgres.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install postgresql-11 libpq-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up we we are going to setup our DB user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo -u postgres createuser lee -s

# If you would like to set a password for the user, you can do the following

sudo -u postgres psql 
postgres=# \password lee
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for installing and setting up PostGres within an EC2 instances.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-give-this-a-whirl-by-creating-your-first-rails-app"&gt;
  &lt;/a&gt;
  Let's give this a whirl by creating your first Rails App.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new mynewrailsapp -d postgresql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd mynewrailsapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails db:create
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to view your new rails app &lt;/p&gt;

&lt;p&gt;That should be it, you can then go ahead and create some of your models and migrations and start building your dreams.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>rails</category>
    </item>
    <item>
      <title>How to build a Ruby on Rails app on AWS for beginners - Part 1.</title>
      <author>Lee Wynne</author>
      <pubDate>Tue, 29 Jun 2021 14:28:28 +0000</pubDate>
      <link>https://dev.to/leewynne/how-to-build-a-ruby-on-rails-app-on-aws-for-beginners-part-1-p5n</link>
      <guid>https://dev.to/leewynne/how-to-build-a-ruby-on-rails-app-on-aws-for-beginners-part-1-p5n</guid>
      <description>&lt;p&gt;This is part one of a series of posts, this post covers the initial provisioning of a Ruby on Rails app on AWS using LightSail which is the simplest way of getting started with compute and databases on AWS. &lt;/p&gt;

&lt;p&gt;Let's get started by creating an AWS account and building a Linux host to run our Ruby on Rails app with AWS LightSail. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#provisioning-a-linux-instance-to-run-a-ruby-on-rails-app-on-aws-lightsail"&gt;
  &lt;/a&gt;
  Provisioning a Linux instance to run a Ruby on Rails app on AWS LightSail.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.theelastic.guru/lee/the-easiest-way-to-get-started-with-aws-regardless-of-your-background-1hhf"&gt;This post&lt;/a&gt; will guide you through getting started with your first AWS LightSail compute instance. &lt;strong&gt;Before&lt;/strong&gt; you follow the article though, you need to remember to choose Ubuntu as the OS as per below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQ6KPCSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/brtuup7673r0ztjr2r9r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQ6KPCSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/brtuup7673r0ztjr2r9r.png" alt="aws Ruby on Rails host"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then select your plan (I chose the $10 for now)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8AYpgllT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/7v88tobibx6vyfaj2z1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AYpgllT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/7v88tobibx6vyfaj2z1h.png" alt="aws Ruby on Rails host ec2 or lightsail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, once that's done, click on the little command line icon next to you instance and you should get a new console tab, all logged in and ready to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--67RsrVx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/xtm9tdrkcnxp1tq1mrxp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67RsrVx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/xtm9tdrkcnxp1tq1mrxp.png" alt="Screenshot 2021-02-17 at 12.33.07"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-node-and-yarn-to-support-webpacker-in-ruby-on-rails"&gt;
  &lt;/a&gt;
  Installing Node and Yarn to support Webpacker in Ruby on Rails.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install curl
curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install git-core zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev nodejs yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-rbenv-and-then-ruby"&gt;
  &lt;/a&gt;
  Installing rbenv and then Ruby
&lt;/h2&gt;

&lt;p&gt;Great, let's install a Ruby. We are going to install it using rbenv which allows you to run multiple versions of Ruby side by side if needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd
git clone https://github.com/rbenv/rbenv.git ~/.rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &amp;gt;&amp;gt; ~/.bashrc
echo 'eval "$(rbenv init -)"' &amp;gt;&amp;gt; ~/.bashrc
exec $SHELL

git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' &amp;gt;&amp;gt; ~/.bashrc
exec $SHELL

rbenv install 3.0.0
rbenv global 3.0.0
ruby -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all we need to do is install bundler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem install bundler

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, installing Rails&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem install rails -v 6.1.3.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make the Rails executable available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rbenv rehash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check you have everything installed (this should return the installed version):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Job done next up this series is installing PostgreSQL for the DB.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>rails</category>
    </item>
    <item>
      <title>Fast Fulltext Search With Postgres Gin Index </title>
      <author>Marcell Cruz</author>
      <pubDate>Tue, 29 Jun 2021 14:11:42 +0000</pubDate>
      <link>https://dev.to/____marcell/fast-fulltext-search-with-postgres-gin-index-22n5</link>
      <guid>https://dev.to/____marcell/fast-fulltext-search-with-postgres-gin-index-22n5</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;a href="#fake-data"&gt;Creating Fake Realistic Data&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#list-of-english-words"&gt;List Of English Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#postgres-data-directory"&gt;Postgres Data Directory&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#generating-the-data"&gt;Generating The Data&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-before-the-index"&gt;Testing Before The Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-index"&gt;Creating The Index And Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#expression-indexes"&gt;Expression Indexes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first thing we need to do is to create a lot of fake data so we can test our indexex, it's also important to use real words dependending on the index that you're trying &lt;br&gt;
to use, there's a clever way of doing this on linux, if you're not on linux you can download &lt;br&gt;
a list of words &lt;a href="https://github.com/dwyl/english-words"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-fake-realistic-data"&gt;
  &lt;/a&gt;
  Creating Fake Realistic Data
&lt;/h2&gt;

&lt;p&gt;The first thing and maybe the most important part when dealing with indexes or any code for that matter is being able to test it, you need to play around with it to figure out what is the best index for &lt;em&gt;your&lt;/em&gt; specific query, to test indexes we need a lot of data otherwise the query planner &lt;br&gt;
won't use our index, if you wanna to know more about indexes you can read &lt;a href="https://dev.to/____marcell/postgres-indexes-4603"&gt;this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#list-of-words"&gt;
  &lt;/a&gt;
  List Of Words
&lt;/h3&gt;

&lt;p&gt;In order to create realistic data we need a list of words, on Linux you can grab the word list generated by the spell checker utility on &lt;em&gt;/usr/share/dict/&lt;/em&gt;, the name of the file varies depending on the distribution, if you're not on linux you can grab your list of words &lt;a href="https://github.com/dwyl/english-words"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#postgres-data-directory"&gt;
  &lt;/a&gt;
  Postgres Data Directory
&lt;/h3&gt;

&lt;p&gt;Now that we have a list of words we need a way of reading this list into postgres so we can generate our data. the function &lt;em&gt;pg_read_file&lt;/em&gt; can read anything inside the data directory, you can find out where your data directory is running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;data_directory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result will probably be something like &lt;strong&gt;/var/lib/postgres/&lt;/strong&gt;, this also dependends on your OS,&lt;br&gt;
after getting the path you just need to copy your list of words to this directory so we can use &lt;em&gt;pg_read_file&lt;/em&gt;&lt;br&gt;
to read this list of words and generate our data.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#generating-the-data"&gt;
  &lt;/a&gt;
  Generating The Data
&lt;/h3&gt;

&lt;p&gt;Let's create a table called notes with two fields, title and description&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;serial&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then create a function that will feed us the words&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;getNArrayS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;string_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;VOLATILE&lt;/span&gt;
&lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just copy and paste, press enter and things will work, I promise :P&lt;/p&gt;

&lt;p&gt;Now we can create the data, it will take some time so go grab some tea meanwhile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pg_read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'words.list'&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;getNArrayS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;getNArrayS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're creating one million records [insert dr evil meme here] with real words in two fields, not bad, &lt;br&gt;
we can increase the amount of words in each field if you want you just need to change '3' in getNArrayS, 3 in this case is the number of words in each field, now we can test our indexes variations and easily change it depending on what query and index we want to test.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#testing-before-the-index"&gt;
  &lt;/a&gt;
  Testing Before The Index
&lt;/h2&gt;

&lt;p&gt;We need to test our query now and see how fast it's, so we can take note and compare later on after we create our index, unfortunatly as far as I know postgres don't have a way of forcing the query planner to use a specific index or not, so we need to test first then compare the times later.&lt;br&gt;
run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;timing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now every query will show the time it took to run.&lt;br&gt;
First let's test a simple like, we also need to choose one word from our word list ofc, I chose &lt;br&gt;
asimov.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 615.921 ms&lt;/em&gt;&lt;br&gt;
with an &lt;em&gt;AND&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 561.811 ms&lt;/em&gt;&lt;br&gt;
with a &lt;em&gt;OR&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 1027.195 ms (00:01.027)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;concating the two fields&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 810.602 ms&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ok, now let's create the index and compare the time afterwards for each query.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#create-index"&gt;Creating The Index And Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's first create the trigrams extensions, more about this later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;EXTENSION&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;pg_trgm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's create an index just on the title field using the trigrams extension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;notes_title_idx&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since it's very common to search for the first three letters of a word postgres has a trigrams(3 letters) that speed up just that, it creates a index with the first 3&lt;br&gt;
letters of the words in the field so our queries run even faster, now let's test our index with the same query that we used before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 211.155 ms&lt;/em&gt;&lt;br&gt;
Almost three times faster, not bad, we can use EXPLAIN to see how the query planner is using our index&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;                                     &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;-----------------------------------------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="n"&gt;Heap&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;11682&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;82&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20204&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;Recheck&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;notes_title_idx&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;195&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20204&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that the query is using our index &lt;em&gt;notes_title_idx&lt;/em&gt;, subsequent runs will&lt;br&gt;
return even faster results since the index is already in memory, the second run was &lt;em&gt;51.841 ms&lt;/em&gt;&lt;br&gt;
more than 10x faster, the second run without the index woulnd't have made any difference.&lt;/p&gt;

&lt;p&gt;The second query that we want to test has an &lt;em&gt;AND&lt;/em&gt; using the description field, let's first run the query without a description index to see what happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 51.215 ms&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Even though we don't have a index in description, our results are already 10x faster, that's because title is almost instant now, and the &lt;em&gt;and&lt;/em&gt; query on description don't need to scan the whole table, just the result set of the title index, before creating the index in the description field let's run the query with the &lt;em&gt;OR&lt;/em&gt; clause to see&lt;br&gt;
how it compares to the &lt;em&gt;and&lt;/em&gt; query&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 1.059 ms&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same time as before, what happened? with an &lt;em&gt;OR&lt;/em&gt; the query planner needs to scan the whole &lt;br&gt;
table again so it decides to not use the index, if we run with an EXPLAIN we can see that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;                                   &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;-------------------------------------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;Gather&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;20295&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20302&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;Workers&lt;/span&gt; &lt;span class="n"&gt;Planned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Parallel&lt;/span&gt; &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;17265&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8459&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The query is not using &lt;em&gt;notes_title_idx&lt;/em&gt; because it would be even slower in this case, the reason is because&lt;br&gt;
the disc would have to be hit three times, one for the index read, one for the title read and one for the description. &lt;/p&gt;

&lt;p&gt;Now let's create the description index and see how it compares&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;notes_description_idx&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the &lt;em&gt;OR&lt;/em&gt; query again we have a much better result &lt;em&gt;Time: 141.310 ms&lt;/em&gt; almost 10x faster again, we can use explain to see that both indexes are being used now&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;                                         &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;--------------------------------------------------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="n"&gt;Heap&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;222&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;11745&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20302&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;Recheck&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;BitmapOr&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;222&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;222&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20304&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;notes_title_idx&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;195&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20204&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;notes_description_idx&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last query that we need to improve is the one where we concatenate the two fields title and description and search them, we could use an index on both fields together or use one in each like we did in the previous example, let's do both and see what's faster.&lt;/p&gt;

&lt;p&gt;To test for both we just need to run the query again since we already have two indexes one in each field&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 849.965 ms&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using the coalesce the query planer doesn't use any of our indexes, now let's create an index on both fields and see what happens&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;index&lt;/span&gt; &lt;span class="n"&gt;notes_title_description_idx&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the query again we get the same result, in order to speed up a query like this is much better to change the query to use a &lt;em&gt;OR&lt;/em&gt; and to use a expression index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * from notes where title ilike '%gar%' or description ilike '%gar%';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with an &lt;em&gt;OR&lt;/em&gt; we get &lt;em&gt;126 ms&lt;/em&gt; and the query planer is using our multicolumn index &lt;em&gt;notes_title_description_idx&lt;/em&gt; that we just created, the results of using an multicolumn index are better but not by a lot and depending on how many fields you have in your table the index won't even be used, now let's try to create a concatenated index using the two fields that mimics the query that we tried.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expression-indexes"&gt;
  &lt;/a&gt;
  Expression Indexes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;notes_coales_title_description_idx&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need the extra parenteshis for the expression, now let's run the query again&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select * from notes where coalesce(title, '') || ' ' || coalesce(description, '') ilike '%gar%';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 103.706 ms&lt;/em&gt;&lt;br&gt;
10x faster again, postgres is smart enough to use our new index &lt;em&gt;notes_coales_title_description_idx&lt;/em&gt;, so that was faster than using the two different indexes in each field with an OR and faster than multicolumn index with an OR.&lt;/p&gt;

&lt;p&gt;The most important thing we can take from these tests is that is hard to predict what postgres will do so you should always test your indexes with the exact query that you're going to use, you should try different approaches to figure out what's the fastest for your query and don't be afraid of creating different indexes for different queries, and also using indexes for your queries makes them a LOT faster, 10x faster for all these queries that we tried, so you should definitely use them.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>posgres</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Introduction To MongoDB and How To Use It</title>
      <author>Boyan Iliev</author>
      <pubDate>Tue, 29 Jun 2021 14:08:16 +0000</pubDate>
      <link>https://dev.to/boiliev/introduction-to-mongodb-and-how-to-use-it-3no1</link>
      <guid>https://dev.to/boiliev/introduction-to-mongodb-and-how-to-use-it-3no1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;MongoDB is a &lt;code&gt;NoSQL&lt;/code&gt; (not only SQL) database. In NoSQL databases, we store our data in a collection of documents. These documents are very similar to &lt;code&gt;JavaScript objects&lt;/code&gt; or &lt;code&gt;JSON objects&lt;/code&gt;. So if you are familiar with JavaScript, then you are going to like Mongo, because it will be easier to get the hang of it.&lt;/p&gt;

&lt;p&gt;MongoDB is very scalable. It has built-in replication and sharding. It's performant, it's fast, and mostly, it's very flexible. Because the data structure is like a JavaScript object, you don't have to map out your entire data structure beforehand as you do with relational databases. Unlike a relational database like &lt;code&gt;MySQL&lt;/code&gt;, where you have to create all your tables and all your columns, Mongo gives you the freedom to structure your data however we want through our application. This doesn't mean it's better than relational databases, it all depends on how you need to use your database.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-mongodb"&gt;
  &lt;/a&gt;
  Installing MongoDB
&lt;/h1&gt;

&lt;p&gt;We are going to install MongoDB through &lt;code&gt;Homebrew&lt;/code&gt;. If you don't have Homebrew installed, just run the code below in your terminal and that will install Homebrew.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you get Homebrew installed on your Mac, just run the three following commands. First, we run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew tap mongodb/brew
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install mongodb-community@4.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then after that, we will want to run it as a service with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew services start mongodb-community@4.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, we need to run the following command so that we can connect and start using MongoDB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what you should see after running the command:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bE3UXkwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/june2021/Mongo%2520-%2520Imgur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bE3UXkwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/june2021/Mongo%2520-%2520Imgur.png" alt="Mongo - Imgur.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have Mongo installed and ready, let's start with some of the main commands that you should know&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#show-current-database"&gt;
  &lt;/a&gt;
  Show Current Database
&lt;/h3&gt;

&lt;p&gt;The command for seeing the current database is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#show-all-databases"&gt;
  &lt;/a&gt;
  Show All Databases
&lt;/h3&gt;

&lt;p&gt;In order to see all of the databases just run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;show dbs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#switching-and-creating-databases"&gt;
  &lt;/a&gt;
  Switching and Creating Databases
&lt;/h3&gt;

&lt;p&gt;If you want to switch which database you are using, just type in &lt;code&gt;use&lt;/code&gt; followed by the database name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use db_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to create a DB, just type in the &lt;code&gt;use&lt;/code&gt; command again, followed by your new DBs name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use new_db_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run &lt;code&gt;show dbs&lt;/code&gt; after creating a DB, the new DB won't show because it doesn't have anything in it, so don't worry when it doesn't show up after running the &lt;code&gt;show dbs&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dropping-a-database"&gt;
  &lt;/a&gt;
  Dropping a Database
&lt;/h3&gt;

&lt;p&gt;In order to drop a database, or in other words, delete it, you first need to switch to the database with the &lt;code&gt;use&lt;/code&gt; command, and after that, you need to type in the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.dropDatabase()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-and-viewing-collections"&gt;
  &lt;/a&gt;
  Creating and Viewing Collections
&lt;/h3&gt;

&lt;p&gt;To create a collection in the DB that you are using, you just have to run the following command and set the name of your collection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.createCollection('collection_name')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if you want to view the collection, just run the &lt;code&gt;show&lt;/code&gt; command followed by &lt;code&gt;collections&lt;/code&gt; and that should print out the collections in your DB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;show collections
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#inserting-rows"&gt;
  &lt;/a&gt;
  Inserting Rows
&lt;/h3&gt;

&lt;p&gt;Now in order to insert a row, just type in the &lt;code&gt;db&lt;/code&gt; followed by the name of the collection that you want to insert the row in, and then by &lt;code&gt;insert&lt;/code&gt;, which is then followed by parentheses&lt;code&gt;()&lt;/code&gt;. And in those parentheses, you pass in an object with whatever you want.&lt;/p&gt;

&lt;p&gt;Here is an example of how this should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.users.insert({
    username: 'Batman_fan_44',
    followers: 3,
    following: [
        'Alred',
        'Robin'
    ],
    status: {
        name: 'Bruce Wayne',
        status: 'active'
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see this looks just like a normal JavaScript object. You can store strings, numbers, arrays and can also have embedded objects inside. This is why Mongo is liked by so many, because of how similar it is to JS and how easy it is to use.&lt;/p&gt;

&lt;p&gt;If you want to insert more than one row, instead of typing &lt;code&gt;insert&lt;/code&gt; after the collections name, type in &lt;code&gt;insertMany&lt;/code&gt; and then insert your rows in an array like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.users.insertMany([
    {
        username: 'Tony Montana',
        followers: 1234
    },
    {
        username: 'Hannibal Lecter',
        followers: 5
    },
    {
        username: 'Rick Grimes',
        followers: 21
    }
])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These rows don't have as many stuff like likes or status. which our first row has, but that doesn't matter. Unlike relational databases, in Mongo, we don't have that strict data model that we have to follow. We can put whatever we want wherever we want, which is awesome!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viewing-rows"&gt;
  &lt;/a&gt;
  Viewing Rows
&lt;/h3&gt;

&lt;p&gt;To view the rows of a certain collection, just run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.collection_name.find()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will print out the data, but it will be hard to read. Luckily there is a method called &lt;code&gt;pretty()&lt;/code&gt;, which formats all the rows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.collection_name.find().pretty()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now it will be much easier to read.&lt;/p&gt;

&lt;p&gt;These are some of the main commands that you should know. I recommend that you check out this MongoDB Cheat Sheet and have a look at some other commands that might be useful to you:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/bradtraversy/f407d642bdc3b31681bc7e56d95485b6"&gt;https://gist.github.com/bradtraversy/f407d642bdc3b31681bc7e56d95485b6&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;As you can see MongoDB looks identical to JavaScript. They have similar syntax and are pretty easy to get the hang of.&lt;/p&gt;

&lt;p&gt;If you want to have a MongoDB database cluster production-ready, I strongly recommend using the new DigitalOcean managed MongoDB clusters which you can deploy with just the click of a button so that you won't have to worry about server maintenance, which can be very challenging sometimes.&lt;/p&gt;

&lt;p&gt;If you want you can use this referral code which gives you &lt;a href="https://m.do.co/c/122894dc3b82"&gt;free $100 DigitalOcean credit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you also want to learn more about SQL and how to use it, I highly recommend that you check out this &lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;Introduction to SQL&lt;/a&gt; opensource ebook. It helped me understand how to use SQL and I highly recommend it.&lt;/p&gt;

&lt;p&gt;I hope that this post has helped you get more comfortable with using MongoDB and getting the hang of it.&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>hackathon</category>
    </item>
    <item>
      <title>Gradual method renaming in Perl</title>
      <author>Mark Gardner</author>
      <pubDate>Tue, 29 Jun 2021 14:00:00 +0000</pubDate>
      <link>https://dev.to/mjgardner/gradual-method-renaming-in-perl-fil</link>
      <guid>https://dev.to/mjgardner/gradual-method-renaming-in-perl-fil</guid>
      <description>&lt;p&gt;We have a huge codebase of over 700,000 lines of Perl spread across a couple dozen &lt;a href="https://www.git-scm.com/"&gt;Git&lt;/a&gt; repositories at &lt;a href="https://www.hostgator.com/"&gt;work&lt;/a&gt;. Sometimes &lt;a href="https://www.refactoring.com/"&gt;refactoring&lt;/a&gt; is easy if the classes and methods involved are confined to one of those repos, but last week we wanted to rename a method that was potentially used across many of them without having to QA and launch so many changes. After getting some help from &lt;a href="https://grinnz.net/"&gt;Dan Book&lt;/a&gt; and &lt;a href="https://www.simcop2387.info/"&gt;Ryan Voots&lt;/a&gt; on the &lt;a href="https://web.libera.chat/#perl"&gt;#perl libera.chat IRC channel&lt;/a&gt;, I arrived at the following solution.&lt;/p&gt;

&lt;p&gt;First, if all you want to do is alias the new method call to the old while making the least amount of changes, you can just do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;*new_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;old_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This takes advantage of Perl’s &lt;a href="https://perldoc.pl/perldata#Typeglobs-and-Filehandles"&gt;typeglobs&lt;/a&gt; by assigning to the new method’s name in the symbol table a &lt;a href="https://perldoc.pl/perlref"&gt;reference&lt;/a&gt; (indicated by the &lt;code&gt;\&lt;/code&gt; character) to the old method. &lt;a href="https://perldoc.pl/perlobj#A-Method-is-Simply-a-Subroutine"&gt;Methods are just subroutines&lt;/a&gt; in Perl, and although you don’t need the &lt;code&gt;&amp;amp;&lt;/code&gt; character when calling one, you do need it if you’re passing a subroutine as an argument or creating a reference, as we’re doing above.&lt;/p&gt;

&lt;p&gt;I wanted to do a bit more, though. First, I wanted to log the calls to the old method name so that I could track just how widely it’s used and have a head start on renaming it elsewhere in our codebase. Also, I didn’t want to fill our logs with those calls—we have enough noise in there already. And lastly, I wanted future calls to go directly to the new method name without adding another stack frame when using &lt;code&gt;caller&lt;/code&gt; or &lt;a href="https://perldoc.pl/Carp"&gt;Carp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With all that in mind, here’s the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;old_method&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;old_method is deprecated&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="nb"&gt;no&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redefine&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="nv"&gt;*old_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;new_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;goto&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;new_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;new_method&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# code from old_method goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Old (and not-so-old) hands at programming are probably leaping out of their seats right now yelling, “YOU’RE USING GOTO! GOTO IS &lt;a href="https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf"&gt;CONSIDERED HARMFUL&lt;/a&gt;!” And they’re right, but this isn’t Dijkstra’s goto. From the Perl manual:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;goto &amp;amp;NAME&lt;/code&gt; form is quite different from the other forms of &lt;a href="https://perldoc.pl/functions/goto"&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt;. In fact, it isn’t a goto in the normal sense at all, and doesn’t have the stigma associated with other gotos. Instead, it exits the current subroutine (losing any changes set by &lt;a href="https://perldoc.pl/functions/local"&gt;&lt;code&gt;local&lt;/code&gt;&lt;/a&gt;) and immediately calls in its place the named subroutine using the current value of &lt;a href="https://perldoc.pl/perlvar#%40_"&gt;&lt;code&gt;@_&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;[…]&lt;/em&gt; After the &lt;a href="https://perldoc.pl/functions/goto"&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt;, not even &lt;a href="https://perldoc.pl/functions/caller"&gt;&lt;code&gt;caller&lt;/code&gt;&lt;/a&gt; will be able to tell that this routine was called first.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;&lt;a href="https://perldoc.pl/perlfunc"&gt;perlfunc&lt;/a&gt; manual page&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The bottom line is that this achieves our third goal above: immediately jumping to the new method as if it were originally called.&lt;/p&gt;

&lt;p&gt;The other tricky bit is in the line before, when we’re redefining &lt;code&gt;old_method&lt;/code&gt; to point to &lt;code&gt;new_method&lt;/code&gt; while we’re still inside &lt;code&gt;old_method&lt;/code&gt;. (Yes, you can do this.) If you’re running under &lt;code&gt;use warnings&lt;/code&gt; (and we are, and &lt;a href="https://perlmaven.com/always-use-warnings"&gt;you should&lt;/a&gt;), you first need to disable &lt;a href="https://perldoc.pl/perldiag#Subroutine-%25s-redefined"&gt;that warning&lt;/a&gt;. Later calls to &lt;code&gt;old_method&lt;/code&gt; will go straight to &lt;code&gt;new_method&lt;/code&gt; without logging anything.&lt;/p&gt;

&lt;p&gt;And that’s it. The next step after launching this change is to add a story to our &lt;a href="https://www.scaledagileframework.com/team-backlog/"&gt;backlog&lt;/a&gt; to monitor our logs for calls to the old method, and gradually refactor our other repositories. Then we can finally remove the old method wrapper.&lt;/p&gt;

</description>
      <category>oop</category>
      <category>perl</category>
      <category>refactoring</category>
    </item>
    <item>
      <title>What is Web Scraping
</title>
      <author>Mohan Ganesan</author>
      <pubDate>Tue, 29 Jun 2021 13:49:53 +0000</pubDate>
      <link>https://dev.to/proxiesapi/what-is-web-scraping-1cce</link>
      <guid>https://dev.to/proxiesapi/what-is-web-scraping-1cce</guid>
      <description>&lt;p&gt;Web scraping refers to the process of crawling or spidering a website or multiple websites systematically and then extracting relevant data usually not intended for consumption by software programs. The difficulty comes in the fact that the web is haphazard, designed originally for humans, varied in implementation, and then the relevant data is not defined semantically&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/TILFHgKvsUU"&gt;https://youtu.be/TILFHgKvsUU&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>CLOSURES: A comprehensive guide to Closures-Functions and Scopes.</title>
      <author>Tony Edgal</author>
      <pubDate>Tue, 29 Jun 2021 13:27:51 +0000</pubDate>
      <link>https://dev.to/tonyedgal/closures-a-comprehensive-guide-to-closures-functions-and-scopes-aga</link>
      <guid>https://dev.to/tonyedgal/closures-a-comprehensive-guide-to-closures-functions-and-scopes-aga</guid>
      <description>&lt;p&gt;In this article I will go over the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functions and scopes&lt;/li&gt;
&lt;li&gt;What are closures in JavaScript&lt;/li&gt;
&lt;li&gt;How closures are handled in memory&lt;/li&gt;
&lt;li&gt;Why it is named &lt;code&gt;closure&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  FUNCTIONS
&lt;/h4&gt;

&lt;p&gt;A function is similar to a procedure or a set of statements that is used to perform a specific task. For a procedure to qualify as a function, it should take some input, perform various actions on that data and return a result.&lt;/p&gt;

&lt;p&gt;Generally speaking, there are several ways to define functions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Function declaration&lt;/li&gt;
&lt;li&gt;Function expression&lt;/li&gt;
&lt;li&gt;Arrow syntax
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function daclaration - Uses the function keyword&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="c1"&gt;// Function expression - the name can be omitted, giving an anonymous function&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// name omitted&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFuncTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;//function name included&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow functions - arrow function syntax is a shorter syntax for a function expression&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#scopes"&gt;
  &lt;/a&gt;
  SCOPES
&lt;/h4&gt;

&lt;p&gt;A scope is a policy that manages the availability of variables. A variable defined inside a scope is accessible only within that scope, but inaccessible outside.&lt;/p&gt;

&lt;p&gt;The scope where a variable is located decides if it is accessible or inaccessible from certain parts of the program.&lt;/p&gt;

&lt;p&gt;There are two types of scopes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Global Scope&lt;/li&gt;
&lt;li&gt;Block or Local scope
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Global scopes are variables that are accessible from any part of the program&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;// variable declared in the global scope&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;square&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// outputs 4&lt;/span&gt;

&lt;span class="c1"&gt;// Block/local scope refers to variables declared within a block '{}'&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// variable declared in the global scope&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// variable declared in the block/local scope&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// Outputs 25&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// outputs undefined, because it was defined within the times function.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#closure"&gt;
  &lt;/a&gt;
  CLOSURE
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Closure&lt;/code&gt; - A function that is a first-class object, that has access to variables defined in the same local scope in which it was defined.&lt;/p&gt;

&lt;p&gt;In other words, a closure gives you access to an outer function’s scope from an inner function.&lt;/p&gt;

&lt;p&gt;Lets look at closure with three examples&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;extFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Define a variable local to extFunc&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I used a closure&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;intFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We can access the variable defined in the scope of extFunc within inFunc&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extVar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Return the inner function. Note that we're not calling it here!&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;intFunc&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Call the outer function, which returns the inner function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Call the returned function that we stored as a variable&lt;/span&gt;
&lt;span class="nx"&gt;closure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// outputs 'I used a closure'&lt;/span&gt;

&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;minutes is equal to&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;timeConversion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;minutesToSeconds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minToSec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; seconds`&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;minToSec&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;convert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeConversion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// outputs "2 minutes is equal to 120 seconds"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeConversion&lt;/span&gt;&lt;span class="p"&gt;()())&lt;/span&gt; &lt;span class="c1"&gt;// outputs "2 minutes is equal to 120 seconds"&lt;/span&gt;

&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayScore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;displayScore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showScore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;showScore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;in example 1&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;extFunc()&lt;/code&gt; creates a local variable called &lt;code&gt;extVar&lt;/code&gt; and a function called &lt;code&gt;intFunc()&lt;/code&gt;. The &lt;code&gt;intFunc()&lt;/code&gt; function is an inner function that is defined inside &lt;code&gt;extFunc()&lt;/code&gt; and is available only within the body of the &lt;code&gt;extFunc()&lt;/code&gt; function. Note that the &lt;code&gt;intFunc()&lt;/code&gt; function has no local variables of its own. However, since inner functions have access to the variables of outer functions, &lt;code&gt;intFunc()&lt;/code&gt; can access the variable name declared in the parent function, &lt;code&gt;extFunc()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;in example 2&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
the &lt;code&gt;return intFunc&lt;/code&gt; line in &lt;strong&gt;&lt;em&gt;1&lt;/em&gt;&lt;/strong&gt; can be avoided by returning the internal function at the time of declaration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;in example 3&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
in &lt;strong&gt;&lt;em&gt;3&lt;/em&gt;&lt;/strong&gt; the internal function is not returned (only called) because of the alert command within its block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// switching the code in 3 from alert to console.log&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayScore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;displayScore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showScore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;showScore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// outputs 85 to the console&lt;/span&gt;
&lt;span class="c1"&gt;// get TypeError showScore is not a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first glance, it might seem unintuitive that this code still works. In some programming languages, the local variables within a function exist for just the duration of that function's execution. Once &lt;code&gt;scores()&lt;/code&gt; finishes executing, you might expect that the name variable would no longer be accessible. However, because the code still works as expected, this is obviously not the case in JavaScript.&lt;/p&gt;

&lt;p&gt;The reason is that functions in JavaScript form closures. A closure is the combination of a function and the lexical environment within which that function was declared. This environment consists of any local variables that were in-scope at the time the closure was created. In this case, &lt;code&gt;showScore&lt;/code&gt; is a reference to the instance of the function &lt;code&gt;displayScore&lt;/code&gt; that is created when &lt;code&gt;scores()&lt;/code&gt; is run. The instance of &lt;code&gt;displayScore&lt;/code&gt; maintains a reference to its lexical environment, within which the variable name exists. For this reason, when &lt;code&gt;showScore&lt;/code&gt; is invoked, the variable &lt;code&gt;score&lt;/code&gt; remains available for use, and "85" is passed to console, followed by a TypeError.&lt;/p&gt;

&lt;p&gt;When the internal function is created, the Javascript engine detects that for the function to be executed in the future, a reference will be needed to variable declared in the external function scope.&lt;/p&gt;

&lt;p&gt;To solve this, the engine keeps a link to this variable for later use, and stores that link in a special function scoped execution context.&lt;/p&gt;

&lt;p&gt;Such a function with 'memory' about the environment where it was created is simply known as: &lt;code&gt;a Closure&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-closures-are-handled-in-memory"&gt;
  &lt;/a&gt;
  HOW CLOSURES ARE HANDLED IN MEMORY
&lt;/h4&gt;

&lt;p&gt;When a pure function that depends on its own arguments and data is called, its gets pushed to the &lt;code&gt;**CALL STACK**&lt;/code&gt;, where it is executed and it data is kept in memory until it is removed.&lt;/p&gt;

&lt;p&gt;But when a function references data outside it's own scope, i.e. from its lexical environment or an external function, for the interpreter to call this function or know the value of this free variables, it creates a &lt;code&gt;closure&lt;/code&gt; to store them in place in memory where they can be accessed later. That area in memory is called a &lt;code&gt;**HEAP MEMORY**&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now unlike the &lt;code&gt;call stack&lt;/code&gt; which is short-lived, the &lt;code&gt;heap memory&lt;/code&gt; can store data indefinitely and decide when it's ready to be discarded.&lt;/p&gt;

&lt;p&gt;Closures require more memory and processing power than regular functions but has many important practical uses, e.g. &lt;code&gt;Data Encapsulation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Data encapsulation is simply a method of protecting data to prevent it from leaking to where it is not needed.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#why-the-name-closures-then"&gt;
  &lt;/a&gt;
  WHY THE NAME CLOSURES THEN?
&lt;/h5&gt;

&lt;p&gt;This is because the internal function inspects it's environment and closes over the variables in the lexical scope in which it is defined, and that it needs to remember for future use. The references to the variables are closed in a special data structure that can only be accessed by the Javascript runtime itself.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>closures</category>
      <category>functions</category>
      <category>scopes</category>
    </item>
    <item>
      <title>How to start a Developer Newsletter?</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Tue, 29 Jun 2021 13:21:49 +0000</pubDate>
      <link>https://dev.to/basecampxd/how-to-start-a-developer-newsletter-24dk</link>
      <guid>https://dev.to/basecampxd/how-to-start-a-developer-newsletter-24dk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;I unsubscribed a lot of newsletters every week that annoys me, flood my inbox, and distract me from useful messages. They did many things wrong in terms of email formatting, sending to people who are more likely to unsubscribe, and many more. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5DG-CMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxohosujyysk9zpikxp8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5DG-CMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxohosujyysk9zpikxp8.gif" alt="Newsletter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, we are going to look into "How a DEV newsletter should be created and marketed?". &lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-newsletter"&gt;
  &lt;/a&gt;
  What is Newsletter?
&lt;/h1&gt;

&lt;p&gt;Let us start with the basics.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Email Newsletter is a type of email that is sent to the subscribed user to inform them about promotions, latest news, updates, tips, event, and many other things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The newsletter has been part of marketing for a long time. E-commerce websites have utilized it for sending offers and discount updates to their customer. Users of these websites are more likely to buy something through their newsletter.&lt;/p&gt;

&lt;p&gt;If you own a website then a newsletter becomes an essential part to drive traffic to your website. Every user that visited your website will not return to your website unless and until you send a notification to them about new things about your website. This can be informed through a newsletter that drives traffic to your website.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#when-newsletter-will-not-be-unsubscribed"&gt;
  &lt;/a&gt;
  When Newsletter will not be unsubscribed?
&lt;/h1&gt;

&lt;p&gt;Newsletter should not only inform but also provide content to users that engage them with your newsletter. If we use a newsletter to provide benefits to users then there will be fewer chances of getting unsubscribed.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#subscribe-to-our-weekly-newsletter"&gt;
  &lt;/a&gt;
  Subscribe to Our Weekly Newsletter
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MOQfQMXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7nzwporajhyvmvlezaa.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MOQfQMXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7nzwporajhyvmvlezaa.PNG" alt="Weekly Newsletter of SurajOnDev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Subscribe &lt;a href="https://4qrqcv1momr.typeform.com/to/RVoZX0uD"&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#benefit-of-newsletter"&gt;
  &lt;/a&gt;
  Benefit of Newsletter
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Driving Traffic Back to your website&lt;/li&gt;
&lt;li&gt;Informing about new product&lt;/li&gt;
&lt;li&gt;Building loyal followers&lt;/li&gt;
&lt;li&gt;Building one-to-one relation with your followers&lt;/li&gt;
&lt;li&gt;And Many More&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#recipe-for-a-great-newsletter"&gt;
  &lt;/a&gt;
  Recipe for a great newsletter
&lt;/h1&gt;

&lt;p&gt;As the saying &lt;strong&gt;Content is King&lt;/strong&gt;. If your newsletter values the time of the user with useful content then your newsletter will grow. I have read the article where bloggers used to send a random newsletter without any useful value to their users, this led to many unsubscribed and less opening rate. After changing to the content-oriented newsletter, they have seen growth in their newsletter in terms of opening rate, less unsubscribe rate and more subscribers count.&lt;/p&gt;

&lt;p&gt;So first thing is that your newsletter must provide value to your users.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#points-to-consider"&gt;
  &lt;/a&gt;
  Points to consider
&lt;/h1&gt;

&lt;p&gt;When you have decided to start a developer newsletter, then you should consider the following points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Your Audience&lt;/strong&gt;: To whom you are sending, their needs, and what they expect from you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: What is the goal of your newsletter? It can be generating web traffic, more sales, providing information, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;: Content that will engage your users. It can be blog post links, exclusive content, promotional deals, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Frequency&lt;/strong&gt;: What will be the frequency of your newsletter? It can be daily, weekly, monthly, quarterly, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#websites"&gt;
  &lt;/a&gt;
  Websites
&lt;/h1&gt;

&lt;p&gt;Many websites can help you in creating, managing, marketing, and sending the newsletter to your users.&lt;br&gt;
Here is popular to try out:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getrevue"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.getrevue.co/"&gt;GetRevue&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Revue makes it easy for writers and publishers to send editorial newsletters — and get paid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#mailchimp"&gt;
  &lt;/a&gt;
  &lt;a href="https://mailchimp.com/"&gt;Mailchimp&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Mailchimp is the All-In-One integrated marketing platform for small businesses, to grow their business on your terms. It's easy to use - start for free today!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sendinblue"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.sendinblue.com/"&gt;Sendinblue&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Sendinblue is the smartest and most intuitive platform for growing businesses. Thrive digitally as we guide your business with the right marketing &amp;amp; sales tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#getresponse"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.getresponse.com/"&gt;GetResponse&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;GetResponse offers an online platform for email marketing software, landing page creator, webinars hosting, and much more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#stripo"&gt;
  &lt;/a&gt;
  &lt;a href="https://stripo.email/"&gt;Stripo&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Stripo provides email builder solutions for multiple industries and teams · Rich integrations with the most popular email systems and clients.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#weekly-newsletter-of-surajondev"&gt;
  &lt;/a&gt;
  Weekly  Newsletter of SurajOnDev
&lt;/h1&gt;

&lt;p&gt;I am very glad to announce that I am going to start a newsletter that will send to you on weekly basis mostly on Friday.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MOQfQMXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7nzwporajhyvmvlezaa.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MOQfQMXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7nzwporajhyvmvlezaa.PNG" alt="Weekly Newsletter of SurajOnDev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-will-get"&gt;
  &lt;/a&gt;
  What You will get?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read of the Week&lt;/strong&gt;: 5 best articles hand-picked by myself from different platforms. This article will be developer, self-growth, and productivity-oriented.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tool of the Week&lt;/strong&gt;: A resource or tool link that will help in easing your work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Our latest blog post&lt;/strong&gt;: Latest 3 blog post from SurajOnDev that is me.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&lt;strong&gt;Free eBook and Resources&lt;/strong&gt;: Occasionally you will get free eBook that are by developers and for developers.&lt;/p&gt;

&lt;p&gt;If this excites you then make sure to subscribe it as the very first issue is coming this weekend.&lt;/p&gt;

&lt;p&gt;Subscribe &lt;a href="https://4qrqcv1momr.typeform.com/to/RVoZX0uD"&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;I hope this article will help in kickstarting a newsletter of your own. This was a quick guide to think about starting a newsletter with the website to kickstart.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is the very first blog post of the Developer Newsletter series. We are going to discuss more newsletters in the coming days. So follow me to get an update quickly.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Serverless at (Team) Scale </title>
      <author>AJ Stuyvenberg</author>
      <pubDate>Tue, 29 Jun 2021 13:16:20 +0000</pubDate>
      <link>https://dev.to/aws-builders/serverless-at-team-scale-a8</link>
      <guid>https://dev.to/aws-builders/serverless-at-team-scale-a8</guid>
      <description>&lt;p&gt;One of the great aspects of building Serverless applications is that it's pretty dang easy to get started. You can plop down five lines of yaml in your framework of choice, and deploy a full endpoint comprising an API Gateway, a route, a Lambda function and trigger, IAM role and policy, AND even logging. And the best part is that it's massively scalable. You don't need to deploy a load balancer, understand how a reverse-proxy works, or learn how to set up syslog. You can just push code!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1k3Vj43I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpriaof6djg65ovxem1m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1k3Vj43I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpriaof6djg65ovxem1m.png" alt="5 lines of YAML to start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And yet somehow, so many of our &lt;code&gt;serverless.yml&lt;/code&gt; files come out looking more like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JI76wQQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvfkaf80o3j6phzvjjmz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JI76wQQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvfkaf80o3j6phzvjjmz.png" alt="2500 lines of YAML to end"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CloudFormation is great! Seriously, this post is not thrashing CloudFormation. It does so much! It manages the state of the services you're configuring, it understands how to resolve dependencies between cloud pieces, and provides a reliable, deterministic way to provision infrastructure. &lt;em&gt;However&lt;/em&gt; - As your Serverless usage ramps up, you'll often find the complexity, size, and subsequent deploy times of your applications grows very quickly.&lt;/p&gt;

&lt;p&gt;Primarily this is due to the fact that your application consumes or provisions numerous AWS resources. This in itself is not a bad thing, the Serverless mantra is to prefer managed services over custom solutions! However, you'll often find your template(s) include a bunch of resources. When you deploy these templates CloudFormation needs to construct a directed, acyclic graph of resources, and check the configuration of each resource before moving on. This takes a long time, upwards of 20 minutes in some cases. These deployment times are challenging as the vast majority (&amp;gt; 90%) of your deployments will only touch the actual business configuration (Lambda function code) for your app!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OFrEBcnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm6066n13rj46bponw7w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OFrEBcnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm6066n13rj46bponw7w.jpeg" alt="cartoon graph showing massive deploy times for anything useful"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you grow, you'll also want to solve new business problems with Serverless. This leads to new stacks, and often presents an issue - how does one share infrastructure between Serverless stacks? More specifically, frequently shared infrastructure like cognito pools, VPCs, or API Gateways. You may even run into the dreaded 500 resources per CloudFormation stack error!&lt;/p&gt;

&lt;p&gt;Although it's tempting to reach for a &lt;a href="https://www.npmjs.com/package/serverless-plugin-split-stacks"&gt;plugin&lt;/a&gt; which can split stacks into smaller stacks, that's only going to &lt;em&gt;increase&lt;/em&gt; your deployment times (not to mention overall complexity). It's time to split stacks, but the right answer is not to split one giant stack programmatically. The answer is to &lt;em&gt;split your infrastructure from your code, intentionally&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To successfully scale your Serverless teams and deployments, you need to divide infrastructure from code, use CloudFormation Outputs to share resources, and leverages SSM to keep non-CloudFormation tools like Terraform in sync.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#divide-and-conquer-your-business-domains-in-the-cloud"&gt;
  &lt;/a&gt;
  Divide and conquer your business domains in the cloud
&lt;/h2&gt;

&lt;p&gt;Specifically, split your long-lived and/or shared infrastructure from the resources you change frequently.&lt;/p&gt;

&lt;p&gt;Frequently changed resources are generally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lambda function code &amp;amp; configuration&lt;/li&gt;
&lt;li&gt;API Gateway configuration (unless you're using a shared gateway or mono-lambda pattern)&lt;/li&gt;
&lt;li&gt;DynamoDB table (unless it's shared, which I don't typically recommend)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Long-lived infrastructure are things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cognito configuration&lt;/li&gt;
&lt;li&gt;VPCs&lt;/li&gt;
&lt;li&gt;API Gateways (if they are shared, or you're using a mono-lambda pattern)&lt;/li&gt;
&lt;li&gt;EventBridge&lt;/li&gt;
&lt;li&gt;SNS topics&lt;/li&gt;
&lt;li&gt;Kinesis Producers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key takeaway here is to move your shared, long term, slowly-changing infrastructure into a separate stack from your domain-specific, often-updated business logic &amp;amp; configuration. This will reduce the cognitive overhead of logic changes, limit bug blast radius, and perhaps most relevant for developers like myself - &lt;em&gt;drastically&lt;/em&gt; cut down on deployment time. If you haven't read my post about how to cut that down even further, check out &lt;a href="https://dev.to/aws-builders/developing-against-the-cloud-55o4/stats"&gt;developing against the cloud&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#warning-signs-which-indicate-your-stacks-are-too-large"&gt;
  &lt;/a&gt;
  Warning signs which indicate your stacks are too large
&lt;/h2&gt;

&lt;p&gt;The biggest sign you need to split your infrastructure into new stacks is if you find yourself violating the Infrastructure &lt;a href="https://en.wikipedia.org/wiki/Law_of_Demeter"&gt;Law of Demeter&lt;/a&gt;. That is to say - the Lambda function which run your business logic are greater than one hop from the infra you provision in the same stack.&lt;/p&gt;

&lt;p&gt;Beyond that, there are several other code smells which, when you catch a whiff, warn you it's time to split your infra from your code. Namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your serverless.yml file is greater than a few hundred-ish lines&lt;/li&gt;
&lt;li&gt;You've got more than a lambda function, dynamo table, and maybe a DDB stream-based function in your stack&lt;/li&gt;
&lt;li&gt;You're trying to decide if you should add a new business domain into a stack purely because a database table, bucket, or vpc is set up in the existing stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A clean and scalable way to share resources between stacks is with &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html"&gt;CloudFormation Outputs&lt;/a&gt;. Outputs let you share arbitrary primitives across stacks within the same AWS Account. You can declare these inside your &lt;code&gt;serverless.yml&lt;/code&gt; in the &lt;code&gt;resources&lt;/code&gt; block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Okay, now we're writing raw CloudFormation&lt;/span&gt;
  &lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;PersonasTableArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The ARN for the Persona's Table&lt;/span&gt;
        &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Fn::GetAtt'&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;personasTable&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Arn&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# This could be a string, but I'm using a GetAtt as that seems more realistic&lt;/span&gt;
        &lt;span class="na"&gt;Export&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:service}:${opt:stage}:PersonasTableArn&lt;/span&gt; &lt;span class="c1"&gt;# Export name must be *unique* across all outputs for a region. This name is what you'll import in other stacks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you'll use the &lt;code&gt;Export&lt;/code&gt; name in another stack to consume the output with the &lt;code&gt;${cf:output_name}&lt;/code&gt; syntax (documentation &lt;a href="https://www.serverless.com/framework/docs/providers/aws/guide/variables/"&gt;here&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;PERSONAS_TABLE_ARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${cf:OtherService:${opt:stage}:PersonasTableArn}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can learn more about cross-stack references &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-crossstackref.html"&gt;here&lt;/a&gt;. Here's a more detailed &lt;a href="https://www.serverless.com/framework/docs/providers/aws/guide/variables#reference-cloudformation-outputs"&gt;reference&lt;/a&gt; for Serverless Framework projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes-on-terraform-and-other-noncloudformation-systems"&gt;
  &lt;/a&gt;
  Notes on Terraform, and other non-CloudFormation systems
&lt;/h2&gt;

&lt;p&gt;It's also common to reconcile Serverless with your existing IaC tools, like Terraform. If you do use Terraform, I'd recommend adhering to the same principles above. Namely, rely on Terraform to provision your long-lived, seldom-changed infrastructure. Then use SAM, Serverless Framework, or whatever you prefer for rapid code deployments.&lt;/p&gt;

&lt;p&gt;Terraform doesn't rely on CloudFormation. Instead, it offers to store state in an plethora of backends (often an S3 bucket), which means you'll need to share resource identifiers manually, instead of using CloudFormation Outputs. The easiest option I've found is to rely on AWS Systems Manager &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html"&gt;(SSM)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you use Terraform to provision something like a Cognito pool, or a shared SQS Queue, you'll need to publish the ARN or name into SSM using the &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ssm_parameter"&gt;Terraform SSM parameter resource&lt;/a&gt;. Then you can consume them in Serverless apps with the &lt;code&gt;${ssm:...}&lt;/code&gt; &lt;a href="https://www.serverless.com/framework/docs/providers/aws/guide/variables#reference-variables-using-the-ssm-parameter-store"&gt;reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Occasionally you'll find yourself needing to share resources &lt;em&gt;FROM&lt;/em&gt; a CloudFormation stack &lt;em&gt;TO&lt;/em&gt; a Terraform project. In that case, I recommend you try the &lt;a href="https://www.npmjs.com/package/serverless-ssm-publish-plugin"&gt;serverless-ssm-publish plugin&lt;/a&gt;. This will allow you to publish to SSM upon deployment of your infrastructure stacks, and then consume them in Terraform.&lt;/p&gt;

&lt;p&gt;The downside of mixing the two, and more generally using SSM to maintain cloud state, is that there's no dependency resolution. One must be careful to ensure your Terraform projects push data to SSM before consuming them in Serverless apps, and vice-versa.&lt;/p&gt;

&lt;p&gt;Regardless if you choose to keep your entire IaC configurations in Serverless, CloudFormation, Terraform, or anything else - beyond a certain scale, you'll want to separate infra from app logic. This will keep cognitive overhead per deployment low, limit your deployment blast radius, and cut down on that ever-important deployment time.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>8 Ultimate ressources for learning Web Dev in 2021 #2</title>
      <author>CodeOzz</author>
      <pubDate>Tue, 29 Jun 2021 12:59:15 +0000</pubDate>
      <link>https://dev.to/codeozz/8-ultimate-ressources-for-learning-web-dev-in-2021-2-3le4</link>
      <guid>https://dev.to/codeozz/8-ultimate-ressources-for-learning-web-dev-in-2021-2-3le4</guid>
      <description>&lt;p&gt;Hey friends ! I'm sharing with you a lot of ressources about web developper that will help you to improve your skills and save your time ! (for the second time !)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript 🖥️
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#operator"&gt;
  &lt;/a&gt;
  Operator
&lt;/h4&gt;

&lt;p&gt;A nice recap about all Javascript operator (will you learn new one truly !)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.joshwcomeau.com/operator-lookup/"&gt;https://www.joshwcomeau.com/operator-lookup/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#operator"&gt;
  &lt;/a&gt;
  Operator
&lt;/h4&gt;

&lt;p&gt;You want to create a nice graph for your documentation in markdown ? Documentation is very very important in any project !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mermaid-js.github.io/mermaid/"&gt;https://mermaid-js.github.io/mermaid/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS 🎨
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#pattern"&gt;
  &lt;/a&gt;
  Pattern
&lt;/h4&gt;

&lt;p&gt;A lot of CSS pattern that is very usefull ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://csslayout.io/patterns/"&gt;https://csslayout.io/patterns/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#all-css-reference"&gt;
  &lt;/a&gt;
  All CSS Reference
&lt;/h4&gt;

&lt;p&gt;Website that gather all css properties ! very usefull if you need to check a property fastly !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cssreference.io/"&gt;https://cssreference.io/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flexbox"&gt;
  &lt;/a&gt;
  Flexbox
&lt;/h4&gt;

&lt;p&gt;You want to learn flexbox ? Go to this !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.samanthaming.com/flexbox30/"&gt;https://www.samanthaming.com/flexbox30/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML 🔍
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#dom-event"&gt;
  &lt;/a&gt;
  DOM Event
&lt;/h4&gt;

&lt;p&gt;You have trouble or you want to re-learn dom event ? this ressource is very usefull, it's an interactive dom event simulator online !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://domevents.dev/"&gt;https://domevents.dev/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others 📌
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#semantic-version"&gt;
  &lt;/a&gt;
  Semantic version
&lt;/h4&gt;

&lt;p&gt;For all developers, semantic versionning is very important when you are creating and maintaining a project !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://zellwk.com/blog/semantic-versioning/"&gt;https://zellwk.com/blog/semantic-versioning/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#simple-icon"&gt;
  &lt;/a&gt;
  Simple Icon
&lt;/h4&gt;

&lt;p&gt;Developer are not designer ! when we need some graphical resource, we lost our time ! This resource share a lot of icon that you can use !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://simpleicons.org/"&gt;https://simpleicons.org/&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
  </channel>
</rss>
