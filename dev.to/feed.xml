<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Flask - A list of useful “HOW TO’s”</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 22 Dec 2020 19:27:02 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-a-list-of-useful-how-to-s-42m7</link>
      <guid>https://dev.to/sm0ke/flask-a-list-of-useful-how-to-s-42m7</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This article presents a shortlist with useful hints and features that might help developers code faster a &lt;strong&gt;Flask&lt;/strong&gt; project. For newcomers, &lt;strong&gt;Flask&lt;/strong&gt; is a lightweight WSGI web application framework designed to get started quickly and easily, with the ability to scale up to complex applications.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! &lt;strong&gt;Content provided by &lt;a href="https://appseed.us/?ref=dev"&gt;AppSeed&lt;/a&gt;&lt;/strong&gt; - a platform used by many developers across the globe. TL;DR;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;1# - How to code a super simple App in Flask&lt;/li&gt;
&lt;li&gt;2# - How to structure your project&lt;/li&gt;
&lt;li&gt;3# - How to enable DEBUG&lt;/li&gt;
&lt;li&gt;4# - How to set up SQLAlchemy&lt;/li&gt;
&lt;li&gt;5# - How to use the Flask CLI&lt;/li&gt;
&lt;li&gt;6# - How to migrate a Database&lt;/li&gt;
&lt;li&gt;7# - How to define and use a form&lt;/li&gt;
&lt;li&gt;8# - How to implement authentication - Flask-Login&lt;/li&gt;
&lt;li&gt;9# - How to read POST data&lt;/li&gt;
&lt;li&gt;10# - How to redirect in Flask&lt;/li&gt;
&lt;li&gt;11# - Logging in Flask&lt;/li&gt;
&lt;li&gt;12# - How to return JSON in Flask&lt;/li&gt;
&lt;li&gt;13# - How to enable CORS&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Ok, let's get back to the real content - the first one is pretty basic and explains how to code a minimal Flask app in less than 1 minute (you need to type fast and have Python3 installed).  &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-flask-a-minimal-app" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1# - Flask, a minimal app&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Open a terminal and install Flask using PIP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Flask
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Use your preferred editor to create a file called &lt;code&gt;hello.py&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Hello from Flask!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once the file is saved, let's start the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;env &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hello.py flask run
 &lt;span class="k"&gt;*&lt;/span&gt; Serving Flask app &lt;span class="s2"&gt;"hello"&lt;/span&gt;
 &lt;span class="k"&gt;*&lt;/span&gt; Running on http://127.0.0.1:5000/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By visiting the app in the browser we should see "Hello from Flask" message.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-how-to-structure-your-project" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2# - How to structure your project&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Being such a lightweight framework, &lt;strong&gt;Flask&lt;/strong&gt; comes with great flexibility regarding the codebase structure of a project. The one suggested in this article has been used in many Flask starters generated by the AppSeed platform but we are pretty sure there are many other good configurations published on Github or private blogs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt; PROJECT ROOT &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   |
   |-- app/__init__.py
   |-- app/
   |    |-- static/
   |    |    |-- &amp;lt;css, JS, images&amp;gt;         &lt;span class="c"&gt;# CSS files, Javascripts files&lt;/span&gt;
   |    |
   |    |-- templates/
   |    |    |
   |    |    |-- includes/                 &lt;span class="c"&gt;# Page chunks, components&lt;/span&gt;
   |    |    |    |
   |    |    |    |-- navigation.html      &lt;span class="c"&gt;# Top bar&lt;/span&gt;
   |    |    |    |-- sidebar.html         &lt;span class="c"&gt;# Left sidebar&lt;/span&gt;
   |    |    |    |-- scripts.html         &lt;span class="c"&gt;# JS scripts common to all pages&lt;/span&gt;
   |    |    |    |-- footer.html          &lt;span class="c"&gt;# The common footer&lt;/span&gt;
   |    |    |
   |    |    |-- layouts/                  &lt;span class="c"&gt;# App Layouts (the master pages)&lt;/span&gt;
   |    |    |    |
   |    |    |    |-- base.html            &lt;span class="c"&gt;# Used by common pages like index, UI&lt;/span&gt;
   |    |    |    |-- base-fullscreen.html &lt;span class="c"&gt;# Used by auth pages (login, register)&lt;/span&gt;
   |    |    |
   |    |    |-- accounts/                 &lt;span class="c"&gt;# Auth Pages (login, register)&lt;/span&gt;
   |    |    |    |
   |    |    |    |-- login.html           &lt;span class="c"&gt;# Use layout `base-fullscreen.html`&lt;/span&gt;
   |    |    |    |-- register.html        &lt;span class="c"&gt;# Use layout `base-fullscreen.html`  &lt;/span&gt;
   |    |    |
   |    |  index.html                      &lt;span class="c"&gt;# The default page&lt;/span&gt;
   |    |  page-404.html                   &lt;span class="c"&gt;# Error 404 page (page not found)&lt;/span&gt;
   |    |  page-500.html                   &lt;span class="c"&gt;# Error 500 page (server error)&lt;/span&gt;
   |    |    &lt;span class="k"&gt;*&lt;/span&gt;.html                        &lt;span class="c"&gt;# All other pages provided by the UI Kit&lt;/span&gt;
   |
   |-- requirements.txt
   |
   |-- run.py
   |
   |-- &lt;span class="k"&gt;************************************************************************&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The relevant files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run.py - the entry point used to start the application
requirements.txt - a file that specifies all dependencies (for now is just Flask)&lt;/li&gt;
&lt;li&gt;app - the application folder where we will add our code&lt;/li&gt;
&lt;li&gt;app/&lt;strong&gt;init&lt;/strong&gt;.py - This file is required to let us use the app as a Python Package&lt;/li&gt;
&lt;li&gt;app/static - this folder will contain design assets: JS, CSS, and images.&lt;/li&gt;
&lt;li&gt;templates - the directory with pages, layouts, and components used by Flask to generate some nice pages for us&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Regarding this codebase structure, here is a short list with open-source projects built with a similar files structure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(Free) &lt;a href="https://appseed.us/admin-dashboards/flask-dashboard-dattaable?ref=dev"&gt;Flask Template Datta Able&lt;/a&gt; - open-source Flask dashboard&lt;/li&gt;
&lt;li&gt;(Free) &lt;a href="https://appseed.us/admin-dashboards/flask-boilerplate-dashboard-argon?ref=dev"&gt;Flask Template Argon&lt;/a&gt; - built on top of popular Argon Design&lt;/li&gt;
&lt;li&gt;(Free) &lt;a href="https://appseed.us/apps/flask-apps/flask-pixel-bootstrap-uikit?ref=dev"&gt;Flask Template Pixel UI&lt;/a&gt; - simple Flask starter&lt;/li&gt;
&lt;li&gt;(Free) &lt;a href="https://appseed.us/admin-dashboards/flask-dashboard-volt?ref=dev"&gt;Flask Template Volt&lt;/a&gt; uses an open-source Bootstrap 5 Design&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qSUdbWf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-dashboard-dattaable/master/media/flask-dashboard-dattaable-intro.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qSUdbWf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-dashboard-dattaable/master/media/flask-dashboard-dattaable-intro.gif" alt="Flask - Datta Able template provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-how-to-enable-debug" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3# - How to enable DEBUG&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Sometimes during our development we need to investigate errors in deep by checking the variables values, freeze the application execution and inspect the context or visualize a filtered products list in the user shopping cart. We can achieve this in two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using logs and inject print() statements all over the place&lt;/li&gt;
&lt;li&gt;using a Debugger and gain full control over the app without writing non-functional code in the whole controllers and helpers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flask comes with a &lt;a href="https://flask.palletsprojects.com/en/master/debugging/#the-built-in-debugger"&gt;Built-in Debugger&lt;/a&gt; that allows us to inspect in deep application runtime execution. Flask automatically detects and enable the debugger by scanning the application environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development
&lt;span class="nv"&gt;$ &lt;/span&gt;flask run
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When running from Python code, the app object accepts the debug variable as an argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At this point, app should run in DEBUG more. Another useful option is to use the &lt;strong&gt;debugger toolbar plugin&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Adding an external &lt;a href="https://flask-debugtoolbar.readthedocs.io/en/latest/"&gt;Debugger Toolbar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This plugin provides useful runtime information like HTTP Headers, configuration, rendered templates, and SqlAlchemy queries executed during requests.&lt;/p&gt;

&lt;p&gt;To enable these features is pretty easy. First, we need to install the plugin (via PIP).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;flask-debugtoolbar
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The next step is to use the extension over our Flask app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_debugtoolbar&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DebugToolbarExtension&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# the toolbar is only enabled in debug mode:
&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# set a 'SECRET_KEY' to enable the Flask session cookies
&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;replace with a secret key&amp;gt;'&lt;/span&gt;

&lt;span class="n"&gt;toolbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DebugToolbarExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If your product uses &lt;strong&gt;app-factory pattern&lt;/strong&gt; to construct the Flask application, please use this code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
&lt;span class="c"&gt;# Initialize the Debug Toolbar&lt;/span&gt;
toolbar &lt;span class="o"&gt;=&lt;/span&gt; DebugToolbarExtension&lt;span class="o"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# Make sure the app has DEBUG enable &lt;/span&gt;
app &lt;span class="o"&gt;=&lt;/span&gt; create_app&lt;span class="o"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# Inject the toolbar object in the Flask app object&lt;/span&gt;
toolbar.init_app&lt;span class="o"&gt;(&lt;/span&gt;app&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;For more information related to Debugging in Flask, please access&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/master/debugging/#debugging-application-errors"&gt;Debugging Application Errors&lt;/a&gt; - Flask documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flask-debugtoolbar.readthedocs.io/en/latest/"&gt;Debugger Toolbar&lt;/a&gt; - aka Flask-DebugToolbar module
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#4-how-to-set-up-flasksqlalchemy" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4# - How to set up Flask-SQLAlchemy&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Flask-SQLAlchemy is a wrapper over the popular SQLAlchemy Python toolkit that empowers developers to manage a database using an object-oriented approach.&lt;/p&gt;

&lt;p&gt;The setup required by Flask-SqlAlchemy is minimal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install &lt;/span&gt;flask_sqlalchemy
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once the package is installed, we can use it in the source code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="c1"&gt;# Import SQLAlchemy
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt; 

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Define the database
&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'SQLALCHEMY_DATABASE_URI'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'sqlite:////tmp/test.db'&lt;/span&gt;

&lt;span class="c1"&gt;# Inject SQLAlchemy magic 
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Sample model handled by SqlAlchemy  
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;User %r&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To effectively create &lt;em&gt;User&lt;/em&gt; table in the database, we need to use the Flask CLI (see the next section)  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;More SQLAlchemy resources&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; - toolkit page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/quickstart/"&gt;Flask-SQLAlchemy&lt;/a&gt; - Flask wrapper documentation
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#5-how-to-use-the-flask-cli" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5# - How to use the Flask CLI&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To use the Flask CLI, &lt;code&gt;FLASK_APP&lt;/code&gt; environment variable should point to the application bootstrap script. Once we have this variable present in the working environment, we can launch the Flask console and interact with our application in a different way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app &lt;span class="c"&gt;# adjust to match your entry point&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask shell
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using the CLI we can create the table defined in the previous section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask shell
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; from app import db &lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; db.create_all&lt;span class="o"&gt;()&lt;/span&gt;    &lt;span class="c"&gt;# All tables are created&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using the CLI we can select and update users (or any other defined tables) as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask shell
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; from app import User
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; User.query.all&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;User u&lt;span class="s1"&gt;'admin'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;, &amp;lt;User u&lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/cli/"&gt;Flask CLI&lt;/a&gt; - module documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/cli/#custom-commands"&gt;Define custom commands&lt;/a&gt; - a comprehensive section on this topic&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#6-how-to-migrate-a-database" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6# - How to migrate a Database&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A migration means our database has changed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New table added&lt;/li&gt;
&lt;li&gt;The existing table is updated with a new column&lt;/li&gt;
&lt;li&gt;The type of an existing column has changed. For instance, we have a column that stores 100 characters and we need to extend it to 500.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To safely update the database, we need to "migrate" to the new structure. The Flask plugin that saves us from doing the dirty work is &lt;a href="https://flask-migrate.readthedocs.io/en/latest/"&gt;Flask Migrate&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Flask-Migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To effectively work, Flask-Migrate must be injected in the Flask object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;migrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;- The magic line
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we execute the migration for the first time, we should run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# This will create the migrations folder&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask db init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's update the &lt;strong&gt;User&lt;/strong&gt; model with a new field: &lt;strong&gt;role&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Sample model handled by SqlAlchemy  
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# The new field 
&lt;/span&gt;    &lt;span class="n"&gt;role&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To update the database, two steps are required: generate the SQL according to our change and apply it on the database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generate the SQL&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask db migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Update the Database&lt;/strong&gt; - using the SQL generated in the previous step&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask db upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At this point, we can inspect the table to visualize the presence of the role column and use it in our code.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Resources&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask-migrate.readthedocs.io/en/latest/"&gt;Flask-Migrate&lt;/a&gt; - the official module documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://realpython.com/flask-by-example-part-2-postgres-sqlalchemy-and-alembic/"&gt;Flask – Setting up Postgres, SQLAlchemy, and Alembic&lt;/a&gt; - a nice tutorial on this hot topic&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#7-how-to-define-and-use-a-form" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7# - How to define and use a form&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Flask assists us a lot regarding forms via a dedicated library: flask_wtf/&lt;a href="https://flask-wtf.readthedocs.io/en/stable/form.html"&gt;FlaskForm&lt;/a&gt;. We can easily define, secure, and validate forms using this package.&lt;/p&gt;

&lt;p&gt;Here is the &lt;strong&gt;definition of a Login form&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_wtf&lt;/span&gt;          &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FlaskForm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt;            &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PasswordField&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FlaskForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Username'&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PasswordField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Password'&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As mentioned, FlaskForm comes with re-defined types and validators for the password, mandatory fields check, email, and much more.&lt;/p&gt;

&lt;p&gt;The view (aka the page) that use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ form.username(placeholder="Username") }}
    {{ form.password(placeholder="Password",type="password") }}
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For newcomers, a simplified CSRF mechanism is presented below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Server generates the CRSF Token&lt;/li&gt;
&lt;li&gt;Form is built and sent to the client browser along with the token&lt;/li&gt;
&lt;li&gt;The user fills and submits the form&lt;/li&gt;
&lt;li&gt;The server receives a new POST request and check the CSRF token authenticity&lt;/li&gt;
&lt;li&gt;If the token is not validated request is rejected with a 403 (not authorized) status&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;More resources&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask-wtf.readthedocs.io/en/stable/form.html"&gt;Creating Forms&lt;/a&gt; in Flask&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flask-wtf.readthedocs.io/en/stable/csrf.html"&gt;CSRF Protection in Flask&lt;/a&gt; - how to use it&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#8-how-to-authenticate-using-flasklogin" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8# - How to authenticate using &lt;a href="https://flask-login.readthedocs.io/en/latest/"&gt;Flask-Login&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Flask-Login provides user session management for Flask. It handles the common tasks of logging in, logging out, and remembering users’ sessions.&lt;/p&gt;

&lt;p&gt;Let's highlight the code to integrate Flask-Login in a real application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update your User model&lt;/strong&gt; to inherit the &lt;a href="https://flask-login.readthedocs.io/en/latest/#flask_login.UserMixin"&gt;UserMixin&lt;/a&gt; class. This is necessary because Flask expects a minimum set of handlers to be implemented by the user model: &lt;strong&gt;is_authenticated&lt;/strong&gt;, &lt;strong&gt;is_active&lt;/strong&gt;, &lt;strong&gt;get_id&lt;/strong&gt;. To skip over this work, &lt;strong&gt;UserMixin&lt;/strong&gt; class saves the day for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt;         &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_login&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserMixin&lt;/span&gt;

&lt;span class="c1"&gt;# User model uses UserMixin as parent class 
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="n"&gt;unique&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The next step is to define &lt;strong&gt;user_loader&lt;/strong&gt; a method used by &lt;a href="https://flask-login.readthedocs.io/en/latest/#flask_login.LoginManager"&gt;Login-Manager&lt;/a&gt; to identify the current authenticated user information: id, email and all other fields provided by the User class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# provide login manager with load_user callback
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_loader&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once we have the User table updated in the database, we can successfully login.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The login view&lt;/strong&gt; (aka login page):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...
&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ form.hidden_tag() }}
    {{ form.username(class="form-control") }}
    {{ form.password(class="form-control", type="password") }}

    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign in&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once the user fills username and the password, all information is sent to the server via a POST request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Login  - The controller code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Authenticate user
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/login.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# Declare the login form
&lt;/span&gt;    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoginForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# The information returned to the user
&lt;/span&gt;    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Your cool!"&lt;/span&gt;

    &lt;span class="c1"&gt;# Apply all validations defined in the form
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c1"&gt;# recover form information
&lt;/span&gt;        &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

        &lt;span class="c1"&gt;# recover the user from database using username (unique information)
&lt;/span&gt;        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# If the user is found, validate the password
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="c1"&gt;# BC = BCrypt library 
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_password_hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;# The user is now authenticated
&lt;/span&gt;                &lt;span class="n"&gt;login_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Wrong password. Please try again."&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Unknown user"&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'accounts/login.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The controller flow explained:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local variable &lt;strong&gt;form&lt;/strong&gt; is initialized using the request form (sent by the user)&lt;/li&gt;
&lt;li&gt;If the form is valid (user and password are present) the code extracts the values&lt;/li&gt;
&lt;li&gt;Select the user from the database using the name&lt;/li&gt;
&lt;li&gt;Check the password by comparing the database value with the one provided by the user and hashed by the BCrypt library.&lt;/li&gt;
&lt;li&gt;If all is good, the user session is created via &lt;strong&gt;"login_user()"&lt;/strong&gt; handler&lt;/li&gt;
&lt;li&gt;Error cases are flagged with a message to inform the user what was wrong.&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Flask authentication resources:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask-login.readthedocs.io/en/latest/"&gt;Flask-Login&lt;/a&gt; - the concerned module&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flask-login.readthedocs.io/en/latest/#flask_login.LoginManager"&gt;LoginManager&lt;/a&gt; class definition&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/apps/flask-apps/flask-pixel-bootstrap-uikit?ref=dev"&gt;Flask Pixel UI&lt;/a&gt; - a simple FREE starter with this flow already coded
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NdTZEz6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-pixel-bootstrap-uikit/master/media/flask-pixel-bootstrap-uikit-screen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NdTZEz6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-pixel-bootstrap-uikit/master/media/flask-pixel-bootstrap-uikit-screen.png" alt="Flask - Pixel UI Template, provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#9-how-to-read-post-data" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9# - How to read POST data&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;For newcomers, POST and GET are different methods used to submit information to a server. During a GET request, the variables are appended to the page URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;GET/login.html?user=Biden&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;pass=MAGA2020 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;POST requests uses the request body to bundle the information submitted by the user.&lt;/p&gt;

&lt;p&gt;In both cases, we can easily read POST and GET parameters with Flask via the &lt;a href="https://flask.palletsprojects.com/en/1.1.x/api/#flask.Request"&gt;request&lt;/a&gt; object. Here is a list of request objects that we can refer to extract the information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;request.args&lt;/strong&gt;: the key/value pairs in the URL query string&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;request.form&lt;/strong&gt;: the key/value pairs in the body, from a HTML post form&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;request.json&lt;/strong&gt;: parsed JSON data&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;A real sample&lt;/strong&gt; - used to handle registration flow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/register.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# declare the Registration Form
&lt;/span&gt;    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RegisterForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# request is GET - just display the form
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'accounts/register.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Here we have a POST request
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c1"&gt;# READ information from a POST request
&lt;/span&gt;        &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;email&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As mentioned above, the composite &lt;strong&gt;&lt;a href="https://flask.palletsprojects.com/api/#flask.Request.form"&gt;request.form&lt;/a&gt;&lt;/strong&gt; provides the form fields in key/value pairs bundled in the request body.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;More information on this topic:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/api/#flask.Request.args"&gt;Flask request Args&lt;/a&gt; - object information&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com/questions/10434599/get-the-data-received-in-a-flask-request"&gt;Get the data received in a Flask request&lt;/a&gt; - Related StackOverflow topic&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#10-how-to-redirect-in-flask" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10# - How to redirect in Flask&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is a simple one.  Flask exposes a "redirect" handler to keep us lazy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;redirect&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;not_me&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# redirect to another page
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/register"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# redirect to external page
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://google.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# redirect with HTTP code
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://google.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Resources:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/api/#flask.redirect"&gt;Flask redirect&lt;/a&gt; - handler docs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.fullstackpython.com/flask-redirect-examples.html"&gt;Flask redirect Example&lt;/a&gt; - tutorial provided by Full-Stack Python&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#11-logging-in-flask" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;11# - Logging in Flask&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Flask uses the native Python logging system (no configuration required). To log a message during a request, we need to call the logger interface and set the message we want to be visible in logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Logging is up!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello World!'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By running the app, we should see the logging message in the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;*&lt;/span&gt; Serving Flask app &lt;span class="s2"&gt;"app.py"&lt;/span&gt;
&lt;span class="k"&gt;*&lt;/span&gt; Environment: development
INFO:werkzeug: &lt;span class="k"&gt;*&lt;/span&gt; Running on http://127.0.0.1:5000/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
INFO:flask.app:Logging is up
INFO:werkzeug:127.0.0.1 - - &lt;span class="o"&gt;[&lt;/span&gt;01/Jun/2019 17:03:09] &lt;span class="s2"&gt;"GET / HTTP/1.1"&lt;/span&gt; 200 -
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Logs might be useful when we want to trace runtime errors in production or save other relevant events in the logs for the application owner.  &lt;/p&gt;

&lt;p&gt;The above sample will push the log to the console but we can easily push messages to a file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'app.log'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Logging is up!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello World!'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After a first request, a new file named "app.log" should be created with our log message as content.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Flask logging resources&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/logging/"&gt;Flask Logging&lt;/a&gt; - the official module documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.scalyr.com/blog/getting-started-quickly-with-flask-logging/"&gt;Flask Logging - Get starter quickly&lt;/a&gt; - a nice tutorial.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#12-how-to-return-json" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;12# - How to return JSON&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Flask comes with native support for JSON management via &lt;a href="https://flask.palletsprojects.com/en/1.1.x/api/#flask.json.jsonify"&gt;jsonify&lt;/a&gt; interface. Let's take a look at this self-descriptive sample:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/_get_current_user'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_json&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"from JSON"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The output returned in the browser should be as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"from"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"from JSON"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;Something useful: let's return a registered user using JSON format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/user_json'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_json&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'testme'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Using the user object (without __dict__) will generate a runtime error 
&lt;/span&gt;    &lt;span class="c1"&gt;# TypeError: 'user' is not JSON serializable
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The response should contain all fields defined in the User table:&lt;/p&gt;

&lt;p&gt;{&lt;br&gt;
    "id": "1",&lt;br&gt;
    "username": "testme",&lt;br&gt;
    "email":"&lt;a href="mailto:test@google.com"&gt;test@google.com&lt;/a&gt;"&lt;br&gt;
}&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;More resources:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/api/#flask.json.jsonify"&gt;Flask jsonify&lt;/a&gt; - class documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com/questions/10252010/serializing-class-instance-to-json"&gt;Serializing class instance to JSON&lt;/a&gt; - related StackOverflow topic&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#13-how-to-enable-cors-in-flask" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;13# - How to enable CORS in Flask&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This feature is useful when our Flask backend is consumed by decoupled entities like a mobile UI interface, external systems that push or request the information provided by the Flask backend.&lt;/p&gt;

&lt;p&gt;As usual, Flask has a module for this &lt;a href="https://flask-cors.readthedocs.io/en/latest/"&gt;flask-cors&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;Install the module via PIP
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-U&lt;/span&gt; flask-cors
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's take a look at the sample provided in the official docs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_cors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CORS&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;CORS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello, cross-origin-world!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can also isolate CORS for specific paths like &lt;strong&gt;/api/*:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CORS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"/api/*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"origins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/v1/users"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_users&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"user example"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;CORS Resources&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask-cors.readthedocs.io/en/latest/"&gt;Flask-CORS&lt;/a&gt; - official documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codecademy.com/articles/what-is-cors"&gt;What is CORS&lt;/a&gt; - a tutorial provided by Codecademy&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Thank you! For more resources, please access&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://palletsprojects.com/p/flask/"&gt;Flask&lt;/a&gt; - the official page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/what-is/flask/"&gt;What is Flask&lt;/a&gt; - short introduction to Flask&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.appseed.us/flask-cheat-sheet-and-free-templates-63zo/"&gt;Flask Cheat Sheet&lt;/a&gt; - how to start fast with Flask&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt; - for support and Flask starters
&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Thank you! Btw, my (nick) name is &lt;strong&gt;Sm0ke&lt;/strong&gt; and I'm pretty active also on &lt;a href="https://twitter.com/Sm0keDev"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>flask</category>
      <category>python</category>
      <category>appseed</category>
    </item>
    <item>
      <title>🦀 Rust Reviewed: Is the hype justified? 🦀</title>
      <author>Basti Ortiz (Some Dood)</author>
      <pubDate>Tue, 22 Dec 2020 17:49:45 +0000</pubDate>
      <link>https://dev.to/somedood/rust-reviewed-is-the-hype-justified-1pa1</link>
      <guid>https://dev.to/somedood/rust-reviewed-is-the-hype-justified-1pa1</guid>
      <description>&lt;p&gt;Needless of a lengthy introduction, &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a systems-level programming language that puts "performance", "reliability", and "productivity" at the forefront of its core values. Namely, its most notable language features include memory safety guarantees with the &lt;a href="https://doc.rust-lang.org/rust-by-example/scope.html"&gt;ownership model&lt;/a&gt;, a standardized package manager with &lt;a href="https://doc.rust-lang.org/cargo/"&gt;Cargo&lt;/a&gt;, "zero-cost abstractions" with the &lt;a href="https://doc.rust-lang.org/std/"&gt;standard library&lt;/a&gt;, powerful &lt;a href="https://doc.rust-lang.org/book/ch16-00-concurrency.html"&gt;multi-threading primitives and idioms&lt;/a&gt;, and low-level interoperability with C/C++.&lt;/p&gt;

&lt;p&gt;It comes to no surprise, then, that Rust has steadily been on the rise in terms of &lt;a href="https://www.rust-lang.org/production"&gt;adoption&lt;/a&gt; and &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved"&gt;popularity&lt;/a&gt;. In fact, for the fifth consecutive year, Rust has taken the top spot as the "Most Loved Programming Language" according to the &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved"&gt;2020 Stack Overflow Survey&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But is all the hype justified? In this article, I reflect on my experience with Rust in the past year. This includes the golden moments as well as the pain points. Without further ado, let us begin with the golden moments.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-golden-moments" class="anchor"&gt;
  &lt;/a&gt;
  The Golden Moments
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#straightforward-installation-process" class="anchor"&gt;
  &lt;/a&gt;
  Straightforward Installation Process
&lt;/h2&gt;

&lt;p&gt;Perhaps the most significant barrier to entry for any programming language is the development environment. A convoluted toolchain is sure to deter anyone new to the language. I learned this the hard way a few years ago when I had to mess with the system &lt;code&gt;PATH&lt;/code&gt; and other environment variables just to compile my first Java program.&lt;/p&gt;

&lt;p&gt;Much to my relief, Rust does not suffer from this issue. Thanks to the &lt;a href="https://rustup.rs/"&gt;rustup&lt;/a&gt; toolchain utility, the installation process could not be any simpler for a systems-level programming language. Although the Rust compiler depends on platform-specific build systems, this extra step should not be too much of a hassle given that the installation process for these external dependencies are also relatively straightforward. The &lt;a href="https://visualstudio.microsoft.com/downloads/"&gt;Visual Studio Build Tools for Windows&lt;/a&gt;, for example, provides an automated installer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#familiar-development-workflow" class="anchor"&gt;
  &lt;/a&gt;
  Familiar Development Workflow
&lt;/h2&gt;

&lt;p&gt;When it comes to project development, the Cargo package manager makes dependency management and build system configuration an absolute breeze. Noting that Rust is a systems-level programming language, it surprised me how simple it was to get a project up and running without any boilerplate and prior configuration. Quite literally, &lt;em&gt;it just works!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As for dependency management, I felt at home when I pulled in external packages. The &lt;a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html"&gt;workflow&lt;/a&gt; was strikingly similar to &lt;a href="https://nodejs.dev/learn/an-introduction-to-the-npm-package-manager"&gt;that in Node.js&lt;/a&gt;: step 1, list down the package name in the &lt;a href="https://doc.rust-lang.org/cargo/reference/manifest.html"&gt;project manifest&lt;/a&gt;; step 2, indicate the version number (with respect to &lt;a href="https://semver.org/"&gt;semantic versioning&lt;/a&gt;); step 3, &lt;a href="https://doc.rust-lang.org/reference/items/use-declarations.html"&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt; the dependency; step 4, compile the project; step 5, profit. Indeed, Rust upholds its promise of "productivity" with this simple workflow.&lt;/p&gt;

&lt;p&gt;For comparison, this was totally unlike my initial experience with C++. Before I was able to pull in dependencies, I had to dive deep into the rabbit hole of precompiled headers, static libraries, dynamic libraries, linkers, and Git submodules. Needless to say, it was not the funnest experience, especially when I just wanted to hack around the language.&lt;/p&gt;

&lt;p&gt;But to be fair to C++, the language does not come with a standardized package manager out of the box. Personally speaking, this is exactly what makes Rust all the more attractive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#excellent-documentation" class="anchor"&gt;
  &lt;/a&gt;
  Excellent Documentation
&lt;/h2&gt;

&lt;p&gt;Perhaps the most praiseworthy aspect of the Rust ecosystem is its commitment to clear and accurate documentation. Nowhere is this more evident than in the official language documentation. Indeed, the Rust team leads by example in this regard.&lt;/p&gt;

&lt;p&gt;In order to avoid having a bloated, monolithic website for all things about Rust, the Rust team separated the language documentation across &lt;a href="https://www.rust-lang.org/learn"&gt;multiple e-books&lt;/a&gt; that cover specific areas of interest. To name a few in particular:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Area of Interest&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://doc.rust-lang.org/book/title-page.html"&gt;The Rust Book&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;First Principles&lt;/td&gt;
&lt;td&gt;Serves as the introduction to Rust.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://doc.rust-lang.org/stable/rust-by-example/"&gt;Rust by Example&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Applied First Principles&lt;/td&gt;
&lt;td&gt;Illustrates the practical usage of the language's features.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://doc.rust-lang.org/std/index.html"&gt;The Standard Library&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Standard Library&lt;/td&gt;
&lt;td&gt;Serves as the official reference to the standard library.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://doc.rust-lang.org/cargo/index.html"&gt;The Cargo Book&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Cargo&lt;/td&gt;
&lt;td&gt;Serves as the official reference for all things about the Cargo package manager.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://doc.rust-lang.org/reference/introduction.html"&gt;The Rust Reference&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Full Language Documentation&lt;/td&gt;
&lt;td&gt;Serves as the more "complete" version of the Rust Book.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://doc.rust-lang.org/nomicon/index.html"&gt;The Rustonomicon&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Unsafe Rust&lt;/td&gt;
&lt;td&gt;Serves as the official guide to the "dark arts" of unsafe Rust.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Indeed, all of these e-books are a treasure trove of information. They strike the perfect balance between approachability, reasonability, and extensiveness. When a topic deems it necessary, the writing style shifts to a drier, more technical tone. Otherwise, the documentation tends to be a playfully engaging reading experience with colorful examples.&lt;/p&gt;

&lt;p&gt;Furthermore, &lt;a href="https://doc.rust-lang.org/rust-by-example/meta/doc.html"&gt;documentation is itself a core language feature!&lt;/a&gt; Using the &lt;a href="https://doc.rust-lang.org/cargo/commands/cargo-doc.html"&gt;&lt;code&gt;doc&lt;/code&gt; subcommand&lt;/a&gt;, Cargo can extract all &lt;a href="https://doc.rust-lang.org/reference/comments.html#doc-comments"&gt;doc-comments&lt;/a&gt; in the codebase. It then uses this information to automatically generate static web pages for documentation. In fact, for every package published to &lt;a href="https://crates.io/"&gt;crates.io&lt;/a&gt; (Rust's package registry), &lt;a href="https://docs.rs/"&gt;docs.rs&lt;/a&gt; hosts the corresponding static web pages generated by &lt;code&gt;cargo doc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This extremely valuable feature allowed me to confidently explore and navigate the interfaces of the libraries I use for my projects. To me, the best part about it is the fact that &lt;code&gt;cargo doc&lt;/code&gt; generates the same web page structure for all packages. Eventually, I found myself comfortably accustomed to the familiar documentation format—regardless of the current library. At one point, I even spent almost half a day just scrolling through the documentation for the various methods of each &lt;a href="https://doc.rust-lang.org/std/collections/index.html"&gt;standard collection type&lt;/a&gt; in the Standard Library.&lt;/p&gt;

&lt;p&gt;Once again, this attests to Rust's promise of "productivity". Although the documentation format may seem boring and repetitive to some, it at least communicates information about interfaces in a standardized manner. Over time, every Rustacean learns how to treat &lt;a href="https://docs.rs/"&gt;docs.rs&lt;/a&gt; as their second home.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rewiring-the-brain-to-design-better-software" class="anchor"&gt;
  &lt;/a&gt;
  Rewiring the Brain to Design Better Software
&lt;/h2&gt;

&lt;p&gt;It is no secret that the Rust ownership model practically makes certain design patterns and data structures difficult to deal with. One of the most notorious examples is the humble linked list. If we were to quickly run a Google search for &lt;a href="https://www.google.com/search?q=rust+linked+list"&gt;"rust linked list"&lt;/a&gt;, we would find a plethora of resources describing the fundamental nuances of the ownership model.&lt;/p&gt;

&lt;p&gt;To some, this is an incredible barrier of the language. Personally, I would argue otherwise: the design patterns and idioms of Rust help us rewire our brains to design better software. This is not to say that data structures like linked lists are inherently evil, but there are valid reasons why it is difficult to deal with in the first place.&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;With that said, over the past year, I have come to accept the reality that if I end up with an architecture that frequently conflicts with the Rust compiler, there is most likely something worth reworking in my current implementation. This is apparently a common mindset among Rustaceans: &lt;em&gt;don't fight the compiler&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sure enough, following this advice yielded great results! In one of my projects, I found myself fighting the compiler because I insisted on implementing a callback-based interface, a design pattern that was innocuous in JavaScript. This was fine in many cases, but most of my troubles came from the fact that I required mutable access to borrowed data. I used all sorts of hacks and workarounds (such as the &lt;a href="https://doc.rust-lang.org/book/ch15-05-interior-mutability.html"&gt;interior mutability pattern&lt;/a&gt;), but thankfully in the end, none of them worked.&lt;/p&gt;

&lt;p&gt;When I finally conceived of a better architecture for the project&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;, I realized the truth and wisdom behind the Rustacean Mindset. If I had pushed through with my original architecture, I would have surely ended up with an unmaintainable mess of a project with hundreds of lines of "spaghetti code", all coupled and tangled up in more ways than one.&lt;/p&gt;

&lt;p&gt;Instead, I allowed the idioms of Rust to rewire my brain. In the end, I arrived at a better architecture for my project. Thinking like a Rustacean opened my eyes to see better software design patterns that are not necessarily exclusive to Rust itself. Indeed, &lt;em&gt;don't fight the compiler&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-pain-points" class="anchor"&gt;
  &lt;/a&gt;
  The Pain Points
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#not-the-most-beginnerfriendly-language" class="anchor"&gt;
  &lt;/a&gt;
  Not the Most Beginner-Friendly Language
&lt;/h2&gt;

&lt;p&gt;I won't sugarcoat anything here: Rust is one &lt;strong&gt;formidable beast&lt;/strong&gt; of a programming language. This invites two possible interpretations. The first of which is that Rust is a powerful language. As for the other, Rust is a painfully difficult language to deal with. Sure enough, both of these are true.&lt;/p&gt;

&lt;p&gt;The absolute power of Rust comes from the juxtaposition of its relatively high-level syntax and its low-level capabilities. Compared to its peers, Rust is truly a breath of fresh air. Many particularly cite the verbosity of C++ as a case for Rust's superior expressiveness. I mean, have you seen &lt;a href="https://en.wikipedia.org/wiki/Template_metaprogramming"&gt;template metaprogramming code in C++&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Although Rust is indeed more concise and expressive than its peers, it does not mean it is free from shortcomings. The low-level nature of its design makes some design decisions and complexities a necessary trade-off. A prime example is the ownership model and the concept of object lifetimes.&lt;/p&gt;

&lt;p&gt;Without going too deep into the weeds, since the beginning, the Rust team envisioned a truly high-level language with performance comparable to that of C/C++. This meant that it was against Rust's core philosophy to impose a language runtime with a garbage collector. Thus, each object in Rust was responsible over their own memory. And hence, the ownership model was born. To put it simply, the ownership model is basically a &lt;a href="https://doc.rust-lang.org/rust-by-example/scope.html"&gt;memory management contract&lt;/a&gt; that Rust upholds in order to avoid &lt;a href="https://en.wikipedia.org/wiki/Memory_leak"&gt;memory leaks&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Null_pointer"&gt;null pointers&lt;/a&gt;.&lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_IcaPsL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.rust-lang.org/images/2020-12-rust-survey-2020/topic-difficulty-ratings.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_IcaPsL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.rust-lang.org/images/2020-12-rust-survey-2020/topic-difficulty-ratings.svg" alt="2020 Rust Survey: Topic Difficulty Ratings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This feature alone justifies the low-level power of Rust, yet at the same time, it is also the #1 source of confusion for many Rustaceans according to the recent &lt;a href="https://blog.rust-lang.org/2020/12/16/rust-survey-2020.html#improved-learnability"&gt;2020 Rust Survey&lt;/a&gt;. The results show that as many as 61.4% of the respondents agreed that object lifetimes were either "tricky" or "very difficult" to learn.&lt;/p&gt;

&lt;p&gt;Indeed, from my experience, this was the trickiest concept to grasp, even with prior knowledge of C++ patterns. Though, to be fair to Rust, this is not entirely the language's fault. Any language that deals with low-level operations inevitably has to introduce complexity into its abstractions.&lt;/p&gt;

&lt;p&gt;With that said, I cannot advocate Rust as a beginner's first programming language for the same reasons I would not advocate C/C++. Rust is too low-level to be beginner-friendly. Although it is not the worst language to start with, it is nonetheless a "very difficult" language to grasp, much less master. One would be better off learning the fundamentals of programming through Python or JavaScript first before diving deep into the world of systems-level programming.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rich-ecosystem-of-maturing-packages" class="anchor"&gt;
  &lt;/a&gt;
  Rich Ecosystem of Maturing Packages
&lt;/h2&gt;

&lt;p&gt;Over the years, &lt;a href="https://crates.io/"&gt;crates.io&lt;/a&gt; has accumulated over 50,000+ packages. Among the most beloved are &lt;a href="https://crates.io/crates/rand"&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/a&gt; (for random number generation), &lt;a href="https://crates.io/crates/syn"&gt;&lt;code&gt;syn&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://crates.io/crates/quote"&gt;&lt;code&gt;quote&lt;/code&gt;&lt;/a&gt; (for macro-related utilities), &lt;a href="https://crates.io/crates/actix-web"&gt;&lt;code&gt;actix-web&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://crates.io/crates/rocket"&gt;&lt;code&gt;rocket&lt;/code&gt;&lt;/a&gt; (for web server frameworks), &lt;a href="https://crates.io/crates/piston"&gt;&lt;code&gt;piston&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://crates.io/crates/bevy"&gt;&lt;code&gt;bevy&lt;/code&gt;&lt;/a&gt; (for game development), &lt;a href="https://crates.io/crates/clap"&gt;&lt;code&gt;clap&lt;/code&gt;&lt;/a&gt; (for parsing command-line arguments), and &lt;a href="https://crates.io/crates/serde"&gt;&lt;code&gt;serde&lt;/code&gt;&lt;/a&gt; (for data serialization and deserialization).&lt;/p&gt;

&lt;p&gt;However, despite the richness of the ecosystem, I am still uncertain whether I can definitively say that it is fully "mature". Indeed, many of the packages are considered to be "production-ready". But, if we were to explore the list of the &lt;a href="https://crates.io/crates?sort=downloads"&gt;most downloaded Rust packages&lt;/a&gt; (as of writing), we would observe that many of them have not been stabilized to (at least) &lt;code&gt;v1.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With respect to semantic versioning, these packages are not yet considered to be "feature-complete" by their authors. One can argue, then, that a significant portion of the entire Rust package registry is not yet "feature-complete". Hence, I assert that Rust enjoys a rich ecosystem of &lt;em&gt;maturing&lt;/em&gt; packages.&lt;/p&gt;

&lt;p&gt;It is worth noting here that I am careful in choosing the word "maturing" over "mature". In most cases, "production-ready" is sufficient, but if Rust intends to accumulate massive market adoption, achieving maturity and stability is a key milestone. This is exactly what makes C/C++ an "immortal language" of sorts. From &lt;a href="https://ffmpeg.org/"&gt;media encoders&lt;/a&gt; to &lt;a href="https://gnupg.org/"&gt;cryptography tools&lt;/a&gt;, the world quite literally runs on C/C++.&lt;/p&gt;

&lt;p&gt;To the community's credit, the 2020 Rust Survey paints a more optimistic picture in regard to &lt;a href="https://blog.rust-lang.org/2020/12/16/rust-survey-2020.html#library-support"&gt;library support&lt;/a&gt;. According to 65.9% of the respondents, there have been "at least some improvement" in the library ecosystem overall. However, GUI programming appears to be the exception, noting that an overwhelming 73.1% of the respondents opined that the ecosystem lacked enough support in this particular application domain.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;With all things considered, I would say that Rust truly lives up to the hype. Just like for any other language, if one were to invest enough time and patience, they would find that Rust is not so bad. After getting over the initial learning hump, everything else becomes much easier.&lt;/p&gt;

&lt;p&gt;The high-level syntax and the zero-cost abstractions are a dynamic duo that makes systems-level programming an absolute breeze. In times where it is otherwise, the excellent language documentation is always there to lift us up. Meanwhile, the Cargo package manager makes dependency management an empowering experience. One only needs to pull in a package to extend low-level functionality.&lt;/p&gt;

&lt;p&gt;On another note, adopting the Rustacean Mindset rewires the brain to think more carefully about certain software design patterns. The ownership model invites us to question the validity of our data structures. Although fighting the compiler &lt;em&gt;will&lt;/em&gt; be an awfully frustrating experience, let us never forget that this is always done in our best interests. When in doubt, we need to step back, breathe, and think. A well-thought solution is always better than "spaghetti code".&lt;/p&gt;

&lt;p&gt;Ironically enough, although a significant portion of the Rust package ecosystem is not yet "feature-complete", this gives me all the more reason to place my bets in the ecosystem. Considering the current capabilities of Rust despite the "limited" ecosystem, the future seems bright for the language.&lt;/p&gt;

&lt;p&gt;Perhaps a decade from now, we will finally be able to crown Rust as an "immortal language" alongside the likes of C/C++. Personally, I am looking forward to that day! But until then, I must say that the Rust hype is indeed justified.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Before I conclude this article, I would like to cordially thank the &lt;a href="https://www.rust-lang.org/governance"&gt;Rust team&lt;/a&gt; for their excellent work on both the language and the community. Without them, we would have none of the innovations we enjoy today in systems-level programming.&lt;/em&gt;&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;To cite one reason, a linked list is considered to be a "last-resort" data structure in Rust primarily due to memory fragmentation and frequent heap allocations. In most cases, &lt;a href="https://doc.rust-lang.org/std/primitive.array.html"&gt;arrays&lt;/a&gt; and &lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"&gt;vectors&lt;/a&gt; are sufficient. &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;Funny story: the "Eureka moment" occurred to me just before I was about to sleep at night. Yes, I was frustratingly restless after that point... 🤦‍♂️ &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;This is done through the use of destructors that run when objects go "out of scope". In C++, this is analogous to the &lt;a href="https://doc.rust-lang.org/rust-by-example/scope/raii.html"&gt;&lt;em&gt;Resource Acquisition is Initialization (RAII)&lt;/em&gt; principle&lt;/a&gt;. &lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>rust</category>
      <category>devjournal</category>
      <category>dx</category>
      <category>reflection</category>
    </item>
    <item>
      <title>That’s a Wrap - HarperDB 2020</title>
      <author>Stephen Goldberg</author>
      <pubDate>Tue, 22 Dec 2020 17:42:16 +0000</pubDate>
      <link>https://dev.to/harperdb/that-s-a-wrap-harperdb-2020-1ji7</link>
      <guid>https://dev.to/harperdb/that-s-a-wrap-harperdb-2020-1ji7</guid>
      <description>&lt;p&gt;Though this year has been quite different for everyone, the team at HarperDB has made great strides from both a product and organization standpoint. Before 2021 arrives, we wanted to take a moment to summarize what we’ve accomplished this year, how we overcame challenges, and what we look forward to next year. HarperDB has an energetic and dynamic team, always looking to stay ahead of the curve. Our product is breaking records on data read and write speeds, simplifying the data pipeline, and changing the way people think about data management as a whole. We launched HarperDB Cloud (our managed and hosted offering) in April, released many product feature updates, and worked with top tier companies to provide innovative solutions on a large scale… it’s all pretty exciting, to say the least. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azQazFng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s5xo0aant296li4am1vg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azQazFng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s5xo0aant296li4am1vg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, there have been challenges; we had to make cuts, reduce costs, and made a lot of difficult decisions. We’ve been working remotely since March, and our team has never been more productive, specifically our development team. The entire HarperDB staff has stayed healthy and stuck together during these times, and we are coming out stronger on the other end. We have a lot to be grateful for, and I think it’s safe to say that HarperDB is currently in the best position we’ve ever been. &lt;/p&gt;




&lt;p&gt;We asked each of our team members to share a few sentences about how this year has been, what they worked on, and what they’ll be focusing on next year: &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kyle-bernhardy-cofounder-amp-cto" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/kylebernhardy"&gt;Kyle Bernhardy&lt;/a&gt;, Co-Founder &amp;amp; CTO
&lt;/h3&gt;

&lt;p&gt;Both personally &amp;amp; professionally this year we had to navigate experiences we have never faced before.  Building a cloud platform from the ground up; replacing our storage engine with a net new technology; facing the uncertainty of a pandemic; bringing our team remote in the middle of a major development cycle; maintaining company culture, connection &amp;amp; collaboration; delivering solutions &amp;amp; support to our customers &amp;amp; community; continuing to innovate.  These are just some of the challenges from 2020. Facing these challenges created the opportunities of a vastly more accessible, performant product with a sizzling front end &lt;a href="https://studio.harperdb.io/sign-up"&gt;Studio&lt;/a&gt;, a resilient team that has come together and leaned into individual strengths to bolster each other with creativity, intelligence &amp;amp; support; a growing community of developers &amp;amp; customers who believe in our vision.  There have been cycles of fear &amp;amp; anxiety but also cycles of focus, growth &amp;amp; restoration that have got us through this year with more challenges &amp;amp; opportunities to tackle together. The highlight of my year &amp;amp; what I am most proud to come through 2020 is the HarperDB team. It is our individual members together who create solutions that delight customers and make our mission &amp;amp; vision possible.&lt;/p&gt;

&lt;p&gt;My focus for 2020 was on building a solid foundation for the HarperDB product &amp;amp; engineering team. Personally, I built a new data storage engine from the ground up &lt;a href="https://harperdb.io/blog/lmdb-deep-dive-interview/"&gt;with LMDB&lt;/a&gt; as the underlying data store.  This gave us upwards 700x performance improvements over our previous state &amp;amp; boosted us in outperforming a number of competitive products on the market as well as set us up for future benefits to be implemented in upcoming releases.  I have been researching how our inter-node communication layer &amp;amp; distribution can be enhanced &amp;amp; have been deeply involved in PoC development for future projects.  On the team front to guide the engineering team through development &amp;amp; release cycles and refine our processes to be better suited to remote collaboration.&lt;/p&gt;

&lt;p&gt;My focus will continue to be focused on advanced R&amp;amp;D and fostering the engineering team.  Early next year I will be finishing &amp;amp; releasing across the board data engine enhancements which will provide better indexing, read &amp;amp; write performance.  Following that I will build out backup/import functionality and assist in customer project success.  I am most looking forward to seeing us execute our vision on the business side and getting HarperDB in the hands of more devs &amp;amp; use cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zach-fowler-cofounder-amp-cpo" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/zaxharperdb"&gt;Zach Fowler&lt;/a&gt;, Co-Founder &amp;amp; CPO
&lt;/h3&gt;

&lt;p&gt;To be perfectly honest this year at HarperDB has been the best so far, save not having the team a few steps away. I have come to appreciate me as not a worker bee but as a contributor to a larger community. Highlights have been working and supporting clients, the amazing things they are building with HarperDB. Watching the community build tools for HarperDB and being an endless source of ideas and features. &lt;/p&gt;

&lt;p&gt;2020 was busy and the team carried out many extraordinary endeavors. HarperDB Cloud as a Service was a gigantic undertaking, and we implemented it in short order with great success!&lt;/p&gt;

&lt;p&gt;I did a lot of work in the &lt;a href="https://harperdb.io/blog/harperdb-containerization-journey/"&gt;containerization of HarperDB&lt;/a&gt; and the ecosystems that support containers, specifically Kubernetes. This is an ongoing challenge but is very rewarding learning and adapting HarperDB for these use cases. This work has prepared HarperDB for opportunities in amazing partnerships that we should see come to fruition in the coming months.&lt;/p&gt;

&lt;p&gt;In the new year I am excited to continue to watch the community expand. I will be continuing to focus on improving and increasing HarperDB deployment channels; expanding the Kubernetes offering, adding alternative cloud providers, Azure, GCP, Packet.  It is going to be a good year, very proud to have come this far.  Cheers! And Happy New Year.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fred-yoon-cofounder-amp-coo" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/fredyoon"&gt;Fred Yoon&lt;/a&gt;, Co-Founder &amp;amp; COO
&lt;/h3&gt;

&lt;p&gt;It has undoubtedly been a challenging year for everyone due to the uncertainties of Covid.  Overall for me, I had a smooth transition working from home.  However, I didn't realize how hard it could be with the entire family at the house at all times. I'm proud of the entire HarperDB team as everyone has seemingly adapted well to the new challenges of working exclusively from home while maintaining their productivity.  It has allowed us to end the year on a high note by successfully closing a Series Seed financing round and positioning the company for success in 2021.  &lt;/p&gt;

&lt;p&gt;This year, some of my main goals and accomplishments were to help the organization navigate through Covid-19 operationally and financially, nurture and finalize strategic partnerships with Lumen and Section.io, and complete our Series Seed financing. &lt;/p&gt;

&lt;p&gt;2021 will be more of Covid and hopefully the transition to the end of the pandemic and more great opportunities for HarperDB.  Next year, my goals will be centered around successful partnerships and helping close out the significant sales opportunities developed this year.  I look forward to a very prosperous New Year for our company.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mark-hardy-vp-solution-delivery" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.linkedin.com/in/markdhardy/"&gt;Mark Hardy&lt;/a&gt;, VP Solution Delivery
&lt;/h3&gt;

&lt;p&gt;Overall I feel fortunate to have my family together and safe - I missed the face to face conversations with friends and colleagues and customers but overall the team at HarperDB made some amazing strides with the HDB Cloud product and improving performance and capabilities for our clients.  It is unfortunate that my college kids were not able to have the on campus experience that they had expected. They have great attitudes and have been very positive during the crisis.  So I am grateful for their perseverance.  Highlights of the year includes many camping trips during the summer months with friends and family.  With the support of our partner Casne, we developed a &lt;a href="https://www.youtube.com/watch?v=Wya5_6qXvYc"&gt;capability for industrial IOT&lt;/a&gt; which allows for the collection and management of extremely high frequency datasets for use in analytics and plant management.   We also made great strides in introducing HarperDB within the DoD community.  Both of these efforts will provide the market with a unique capability to support a variety of use cases in 2021. I am very excited to market the high resolution data collection solution to industrial clients and to assist in helping our DoD clients enhance their cyber capabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jaxon-repp-vp-product" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/deliciousmonster"&gt;Jaxon Repp&lt;/a&gt;, VP Product
&lt;/h3&gt;

&lt;p&gt;This year has been pretty, pretty, pretty good. I worked on the Studio, HarperDB Cloud, &lt;a href="https://studio.harperdb.io/resources/marketplace/active"&gt;Developer Marketplace&lt;/a&gt;, &lt;a href="https://studio.harperdb.io/resources/dbmigrator"&gt;DB Migrator&lt;/a&gt;, and Clustering. Next year, I intend to reduce the amount of coding I do, if/when we get to the point of hiring other people. &lt;/p&gt;

&lt;p&gt;Coding is a skill set I possess, but as we head into the new year most projects will be incremental improvements to our already-awesome suite of products. It will no longer going to be greenfield development, which is where the art is (for me, at least).&lt;/p&gt;

&lt;p&gt;I want to spend more time with customers and developers on a comprehensive roadmap that puts us in the same league as Oracle and SQL Server. I want to be able to partner with universities to make us the database that the next generation of developers cut their teeth on. I want to never have to hedge when answering a customer question because we are always faster, more flexible, more performant, and more cost-effective than any other solution they might be considering.I want ubiquitous data to save the world, and I want HarperDB to be the way that data gets it done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jacob-cohen-director-of-product-management" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/jacob_b_cohen"&gt;Jacob Cohen&lt;/a&gt;, Director of Product Management
&lt;/h3&gt;

&lt;p&gt;This year has certainly been weird, but I think I've made the best of it. I've gotten used to working from home and have grown to enjoy the flexibility of it, however, I do miss seeing everyone. I've taken the opportunity to learn new skills.&lt;/p&gt;

&lt;p&gt;In the middle of this year, I was promoted to Director of Product Management. My previous role was Solutions Architect, which I am still involved in with the sales team, but it helped me better understand the needs of our customers/users so that I can better guide the direction of the product. One of the more fun things I created this year was our &lt;a href="https://youtube.com/playlist?list=PLlgTMTKsypS5GIn4Yi3NxC4inX_tA5O9I"&gt;video tutorial series&lt;/a&gt;. Additionally, I am in the process of revamping our &lt;a href="https://harperdb.io/developers/documentation/overview/"&gt;documentation&lt;/a&gt;, which became available with the release of HarperDB 2.3.0.&lt;/p&gt;

&lt;p&gt;I will continue working with the engineering and sales teams to ensure that HarperDB is delivering the proper features and functionality to deliver cutting edge data solutions. HarperDB has some exciting features on our roadmap and I'm looking forward to seeing them come to fruition.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aron-johnson-automation-engineer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/aronjohnson"&gt;Aron Johnson&lt;/a&gt;, Automation Engineer
&lt;/h3&gt;

&lt;p&gt;Given the social/economic/pandemic challenges of 2020, I've been very fortunate this year all things considered. The main thing I have worked on and accomplished is helping to build, maintain, and improve HarperDB Cloud. Next year, I’ll continue to improve HarperDB Cloud. Continue to support our developers so they can make HarperDB even better. I am most excited about seeing HarperDB being used by more people, and used in new and interesting ways. Growing the team. Getting vaccinated, and seeing my friends and family more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#david-cockerill-software-engineer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/davidcockerill"&gt;David Cockerill&lt;/a&gt;, Software Engineer
&lt;/h3&gt;

&lt;p&gt;This year has not been that bad for me. While I miss the camaraderie of working in the office I prefer working from home. I enjoy the flexibility that it provides and the location independence. Due to social distancing restrictions I have spent more time exercising outside. My running has progressed significantly and I ran my first half marathon. One of my biggest highlights of the year was adopting a dog, it has been quite the adjustment but a worthy one. This year for me was all about the HarperDB Studio, specifically the back end. I spent most my time building out the &lt;a href="https://harperdb.io/blog/how-we-build-and-deploy-our-serverless-studio/"&gt;serverless architecture&lt;/a&gt; that supports the Studio. I have really enjoyed learning more about cloud computing and am excited to continue that exploration. Next year I will be working on automating some of our internal processes and will continue supporting HarperDB Cloud offerings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sam-johnson-software-engineer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/samj"&gt;Sam Johnson&lt;/a&gt;, Software Engineer
&lt;/h3&gt;

&lt;p&gt;As one of the few HarperDB'ers who, pre-pandemic, strongly preferred to not work from home, this year has been a challenge and major adjustment.  That said, I have been really lucky that the transition allowed me to spend significantly more time with my baby girl (who just turned ONE!) while still managing to keep some semblance of productivity.  Highlight of the year has absolutely been getting to see Olivia transition from awesome, happy newborn to awesome, happy kiddo. This year I worked on hardening our core product.  Mainly overhauling and adding new features to our SQL engine, implementing a new, more robust approach for permissions, and adding other features like bulk load operations from S3 and &lt;a href="https://harperdb.io/blog/harperdbs-new-upsert-feature/"&gt;NoSQL Upsert&lt;/a&gt;. This coming year I will be primarily working on improving HarperDB's SQL operations, focusing on performance improvements and new features and functionality - currently working on building a much faster server layer for HDB that should be ready for release in early 2021.  Outside of work, I am excited to be able to do a bit more traveling and catch up on all the beers I've had to skip with my friends and family in 2020.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jason-bathrick-business-development" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.linkedin.com/in/jason-bathrick-99a36721/"&gt;Jason Bathrick&lt;/a&gt;, Business Development
&lt;/h3&gt;

&lt;p&gt;My dogs aren't barking but HarperDB is! &lt;/p&gt;

&lt;p&gt;2020 brought some serious change on the sales side over at HarperDB. During Q1, it was my goal to introduce HarperDB to as many companies in Denver as I possibly could and that meant face to face meetings, lunches, and networking events. It was exciting and fun to meet with businesses and share new data management concepts and help them solve challenges with HarperDB. With Covid, the entire business development market was flipped. Instead of running and gunning, I've been glued to my chair since March. My dad bod is a testament to the lack of movement but as a sales guy, you gotta roll with the punches. &lt;/p&gt;

&lt;p&gt;One of the achievements I am most proud of is helping forge a partnership with the US Army. HarperDB is being deployed to collect sensor data in the field and distribute/aggregate the data in real-time for situational awareness purposes. When I entered the data management industry, I never expected to work on innovative projects that help keep our soldiers safe. I really think it's awesome and am proud HarperDB is a staple in the project. &lt;/p&gt;

&lt;p&gt;Secondly, we have been working with a major Telecommunications Company on innovative ways to leverage HarperDB to bring value to their end customers. Through trial and error, and bringing a lot of very smart and talented individuals together to strategize, we have come up with business applications that are game changers, The future is very bright for HarperDB!&lt;/p&gt;

&lt;p&gt;For 2021, I would like to get HarperDB more involved in Digital Manufacturing and Design projects. HarperDB's ability for data filtering, real-time alerting, and our ability to move operational data into enterprise systems can really enhance operations and reduce spend. I would also like to find more cutting edge technology projects in the government sector and work on partnering with a major aerospace and defense company.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kaylan-stock-director-marketing" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/kaystock"&gt;Kaylan Stock&lt;/a&gt;, Director Marketing
&lt;/h3&gt;

&lt;p&gt;Thankful for my health, my family’s health, my boyfriend Matt, and our pet clan (Alby, Ike, &amp;amp; Harold). This year hasn’t been easy, but it’s been a year of growth, self reflection, and learning to appreciate what I have. My favorite part was finally achieving my goal of buying a home and just in time to have an office space now that HDB is a fully remote company. 🙂 This year at Harper, I worked with my new partner in crime Margo on the marketing launch of HarperDB Cloud. I have spent a ton of time blogging, helping coordinate events, running social media, and coordinating the marketing around HDB Cloud! I also helped run a complete website makeover in the beginning of year. 2021 will be HarperDB’s year! We will be focusing on content, brand &amp;amp; product awareness along with driving user adoption through developer evangelism! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#margo-mccabe-sr-director-devrel-amp-partnerships" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/margo_hdb"&gt;Margo McCabe&lt;/a&gt;, Sr Director DevRel &amp;amp; Partnerships
&lt;/h3&gt;

&lt;p&gt;What a year! While I miss the same things we all do (seeing people, traveling, leaving my house), I really do feel fortunate all things considered. My family and friends have stayed healthy, and we even jumped on the puppy bandwagon with our new rescue pup named Jagger. My focus has been around expanding the HarperDB user base, procuring dev resources, gauging &lt;a href="https://harperdb.featureupvote.com/"&gt;feedback&lt;/a&gt;, connecting our users and product team, and raising product awareness, as well as partnerships on a larger scale. It’s incredibly rewarding being able to see firsthand how HarperDB has helped developers and tech leaders of all skill levels across numerous applications. In 2021 I’ll stay on the same track, continuing to increase community engagement with our informative &lt;a href="https://www.youtube.com/playlist?list=PLlgTMTKsypS7FCGm3jAzq6VppF8-AtzPh"&gt;livestream events&lt;/a&gt;, developer examples, and &lt;a href="https://harperdb.io/company/podcast/"&gt;new tech podcast series&lt;/a&gt; (we’re looking for guest speakers!). &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CD8de44t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f1ghvuxauyzxjbxdb23b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CD8de44t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f1ghvuxauyzxjbxdb23b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It may seem like it, but I didn’t force any of them to write that. We have a great team, and it really has been a strategic and productive year for HarperDB and we are eager to show you what’s yet to come. It goes without saying that we wouldn’t be where we are today if it weren’t for our incredible partners, customers, and HarperDB users, as well as the innovative minds and resources of the developer community as a whole. &lt;/p&gt;

&lt;p&gt;Happy holidays, stay safe, and well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/stephengoldberg"&gt;Stephen Goldberg, CEO &amp;amp; Co-Founder&lt;/a&gt; &lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>culture</category>
      <category>startup</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Cost of a Websites: From Landing Page to the Complex Platform</title>
      <author>Maksym Babych</author>
      <pubDate>Tue, 22 Dec 2020 15:18:22 +0000</pubDate>
      <link>https://dev.to/maksymbabych/the-cost-of-a-websites-from-landing-page-to-the-complex-platform-4idf</link>
      <guid>https://dev.to/maksymbabych/the-cost-of-a-websites-from-landing-page-to-the-complex-platform-4idf</guid>
      <description>&lt;p&gt;When you ask how much does it cost to make a business website to a developer, the answer can be. &lt;/p&gt;

&lt;p&gt;How much are you looking to spend?&lt;/p&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;p&gt;What kind of platform do you want to make?&lt;/p&gt;

&lt;p&gt;There is no denying the fact that you need a website if you have a business. &lt;/p&gt;

&lt;p&gt;If you are planning to start a business, you need to have at least a landing page before launching. &lt;/p&gt;

&lt;p&gt;So, the answer to your question is how much does it cost to make a website have a range. &lt;/p&gt;

&lt;p&gt;You can expect to incur $1000 to as much as $300,000 as website development costs. &lt;/p&gt;

&lt;p&gt;$1000 being the cost to build a simple and static website. &lt;/p&gt;

&lt;p&gt;On the higher end, $300,000 might sound like a ridiculous figure. &lt;/p&gt;

&lt;p&gt;But that is the price that Airbnb spends to build their platform. &lt;/p&gt;

&lt;p&gt;Within this range, there are levels of website design and development.&lt;/p&gt;

&lt;p&gt;For a typical site with minimal functionalities, expect to put down $20,000 to $25,000 as website creation costs. &lt;/p&gt;

&lt;p&gt;Social media and eCommerce platforms require more investment. &lt;/p&gt;

&lt;p&gt;And in this case, you can expect to spend somewhere between $60,000 to $100,000. &lt;/p&gt;

&lt;p&gt;Lastly, the cost of building a website with highly advanced and includes savvy technological elements is more than $120,000. &lt;/p&gt;

&lt;p&gt;So, as you can see, the final answer to how much does it cost to make a business website is not standardized. &lt;/p&gt;

&lt;p&gt;Instead, there are multiple aspects involved in the calculation of this cost. &lt;/p&gt;

&lt;p&gt;Web Design&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typical Site - $10,000 to $12,000&lt;/li&gt;
&lt;li&gt;Social Media or eCommerce - $15,000 to $20,000&lt;/li&gt;
&lt;li&gt;Advanced Platform - $25,000 to $35,000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Development Services&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typical Site - $10,000 to $12,000&lt;/li&gt;
&lt;li&gt;Social Media or eCommerce - $20,000 to $30,000 &lt;/li&gt;
&lt;li&gt;Advanced - $50,000 to $60,000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Website Marketing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typical Site - $2000 to $4000 (per month)&lt;/li&gt;
&lt;li&gt;Social Media or eCommerce - $4,000 to $8,000&lt;/li&gt;
&lt;li&gt;Advanced - $10,000 to $15,000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Website Maintenance (per month)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typical Site - $500 to $700&lt;/li&gt;
&lt;li&gt;Social Media or eCommerce - $1500 to $2500&lt;/li&gt;
&lt;li&gt;Advanced - $3000 to $5000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you have a general idea about how much does it cost to make a website, let’s get into the details. &lt;/p&gt;

&lt;p&gt;Indeed, we won’t leave you guessing about how this cost adds up. &lt;/p&gt;

&lt;p&gt;Moreover, it is essential to understand every single aspect associated with website creation. &lt;/p&gt;

&lt;p&gt;However, this itinerary of costs takes inspiration from our experience in delivering multiple projects. &lt;/p&gt;

&lt;p&gt;Because every business is unique and has an exclusive value proposition, the website creation cost for the same can also vary. &lt;/p&gt;

&lt;p&gt;But, with this guide, we aim to give you a general idea about the cost of building a website from tip to toe. &lt;/p&gt;

&lt;p&gt;What follows is a detailed account of &lt;a href="https://spdload.com/blog/how-much-does-it-cost-to-make-a-website-from-scratch/"&gt;how much does it cost to make a business website&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>business</category>
      <category>websites</category>
      <category>startup</category>
    </item>
    <item>
      <title>Create a really nice Discord-like emoji switcher with these 3 simple steps</title>
      <author>Michael Grigoryan</author>
      <pubDate>Tue, 22 Dec 2020 15:06:06 +0000</pubDate>
      <link>https://dev.to/michaelgrigoryan25/create-a-really-nice-discord-like-emoji-switcher-with-these-3-simple-steps-426e</link>
      <guid>https://dev.to/michaelgrigoryan25/create-a-really-nice-discord-like-emoji-switcher-with-these-3-simple-steps-426e</guid>
      <description>&lt;p&gt;So, I use Discord every day. It is a nice piece of software that let's you connect and do more with people very.. no VEEEERY easily. So I'm talking to my friend and then I suddenly got the idea to create an emoji switcher like in Discord!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-finding-an-emoji-api" class="anchor"&gt;
  &lt;/a&gt;
  Step 1 — Finding an emoji API 📶
&lt;/h1&gt;

&lt;p&gt;I started off by searching for an emoji API and by luck found &lt;a href="https://emoji-api.com/"&gt;this&lt;/a&gt; one.&lt;br&gt;
So I made a key and started testing right away!&lt;br&gt;
When I fetched data from it I got an array with lots and lots of emojis in them. &lt;br&gt;
The object looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;character:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"😀"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;codePoint:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1F600"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;group:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"smileys-emotion"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;slug:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"grinning-face"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;subGroup:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"face-smiling"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;unicodeName:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"grinning face"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-creating-a-bolierplate-html" class="anchor"&gt;
  &lt;/a&gt;
  Step 2 — Creating a bolierplate HTML 📄
&lt;/h1&gt;

&lt;p&gt;So, this is really straightforward. You just create a basic HTML and hook it up with CSS and JS.&lt;br&gt;
I went with these parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"picker"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-3-styling" class="anchor"&gt;
  &lt;/a&gt;
  Step 3 — Styling ✨
&lt;/h1&gt;

&lt;p&gt;I just added a hover effect on the &lt;code&gt;.picker&lt;/code&gt; defined some initial parameters for the &lt;code&gt;body&lt;/code&gt; tag and that's it! Easy!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.picker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grayscale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;250ms&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.picker&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grayscale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-3-the-logic" class="anchor"&gt;
  &lt;/a&gt;
  Step 3 — The Logic 🤖
&lt;/h1&gt;

&lt;p&gt;JavaScript will do all the logic in this project. Here's how it's done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accessKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// YOUR EMOJI-API ACCESS KEY GOES HERE&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;picker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.picker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getEmotes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Fetching the data from the api&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://emoji-api.com/emojis?access_key=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;accessKey&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Getting the response&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// Returning the response&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Fetching emotes with the function we defined earlier&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getEmotes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c1"&gt;// Getting a random emote from the array&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;emotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

  &lt;span class="c1"&gt;// Setting the text of the p tag to a random emoji&lt;/span&gt;
  &lt;span class="nx"&gt;picker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Setting an event listener. When the mouse hovers we are basically doing the same thing but without fetching the data again&lt;/span&gt;
  &lt;span class="nx"&gt;picker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmouseover&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;emotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="nx"&gt;picker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it! You have successfully built a Discord-like emoji switcher from scratch with vanilla JS, HTML and CSS! Great Job!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is AJAX ?</title>
      <author>Edwin Henriquez</author>
      <pubDate>Tue, 22 Dec 2020 14:58:19 +0000</pubDate>
      <link>https://dev.to/edwincoder/what-is-ajax-1c8i</link>
      <guid>https://dev.to/edwincoder/what-is-ajax-1c8i</guid>
      <description>&lt;p&gt;Imagine scrolling down on twitter when suddenly the whole page refreshes on you! Imagine this happening every ten seconds just so twitter can show you new tweets. You were probably reading comments or a post that you were very interested in, but now lost your spot because the whole page just refreshed on you. If this happened, you will probably think the website is broken and never want to use it again. To prevent this bad experience, Twitter and Instagram use AJAX. AJAX stands for Asynchronous Javascript and XML. It uses an asynchronous processing model to render dynamic components of a page without having to refresh the entire page. The features that update itself without having to refresh the browser like amount of followers, new tweets, and new post are all results of using AJAX. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#working-ajax" class="anchor"&gt;
  &lt;/a&gt;
  Working AJAX
&lt;/h1&gt;

&lt;p&gt;Since you don’t have to load the whole page the data will load faster! This improves the users experience and also allows users to do other things on the page until that section of the page comes back with new data. AJAX gets the browser to request data from the server. Then the server sends back data that is in  HTML , XML or JSON format. You can read more about &lt;a href="https://www.quirksmode.org/blog/archives/2005/12/the_ajax_respon.html"&gt;AJAX response data formats&lt;/a&gt; here . Once the browser has successfully received the data it needs, it will fire an event that renders the new data to the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DHCnOZ8e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/muk7go8ql72pz74i8vm3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DHCnOZ8e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/muk7go8ql72pz74i8vm3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This AJAX call is enclosed in a jQuery on click event.&lt;br&gt;
There are some settings you must set before making the AJAX call. The first to take a look at is the &lt;strong&gt;url&lt;/strong&gt; property. You must have the correct endpoint to get back data from your server. In this, i'm using a joke api to render random jokes to my plain Jane page. The &lt;strong&gt;type&lt;/strong&gt; property will take a HTTP verb GET or POST to retrieve data depending on what you need back. GET will retrieve data already saved to the database and POST will update the database with new information retrieved. &lt;strong&gt;Timeout&lt;/strong&gt; will do what it says, timeout after five seconds if the server doesn't respond. &lt;strong&gt;BeforeSend&lt;/strong&gt; method will display loading if it takes a while to load or an error occurs. Finally if the request come back correctly the &lt;strong&gt;success&lt;/strong&gt; function will run which appends my jokes to the web page. If there is a problem with the request, the &lt;strong&gt;error&lt;/strong&gt; function will fire off!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iqedDOE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/do51v7cqcdrfx0vmqtla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iqedDOE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/do51v7cqcdrfx0vmqtla.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now when you click the joke button it will request new jokes from the server. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;My example was plain but I wanted to show at the simplest level how AJAX is used. This can be a powerful technique due to its asynchronous processing model. You can improve the users experience by having components on the page render without refreshing the page entirely. It also makes your data load faster. Also, using Ajax with Jquery can also make things easier when requesting and appending data back onto the page. Thank you for reading ! Happy coding!&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>Murders in the ocean - What I learned (Part 2)</title>
      <author>Denislav Gavrilov 👨‍🚀🤖🤷‍♂️</author>
      <pubDate>Tue, 22 Dec 2020 14:47:48 +0000</pubDate>
      <link>https://dev.to/denislav__/murders-in-the-ocean-what-i-learned-part-2-2nmm</link>
      <guid>https://dev.to/denislav__/murders-in-the-ocean-what-i-learned-part-2-2nmm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Okay now. I want to start with that I have never played in a hackathon before. Boy, oh, boy did I learn a bunch of new stuff. I always admired people who write their hundreds of lines of code without looking at tutorials/Stack Overflow and look at me now - 650+ lines and counting! Okay, enough with the bragging... Actually, I want to confess. Maybe my code is one huge mess and that's why it has so many lines 😩. Anyway, it seems to be working somehow, and that's what matters, right?!&lt;/p&gt;

&lt;p&gt;Okay, let's get to the point. This is my second post on my DO+DEV hackathon submission and for those of you who don't know what I'm building, I am building a game. A murder mystery game. The rules of the game and how to play instructions are in my first post so go check it out. You can also check the rules on the home page of my app.&lt;/p&gt;

&lt;p&gt;So, in this second part, I want to share with all of you what I learned along the way and try to motivate you to join the hackathon if you aren't already building stuff. If not for this hackathon, I highly recommend giving another one a go!&lt;/p&gt;

&lt;p&gt;The structure of this post will be the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Current status&lt;/li&gt;
&lt;li&gt;What I learned&lt;/li&gt;
&lt;li&gt;What were my challenges&lt;/li&gt;
&lt;li&gt;What is left for my game&lt;/li&gt;
&lt;li&gt;Next steps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without further due, let's get right into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#current-status" class="anchor"&gt;
  &lt;/a&gt;
  Current status
&lt;/h1&gt;

&lt;p&gt;I will post some photos and explain the status of my game.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starting-screen" class="anchor"&gt;
  &lt;/a&gt;
  Starting Screen
&lt;/h3&gt;

&lt;p&gt;There are now 3 buttons - to the GitHub repo, instructions on how to play, and a link to my personal website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K1Gg-GCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m77pjskhlgvwjy7skbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K1Gg-GCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m77pjskhlgvwjy7skbr.png" alt="Start Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-login" class="anchor"&gt;
  &lt;/a&gt;
  First login
&lt;/h3&gt;

&lt;p&gt;Now all the players who are logged in are being shown before the game is started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h_beT0VC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rjdqzdl0nt820glm9y8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_beT0VC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rjdqzdl0nt820glm9y8o.png" alt="login-shows-names"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eject-player" class="anchor"&gt;
  &lt;/a&gt;
  Eject Player
&lt;/h3&gt;

&lt;p&gt;Now if a player tries to log in but there is already a player with that name, the 2nd player who tries to join is being disconnected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lTqnT_q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g1oqg3tasdgi5kfxwylq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lTqnT_q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g1oqg3tasdgi5kfxwylq.png" alt="player-ejected-if-existing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dead-player" class="anchor"&gt;
  &lt;/a&gt;
  Dead player
&lt;/h3&gt;

&lt;p&gt;If a player is dead, it's card shows skull and bones at the end of the round (before the discussion round).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FiBUxYuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/czfjegsnpjwnysbbbrxk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FiBUxYuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/czfjegsnpjwnysbbbrxk.png" alt="if-dead-player"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quorum-and-jailed-player" class="anchor"&gt;
  &lt;/a&gt;
  Quorum and jailed player
&lt;/h3&gt;

&lt;p&gt;There is a quorum that has to be achieved in order for the voted player to be jailed. In the second photo, the Killer is being ejected and a message that the players won the game, appears. After that, they are being returned to the join screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--spWm0_gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d9xc68vm2twgk3u43i91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--spWm0_gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d9xc68vm2twgk3u43i91.png" alt="quorum"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RwF6Fach--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ucmccsmvq4nggktp8mch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RwF6Fach--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ucmccsmvq4nggktp8mch.png" alt="killer-ejected-victorious"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-i-learned" class="anchor"&gt;
  &lt;/a&gt;
  What I learned
&lt;/h1&gt;

&lt;p&gt;Oh man, where should I start... I learned so much about javascript (and programming in general) considering my previous skill level, I could write 5 posts about 5 different things and still have material to write about. The first and most important lesson I learned, is what to do if I'm stuck. I just get off my computer, I go do something different and I come back later (10-15 minutes). Something really interesting related to this one is when I went to sleep, I always came back in my best shape. Not sure how sleeping helps me in such an enormous way, but hey, it works!&lt;/p&gt;

&lt;p&gt;The second thing I learned is that there is no better way of learning stuff than to build projects. I mean, I already knew that, but I explored the power of this method.&lt;/p&gt;

&lt;p&gt;The third thing I learned is if I am lazy, I should just start coding and in 10 minutes I will be deep into my code, not thinking about anything else.&lt;/p&gt;

&lt;p&gt;The rest of what I learned, is technical stuff which I will be covering in my future posts. I will list some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event listeners are actually working as intended... don't try overwriting them&lt;/li&gt;
&lt;li&gt;The JS .filter is one of the best things when it comes to arrays&lt;/li&gt;
&lt;li&gt;Looping through arrays is not actually that hard&lt;/li&gt;
&lt;li&gt;The JS .map is one powerful tool&lt;/li&gt;
&lt;li&gt;I can now use classes and constructors&lt;/li&gt;
&lt;li&gt;I can now construct a JSON.parse string&lt;/li&gt;
&lt;li&gt;A bunch of generic HTML-related stuff through JS&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-were-my-challenges" class="anchor"&gt;
  &lt;/a&gt;
  What were my challenges
&lt;/h1&gt;

&lt;p&gt;Well, I am having a lot of challenges throughout my way, but that's the fun in building projects, isn't it? The challenge that mostly demotivated me, was at the beginning of my project I did not know how to use classes, constructors, how to call them, and properly get data from them. When I overcame this bottleneck I raised the speed of my programming by a lot. I then had small challenges with socket.io calls but they were nothing like the class one.&lt;/p&gt;

&lt;p&gt;I also had a minor challenge with the naming of my variables, functions, IDs, classes.&lt;/p&gt;

&lt;p&gt;I usually have problems with motivation but since I am on leave from work for 12 days, I am not having such now. I am actually more motivated to code than ever. Makes you wonder...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-left-for-my-game" class="anchor"&gt;
  &lt;/a&gt;
  What is left for my game
&lt;/h1&gt;

&lt;p&gt;The stuff I need to do are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Work with my friend to design the rest of the illustrations&lt;/li&gt;
&lt;li&gt;Make a touch or two on the overall design&lt;/li&gt;
&lt;li&gt;Implement lose game functionality if the killer manages to kill all the players&lt;/li&gt;
&lt;li&gt;Chose a domain&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h1&gt;

&lt;p&gt;Well, here we are. This is the end of this second part of my 3-part series on how I attended my first hackathon. I learned a lot of stuff and I will certainly be joining more hackathons when I have the time. I am once again highly recommending to everyone who is still not playing in this one, to give it a go. In the end, the project will go in your portfolio anyway so what are you waiting for?!&lt;/p&gt;

&lt;p&gt;For my third post in this series, I will try and explain how my app works, what some pieces of code do so maybe you can fork it and make it better. However, this will be quite hard as there are too many lines of code to explain each and every one of them. Anyway, I will document my code with a lot of comments for you, users, to make it easier to read.&lt;/p&gt;

&lt;p&gt;Alrighty, thanks for reading, and have a great one!&lt;/p&gt;

</description>
      <category>dohackathon</category>
      <category>codenewbie</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>IIFEs JS</title>
      <author>Dimitris Chitas</author>
      <pubDate>Tue, 22 Dec 2020 14:39:28 +0000</pubDate>
      <link>https://dev.to/feco2019/iifie-js-16om</link>
      <guid>https://dev.to/feco2019/iifie-js-16om</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello there guys!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today we will speak about IIFEs and why sometimes could be handy for your projects.&lt;/p&gt;

&lt;p&gt;IIFEs in javascript stands for immediately invoked function expressions,in simple terms just a function that runs directly after of its statement.&lt;/p&gt;

&lt;p&gt;Commonly we declare a function on the stack flow and when we need it we call it lets see a quick example.&lt;/p&gt;

&lt;p&gt;Let's imagine that we have a function that we would like to show  us a console message,simple enough?&lt;/p&gt;

&lt;p&gt;It could be something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function showMessage() {
console('Hello DevCommunity)
};


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Right?&lt;br&gt;
Right,now if we need to use this function we just say&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;showMessage();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;with ease we solved our problem.&lt;br&gt;
But what happening if we want to initiate that function instantly.&lt;/p&gt;

&lt;p&gt;In this condition it is where IIFEs be useful, lets see this kind of syntax for the exact example above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(function () {
console.log('Hello')
}) ();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see,we wrap our function declaration inside parentheses and after the addition of functionality (console.log) , we close them and the curly braces as well, we add one more pair of parentheses out of the function scope that does our job, to invoke this function immediately.&lt;/p&gt;

&lt;p&gt;Of course we can set parameters,so we can say&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(function (text) {
console.log('Hello'  + text)
}) ('Community');

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So that's it guys lets roll,lets code..!&lt;br&gt;
I hope you got an idea for a better usage of IIFEs.&lt;/p&gt;

&lt;p&gt;Have a nice workday guys, in case for further explanation do not hesitate to contact me or find me in github or linkedin.&lt;br&gt;
GitHub : &lt;a href="https://github.com/feco2019"&gt;https://github.com/feco2019&lt;/a&gt;&lt;br&gt;
Linkedin : &lt;a href="https://www.linkedin.com/in/dimitris-chitas-930285191/"&gt;https://www.linkedin.com/in/dimitris-chitas-930285191/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>iifie</category>
      <category>javascript</category>
      <category>functional</category>
      <category>workflow</category>
    </item>
    <item>
      <title>Making Life Easier with this Graphical Interface for Git</title>
      <author>Course Probe</author>
      <pubDate>Tue, 22 Dec 2020 14:28:04 +0000</pubDate>
      <link>https://dev.to/courseprobe/making-life-easier-with-this-graphical-interface-for-git-50ph</link>
      <guid>https://dev.to/courseprobe/making-life-easier-with-this-graphical-interface-for-git-50ph</guid>
      <description>&lt;p&gt;&lt;em&gt;Get started with Git Cola, a graphical user interface for Git.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://opensource.com/resources/what-is-git"&gt;Git&lt;/a&gt; is a Linux command to help you manage versions of your work. It’s been ported to BSD, macOS, Windows, and more. It serves as the basis for popular code-hosting services, including open source services like &lt;a href="http://gitlab.com/"&gt;GitLab&lt;/a&gt; and &lt;a href="https://notabug.org/"&gt;NotABug&lt;/a&gt;, and even to popular proprietary services. In short, Git has taken software development (and a few other industries) by storm.&lt;/p&gt;

&lt;p&gt;Everyone should be able to benefit from Git, but not everyone knows how or wants to use a &lt;a href="https://opensource.com/article/19/7/what-posix-richard-stallman-explains"&gt;POSIX&lt;/a&gt; terminal. To help users who don’t use the terminal (for whatever reason), the &lt;a href="https://git-cola.github.io/"&gt;Git Cola&lt;/a&gt; project was developed, and this article teaches you how to use it. If you’re not familiar with Git, read my &lt;a href="https://opensource.com/life/16/7/stumbling-git"&gt;introduction to Git&lt;/a&gt; and &lt;a href="https://opensource.com/life/16/7/how-restore-older-file-versions-git"&gt;restoring an old file&lt;/a&gt; articles to get an idea of what it’s capable of doing and why people seem to like it so much. This tutorial doesn’t assume you are familiar with any Git concepts, rather that you either want or need to use Git.&lt;/p&gt;

&lt;p&gt;For those with little experience with Git, I recommend taking a look at the PDF offline version of the documentation below or the online version on the official site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Hw0k8Ej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AXTc9J_rqiYqFhHJFjKMALw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Hw0k8Ej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AXTc9J_rqiYqFhHJFjKMALw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leanpub.com/git-documentation-pdf"&gt;Git Pdf Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-git-cola" class="anchor"&gt;
  &lt;/a&gt;
  Install Git Cola
&lt;/h2&gt;

&lt;p&gt;To install Git Cola on Linux, open your application installer (called &lt;strong&gt;Software&lt;/strong&gt; on GNOME) from your &lt;strong&gt;Applications&lt;/strong&gt; menu and search for &lt;strong&gt;git-cola&lt;/strong&gt; and install it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wf_kG-Em--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AU8wYBIsm1EDZL8LI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wf_kG-Em--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AU8wYBIsm1EDZL8LI.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On macOS, you can use Homebrew to install it. Search for &lt;strong&gt;git-cola&lt;/strong&gt; and install.&lt;/p&gt;

&lt;p&gt;On Windows, use &lt;a href="https://opensource.com/article/20/3/chocolatey"&gt;Chocolatey&lt;/a&gt; to install. Search for &lt;strong&gt;git-cola&lt;/strong&gt; and install.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-git-cola" class="anchor"&gt;
  &lt;/a&gt;
  Launch Git Cola
&lt;/h2&gt;

&lt;p&gt;Start Git Cola from your Application menu. Since it’s a graphical interface for Git, you won’t be typing commands.&lt;/p&gt;

&lt;p&gt;When Git Cola starts, it doesn’t have any repositories. Just as a word processor or music player isn’t of much use without a file loaded, Git Cola isn’t very useful without a project loaded into it. If you have a Git repository that you need to contribute to, you can clone it by clicking the &lt;strong&gt;Clone&lt;/strong&gt; button in the lower-left Git Cola window. Otherwise, click the &lt;strong&gt;New&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PPBDe21z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2ADw5xmiUPkCozro-V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PPBDe21z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2ADw5xmiUPkCozro-V.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new directory called &lt;strong&gt;example-project.git&lt;/strong&gt; somewhere on your hard drive. The folder doesn’t have to end in &lt;strong&gt;.git,&lt;/strong&gt; but it’s a convention for a Git repository to end in &lt;strong&gt;.git&lt;/strong&gt;, so it’s a good idea to get into the habit of appending that to the end of a project. And that’s an important concept in Git: The directory you create to house a project is actually a Git repository. It’s hard to tell without digging around for it, but there’s a hidden directory inside your project folder called &lt;strong&gt;.git&lt;/strong&gt;, and it contains important history and configuration files so that changes you make inside that project can be tracked.&lt;/p&gt;

&lt;p&gt;Git Cola’s main interface looks pretty lonely and empty at this stage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UZcYvp4L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2A3ztjXz_D4epBPSbF.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UZcYvp4L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2A3ztjXz_D4epBPSbF.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s up to you to populate your project with files, so for the moment, leave Git Cola behind. Using your OS’s file manager (Files on GNOME, Finder on macOS, Explorer on Windows), add some files to your project directory on your hard drive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#files-types-compatible-with-git" class="anchor"&gt;
  &lt;/a&gt;
  Files types compatible with Git
&lt;/h2&gt;

&lt;p&gt;Git is primarily intended for use with text-based formats. Technically, Git doesn’t really care what kinds of files you add to your project. Its job is to track changes. But there’s a catch: not all file formats are suitable for version tracking. For instance, a JPEG image is actually a complex matrix of pixel values and positions passed through a compression algorithm. If you change a JPEG file in any way, you’re essentially creating a brand new file because, while it’s possible to generate the difference (a “diff” or “delta” in software terminology) between one version and the other, the amount of data required to represent that likely will be larger than both images combined.&lt;/p&gt;

&lt;p&gt;Text formats are more prevalent than you may think. Besides actual text files, there are many file formats that are based on raw text. For instance, HTML and CSS are pure text formats. So is anything based in JSON or XML, such as the SVG graphics format, the PostScript (PS, the basis of PDF files) format, source code (PY, JAVA, and so on), and many more. And just because Git is intended primarily for text, that doesn’t mean you can’t make an exception here and there. For very diverse projects that involve lots of binary (non-text) data, there are tools like &lt;a href="https://opensource.com/life/16/8/how-manage-binary-blobs-git-part-7"&gt;git-annex&lt;/a&gt; and &lt;a href="https://opensource.com/article/19/4/manage-multimedia-files-git"&gt;Git-portal&lt;/a&gt; to enable you to benefit from Git without suffering from its aversion to large files.&lt;/p&gt;

&lt;p&gt;This article focuses on text files because Git Cola doesn’t natively support external Git extensions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#staging-files" class="anchor"&gt;
  &lt;/a&gt;
  Staging files
&lt;/h2&gt;

&lt;p&gt;The first thing you typically do with a file in Git is &lt;em&gt;stage&lt;/em&gt; it. Staging a file means that you’ve marked the file for inclusion in the next code commit. It’s little more than a tag, and it’s easily undone. It doesn’t change or preserve your data. It’s just a way to keep track of what you have in progress.&lt;/p&gt;

&lt;p&gt;Once you have a file in your project directory, it’s listed in the &lt;strong&gt;Status&lt;/strong&gt; pane of Git Cola. Right-click on the file and select &lt;strong&gt;Stage Selected&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTYgHUBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AnfDzKk9jRkpGjfQ3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTYgHUBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AnfDzKk9jRkpGjfQ3.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A staged file is marked with a green triangle next to its name. You can unstage a file basically the same way you staged it: right-click and select &lt;strong&gt;Unstage Selected&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-commit" class="anchor"&gt;
  &lt;/a&gt;
  Making a commit
&lt;/h2&gt;

&lt;p&gt;When you’re ready to commit a file to Git’s permanent history, you make a &lt;em&gt;commit&lt;/em&gt;. A commit represents exactly what it sounds like: You’re committing to having a file in your Git repository, ostensibly forever.&lt;/p&gt;

&lt;p&gt;To commit all staged files, type a brief description of your work in the &lt;strong&gt;Commit&lt;/strong&gt; text field. This is the &lt;em&gt;commit message&lt;/em&gt;, which is visible forever in the repository’s Git log. It’s a useful message — sometimes to explain to collaborators what you intended by committing certain files and other times to remind yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DuX-x_iU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2At4DjhOiPy_iEl66S.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DuX-x_iU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2At4DjhOiPy_iEl66S.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publishing-with-git-push" class="anchor"&gt;
  &lt;/a&gt;
  Publishing with git push
&lt;/h2&gt;

&lt;p&gt;Right now, your Git project exists only on your local machine. It’s common to use Git to collaborate with others, so it’s very common for a Git repository to exist on a server accessible to others. You can &lt;a href="https://opensource.com/life/16/7/creating-your-first-git-repository"&gt;create a repository&lt;/a&gt; on a free Git host like GitLab and interface with it through Git Cola. Once you’ve created an empty remote repository, you can add it to Git Cola.&lt;/p&gt;

&lt;p&gt;To add a remote server, click on the &lt;strong&gt;File&lt;/strong&gt; menu in Git Cola and select &lt;strong&gt;Edit Remotes&lt;/strong&gt;. In the &lt;strong&gt;Edit Remotes&lt;/strong&gt; window, click the plus (&lt;strong&gt;+&lt;/strong&gt;) symbol in the lower-left corner. In the dialog box that appears, enter a name for the remote and the URL. The name can be anything, but it’s conventional (and therefore expected by most experienced users) for your primary remote to be named &lt;strong&gt;origin&lt;/strong&gt;. The URL is provided by your Git host and usually starts with &lt;strong&gt;git@&lt;/strong&gt; (there are other protocols, such as &lt;strong&gt;https://&lt;/strong&gt; and &lt;strong&gt;git://&lt;/strong&gt;, but they have limitations, so they’re rarely used).&lt;/p&gt;

&lt;p&gt;Once you have a remote configured, you can push your commits to the server.&lt;/p&gt;

&lt;p&gt;To push your commits to your remote repository, navigate to the &lt;strong&gt;Actions&lt;/strong&gt; menu and select &lt;strong&gt;Push&lt;/strong&gt;, or just press &lt;strong&gt;Ctrl+P&lt;/strong&gt;. A &lt;strong&gt;git push&lt;/strong&gt; sends only your committed files to the server. If a file has never been staged or hasn’t been staged since you’ve made changes, then that data will not get pushed to the server. Sometimes that’s a good thing. Git is designed to be an excellent workspace: You can have works-in-progress alongside old reliable files without worrying about the two negatively affecting one another. However, if you forget to add an important file to staging or to commit what’s in staging, then you aren’t pushing the data you think you’re pushing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-with-git-pull" class="anchor"&gt;
  &lt;/a&gt;
  Updating with git pull
&lt;/h2&gt;

&lt;p&gt;If you’re working with other people on a project, it’s very likely that they’ll commit files to the repository from their own computer. To keep your work environments in sync, you must regularly perform a &lt;strong&gt;git pull&lt;/strong&gt;. To pull all the latest commits from the server, navigate to the &lt;strong&gt;Actions&lt;/strong&gt; menu and select &lt;strong&gt;Pull&lt;/strong&gt;, or just press &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#everything-else" class="anchor"&gt;
  &lt;/a&gt;
  Everything else
&lt;/h2&gt;

&lt;p&gt;Git Cola can do all the typical Git actions and a few more. And Git has plenty of great features to help you be creative and daring in the way you work, with the assurance that the known-good version of what you’ve done is safe. &lt;a href="https://opensource.com/article/18/5/git-branching"&gt;Git branches&lt;/a&gt;, for instance, afford you the ability to have parallel versions of your project existing at the same time, and &lt;strong&gt;git merge&lt;/strong&gt; provides you with tools to combine those versions when you decide one could benefit the other. The possibilities are endless with Git, and that’s why it’s so popular.&lt;/p&gt;

&lt;p&gt;If unfamiliarity with terminals has held you back from trying Git, resist no more! Settle in for a nice cold Git Cola, and see what Git opens up for you.&lt;/p&gt;




&lt;p&gt;If you are new to Git and Version control, then the below resources might be useful:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coursesim.com/course/git-master-git-version-control-system/"&gt;GIT — Master GIT Version Control System&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reference sites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/20/3/git-cola"&gt;https://opensource.com/article/20/3/git-cola&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Other Dev Posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/courseprobe/game-development-build-your-own-2d-platformer-with-python-under-39-minutes-2dfl"&gt;Game Development: Build your Own 2D Platformer with Python under 39 minutes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/courseprobe/write-node-js-programs-with-streams-like-a-pro-2ko0"&gt;Write node.js Programs with Streams like a Pro&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/courseprobe/why-using-reactql-starter-kit-for-your-app-will-save-you-weeks-in-development-552o"&gt;Why using ReactQL Starter Kit for your App will save you Weeks in Development&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/courseprobe/bulletproof-your-javascript-code-with-a-top-level-await-4ahm"&gt;Bulletproof your Javascript code with a top-level await&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>git</category>
      <category>programming</category>
    </item>
    <item>
      <title>Acing CSS Grid Model in 2021 with 5 Exercises || CSS 2021 
🔥</title>
      <author>Khondokor Alam</author>
      <pubDate>Tue, 22 Dec 2020 14:03:27 +0000</pubDate>
      <link>https://dev.to/joyshaheb/acing-css-grid-model-in-2021-with-5-exercises-css-2021-51ci</link>
      <guid>https://dev.to/joyshaheb/acing-css-grid-model-in-2021-with-5-exercises-css-2021-51ci</guid>
      <description>&lt;p&gt;Here's a practical guide to learn the CSS Grid System/Model with &lt;strong&gt;High Efficiency&lt;/strong&gt; in 2021 by Building 5 Responsive Layouts across all screen sizes. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#check-the-figma-design-here" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.figma.com/file/OQLU5rBvgCpkR443VmoMGz/CSS-Grid-Model-Dev.to?node-id=0%3A1"&gt;Check The Figma Design Here&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Originally Inspired from &lt;a href="https://dev.to/nghiemthu/master-css-grid-with-5-layouts-in-17-minutes-3phf"&gt;Thu Nghiem&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents-" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents --
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#level-1"&gt;Level-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#level-2"&gt;Level-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#level-3"&gt;Level-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#level-4"&gt;Level-4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#level-5"&gt;Level-5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#level-6"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#youtube" class="anchor"&gt;
  &lt;/a&gt;
  Youtube
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#if-this-is-difficult-for-you-then-see-step-by-step-tutorial-on-youtube" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://youtu.be/OtpDP8k-2iM"&gt;If this is difficult for you then see Step by step Tutorial on Youtube 🔥&lt;/a&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OtpDP8k-2iM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup 🔥
&lt;/h1&gt;

&lt;p&gt;Open &lt;a href="//codepen.io"&gt;Codepen&lt;/a&gt; / any code editor and place these 👇&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scss" class="anchor"&gt;
  &lt;/a&gt;
  SCSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Defining Break-Points&lt;/span&gt;

&lt;span class="nv"&gt;$bp&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;mobile&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;480px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;tablet&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;desktop&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1440px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Defining our Conditional Media query Mixins.&lt;/span&gt;
&lt;span class="c1"&gt;//To save Time &amp;amp; Coffee.&lt;/span&gt;

&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$screen&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;@each&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$bp&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//  defining max-width&lt;/span&gt;

    &lt;span class="k"&gt;@if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$screen&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;@content&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again .......&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Changing The Default Settings..&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Defining settings of all .box- classes with&lt;/span&gt;
&lt;span class="c1"&gt;//Border color &amp;amp; placing text at Center.&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s2"&gt;"box-"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//Set any color you wish for testing purposes.&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#were-all-set-boys" class="anchor"&gt;
  &lt;/a&gt;
  We're All Set Boys 😆👌
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#level1" class="anchor"&gt;
  &lt;/a&gt;
  Level-1 &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;A beginner Friendly Level XD&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VRHSzy53--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7uakossj8mqxenek5fx4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VRHSzy53--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7uakossj8mqxenek5fx4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Main&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scss" class="anchor"&gt;
  &lt;/a&gt;
  SCSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The Main Sauce. It means, define --&lt;/span&gt;
&lt;span class="c1"&gt;// [.box-1 auto] [.box-2 1fr unit] &amp;amp; [.box-3 auto]&lt;/span&gt;

  &lt;span class="na"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;1fr&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//Defining gap between rows.&lt;/span&gt;
  &lt;span class="na"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#level2" class="anchor"&gt;
  &lt;/a&gt;
  level-2 &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DlWdiWcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ipy4mkgt21gtpcwlxlvy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlWdiWcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ipy4mkgt21gtpcwlxlvy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Left&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Right&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scss" class="anchor"&gt;
  &lt;/a&gt;
  SCSS
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#for-large-screen" class="anchor"&gt;
  &lt;/a&gt;
  For Large Screen
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Dividing the Width of screen&lt;/span&gt;
&lt;span class="c1"&gt;// in 12 equal fractions.&lt;/span&gt;

  &lt;span class="na"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="na"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There's confusion in picking number of columns to cover with grid-columns. No need to panic. Just add 1. For this case, we want .box-1 to cover 4 columns. so, we write 1/5. Like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box-1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// Cover 4 columns. &lt;/span&gt;
&lt;span class="c1"&gt;//So, start = 1 || end = 4+1 = 5;&lt;/span&gt;
&lt;span class="c1"&gt;// grid-column : start/end; 👈 Short-Hand&lt;/span&gt;

  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box-2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// Cover remaining columns. &lt;/span&gt;
&lt;span class="c1"&gt;//This value 👇 is taken from .box-1 ☝️&lt;/span&gt;
&lt;span class="c1"&gt;//So, start = 5 || end = 12+1 = 13;&lt;/span&gt;
&lt;span class="c1"&gt;// grid-column : start/end; 👈 Short-Hand&lt;/span&gt;

  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-mobile-screen" class="anchor"&gt;
  &lt;/a&gt;
  For Mobile Screen
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The Media query mixin we defined at start.&lt;/span&gt;
&lt;span class="c1"&gt;//Took (mobile) 👇 from $bp;&lt;/span&gt;
&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobile&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// Defining that, make the column 1 piece/100%;&lt;/span&gt;
    &lt;span class="na"&gt;grid-template-columns&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//or, write 1fr&lt;/span&gt;

&lt;span class="c1"&gt;//Defining that, make 2 rows, 1fr (fraction) each,&lt;/span&gt;
    &lt;span class="na"&gt;grid-template-rows&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// To remove the previously defined values &lt;/span&gt;
  &lt;span class="nc"&gt;.box-1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;.box-2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//inherit defines the original value.&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#lets-change-the-game-with-gridtemplate-areas" class="anchor"&gt;
  &lt;/a&gt;
  Let's Change the Game with Grid-template areas 😎
&lt;/h1&gt;

&lt;p&gt;Life's Quite Easier With Grid-Template-Areas tbh. It allows us to see visually what we're doing. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#level3" class="anchor"&gt;
  &lt;/a&gt;
  Level-3 &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_fhn5jbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y1wpthpx3z2p8c327z3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_fhn5jbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y1wpthpx3z2p8c327z3f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;B&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scss" class="anchor"&gt;
  &lt;/a&gt;
  SCSS
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#for-larger-screen" class="anchor"&gt;
  &lt;/a&gt;
  For Larger Screen
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Creating a 12 column X 3 row grid;&lt;/span&gt;

  &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Defining&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2rows&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2rows&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;There&lt;/span&gt;&lt;span class="s1"&gt;'s a high chance to get lost here,&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;//so, divide the areas in 3 columns with blank spaces=&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;    "a a a a    a a a a    a a a a"&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;    "b b b b    b b b b    c c c c"&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;    "b b b b    b b b b    c c c c";&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;  grid-gap: 10px;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;}&lt;/span&gt;&lt;span class="err"&gt;

&lt;/span&gt;&lt;span class="s1"&gt;.box-1{&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;  grid-area: a;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;}&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;.box-2{&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;  grid-area: b;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;}&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;.box-3{&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;  grid-area: c;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;}&lt;/span&gt;&lt;span class="err"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-mobile-screen" class="anchor"&gt;
  &lt;/a&gt;
  For Mobile Screen
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobile&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="s2"&gt;"a a a a    a a a a    a a a a"&lt;/span&gt;
    &lt;span class="s2"&gt;"a a a a    a a a a    a a a a"&lt;/span&gt;

    &lt;span class="s2"&gt;"b b b b    b b b b    b b b b"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b    b b b b    b b b b"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b    b b b b    b b b b"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b    b b b b    b b b b"&lt;/span&gt;

    &lt;span class="s2"&gt;"c c c c    c c c c    c c c c"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#level4" class="anchor"&gt;
  &lt;/a&gt;
  Level-4 &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pu8W7wWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xsbgskef01vaqtg75hep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pu8W7wWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xsbgskef01vaqtg75hep.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;B&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;D&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;E&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scss" class="anchor"&gt;
  &lt;/a&gt;
  SCSS
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#for-larger-screens" class="anchor"&gt;
  &lt;/a&gt;
  For Larger Screens
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="s2"&gt;"a a a a    a a a a    a a a a"&lt;/span&gt;

    &lt;span class="s2"&gt;"b b b b    b b b b    e e e e"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b    b b b b    e e e e"&lt;/span&gt;

    &lt;span class="s2"&gt;"c c c c    d d d d    e e e e"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="na"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box-1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-3&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-4&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-5&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-mobile-screens-" class="anchor"&gt;
  &lt;/a&gt;
  For Mobile Screens :
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobile&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 

    &lt;span class="s2"&gt;"a a a a    a a a a    a a a a"&lt;/span&gt;

    &lt;span class="s2"&gt;"b b b b    b b b b    b b b b"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b    b b b b    b b b b"&lt;/span&gt;

    &lt;span class="s2"&gt;"c c c c    c c d d    d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"e e e e    e e e e    e e e e"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#are-you-winning-son-lets-turn-up-the-heat" class="anchor"&gt;
  &lt;/a&gt;
  Are You winning Son? Let's Turn Up the heat 🥵
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#level5" class="anchor"&gt;
  &lt;/a&gt;
  Level-5 &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r0GeNTqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lio9zp1fuvq4kj35cn5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r0GeNTqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lio9zp1fuvq4kj35cn5x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;B&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;D&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;E&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;F&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scss" class="anchor"&gt;
  &lt;/a&gt;
  SCSS
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#for-desktop" class="anchor"&gt;
  &lt;/a&gt;
  For Desktop
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="s2"&gt;"a a a a   a a a a   a a a a"&lt;/span&gt;
    &lt;span class="s2"&gt;"c c b b   b b b b   b b e e"&lt;/span&gt;
    &lt;span class="s2"&gt;"c c d d   d d d d   d d e e"&lt;/span&gt;
    &lt;span class="s2"&gt;"c c d d   d d d d   d d e e"&lt;/span&gt;
    &lt;span class="s2"&gt;"c c d d   d d d d   d d e e"&lt;/span&gt;
    &lt;span class="s2"&gt;"f f f f   f f f f   f f f f"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box-1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-3&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-4&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-5&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-6&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-tablet" class="anchor"&gt;
  &lt;/a&gt;
  For Tablet
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;
&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tablet&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="s2"&gt;"a a a a   a a a a   a a a a"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b   b b b b   b b b b "&lt;/span&gt;
    &lt;span class="s2"&gt;"c c d d   d d d d   d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"c c d d   d d d d   d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"c c d d   d d d d   d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"e e f f   f f f f   f f f f"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-mobile-screen" class="anchor"&gt;
  &lt;/a&gt;
  For Mobile Screen
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;
&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobile&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="s2"&gt;"a a a a   a a a a   a a a a"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b   b b b b   b b b b "&lt;/span&gt;
    &lt;span class="s2"&gt;"c c c c   c c c c   c c c c"&lt;/span&gt;
    &lt;span class="s2"&gt;"d d d d   d d d d   d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"d d d d   d d d d   d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"d d d d   d d d d   d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"e e e e   e e e e   e e e e"&lt;/span&gt;
    &lt;span class="s2"&gt;"f f f f   f f f f   f f f f"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Here's your medal 🎖️ for successfully completing CSS Grid Model/System. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suggestions-amp-criticisms-are-highly-appreciated-%EF%B8%8F" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Suggestions &amp;amp; Criticisms are Highly Appreciated ❤️️&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Youtube&lt;a href="//youtube.com/channel/UCHG7IJuST_BXJkne-0u0Xtw"&gt; / Joy Shaheb&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Twitter&lt;a href="https://twitter.com/JoyShaheb"&gt; / JoyShaheb&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Instagram&lt;a href="https://www.instagram.com/joyshaheb/"&gt; / JoyShaheb&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>How I improved my code by returning early, returning often!</title>
      <author>Jordan Finneran</author>
      <pubDate>Tue, 22 Dec 2020 12:05:16 +0000</pubDate>
      <link>https://dev.to/jordanfinners/how-i-improved-my-code-by-returning-early-returning-often-e8k</link>
      <guid>https://dev.to/jordanfinners/how-i-improved-my-code-by-returning-early-returning-often-e8k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#contents" class="anchor"&gt;
  &lt;/a&gt;
  Contents
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#return"&gt;Return&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#single-purpose-functions"&gt;Single Purpose Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;I've been a developer for over 5 years now and one of the best things that I've learned is functional programming. Which gets a lot of hype and can be a bit daunting but I've broken down into a few simple ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Returning early and often&lt;/li&gt;
&lt;li&gt;Single purpose functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are pretty tightly coupled and inspired by my friends post (which you should definitely &lt;a href="https://dev.to/dglsparsons/write-better-code-and-be-a-better-programmer-by-never-using-else-statements-4dbl"&gt;check out&lt;/a&gt;) about NEVER using ELSE.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#return" class="anchor"&gt;
  &lt;/a&gt;
  Return &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Here's an example in Go. We'll load some data, do some work on the data and return the result. Loading data and doing some calculation could both return an error as well as the actual thing we want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;loadData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;someCalculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that code will work fine, however if there is an error from load data and doing the calculation, we'll only ever see the second error as it will override the original error. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A nightmare to debug!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not only that but we'll also be doing extra computation we don't need!&lt;/p&gt;

&lt;p&gt;We can fix it up by checking for error and returning that early.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;loadData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;someCalculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will save us doing any extra computation unnecessarily and gives us context if any error happens.&lt;br&gt;
This second code block could be improved further with proper logging too.&lt;/p&gt;

&lt;p&gt;It'll be much easier to debug when something goes wrong too!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#single-purpose-functions" class="anchor"&gt;
  &lt;/a&gt;
  Single Purpose Functions &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Returning early and often also helps lead us to functions with only a single purpose.&lt;/p&gt;

&lt;p&gt;Let's take the following example of some routing in JavaScript. &lt;br&gt;
Imagine we're parsing the URL e.g. &lt;code&gt;/:page&lt;/code&gt;&lt;br&gt;
Based on the page import some code. We also could have no page value set if someone goes to just &lt;code&gt;/&lt;/code&gt;. We also only want to load the profile code if a user is authenticated.&lt;/p&gt;

&lt;p&gt;You can see its pretty complex to read and already wrong as it is missing an else and we're not returning anything so could lead to some mutations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./home.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./blog.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./login.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isUserAuthenticated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./profile.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./lost.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's break it out into single purpose functions!&lt;/p&gt;

&lt;p&gt;We'll start by checking if the page is known to us.&lt;br&gt;
Then check if the page needs authentication and if the user is logged in.&lt;br&gt;
Finally, we'll import the write code depending on the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Check if the page is a known page
 * Default to home page if route is just /
 * Otherwise show lost page
 * @param {String} page the page parsed from the url
 * @returns {String} validated page to go to
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validatePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Check if the page is authorised and we have a user logged in
 * Otherwise, they need to login
 * @param {String} page the validated page
 * @param {Boolean} isUserAuthenticated if the user is logged in
 * @returns {String} the page to go to 
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validateAuthorisedPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isUserAuthenticated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authenticatedPages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;authenticatedPages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isUserAuthenticated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Import the right code for each page
 * @param {String} page to load
 * @returns {Promise} the pending import
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;importPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./home.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./blog.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./profile.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./login.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./lost.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can see that each of these is only responsible for doing one thing! It also takes advantage of returning early and often too.&lt;br&gt;
This makes it easier to read, understand, and makes testing a breeze!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;In summary, mutation is the enemy!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thinking about returning as early as possible helps keep our code simple, leads to easier error handling and less likely for side effects to occur!&lt;/p&gt;

&lt;p&gt;What do you think? Any other tips for simpler code?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>go</category>
      <category>beginners</category>
      <category>functional</category>
    </item>
    <item>
      <title>My Advice to New Programmers After Coding for the Last 3 Years</title>
      <author>Fahad Imran</author>
      <pubDate>Tue, 22 Dec 2020 11:23:14 +0000</pubDate>
      <link>https://dev.to/dailydotdev/my-advice-to-new-programmers-after-coding-for-the-last-3-years-39pf</link>
      <guid>https://dev.to/dailydotdev/my-advice-to-new-programmers-after-coding-for-the-last-3-years-39pf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#my-programming-background-or-lack-thereof" class="anchor"&gt;
  &lt;/a&gt;
  💻 My Programming Background (Or lack thereof)
&lt;/h2&gt;

&lt;p&gt;My journey as a programmer started when I chose to pursue &lt;strong&gt;Software Engineering&lt;/strong&gt; as a major after completing my High School Education. Since then, I have been programming for the better part of the last &lt;strong&gt;3 years&lt;/strong&gt; in various programming languages from Python, Java, C++, and recently JavaScript.&lt;/p&gt;

&lt;p&gt;It is important to mention that I had literally &lt;strong&gt;never&lt;/strong&gt; written a single line of code before starting my bachelor's. In fact, I don't remember taking a computer course throughout my middle and high school years. Suffice it to say. I was not like those students in my class, who had been coding as a hobby for a long time, or those who had already published entire Apps to the Play Store.&lt;/p&gt;

&lt;p&gt;Thus, in all aspects, I was a complete &lt;strong&gt;Newbie&lt;/strong&gt;. Therefore, I also had some &lt;strong&gt;misconceptions&lt;/strong&gt; about programming and coding in general. It took me the better part of the last 2 and a half years to understand my negligence and realize how mistaken I was. Thus, I am writing this blog post to help others who are new to programming like I was by &lt;strong&gt;debunking&lt;/strong&gt; some common misconceptions about programming.&lt;/p&gt;

&lt;p&gt;Enough talking, let's get into it, shall we?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-on-the-fundamentals" class="anchor"&gt;
  &lt;/a&gt;
  🎯 Focus on the Fundamentals
&lt;/h2&gt;

&lt;p&gt;As a new programmer, your number one priority should be to &lt;strong&gt;master the fundamentals&lt;/strong&gt;. By this, I mean you should grasp concepts like variables, data types, data structures, conditionals, loops, algorithms, etc. &lt;/p&gt;

&lt;p&gt;The reason being, once you have sound knowledge of the fundamentals, you can learn any programming language in a matter of days. At the core, all programming languages generally have the same concepts. Good knowledge of the fundamentals will help you regardless of the programming language you choose to pick up.&lt;/p&gt;

&lt;p&gt;With my own example, I can say that once you know the &lt;strong&gt;basics&lt;/strong&gt;, picking up a new language will be &lt;strong&gt;a piece of cake&lt;/strong&gt;. So, if you take away one thing from this post, it should concentrate on sharpening up your fundamental programming concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-make-lots-of-mistakes" class="anchor"&gt;
  &lt;/a&gt;
  🙏 Please Make Lots of Mistakes
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Fear of making mistakes&lt;/strong&gt; is another big reason people fail at programming. I, too, was in the same boat. I had the notion that a good programmer knows the exact syntax of the language and wrote the perfect code that runs the first time around. This notion &lt;strong&gt;hindered&lt;/strong&gt; my ability to learn new things because I was so afraid of making mistakes that I never even tried.&lt;/p&gt;

&lt;p&gt;This concept of mine was blasted to smithereens in a concise span of time. Writing clean and elegant code that runs on the first try and produces the correct output is nothing short of a &lt;strong&gt;fantasy&lt;/strong&gt;. Even the most experienced developers cannot write fully functioning and error-free code on the first attempt. The sooner you realize this, the faster you will learn from your mistakes.&lt;/p&gt;

&lt;p&gt;You must understand that most of your time coding will be spent on &lt;strong&gt;debugging and looking up errors on the internet.&lt;/strong&gt; To succeed as a developer, you are not expected to memorize the entire syntax of a language in your head. I hardly believe anyone can do that. &lt;/p&gt;

&lt;p&gt;Instead, you focused on effectively &lt;strong&gt;debugging your applications&lt;/strong&gt;. Errors are an essential part of programming. The sooner you feel comfortable seeing red output on the screen screaming at you, the quicker you will master programming. Some of the best programmers I know or follow still spend a considerable amount of time-solving simple errors and looking up syntax that they cannot remember.&lt;/p&gt;

&lt;p&gt;You should also realize that the first time you write a piece of code, it will never be perfect. Instead, a good practice is to write code that works and then refine and &lt;strong&gt;refactor&lt;/strong&gt; that code to make it more readable and concise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-rely-on-college-to-teach-you-everything" class="anchor"&gt;
  &lt;/a&gt;
  👨‍🎓 Don't Rely on College to teach you everything
&lt;/h2&gt;

&lt;p&gt;By far, the worst notion you could have as a new programmer is expecting the university or college to teach you everything.&lt;br&gt;
Universities follow a fixed curriculum, and while certain courses have greatly benefited me, like Database Systems, Computer Networks, Data structures, and Algorithms, etc. Many courses were not relevant to what is required in the field. &lt;/p&gt;

&lt;p&gt;For example, most universities don't teach you about web development in detail or about tools like git and GitHub, widely used throughout the industry.&lt;/p&gt;

&lt;p&gt;Thus, the cold truth is that you have to &lt;strong&gt;develop a habit of learning on your own&lt;/strong&gt;. In my case, the entire knowledge I have about &lt;strong&gt;web development&lt;/strong&gt; is through my &lt;strong&gt;own efforts&lt;/strong&gt; and learning. While it may be true in other Engineering fields, the programming landscape changes so quickly that educational institutions can't keep pace. Learning to code is a continuous process, and you must keep practicing and expanding your skillset if you want to stay relevant in today's competitive market.&lt;/p&gt;

&lt;p&gt;And the best thing is the &lt;strong&gt;abundance of online resources&lt;/strong&gt; available to help you in this regard. If you want to learn a language or framework, there are probably many tutorials and articles you can consult. So, it's a matter of dedication and hard work you are willing to put in, and you can master a skill in no time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-fall-into-tutorial-hell" class="anchor"&gt;
  &lt;/a&gt;
  😵 Don’t Fall into Tutorial Hell
&lt;/h2&gt;

&lt;p&gt;Another problem that new programmers face is that they tend to fall into &lt;strong&gt;Tutorial Hell&lt;/strong&gt;. Most of us resort to coding tutorials on YouTube and Udemy courses to learn any new language, framework, or skill. But these courses have a critical flaw that many of us don't realize.&lt;/p&gt;

&lt;p&gt;As you follow along with your instructor, you might feel very confident and even feel like you're getting everything. But as soon as you finish a course and try to develop something on your own, you'll feel &lt;strong&gt;completely blank&lt;/strong&gt; and have no idea where even to start. This has happened to me many times, and it's a very sinking feeling.&lt;/p&gt;

&lt;p&gt;The problem with these tutorials and courses is that they teach you how to build a specific application. They don't teach you how to develop the mindset to &lt;strong&gt;solve a particular problem&lt;/strong&gt;. Additionally, you also don't understand why the instructor uses a particular framework or why he/she is writing a piece of code in that way and not the other way round. &lt;/p&gt;

&lt;p&gt;Thus, it just becomes a case of copying code that the instructor is writing and not understanding its reasoning. So, while you may finish the course and build the application yet, you will be &lt;strong&gt;unable&lt;/strong&gt; to code something from scratch on your own.&lt;/p&gt;

&lt;p&gt;Instead, the best way to benefit from these courses is to &lt;strong&gt;modify the code&lt;/strong&gt; after you have finished the project. Try to break the code and change things around. Experiment with a different approach to implementing a specific feature. At the very least, try to add some &lt;strong&gt;functionality&lt;/strong&gt; on top of the course project. By adopting this approach, you will learn &lt;strong&gt;why things work the way they do&lt;/strong&gt; and understand the &lt;strong&gt;purpose&lt;/strong&gt; behind the code instead of merely copying it as your own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-try-to-master-everything" class="anchor"&gt;
  &lt;/a&gt;
  🏹 Don't try to Master Everything
&lt;/h2&gt;

&lt;p&gt;Finally, the last bit of advice I will give to upcoming programmers is that &lt;strong&gt;you don't have to learn each and everything under the sun&lt;/strong&gt;. When you first start to code, you quickly realize that there are WAY too many fields that you can choose from, and it can be quite overwhelming to decide what you want to do.&lt;/p&gt;

&lt;p&gt;Let me give you a taste of what I am talking about. Let's say you are interested in &lt;strong&gt;Web Development&lt;/strong&gt;. You can choose to become a front-end web developer and work with things like HTML, CSS, JavaScript, Sass, and frameworks like React, Angular, Vue, or libraries like Bootstrap, Tailwind CSS, etc.&lt;/p&gt;

&lt;p&gt;Or you can choose to be a back-end developer and work with languages like Python, PHP, JavaScript or frameworks like Django, Flask, Express, etc., and databases like MySQL, PostgreSQL or MongoDB, etc. &lt;/p&gt;

&lt;p&gt;Or you can choose both and become a full-stack developer and handle both the front and back-end of a web app. Do you see where I am getting at? And this is just one field. &lt;/p&gt;

&lt;p&gt;Maybe you fancy &lt;strong&gt;Mobile Development&lt;/strong&gt; or perhaps &lt;strong&gt;Game Development&lt;/strong&gt;. You might be into &lt;strong&gt;Machine Learning&lt;/strong&gt; or &lt;strong&gt;Artificial Intelligence&lt;/strong&gt; and work with data analysis and training complex neural networks. Or you might want to indulge in the field of &lt;strong&gt;cybersecurity&lt;/strong&gt; and work on ethical hacking and so on.&lt;/p&gt;

&lt;p&gt;Suffice it to say, and whatever you want to do, there is a field for it. My advice is to &lt;strong&gt;choose what you want to specialize in&lt;/strong&gt; and go all out in it. There is a high demand for talented individuals who are great developers in a specific field instead of knowing a bit about everything. So, experiment to find what you like and then focus on mastering skills needed in that field, and you'll be doing better than most.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  💭 Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;Thus, these were some of the things I learned since I started to code. I am in &lt;strong&gt;no way an expert&lt;/strong&gt; yet. This is the essence of what I have personally experienced in my 3 years of programming. I am thrilled to choose this field as my profession, and I want to give back to the community as much as possible. &lt;/p&gt;

&lt;p&gt;For all the new programmers starting, &lt;strong&gt;focus on fundamentals&lt;/strong&gt;, &lt;strong&gt;continue learning in your time&lt;/strong&gt; and &lt;strong&gt;don't forget to have fun!&lt;/strong&gt; 😊&lt;/p&gt;




&lt;p&gt;&lt;em&gt;&lt;a href="https://api.daily.dev/get?r=devto"&gt;daily.dev&lt;/a&gt; delivers the best programming news every new tab. We will rank hundreds of qualified sources for you so that you can hack the future.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://api.daily.dev/get?r=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnRWXIbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b996k4sm4efhietrzups.png" alt="Daily Poster"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
