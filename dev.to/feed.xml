<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is Neutralinojs? Alternative to Electron</title>
      <author>Rajvir Singh</author>
      <pubDate>Sun, 17 Oct 2021 12:05:55 +0000</pubDate>
      <link>https://dev.to/byteslash/what-is-neutralinojs-alternative-to-electron-5fjc</link>
      <guid>https://dev.to/byteslash/what-is-neutralinojs-alternative-to-electron-5fjc</guid>
      <description>&lt;p&gt;If you are looking for alternatives for &lt;a href="https://www.electronjs.org/"&gt;Electron&lt;/a&gt;, Then you should give it a try to &lt;a href="https://neutralino.js.org/"&gt;Neutralinojs&lt;/a&gt;. So today, I am going to help you found the best for you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-will-cover-the-following-things"&gt;
  &lt;/a&gt;
  We will cover the following things:-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is Neutralinojs?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What is better?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to get started?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-neutralionjs"&gt;
  &lt;/a&gt;
  What is Neutralionjs?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Neutralinojs is a lightweight and portable desktop application development framework. It lets you develop lightweight cross-platform desktop applications using JavaScript, HTML, and CSS. Apps built with Neutralinojs can run on Linux, macOS, Windows, and Web.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So &lt;a href="https://neutralino.js.org/"&gt;Neutralino&lt;/a&gt; or &lt;a href="https://neutralino.js.org/"&gt;Neutralinojs&lt;/a&gt; is a better way of creating desktop applications with web technologies. Neutralionjs was created because &lt;a href="https://www.electronjs.org/"&gt;Electron&lt;/a&gt; a popular desktop application tool is hated by developers for being memory hungry. So Neutralionjs solves this problem by being lightweight and easier to develop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-better"&gt;
  &lt;/a&gt;
  What is better?
&lt;/h2&gt;

&lt;p&gt;Simply Neutralionjs is better and faster than any other desktop framework right now If you take a glance at these &lt;a href="https://github.com/Elanis/web-to-desktop-framework-comparison#benchmarks"&gt;benchmarks&lt;/a&gt;. You will get a grasp of how blazing fast Neutralionjs is.&lt;/p&gt;

&lt;p&gt;I am pretty sure you are convinced right now, but if you are not convinced yet. Then let me tell you that &lt;strong&gt;if a build size of Electron is 180Mb then with Neutralionjs, it comes down to 2Mb.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So Clear Winner is Neutralionjs.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started"&gt;
  &lt;/a&gt;
  How to get started?
&lt;/h2&gt;

&lt;p&gt;So if you want to get started with Neutralionjs right away, Then follow the instructions to start a new project.&lt;/p&gt;

&lt;p&gt;You can use &lt;a href="https://neutralino.js.org/docs/cli/neu-cli"&gt;Neu Cli&lt;/a&gt; built by Neutralionjs developers.&lt;/p&gt;

&lt;p&gt;Type following commands in the terminal to get started.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; # Creating a new app
 $ npm i -g @neutralinojs/neu
 $ neu create hello-world
 $ cd hello-world
 $ neu run

 # Building your app
 $ neu build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can checkout &lt;a href="https://github.com/RajvirSingh1313/elecrue"&gt;Elecrue&lt;/a&gt;, It is a CLI for generating starter code for Electron or Neutralionjs with &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; or &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;. I am the maintainer of &lt;a href="https://github.com/RajvirSingh1313/elecrue"&gt;Elecrue&lt;/a&gt;, So I am adding Neutralionjs this week or next. And star it ‚≠ê for staying updated with &lt;a href="https://github.com/RajvirSingh1313/elecrue"&gt;Elecrue's&lt;/a&gt; progress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#electron-is-not-bad"&gt;
  &lt;/a&gt;
  Electron is not bad
&lt;/h3&gt;

&lt;p&gt;Electron is good as ram is there to be used by on-running programs but if you don't want your app to use a load of ram then you can try Neutralionjs. Otherwise, Electron is good for getting started with desktop applications if you are a web developer.&lt;br&gt;
You can read this article on &lt;a href="https://www.omgubuntu.co.uk/2017/07/why-electron-apps-arent-bad-2"&gt;Electron Apps Aren‚Äôt That Bad&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#neutralionjs-is-just-a-better-and-more-efficient-tool"&gt;
  &lt;/a&gt;
  Neutralionjs is just a better and more efficient tool
&lt;/h3&gt;

&lt;p&gt;I have just scratched the surface about Neutralionjs. It is a maintained open-source project, So you can contribute and make it even better üå±.&lt;br&gt;
You can check the &lt;a href="https://neutralino.js.org/docs/"&gt;documentation&lt;/a&gt; of the Neutralionjs to learn more about it.&lt;/p&gt;

&lt;p&gt;If you have any feedback or any suggestions, Then do let me know by commenting. And Follow me on &lt;a href="https://github.com/RajvirSingh1313"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have a good day,&lt;br&gt;
Rajvir Singh&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Day 9 of 100 Days of Code &amp; Scrum: Planning the Second Week!</title>
      <author>Rammina</author>
      <pubDate>Sun, 17 Oct 2021 11:58:38 +0000</pubDate>
      <link>https://dev.to/rammina/day-9-of-100-days-of-code-scrum-planning-the-second-week-136g</link>
      <guid>https://dev.to/rammina/day-9-of-100-days-of-code-scrum-planning-the-second-week-136g</guid>
      <description>&lt;p&gt;Cover Image by &lt;a href="https://pixabay.com/users/mohamed_hassan-5229782/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=3229690"&gt;mohamed Hassan&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=3229690"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good Sunday, everyone!&lt;/p&gt;

&lt;p&gt;I took a healthy break for the day, while still meeting the requirements of the challenge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I did my Weekly Sprint Review and Retrospective, in which I went over what I've managed to do well, what my shortcomings were, and what I could do better in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Since it's the start of a new week, I planned out what I should be doing and established my new &lt;code&gt;Sprint Goals&lt;/code&gt;. My focus for this week will be &lt;strong&gt;Scrum&lt;/strong&gt;, to prepare for the upcoming &lt;a href="https://chingu.io/"&gt;Chingu&lt;/a&gt; voyage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;focus on learning &lt;strong&gt;Scrum&lt;/strong&gt; principles&lt;/li&gt;
&lt;li&gt;study for Professional Scrum Master I (PSM I) certification&lt;/li&gt;
&lt;li&gt;write some guides about Scrum&lt;/li&gt;
&lt;li&gt;continue learning GraphQL&lt;/li&gt;
&lt;li&gt;continue networking&lt;/li&gt;
&lt;li&gt;no interviews for now&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.howtographql.com/"&gt;The Fullstack Tutorial for GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.apollographql.com/docs/"&gt;Apollo Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/chingu/a-short-introduction-to-the-scrum-methodology-7a23431b9f17"&gt;A Short Introduction to the Scrum Framework by Jim Medlock&lt;/a&gt; - A well-written introduction to the Scrum framework.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope everyone's doing well in their weekend!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Very Simple PHP Redirect</title>
      <author>Katz Ueno</author>
      <pubDate>Sun, 17 Oct 2021 11:53:21 +0000</pubDate>
      <link>https://dev.to/katzueno/very-simple-php-redirect-5cf6</link>
      <guid>https://dev.to/katzueno/very-simple-php-redirect-5cf6</guid>
      <description>&lt;p&gt;If you've moved (are planning to move) to new domain &amp;amp; you don't want to simply redirect to new domain.&lt;br&gt;
You want to tell your site visitors that your domain has changed.&lt;/p&gt;

&lt;p&gt;This simple PHP script shows very simple message that domain has changed for set amount of seconds, then redirected to the new domain.&lt;/p&gt;

&lt;p&gt;It is also render 301 status code. So Google will know your page was moved, too.&lt;/p&gt;

&lt;p&gt;It will fetch the current request URL, and redirect to the new domain with exact same URI.&lt;/p&gt;

&lt;p&gt;By the way, it has Japanese text, too :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/katzueno/simple-php-redirect"&gt;https://github.com/katzueno/simple-php-redirect&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post was copied from Readme. If there is a newer version and newer description at GitHub readme, refer to GitHub's readme.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#requirement"&gt;
  &lt;/a&gt;
  Requirement
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;For Apache server, mod_rewrite module should be enabled, and allowing to use .htaccess

&lt;ul&gt;
&lt;li&gt;You could set it in Apache config.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For Nginx server

&lt;ul&gt;
&lt;li&gt;PHP-FPM&lt;/li&gt;
&lt;li&gt;Ability to set nginx config&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#how-to-install"&gt;
  &lt;/a&gt;
  How to install
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Change the config values such as new domain to index.php to your desired state.&lt;/li&gt;
&lt;li&gt;Place (or upload) index.php script to your old domain's webroot and clear all other files&lt;/li&gt;
&lt;li&gt;Edit your apache config, .htaccess or Nginx config so that all request will go through this index.php&lt;/li&gt;
&lt;li&gt;Enjoy the rest&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#where-to-set"&gt;
  &lt;/a&gt;
  Where to set
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;$newDomain&lt;/code&gt;: Enter the new domain name. Starts with &lt;code&gt;https://&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$siteNameEn&lt;/code&gt;: Site name in English.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$siteNameJa&lt;/code&gt;: Site name in Japanese.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$sec&lt;/code&gt;: Seconds to wait and redirect&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#apaches-htaccess-example"&gt;
  &lt;/a&gt;
  Apache's .htaccess example
&lt;/h2&gt;

&lt;p&gt;Create .htaccess file (if your server is allowing it), and enter the following.&lt;br&gt;
If you want to place it under some directory, make sure to change &lt;code&gt;RewriteBase&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;IfModule mod_rewrite.c&amp;gt;
RewriteEngine On
RewriteBase / # if it's lives under subdirectory, add the directory accordingly
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME}/index.html !-f
RewriteCond %{REQUEST_FILENAME}/index.php !-f
RewriteRule . index.php [L]
&amp;lt;/IfModule&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#nginx-config-example"&gt;
  &lt;/a&gt;
  Nginx config example
&lt;/h2&gt;

&lt;p&gt;I assume you know about Nginx server and its config.&lt;br&gt;
Add the following config in your nginx config.&lt;br&gt;
I assume you've set &lt;code&gt;~ \.php($|/)&lt;/code&gt; location to send it to php-fpm.&lt;br&gt;
Change location to sub-directory if you want just to place underneath, and &lt;code&gt;absolute_redirect&lt;/code&gt; must be turned off.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;location / {
    index index.php index.html index.htm;
    if (!-e $request_filename) {
        rewrite ^ /index.php last;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enjoy.&lt;/p&gt;

</description>
      <category>php</category>
      <category>devops</category>
    </item>
    <item>
      <title>Build a personalized Image Editor with Cloudinary + Auth0</title>
      <author>Demola Malomo</author>
      <pubDate>Sun, 17 Oct 2021 11:51:45 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-a-personalized-image-editor-with-cloudinary-auth0-1054</link>
      <guid>https://dev.to/hackmamba/build-a-personalized-image-editor-with-cloudinary-auth0-1054</guid>
      <description>&lt;p&gt;Image editing is the art of altering digital photographs, traditional photo-chemical photographs, or illustrations to make them look more like what you saw with your eyes. The constant demand for image editing has brought about the invention of new software, jobs, and specialized personnel to help improve the quality of images.&lt;/p&gt;

&lt;p&gt;In this post, we will discuss how to build a personalized image editor using &lt;a href="https://cloudinary.com/"&gt;Cloudinary&lt;/a&gt;, &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt;, and &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;. We can think of this as a lighter version &lt;a href="https://www.adobe.com/uk/products/photoshop.html"&gt;photoshop&lt;/a&gt; or &lt;a href="https://affinity.serif.com/en-gb/photo/"&gt;afinity photo&lt;/a&gt;. At the end of this tutorial, we would have learnt how to add image editing functionality using Cloudinary Media Editor and secure the web application using Auth0.&lt;/p&gt;

&lt;p&gt;By way of introduction, Cloudinary is a platform on which you can quickly and easily upload, store, manage, transform, and deliver images and videos for websites and apps. The platform also offers a vast collection of SDKs for frontend frameworks and libraries. &lt;/p&gt;

&lt;p&gt;Auth0 is a platform that offers systems to rapidly integrate authentication and authorization for web, mobile, and legacy applications.&lt;/p&gt;

&lt;p&gt;Next.js is a React-based front-end development framework that enables functionalities like server-side rendering, static site generation, file-system routing (with no need to manually configure &lt;code&gt;react-router-dom&lt;/code&gt;), and API endpoints for backend features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h2&gt;

&lt;p&gt;You can find the source code of this project &lt;a href="https://github.com/Mr-Malomz/media_editor"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;The next steps in this post require JavaScript and React.js experience. Experience with Next.js isn‚Äôt a requirement, but it‚Äôs nice to have.&lt;/p&gt;

&lt;p&gt;We also need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://cloudinary.com/"&gt;Cloudinary account&lt;/a&gt; for file hosting. &lt;a href="https://cloudinary.com/users/register/free"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;An &lt;a href="https://auth0.com/"&gt;Auth0 account&lt;/a&gt; for authentication. &lt;a href="https://auth0.com/signup?place=header&amp;amp;type=button&amp;amp;text=sign%20up"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;We need to create a Next.js starter project by navigating to the desired directory and running the command below in our terminal&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app media_editor &amp;amp;&amp;amp; cd media_editor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command creates a Next.js project called &lt;code&gt;media_editor&lt;/code&gt; and navigates into the project directory.&lt;/p&gt;

&lt;p&gt;We proceed to install the required dependencies with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-helmet @auth0/nextjs-auth0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;react-helmet&lt;/code&gt; is a &lt;a href="https://github.com/nfl/react-helmet"&gt;library&lt;/a&gt; that takes plain HTML tags and outputs plain HTML tags. It will help us avoid the &lt;code&gt;Reference error: Window is not Defined&lt;/code&gt; error when using client-side only packages in Next.js.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@auth0/nextjs-auth0&lt;/code&gt; is a &lt;a href="https://github.com/auth0/nextjs-auth0"&gt;library&lt;/a&gt; for implementing user authentication in Next.js applications.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#image-editing-with-cloudinary"&gt;
  &lt;/a&gt;
  Image editing with Cloudinary
&lt;/h1&gt;

&lt;p&gt;Cloudinary provides an interactive user interface providing a set of everyday image editing actions that we can use on our website or application. The editor helps us scale internal operations by reducing dependency on designers by allowing us to manually review/fix media assets when needed. To add a media editor to our application, we need to follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upload image to Cloudinary using &lt;strong&gt;Cloudinary Upload Widget&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Pass the returned uploaded image &lt;code&gt;publicId&lt;/code&gt; to &lt;strong&gt;Cloudinary Media Editor&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Specify image editing steps:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;resizeAndCrop&lt;/code&gt; to resize and crop images&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;textOverlays&lt;/code&gt; add text overlay on images&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;export&lt;/code&gt; to download edited images&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#integrating-cloudinary"&gt;
  &lt;/a&gt;
  Integrating Cloudinary
&lt;/h2&gt;

&lt;p&gt;With the project dependencies installed, we can leverage Next.js &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Module&lt;/a&gt; support to style our page by replacing the content in &lt;code&gt;Home.module.css&lt;/code&gt; in the &lt;code&gt;styles&lt;/code&gt; folder with the gist below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Home.module.css&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;With that done, we can update the &lt;code&gt;index.js&lt;/code&gt; file in the &lt;code&gt;pages&lt;/code&gt; folder by importing the styles created, configure Cloudinary Upload Widget and Cloudinary Media Editor to upload files to Cloudinary and edit uploaded images, respectively. We also include states to handle returned image &lt;code&gt;publicId&lt;/code&gt; and editing state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Helmet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-helmet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEditing&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openUpload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloudinary&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUploadWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;cloudName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dtgbzmpca&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;uploadPreset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tca2j0ee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;public_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;setEditing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openEditor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myEditor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cloudinary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaEditor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;myEditor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;publicIds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="na"&gt;cloudName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dtgbzmpca&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resizeAndCrop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;textOverlays&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;export&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;myEditor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;myEditor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;export&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setEditing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Helmet&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://media-editor.cloudinary.com/all.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://upload-widget.cloudinary.com/global/all.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Helmet&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* remaining JSX comes here */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The Cloudinary Upload Widget and Cloudinary Media Widget also configures &lt;code&gt;cloudName&lt;/code&gt;, &lt;code&gt;uploadPreset&lt;/code&gt;, and &lt;code&gt;publicIds&lt;/code&gt; , &lt;code&gt;cloudName&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;, respectively. Finally, we used &lt;code&gt;react-helmet&lt;/code&gt; to add Cloudinary Upload Widget and Cloudinary Media Widget CDNs to the application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSPmUwQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4BCCCE95ACE9B0C1081840B08C278ED838CD7BEFE9CA8C7C882D08A88A918EB2_1620114874519_cloudname.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSPmUwQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4BCCCE95ACE9B0C1081840B08C278ED838CD7BEFE9CA8C7C882D08A88A918EB2_1620114874519_cloudname.png" alt="Shaded portions are where your cloud name is located in Cloudinary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create a new upload preset, click on the &lt;strong&gt;Settings&lt;/strong&gt; Icon, select the &lt;strong&gt;Upload&lt;/strong&gt; tab, navigate to the &lt;strong&gt;Upload presets&lt;/strong&gt; section, click on the &lt;strong&gt;Add Upload preset&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3MFOUkhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4BCCCE95ACE9B0C1081840B08C278ED838CD7BEFE9CA8C7C882D08A88A918EB2_1620116773149_Screenshot%2B2021-05-04%2Bat%2B01.49.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3MFOUkhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4BCCCE95ACE9B0C1081840B08C278ED838CD7BEFE9CA8C7C882D08A88A918EB2_1620116773149_Screenshot%2B2021-05-04%2Bat%2B01.49.21.png" alt="select preset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tQg05hy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4BCCCE95ACE9B0C1081840B08C278ED838CD7BEFE9CA8C7C882D08A88A918EB2_1620117224843_Screenshot%2B2021-05-04%2Bat%2B01.50.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tQg05hy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4BCCCE95ACE9B0C1081840B08C278ED838CD7BEFE9CA8C7C882D08A88A918EB2_1620117224843_Screenshot%2B2021-05-04%2Bat%2B01.50.21.png" alt="copy preset name, change to Unsigned and save"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find out more about Cloudinary Upload Widget &lt;a href="https://cloudinary.com/documentation/upload_widget"&gt;here&lt;/a&gt; and Cloudinary Media Widget &lt;a href="https://cloudinary.com/documentation/media_editor"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, we need to include our markup to upload and edit image.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;//imports here&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//states here&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openUpload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//upload widget code&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openEditor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//media widget code&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Helmet&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://media-editor.cloudinary.com/all.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://upload-widget.cloudinary.com/global/all.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Helmet&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;Log&lt;/span&gt; &lt;span class="nx"&gt;Out&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonwrapper&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;editing&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;openUpload&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nx"&gt;Upload&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="p"&gt;)}&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;editing&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="nx"&gt;uploaded&lt;/span&gt; &lt;span class="nx"&gt;successfully&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;openEditor&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="nx"&gt;Open&lt;/span&gt; &lt;span class="nx"&gt;Editor&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="p"&gt;)}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, we can start a development server and test our application:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQ4x8Fci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_9AC0BFCEAD044A9F9FB389D81CABE903F91CC43814F0AA82F32D3333CE44AE06_1633604346759_Screenshot%2B2021-10-07%2Bat%2B11.55.58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQ4x8Fci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_9AC0BFCEAD044A9F9FB389D81CABE903F91CC43814F0AA82F32D3333CE44AE06_1633604346759_Screenshot%2B2021-10-07%2Bat%2B11.55.58.png" alt="Upload Image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ilyh9-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_9AC0BFCEAD044A9F9FB389D81CABE903F91CC43814F0AA82F32D3333CE44AE06_1633604346785_Screenshot%2B2021-10-07%2Bat%2B11.57.26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ilyh9-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_9AC0BFCEAD044A9F9FB389D81CABE903F91CC43814F0AA82F32D3333CE44AE06_1633604346785_Screenshot%2B2021-10-07%2Bat%2B11.57.26.png" alt="Select image to upload"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXg-XzNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_9AC0BFCEAD044A9F9FB389D81CABE903F91CC43814F0AA82F32D3333CE44AE06_1633604346813_Screenshot%2B2021-10-07%2Bat%2B11.58.00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXg-XzNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_9AC0BFCEAD044A9F9FB389D81CABE903F91CC43814F0AA82F32D3333CE44AE06_1633604346813_Screenshot%2B2021-10-07%2Bat%2B11.58.00.png" alt="Start editing image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---2840P6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_9AC0BFCEAD044A9F9FB389D81CABE903F91CC43814F0AA82F32D3333CE44AE06_1633604346851_Screenshot%2B2021-10-07%2Bat%2B11.58.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---2840P6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_9AC0BFCEAD044A9F9FB389D81CABE903F91CC43814F0AA82F32D3333CE44AE06_1633604346851_Screenshot%2B2021-10-07%2Bat%2B11.58.21.png" alt="Editing uploaded image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#adding-authentication-with-auth0"&gt;
  &lt;/a&gt;
  Adding Authentication with Auth0
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#setup-a-developer-account"&gt;
  &lt;/a&gt;
  Setup a Developer Account
&lt;/h2&gt;

&lt;p&gt;To get started, we need to log into our &lt;a href="https://auth0.com/auth/login"&gt;Auth0&lt;/a&gt; dashboard. Click on &lt;strong&gt;Applications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WS-BYDSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633445331548_Screenshot%2B2021-10-05%2Bat%2B15.44.55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WS-BYDSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633445331548_Screenshot%2B2021-10-05%2Bat%2B15.44.55.png" alt="Auth0 Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the application page, click on the &lt;strong&gt;Create Application&lt;/strong&gt; button, input application name &lt;code&gt;auth0Cloudinary&lt;/code&gt; in our case, select &lt;strong&gt;Regular Web Application&lt;/strong&gt; as the application type and &lt;strong&gt;Create&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UkXqZAMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633446208392_Screenshot%2B2021-10-05%2Bat%2B15.50.45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UkXqZAMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633446208392_Screenshot%2B2021-10-05%2Bat%2B15.50.45.png" alt="Creating a new app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Settings&lt;/strong&gt; tab and copy the &lt;strong&gt;Domain,&lt;/strong&gt; &lt;strong&gt;Client ID,&lt;/strong&gt; and &lt;strong&gt;Client Secret&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2UhLu8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633446417723_Screenshot%2B2021-10-05%2Bat%2B16.04.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2UhLu8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633446417723_Screenshot%2B2021-10-05%2Bat%2B16.04.21.png" alt="copy credentials"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then scroll down to the &lt;strong&gt;Applications URIs&lt;/strong&gt; section and fill in the details below for &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt; and &lt;strong&gt;Allowed Logout URLs,&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allowed Callback URLs

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost:3000/api/auth/callback&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allowed Logout URLs

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;http://localhost:3000/&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZZaY47G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633447038602_Screenshot%2B2021-10-05%2Bat%2B16.12.18.png" alt="URIs"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then scroll down to the bottom of the page and click on the &lt;strong&gt;Save Changes&lt;/strong&gt; button*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#integrating-auth0-with-nextjs"&gt;
  &lt;/a&gt;
  Integrating Auth0 with Next.js
&lt;/h2&gt;

&lt;p&gt;To integrate Auth0 in our application, we need to create an &lt;code&gt;.env.local&lt;/code&gt; file in our root directory and fill in the required parameters(&lt;strong&gt;Domain, Client ID and Client Secret&lt;/strong&gt;) as shown below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AUTH0_SECRET='LONG_RANDOM_VALUE'
AUTH0_BASE_URL='http://localhost:3000'
AUTH0_ISSUER_BASE_URL='https://YOUR_AUTH0_DOMAIN.auth0.com'
AUTH0_CLIENT_ID='YOUR_AUTH0_CLIENT_ID'
AUTH0_CLIENT_SECRET='YOUR_AUTH0_CLIENT_SECRET'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;We can run the snippet below on our terminal to generate a random secret for the &lt;code&gt;AUTH0_SECRET&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node -e "console.log(crypto.randomBytes(32).toString('hex'))"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Next, we need to create a dynamic route file for our APIs. We need to navigate to the &lt;code&gt;pages&lt;/code&gt; folder, inside this folder, navigate to the &lt;code&gt;api&lt;/code&gt; folder, in the folder, create an &lt;code&gt;auth&lt;/code&gt; folder, and inside this folder, create an &lt;code&gt;[‚Ä¶auth0].js&lt;/code&gt; file and add the snippet below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handleAuth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@auth0/nextjs-auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;handleAuth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;handleAuth()&lt;/code&gt; function will generate APIs for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/auth/login&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logout

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/auth/logout&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fetch user data

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/auth/me&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Redirect user on successful login.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/auth/callback&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;_app.js&lt;/code&gt; file inside the &lt;code&gt;pages&lt;/code&gt; folder as shown below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@auth0/nextjs-auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/UserProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, we need to update &lt;code&gt;index.js&lt;/code&gt; as shown below&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;//other imports here&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withPageAuthRequired&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@auth0/nextjs-auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//update this with destructure props&lt;/span&gt;
      &lt;span class="c1"&gt;//state goes here&lt;/span&gt;

      &lt;span class="c1"&gt;//functions goes here&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Helmet&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://upload-widget.cloudinary.com/global/all.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Helmet&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/auth/logout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* add href to this*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;Log&lt;/span&gt; &lt;span class="nx"&gt;Out&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt; {/&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*remaining code snippet goes here*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withPageAuthRequired&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;returnTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the snippet above, we imported &lt;code&gt;withPageAuthRequired&lt;/code&gt; and also modified the &lt;code&gt;log out&lt;/code&gt; link. We used Next.js inbuilt method &lt;code&gt;getServerSideProps&lt;/code&gt; to call the &lt;code&gt;withPageAuthRequired&lt;/code&gt; method, specified the URL to redirect to after login, accessed the &lt;code&gt;user&lt;/code&gt; props it returned and then displayed the user‚Äôs name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complete index.js&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post discussed how to build and secure an application that supports uploading, editing, and downloading images.&lt;/p&gt;

&lt;p&gt;You may find these resources useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudinary.com/documentation/upload_presets"&gt;Cloudinary upload presets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudinary.com/documentation/upload_widget"&gt;Cloudinary upload widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudinary.com/documentation/media_editor"&gt;Cloudinary media editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/auth0/nextjs-auth0"&gt;Next.js Auth0 library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Content created for the &lt;a href="https://content.hackmamba.io/"&gt;Hackmamba&lt;/a&gt; Jamstack Content Hackathon.&lt;/p&gt;

</description>
      <category>cloudinary</category>
      <category>hackjamstack</category>
      <category>auth0</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>Build a file storage system with Cloudinary + Auth0</title>
      <author>Demola Malomo</author>
      <pubDate>Sun, 17 Oct 2021 11:27:20 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-a-file-storage-system-with-cloudinary-auth0-kn</link>
      <guid>https://dev.to/hackmamba/build-a-file-storage-system-with-cloudinary-auth0-kn</guid>
      <description>&lt;p&gt;File hosting and synchronization services like Google Drive, OneDrive, iCloud, e.t.c allow users to store files in the cloud, synchronize files across devices, and share files. They help save space on devices by digitizing files, integrating storage, and supporting remote access.&lt;/p&gt;

&lt;p&gt;In this post, we will discuss how to build a personalized and secure file storage system using &lt;a href="https://cloudinary.com/"&gt;Cloudinary&lt;/a&gt;, &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt;, and &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;. At the end of this tutorial, we would have learnt how to host files on Cloudinary by tag, serve files and secure the web application using Auth0.&lt;/p&gt;

&lt;p&gt;By way of introduction, Cloudinary is a platform on which you can quickly and easily upload, store, manage, transform, and deliver images and videos for websites and apps. The platform also offers a vast collection of SDKs for frontend frameworks and libraries. &lt;/p&gt;

&lt;p&gt;Auth0 is a platform that offers systems to rapidly integrate authentication and authorization for web, mobile, and legacy applications.&lt;/p&gt;

&lt;p&gt;Next.js is a React-based front-end development framework that enables functionalities like server-side rendering, static site generation, file-system routing (with no need to manually configure &lt;code&gt;react-router-dom&lt;/code&gt;), and API endpoints for backend features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h2&gt;

&lt;p&gt;You can find the source code of this project &lt;a href="https://github.com/Mr-Malomz/mini_drive"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;The next steps in this post require JavaScript and React.js experience. Experience with Next.js isn‚Äôt a requirement, but it‚Äôs nice to have.&lt;/p&gt;

&lt;p&gt;We also need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://cloudinary.com/"&gt;Cloudinary account&lt;/a&gt; for file hosting. &lt;a href="https://cloudinary.com/users/register/free"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;An &lt;a href="https://auth0.com/"&gt;Auth0 account&lt;/a&gt; for authentication. &lt;a href="https://auth0.com/signup?place=header&amp;amp;type=button&amp;amp;text=sign%20up"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;We need to create a Next.js starter project by navigating to the desired directory and running the command below in our terminal&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app mini_drive &amp;amp;&amp;amp; cd mini_drive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command creates a Next.js project called &lt;code&gt;mini_drive&lt;/code&gt; and navigates into the project directory.&lt;/p&gt;

&lt;p&gt;We proceed to install the required dependencies with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-helmet cloudinary-react @auth0/nextjs-auth0 axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;react-helmet&lt;/code&gt; is a &lt;a href="https://github.com/nfl/react-helmet"&gt;library&lt;/a&gt; that takes plain HTML tags and outputs plain HTML tags. It will help us avoid the &lt;code&gt;Reference error: Window is not Defined&lt;/code&gt; error when using client-side only packages in Next.js.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cloudinary-react&lt;/code&gt; is a &lt;a href="https://github.com/cloudinary/cloudinary-react#readme"&gt;library&lt;/a&gt; that handles rendering of media files.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@auth0/nextjs-auth0&lt;/code&gt; is a &lt;a href="https://github.com/auth0/nextjs-auth0"&gt;library&lt;/a&gt; for implementing user authentication in Next.js applications.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;axios&lt;/code&gt; is a &lt;a href="https://github.com/axios/axios"&gt;library&lt;/a&gt; that handles http calls.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#file-storage-and-management-with-cloudinary"&gt;
  &lt;/a&gt;
  File storage and management with Cloudinary
&lt;/h1&gt;

&lt;p&gt;With the project dependencies installed, we can leverage Next.js &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Module&lt;/a&gt; support to style our page by replacing the content in &lt;code&gt;Home.module.css&lt;/code&gt; in the &lt;code&gt;styles&lt;/code&gt; folder with the gist below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;With that done, we can update  &lt;code&gt;index.js&lt;/code&gt; file in the &lt;code&gt;pages&lt;/code&gt;  folder by importing the styles created and configure Cloudinary Upload Widget to upload files to Cloudinary. We also include state variables to handle: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Changing tabs between images, videos and files&lt;/li&gt;
&lt;li&gt;The filetype to be uploaded(images, videos or files). We will use this to tag our upload&lt;/li&gt;
&lt;li&gt;The returned url.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Helmet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-helmet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTab&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFiletype&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setURL&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setFiletype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openWidget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloudinary&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUploadWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;cloudName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dtgbzmpca&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;uploadPreset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tca2j0ee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;openWidget&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Helmet&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://upload-widget.cloudinary.com/global/all.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Helmet&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* remaining JSX comes here */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The Cloudinary Upload Widget also configures &lt;code&gt;cloudName&lt;/code&gt;  &lt;code&gt;uploadPreset&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt;. The &lt;code&gt;cloudname&lt;/code&gt; is the name of our Cloudinary account,  &lt;code&gt;uploadPreset&lt;/code&gt; is a parameter that enables us to centrally define a set of asset upload options instead of specifying them in each upload call and &lt;code&gt;tags&lt;/code&gt; (highlighted above) are keywords to make files more searchable. &lt;code&gt;tags&lt;/code&gt; will come in handy when separating our files into tabs and updated the &lt;code&gt;url&lt;/code&gt; with returned URL. Finally, we used &lt;code&gt;react-helmet&lt;/code&gt; to add Cloudinary Upload Widget CDN to the application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSPmUwQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4BCCCE95ACE9B0C1081840B08C278ED838CD7BEFE9CA8C7C882D08A88A918EB2_1620114874519_cloudname.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSPmUwQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4BCCCE95ACE9B0C1081840B08C278ED838CD7BEFE9CA8C7C882D08A88A918EB2_1620114874519_cloudname.png" alt="Shaded portions are where your cloud name is located in Cloudinary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create a new upload preset, click on the &lt;strong&gt;Settings&lt;/strong&gt; Icon, select the &lt;strong&gt;Upload&lt;/strong&gt; tab, navigate to the &lt;strong&gt;Upload presets&lt;/strong&gt; section, click on the &lt;strong&gt;Add Upload preset&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3MFOUkhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4BCCCE95ACE9B0C1081840B08C278ED838CD7BEFE9CA8C7C882D08A88A918EB2_1620116773149_Screenshot%2B2021-05-04%2Bat%2B01.49.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3MFOUkhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4BCCCE95ACE9B0C1081840B08C278ED838CD7BEFE9CA8C7C882D08A88A918EB2_1620116773149_Screenshot%2B2021-05-04%2Bat%2B01.49.21.png" alt="select preset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tQg05hy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4BCCCE95ACE9B0C1081840B08C278ED838CD7BEFE9CA8C7C882D08A88A918EB2_1620117224843_Screenshot%2B2021-05-04%2Bat%2B01.50.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tQg05hy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4BCCCE95ACE9B0C1081840B08C278ED838CD7BEFE9CA8C7C882D08A88A918EB2_1620117224843_Screenshot%2B2021-05-04%2Bat%2B01.50.21.png" alt="copy preset name, change to Unsigned and save"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find out more about Cloudinary Upload Widget &lt;a href="https://cloudinary.com/documentation/upload_widget"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then we need to include our markup for form and tabs as shown below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;With that done, we can start a development server using the command below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IKUX7R2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633426447638_Screenshot%2B2021-10-05%2Bat%2B10.33.32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IKUX7R2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633426447638_Screenshot%2B2021-10-05%2Bat%2B10.33.32.png" alt="running application"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-components-to-handle-images-videos-and-files"&gt;
  &lt;/a&gt;
  Adding components to handle images, videos and files
&lt;/h2&gt;

&lt;p&gt;To display our files, we need to create a &lt;code&gt;components&lt;/code&gt; folder in the root directory and, in the folder, create an &lt;code&gt;ImageList.js&lt;/code&gt;,  &lt;code&gt;VideoList.js&lt;/code&gt;, and &lt;code&gt;FileList.js&lt;/code&gt; files and add the code snippet below respectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ImageList.js&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VideoList.js&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;FileList.js&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The above snippets perform these tasks respectively:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a component that takes &lt;code&gt;url&lt;/code&gt; as a prop.&lt;/li&gt;
&lt;li&gt;Create states to manage loading, error and returned list.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;useEffect&lt;/code&gt; hooks to get list of resources matching the specified tag and update state accordingly.
The Cloudinary URL follows this format&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;http://res.cloudinary.com/&amp;lt;your_cloud_name&amp;gt;/&amp;lt;resource_type&amp;gt;/list/&amp;lt;tag&amp;gt;.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;your_cloud_name&amp;gt;&lt;/code&gt;  is the name of our Cloudinary account.&lt;br&gt;
&lt;code&gt;&amp;lt;resource_type&amp;gt;&lt;/code&gt; is the resource type. &lt;code&gt;image&lt;/code&gt;, &lt;code&gt;video&lt;/code&gt;, and &lt;code&gt;raw&lt;/code&gt; in our case.&lt;br&gt;
&lt;code&gt;&amp;lt;tag&amp;gt;&lt;/code&gt; is to get the list of  resources matching the tag. &lt;strong&gt;images&lt;/strong&gt;, &lt;strong&gt;videos&lt;/strong&gt;, and &lt;strong&gt;files&lt;/strong&gt; in our case&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conditionally render the returned list of Images and Videos using &lt;code&gt;cloudinary-react&lt;/code&gt; and list of files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we need to import the components and include them inside the &lt;code&gt;index.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated Index.js&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#cloudinary-restricted-media-types"&gt;
  &lt;/a&gt;
  Cloudinary Restricted Media Types
&lt;/h2&gt;

&lt;p&gt;In other to protect our account and quotas from being abused or misused by others. Cloudinary restricts creation of new resources via unsigned requests. Before we start testing our application, we need to disable &lt;strong&gt;Resource List&lt;/strong&gt; in our Cloudinary console.&lt;/p&gt;

&lt;p&gt;To do this, we need to &lt;a href="https://cloudinary.com/users/login"&gt;login&lt;/a&gt; into our Cloudinary account, click on the &lt;strong&gt;settings icon,&lt;/strong&gt; select the &lt;strong&gt;Security&lt;/strong&gt; tab, and uncheck the &lt;strong&gt;Resource List&lt;/strong&gt; option, then scroll down to the bottom of the page and &lt;strong&gt;Save&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---85tm_Ai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633442222698_Screenshot%2B2021-10-05%2Bat%2B14.50.24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---85tm_Ai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633442222698_Screenshot%2B2021-10-05%2Bat%2B14.50.24.png" alt="Resource List."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we can test our application by selecting the media type, uploading files and view them on different tabs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-authentication-with-auth0"&gt;
  &lt;/a&gt;
  Adding Authentication with Auth0
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#setup-a-developer-account"&gt;
  &lt;/a&gt;
  Setup a Developer Account
&lt;/h2&gt;

&lt;p&gt;To get started, we need to log into our &lt;a href="https://auth0.com/auth/login"&gt;Auth0&lt;/a&gt; dashboard. Click on &lt;strong&gt;Applications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WS-BYDSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633445331548_Screenshot%2B2021-10-05%2Bat%2B15.44.55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WS-BYDSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633445331548_Screenshot%2B2021-10-05%2Bat%2B15.44.55.png" alt="Auth0 Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the application page, click on the &lt;strong&gt;Create Application&lt;/strong&gt; button, input application name &lt;code&gt;auth0Cloudinary&lt;/code&gt; in our case, select &lt;strong&gt;Regular Web Application&lt;/strong&gt; as the application type and &lt;strong&gt;Create&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UkXqZAMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633446208392_Screenshot%2B2021-10-05%2Bat%2B15.50.45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UkXqZAMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633446208392_Screenshot%2B2021-10-05%2Bat%2B15.50.45.png" alt="Creating a new app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Settings&lt;/strong&gt; tab and copy the &lt;strong&gt;Domain,&lt;/strong&gt; &lt;strong&gt;Client ID,&lt;/strong&gt; and &lt;strong&gt;Client Secret&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2UhLu8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633446417723_Screenshot%2B2021-10-05%2Bat%2B16.04.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2UhLu8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633446417723_Screenshot%2B2021-10-05%2Bat%2B16.04.21.png" alt="copy credentials"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then scroll down to the &lt;strong&gt;Applications URIs&lt;/strong&gt; section and fill in the details below for &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt; and &lt;strong&gt;Allowed Logout URLs,&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allowed Callback URLs

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost:3000/api/auth/callback&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Allowed Logout URLs

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;http://localhost:3000/&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZZaY47G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_39889F3A941E007B2BE724DE6F2C4C4FFE6C2B007CCCDB3B36F915067C40E3D1_1633447038602_Screenshot%2B2021-10-05%2Bat%2B16.12.18.png" alt="URIs"&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then scroll down to the bottom of the page and click on the &lt;strong&gt;Save Changes&lt;/strong&gt; button*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrating-auth0-with-nextjs"&gt;
  &lt;/a&gt;
  Integrating Auth0 with Next.js
&lt;/h2&gt;

&lt;p&gt;To integrate Auth0 in our application, we need to create an &lt;code&gt;.env.local&lt;/code&gt; file in our root directory and fill in the required parameters(&lt;strong&gt;Domain, Client ID and Client Secret&lt;/strong&gt;) as shown below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AUTH0_SECRET='LONG_RANDOM_VALUE'
AUTH0_BASE_URL='http://localhost:3000'
AUTH0_ISSUER_BASE_URL='https://YOUR_AUTH0_DOMAIN.auth0.com'
AUTH0_CLIENT_ID='YOUR_AUTH0_CLIENT_ID'
AUTH0_CLIENT_SECRET='YOUR_AUTH0_CLIENT_SECRET'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;We can run the snippet below on our terminal to generate a random secret for the &lt;code&gt;AUTH0_SECRET&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node -e "console.log(crypto.randomBytes(32).toString('hex'))"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Next, we need to create a dynamic route file for our APIs. We need to navigate to the &lt;code&gt;pages&lt;/code&gt; folder, inside this folder, navigate to the &lt;code&gt;api&lt;/code&gt; folder, in the folder, create an &lt;code&gt;auth&lt;/code&gt; folder, and inside this folder, create an &lt;code&gt;[‚Ä¶auth0].js&lt;/code&gt; file and add the snippet below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handleAuth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@auth0/nextjs-auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;handleAuth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;handleAuth()&lt;/code&gt; function will generate APIs for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/auth/login&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logout

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/auth/logout&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fetch user data

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/auth/me&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Redirect user on successful login.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/auth/callback&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;_app.js&lt;/code&gt; file inside the &lt;code&gt;pages&lt;/code&gt; folder as shown below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@auth0/nextjs-auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/UserProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, we need to update &lt;code&gt;index.js&lt;/code&gt; as shown below&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;//other imports here&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withPageAuthRequired&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@auth0/nextjs-auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//update this with destructure props&lt;/span&gt;
      &lt;span class="c1"&gt;//state goes here&lt;/span&gt;

      &lt;span class="c1"&gt;//functions goes here&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Helmet&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://upload-widget.cloudinary.com/global/all.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Helmet&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/auth/logout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* add href to this*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;Log&lt;/span&gt; &lt;span class="nx"&gt;Out&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt; {/&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*remaining code snippet goes here*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withPageAuthRequired&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;returnTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the snippet above, we imported &lt;code&gt;withPageAuthRequired&lt;/code&gt; and also modified the &lt;code&gt;log out&lt;/code&gt; link. We used Next.js inbuilt method &lt;code&gt;getServerSideProps&lt;/code&gt; to call the &lt;code&gt;withPageAuthRequired&lt;/code&gt; method, specified the URL to redirect to after login, accessed the &lt;code&gt;user&lt;/code&gt; props it returned and then displayed the user‚Äôs name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complete index.js&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;We can test our application by starting the development server again, sign up, and then log in to access our application.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post discussed how to build a personalized and secure file storage system using Cloudinary, Auth0, and Next.js.&lt;/p&gt;

&lt;p&gt;You may find these resources useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudinary.com/documentation/upload_presets"&gt;Cloudinary upload presets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudinary.com/documentation/upload_widget"&gt;Cloudinary upload widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/auth0/nextjs-auth0"&gt;Next.js Auth0 library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Content created for the &lt;a href="https://content.hackmamba.io/"&gt;Hackmamba&lt;/a&gt; Jamstack Content Hackathon.&lt;/p&gt;

</description>
      <category>cloudinary</category>
      <category>hackjamstack</category>
      <category>auth0</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>React Developer Roadmap</title>
      <author>CodingTute</author>
      <pubDate>Sun, 17 Oct 2021 11:21:57 +0000</pubDate>
      <link>https://dev.to/codingtute/react-developer-roadmap-227</link>
      <guid>https://dev.to/codingtute/react-developer-roadmap-227</guid>
      <description>&lt;p&gt;&lt;a href="https://codingtute.com/react-developer-roadmap"&gt;React Developer Roadmap&lt;/a&gt; will help you to start your react learning path in an organized way.&lt;br&gt;
You can find more useful developer content at &lt;a href="https://codingtute.com"&gt;codingtute&lt;/a&gt; and follow &lt;a href="https://www.facebook.com/codingtute"&gt;facebook&lt;/a&gt; page for latest updates&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pR58nPp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codingtute.com/wp-content/uploads/2021/10/React-Developer-Roadmap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pR58nPp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codingtute.com/wp-content/uploads/2021/10/React-Developer-Roadmap.png" alt="React Developer Roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>How to debug Flutter apps over Wi-Fi(without root)</title>
      <author>Takunda Madechangu</author>
      <pubDate>Sun, 17 Oct 2021 11:17:04 +0000</pubDate>
      <link>https://dev.to/takunda/how-to-debug-flutter-apps-over-wi-fiwithout-root-3601</link>
      <guid>https://dev.to/takunda/how-to-debug-flutter-apps-over-wi-fiwithout-root-3601</guid>
      <description>&lt;p&gt;Let's just say you want to debug your Flutter app on android device, you use a USB cable right?&lt;/p&gt;

&lt;p&gt;Yes but using a USB cable has its downsides&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If your charging port is loose for some reason, then a slight move will disconnect your app ‚òπÔ∏è&lt;/li&gt;
&lt;li&gt;On MacOS is displays a certain annoying "Please install SmartSwitch or some app" message&lt;/li&gt;
&lt;li&gt;Lack of flexibility&lt;/li&gt;
&lt;li&gt;Among other annoyances&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So lets try debugging over wifi&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debugging-over-wifi"&gt;
  &lt;/a&gt;
  Debugging over wifi
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ur1zd-kL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynyuhxpgnl1xs4qjn2yk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ur1zd-kL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynyuhxpgnl1xs4qjn2yk.png" alt="Debugging over wifi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Your phone üì±&lt;/li&gt;
&lt;li&gt;Your machine üë®üèΩ‚Äçüíª&lt;/li&gt;
&lt;li&gt;A USB cable. „Äú&lt;/li&gt;
&lt;li&gt;Your machine and phone should be connected to the same wifi.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;br&gt;
Connect your device to your machine using USB&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;br&gt;
Open terminal and type the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;adb kill-server
&lt;span class="nv"&gt;$ &lt;/span&gt;adb tcpip 5555
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will kill current adb server and create another server which listens on all interfaces.&lt;/p&gt;

&lt;p&gt;If it says something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* daemon not running; starting now at tcp:5037
* daemon started successfully
restarting in TCP mode port: 5555
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove phone from mobile device and go to the next step&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;br&gt;
Get you device's wifi IP address. To do this:&lt;/p&gt;

&lt;p&gt;Go to&lt;br&gt;
Settings &amp;gt; Connections &amp;gt; Click Wifi Name &amp;gt; View properties(Which has the IP)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Or&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Settings &amp;gt; About Phone &amp;gt; Status &amp;gt; IP Address(Which has IP)&lt;/p&gt;

&lt;p&gt;Your ip should be something like &lt;code&gt;192.168.100.X&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;br&gt;
Inside your terminal type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;adb connect YOUR_IP:5555
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if it says something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;connected to 192.168.100.X:5555
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You are good to go&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#safety-concerns"&gt;
  &lt;/a&gt;
  Safety Concerns
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BRADuD8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxd3j4ksnpbf72c1pymy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRADuD8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxd3j4ksnpbf72c1pymy.png" alt="Wifi hacks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While this method offers convenience and flexibility, it might not be safe to do it on a public wifi or a wifi that you don't trust. After all someone might be listening in for open ports just to do something crazy, So be careful...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwXEz6tq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukqlaznz0gmujtr5j1yz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwXEz6tq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukqlaznz0gmujtr5j1yz.png" alt="Outro Meme"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>mobile</category>
      <category>tutorial</category>
      <category>android</category>
    </item>
    <item>
      <title>Simple file based routing for Express</title>
      <author>Matthias</author>
      <pubDate>Sun, 17 Oct 2021 10:53:27 +0000</pubDate>
      <link>https://dev.to/matthiaaas/simple-file-based-routing-for-express-1l22</link>
      <guid>https://dev.to/matthiaaas/simple-file-based-routing-for-express-1l22</guid>
      <description>&lt;p&gt;There are a bunch of best practices out there that recommend to split your Express.js routes into separate files using &lt;code&gt;Express.Router()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But creating new routes this way isn't straightforward and requires quite a few lines of boilerplate code for each newly introduced endpoint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this is messy&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fortunately, the framework era taught us better and popularized cleaner alternatives like file based routing.&lt;/p&gt;

&lt;p&gt;Consider the following project structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="c1"&gt;// main file&lt;/span&gt;
&lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;
    &lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="c1"&gt;// index routes&lt;/span&gt;
    &lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;
        &lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;
        &lt;span class="err"&gt;‚îî‚îÄ‚îÄ&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="c1"&gt;// dynamic params&lt;/span&gt;
    &lt;span class="err"&gt;‚îî‚îÄ‚îÄ&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;
&lt;span class="err"&gt;‚îî‚îÄ‚îÄ&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This approach can work for you out-of-the-box too!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express-file-routing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;express-file-routing&lt;/code&gt; will transform all of your files inside &lt;code&gt;/routes&lt;/code&gt; into valid paths.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/routes/index.ts&lt;/code&gt; ‚Üí /&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/routes/posts/index.ts&lt;/code&gt; ‚Üí /posts&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/routes/posts/[id].ts&lt;/code&gt; ‚Üí /posts/:id&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/routes/users.ts&lt;/code&gt; ‚Üí /users
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express-file-routing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;// /routes/users.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, exported functions like &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;del&lt;/code&gt; etc. will get matched their corresponding HTTP method automatically.&lt;/p&gt;

&lt;p&gt;Adding middlewares is equally intuitive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// /routes/posts.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rateLimit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userAuth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../middlewares&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;rateLimit&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;userAuth&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See &lt;a href="https://github.com/matthiaaas/express-file-routing"&gt;matthiaaas/express-file-routing&lt;/a&gt; on GitHub for detailed docs &amp;amp; a get started guide.&lt;/p&gt;

</description>
      <category>express</category>
      <category>javascript</category>
      <category>routing</category>
      <category>node</category>
    </item>
    <item>
      <title>Management in Linux </title>
      <author>Ayush Bhat</author>
      <pubDate>Sun, 17 Oct 2021 10:45:13 +0000</pubDate>
      <link>https://dev.to/ayush11_bhat/management-in-linux-1743</link>
      <guid>https://dev.to/ayush11_bhat/management-in-linux-1743</guid>
      <description>&lt;p&gt;In this blog we will be exploring the following fields in Linux:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;User Account Management&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Group Management&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File Permissions And Ownership&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-with-user-account-management"&gt;
  &lt;/a&gt;
  Let's start with User Account Management
&lt;/h2&gt;

&lt;p&gt;Question arises why to have different user accounts? To answer this following are some points that we keep in mind.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each user will have their own individualized private space.&lt;/li&gt;
&lt;li&gt;Will help in distinguishing privileges among users.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note : &lt;strong&gt;root&lt;/strong&gt; user is a special user who is able to do anything on the system.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#attributes-of-a-user"&gt;
  &lt;/a&gt;
  Attributes Of a User
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;UID : It is a unique number that is assigned to the user account. It is also used for determination of user privileges and activity tracking.&lt;/li&gt;
&lt;li&gt;GID : Indicates default group of the user.&lt;/li&gt;
&lt;li&gt;Comment : Using comment field for contact information.&lt;/li&gt;
&lt;li&gt;Home Directory : This is owned by a user and will be found on system under &lt;strong&gt;/home&lt;/strong&gt; directory, except for root.&lt;/li&gt;
&lt;li&gt;Login Shell : Various shells are there e.g. /bin/bash or /bin/csh.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#create-user-accounts"&gt;
  &lt;/a&gt;
  Create user accounts
&lt;/h4&gt;

&lt;p&gt;WHAT actually happens behind the scene when a user account is created let's debug it üòé&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In &lt;strong&gt;/etc/login.defs&lt;/strong&gt; ; the next UID greater than UID_MIN by default is assigned to the new user.&lt;/li&gt;
&lt;li&gt;By default value of UID is assigned to GID.&lt;/li&gt;
&lt;li&gt;Then the home directory for the user is created.&lt;/li&gt;
&lt;li&gt;A login shell is attached with the user.&lt;/li&gt;
&lt;li&gt;The contents of &lt;strong&gt;/etc/skel&lt;/strong&gt; is copied to home directory of user. &lt;strong&gt;Note&lt;/strong&gt; : /etc/skel contains the startup files for bash and for the X Window system.&lt;/li&gt;
&lt;li&gt;Command to create a user named &lt;strong&gt;student&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; useradd -s /bin/bash -m  student
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#deleting-and-modifying-user-account"&gt;
  &lt;/a&gt;
  Deleting and Modifying User Account
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;userdel&lt;/strong&gt; : The root user can remove user accounts using this command. This command doesn't delete the home directory. To delete the home directory use &lt;strong&gt;-r&lt;/strong&gt; option. User reference is removed from &lt;strong&gt;/etc/passwd, /etc/shadow, and /etc/group&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;usermod&lt;/strong&gt; : Change the characteristics of a user account, such as group memberships, home directory, login, name, password, default shell, user id etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#locked-accounts"&gt;
  &lt;/a&gt;
  Locked Accounts
&lt;/h4&gt;

&lt;p&gt;You might be thinking what is locked accounts? To answer this in Linux some accounts are locked means they can run programs but can never login to the system and have no valid password associated with them, such as bin and daemon.&lt;br&gt;
If you look up these entries in the &lt;strong&gt;/etc/passwd&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To lock a user account&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;usermod -L student
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlocking can be done by -U option.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#user-ids-and-etcpasswd"&gt;
  &lt;/a&gt;
  User ID's and /etc/passwd
&lt;/h4&gt;

&lt;p&gt;If we look up in some entries of /etc/passwd we will see the following records. Each record consists of a number of fields separated by colons (:):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;student:x:1006:1008::/home/student:/bin/bash
user1:x:1002:1002:user 1:/home/user1:/bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;username : user's unique name &lt;/li&gt;
&lt;li&gt;password : it can be hashed password or a placeholder ("x")&lt;/li&gt;
&lt;li&gt;UID : User Identification Number&lt;/li&gt;
&lt;li&gt;GID : primary group identification number for the user&lt;/li&gt;
&lt;li&gt;comment : comment area, usually the user's real name&lt;/li&gt;
&lt;li&gt;home : user's home drectory&lt;/li&gt;
&lt;li&gt;shell : name of the shell to be invoked at the login&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#why-to-use-etcshadow-when-etcpasswd-is-available"&gt;
  &lt;/a&gt;
  Why to use /etc/shadow when /etc/passwd is available?
&lt;/h5&gt;

&lt;p&gt;The default permissions in /etc/passwd is &lt;em&gt;644 (-rw-r--r--)&lt;/em&gt;&lt;em&gt;, this make the file vulnerable to attack as anyone can read this file. Tools like Crack, John the ripper can easily exploit this file. &lt;br&gt;
*&lt;/em&gt;/etc/shadow** : provides greater security of hashed passwords, also provides the option of enabling password aging on a per user basis. The permission attached to this file **400 (-r--------), means only root can access this file. Let's see one record from this file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;student:$6$2BDjRtz3.i4hg.bY$/KxesQ.UefXY3dUpvnWf0L6oi24TaPONhqHQgm9g/9IunYY1w2x0jNbuUNuRuvjTcx1Hjk0VUTnjDPKJjqBS51:18917:0:99999:7:::
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file contains one record for each user.&lt;br&gt;
Colon separated fields are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;username&lt;/li&gt;
&lt;li&gt;password (hashed 512)&lt;/li&gt;
&lt;li&gt;last change : days since Jan 1,1970 that password was last changed.&lt;/li&gt;
&lt;li&gt;mindays : minimum days after which password must be changed.&lt;/li&gt;
&lt;li&gt;maxdays : maximum days after which password must be changed.&lt;/li&gt;
&lt;li&gt;warn : days before password expires that the user is warned.&lt;/li&gt;
&lt;li&gt;grace : days after password expires that account is disabled.&lt;/li&gt;
&lt;li&gt;expire : date that account will be disabled.&lt;/li&gt;
&lt;li&gt;reserved &lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#password-management"&gt;
  &lt;/a&gt;
  Password Management
&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;passwd&lt;/strong&gt; is the command to change the password. Remember, Normal users can change only their own password. Root can change any user password. Normal users will not be allowed to set bad passwords, such as short words. However, root is allowed to do so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@ayush:~# passwd student
New password:
Retype new password:
passwd: password updated successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#group-management"&gt;
  &lt;/a&gt;
  Group Management
&lt;/h4&gt;

&lt;p&gt;Linux Systems form collection of users called groups, whose member share some common purpose. They share certain files and directories, and maintain some common privileges; this separates them from others on the system called the world. Groups are defined in &lt;strong&gt;/etc/group&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat /etc/group
student:x:1008:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;groupname is name of the group&lt;/li&gt;
&lt;li&gt;password is password placeholder&lt;/li&gt;
&lt;li&gt;GID is the group identifier. Values between 0 and 99 are for system groups. Values between 100 and GID_MIN are considered special. Values over GID_MIN are for User Private Groups. Each user will have his or her own group, not guaranteed to be private, this is called UPG(User Private Groups).&lt;/li&gt;
&lt;li&gt;user1, user2 is the list of users who are the members of the group.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#group-management"&gt;
  &lt;/a&gt;
  Group Management
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;groupadd: Add a new group.&lt;/li&gt;
&lt;li&gt;groupmod: Modify a group and add new users.&lt;/li&gt;
&lt;li&gt;groupdel: Remove a group.&lt;/li&gt;
&lt;li&gt;usermod: Manage a user's group memberships.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's see the demo of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. Step 1 - Create a group
   groupadd -r -g 245 student_grp
2. Step 2 - Add users in the group
   usermod -G  student_grp student
   usermod -G  student_grp user1
3. Check whether the group is created or not
   root@ayush:~# cat /etc/group | grep student_grp
   student_grp:x:245:student,user1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Be careful while using &lt;strong&gt;usermod -G&lt;/strong&gt; as grouplist that follows is complete list of groups, not just the changes, any supplemented groups left out will be gone !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-a option in usermod will preserve pre-existing group memberships when adding new ones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux User has 1 primary group listed in /etc/passwd and /etc/group. Primary group GID is used whenever the user creates the files or directories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. Group membership can be identified by running the following command:
root@ayush:~# groups
root
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#file-permissions-and-ownership"&gt;
  &lt;/a&gt;
  File Permissions and Ownership
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First character indicates the type of the file object. There are nine more which indicate the access rights granted to file users.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@ayush:~# ls -l file.txt
-rw-r--r--. 1 root root 16 Oct  8 12:31 file.txt 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;These are arranged in three groups of three:

&lt;ul&gt;
&lt;li&gt;owner: the user who owns the file&lt;/li&gt;
&lt;li&gt;group: the group of users who have access&lt;/li&gt;
&lt;li&gt;other: the rest of the world (also called world)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;File access rights
r : read access is allowed
w : write access is allowed
x : execute access is allowed &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If permission is not allowed a, - (dash) appears.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#want-to-change-file-permissions-use-chmod"&gt;
  &lt;/a&gt;
  Want to change file permissions - Use chmod
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Changing file permissions is done with chmod&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's see a demo now.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a file, give the owner and world execute permission, and remove the group write permission:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O9wJpHOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dos1hsax21nhdt0gsb2.PNG" alt="Image description"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;You can only change permissions on files you own, unless you are the supervisor.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;student user tried to change the file permissions but failed as this file is owned by other user.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cquui4zO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x53run4tovb1kpc14urt.PNG" alt="Image description"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Octal Digits&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple algorithm, and a single digit suffices to specify all three permissions bits for each entity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Octal Number representation&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Octal Number representation is sum of each digit of:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;4&lt;/strong&gt; - if read permission is desired&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2&lt;/strong&gt; - if write permission is desired&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;1&lt;/strong&gt; - if execute permission is desired&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Chown and Chgrp&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Changing file ownership is done with &lt;strong&gt;chown&lt;/strong&gt; and changing the group is done with &lt;strong&gt;chgrp&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; : Only Superuser can change ownership on files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In this demo we have changed the owner of file from &lt;strong&gt;ayush&lt;/strong&gt; to &lt;strong&gt;user1&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SxhVxXYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85hpczw2cahalgbue5rx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SxhVxXYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85hpczw2cahalgbue5rx.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In this demo we have changed the group ownership. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6_83Ov0K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gl0hkeyr9ljc43ifmyfk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6_83Ov0K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gl0hkeyr9ljc43ifmyfk.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Umask&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Default permission given when creating a file are read/write for owner, group and world (0666) and for directory is (0777)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But we noticed that actual permission on file is 664(u=rw, g=rw, o=r)  and for directory is 775(u=rwx, g=rwx, o=wx)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KDsEcC7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0zknbl8acg9vztzpbsd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KDsEcC7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0zknbl8acg9vztzpbsd.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Question arises who has done it ? Umask is the answer.
Umask whose purpose is to show permissions should be denied.
Let's see the value of umask set by default.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;umask
0002
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This represents that for the other users write permission is disabled.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;That's all for now. Thank you for reading. Do share your feedback and if you have liked the article share it with your friends.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>linux</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Array.prototype.sort()
</title>
      <author>seri0009</author>
      <pubDate>Sun, 17 Oct 2021 10:42:46 +0000</pubDate>
      <link>https://dev.to/charanseri/arrayprototypesort-12jk</link>
      <guid>https://dev.to/charanseri/arrayprototypesort-12jk</guid>
      <description>&lt;p&gt;sort() is a static method of Array which sorts the elements of an array in place and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values..&lt;/p&gt;

&lt;p&gt;So what is a static method?&lt;/p&gt;

&lt;p&gt;-A static method (or static function) is a method defined as a member of an object but is accessible directly from an API object's constructor, rather than from an object instance created via the constructor Methods called on object instances are called instance method.&lt;/p&gt;

&lt;p&gt;sort() takes in a compare function with two arguments which compares two values and orders accordingly&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;compareFunction(a, b) must always return the same value when given a specific pair of elements a and b as its two arguments which can be a string or a number strings are compared based on UTF number based off of reminder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;syntax : sort(compare(a, b))&lt;/p&gt;

&lt;p&gt;Example : &lt;/p&gt;

&lt;p&gt;function compare(a, b) {&lt;br&gt;
  if (a is less than b by some ordering criterion) {&lt;br&gt;
    return -1;&lt;br&gt;
  }&lt;br&gt;
  if (a is greater than b by the ordering criterion) {&lt;br&gt;
    return 1;&lt;br&gt;
  }&lt;br&gt;
  // a must be equal to b&lt;br&gt;
  return 0;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;-If compareFunction is supplied, all non-undefined array elements are sorted according to the return value of the compare function (all undefined elements are sorted to the end of the array, with no call to compareFunction).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A sort Method can be called without passing a compare function (Function Less) with default order as ascending.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntax : sort()&lt;/p&gt;

&lt;p&gt;Example : &lt;/p&gt;

&lt;p&gt;const months = ['March', 'Jan', 'Feb', 'Dec'];&lt;br&gt;
months.sort();&lt;br&gt;
console.log(months);&lt;br&gt;
// expected output: Array ["Dec", "Feb", "Jan", "March"]&lt;/p&gt;

&lt;p&gt;Sorting with Map :&lt;/p&gt;

&lt;p&gt;The more work a compareFunction does and the more elements there are to sort, it may be more efficient to use map for sorting. The idea is to traverse the array once to extract the actual values used for sorting into a temporary array, sort the temporary array, and then traverse the temporary array to achieve the right order.&lt;/p&gt;

&lt;p&gt;Example : &lt;/p&gt;

&lt;p&gt;// the array to be sorted&lt;br&gt;
const data = ['delta', 'alpha', 'charlie', 'bravo'];&lt;/p&gt;

&lt;p&gt;// temporary array holds objects with position and sort-value&lt;br&gt;
const mapped = data.map((v, i) =&amp;gt; {&lt;br&gt;
  return { i, value: someSlowOperation(v) };&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;// sorting the mapped array containing the reduced values&lt;/p&gt;

&lt;p&gt;mapped.sort((a, b) =&amp;gt; {&lt;br&gt;
  if (a.value &amp;gt; b.value) {&lt;br&gt;
    return 1;&lt;br&gt;
  }&lt;br&gt;
  if (a.value &amp;lt; b.value) {&lt;br&gt;
    return -1;&lt;br&gt;
  }&lt;br&gt;
  return 0;&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;const result = mapped.map(v =&amp;gt; data[v.i]);&lt;/p&gt;

&lt;p&gt;Time Complexity : &lt;/p&gt;

&lt;p&gt;The time and space complexity of the sort cannot be guaranteed as it depends on the implementation.&lt;/p&gt;

&lt;p&gt;Compatibility :&lt;/p&gt;

&lt;p&gt;Other than Internet Explorer sort() works on every browser, mobile and pc also Dino and Node.js.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Hactoberfest 2021 #hactoberfest #dev</title>
      <author>Sambhav-Jindal-github</author>
      <pubDate>Sun, 17 Oct 2021 10:26:19 +0000</pubDate>
      <link>https://dev.to/sambhavjindalgithub/hactoberfest-2021-hactoberfest-dev-2bo</link>
      <guid>https://dev.to/sambhavjindalgithub/hactoberfest-2021-hactoberfest-dev-2bo</guid>
      <description>&lt;p&gt;Completed hactoberfest 2021, feeling great and love to share my experience with everyone.#hactoberfest #dev&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To Think Like a Programmer?</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Sun, 17 Oct 2021 10:13:54 +0000</pubDate>
      <link>https://dev.to/unitybuddy/how-to-think-like-a-programmer-4pd9</link>
      <guid>https://dev.to/unitybuddy/how-to-think-like-a-programmer-4pd9</guid>
      <description>&lt;p&gt;Hello, buddies! Lemme ask you a common question, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do programmers think differently?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's true; real programmers think differently than everyone else. &lt;/p&gt;

&lt;p&gt;Everyone‚Äôs programmer perspective is different; means, each programmer thinks in a different way and learns how to approach and break down problems in an unique way. Through practice, you'll develop your programming perspective, and it'll get easier to communicate with machines to solve increasingly complex problems. But the question remains, &lt;em&gt;How to think like a real programmer?&lt;/em&gt; Let's see!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#break-down-the-problem-into-smaller-problems"&gt;
  &lt;/a&gt;
  Break down the problem into smaller problems.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBOKhgXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630481999969/2vfLablYg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBOKhgXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630481999969/2vfLablYg.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
How do you put an elephant into the fridge?&lt;/p&gt;

&lt;p&gt;Here‚Äôs what most people would answer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the fridge&lt;/li&gt;
&lt;li&gt;Put the elephant in&lt;/li&gt;
&lt;li&gt;Close the fridge&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Problem solved!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSuN6jna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630480281889/Ev4A7BfjZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSuN6jna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630480281889/Ev4A7BfjZ.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Poor elephant :(&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This answer is the best example of why you get stuck when you face a blank JavaScript file. You skip steps.&lt;/p&gt;

&lt;p&gt;If you think logically about the question, you‚Äôll see a few glaring problems that remain unanswered:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What fridge are we talking about?&lt;/li&gt;
&lt;li&gt;What kind of elephant are we talking about?&lt;/li&gt;
&lt;li&gt;If the elephant is too huge to fit into the fridge, what do you do?&lt;/li&gt;
&lt;li&gt;Where do you find the elephant in the first place?&lt;/li&gt;
&lt;li&gt;How do you transport the elephant to your fridge?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When you code, you need to answer every small question you can think of. That‚Äôs why the first step is to break your problem into smaller pieces.&lt;/p&gt;

&lt;p&gt;If you need a real example for this, write a comment below üëáüèª&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-good-habits"&gt;
  &lt;/a&gt;
  Build Good Habits
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--thiFvKX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630482072155/mayNHHF2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thiFvKX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630482072155/mayNHHF2q.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
A developer‚Äôs environment can be, be it mildly, hectic. Requests and requirements change with little notice, and the pace needed to meet deadlines can accelerate quickly. That‚Äôs why a developer needs to develop strong habits with what they can control, whether it‚Äôs managing work/life balance, templatizing repetitive codes, or even finding the ideal height on your chair. Habits make a reliable backbone that‚Äôs invaluable in frenzied situations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#practice-dont-memorize"&gt;
  &lt;/a&gt;
  Practice, don‚Äôt memorize
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnrpYqgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630482112576/ZsSVjWjV9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnrpYqgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630482112576/ZsSVjWjV9.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Memorizing code is tough, and you don‚Äôt need to go down that road to think like a programmer. Instead, focus on the fundamentals. Learn the principles and ideas behind programming, and you‚Äôll get much further than trying to remember everything.&lt;/p&gt;

&lt;p&gt;Every time you solve a simple problem using programming, you‚Äôll develop your fundamentals even further, making it easier as you progress. Practice is key to your programming perspective becoming second nature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talk-through-the-problem-aloud"&gt;
  &lt;/a&gt;
  Talk through the problem aloud
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X7m2YMT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630482212677/Aw3pVojwG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X7m2YMT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630482212677/Aw3pVojwG.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
First, you can talk through the problem by calling up a friend or family member and explaining to them what you‚Äôre trying to tackle. By having a conversation with someone, you‚Äôll be able to determine how you can communicate with them to clearly explain the problem and your solution.&lt;/p&gt;

&lt;p&gt;Don‚Äôt have anyone to talk to right now? No problem! Just try speaking through the problem out loud. Explain your approach and understanding to your pets or even a stuffed animal. It‚Äôs speaking aloud that is the key.&lt;/p&gt;

&lt;p&gt;If you're explaining to a human, please be careful! They may get mad from your programming terms üò§&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shortcuts-can-be-dangerous"&gt;
  &lt;/a&gt;
  Shortcuts can be dangerous
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a4r_MRMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630482391353/I4OX7IRLOZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a4r_MRMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630482391353/I4OX7IRLOZ.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Taking shortcuts while you‚Äôre learning to program can be more hurtful than helpful. Try to think of the learning process like running tennis drills. You could take steroids to get stronger and become a better player, but that‚Äôs likely to hurt you in the long run.&lt;/p&gt;

&lt;p&gt;Rather than searching for an answer right away when you encounter a problem, try to solve it yourself first. When you rely on other people‚Äôs coding solutions, you don‚Äôt get to develop that programming muscle yourself.&lt;/p&gt;

&lt;p&gt;Focus on the basics, put in the practice, and run your drills. The tried and true training methods are that for a reason; they work! We know that it can be frustrating when it takes time to learn to program, but that‚Äôs all part of the process of forming your own programming perspective.&lt;/p&gt;

&lt;p&gt;(Also keep remember that you must ask questions and seek help if needed.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-familiar-with-reading-documentation-and-applying-it-to-your-code"&gt;
  &lt;/a&gt;
  Get familiar with reading documentation and applying it to your code üìÉ
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6HJbKHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630482416292/DfdmqzJeX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6HJbKHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630482416292/DfdmqzJeX.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Documentation for programming is just like a recipe for cooking. It lays out how the code is intended to work and is an excellent resource to help you understand programming better. Learning to read documentation will also steer you away from looking for a shortcut or an easy solution to your problems or bugs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-positive"&gt;
  &lt;/a&gt;
  Stay Positive ‚úåÔ∏è
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1QrlbSjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630482522566/PwxLQlRu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1QrlbSjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630482522566/PwxLQlRu2.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
If you‚Äôve ever viewed the source code of a major entity‚Äôs website, you‚Äôve seen just how sprawling and indecipherable it is to the naked eye. Yet the people responsible for generating that mass of code aren‚Äôt super-machines that appeared on Earth after a solar eclipse. They‚Äôre suspiciously similar to you and me. Professional developers (even the surly ones) have a positive approach to their work. They‚Äôve embraced challenges in their own way and see them as a normal part of a healthy human life ‚úåÔ∏è&lt;/p&gt;

&lt;p&gt;Always try to keep a smile just like &lt;a href="https://hashnode.com/@laughing-dev"&gt;Laughing Dev&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;So, buddies, that's it! Hope you learned something and Happy Coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/how-to-think-like-a-programmer"&gt;Originally&lt;/a&gt; published on Hashnode&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zapier.com/blog/think-like-a-programmer/"&gt;https://zapier.com/blog/think-like-a-programmer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://careerfoundry.com/en/blog/web-development/getting-started-in-code-how-to-think-like-a-programmer/"&gt;https://careerfoundry.com/en/blog/web-development/getting-started-in-code-how-to-think-like-a-programmer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/how-to-think-like-a-programmer/"&gt;https://www.geeksforgeeks.org/how-to-think-like-a-programmer/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>career</category>
    </item>
  </channel>
</rss>
