<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Rapid REST API prototyping using a dump server</title>
      <author>Alexander</author>
      <pubDate>Sun, 12 Sep 2021 15:48:11 +0000</pubDate>
      <link>https://dev.to/xnbox/rapid-rest-api-prototyping-using-a-dump-server-4i3f</link>
      <guid>https://dev.to/xnbox/rapid-rest-api-prototyping-using-a-dump-server-4i3f</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If you need to start working on the frontend, but the backend is not ready yet, then you need a dump server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;What is a dump server?&lt;/h2&gt;

&lt;p&gt;
A dump server is a server that responds to client requests with data that it retrieves from a standard HTTP dump.
&lt;/p&gt;

&lt;p&gt;Just like a static server, the dump server does not execute the code, but only gives the ready data to the client.&lt;br&gt;
The static server responds with the contents of the files, and the dump server responds with dumps.&lt;br&gt;
The dump includes the response body, status code, and headers.&lt;br&gt;
The dump server allows you to serve &lt;strong&gt;any kind of request&lt;/strong&gt;, not just &lt;strong&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/strong&gt; method, like a static server.&lt;br&gt;
With a dump server, you can simulate any API without writing  code.&lt;/p&gt;

&lt;h2&gt;How the dump server works?&lt;/h2&gt;

&lt;ol&gt;
    &lt;li&gt;Got client request&lt;/li&gt;
    &lt;li&gt;Search dump entries (request-response pairs) for appropriate entry by matching all specified request parts:
    method, URI, headers, and body&lt;/li&gt;
    &lt;li&gt;If entry is found, the server generates a corresponded response and sends it to the client&lt;/li&gt;
    &lt;li&gt;If entry is not found, the server search dump entries for response with status &lt;code&gt;400&lt;/code&gt; (Bad request).&lt;/li&gt;
    &lt;li&gt;If entry is found, the server send entry to the client
    &lt;/li&gt;
&lt;li&gt;If entry is not found, the server sends status &lt;code&gt;400&lt;/code&gt; with no body.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's all.&lt;/p&gt;

&lt;h2&gt;What are people using it for?&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;Creating the product POC or demo before even starting out with the backend&lt;/li&gt;
    &lt;li&gt;REST, GraphQL, and other APIs prototyping and testing&lt;/li&gt;
    &lt;li&gt;Hiding critical enterprise infrastructure behind a simple static facade&lt;/li&gt;
    &lt;li&gt;Hacking and fine-tuning HTTP communications on both server and client sides&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Get started&lt;/h2&gt;

&lt;p&gt;Meet the DeepfakeHTTP dump server:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/xnbox"&gt;
        xnbox
      &lt;/a&gt; / &lt;a href="https://github.com/xnbox/DeepfakeHTTP"&gt;
        DeepfakeHTTP
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üü™ DeepfakeHTTP is a web server that uses HTTP dumps as a source for responses.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ol&gt;
    &lt;li&gt;Download the &lt;a href="https://github.com/xnbox/DeepfakeHTTP/releases/latest"&gt;latest release&lt;/a&gt; of &lt;code&gt;df.jar&lt;/code&gt;
&lt;/li&gt;
    &lt;li&gt;Copy-paste the content of the dump example to the file &lt;code&gt;dump.txt&lt;/code&gt;:

&lt;pre&gt;
GET /api/customer/123 HTTP/1.1

HTTP/1.1 200 OK
Content-Type: application/json

{
    "id": 123,
    "fname": "John",
    "lname": "Doe",
    "email": ["john@example.com", "johndoe@example.com"]
}
&lt;/pre&gt;

&lt;/li&gt;
    &lt;li&gt;Start the server from command line:
&lt;pre&gt;
java -jar df.jar dump.txt
&lt;/pre&gt;
&lt;/li&gt;
    &lt;li&gt;Use a browser to check whether the server is running: &lt;a href="http://localhost:8080/api/customer/123"&gt;http://localhost:8080/api/customer/123&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hySG2F-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/xnbox/DeepfakeHTTP/main/get-started.png"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more examples see: &lt;a href="https://github.com/xnbox/DeepfakeHTTP#appendix-cdump-examples"&gt;dump examples&lt;/a&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;Usage&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java -jar df.jar [OPTIONS] [FLAGS] [COMMANDS] &amp;lt;file&amp;gt;...

OPTIONS:                                                           
    --port &amp;lt;number&amp;gt;        HTTP TCP port number, default: 8080
    --port-ssl &amp;lt;number&amp;gt;    HTTPS TCP port number, default: 8443
    --openapi-path &amp;lt;path&amp;gt;  serve OpenAPI client at specified context path
    --openapi-title &amp;lt;text&amp;gt; provide custom OpenAPI spec title
    --collect &amp;lt;file&amp;gt;       collect live request/response to file
    --format &amp;lt;json|yaml&amp;gt;   output format for --print-* commands, default: json

FLAGS:
    --no-log               disable request/response console logging
    --no-etag              disable ETag optimization
    --no-watch             disable watch files for changes
    --no-pretty            disable prettyprint for --print-* commands
    --redirect             redirect HTTP to HTTPS

COMMANDS:
    --help                 print help message
    --print-info           print dump files statistics to stdout as json/yaml
    --print-requests       print dump requests to stdout as json/yaml
    --print-openapi        print OpenAPI specification to stdout as json/yaml

Ô∏èARGS:
    &amp;lt;file&amp;gt;...               dump text file(s) and/or OpenAPI json/yaml file(s)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;Usage Exampes&lt;/h2&gt;

&lt;p&gt;Start server on dump file:&lt;/p&gt;

&lt;pre&gt;
java -jar df.jar dump.txt
&lt;/pre&gt;

&lt;p&gt;Start server on OpenAPI file:&lt;/p&gt;

&lt;pre&gt;
java -jar df.jar openapi.json
&lt;/pre&gt;

&lt;p&gt;Start server with built-in OpenAPI client:&lt;/p&gt;

&lt;pre&gt;
java -jar df.jar --openapi-path /api dump.txt
&lt;/pre&gt;

&lt;p&gt;Start server on few dump files:&lt;/p&gt;

&lt;pre&gt;
java -jar df.jar dump1.txt dump2.txt dump3.txt
&lt;/pre&gt;

&lt;p&gt;Start server on mix of dump and OpenAPI files:&lt;/p&gt;

&lt;pre&gt;
java -jar df.jar dump1.txt openapi2.json dump3.txt openapi4.yaml
&lt;/pre&gt;

&lt;p&gt;Provide custom OpenAPI spec title:&lt;/p&gt;

&lt;pre&gt;
java -jar df.jar --openapi-path /api --openapi-title 'My Killer REST API v18.2.1' dump.txt
&lt;/pre&gt;

&lt;h2&gt;Features&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;No dependencies&lt;/li&gt;
    &lt;li&gt;No installation&lt;/li&gt;
    &lt;li&gt;No configuration files&lt;/li&gt;
    &lt;li&gt;Single-file executable&lt;/li&gt;
    &lt;li&gt;Built-in OpenAPI client&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Supports:&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;Asynchronous requests and responses.&lt;/li&gt;
    &lt;li&gt;HTTP message formats (RFC 7230)&lt;/li&gt;
    &lt;li&gt;Unlimited number of request/response pairs in the dump&lt;/li&gt;
    &lt;li&gt;Scriptable response body&lt;/li&gt;
    &lt;li&gt;
&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; etc.&lt;/li&gt;
    &lt;li&gt;Multi-line and multi-value headers (RFC 7230).&lt;/li&gt;
    &lt;li&gt;OpenAPI-styled templates in paths.&lt;/li&gt;
    &lt;li&gt;Wildcards ( &lt;code&gt; *&lt;/code&gt; and &lt;code&gt; ?&lt;/code&gt; with escape &lt;code&gt; /&lt;/code&gt; ) in query string and header values.&lt;/li&gt;
    &lt;li&gt;Templates in response body&lt;/li&gt;
    &lt;li&gt;Response body fetching from external sources like URLs, local files, and data URI&lt;/li&gt;
    &lt;li&gt;Per entry user-defined request and response delays&lt;/li&gt;
    &lt;li&gt;Comments &lt;code&gt; #&lt;/code&gt; in dumps&lt;/li&gt;
    &lt;li&gt;Live request/response collection&lt;/li&gt;
    &lt;li&gt;Optional watching dump files for changes&lt;/li&gt;
    &lt;li&gt;Optional ETag optimization&lt;/li&gt;
    &lt;li&gt;Optional live request/response logging&lt;/li&gt;
    &lt;li&gt;TLS(SSL) connections and HTTP to HTTPS redirect&lt;/li&gt;
    &lt;li&gt;Customizable OpenAPI client path&lt;/li&gt;
    &lt;li&gt;Latest OpenAPI specification (v3.0.3) in JSON and YAML format&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;License&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;DeepfakeHTTP&lt;/strong&gt; is released under the &lt;a href="https://github.com/xnbox/DeepfakeHTTP/blob/main/LICENSE"&gt;MIT&lt;/a&gt; license.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/xnbox"&gt;
        xnbox
      &lt;/a&gt; / &lt;a href="https://github.com/xnbox/DeepfakeHTTP"&gt;
        DeepfakeHTTP
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üü™ DeepfakeHTTP is a web server that uses HTTP dumps as a source for responses.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
DeepfakeHTTP&lt;br&gt;
Your 100% static dynamic backend&lt;/h1&gt;
&lt;p&gt;&lt;a title="License MIT" href="https://github.com/xnbox/DeepfakeHTTP/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/fa6e10811485d7022ae8c55770e22511f740aad92b141370db14c56e9fc44545/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75653f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;a title="Release 1.0.8" href="https://github.com/xnbox/DeepfakeHTTP/releases"&gt;&lt;img src="https://camo.githubusercontent.com/4ddae3916d80a7439e60ac8ddef8faf4d3f587ba6fdfb59606868a8921cf4e3e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f72656c656173652d312e302e382d3444433731463f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;a title="Powered by Tommy" href="https://github.com/xnbox/tommy"&gt;&lt;img src="https://camo.githubusercontent.com/fc13f7d0cb921118ea652b34f3df032b6438251a6f450532254fbd63b2651a16/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706f77657265645f62792d546f6d6d792d626c756576696f6c65743f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="table-wrapper-paragraph"&gt;&lt;table width="100%"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/xnbox/DeepfakeHTTP/main/image.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLcXK826--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/xnbox/DeepfakeHTTP/main/image.png" height="170rem"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;What are people using it for?&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;Creating the product POC or demo before even starting out with the backend&lt;/li&gt;
    &lt;li&gt;REST, GraphQL, and other APIs prototyping and testing&lt;/li&gt;
    &lt;li&gt;Hiding critical enterprise infrastructure behind a simple static facade&lt;/li&gt;
    &lt;li&gt;Hacking and fine-tuning HTTP communications on both server and client sides&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
Get started&lt;/h2&gt;

&lt;ol&gt;
    &lt;li&gt;Download the &lt;a href="https://github.com/xnbox/DeepfakeHTTP/releases/latest"&gt;latest release&lt;/a&gt; of &lt;code&gt;df.jar&lt;/code&gt;
&lt;/li&gt;
    &lt;li&gt;Copy-paste the content of the dump example to the file &lt;code&gt;dump.txt&lt;/code&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;GET /api/customer/123 HTTP/1.1

HTTP/1.1 200 OK
Content-Type: application/json

{
    "id": 123,
    "fname": "John",
    "lname": "Doe",
    "email": ["john@example.com", "johndoe@example.com"]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
    &lt;li&gt;Start the server from command line:
&lt;pre&gt;java -jar df.jar dump.txt
&lt;/pre&gt;
&lt;/li&gt;
    &lt;li&gt;Use a browser to check whether the server is running: &lt;a href="http://localhost:8080/api/customer/123" rel="nofollow"&gt;http://localhost:8080/api/customer/123&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/xnbox/DeepfakeHTTP/main/get-started.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hySG2F-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/xnbox/DeepfakeHTTP/main/get-started.png"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more examples see: &lt;a href="https://github.com/xnbox/DeepfakeHTTP#appendix-cdump-examples"&gt;APPENDIX C.&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
Usage&lt;/h2&gt;

&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;java -jar df.jar [OPTIONS] [FLAGS] [COMMANDS] &amp;lt;file&amp;amp;gt
OPTIONS:                                                           
    --port &amp;lt;number&amp;gt;        HTTP TCP port number, default: 8080
    --port-ssl &amp;lt;number&amp;gt;    HTTPS TCP port number, default: 8443
    --openapi-path &amp;lt;path&amp;gt;  serve OpenAPI client at&lt;/code&gt;&lt;/pre&gt;‚Ä¶&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/xnbox/DeepfakeHTTP"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>programming</category>
      <category>testing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>To the VSCode Extensions I Love the Most</title>
      <author>Ronnie</author>
      <pubDate>Sun, 12 Sep 2021 15:29:13 +0000</pubDate>
      <link>https://dev.to/arynnboniface/to-the-vscode-extensions-i-love-the-most-pce</link>
      <guid>https://dev.to/arynnboniface/to-the-vscode-extensions-i-love-the-most-pce</guid>
      <description>&lt;p&gt;This certainly isn't the first time someone's made a list of their favorite VSCode extensions and it won't be the last, but these are mine! I'll start with some of my favorite JS related extensions and then we'll jump into HTML/CSS helpers.&lt;/p&gt;

&lt;p&gt;I'm starting with the holy grail of all extensions. This one, I swear, has saved my life.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#js-amp-friends"&gt;
  &lt;/a&gt;
  JS &amp;amp; Friends
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Bracket Pair Colorizer&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension does exactly what it's name says. It might not seem like anything life changing, but think about working with some deeply nested code, or a huge file.&lt;/p&gt;

&lt;p&gt;Life WITHOUT Bracket Pair Colorizer:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zmiVr-vz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mm6kqryhx9wshwg75xc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zmiVr-vz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mm6kqryhx9wshwg75xc4.png" alt="Code without Bracket Pair Colorizer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Life WITH Bracket Pair Colorizer: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OqbA_KJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gufofgzg87pljj16j1gf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqbA_KJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gufofgzg87pljj16j1gf.png" alt="Code with Bracket Pair Colorizer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each pair of brackets, curly brackets and parentheses has its own color, which makes it very easy to identify where you might have an 'oops'. &lt;/p&gt;

&lt;p&gt;Wow, this already seems AWESOME, but WAIT-- there's more. Moving your cursor to the inside of the first bracket draws a line (in the same color) to its partner. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tG1L2uKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sk2s3m6ecjlq3sngg8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tG1L2uKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sk2s3m6ecjlq3sngg8s.png" alt="Bracket Line Match"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=burkeholland.simple-react-snippets"&gt;Simple React Snippets&lt;/a&gt; / &lt;a href="https://marketplace.visualstudio.com/items?itemName=PulkitGangwar.nextjs-snippets"&gt;Next.js Snippets&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Writing boilerplate code takes FOREVER. It's ANNOYING. Simple React Snippets and Next.js Snippets ease that boilerplate pain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Functional Components &amp;amp; Hooks with Simple React Snippets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OaIjoco---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzrd8j4y6453aptvemr9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OaIjoco---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzrd8j4y6453aptvemr9.gif" alt="Simple React Snippets - Functional Components  &amp;amp; Hooks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next.js Snippets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T_LscyQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27a0n3w08x56jytb325x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T_LscyQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27a0n3w08x56jytb325x.gif" alt="Next.js Snippets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both of these extensions have a ton of snippets, but I don't have the time to make that many gifs!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets"&gt;JavaScript (ES6) Code Snippets&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
This one is very similar to Simple React Snippets, but applies to plain 'ole, vanilla JavaScript. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyjIo5wr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmiys8biprl18lecmn6n.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyjIo5wr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmiys8biprl18lecmn6n.gif" alt="JavaScript Code Snippets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are the ones I use most often, but there are a ton more. Notable mentions include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;sti&lt;/code&gt; for a &lt;code&gt;setInterval&lt;/code&gt; setup&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;thenc&lt;/code&gt; to add &lt;code&gt;.then()&lt;/code&gt; and &lt;code&gt;.catch()&lt;/code&gt; to a promise.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;clg&lt;/code&gt; for a &lt;code&gt;console.log()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=meganrogge.template-string-converter"&gt;Template String Converter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This one is small but mighty (helpful). Anytime you type &lt;code&gt;${}&lt;/code&gt; within a set of single or double quotes, this extension automatically converts them to backticks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-amp-css"&gt;
  &lt;/a&gt;
  HTML &amp;amp; CSS
&lt;/h2&gt;

&lt;p&gt;VSCode is pretty great with HTML &amp;amp; CSS all on its own. * You can use &lt;code&gt;html:5&lt;/code&gt; to get some solid HTML boilerplate. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typing &lt;code&gt;a&lt;/code&gt; will give you opening and closing link tags.&lt;/li&gt;
&lt;li&gt;Typing &lt;code&gt;div&lt;/code&gt; will give you opening and closing link tags.&lt;/li&gt;
&lt;li&gt;VSCode auto-completes CSS attributes for you.&lt;/li&gt;
&lt;li&gt;The newest VSCode update allows you to edit an opening and closing tag at the same time (üòç).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a few good helpers out there though!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=hwencc.html-tag-wrapper"&gt;HTML Tag Wrapper&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oy3mY4qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ml9myoqg1a09qxsm3b5c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oy3mY4qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ml9myoqg1a09qxsm3b5c.gif" alt="HTML Tag Wrapper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wrapping already written code in a new tag has been driving me insane for as long as I can remember, but now there's an answer. Highlight, ctrl + i and the nightmare is over. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=joy-yu.css-snippets"&gt;CSS Snippets&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, yes, more snippets! What developer doesn't love writing less code?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xVlv8TM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjymj04294u6e0lqyggb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xVlv8TM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjymj04294u6e0lqyggb.gif" alt="CSS Snippets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The length of this list of snippets is rivaled only by a Game of Thrones book.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=glenn2223.live-sass"&gt;Live Sass Compiler&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, Live Sass Compiler! Sure, sure, you can just get this up and running in your terminal with a command or two, OR you could just click this: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lO_kbeiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mizkjkhdfqlslcqc3vrh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lO_kbeiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mizkjkhdfqlslcqc3vrh.png" alt="Watch Sass"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Totally up to you, but I know what I'd rather do. &lt;/p&gt;

&lt;p&gt;That's it for my favorite extensions list (for now). Feel free to drop your favorites in the comments! I'm always looking for new gems in my extension treasure collection.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Just passed 1MIllion views on Dev.to</title>
      <author>Sm0ke</author>
      <pubDate>Sun, 12 Sep 2021 15:14:31 +0000</pubDate>
      <link>https://dev.to/sm0ke/just-passed-1million-views-on-dev-to-1j07</link>
      <guid>https://dev.to/sm0ke/just-passed-1million-views-on-dev-to-1j07</guid>
      <description>&lt;p&gt;Hello guys!&lt;/p&gt;

&lt;p&gt;This week it was quite nice to see that my dashboard shows &lt;strong&gt;1MIllion+ (all-time) views&lt;/strong&gt; for all articles published here on Dev. I will mention TOP-5 articles that helped me to reach this unexpected milestone: &lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards - Open-Source and Free&lt;/a&gt;: 144k views, 535üíñ&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/admin-dashboards-open-source-and-free-4aep"&gt;Admin Dashboards - Open-Source and Free&lt;/a&gt;: 71k views, 569üíñ&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/flask-dashboard-open-source-boilerplates-dkg"&gt;Flask Dashboard - Open-Source Boilerplates&lt;/a&gt;: 67k Views, 103üíñ&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/vue-dashboard-open-source-apps-1gd1"&gt;Vue Dashboard - Open-Source and Free&lt;/a&gt;: 42k views, 379üíñ&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/100-open-source-apps-built-with-automation-tools-3jmj"&gt;How I‚Äôve built 100+ free apps with automation tools&lt;/a&gt;: 29k views, 463üíñ&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;A few things that I've learned during the process: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Don't SPAM&lt;/strong&gt;, play fair &amp;amp; help others &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be consistent&lt;/strong&gt; and constantly publish new content &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Research&lt;/strong&gt; the topic before writing about it&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SEO&lt;/strong&gt; is important 

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards - Open-Source and Free&lt;/a&gt; ranks position #1 for "React Dashboard" keyword&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Visual part&lt;/strong&gt; of the content is important &lt;/li&gt;
&lt;li&gt;Allocate time and &lt;strong&gt;respond to (all) comments&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thank you!&lt;/strong&gt; Feel free to AMA in the comments section.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;P.S. Here is my &lt;a href="https://twitter.com/Sm0keDev"&gt;Twitter account&lt;/a&gt; where I publish 99% &lt;code&gt;open-source&lt;/code&gt; related content. &lt;/p&gt;

</description>
      <category>dev</category>
      <category>stats</category>
      <category>sm0ke</category>
    </item>
    <item>
      <title>Server-side JavaScript a decade before Node.js with Netscape LiveWire</title>
      <author>Matteo Cargnelutti</author>
      <pubDate>Sun, 12 Sep 2021 15:08:21 +0000</pubDate>
      <link>https://dev.to/macargnelutti/server-side-javascript-a-decade-before-node-js-with-netscape-livewire-l72</link>
      <guid>https://dev.to/macargnelutti/server-side-javascript-a-decade-before-node-js-with-netscape-livewire-l72</guid>
      <description>&lt;p&gt;The year is 1996. JavaScript is less than a year old, making its grand public debut with the release of Netscape Navigator 2.0 to &lt;a href="https://webdevelopmenthistory.com/1996-javascript-annoyances-and-meeting-the-dom/"&gt;a both intrigued and somewhat bewildered web development community&lt;/a&gt;. We are at the very beginning of what would become &lt;a href="https://en.wikipedia.org/wiki/Browser_wars#First_Browser_War_(1995%E2%80%932001)"&gt;"The First Browser War"&lt;/a&gt;: how JavaScript evolved and grew in that context is a story often told, &lt;strong&gt;but did you know that JavaScript was also used as a server-side scripting language as early as 1996?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today we're going to have a look at &lt;strong&gt;Netscape LiveWire&lt;/strong&gt;, an extension of &lt;em&gt;"Netscape Enterprise Server"&lt;/em&gt; that made &lt;strong&gt;writing server-side JavaScript applications possible more than 10 years before it was cool.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-dawn-of-serverside-javascript"&gt;
  &lt;/a&gt;
  The dawn of server-side J(ava)Script
&lt;/h2&gt;

&lt;p&gt;While Netscape and Microsoft were distributing their browser free of charge, both companies were also in the business of  selling enterprise-level software to companies and institutions looking for a &lt;em&gt;"one stop shop"&lt;/em&gt; solution to their web server and web development needs. This constituted an important part of Netscape's business model, and something Microsoft invested in as part of their &lt;a href="https://www.wired.com/2010/05/0526bill-gates-internet-memo/"&gt;newfound interest for the internet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We therefore had Microsoft on one side with the &lt;em&gt;"Internet Information Services"&lt;/em&gt; (IIS) suite, featuring their &lt;a href="https://en.wikipedia.org/wiki/Active_Server_Pages"&gt;&lt;em&gt;"Active Server Pages"&lt;/em&gt; (ASP)&lt;/a&gt; server-side scripting technology, and &lt;em&gt;"Netscape Enterprise Server"&lt;/em&gt; with its &lt;strong&gt;LiveWire&lt;/strong&gt; application development solution on the other.&lt;/p&gt;

&lt;p&gt;While ASP did support &lt;strong&gt;JScript&lt;/strong&gt; &lt;em&gt;(Microsoft's early implementation of JavaScript)&lt;/em&gt;, it was only one of the 3 languages supported, alongside &lt;strong&gt;VBScript&lt;/strong&gt; and &lt;strong&gt;PerlScript&lt;/strong&gt;. Netscape chose a different approach and went &lt;em&gt;"all in"&lt;/em&gt; with server-side JavaScript, which was the centerpiece of LiveWire. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-did-livewires-serverside-javascript-work"&gt;
  &lt;/a&gt;
  How did LiveWire's server-side JavaScript work?
&lt;/h2&gt;

&lt;p&gt;Looking back at &lt;a href="https://docs.oracle.com/cd/E19957-01/816-6411-10/contents.htm"&gt;how LiveWire worked&lt;/a&gt; from today's perspective is both fascinating and slightly disorientating. We're only a decade - but galaxies away - from &lt;strong&gt;Node.js&lt;/strong&gt; and its event loop-based, single threaded model. Netscape's server-side implementation of JavaScript was much more of an HTML preprocessor than a multi-purpose runtime, not dissimilar to early-days PHP in some of its inclinations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#everything-starts-with-the-raw-ltservergt-endraw-tag"&gt;
  &lt;/a&gt;
  Everything starts with the &lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;LiveWire introduced a &lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; tag, the likes of ASP's &lt;code&gt;&amp;lt;%&lt;/code&gt; and PHP's &lt;code&gt;&amp;lt;?php&lt;/code&gt; delimiters, used to determine which parts of a given HTML file contained JavaScript logic that needed to be processed on the server before being sent to the client. A global &lt;code&gt;write()&lt;/code&gt; function was used conjointly to &lt;em&gt;"print"&lt;/em&gt; content on the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Welcome to mid-90s HTML. 
Tags are SCREAMED, because everybody is very excited about THE INTERNET. --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;HTML&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;HEAD&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TITLE&amp;gt;&lt;/span&gt;My awesome web app&lt;span class="nt"&gt;&amp;lt;/TITLE&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/HEAD&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;H1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;SERVER&amp;gt;&lt;/span&gt;
      /* This tag and its content will be processed on the server side,
      and replaced by whatever is passed to `write()` before being sent to the client. */
      if(client.firstname != null) {
        write("Hello " + client.firstname + " !")  
      }
      else {
        write("What is your name?")
      }
      &lt;span class="nt"&gt;&amp;lt;/SERVER&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/H1&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;FORM&lt;/span&gt; &lt;span class="na"&gt;METHOD=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;ACTION=&lt;/span&gt;&lt;span class="s"&gt;"app.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;P&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;LABEL&lt;/span&gt; &lt;span class="na"&gt;FOR=&lt;/span&gt;&lt;span class="s"&gt;"firstname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Your name&lt;span class="nt"&gt;&amp;lt;/LABEL&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;INPUT&lt;/span&gt; &lt;span class="na"&gt;TYPE=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;NAME=&lt;/span&gt;&lt;span class="s"&gt;"firstname"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;        
      &lt;span class="nt"&gt;&amp;lt;/P&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;P&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;INPUT&lt;/span&gt; &lt;span class="na"&gt;TYPE=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;VALUE=&lt;/span&gt;&lt;span class="s"&gt;"Send"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/P&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/FORM&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/BODY&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/HTML&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To prevent unnecessary cluttering of the HTML files, backquotes could be used as a shorthand for the combination of &lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; and the &lt;code&gt;write()&lt;/code&gt; function, making for a smaller footprint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Long form: --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;H1&amp;gt;&amp;lt;SERVER&amp;gt;&lt;/span&gt;write("Hello " + client.firstname + " !")&lt;span class="nt"&gt;&amp;lt;/SERVER&amp;gt;&amp;lt;/H1&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Short hand: --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;H1&amp;gt;&lt;/span&gt;`"Hello " + client.firstname + " !"`&lt;span class="nt"&gt;&amp;lt;/H1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-jsac-endraw-compiler-and-raw-web-endraw-files"&gt;
  &lt;/a&gt;
  The &lt;code&gt;jsac&lt;/code&gt; compiler and &lt;code&gt;.web&lt;/code&gt; files
&lt;/h3&gt;

&lt;p&gt;LiveWire apps required a compilation step. &lt;a href="https://docs.oracle.com/cd/E19957-01/816-6411-10/appdev.htm#1046520"&gt;Using the &lt;code&gt;jsac&lt;/code&gt; compiler&lt;/a&gt;, users had to merge all of the app's HTML and JavaScript resources into a single &lt;code&gt;.web&lt;/code&gt; file. The idea was that every HTML file added to this bundle was to become an entry point for the app, accessible via a url, while loose JavaScript files were meant to be shared resources, allowing to define global functions that could be used in &lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; calls across multiple HTML files. &lt;/p&gt;

&lt;p&gt;The resulting &lt;code&gt;.web&lt;/code&gt; files contained bytecode that could then be executed by Netscape's JavaScript runtime, waiting for HTTP requests to come in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Example: Compiling a LiveWire app made of a single HTML file.&lt;/span&gt;
jsac &lt;span class="nt"&gt;-i&lt;/span&gt; app.html &lt;span class="nt"&gt;-o&lt;/span&gt; app.web

&lt;span class="c"&gt;# Example: Compiling a LiveWire app made of multiple HTML and JS files.&lt;/span&gt;
&lt;span class="c"&gt;# The `-f` option targets a file containing references to all the files that need to be bundled together.&lt;/span&gt;
jsac &lt;span class="nt"&gt;-f&lt;/span&gt; files_list.txt &lt;span class="nt"&gt;-o&lt;/span&gt; app.web 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Netscape's runtime was &lt;strong&gt;multi-threaded&lt;/strong&gt; and allowed for sharing objects between threads of a given application. Shared objects could be accessed and modified by any thread, which made it easy to share state between clients but also came with important risks. &lt;a href="https://docs.oracle.com/cd/E19957-01/816-6411-10/sessmgmt.htm#1012796"&gt;A locking mechanism was available, but not automatically enforced&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-were-some-of-its-core-features"&gt;
  &lt;/a&gt;
  What were some of its core features?
&lt;/h2&gt;

&lt;p&gt;LiveWire was built for &lt;em&gt;"enterprise"&lt;/em&gt; customers, and some of the architectural decisions that were made could be explained by this constraint. &lt;/p&gt;

&lt;p&gt;There was for example a clear focus on &lt;strong&gt;database connectivity&lt;/strong&gt;, &lt;strong&gt;interoperability with Java classes&lt;/strong&gt; &lt;strong&gt;and native libraries&lt;/strong&gt; &lt;em&gt;(LiveConnect and &lt;code&gt;jsacca&lt;/code&gt;)&lt;/em&gt;, all of which making it easier for potential clients to integrate LiveWire into their existing infrastructure and codebases, at least in theory.&lt;/p&gt;

&lt;p&gt;Netscape's server-side JavaScript implementation also came with APIs for &lt;strong&gt;session management&lt;/strong&gt;, &lt;strong&gt;forms processing&lt;/strong&gt;,  &lt;strong&gt;filesystem access&lt;/strong&gt;, and even &lt;strong&gt;sending emails&lt;/strong&gt; in later versions, which made of LiveWire a seemingly complete and viable solution for backend development.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#was-livewire-a-success"&gt;
  &lt;/a&gt;
  Was LiveWire a success?
&lt;/h2&gt;

&lt;p&gt;LiveWire was a very interesting and innovative piece of software, but never came come close to becoming the gold standard of &lt;em&gt;"professional"&lt;/em&gt; server-side development of the late nineties. While it is hard to pinpoint a single reason why that was the case, here are a few clues, in no particular order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Having to compile and bundle everything, including HTML content, made for a somewhat cumbersome developer experience&lt;/strong&gt;. &lt;a href="https://philip.greenspun.com/wtr/livewire.html"&gt;This review of LiveWire's development cycle by Philip Greenspun&lt;/a&gt; describes these woes in great detail. LiveWire's direct competitor, Microsoft ASP, didn't require a compilation step.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript was a very young language at the time.&lt;/strong&gt; It still had to prove itself, and hadn't yet become popular enough to have a large pool of developers and libraries available. 
This &lt;a href="http://sunsite.uakom.sk/sunworldonline/swol-08-1999/swol-08-webmaster.html"&gt;article by R. Allen Wyke from 1999&lt;/a&gt; is a good example of how, even a few years later, JavaScript had to be advocated for. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Netscape didn't necessarily invest as much as its competitors&lt;/strong&gt;, and LiveWire quickly lagged behind in terms of features. &lt;a href="https://www.chicagotribune.com/news/ct-xpm-1997-07-18-9801160234-story.html"&gt;This 1997 article from the Chicago Tribune&lt;/a&gt; shows how LiveWire started to lag behind the competition, a year after its launch.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-did-livewire-become"&gt;
  &lt;/a&gt;
  What did LiveWire become?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;"Enterprise-grade"&lt;/em&gt; software means long term support. Through successive acquisitions, &lt;a href="https://en.wikipedia.org/wiki/Oracle_iPlanet_Web_Server#Release_History"&gt;&lt;em&gt;"Netscape Enterprise Server"&lt;/em&gt; was rebranded multiple times&lt;/a&gt; and merged with other technologies, which explains why &lt;a href="https://docs.oracle.com/cd/E19957-01/816-6411-10/contents.htm"&gt;LiveWire's documentation&lt;/a&gt; can be found on Oracle's website. &lt;/p&gt;

&lt;p&gt;It is a bit difficult to trace exactly how LiveWire evolved in that context, and figure out when exactly it was discontinued. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Its legacy is an interesting one:&lt;/strong&gt; while it is not hard to find comments on the internet about how seemingly hard and unpleasant it was to work with this technology &lt;a href="https://stackoverflow.com/questions/18350910/netscape-enterprise-server-and-server-side-javascript-ssjs-vs-node-js/26321883#26321883"&gt;(1)&lt;/a&gt; &lt;a href="https://philip.greenspun.com/wtr/livewire.html#:~:text=Reader's%20Comments"&gt;(2)&lt;/a&gt; &lt;a href="https://philip.greenspun.com/wtr/dead-trees/53012.htm#:~:text=Netscape%20LiveWire"&gt;(3)&lt;/a&gt;, it remains an important  piece of JavaScript's history, as it was one of the very first attempts at making the language live outside the browser and compete on the &lt;em&gt;"for business"&lt;/em&gt; market of software development solutions.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>history</category>
    </item>
    <item>
      <title>LeetCode - Next Permutation</title>
      <author>Alkesh Ghorpade</author>
      <pubDate>Sun, 12 Sep 2021 14:28:01 +0000</pubDate>
      <link>https://dev.to/_alkesh26/leetcode-next-permutation-109a</link>
      <guid>https://dev.to/_alkesh26/leetcode-next-permutation-109a</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem statement
&lt;/h3&gt;

&lt;p&gt;Implement &lt;strong&gt;next permutation&lt;/strong&gt;, which rearranges numbers into the lexicographically next greater permutation of numbers.&lt;/p&gt;

&lt;p&gt;If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).&lt;/p&gt;

&lt;p&gt;The replacement must be in place and use only constant extra memory.&lt;/p&gt;

&lt;p&gt;Problem statement taken from: &lt;a href="https://leetcode.com/problems/next-permutation"&gt;&lt;/a&gt;&lt;a href="https://leetcode.com/problems/next-permutation"&gt;https://leetcode.com/problems/next-permutation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [1, 2, 3]
Output: [1, 3, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [3, 2, 1]
Output: [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [1, 1, 5]
Output: [1, 5, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [1]
Output: [1]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- 1 &amp;lt;= nums.length &amp;lt;= 100
- 0 &amp;lt;= nums[i] &amp;lt;= 100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#brute-force-approach"&gt;
  &lt;/a&gt;
  Brute force approach
&lt;/h4&gt;

&lt;p&gt;Brute force approach is to find all possible permutations of the array elements and find out the permutation which is the next largest one.&lt;/p&gt;

&lt;p&gt;The problem here is, we are generating all permutations of the array elements and it takes lot of time.&lt;/p&gt;

&lt;p&gt;The time complexity of this approach is &lt;strong&gt;O(N!)&lt;/strong&gt;&lt;br&gt;
and space complexity is &lt;strong&gt;O(N)&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#single-pass-approach"&gt;
  &lt;/a&gt;
  Single pass approach
&lt;/h4&gt;

&lt;p&gt;For a given sequence which is in descending order as below&lt;/p&gt;

&lt;p&gt;[8, 5, 3, 2, 1]&lt;/p&gt;

&lt;p&gt;there is no next larger permutation possible.&lt;br&gt;
This gives us a hint on identifying the next larger permutation.&lt;/p&gt;

&lt;p&gt;We need to find the first pair of two successive numbers &lt;strong&gt;nums[i]&lt;/strong&gt; and &lt;strong&gt;nums[i ‚àí 1]&lt;/strong&gt;, from the right, which satisfy &lt;strong&gt;nums[i] &amp;gt; nums[i ‚àí 1]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once we find the index &lt;strong&gt;i - 1&lt;/strong&gt;, we need to replace the number &lt;strong&gt;nums[i - 1]&lt;/strong&gt; with the number which is just larger than itself among the numbers lying to its right section &lt;strong&gt;nums[i]..nums[nums.size() - 1]&lt;/strong&gt;, say &lt;strong&gt;nums[j]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We swap the numbers &lt;strong&gt;nums[i - 1]&lt;/strong&gt; and &lt;strong&gt;nums[j]&lt;/strong&gt;. We reverse all the numbers from index &lt;strong&gt;i&lt;/strong&gt; and &lt;strong&gt;nums.size() - 1&lt;/strong&gt;.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#algorithm"&gt;
  &lt;/a&gt;
  Algorithm
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- return if nums.size() &amp;lt;= 1
- set n = nums.size(), i = n - 1
- loop while i &amp;gt; 0
  - if nums[i] &amp;gt; nums[i - 1]
    - break

- if i &amp;lt;= 0
  - i = 0

- set x = ( i == 0 ) ? nums[i] : nums[i - 1]
- smallest = i

- loop for j = i + 1; j &amp;lt; n; j++
  - nums[j] &amp;gt; x &amp;amp;&amp;amp; nums[j] &amp;lt; nums[smallest]
    - smallest = j

- swap(&amp;amp;nums[smallest], (i == 0 ? &amp;amp;nums[i] : &amp;amp;nums[i - 1]));

- sort(nums.begin() + i, nums.end());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#c-solution"&gt;
  &lt;/a&gt;
  C++ solution
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;nextPermutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;

        &lt;span class="c1"&gt;// we can also use reverse&lt;/span&gt;
        &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#golang-solution"&gt;
  &lt;/a&gt;
  Golang solution
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;nextPermutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#javascript-solution"&gt;
  &lt;/a&gt;
  Javascript solution
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nextPermutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's dry-run our algorithm to see how the solution works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [1, 2, 3, 6, 5, 4]
Output: [1, 2, 4, 3, 5, 6]

Step 1: nums.size() &amp;lt;= 1
        6 &amp;lt;= 1
        false

Step 2: n = nums.size()
        n = 6

        i = n - 1
          = 6 - 1
          = 5

Step 3: loop for i &amp;gt; 0
        5 &amp;gt; 0
        true

        if nums[i] &amp;gt; nums[i - 1]
           nums[5] &amp;gt; nums[4]
           4 &amp;gt; 5
           false

        i--
        i = 4

Step 4: loop for i &amp;gt; 0
        4 &amp;gt; 0
        true

        if nums[i] &amp;gt; nums[i - 1]
           nums[4] &amp;gt; nums[3]
           5 &amp;gt; 6
           false

        i--
        i = 3

Step 5: loop for i &amp;gt; 0
        3 &amp;gt; 0
        true

        if nums[i] &amp;gt; nums[i - 1]
           nums[3] &amp;gt; nums[2]
           6 &amp;gt; 3
           true

           break

Step 6: i &amp;lt;= 0
        3 &amp;lt;= 0
        false

Step 7: x = (i == 0 ? nums[i] : nums[i - 1])
          = (3 == 0 ? nums[3] : nums[2])
          = (false ? nums[3] : nums[2])
          = nums[2]
          = 3

        smallest = i
                 = 3

Step 8: loop for(j = i + 1; j &amp;lt; n; j++)
        j = 3 + 1
          = 4

        j &amp;lt; n
        4 &amp;lt; 6
        true

        nums[j] &amp;gt; x &amp;amp;&amp;amp; nums[j] &amp;lt; nums[smallest]
        nums[4] &amp;gt; 3 &amp;amp;&amp;amp; nums[4] &amp;lt; nums[3]
        5 &amp;gt; 3 &amp;amp;&amp;amp; 5 &amp;lt; 6
        true

        smallest = j
                 = 4

        j++
        j = 5

Step 9: loop for(j = i + 1; j &amp;lt; n; j++)
        j &amp;lt; n
        5 &amp;lt; 6
        true

        nums[j] &amp;gt; x &amp;amp;&amp;amp; nums[j] &amp;lt; nums[smallest]
        nums[5] &amp;gt; 3 &amp;amp;&amp;amp; nums[5] &amp;lt; nums[4]
        4 &amp;gt; 3 &amp;amp;&amp;amp; 4 &amp;lt; 6
        true

        smallest = j
                 = 5

        j++
        j = 6

Step 10: loop for(j = i + 1; j &amp;lt; n; j++)
         j &amp;lt; 6
         6 &amp;lt; 6
         false

Step 11: swap(&amp;amp;nums[smallest], (i == 0 ? &amp;amp;nums[i] : &amp;amp;nums[i - 1]));
         swap(&amp;amp;nums[5], 3 == 0 ? &amp;amp;nums[3] : &amp;amp;nums[2])
         swap(&amp;amp;nums[5], &amp;amp;nums[2])
         swap(3, 4)

         [1, 2, 4, 6, 5, 3]

Step 12: reverse(nums[i], nums[n - 1])
         reverse(nums[3], nums[5])

         [1, 2, 4, 3, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>leetcode</category>
      <category>cpp</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Form Example in Laravel 8</title>
      <author>Sanajit Jana</author>
      <pubDate>Sun, 12 Sep 2021 14:18:54 +0000</pubDate>
      <link>https://dev.to/sanajitjana/form-example-in-laravel-8-45oc</link>
      <guid>https://dev.to/sanajitjana/form-example-in-laravel-8-45oc</guid>
      <description>&lt;p&gt;Laravel 8 form example tutorial. In this post, i will teach from starting on how to send form data on controller and how to insert form data in database using laravel 8.&lt;/p&gt;

&lt;p&gt;If you are trying to create form and want to insert form data into database using laravel 8 latest version. So this post will help you to do this.&lt;/p&gt;

&lt;p&gt;Because in this post example, i will create contact-list form and submit to database using laravel 8 version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-submit-form-data-into-database"&gt;
  &lt;/a&gt;
  How to Submit Form Data into Database?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Step 1 ‚Äì Install Laravel 8 Application&lt;/li&gt;
&lt;li&gt;Step 2 ‚Äì Configuring Database using Env File&lt;/li&gt;
&lt;li&gt;Step 3 ‚Äì Create Model &amp;amp; Migration File For Add Blog Post Form&lt;/li&gt;
&lt;li&gt;Step 4 ‚Äì Create Routes&lt;/li&gt;
&lt;li&gt;Step 5 ‚Äì Creating Controller&lt;/li&gt;
&lt;li&gt;Step 6 ‚Äì Create Blade File For Add Blog Post Form&lt;/li&gt;
&lt;li&gt;Step 7 ‚Äì Start Development Server&lt;/li&gt;
&lt;li&gt;Step 8 ‚Äì Run Laravel 8 Form App On Browser&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-laravel-8-application"&gt;
  &lt;/a&gt;
  Step 1 ‚Äì Install Laravel 8 Application
&lt;/h3&gt;

&lt;p&gt;In step 1, open your terminal and navigate to your local web server directory using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//for windows user&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;xampp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;htdocs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//for ubuntu user&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then install laravel 8 latest application using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;composer&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;prefer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="n"&gt;laravel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;laravel&lt;/span&gt; &lt;span class="nc"&gt;LaravelForm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-configuring-database-using-env-file"&gt;
  &lt;/a&gt;
  Step 2 ‚Äì Configuring Database using Env File
&lt;/h3&gt;

&lt;p&gt;In step 2, open your downloaded laravel 8 app into any text editor. Then find .env file and configure database detail like following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="no"&gt;DB_CONNECTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;
&lt;span class="no"&gt;DB_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="no"&gt;DB_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3306&lt;/span&gt;
&lt;span class="no"&gt;DB_DATABASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="no"&gt;DB_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="no"&gt;DB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-create-model-amp-migration-file-for-add-blog-post-form"&gt;
  &lt;/a&gt;
  Step 3 ‚Äì Create Model &amp;amp; Migration File For Add Blog Post Form
&lt;/h3&gt;

&lt;p&gt;In step 3, open command prompt and navigate to your project by using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nc"&gt;LaravelForm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create model and migration file by using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;artisan&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command will create two files into your laravel 8 form application, which is located inside the following locations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LaravelForm/app/Models/Post.php&lt;/li&gt;
&lt;li&gt;LaravelForm/database/migrations/2020_09_09_025857_create_posts_table.php&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, find create_posts_table.php file inside LaravelForm/database/migrations/ directory. Then open this file and add the following code into function up() on this file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'description'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open again your terminal and type the following command on cmd to create tables into your selected database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;artisan&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-create-routes"&gt;
  &lt;/a&gt;
  Step 4 ‚Äì Create Routes
&lt;/h3&gt;

&lt;p&gt;In step 4, open your web.php file, which is located inside routes directory. Then add the following routes into web.php file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Route&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Http\Controllers\PostController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/&lt;/span&gt;
&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'welcome'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add-blog-post-form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;PostController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'store-form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;PostController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'store'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5-creating-controller"&gt;
  &lt;/a&gt;
  Step 5 ‚Äì Creating Controller
&lt;/h3&gt;

&lt;p&gt;In step 5, create form controller by using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;artisan&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="nc"&gt;PostController&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command will create PostController.php file, which is located inside LaravelForm/app/Http/Controllers/ directory.&lt;/p&gt;

&lt;p&gt;So open PostController.php file and add the following code into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add-blog-post-form'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add-blog-post-form'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Blog Post Form Data Has Been inserted'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6-create-blade-file-for-form"&gt;
  &lt;/a&gt;
  Step 6 ‚Äì Create Blade File For Form
&lt;/h3&gt;

&lt;p&gt;In step 6, create new blade view file that named add-blog-post-form.blade.php inside resources/views directory for add blog post form.&lt;/p&gt;

&lt;p&gt;Then add the following html form code into add-blog-post-form.blade.php:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Laravel 8 Form Example Tutorial&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"csrf-token"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"{{ csrf_token() }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container mt-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  @if(session('status'))
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-success"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ session('status') }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  @endif
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-header text-center font-weight-bold"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Laravel 8 - Add Blog Post Form Example
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"add-blog-post-form"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"add-blog-post-form"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"{{url('store-form')}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       @csrf
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleInputEmail1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Title&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleInputEmail1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Description&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-7-start-development-server"&gt;
  &lt;/a&gt;
  Step 7 ‚Äì Start Development Server
&lt;/h3&gt;

&lt;p&gt;Finally, open your command prompt again and run the following command to start development server for your laravel 8 form application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;artisan&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-8-run-laravel-8-form-app-on-browser"&gt;
  &lt;/a&gt;
  Step 8 ‚Äì Run Laravel 8 Form App On Browser
&lt;/h3&gt;

&lt;p&gt;In step 8, open your browser and fire the following url into your browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you fire the above given url on browser, you will look like in the following image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6sDdJgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrlx7ey52jex61d3p7bu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6sDdJgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrlx7ey52jex61d3p7bu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>formsubmit</category>
      <category>laravel8</category>
      <category>databasesubmit</category>
      <category>laravelcurd</category>
    </item>
    <item>
      <title>archifacts is launched</title>
      <author>Oliver Libutzki</author>
      <pubDate>Sun, 12 Sep 2021 13:52:55 +0000</pubDate>
      <link>https://dev.to/olibutzki/archifacts-is-launched-26il</link>
      <guid>https://dev.to/olibutzki/archifacts-is-launched-26il</guid>
      <description>&lt;p&gt;I am very happy to announce the launch of &lt;em&gt;archifacts&lt;/em&gt; - a library which helps you to extract the building blocks and relationships between them out of your Java or Kotlin application's bytecode.&lt;/p&gt;

&lt;p&gt;In this blog post I'd like to explain the motivation for creating this library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tackling-outdated-documentation"&gt;
  &lt;/a&gt;
  Tackling outdated documentation
&lt;/h2&gt;

&lt;p&gt;Some weeks ago I stumbled upon this tweet by Tudor Girba.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--uapV5M-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1370148445/me-closeup-square_normal.jpg" alt="Tudor Girba profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tudor Girba
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @girba
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      As a developer, do you like creating documentation for you software system?&lt;br&gt;&lt;br&gt;Why?
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:53 PM - 16 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1427342753952899080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1427342753952899080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1427342753952899080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;When you crawl through the comments you quickly realize that most of the discussions are about the challenge to keep documentation up-to-date. In my current project we ran into this trap as we created a very extensive documentation which was not able to keep pace with the application's progress.&lt;/p&gt;

&lt;p&gt;I do not say it's impossible to keep your software system and its documentation in sync, if they are independent artifacts, but it requires a high amount of discipline and effort.&lt;/p&gt;

&lt;p&gt;I recommend to document the architectural concepts by hand and to derive the application's concrete building blocks automatically.&lt;/p&gt;

&lt;p&gt;In general you have two options: You can model your application on a higher abstraction layer and generate code and documentation out of this model. Model-driven software engineering (MDSE) and DSLs are are promising approach to implement this strategy.&lt;/p&gt;

&lt;p&gt;While this is a good idea in the first place you rarely model a whole application. Most often some stubs are generated which are implemented using a General Purpose Language (GPL) like Java, C# or Python. Therefore you cannot be sure that all the information is contained in the model... and that results in an incomplete documentation which is as bad as an outdated documentation.&lt;/p&gt;

&lt;p&gt;In my opinion the most promising approach to document the actual behaviour of a system is to extract it from its foundation: the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-archifacts"&gt;
  &lt;/a&gt;
  Introducing archifacts
&lt;/h2&gt;

&lt;p&gt;This is where &lt;em&gt;archifacts&lt;/em&gt; kicks in. It analyzes your Java or Kotlin application's bytecode and builds an architecture model. Having this model in place you can use it to enhance your documentation by generating information about your modules, building blocks and relationships between them.&lt;/p&gt;

&lt;p&gt;In this very first release &lt;em&gt;archifacts&lt;/em&gt; ships integrations for &lt;em&gt;Spring Framework&lt;/em&gt;, &lt;em&gt;Axon Framework&lt;/em&gt; and &lt;em&gt;jMolecules&lt;/em&gt;, a library which helps you to express your architectural concepts directly in the source code.&lt;/p&gt;

&lt;p&gt;There is also some very basic support for generating documentation using AsciiDoc and Simon Brown's &lt;a href="https://c4model.com/"&gt;C4 model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;archifacts&lt;/em&gt; stands on the shoulders of a giant: &lt;a href="https://www.archunit.org/"&gt;ArchUnit&lt;/a&gt; and its fabulous Core API to extract the concepts from the bytecode.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dIOk11Zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1408147656728252418/2fNlwav3_normal.jpg" alt="Oliver Libutzki profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Oliver Libutzki
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @oliverlibutzki
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The Lang and Library API of &lt;a href="https://twitter.com/archtests"&gt;@archtests&lt;/a&gt; is pure gold, but the hidden and underrated star behind them is the Core API which can help us not only for architecture verification.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:59 PM - 01 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1421848177142026245" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1421848177142026245" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1421848177142026245" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#moduliths-similarities"&gt;
  &lt;/a&gt;
  Moduliths similarities
&lt;/h2&gt;

&lt;p&gt;Conceptually, there a lot of similarities to &lt;a href="https://github.com/odrotbohm/moduliths"&gt;Moduliths&lt;/a&gt;.&lt;br&gt;
&lt;em&gt;Moduliths&lt;/em&gt; helps you to build modular Spring Boot applications which are preferred to be deployed as a single unit. Like &lt;em&gt;archifacts&lt;/em&gt; &lt;em&gt;Moduliths&lt;/em&gt; uses &lt;em&gt;ArchUnit&lt;/em&gt; to enforce certain architectural constraints and - based on some rules - it's able to identify the application's building blocks.&lt;/p&gt;

&lt;p&gt;Although I'm convinced that &lt;em&gt;Moduliths&lt;/em&gt; is a great starting point for building modular Spring Boot based applications, it was not the best choice for my use case. &lt;em&gt;Moduliths&lt;/em&gt; has some impacts and expections regarding the application's structure. It has advanced semantics what a module is and which rules are enforced.&lt;/p&gt;

&lt;p&gt;After providing some issues and PRs for &lt;em&gt;Moduliths&lt;/em&gt; I decided that it's more efficient to build a library which is completely agnostic of any other runtime technology like Spring Boot.&lt;/p&gt;

&lt;p&gt;I do not want to place &lt;em&gt;archifacts&lt;/em&gt; as a competitor to &lt;em&gt;Moduliths&lt;/em&gt;. It has a slightly different scope and maybe it makes sense to join forces some day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started"&gt;
  &lt;/a&gt;
  How to get started
&lt;/h2&gt;

&lt;p&gt;If you want to see &lt;em&gt;archifacts&lt;/em&gt; in action as quick as possible check out the &lt;a href="https://github.com/archifacts/archifacts/tree/main/examples/jmolecules-spring-data-jpa"&gt;jmolecules-spring-data-example&lt;/a&gt;. It generates some&lt;br&gt;
C4 diagrams and a textual architecture overview for a jMolecules example.&lt;/p&gt;

&lt;p&gt;Please keep in mind that &lt;em&gt;archifacts&lt;/em&gt; is in a very very early state, but I already published the first release to Maven Central, so everyone can use it and give feedback. Any contributions are highly welcome. To get in touch you can use &lt;a href="https://github.com/archifacts/archifacts"&gt;GitHub&lt;/a&gt; and/or follow the project on &lt;a href="https://twitter.com/archifacts_org"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I really hope that &lt;em&gt;archifacts&lt;/em&gt; will come in handy for some other projects.&lt;/p&gt;

&lt;p&gt;One last shoutout to &lt;a href="https://twitter.com/NilsEhmke"&gt;Nils Ehmke&lt;/a&gt; for all the valuable discussions, reviews and contributions. Thank you!&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>documentation</category>
      <category>archunit</category>
      <category>java</category>
    </item>
    <item>
      <title>What is DB:transaction and how to use it in laravel</title>
      <author>Snehal </author>
      <pubDate>Sun, 12 Sep 2021 13:42:05 +0000</pubDate>
      <link>https://dev.to/snehalk/what-is-db-transaction-and-how-to-use-it-in-laravel-1i4m</link>
      <guid>https://dev.to/snehalk/what-is-db-transaction-and-how-to-use-it-in-laravel-1i4m</guid>
      <description>&lt;p&gt;Hello, in this blog we are going to see for what purpose and why we use DB:transaction and advantage of using it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Database Transaction?&lt;/strong&gt;&lt;br&gt;
Database transaction is provided by DB facade to run a set of operation within a database transaction.&lt;br&gt;
It gives us the powerful ability to safely perform a set of data-modifying SQL queries such as insert, update, delete. It made safe because we can easily rollback all queries made within the transaction at any time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why we use it?&lt;/strong&gt;&lt;br&gt;
Let us consider we have an application on which admin can see all the posts and its user, which is associated with each other. When admin deletes post/user which is totally dependent on one another, and if any one of its operation fails we need to rollback previously successful operation to prevent error causing issues and send a error message back to the admin.&lt;/p&gt;

&lt;p&gt;Let us see an example:&lt;br&gt;
&lt;code&gt;Issue causing scenario&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt; &lt;span class="c1"&gt;// delete user and all of its post&lt;/span&gt;
 &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example user will be deleted but it's posts are not deleted, which will cause error where we are using post with its user_id, or these posts are still there in database which is now unused and unnecessary. To prevent this we use Db transaction, so if the posts are not deleted we cannot delete its user (because the operation are dependent on each other) and it will rollback the transaction.&lt;/p&gt;

&lt;p&gt;We can now use the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt; &lt;span class="c1"&gt;// delete user and all of its post&lt;/span&gt;
 &lt;span class="no"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we can handle the issue with DB transaction. If both transaction succeed then with will return success message.&lt;/p&gt;

&lt;p&gt;Thank you for reading. ü¶Ñ ü¶Ñ ü¶Å üòç &lt;/p&gt;

</description>
      <category>laravel</category>
      <category>beginners</category>
      <category>womenintech</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>[Rust] Tokio stack overview: Runtime</title>
      <author>Roger Torres Paes (he/him/ele)</author>
      <pubDate>Sun, 12 Sep 2021 13:39:39 +0000</pubDate>
      <link>https://dev.to/rogertorres/rust-tokio-stack-overview-runtime-9fh</link>
      <guid>https://dev.to/rogertorres/rust-tokio-stack-overview-runtime-9fh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;TL:DR: In this first installment of a series devised to give an overview of the Tokio stack, I talk about its &lt;strong&gt;runtime&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quoting its &lt;a href="https://tokio.rs/blog/2017-01-tokio-0-1"&gt;first announcement&lt;/a&gt;, "Tokio is a platform for writing fast networking code in Rust [and] is primarily intended as a foundation for other libraries". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://tokio.rs/#tk-lib-tokio"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pia7Vin8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuzlo4csnkfvpl6gwnq8.png" alt="Tokio Stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this series, I plan to go through all the libraries (crates) that belong to this stack, explaining the very basics of each, which means trying to answer these simple questions: what problems do them solve and how?&lt;/p&gt;

&lt;p&gt;Today, I start with the first (and, I assume, the most known) of them: the &lt;strong&gt;Tokio runtime&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-an-asynchronous-runtime"&gt;
  &lt;/a&gt;
  What is an asynchronous runtime?
&lt;/h2&gt;

&lt;p&gt;Core Rust provides the types to build an asynchronous application. However, when building, say, an asynchronous &lt;em&gt;network&lt;/em&gt; application, we found ourselves in the need of a lot of boilerplate code. We can write it ourselves, &lt;strong&gt;or&lt;/strong&gt; we can use a library that gives it to us, ready-made (and probably better-made). And that is what an asynchronous runtime such as Tokio does, it provides the building blocks to construe such an application.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#futures"&gt;
  &lt;/a&gt;
  Futures
&lt;/h2&gt;

&lt;p&gt;Let us start by taking a look at what core Rust brings to the table, so we can better understand what we would lack if we were to build an asynchronous network application all by ourselves.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S. &lt;em&gt;I already wrote an &lt;a href="https://dev.to/rogertorres/asynchronous-rust-basic-concepts-44ed"&gt;introduction to async Rust&lt;/a&gt;, so this will be a dried out explanation.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Asynchronous Rust allows us to create concurrent applications. It does so via the syntax &lt;code&gt;async/.await&lt;/code&gt;. Basically, blocks and functions declared with &lt;code&gt;async&lt;/code&gt; &lt;em&gt;desugar&lt;/em&gt; into a block or function that returns the implementation of a trait called &lt;a href="https://aturon.github.io/blog/2016/08/11/futures/"&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;Future&lt;/code&gt; is a state machine, so it can keep up with the progress made in a certain operation, which means it can stop processing at some point and, when executing again, continue from where it stopped. On a higher level, we might say that a future is the representation of a value that may or may not be ready, a duality that is put forward using an enum called &lt;code&gt;Poll&lt;/code&gt; that has two variants: &lt;code&gt;Pending&lt;/code&gt; and &lt;code&gt;Ready&amp;lt;T&amp;gt;&lt;/code&gt;. The &lt;code&gt;Future&lt;/code&gt; trait also has a function, called &lt;code&gt;poll()&lt;/code&gt;, that will try to make as much progress as possible within the future (thus driving the state machine forward). This function, &lt;code&gt;poll()&lt;/code&gt;, is first executed when we &lt;code&gt;.await&lt;/code&gt; the future. To &lt;code&gt;.await&lt;/code&gt; the future is to deliver it to a &lt;strong&gt;scheduler&lt;/strong&gt; (formerly known as &lt;em&gt;executor&lt;/em&gt;) that will &lt;code&gt;poll()&lt;/code&gt; it. If it is processed through completion, &lt;code&gt;Ready&amp;lt;T&amp;gt;&lt;/code&gt; is returned, otherwise &lt;code&gt;Pending&lt;/code&gt; is returned and the scheduler keeps the future aside, waiting for a request to &lt;code&gt;poll()&lt;/code&gt; it again. This request comes from the &lt;strong&gt;driver&lt;/strong&gt; (formerly known as &lt;em&gt;reactor&lt;/em&gt;), which is an I/O event loop. &lt;/p&gt;

&lt;p&gt;Rust does not provide these last two. That is why we need a crate that provides them. Besides that, we also need some time-related utilities to handle all this scheduling stuff.&lt;/p&gt;

&lt;p&gt;Needless to say, that this is precisely what the Tokio runtime provides. Quoting its &lt;a href="https://docs.rs/tokio/1.11.0/tokio/runtime/index.html"&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unlike other Rust programs, asynchronous applications require runtime support. In particular, the following runtime services are necessary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An I/O event loop, called the driver, which drives I/O resources and dispatches I/O events to tasks that depend on them.&lt;/li&gt;
&lt;li&gt;A scheduler to execute tasks that use these I/O resources.&lt;/li&gt;
&lt;li&gt;A timer for scheduling work to run after a set period of time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#scheduler"&gt;
  &lt;/a&gt;
  Scheduler
&lt;/h2&gt;

&lt;p&gt;When you code an async function for the first time, you realize that the place from which you are calling this function also has to be async. And if you go all the way up and try to make your &lt;code&gt;main()&lt;/code&gt; function async, Rust will tell you that "&lt;code&gt;main&lt;/code&gt; function is not allowed to be &lt;code&gt;async&lt;/code&gt;". &lt;/p&gt;

&lt;p&gt;Asking Rust to &lt;code&gt;explain&lt;/code&gt; this error gives us a hint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rustc --explain E0752

`fn main()` or the specified start function is not allowed to be `async`. Not having a correct async runtime library setup may cause this error.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick search on the web is enough to provide the solution: we got to import &lt;code&gt;tokio&lt;/code&gt; and use this attribute macro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
    &lt;span class="c"&gt;// ... &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, even thought it certainly works, a question remains‚Ä¶&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;Because at some point the futures have to be dealt with, and there is nothing above the &lt;code&gt;main()&lt;/code&gt; function in a Rust program, so whoever is handling them, have to be below it. Another way to put it is to say that the &lt;code&gt;main()&lt;/code&gt; is the entry door of your program. The operating system running the binary knows nothing about futures, so they have to be managed "inside the house", that is, after we entered the program. So, &lt;code&gt;main()&lt;/code&gt; has to be synchronous. &lt;/p&gt;

&lt;p&gt;If that is the case, how does Tokio manage to make &lt;code&gt;main()&lt;/code&gt; async, if the top-level function cannot be async? Well, it does not. &lt;code&gt;#[tokio::main]&lt;/code&gt; will desugar &lt;code&gt;async fn main()&lt;/code&gt; into something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new_multi_thread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.enable_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.block_on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// ...&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using the attribute macro &lt;code&gt;#[tokio::main]&lt;/code&gt;, we are building a runtime below &lt;code&gt;main()&lt;/code&gt;, a runtime that will handle the tree of futures. Why am I calling it a tree? Because a future may &lt;code&gt;.await&lt;/code&gt; other futures. I will talk more about multiple &lt;code&gt;.await&lt;/code&gt; calls later. For now, let us move on with this idea of handling a tree of futures.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-the-tree-of-futures"&gt;
  &lt;/a&gt;
  Handling the tree of futures
&lt;/h3&gt;

&lt;p&gt;Consider the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;join!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'static&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;net&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;TcpListener&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0:8080"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="nf"&gt;.accept&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"`foo()` is finished"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="s"&gt;"foo"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"error"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'static&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;net&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;TcpListener&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0:8081"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="nf"&gt;.accept&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"`bar()` is finished"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="s"&gt;"bar"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"error"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Tip: run the code above and connect to both &lt;code&gt;0.0.0.0:8080&lt;/code&gt; and &lt;code&gt;0.0.0.0:8081&lt;/code&gt; using your browser and check the result in the terminal where you ran the program.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we call &lt;code&gt;foo().await&lt;/code&gt;, we are handing &lt;code&gt;foo()&lt;/code&gt;'s future to the runtime scheduler, the one responsible for calling &lt;code&gt;poll()&lt;/code&gt; on it. Futures are executed by the scheduler as part of &lt;a href="https://docs.rs/tokio/1.11.0/tokio/task/index.html"&gt;&lt;em&gt;tasks&lt;/em&gt;&lt;/a&gt;. You might think of a task as a thread that is not handled by the OS scheduler, but by the runtime scheduler (they are &lt;a href="https://en.wikipedia.org/wiki/Green_threads"&gt;virtual/green threads&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;This will run &lt;code&gt;foo()&lt;/code&gt; as far as possible towards completion, which means that the executor will not preemptively stop it to run something else in its stead (as the OS does with its threads). For the Tokio scheduler, as far as a task is doing relevant work, it may keep working. In a more technical jargon, tasks run until they &lt;em&gt;yield&lt;/em&gt;. In our example, &lt;code&gt;foo()&lt;/code&gt; runs until it starts listening at port &lt;code&gt;8080&lt;/code&gt;. If you're trying to understand which part of our code is explicitly yielding the task, give up. It is not there. We don't code yields, Rust manages that for us.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;foo()&lt;/code&gt; yields, &lt;code&gt;join!&lt;/code&gt; will call &lt;code&gt;bar()&lt;/code&gt;, which will run until it starts listening at port &lt;code&gt;8081&lt;/code&gt;. At this point, as both functions have yielded, we have two futures waiting to be polled again, and they may be polled in any order. Now, imagine that &lt;code&gt;foo()&lt;/code&gt; and/or &lt;code&gt;bar()&lt;/code&gt; call async functions inside them, giving new tasks to the scheduler. In a scenario like this, &lt;em&gt;we have a tree of futures.&lt;/em&gt; One important thing to understand here is that we have a "root-future" (the async book calls it ‚Äútop-level future‚Äù, but I will stick with ‚Äúroot‚Äù); in this case, it is the future returned by that async block in &lt;code&gt;main&lt;/code&gt; (you will find inside &lt;code&gt;block_on()&lt;/code&gt; in the &lt;em&gt;desugared&lt;/em&gt; example). And this is important for at least two reasons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, a task is responsible for a tree of futures. So, let's say we have an &lt;code&gt;async fn main()&lt;/code&gt;. As we saw, under the hood this is a normal &lt;code&gt;main()&lt;/code&gt; that will &lt;code&gt;block_on()&lt;/code&gt; an async block. If inside this future we &lt;code&gt;.await&lt;/code&gt; another future, it will be dealt by the same task, as it is part of the same tree.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, it points to the &lt;a href="https://www.youtube.com/watch?v=ThjvMReOXYM&amp;amp;t=4757s"&gt;threshold between concurrency and parallelism&lt;/a&gt;. If you just &lt;code&gt;.await&lt;/code&gt; or &lt;code&gt;join!&lt;/code&gt; futures, you will never have two Tokio tasks running simultaneously because, at the end, our &lt;code&gt;main()&lt;/code&gt; is &lt;code&gt;.await&lt;/code&gt;ing the root-future, and its node-futures are executed one after the other as part of the same task, hence in the same OS thread. In other words, your async program will have concurrency, but not parallelism. &lt;/p&gt;

&lt;p&gt;Revisiting our example, even if ports &lt;code&gt;8080&lt;/code&gt; and &lt;code&gt;8081&lt;/code&gt; are accessed at the same time, &lt;code&gt;foo()&lt;/code&gt; and &lt;code&gt;bar()&lt;/code&gt; will be executed one after the other because they are &lt;del&gt;fruits&lt;/del&gt; futures of the same tree. Sure, this is no big deal here, but if you remember that we are talking about network applications and, by doing so, extrapolate over this silly example, you will quickly see this cannot be right.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scheduling-parallel-tasks"&gt;
  &lt;/a&gt;
  Scheduling parallel tasks
&lt;/h3&gt;

&lt;p&gt;As mentioned above, &lt;code&gt;main()&lt;/code&gt; is the entry point of our program, so everything we are doing is below it. And what we have below (what &lt;code&gt;#[tokio::main]&lt;/code&gt; desugars to) is a &lt;code&gt;runtime&lt;/code&gt; that was built using &lt;code&gt;new_multi_thread()&lt;/code&gt;: &lt;em&gt;a multi-threaded Tokio runtime&lt;/em&gt;. So far, we have been using only one of those threads; it is running our task spawned by &lt;code&gt;block_on()&lt;/code&gt;. If we want parallelism, we need to hand our futures to the runtime itself, so they can become a "root-future" and, as such, become new tasks. To achieve this parallelism, that is, to allow the runtime to execute our tasks with a different worker of its thread pool, we got to &lt;code&gt;spawn&lt;/code&gt; the tasks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;net&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;TcpListener&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0:8080"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="nf"&gt;.accept&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.try_lock&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
                    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"`foo()` is finished"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;net&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;TcpListener&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0:8081"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="nf"&gt;.accept&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.try_lock&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
                    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"`bar()` is finished"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.try_lock&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, &lt;code&gt;foo()&lt;/code&gt; and &lt;code&gt;bar()&lt;/code&gt; become root-futures in their own right, and as &lt;code&gt;handle()&lt;/code&gt; is the single future within the &lt;code&gt;block_on()&lt;/code&gt; future, we end up with three different trees of futures. That way, if we call all three functions at the ‚Äúsame‚Äù time, they &lt;strong&gt;can&lt;/strong&gt; be executed in three different threads (assuming the runtime has these threads). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I might have went a little over the top by using &lt;code&gt;Arc&amp;lt;Mutex&amp;lt;HashMap&amp;gt;&amp;gt;&lt;/code&gt;, since it could be dealt with in an easier manner with &lt;a href="https://docs.rs/tokio/0.2.2/tokio/task/struct.JoinHandle.html"&gt;&lt;code&gt;JoinHandle&lt;/code&gt;&lt;/a&gt;. My reasoning was that using the smart pointers made it easier to see the parallelism, as the &lt;code&gt;JoinHandle&lt;/code&gt; &lt;em&gt;looks&lt;/em&gt; very similar to how we use &lt;code&gt;.await&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#going-beyond"&gt;
  &lt;/a&gt;
  Going beyond
&lt;/h3&gt;

&lt;p&gt;If you want to go above and beyond, a good place to start is to understand how Tokio employs a work-stealing technique to manage its multithreaded scheduler.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#driver"&gt;
  &lt;/a&gt;
  Driver
&lt;/h2&gt;

&lt;p&gt;Let us reconsider our previous example. After &lt;code&gt;foo()&lt;/code&gt; and &lt;code&gt;bar()&lt;/code&gt; both yield, which happens once they start listening at &lt;code&gt;0.0.0.0&lt;/code&gt;, they return &lt;code&gt;Poll::Pending&lt;/code&gt;. As there is still work to be done, the scheduler will not get rid of them, but will not &lt;code&gt;poll()&lt;/code&gt; them again autonomously; it will &lt;code&gt;poll()&lt;/code&gt; them again under request. &lt;/p&gt;

&lt;p&gt;In this case, the source of the need to &lt;code&gt;poll()&lt;/code&gt; them again is the access to &lt;code&gt;0.0.0.0&lt;/code&gt;. However, if neither &lt;code&gt;foo()&lt;/code&gt; nor &lt;code&gt;bar()&lt;/code&gt; are actually running, which process will pull the trigger? Something has to be running to mediate our access to &lt;code&gt;0.0.0.0&lt;/code&gt; and the scheduler. That is the role of the &lt;strong&gt;driver&lt;/strong&gt;, which is how Tokio call its I/O event loop.&lt;/p&gt;

&lt;p&gt;Before diving into the driver, though, let us talk a bit more about what make it necessary: a pending future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pending-future"&gt;
  &lt;/a&gt;
  Pending future
&lt;/h3&gt;

&lt;p&gt;Maybe this topic belongs to the scheduler, but as it is vital for an understanding of the driver, I think it also fits here.&lt;/p&gt;

&lt;p&gt;When we poll a future, it receives a &lt;code&gt;Context&lt;/code&gt; as an argument. Currently, this &lt;code&gt;Context&lt;/code&gt; is just a wrapper for the &lt;code&gt;&amp;amp;Waker&lt;/code&gt;. This &lt;code&gt;&amp;amp;Waker&lt;/code&gt; is a reference to the &lt;code&gt;Waker&lt;/code&gt; found within the task that calls &lt;code&gt;poll()&lt;/code&gt;. This &lt;code&gt;&amp;amp;Waker&lt;/code&gt; has a method &lt;code&gt;wake()&lt;/code&gt; that is called by the driver, so the task (that owns &lt;code&gt;Waker&lt;/code&gt;) becomes aware that it should &lt;code&gt;poll()&lt;/code&gt; the future once again. &lt;/p&gt;

&lt;p&gt;The following flow is an illustrative example of how it works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A future is &lt;code&gt;.await&lt;/code&gt;ed.&lt;/li&gt;
&lt;li&gt;As such, it is handed to the scheduler task that was created by &lt;code&gt;block_on()&lt;/code&gt; (as we saw, &lt;code&gt;spawn&lt;/code&gt; also creates tasks).&lt;/li&gt;
&lt;li&gt;This task will &lt;code&gt;poll()&lt;/code&gt; the future, which will do some work until it reaches the point where it has to yield; let's say it is listening at some address, as our &lt;code&gt;foo()&lt;/code&gt; was.&lt;/li&gt;
&lt;li&gt;Before yielding, the future &lt;code&gt;clone()&lt;/code&gt; the &lt;code&gt;&amp;amp;Waker&lt;/code&gt; received as an argument in &lt;code&gt;poll()&lt;/code&gt;. That ‚Äúbinds‚Äù the future and the task.&lt;/li&gt;
&lt;li&gt;It yields, returning &lt;code&gt;Poll::Pending&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When the operating system's I/O receives a connection on that certain address, it will let the driver know.&lt;/li&gt;
&lt;li&gt;The driver will call &lt;code&gt;wake()&lt;/code&gt; on the &lt;code&gt;&amp;amp;Waker&lt;/code&gt; stored by the future, and this will wake up the task.&lt;/li&gt;
&lt;li&gt;The awoken task will then &lt;code&gt;poll()&lt;/code&gt; the future again. If it returns &lt;code&gt;Pending&lt;/code&gt; again, the new &lt;code&gt;Waker&lt;/code&gt; the was passed by this last &lt;code&gt;poll()&lt;/code&gt; will be copied and the process restarts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The 6th and 7th steps describes the role of the driver as an interface between the OS and the task scheduler. This means that the driver will perform system calls to the OS, such as &lt;code&gt;kqueue&lt;/code&gt; in BSD/macOS, &lt;code&gt;IPCP&lt;/code&gt; in Windows or &lt;code&gt;epoll&lt;/code&gt; in Linux (and now we are hearing more and more about &lt;code&gt;io_uring&lt;/code&gt;, which Tokio handles as well). &lt;/p&gt;

&lt;p&gt;It is worth noting that the interaction is actually between the driver and &lt;code&gt;mio&lt;/code&gt;, so it is &lt;code&gt;mio&lt;/code&gt; who interacts with the OS. That being said, I will abstract from it here, so we can depict a simplified conversation between Tokio's driver and the OS I/O, which comprises the 6th step above.&lt;/p&gt;

&lt;p&gt;The driver, being an event &lt;em&gt;loop&lt;/em&gt;, will keep polling the OS using one of these system calls. Let us retrieve our &lt;code&gt;foo()&lt;/code&gt; example. If the driver polls the OS and find out that there was a connection at &lt;code&gt;0.0.0.0:8080&lt;/code&gt;, it will then &lt;code&gt;wake()&lt;/code&gt; the task for it to &lt;code&gt;poll()&lt;/code&gt; the future.&lt;/p&gt;

&lt;p&gt;Sure, there is a myriad of details left out. For example, how the communication via &lt;a href="https://tokio.rs/tokio/tutorial/channels"&gt;channels&lt;/a&gt; between the scheduler and the driver actually works? Nevertheless, I will respect the &lt;code&gt;beginners&lt;/code&gt; tag with which I marked this post and stop here. (Even because, if I write posts for beginners, it is not only because I think we still miss more introductory content, but also because of my own current limitations; and here we are teetering on the edge of my knowledge gap üôÉ). &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#timer"&gt;
  &lt;/a&gt;
  Timer
&lt;/h2&gt;

&lt;p&gt;The module &lt;code&gt;tokio::time&lt;/code&gt; is part of the runtime and provides utilities for tracking time. I don't have much to talk about these, but I will, for the sake of completion, quote the part of the documentation that explains what this module provides:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Sleep&lt;/code&gt;&lt;/strong&gt; is a future that does no work and completes at a specific &lt;code&gt;Instant&lt;/code&gt; in time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/strong&gt; is a stream yielding a value at a fixed period. It is initialized with a &lt;code&gt;Duration&lt;/code&gt; and repeatedly yields each time the duration elapses.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Timeout&lt;/code&gt;&lt;/strong&gt;: Wraps a future or stream, setting an upper bound to the amount of time it is allowed to execute. If the future or stream does not complete in time, then it is canceled and an error is returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;p&gt;I will stop here for today. I feel there is a lot missing, but this post is already longer than I wanted. Hopefully, we will be able to revisit some topics as we move on to talk about the other crates.&lt;/p&gt;

&lt;p&gt;As always, if you spot something &lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/photos/4u2U8EO9OzY"&gt;Pawel Nolbert&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>tokio</category>
      <category>runtime</category>
    </item>
    <item>
      <title>Map, Filter and Reduce explained.</title>
      <author>namitmalasi</author>
      <pubDate>Sun, 12 Sep 2021 13:37:20 +0000</pubDate>
      <link>https://dev.to/namitmalasi/map-filter-and-reduce-explained-19np</link>
      <guid>https://dev.to/namitmalasi/map-filter-and-reduce-explained-19np</guid>
      <description>&lt;p&gt;You probably have heard of .map(), .reduce() and .filter(). &lt;br&gt;
Map, reduce, and filter are all array methods in JavaScript.In this article, you will learn why and how to use each one. &lt;br&gt;
I will try and explain with examples of how each of these functions works.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  map()
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;map()&lt;/strong&gt; is used to transform an array. It creates a new array populated with the results of the calling function on every element in the calling array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array=[1,2,3,4,5];

const output=array.map(element=&amp;gt;
 {
  return element*2;
})

console.log(output);  // [2,4,6,8,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code,&lt;br&gt;
array ===calling array&lt;br&gt;
element=&amp;gt;{...} ===calling function&lt;/p&gt;

&lt;p&gt;The array elements are being traversed one by one and in each iteration the current element is multiplied by 2. The new value is pushed into a new array and after the traversal is complete we get a new array of elements in the output.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  filter()
&lt;/h3&gt;

&lt;p&gt;Filter is used to filter the array. &lt;strong&gt;filter()&lt;/strong&gt; method creates a new array with all the elements that pass the test implemented by the provided function.&lt;br&gt;
If the test condition returns true, the element gets pushed to the output array. If the condition returns false, the element does not get pushed to the output array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array=[10,23,55,40,111];

const output=array.filter(element=&amp;gt;
                      {
  return element%2;
})

console.log(output);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above it is filtering out all the odd elements from the array based on the test implemented in the function and pushing them into a new array and then returning the new array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  reduce()
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;reduce()&lt;/strong&gt; method executes a reducer function on each element of the array, resulting in a single output value.&lt;br&gt;
The reducer function takes two-parameter (accumulator, current).&lt;/p&gt;

&lt;p&gt;accumulator= the returned value of the previous iteration&lt;br&gt;
current=the current item in the array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array=[1,2,3,4,5,6,7,8,9];

const output=array.reduce((acc,curr)=&amp;gt;
{
acc=acc+curr
 return acc

},0)

console.log(output);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code calculates the sum of the elements of the array.&lt;br&gt;
The initial value of acc is set to 0 as mentioned in the code. On each iteration, the current element is added to acc, and hence at last the total sum is returned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I really hope that you enjoyed reading this article and learned something from it. If you have any doubt or you think i missed something let me know in the comments. Feel free to like and share the post. &lt;br&gt;
You can connect with me on:&lt;br&gt;
Twitter:&lt;a href="https://twitter.com/namitmalasi"&gt;Namit Malasi&lt;/a&gt;&lt;br&gt;
LinkedIn:&lt;a href="https://www.linkedin.com/in/namit-malasi-a4b56310a/"&gt;Namit Malasi&lt;/a&gt;&lt;br&gt;
Github: &lt;a href="https://github.com/namitmalasi"&gt;Namit Malasi&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>functional</category>
    </item>
    <item>
      <title>Part 5: Making a user admin dashboard with Gatsby Functions and Auth0</title>
      <author>Kurt Lekanger</author>
      <pubDate>Sun, 12 Sep 2021 13:35:26 +0000</pubDate>
      <link>https://dev.to/klekanger/part-5-making-a-user-admin-dashboard-with-gatsby-functions-and-auth0-4ncn</link>
      <guid>https://dev.to/klekanger/part-5-making-a-user-admin-dashboard-with-gatsby-functions-and-auth0-4ncn</guid>
      <description>&lt;p&gt;In a series of articles, I have shown how I created a new website for the condominium association where I live using Gatsby and with Auth0 user authentication. Read part 1 here: &lt;a href="https://dev.to/klekanger/part-1-how-i-built-our-condos-s-new-web-pages-with-gatsby-and-chakra-ui-4jd5"&gt;How I built our condos's new web pages with Gatsby and Chakra UI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the new website was launched, all user administration was done via a technical and complicated user interface at Auth0. For the condominium's website to be a full-fledged solution that can be handed over to non-technical users, a more user-friendly dashboard was needed. It should be possible for non-technical users to create, update or delete users and do all the admin tasks without contacting me.&lt;/p&gt;

&lt;p&gt;This is how I built the user admin solution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;*&lt;em&gt;Gatsby on the frontend&lt;/em&gt; to create the user admin dashboard. For the dashboard I use &lt;em&gt;client-only routes&lt;/em&gt; in Gatsby, which I have written about &lt;a href="https://dev.to/klekanger/part-3-authentication-and-private-routes-in-gatsby-46jc"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://auth0.com/docs/api#authentication-api"&gt;Auth0 Authentication API&lt;/a&gt; for frontend user authentication. Here I use the &lt;a href="https://auth0.com/docs/libraries/auth0-react"&gt;Auth0 React SDK for Single Page Apps&lt;/a&gt; to make things a little easier for myself.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.gatsbyjs.com/docs/reference/functions/"&gt;Gatsby Functions&lt;/a&gt; (serverless functions) on the backend. These are Node applications running on the server that contact the &lt;a href="https://auth0.com/docs/api/management/v2"&gt;Auth0 Management API&lt;/a&gt; to create, update, or delete users.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the source code for the site at &lt;a href="https://github.com/klekanger/gartnerihagen"&gt;https://github.com/klekanger/gartnerihagen&lt;/a&gt;, but in this article I want to go through how I have structured everything - without going into all the details (that would make a book!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#securing-everything"&gt;
  &lt;/a&gt;
  Securing everything
&lt;/h2&gt;

&lt;p&gt;Everything on the client (i.e. in the browser) can be manipulated. Building a user administration dashboard requires a high level of security, and authenticating users and verifying that the user has permission to create, delete or update other users should therefore be done on a server - not on the client.&lt;/p&gt;

&lt;p&gt;This is how my solution works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The user logs in to the client and receives an &lt;em&gt;access token&lt;/em&gt; from Auth0&lt;/li&gt;
&lt;li&gt;When the user visits the user admin dashboard, the access token is sent to a serverless function at Netlify which 1) checks that it is a valid access token, 2) contacts Auth0 and checks that the access token belongs to a user with the necessary permissions to do whatever she or he tries to do&lt;/li&gt;
&lt;li&gt;If the user has all required permissions, the serverless function contacts Auth0's Management API which for example returns a list of all users.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To access the user admin dashboard on the web page, the user must have the role "admin". I use &lt;a href="https://auth0.com/docs/authorization/rbac/"&gt;Auth0's role-based access control (RBAC)&lt;/a&gt; to define three different roles: "user", "editor" and "admin". Depending on the role, the logged in user will see buttons for user administration or content editing:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JDSyEAKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjkn3mgd290f862oy17d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JDSyEAKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjkn3mgd290f862oy17d.jpg" alt="Buttons for user admin and content editing will appear on the user's &amp;quot;My page&amp;quot; if the user has the required roles."&gt;&lt;/a&gt;Buttons for user admin and content editing will appear on the user's "My page" if the user has the required roles.&lt;/p&gt;

&lt;p&gt;This is a simplified diagram showing how this works:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5s3GKhNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pu6q24fl464cvgn6s06.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5s3GKhNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pu6q24fl464cvgn6s06.jpg" alt="Diagram showing how the frontend requests an access token from Auth0. The access token is then passed on to the user admin API made with Gatsby Functions, and verified."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#gatsby-functions-makes-it-easy-to-create-apis"&gt;
  &lt;/a&gt;
  Gatsby Functions makes it easy to create APIs
&lt;/h2&gt;

&lt;p&gt;When I began creating the user admin dashboard, I started creating the APIs to retrieve, update or create users using &lt;a href="https://www.netlify.com/products/functions/"&gt;Netlify Functions&lt;/a&gt;. But then Gatsby announced &lt;a href="https://www.gatsbyjs.com/docs/reference/functions/"&gt;Gatsby Functions&lt;/a&gt;, so I decided to convert my Netlify functions into Gatsby Functions (which was quite easy, they are not that different). With built-in support for serverless functions in Gatsby, my job became even easier. This is something Next.js has had for a long time, so it was about time, Gatsby!&lt;/p&gt;

&lt;p&gt;Creating a Gatsby Function is as simple as creating a JavaScript or TypeScript file in the &lt;code&gt;src/api&lt;/code&gt; folder and exporting a handler function that takes two parameters - &lt;code&gt;req&lt;/code&gt; (request) and &lt;code&gt;res&lt;/code&gt; (response). For those who have used the Node framework Express, Gatsby Functions is pretty similar.&lt;/p&gt;

&lt;p&gt;The Hello World example in Gatsby's official documentation illustrates how easy it is to make a serverless function API with Gatsby Functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/api/hello-world.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`world`&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you make a request to the URL &lt;code&gt;/api/hello-world&lt;/code&gt; the serverless function will return { hello: 'world' } and the HTTP status code 200 (which means everything is OK).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#four-apis"&gt;
  &lt;/a&gt;
  Four APIs
&lt;/h2&gt;

&lt;p&gt;I decided that I needed four API-s to create my user admin dashboard. Each API is one servierless function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src
‚îú‚îÄ‚îÄ api
‚îÇ   ‚îî‚îÄ‚îÄ admin-users
‚îÇ       ‚îú‚îÄ‚îÄ create-user.ts
‚îÇ       ‚îú‚îÄ‚îÄ delete-user.ts
‚îÇ       ‚îú‚îÄ‚îÄ get-users-in-role.ts
        ‚îî‚îÄ‚îÄ update-user.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the user visits the user admin web page via "My page", we call the API &lt;code&gt;admin-users/get-users-in-role&lt;/code&gt;. If the user have the required permissions the API returns a list over every user, including the role of each user. Each user is displayed as a "user card" in the user admin dashboard, with buttons for changing the user, deleting a user, or changing the user's password:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rpWGR0kP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdf6rsbopguut9nz0elh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rpWGR0kP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdf6rsbopguut9nz0elh.png" alt="A search field and a dropdown menu let's you filter out the users you want to see."&gt;&lt;/a&gt;A search field and a dropdown menu let's you filter out the users you want to see.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#auth0-configuration"&gt;
  &lt;/a&gt;
  Auth0 configuration
&lt;/h2&gt;

&lt;p&gt;Before I could create my own backend APIs for user administration with Gatsby Functions, I had to configure some things in Auth0.&lt;/p&gt;

&lt;p&gt;First I had to create a new so-called &lt;em&gt;machine-to-machine&lt;/em&gt; application at Auth0. These are applications that will not communicate with clients, but with another server you trust (like the serverless functions I will create for user administration).&lt;/p&gt;

&lt;p&gt;When I log in to &lt;a href="http://manage.auth0.com/"&gt;manage.auth0.com&lt;/a&gt; and go to &lt;em&gt;Applications&lt;/em&gt;, I have these two applications:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gcq6FS_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wl6zyehyme2qzox1wie9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gcq6FS_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wl6zyehyme2qzox1wie9.jpg" alt="Screenshot showing two applications on Auth0: Backend and Boligsameiet Gartnerihagen."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The one named &lt;em&gt;Boligsameiet Gartnerihagen&lt;/em&gt; takes care of authentication for users who are logged in to the website. The one called &lt;em&gt;Backend&lt;/em&gt; is the machine-to-machine application to be used by our serverless Gatsby function running on Netlify's servers.&lt;/p&gt;

&lt;p&gt;To set up role-based access control (RBAC), we must create a new API at Auth0 where we define all the permissions (scopes) we want to be able to give users based on which roles the user has. These are the permissions the Auth0 Management API requires to be able to perform various operations, and which we can later choose from when we create the various roles for the users (in our case admin, user or editor).&lt;/p&gt;

&lt;p&gt;I called my API &lt;em&gt;Useradmin&lt;/em&gt;, and entered the various permissions I would need to update users and roles. Auth0 has a more detailed description of &lt;a href="https://auth0.com/docs/authorization/how-to-use-auth0s-core-authorization-feature-set"&gt;how this works&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YR7fvd0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwvfikd34w1natpa9qxk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YR7fvd0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwvfikd34w1natpa9qxk.png" alt="Screenshot showing the Useradmin API and all the permissions we have set up."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then I gave the machine-to-machine application &lt;code&gt;Backend&lt;/code&gt; access to both the Auth0 Management API and the new Useradmin API that I just created:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yp8zgy-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nowwjcmbvqg9hfnic98k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yp8zgy-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nowwjcmbvqg9hfnic98k.png" alt="Screenshot of the Auth0 backend application, giving permissions to access the necessary APIs."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, this is not enough. You also have to click the small down arrow on the right hand side of each API, and give the Backend application the necessary permissions to the APIs. Jeg checked all the checkboxes with the permissions I created for the Useradmin API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oauTxPUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr5sy8abpy08vev5fg9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oauTxPUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr5sy8abpy08vev5fg9f.png" alt="Screenshot, setting up permissions."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then I had to configure the different user roles by selecting &lt;em&gt;User Management&lt;/em&gt; from Auth0s main menu and then choose &lt;em&gt;Roles&lt;/em&gt;. I created three roles: &lt;em&gt;admin&lt;/em&gt;, &lt;em&gt;editor&lt;/em&gt; and &lt;em&gt;user&lt;/em&gt;. Then, for each role, I chose &lt;em&gt;Add permissions&lt;/em&gt; and selected which API I wanted to add permissions from (in my case, the Useradmin API).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90jTKW6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufia76otogt6yjnl5xdi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90jTKW6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufia76otogt6yjnl5xdi.png" alt="Setting up user roles."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I gave the &lt;em&gt;admin&lt;/em&gt; user all permissions defined in the Useradmin API. The roles &lt;em&gt;user&lt;/em&gt; and &lt;em&gt;editor&lt;/em&gt; don't need any permissions, as they should not be able to do anything "dangerous". I only check on the client if the user is a member of these roles to decide whether I should show buttons for editing content on the web site or not. Only users with an admin role will be allowed by my Gatsby Function to contact the Auth0 Management API (which also double-checks that the user that connects to it has the right permissions).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ue6cBtc---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0rsb6k1sl6c3t3ft9y9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ue6cBtc---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0rsb6k1sl6c3t3ft9y9.png" alt="Defining the permissions for the admin user."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To avoid unnecessary API calls and simplify the code on the client side, I also wanted to make it possible to see what roles a user has when the user logs in. This is to be able to display roles on My Page, and for displaying buttons for user administration and content editing only when the user have the right roles. By default, the access token will only contain all the &lt;em&gt;permissions&lt;/em&gt; the user has received (through its role). However, the &lt;em&gt;name&lt;/em&gt; of the role will not be in the metadata of the access token. We have to fix that.&lt;/p&gt;

&lt;p&gt;Auth0 has something called &lt;a href="https://auth0.com/docs/authorization/flows"&gt;&lt;em&gt;Flows&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://auth0.com/docs/actions"&gt;&lt;em&gt;Actions&lt;/em&gt;&lt;/a&gt; that makes it possible to perform various operations when, for example, a user logs in. I selected the "flow" called &lt;em&gt;Login&lt;/em&gt;, and then chose to add an "action" that runs right after the user logs in, but before the access token is sent.&lt;/p&gt;

&lt;p&gt;When you create a new action, you will get an editor where you can enter your code. I entered the following code snippet, which adds all the roles of the user to the accesstoken before it is sent to the client:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @param {Event} event - Details about the user and the context in which they are logging in.
 * @param {PostLoginAPI} api - Interface whose methods can be used to change the behavior of the login.
 */&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onExecutePostLogin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https:/gartnerihagen-askim.no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;idToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setCustomClaim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/roles`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setCustomClaim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/roles`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Auth0s docs you can find &lt;a href="https://auth0.com/docs/actions/triggers/post-login#add-user-roles-to-tokens"&gt;a description of this&lt;/a&gt;, and more examples of what you can do with Auth0 Actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fetch-a-list-of-all-users"&gt;
  &lt;/a&gt;
  Fetch a list of all users
&lt;/h2&gt;

&lt;p&gt;Finally, we can start creating the user admin dashboard for the web page. Let's start with the main page, the one that shows all registered users. In the next article, I will show how to make the components for editing users and deleting users.&lt;/p&gt;

&lt;p&gt;I created a &lt;code&gt;userAdminPage.tsx&lt;/code&gt; component that returns the user interface with a box at the top with information about who is logged in, a text field to filter / search for users, and a drop-down menu for selecting whether you want to display all users or only administrators or editors. Creating this was pretty straight forward , thanks to a great component library in &lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I then created a &lt;a href="https://reactjs.org/docs/hooks-custom.html"&gt;custom hook&lt;/a&gt; (&lt;code&gt;useGetAllUsers.js&lt;/code&gt;) that contacts &lt;code&gt;the get-users-in-role&lt;/code&gt; API and passes along the access token of the logged in user. The custom hook returns the variables &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;loading&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;, as well as the &lt;code&gt;getToken&lt;/code&gt; function that should be called if Auth0 needs the logged in user's permission for Auth0 to access the user account. This is something new users will see the first time they use the application.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;loading = true&lt;/code&gt;, I display my own custom &lt;code&gt;&amp;lt;LoadingSpinner&amp;gt;&lt;/code&gt; component with loading message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useGetAllUsers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoadingSpinner&lt;/span&gt; &lt;span class="nx"&gt;spinnerMessage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kobler til brukerkonto-administrasjon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the &lt;code&gt;get-users-in-role&lt;/code&gt; API has finished fetching all the users, we find all the users in &lt;code&gt;data.body.users&lt;/code&gt;. I use the array method &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;.filter&lt;/a&gt; to filter out only the users I want to display, based on what I have entered in the search field. And then I sort all the names with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"&gt;.sort&lt;/a&gt; before I use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;.map&lt;/a&gt; to present each user in the array as a "user card" on the screen.&lt;/p&gt;

&lt;p&gt;However, before we get to this point, some backend magic has happened in the Gatsby function &lt;code&gt;get-users-in-role&lt;/code&gt;. First, we use the &lt;code&gt;@serverless-jwt/jwt-verifier&lt;/code&gt; library to read the access token that the client sent when it made a GET request to &lt;code&gt;get-users-in-role&lt;/code&gt;. This is the access token of the user who is logged in on the client, and is available in the request header. We use &lt;code&gt;jwt.verifyAccessToken&lt;/code&gt; to check that the access token is valid. Then we verify the permissions included in the token, and that those permissions are the ones the user should have to be able to fetch user data from Auth0s Management API. The permissions the user must have to perform various operations are well described in the documentation for &lt;a href="https://auth0.com/docs/api/management/v2"&gt;Auth0's Management API&lt;/a&gt; and in the documentation for the &lt;a href="https://auth0.github.io/node-auth0/module-management.ManagementClient.html"&gt;ManagementClient SDK&lt;/a&gt; I use to make everything a bit easier for myself.&lt;/p&gt;

&lt;p&gt;Here is the first part of the code for the serverless function, the part of the code that checks permissions etc.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api/admin-users/get-users-in-role.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GatsbyFunctionRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GatsbyFunctionResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ManagementClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ManagementClient&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;JwtVerifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;JwtVerifierError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;getTokenFromHeader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@serverless-jwt/jwt-verifier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;JwtVerifier&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;issuer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GATSBY_AUTH0_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;audience&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AUTH0_USERADMIN_AUDIENCE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GatsbyFunctionRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GatsbyFunctionResponse&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;claims&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;permissions&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getTokenFromHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s2"&gt;`GET`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;405&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;method not allowed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;error_description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You should do a GET request to access this&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Verify access token&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;claims&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verifyAccessToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;JwtVerifierError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Something went wrong. &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;error_description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// check if user should have access at all&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;claims&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;claims&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;access denied&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;error_description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You do not have access to this&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Check the permissions&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;read:roles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no read access&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;error_description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Du m√• ha admin-tilgang for √• administrere brukere. Ta kontakt med styret.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way roles in Auth0 works, is that you first define the roles you want (in our case "user", "editor", "administrator"). Then you define what permissions each role should have. Finally, you assign one or more roles to the users.&lt;/p&gt;

&lt;p&gt;Auth0 used to store roles in a separate app_metadata field in the access token for each user, but they now have a new solution for role-based authentication where we no longer get the role names included with the data for each individual user. This made fetching all users and the roles for each user much more cumbersome. I ended up building the following &lt;code&gt;get-users-in-role&lt;/code&gt; API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the Auth0 ManagementClient SDK to create a new ManagementClient that we call &lt;code&gt;auth0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now that we have a ManagementClient called &lt;code&gt;auth0&lt;/code&gt;, we can use &lt;code&gt;auth0.getRoles()&lt;/code&gt; to fetch all available roles we have defined in Auth0. We then get an array with the roles user, admin and editor (we could of course hardcode this, but by using the &lt;a href="https://auth0.github.io/node-auth0/module-management.ManagementClient.html#getRoles"&gt;getRoles&lt;/a&gt; method the solution is flexible and will still work if we later decide to create new roles with Auth0.&lt;/li&gt;
&lt;li&gt;We use .map to create another array that contains all the users within each role. We do this with &lt;code&gt;auth0.[getUsersInRole](https://auth0.github.io/node-auth0/module-management.ManagementClient.html#getUsersInRole)&lt;/code&gt; where we as a parameter uses the ID of each of the roles we retrieved with &lt;code&gt;getRoles&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We now have a new array called &lt;code&gt;userRoles&lt;/code&gt; that contains all three roles, with all users within each role. If a user has two roles (eg is both editor and admin), the user will excist several places.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;role&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auth0|xxx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kurt@lekanger.no&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kurt Lekanger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;role&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auth0|xxx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kurt@lekanger.no&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                    
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kurt Lekanger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auth0|yyy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kurt@testesen.xx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                    
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kurt Testesen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;so&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is not exactly what we need. We want an array with all users, where each user excists only once as an object containing an array with all the roles. Therefore, we need to build a new array - I have called it &lt;code&gt;userListWithRoles&lt;/code&gt;. First I retrieve all users registered in the Auth0 database with &lt;code&gt;const userList = await auth0.getUsers()&lt;/code&gt;. Then I use &lt;code&gt;forEach&lt;/code&gt; with a nested for-loop inside to iterate over each user and check whether the user exists in the user list for this role. If a user has a role, that role is added to that user's roles array.&lt;/p&gt;

&lt;p&gt;A diagram illustrating how it works and the ManagementClient SDK methods used:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UycYugtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42h0kj3c1y53t0zbi1jp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UycYugtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42h0kj3c1y53t0zbi1jp.jpg" alt="Diagram showing how user roles are added to a roles array for each user."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, I return &lt;code&gt;userListWithRoles&lt;/code&gt; from the API and HTTP status code 200 to indicate that everything worked as expected. This is a shortened example of what is returned from the API. Note that each user now has a roles array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kurt Lekanger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kurt@lekanger.no&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth0|xxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;editor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kurt Testesen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kurt@testesen.xx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth0|yyyy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;editor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In reality, each user object in the &lt;code&gt;userListWithRoles&lt;/code&gt; array also contains a lot of other metadata from Auth0, such as when the user last logged in, email address, whether the email has been verified, etc.&lt;/p&gt;

&lt;p&gt;Here is the rest of the source code for the &lt;code&gt;get-users-in-role&lt;/code&gt; API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// // api/admin-users/get-users-in-role.ts &lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ManagementClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GATSBY_AUTH0_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AUTH0_BACKEND_CLIENT_ID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AUTH0_BACKEND_CLIENT_SECRET&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;read:users read:roles read:role_members&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;auth0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRoles&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allUsersInRoles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersInRole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;auth0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUsersInRole&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;usersInRole&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userRoles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allUsersInRoles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Get a list of all the roles and the users within each of them,&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;auth0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// and a list of every registered user&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userListWithRoles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="nx"&gt;userList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;userRoles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;userRoles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;existingUserToModify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userListWithRoles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;existingUserToModify&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;existingUserToModify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;roles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;existingUserToModify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="nx"&gt;userRoles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;userListWithRoles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
              &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userRoles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userListWithRoles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;error_description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-step-useradmin-with-gatsby-functions-update-create-and-delete-users"&gt;
  &lt;/a&gt;
  Next step: &lt;a href="https://dev.to/klekanger/part-6-user-admin-dashboard-with-gatsby-functions-update-create-and-delete-users-c10"&gt;Useradmin with Gatsby Functions. Update, create and delete users&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Feel free to take a look at the finished website here: &lt;a href="https://gartnerihagen-askim.no"&gt;https://gartnerihagen-askim.no&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The project is open source, you can find the source code &lt;a href="https://github.com/klekanger/gartnerihagen"&gt;at my Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's a video showing the live site with the login protected pages and the user admin dashboard:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XzkTRw5D5mg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is a translation, the original article in Norwegian is here: &lt;a href="https://www.lekanger.no/project/slik-bygde-jeg-brukeradmin-panel-til-sameiets-nettsider-med-serverless-functions-og-auth0"&gt;Slik lagde jeg et brukeradmin-panel med Gatsby Functions og Auth0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>authentication</category>
      <category>serverless</category>
      <category>react</category>
    </item>
    <item>
      <title>Role of Mobile Forensics in dealing with Mobile Threats.</title>
      <author>Prasan Singh</author>
      <pubDate>Sun, 12 Sep 2021 12:57:25 +0000</pubDate>
      <link>https://dev.to/prasan26/various-threats-associated-with-mobile-devices-and-identify-mobile-forensics-role-in-dealing-with-them-1kpg</link>
      <guid>https://dev.to/prasan26/various-threats-associated-with-mobile-devices-and-identify-mobile-forensics-role-in-dealing-with-them-1kpg</guid>
      <description>&lt;p&gt;Mobile devices such as smartphones and tablets have become an integral part of modern first world life. There are literally billions of active mobile devices. Each device typically contains a large amount of sensitive data about the user, as well as individuals and organizations with which the user interacts. They also act as endpoints that are typically authenticated and authorized to access a wide variety of secured systems. And most mobile devices are connected to the public internet a significant amount of the time. Mobile devices are small mobile computing devices. Each is comprised of a combination of hardware and software. Each is potentially susceptible to compromise by many different means. Various threats associated with mobile devices are listed below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data Leakage. &lt;/li&gt;
&lt;li&gt;Mobile apps are often the cause of unintentional data leakage.&lt;/li&gt;
&lt;li&gt;Unsecured Wi-Fi.&lt;/li&gt;
&lt;li&gt;Network Spoofing.&lt;/li&gt;
&lt;li&gt;Phishing Phishing and social engineering attacks.&lt;/li&gt;
&lt;li&gt;Broken Cryptography.&lt;/li&gt;
&lt;li&gt;Improper Session Handling.&lt;/li&gt;
&lt;li&gt;Poor cyber hygiene, including weak passwords and improper or 
no use of multifactor authentication (MFA)&lt;/li&gt;
&lt;li&gt;Poor technical controls, such as improper session handling, 
out-of-date devices and operating systems, and cryptographic 
controls&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Perhaps the most difficult threat to defend against is the user. Users can be turned into unwilling accomplices of an adversary through many types of social engineering, or they can simply make a mistake in configuring or using the device. Either way, the technical security controls can often be defeated by the user being induced to do the wrong thing through error, trickery, coercion, or ill intent. Once this occurs, the systems to which they have access, such as their employer, can be at risk, as well as their own sensitive data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xpNbUm_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vs8mrvr9719dlx3m9bd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xpNbUm_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vs8mrvr9719dlx3m9bd.png" alt="Screenshot (397)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mobile devices can be attacked via web browser, email clients, instant messaging systems, and through compromised or malicious apps. Once compromised, an adversary may compromise the confidentiality, integrity, or availability of the data on the device, or may use the device as a way to do the same on systems to which the mobile device is connected&lt;/p&gt;

&lt;p&gt;A compromised mobile device may also be used as a resource by an adversary. They may, for example, use it to send spam email or unsolicited text messages. They might use it to mine cryptocurrency. Or they might use it to artificially increase the number of clicks on advertising to fraudulently gains ad revenue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8uaRFWOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1pum8pyybnkbipqwaj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8uaRFWOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1pum8pyybnkbipqwaj4.png" alt="ipconfig-help"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A mobile device that is lost may contain data that has not been properly backed up elsewhere, resulting in loss of that data. This may result in economic loss as well as non-monetary consequences. If that data is subject to unauthorized access by an adversary, there may be additional consequences ranging from economic to legal to reputational.&lt;/p&gt;

&lt;p&gt;As noted in the text Forensic science: An introduction (Saferstein, 2016), and presented on YouTube (Hinkson, 2019), digital forensic investigation of a mobile device can provide evidence that can be used to determine the temporal order of events as well as a causal chain of cause and effect. By gathering evidence, we can help determine the facts, and may be able to determine who is responsible as well as how and why the crime occurred. By gathering the evidence, we can help in determining the facts of innocence or guilt of a suspect, and/or by performing post-compromise analysis, we may be able to determine how an adversary compromised the security of a device and help improve security controls in the future. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hack-this-fall-20"&gt;
  &lt;/a&gt;
  Hack This Fall 2.0
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Hack This Fall&lt;/strong&gt; is an Online Hackathon powered by MLH. It is taking place shortly, you can join this Hackathon by the following link: &lt;a href="https://hackthisfall.devpost.com/"&gt;https://hackthisfall.devpost.com/&lt;/a&gt; and Use code &lt;strong&gt;HTFHE030&lt;/strong&gt; while registering for it. Don't let an awesome opportunity go! &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EbMwR-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nyc7tdp9g6hpwhr0vmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EbMwR-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nyc7tdp9g6hpwhr0vmb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>computerscience</category>
    </item>
  </channel>
</rss>
