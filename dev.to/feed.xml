<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>First Flask app!</title>
      <author>Morris Mulitu</author>
      <pubDate>Wed, 11 Aug 2021 13:04:12 +0000</pubDate>
      <link>https://dev.to/mulitu/first-flask-app-3olk</link>
      <guid>https://dev.to/mulitu/first-flask-app-3olk</guid>
      <description>&lt;p&gt;If you want to build a web app in Python then it is highly likely that you will use a framework!. A &lt;a href="https://www.fullstackpython.com/web-frameworks.html"&gt;framework&lt;/a&gt; "is a code library that makes a developer's life easier when building reliable, scalable, and maintainable web applications" Flask is such a framework in Python.&lt;/p&gt;

&lt;p&gt;Flask is relatively a new framework. It has however taken the python web development world by storm. It has become quite popular. It is offering alot of extensibility, flexibility and clean code possibilities. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-flask"&gt;
  &lt;/a&gt;
  Why Flask?
&lt;/h2&gt;

&lt;p&gt;Flask is thought to be more pythonic than &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; due to the fact that the equivalent Flask web application is more explicit. Ideally, it is also easier to get started with for beginners. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-world-with-flask"&gt;
  &lt;/a&gt;
  Hello, World! with Flask
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, World!'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the Flask library. This code will show "Hello, World!" on localhost port 5000 if you run it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flask-startup"&gt;
  &lt;/a&gt;
  Flask startup!
&lt;/h2&gt;

&lt;p&gt;You can install the Flask package from PPI &lt;br&gt;
&lt;a href="https://pypi.python.org/"&gt;(Python Package Index)&lt;/a&gt;&lt;br&gt;
First make a directory eg, &lt;strong&gt;flask_todo&lt;/strong&gt; and then have the &lt;strong&gt;flask&lt;/strong&gt; package installed. Also install &lt;a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/"&gt;&lt;strong&gt;flask-sqlalchemy&lt;/strong&gt;&lt;/a&gt; to facilitate a simpler SQL database connection.&lt;br&gt;
It is best to work in a &lt;a href="https://docs.python.org/3/library/venv.html"&gt;virtual environment&lt;/a&gt;. &lt;br&gt;
Do enter the following commands;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir flask_todo
$ cd flask_todo
$ pipenv install --python 3.6
$ pipenv shell
(flask-someHash) $ pipenv install flask flask-sqlalchemy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just in case you want to make if a Git repo, do run &lt;em&gt;git init&lt;/em&gt; here.This will be the project's root. Just incase you intend to codebase to different machines you can have all the setup files in this directory.&lt;br&gt;
The best way to move it is to turn the codebase into an installable Python distribution. While at the root of the project create a &lt;strong&gt;setup.py&lt;/strong&gt; and a directory &lt;strong&gt;todo&lt;/strong&gt; to hold the source code.&lt;br&gt;
An example of the setup.py is as below;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;

&lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'flask'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'flask-sqlalchemy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'psycopg2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'flask_todo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'A To-Do List built with Flask'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;Your actual name here&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;Your actual e-mail address here&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'web flask'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;include_package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requires&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this you will have all the needed packages in the &lt;strong&gt;requires&lt;/strong&gt; list.Additionally, you'll also have everything you need to set up and install the package in &lt;strong&gt;site-packages&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;todo&lt;/strong&gt; directory, create &lt;strong&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/strong&gt; and &lt;strong&gt;app.py&lt;/strong&gt; files.The &lt;strong&gt;init&lt;/strong&gt;.py file allows you to import from todo as if it was an installed package. The app.py file will be the application's root. Just in case you are using &lt;a href="https://pipenv.pypa.io/en/latest/"&gt;pipenv&lt;/a&gt; you can find your virtual environment with &lt;strong&gt;pipenv --venv&lt;/strong&gt; and set up that environment variable in your environment's &lt;strong&gt;active&lt;/strong&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export FLASK_APP=$VIRTUAL_ENV/../todo/app.py
export DEBUG='True'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-little-code"&gt;
  &lt;/a&gt;
  A little code!
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""Print 'Hello, world!' as the response body."""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, world!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a basic Flask application.&lt;em&gt;app&lt;/em&gt; is an instance of Flask taking in the &lt;em&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/em&gt; of the script file.&lt;br&gt;
&lt;em&gt;app.route&lt;/em&gt; specifies the routes used to access the application.Any view you specify must be decorated by &lt;em&gt;app.route&lt;/em&gt; to be a functional part of the application.In this example, when the app is running and accessed at &lt;em&gt;&lt;a href="http://domainname/"&gt;http://domainname/&lt;/a&gt;&lt;/em&gt;, the user will receive "Hello, World!" as a response.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connecting-the-database-in-flask"&gt;
  &lt;/a&gt;
  Connecting the database in Flask
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;flask-sqlalchemy&lt;/em&gt; package connects a SQL database to a Flask application.You need the database URL to connect to a SQL database.You can use Postgres database.The intermediary to talk to the Postgres database is the &lt;em&gt;psycopg2&lt;/em&gt; package.Include it in the list of required packages in &lt;em&gt;setup.py&lt;/em&gt;. The &lt;em&gt;flask-sqlalchemy&lt;/em&gt; will recognize Postgres from the database URL. Flask will need the database URL to be part of its central configuration through the &lt;em&gt;SQLALCHEMY_DATABASE_URI&lt;/em&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'SQLALCHEMY_DATABASE_URI'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'postgres://localhost:5432/flask_todo'&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can make use of environment variables to make things easier.They ensures that, no matter what machine the code is on, it will always point tp the right stuff if that stuff is configured in the running environment.&lt;br&gt;
In the same place you declared &lt;em&gt;FLASK_APP&lt;/em&gt;, declare a &lt;em&gt;DATABASE_URL&lt;/em&gt; pointing to the location of your Postgres database. Development tends to work locally, so just point to your local database.&lt;/p&gt;

&lt;p&gt;Your application has a database connection!&lt;/p&gt;

&lt;p&gt;Do enjoy!&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Become a Backend Developer? - Backend Development</title>
      <author>Bikash</author>
      <pubDate>Wed, 11 Aug 2021 13:00:59 +0000</pubDate>
      <link>https://dev.to/inncod/how-to-become-a-backend-developer-backend-development-37o</link>
      <guid>https://dev.to/inncod/how-to-become-a-backend-developer-backend-development-37o</guid>
      <description>&lt;p&gt;&lt;span&gt;The field of web development has become a hotspot in recent years. With websites gaining more and more traction, organizations have realized that to capture more leads, they need to have a strong online presence. As a result, they seek out talented people who can use the latest technologies to design and develop the best-looking and best-performing web applications for them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;When it is such a lucrative field, there’s bound to be good money in it. And there indeed is! That’s why it’s only natural that the young generation is attracted to web development as a career. However, wanting to follow a career path and actually pursuing it are two different things. It requires preparation, a series of steps, relevant education, and practice.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;If you’re an aspiring web developer, the first thing you need to know is that there are three categories of web developers – frontend, backend, and full-stack. Depending upon which category of web developer you wish to become, the steps to follow will vary. In this post, we’re going to focus on how to become a backend developer. We’ll be demonstrating every step of the process you need to follow.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So let’s get started.&lt;/span&gt;&lt;/p&gt;
&lt;h3 id="first-things-first-who-is-a-backend-developer-and-what-does-he-do"&gt;&lt;strong&gt;First things first – Who is a Backend Developer, and what does he do?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;As you would probably already be aware, in a typical &lt;a href="https://en.wikipedia.org/wiki/Client%E2%80%93server_model" rel="noopener"&gt;client-server architecture&lt;/a&gt;, application data is stored in the server-side and served as output to the client-side. The server-side working of a web application is known as backend. That’s where all the inner working of web applications takes place, and that’s where the work of backend developers lies.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Backend developers are responsible for using &lt;a href="https://www.codelivly.com/what-are-the-top-10-programmings-to-learn-in-2021/"&gt;programming languages&lt;/a&gt; to create the code, which actually makes web applications function the way they’re supposed to. The code that these developers write runs on the webserver. In addition to writing back-end code, such developers are also responsible for developing APIs used by the mobile version of such web applications.&lt;/span&gt;&lt;/p&gt;
&lt;h3 id="how-to-become-a-backend-developer"&gt;&lt;strong&gt;How to become a Backend Developer?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Learning back-end development helps you get acquainted with several programming languages, which can help your career a great boost. If you have a basic understanding of how logic works, it can prove to be quite beneficial. If not, you can always enroll for a basic computer language course to obtain exposure to the groundwork. This is only to ensure that you don't fall short at any stage once you set on the path of learning back-end development.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Here are the steps you will need to follow:&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-1-be-well-versed-with-the-basics-of-data-structures-algorithm"&gt;&lt;strong&gt;Step 1: Be well versed with the basics of Data Structures &amp;amp; Algorithm&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Most of the web developers skip this step and move forward to learning frameworks. However, it is always better to know the data structure and algorithm basics. Though not in-depth, you must have a basic idea about the process. You should revise basic Data Structures and Algorithm Stack, Queue, Linked List, Tree, Graph, Hashing, Sorting &amp;amp; Searching Algorithms, and other core concepts of programming.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-2-learn-a-programming-language-and-choose-a-framework"&gt;&lt;strong&gt;Step 2: Learn a Programming Language and choose a Framework.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Becoming a web developer takes effort, time, and patience. You cannot expect anyone to learn different coding languages overnight. So, decide on a timeline and the essential basic programming languages that you wish to learn. Learning languages like Python, PHP, Ruby, and JavaScript are sought after in recent times.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You can go for learning multiple programming languages at once. Remember, the more, the merrier. Also, please be aware that understanding the basics of programming is a must. If you're not already familiar with them, start with languages like C, Java, or Python and try to understand how application logic works, the best practices of coding, etc.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-3-learn-the-basics-of-databases"&gt;&lt;strong&gt;Step 3: Learn the basics of Databases.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Adding a database system to your portfolio would be the next logical step. There are many easy to use relational database management systems available from which you can select one. Almost all websites today boast some sort of storage, so learning about databases is always beneficial.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-4-learn-framework-s"&gt;&lt;strong&gt;Step 4: Learn Framework(s)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Depending on the programming language you choose, you can learn the basics of at least one framework. Be it Django or Ruby-on-Rails; most frameworks follow the same MVC (Model-View-Controller) principle. Although writing the entire application code in a programming language is permissible, it takes more effort and time and extensive coding. Whereas, using frameworks lets, you create templates and codes which can be reused later. This reduces the lines of code you are required to write. So you become more efficient. That’s why learning a framework is also a good idea.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-5-start-your-practical-training"&gt;&lt;strong&gt;Step 5: Start your practical training.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You will not understand how stuff really works until you actually start doing it practically. You need to regularly use the tools and practice to better understand the ethical knowledge you have learned so far. The best way to do this is by working on small projects or assignments. You can start by doing projects like a simple To-do list, simple blog, photo gallery web app, resume builder, basic project management app, etc.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-6-innovate-and-create-something-new"&gt;&lt;strong&gt;Step 6: Innovate and create something new&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Innovation and original ideas are valued in all fields. Probably the most in the tech field since they can change the entire game. If you already have a start-up or project idea, then you're going great. If not, you still have time to think and work on it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It's good to start with building a startup clone. It means that you would clone some products available in the market. Also, you might be interested in the following sites/apps that will be useful.&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span&gt;Buffer — A Smarter Way to Share on Social Media — Scheduling posts for various Social Media channels.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Hello Bar — Simple JavaScript plugin to help you in getting your marketing stuff done.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Airbnb / Fiverr — Marketplace of, anything&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="step-7-hosting-aws-heroku"&gt;&lt;strong&gt;Step 7: Hosting — AWS / Heroku&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Now you're ready to spread your wings! Deploy your product on a cloud service provider so it can be accessed from the WWW. AWS can be the first preference as it provides almost a year of free hosting (limited usage).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;You May Also Interested In: &lt;b&gt;&lt;a href="https://www.codelivly.com/web-designers-roadmap-2021/"&gt;Web Designer Roadmap&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h3 id="did-you-catch-all-of-that"&gt;&lt;strong&gt;Did you catch all of that?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Well, now that you know how to be a backend developer, it's time to level up the game. Decide if you'd want to do a job as a backend developer or you want to be a freelancer. Becoming a backend developer may also boost your pay in most of the large scale industries. Keeping all these things in mind, work on developing a good resume. As a final takeaway, we’d just like to say that in addition to inculcating the required skills, to be successful as a backend developer, you need to be dedicated, patient, and hard-working.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Coding&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Working with Input Fields in Cypress</title>
      <author>Dilpreet Johal</author>
      <pubDate>Wed, 11 Aug 2021 12:30:07 +0000</pubDate>
      <link>https://dev.to/automationbro/working-with-input-fields-in-cypress-2mm2</link>
      <guid>https://dev.to/automationbro/working-with-input-fields-in-cypress-2mm2</guid>
      <description>&lt;p&gt;In this tutorial, we will learn how to work with different types of form input fields in Cypress such as Text Inputs, Dropdown menu, Checkboxes, Date Picker, and Text Area.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text-input"&gt;
  &lt;/a&gt;
  Text Input
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8llu8D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrbu6kb9lkkml8jh5nmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8llu8D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrbu6kb9lkkml8jh5nmm.png" alt="name input"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To type something into a text input element, you simply need to use the &lt;code&gt;type&lt;/code&gt; command. This is how the code will look like - &lt;/p&gt;

&lt;p&gt;&lt;code&gt;cy.get("#name").type("Automation Bro");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The type command can also take special characters such as &lt;code&gt;{enter}&lt;/code&gt; &lt;code&gt;{backspace}&lt;/code&gt; etc… You can find the entire list &lt;a href="https://docs.cypress.io/api/commands/type#Arguments"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Text Area&lt;/strong&gt; would work similarly as well using the type command.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dropdown-menu"&gt;
  &lt;/a&gt;
  Dropdown Menu
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--10ab_Gg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1yelntlxaigtpp08rj6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--10ab_Gg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1yelntlxaigtpp08rj6.png" alt="Dropdown Menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the dropdown menu, you have to select a particular option from the list. For example, to select the second option from the list above, we'll do this -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cy.get("#dropdown").select("Technical Team");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;select&lt;/code&gt; you can either select the dropdown option &lt;code&gt;value&lt;/code&gt; or the text itself to select an item.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#checkboxes"&gt;
  &lt;/a&gt;
  Checkboxes
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KWyB66Oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5umw1la1cc55i4msl107.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWyB66Oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5umw1la1cc55i4msl107.png" alt="checkbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checkboxes are similar to dropdown where you are dealing with multiple options but unlike dropdown here you can pick multiple options as well. Let's take a look at the sample code - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vZYnNvW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbecn7mfchemt4p3gbyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vZYnNvW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbecn7mfchemt4p3gbyy.png" alt="checkboxes-code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;check&lt;/code&gt; command and pass in an array with all the options you need to check. Similarly, you can also do the reverse to uncheck options as well.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#date-picker"&gt;
  &lt;/a&gt;
  Date Picker
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zkvfdF3j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05bxmpfgoeqvkferxdgp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zkvfdF3j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05bxmpfgoeqvkferxdgp.png" alt="datepicker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Date Picker would vary based on how it's implemented by the developers, in the above example, you first need to click on the empty input field and then click on the date you want to select.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cy.get("#dateinput").click();&lt;/code&gt;&lt;br&gt;
&lt;code&gt;cy.get(".dayContainer span:nth-child(15)").click();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the code above, I am selecting the 15th option from all the date options, this is done to keep the selection dynamic regardless of what month it is. There are many other ways of automating this as well based on how the implementation is done.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#check-out-the-video-below-to-learn-more-about-how-to-work-with-input-fields-in-cypress%E2%80%8A%E2%80%8A"&gt;
  &lt;/a&gt;
  Check out the video below to learn more about how to work with input fields in Cypress - 
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1QuFU3IJ3Es"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this as well as free access to a Private Facebook community&lt;/p&gt;

&lt;p&gt;👍 You can follow my content here as well - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/automationbro"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/company/automation-bro"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hiring the best Magento Development Company in 2021</title>
      <author>Polosoft Technologies</author>
      <pubDate>Wed, 11 Aug 2021 12:17:54 +0000</pubDate>
      <link>https://dev.to/polosofttech/hiring-the-best-magento-development-company-in-2021-5c5a</link>
      <guid>https://dev.to/polosofttech/hiring-the-best-magento-development-company-in-2021-5c5a</guid>
      <description>&lt;p&gt;Magento 2 is more than just a name in the world of e-commerce, building your e-commerce store using Magento 2 is the need of the time. An e-commerce platform that gives you amazing and flexible options for making your business journey a lot easier and better. We at Polosoft Technologies understand the importance of building an amazing Magento 2 experience for our clients, for being the best Magento development company.&lt;/p&gt;

&lt;p&gt;Magento developers choose the very platform all because of the accessibility of unmatched extensions, tools, and security.Whether you seek a custom solution for an existing store or you call up for help to set up an online store from scratch, our Magento development Services will enable you with industry-specific solutions with custom themes, extensions, 3rd party integrations, and a perfect online promotion to facilitate higher ROI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjUc_iKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw01n2olfmtubkuky1zk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjUc_iKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw01n2olfmtubkuky1zk.png" alt="Magento Development Company"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#perfect-magento-development-service"&gt;
  &lt;/a&gt;
  Perfect Magento development Service
&lt;/h1&gt;

&lt;p&gt;Choosing a perfect magento development company can be tiresome so let us help you choose the perfect traits:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-magento-web-development"&gt;
  &lt;/a&gt;
  Custom Magento Web Development
&lt;/h2&gt;

&lt;p&gt;A perfect &lt;a href="https://www.polosoftech.com/open-source-application/magento-development-company"&gt;Magento development company&lt;/a&gt; explores all the potentials of an open source framework to deliver a complete feature enabled B2B or B2C Ecommerce store. In considerate of future upgradation and technology the web development services&lt;br&gt;
-&amp;gt;Third party integrations of Magento CE and EE for your website&lt;br&gt;
-&amp;gt;Integrations of ERP and POS with Magento website&lt;br&gt;
-&amp;gt;Theme &amp;amp; extension development services for your magento website&lt;br&gt;
-&amp;gt;Easy migration from other platforms&lt;br&gt;
-&amp;gt;Multi-vendor implementation in your magento &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#payment-and-shipping-integration"&gt;
  &lt;/a&gt;
  Payment And Shipping Integration
&lt;/h2&gt;

&lt;p&gt;Payment and Shipping gateways are like the veins and arteries for any e-commerce store. Magento already supports all the top payment and shipping gateways by build, you won't find any local service providers in its default list.&lt;br&gt;
-&amp;gt;Easy integration of 3rd party Payment gateway&lt;br&gt;
-&amp;gt;Easy integration of third party Shipping gateways &lt;br&gt;
-&amp;gt;E-wallet and recurring bill setups &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#magento-extension-development"&gt;
  &lt;/a&gt;
  Magento Extension Development
&lt;/h2&gt;

&lt;p&gt;Create a Magento extension for your personal e-commerce store or you might plan to facilitate your SaaS services to Magento customers through a custom Magento extension. A &lt;a href="https://www.polosoftech.com/open-source-application/magento-development-company"&gt;magento development company&lt;/a&gt; can build you a very own custom made Magento extensions with extreme precision.&lt;br&gt;
-&amp;gt;Fully customized and easy development Magento extensions for both V1 and V2&lt;br&gt;
-&amp;gt;Easy documentation of code &lt;br&gt;
-&amp;gt;Bug free codes adhering to perfect Magento standards&lt;br&gt;
-&amp;gt;Approval of magento extensions on Magento marketplace&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#magento-support-and-maintenance-services"&gt;
  &lt;/a&gt;
  Magento Support And Maintenance Services
&lt;/h2&gt;

&lt;p&gt;Have an in-depth check-up and complete maintenance of your e-commerce store. &lt;a href="https://www.polosoftech.com/open-source-application/magento-development-company"&gt;Magento development services&lt;/a&gt; of a perfect company monitors and optimizes your store round the clock and makes sure your website won’t ever experience down time during peak hours.&lt;br&gt;
-&amp;gt;99.9% website uptime and perfect backup service&lt;br&gt;
-&amp;gt;A complete and detailed website audit and reporting&lt;br&gt;
-&amp;gt;A complete background stress testing to predict website behaviour&lt;br&gt;
-&amp;gt;Easy and convenient real time server usage monitoring and load balancing&lt;/p&gt;

&lt;p&gt;As you are now aware about the traits of a perfect &lt;a href="https://www.polosoftech.com/open-source-application/magento-development-company"&gt;Magento development company&lt;/a&gt;. A technoscientific team of dedicated Magento developers providing an all round &lt;a href="https://www.polosoftech.com/open-source-application/magento-development-company"&gt;Magento development service&lt;/a&gt;  and are capable of catering to unique business requirements while abiding by the latest Magento eCommerce development standards.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Understanding Subresource Integrity (SRI)</title>
      <author>INChukwudi</author>
      <pubDate>Wed, 11 Aug 2021 12:17:54 +0000</pubDate>
      <link>https://dev.to/inchukwudi/understanding-subresource-integrity-sri-3ep7</link>
      <guid>https://dev.to/inchukwudi/understanding-subresource-integrity-sri-3ep7</guid>
      <description>&lt;p&gt;There are numerous benefits of embedding files and scripts hosted by third parties, such as a Content Delivery Network (CDN), in your HTML documents. But this comes with its vulnerabilities and most times, we are not aware that we (site owners and site users) are open to such attacks. Using Subresource Integrity can help prevent some of these attacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-subresource-integrity"&gt;
  &lt;/a&gt;
  What is Subresource Integrity?
&lt;/h2&gt;

&lt;p&gt;Subresource Integrity (SRI) is a security feature that enables browsers to verify that resources they fetch (for example, from a CDN) are delivered without unexpected manipulation. It works by allowing you to provide a cryptographic hash that a fetched resource must match. In simple terms, it is a feature used by browsers to validate resources fetched from third parties have not been manipulated by comparing them to a hash key and if they do not match, the browsers do not serve up the resources.&lt;/p&gt;

&lt;p&gt;Being new to HTML, I wondered about the use of the &lt;code&gt;integrity&lt;/code&gt; attribute in some HTML elements and sometimes, I removed it and its value from the element. I was ignorant of its use as it isn’t something that pops up most times. Going further and being more security conscious, I discovered the integrity attribute holds the cryptographic hash of the resource to be embedded. This hash could be (but not be limited to) an SHA-256, SHA-384 or SHA-512 hash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://inchukwudi.example.com/lib-example/example.min.js"
    integrity="sha512-6QWD5OGReFYm4dnWc1Qt5Ntv9qYdvdihz0PPSiiqn/o4EaG7TubfWGUrM"
    crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
A code snippet showing a script element with an integrity attribute





&lt;h2&gt;
  &lt;a href="#javascript-a-helpful-yet-dangerous-tool"&gt;
  &lt;/a&gt;
  JavaScript, A Helpful Yet Dangerous Tool
&lt;/h2&gt;

&lt;p&gt;JavaScript is the scripting language of the web. It can perform basic stuff from creating, displaying and hiding new elements, to changing the attributes of elements. It can do more complex functions from posting data to and getting data from APIs. All these can be done without the knowledge of the site user sometimes when a certain event is triggered, for example, clicking on an element or hovering over an element.&lt;/p&gt;

&lt;p&gt;You would agree with me that JavaScript is a powerful tool. An attacker can use JavaScript to mislead users of your site by adding or editing content that you did not put. Phishing links can be added and undue redirection can be initiated. Even, the action attribute of a form can be changed and the information a user inputs in a form is sent elsewhere and vital information exposed.&lt;/p&gt;

&lt;p&gt;SRIs can help against embedding such malicious content unknowingly in your website. Yes, unknowingly as most times, malicious content are embedded without your notice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ways-malicious-content-get-served"&gt;
  &lt;/a&gt;
  Ways Malicious Content Get Served
&lt;/h2&gt;

&lt;p&gt;When you visit a website, your browser sends a request to the server and the server processes the request and then sends a response to your browser. Your browser interprets this response and then displays the content you see. &lt;/p&gt;

&lt;p&gt;The response sent back from the server can be thwarted in many ways and we might just be oblivious to it. Let's say a user is connected to a network where all requests and responses pass through a proxy server. An attacker with access to such requests and responses can swap or edit a file before it reaches the client and the client gets compromised. &lt;/p&gt;

&lt;p&gt;Another plausible example is an attacker gains access to a trusted CDN vendor and then edits the files on their server and different users using websites that embed such files get comprised. This is just a highlight, the list goes on and on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sri-working-mechanism"&gt;
  &lt;/a&gt;
  SRI Working Mechanism
&lt;/h2&gt;

&lt;p&gt;Let us use libraries as a case study. The content of a version of a library is fairly constant and is not expected to change. When there are major changes to be made, a new version is released. Knowing this, adding the integrity attribute with a cryptographic hash of the particular version of the library you intend to use in your HTML document will safeguard against an altered form of the library to be served to your users. Most times, the cryptographic hash of the particular version of the library is provided by the vendor of the library but in some cases, you might have to hash it down yourself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;integrity="sha512-atM3QqRcbCn6ewmpxcLAHGaDjpEB4xZd47q7pAP+gi5Yu8hFgoh"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Code snippet showing the integrity attribute and its cryptographic hash (SHA-512) value





&lt;p&gt;When the browser is linking the external library, it will hash it according to the hash algorithm specified in the integrity attribute, in this case, SHA-512, and if the output of the hash does not match the hash specified in the integrity attribute, it tries other known hashing algorithms, for example, SHA-256, and it still does not match, it does not load the file. To illustrate this, here is an example using the jQuery library version 3.6.0. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MaJiuC__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pku3nmmpz0bpc7vwf75h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MaJiuC__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pku3nmmpz0bpc7vwf75h.png" alt="screenshot of the jQuery library v3.6.0"&gt;&lt;/a&gt;&lt;/p&gt;
A screenshot of the end of the minified version of the jQuery library v3.6.0 as gotten from the jQuery Website 



&lt;p&gt;The image above is an image of the jQuery library v3.6.0 as gotten from the jQuery website. Now here is an image of the same file but with a commented line I added myself for the purpose of demonstration of how SRI helps protects you against changes in the resource.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IhwW2uoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yh9wqogevjivnq0jo2dw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IhwW2uoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yh9wqogevjivnq0jo2dw.png" alt="screenshot of the tampered jQuery library v3.6.0"&gt;&lt;/a&gt;&lt;/p&gt;
A screenshot of the end of the minified version of the tampered jQuery library v3.6.0



&lt;p&gt;When the edited jQuery file attempts to get loaded, the browser checks and then displays this error message in the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Failed to find a valid digest in the 'integrity' attribute for resource 'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.js' with computed SHA-256 integrity '4ca6xP/WMfyyRx+MmirFEms71HApLgbRdTy0XavPeQA='. The resource has been blocked.&lt;br&gt;
&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The edited file does not load and I am free from potential attacks if it was a malicious code that was added to the file. Most modern browsers support SRI so you do not have to worry as most users of your site would be protected from such attacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practices-when-embedding-content"&gt;
  &lt;/a&gt;
  Best Practices When Embedding Content
&lt;/h2&gt;

&lt;p&gt;Some people may advise you self host all resources you might use. Well, this makes the origin of the files trustworthy but it does not stop the files from being manipulated when a response is made. An integrity attribute is needed. Also, you would have to make sure you download such files from the owners of the libraries as there are various counterfeits all over. This might be expensive as it will take up a substantial amount of bandwidth.&lt;/p&gt;

&lt;p&gt;Using a third party resource is beneficial and in most cases cheaper than hosting the files yourself. Many resources owners have CDNs and provide you with the links to access the resource over the internet. Some of these links have the integrity attributes with cryptographic hash values already, some do not. Caution should be exercised when searching for links to CDNs and other resources as attackers might host already tampered files and hash it and make it look trustworthy, so be mindful of the websites you get links to resources from.&lt;/p&gt;

&lt;p&gt;Using this online tool, &lt;a href="https://www.srihash.org/"&gt;SRI Hash Generator&lt;/a&gt;, you can generate a cryptographic hash of the stylesheet or script you want to embed and add use it in your document and even share for others to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sri-drawbacks"&gt;
  &lt;/a&gt;
  SRI Drawbacks
&lt;/h2&gt;

&lt;p&gt;The benefit of SRI is evident but it has its drawbacks. The file that does not match the cryptographic hash won’t be loaded and this may break a lot of things especially the structure of the page and certain functionalities put in place. If a stylesheet is affected, all elements that use classes defined in the stylesheet would not appear as they ought to and the look of the site may not be palatable to the user of the site.&lt;/p&gt;

&lt;p&gt;Also, when attacks are launched and are countered by using SRI, the owner of the website is not aware that such an attack occurred. A user with no technical expertise would not know too and would think the website is just quirky then might move on to another website and if the website does not make use of SRI, the user can be compromised.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>security</category>
    </item>
    <item>
      <title>My First Day of Learning Docker</title>
      <author>Laiba Zahoor</author>
      <pubDate>Wed, 11 Aug 2021 11:56:21 +0000</pubDate>
      <link>https://dev.to/laibazahoor1/my-first-day-of-learning-docker-4823</link>
      <guid>https://dev.to/laibazahoor1/my-first-day-of-learning-docker-4823</guid>
      <description>&lt;p&gt;Containers are quickly becoming an industry standard for deployment of software applications. But question here is: how containers came into being, so I came across &lt;a href="https://www.docker.com/"&gt;docker&lt;/a&gt; and I learned.&lt;/p&gt;

&lt;p&gt;In this blog I'll discuss what I have learned so far about docker.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is docker?&lt;/li&gt;
&lt;li&gt;Components of Docker&lt;/li&gt;
&lt;li&gt;Container vs VM&lt;/li&gt;
&lt;li&gt;Basic Commands.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-docker"&gt;
  &lt;/a&gt;
  What is docker?
&lt;/h2&gt;

&lt;p&gt;Docker delivers software in containers, which simplifies the process by packaging everything it takes to run an application.&lt;/p&gt;

&lt;p&gt;There are numerous advantages to using containers to deploy applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Isolated&lt;/em&gt; — Applications have their own libraries; no conflicts will arise from different libraries in other applications.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Limited (limits on CPU/memory)&lt;/em&gt; — Applications may not hog resources from other applications.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Portable&lt;/em&gt; — The container contains everything it needs and is not tied to an OS or Cloud provider.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Lightweight&lt;/em&gt; — The kernel is shared, making it much smaller and faster than a full OS image.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#components-of-docker"&gt;
  &lt;/a&gt;
  Components of Docker
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker file&lt;/strong&gt;  is a text document that contains necessary commands which on execution helps assemble a Docker Image.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker Image&lt;/strong&gt; it is set of instruction which is use to build containers, consist of application code with all the dependencies and libraries. It is portable so it can easily shared between developers and operators.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Container&lt;/strong&gt; is a way of packing application with all its dependencies and configuration files. A container is a running instance of our image. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker Engine&lt;/strong&gt; supports the tasks and workflows involved to build, ship and run container-based applications. The engine creates a server-side daemon process that hosts images, containers, networks and storage volumes. Docker Engine is a client-server based application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker CLI&lt;/strong&gt; is a command line tool that lets you talk to the Docker daemon.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vm-vs-container"&gt;
  &lt;/a&gt;
  VM VS Container
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7mP-9VZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usun26masw8vjuacfsoi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7mP-9VZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usun26masw8vjuacfsoi.png" alt="Docker Vs VM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt; are an abstraction at the app layer that packages code and dependencies together. Multiple containers can run on the same machine and share the OS kernel with other containers, each running as isolated processes in user space. Container take up less space than VM's (Container images are typically tens of MB's in size), and start almost instantly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Virtual Machines(VM's)&lt;/strong&gt; are an abstraction of physical hard ware turning one server into many servers. The hypervisor allows multiple VM's to run on a single machine. Each VM includes a full copy of an Operating System, one or more apps, necessary binaries and libraries - taking up tens of GBs. VM can also be slow to boot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-commands"&gt;
  &lt;/a&gt;
  Basic Commands:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go to your favorite browser and Type docker over there click on download and Install docker on your favorite OS. So, I'm skipping these steps because it's a simple next, next wizard on Windows OS but if you having any difficulties installing docker on Linux OS or Mac OS go to the &lt;em&gt;&lt;a href="https://docs.docker.com/engine/install/"&gt;docs&lt;/a&gt;&lt;/em&gt; and explore how to do it. &lt;/li&gt;
&lt;li&gt;After the installation process is completed window like this will appear to you.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_nuUAOdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25l3tcl8gnwy2zuh1h6f.png" alt="Docker Window"&gt;
&lt;/li&gt;
&lt;li&gt;Now move towards terminal to run basic commands.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;docker pull&lt;/em&gt; pulls an image from registry to local machine.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rd0hjWZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9qi36w2p73we90ez7pc.PNG" alt="pull image"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;docker images&lt;/em&gt; show images.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w6I6prUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xoakzi3s7vp5c1he7q15.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w6I6prUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xoakzi3s7vp5c1he7q15.PNG" alt="images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;docker run&lt;/em&gt; both creates and runs a container in a single operation.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vi7Tdl9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w20s1pa0845nroi99h0b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vi7Tdl9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w20s1pa0845nroi99h0b.PNG" alt="run"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;docker ps&lt;/em&gt; shows running containers.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rgI-r3OQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c2fspmmlxf805rs72v1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgI-r3OQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c2fspmmlxf805rs72v1.PNG" alt="running container"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;docker stop&lt;/em&gt; stops a running container. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDiq0m3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozow2ty6nn3gvcixexq5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDiq0m3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozow2ty6nn3gvcixexq5.PNG" alt="Stop container"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;docker ps -a&lt;/em&gt; shows running as well as stopped containers.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yBaHgrFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhty4xtmph0bvs0ayb6b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBaHgrFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhty4xtmph0bvs0ayb6b.PNG" alt="view stop container"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;docker start&lt;/em&gt; starts a container to run it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jNN0gQod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tlv37vn7qviuabzhh7w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jNN0gQod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tlv37vn7qviuabzhh7w.PNG" alt="restart"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So you have learned about the basics of Docker, the difference between Virtual Machines and Docker Containers along with components of Docker.&lt;/p&gt;

&lt;p&gt;In the next article, We'll try to create an application using Docker and pushed our images to Docker Hub. We'll explore more terminologies related to Docker Dockerfile, Docker Image, Docker Hub, Image repositories, Container Registries, and much more!!! &lt;/p&gt;

&lt;p&gt;If you want more content like this, you can follow me on &lt;a href="https://twitter.com/zahoorlaiba1"&gt;Twitter&lt;/a&gt;, where I tweet about webdevelopment, self-improvement, and my journey to exploring Cloud Native Technologies!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What Next?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA"&gt;TechWorld with Nana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC0NErq0RhP51iXx64ZmyVfg"&gt;Bret Fisher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCorzANoC3fX9VVefJHM5wtA"&gt;Nick Janetakis
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/djdjalas"&gt;Amigoscode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Mastering Web Scraping in Python: Crawling from Scratch</title>
      <author>Ander Rodriguez</author>
      <pubDate>Wed, 11 Aug 2021 11:55:02 +0000</pubDate>
      <link>https://dev.to/anderrv/mastering-web-scraping-in-python-crawling-from-scratch-1dgd</link>
      <guid>https://dev.to/anderrv/mastering-web-scraping-in-python-crawling-from-scratch-1dgd</guid>
      <description>&lt;p&gt;Have you ever tried to crawl thousands of pages? Scale that even further? Handle and recover from system failures?&lt;/p&gt;

&lt;p&gt;After seeing how to &lt;a href="https://dev.to/anderrv/mastering-web-scraping-in-python-from-zero-to-hero-4fj4"&gt;extract content from a website&lt;/a&gt; and &lt;a href="https://dev.to/anderrv/stealth-web-scraping-in-python-avoid-blocking-like-a-ninja-16ok"&gt;how to avoid being blocked&lt;/a&gt;, we'll take a look at the crawling process. To get data at scale, getting a few URLs by hand is not an option. We need to use an automated system that will discover new pages and visit them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: for real-world usage, find suitable software. Below is more info on that. This guide pretends to be an introduction to how the crawling process works and doing the basics. But there are tons of details that need addressing.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;For the code to work, you will need &lt;a href="https://www.python.org/downloads/"&gt;python3 installed&lt;/a&gt;. Some systems have it pre-installed. After that, install all the necessary libraries by running &lt;code&gt;pip install&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;requests beautifulsoup4 pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-get-all-the-links-on-the%C2%A0page"&gt;
  &lt;/a&gt;
  How to Get all the Links on the Page
&lt;/h2&gt;

&lt;p&gt;From the first article in the series, we know that getting data from a webpage is easy with &lt;code&gt;requests.get&lt;/code&gt; and &lt;code&gt;BeautifulSoup&lt;/code&gt;. We will start by finding the links in a &lt;a href="https://scrapeme.live/shop/page/1/"&gt;fake shop prepared for testing scraping&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The basics to get the content are the same. Then we get all the links on the paginator and add the links to a &lt;code&gt;set&lt;/code&gt;. We chose set to avoid duplicates. As you can see, we hardcoded the selector for the links, meaning that it is not a universal solution. For the moment, we'll focus on the page at hand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt; 

&lt;span class="n"&gt;to_visit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://scrapeme.live/shop/page/1/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a.page-numbers'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# {'https://scrapeme.live/shop/page/2/', '.../3/', '.../46/', '.../48/', '.../4/', '.../47/'}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#one-url-at-a-time-sequential"&gt;
  &lt;/a&gt;
  One URL at a Time, Sequential
&lt;/h2&gt;

&lt;p&gt;Now we have several links but no way to visit them all. We need some kind of loop that will execute the extracting part for every URL available to fix that. Maybe the most straightforward way, although not the scalable one, is to use the same loop. But before that, there is a missing piece: avoid crawling the same page twice.&lt;/p&gt;

&lt;p&gt;We'll keep track of already visited links in another &lt;code&gt;set&lt;/code&gt; and avoid duplicates by checking them before every request. In this case, &lt;code&gt;to_visit&lt;/code&gt; is not being used, just maintained for demo purposes. To prevent visiting every page, we'll also add a &lt;code&gt;max_visits&lt;/code&gt; variable. For now, we ignore the &lt;code&gt;robots.txt&lt;/code&gt; file, but we have to be civil and nice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;visited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="n"&gt;to_visit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="n"&gt;max_visits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Crawl: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a.page-numbers'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;max_visits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://scrapeme.live/shop/page/1/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# {'.../3/', '.../1/', '.../2/'} 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# { ... new ones added, such as pages 5 and 6 ... }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a recursive function with two exit conditions: there are no more links to visit, or we reached the maximum visits. In either case, it will exit and print the visited links and the ones pending.&lt;/p&gt;

&lt;p&gt;It is important to note that the same link can be added many times, but it will only get crawled once. In a big project, the idea would be to set a timer and only request each URL after a few days.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#separation-of%C2%A0concerns"&gt;
  &lt;/a&gt;
  Separation of Concerns
&lt;/h2&gt;

&lt;p&gt;We said this is not about extracting or parsing content, but we need to separate concerns before it becomes entangled. For that, we'll create three helper functions: get HTML, extract links, and extract content. As their names imply, each of them will perform one of the main tasks of web scraping.&lt;/p&gt;

&lt;p&gt;The first one will get the HTML from a URL using the same library as earlier but wrapping it in a &lt;code&gt;try&lt;/code&gt; block for security.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; 
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second one, extracting the links, will work just as before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a.page-numbers'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last one will be the placeholder for extracting the content we want. Since we are simplifying this part, it will get basic info from the same page, no need to enter on the detail page.&lt;/p&gt;

&lt;p&gt;To show that we can extract some content, we will print each product's title (Pokémon name).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.product'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'h2'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
 &lt;span class="c1"&gt;# Bulbasaur, Ivysaur, ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assembling it all together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; 
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Crawl: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;extract_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extract_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Noticed something different? The crawling logic is not attached to the link extracting part. Each of the helpers handles a single piece. And the &lt;code&gt;crawl&lt;/code&gt; function acts as an orchestrator by calling them and applying the results.&lt;/p&gt;

&lt;p&gt;As the project evolves, all these parts could be moved to files or passed as parameters/callbacks. We can generalize the use cases if the core is independent of the selected page and content.&lt;/p&gt;

&lt;p&gt;Are we missing something? 🤔&lt;br&gt;
We need to add the first URL and call the crawling function. Since &lt;code&gt;crawl&lt;/code&gt; is not recursive anymore, we'll handle that in a separate loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://scrapeme.live/shop/page/1/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;max_visits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_visit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#parallel-requests"&gt;
  &lt;/a&gt;
  Parallel Requests
&lt;/h2&gt;

&lt;p&gt;There is a significant part missing: parallelism. HTTP request handlers are idle most of the time, waiting for the response to come back. It means that we can send several of them at the same time without overloading the machine. And then process them as they came back.&lt;/p&gt;

&lt;p&gt;It is relevant to note that this approach only works if the order is not imperative. But we are already using sets, which according to &lt;a href="https://docs.python.org/3/tutorial/datastructures.html#sets"&gt;Python's definition&lt;/a&gt;, "a set is an &lt;strong&gt;unordered collection&lt;/strong&gt; with no duplicate elements." Meaning that our process was unordered from the start.&lt;/p&gt;

&lt;p&gt;Before diving deep into the parallel requests, we have to understand a couple of concepts: synchronization and queues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#synchronized-queues"&gt;
  &lt;/a&gt;
  Synchronized Queues
&lt;/h3&gt;

&lt;p&gt;There is a huge risk in threaded or &lt;a href="https://en.wikipedia.org/wiki/Parallel_computing"&gt;parallel computing&lt;/a&gt;: modifying the same variables or data structures from different threads. It means two of our requests would be adding new links to a set (i.e., &lt;code&gt;to_visit&lt;/code&gt;). Since the data structure is not protected, both could read and write it like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Both read its content, i.e. &lt;code&gt;(1, 2, 3)&lt;/code&gt; (simplified)&lt;/li&gt;
&lt;li&gt;Thread one adds links to pages &lt;code&gt;4, 5&lt;/code&gt;: &lt;code&gt;(1, 2, 3, 4, 5)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Thread two adds links to pages &lt;code&gt;6, 7&lt;/code&gt;: &lt;code&gt;(1, 2, 3, 6, 7)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How did this happen? When thread two wrote the new links, it added them to a set with only three elements.&lt;br&gt;
&lt;em&gt;This is a very simplified version; check the links for more info.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What can we do to avoid these conflicts? Synchronization or locking. From the &lt;a href="https://docs.python.org/3/library/queue.html"&gt;docs&lt;/a&gt;: "queues use locks to temporarily block competing threads." It means that thread one would acquire a lock on the set, read and write without any problem, and then release the lock automatically. Meanwhile, thread two would have to wait until the lock becomes available. Only then read and write.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;queue&lt;/span&gt; 

&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://scrapeme.live/shop/page/1/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="p"&gt;...&lt;/span&gt; 
    &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extract_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the moment, it does not work. Do not worry. The changes in the existing code are minimum: we replaced &lt;code&gt;to_visit&lt;/code&gt; with a queue. But queues need handlers or workers to process their content. With the above, we have created a Queue and added an item (the original one). We also modified the &lt;code&gt;crawl&lt;/code&gt; function to put links in the queue instead of updating the previous set.&lt;/p&gt;

&lt;p&gt;We'll create a worker using the &lt;a href="https://docs.python.org/3/library/threading.html"&gt;threading module&lt;/a&gt; to process that queue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;queue_worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Get an item from the queue, blocks until one is available 
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'to process:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task_done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Notifies the queue that the item has been processed 
&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://scrapeme.live/shop/page/1/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Blocks until all items in the queue are processed and marked as done 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Done'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;# to process: https://scrapeme.live/shop/page/1/ 
# Done
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We defined a new function that will handle the queued items. For that, we enter into an infinite loop that will stop when all the processing finishes.&lt;/p&gt;

&lt;p&gt;Then &lt;code&gt;get&lt;/code&gt; an item, which will block until an item is available. We process that item; for the moment, just print it to show how it works. It will call &lt;code&gt;crawl&lt;/code&gt; later.&lt;/p&gt;

&lt;p&gt;Finally, we notify the queue that the item has been processed by calling &lt;code&gt;task_done&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once the queue gets notified for all the items and empty, it will stop its execution and end the infinite loop. That's what the &lt;code&gt;join&lt;/code&gt; function does, "blocks until all items in the queue have been gotten and processed."&lt;/p&gt;

&lt;p&gt;Now we need two more things: process items and create more threads (it would not be parallel with just one, would it?).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;queue_worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;max_visits&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
            &lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task_done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="n"&gt;num_workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_workers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be careful when running it since big numbers in &lt;code&gt;num_workers&lt;/code&gt; and &lt;code&gt;max_visits&lt;/code&gt; would start lots of requests. If the script had some minor bug for any reason, you could perform hundreds of requests in a few seconds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;We run benchmarks with different settings only as a reference.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sequential requests: 29,32s&lt;/li&gt;
&lt;li&gt;Queue with one worker (&lt;code&gt;num_workers = 1&lt;/code&gt;): 29,41s&lt;/li&gt;
&lt;li&gt;Queue with two workers (&lt;code&gt;num_workers = 2&lt;/code&gt;): 20,05s&lt;/li&gt;
&lt;li&gt;Queue with five workers (&lt;code&gt;num_workers = 5&lt;/code&gt;): 11,97s&lt;/li&gt;
&lt;li&gt;Queue with ten workers (&lt;code&gt;num_workers = 10&lt;/code&gt;): 12,02s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is almost no difference between sequential requests and having one worker. Threads carry some overhead, but it is barely noticeable here. It would require a more severe load test. Once we start adding workers, that overhead pays off. We could add even more, but it won't affect the outcome since they will be idle most of the time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#distributed-processing"&gt;
  &lt;/a&gt;
  Distributed Processing
&lt;/h2&gt;

&lt;p&gt;We won't cover the following scale-up step: distributing the crawling process among several servers. &lt;a href="https://docs.python.org/3/library/multiprocessing.html#using-a-remote-manager"&gt;Python allows it&lt;/a&gt;, and some libraries can help you with it (&lt;a href="https://docs.celeryproject.org/en/stable/"&gt;Celery&lt;/a&gt; or &lt;a href="https://python-rq.org/"&gt;Redis Queue&lt;/a&gt;). It is a huge step, and we have already covered enough for the day.&lt;/p&gt;

&lt;p&gt;As a quick preview, the idea behind it is the same as the one with the threads. Each item will be processed as we've seen until now but in different threads or even machines running the same code. With this approach, we can scale even further; theoretically, with no limit. But in reality, there is always a limit or bottleneck, usually the central node that handles the distribution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-into-account-when-scaling%C2%A0up"&gt;
  &lt;/a&gt;
  Take into Account when Scaling Up
&lt;/h2&gt;

&lt;p&gt;We've shown a simplified version of a crawling process for educational purposes. To apply all this at scale, you should consider several things first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-vs-buy-vs-open%C2%A0source"&gt;
  &lt;/a&gt;
  Build vs Buy vs Open Source
&lt;/h3&gt;

&lt;p&gt;Before you write your own library for crawling, try some of the options out there. Many great Open Source libraries can achieve it: &lt;a href="https://docs.scrapy.org/en/latest/"&gt;Scrapy&lt;/a&gt;, &lt;a href="http://docs.pyspider.org/en/latest/"&gt;pyspider&lt;/a&gt;, &lt;a href="https://github.com/bda-research/node-crawler"&gt;node-crawler&lt;/a&gt; (Node.js), or &lt;a href="https://github.com/gocolly/colly"&gt;Colly&lt;/a&gt; (Go). And many companies and services that provide you with scraping and crawling solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avoid-being%C2%A0blocked"&gt;
  &lt;/a&gt;
  Avoid being blocked
&lt;/h3&gt;

&lt;p&gt;As we saw in a previous post, &lt;a href="https://dev.to/anderrv/stealth-web-scraping-in-python-avoid-blocking-like-a-ninja-16ok"&gt;there are several actions we can take to avoid blocking&lt;/a&gt;. A couple of them are proxies and headers. Here is a simple snippet adding those to our current code.&lt;br&gt;
&lt;em&gt;Note that these &lt;a href="https://free-proxy-list.net/"&gt;free proxies&lt;/a&gt; might not work for you. They are short-time lived.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;proxies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="s"&gt;'http'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'http://190.64.18.177:80'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'https'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'http://49.12.2.178:3128'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="s"&gt;'authority'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'httpbin.org'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'cache-control'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'max-age=0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'sec-ch-ua'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'"Chromium";v="92", " Not A;Brand";v="99", "Google Chrome";v="92"'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'sec-ch-ua-mobile'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'?0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'upgrade-insecure-requests'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'user-agent'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'accept'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'sec-fetch-site'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'none'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'sec-fetch-mode'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'navigate'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'sec-fetch-user'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'?1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'sec-fetch-dest'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'document'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'accept-language'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'en-US,en;q=0.9'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proxies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;proxies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; 
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extracting-content"&gt;
  &lt;/a&gt;
  Extracting Content
&lt;/h3&gt;

&lt;p&gt;We won't go into details here, only a simple snippet for extracting id, name, and price per item. We store everything in a &lt;code&gt;data&lt;/code&gt; array, which is not a great idea. But it is enough for demo purposes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.product'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
            &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'data-product_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="s"&gt;'data-product_id'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
            &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'h2'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'amount'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; 
        &lt;span class="p"&gt;})&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# [{'id': '759', 'name': 'Bulbasaur', 'price': '£63.00'}, {'id': '729', 'name': 'Ivysaur', 'price': '£87.00'}, ...]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#persistency"&gt;
  &lt;/a&gt;
  Persistency
&lt;/h3&gt;

&lt;p&gt;We haven't persisted anything, and that does not scale. In a real-world case, we should store the content and even the HTML itself for later processing. And all the discovered URLs with the timestamp time. It all starts to sound like a database is needed. Depending on the necessities, we could store just the actual content or the whole URLs, dates, HTML, etcetera generically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonicals"&gt;
  &lt;/a&gt;
  Canonicals
&lt;/h3&gt;

&lt;p&gt;The link extraction part does not take into consideration &lt;a href="https://en.wikipedia.org/wiki/Canonical_link_element"&gt;canonical links&lt;/a&gt;. A page can have more than one URL: query strings or hashes might modify it. In our case, we would crawl it twice. It's not a problem now, but something to consider.&lt;/p&gt;

&lt;p&gt;The right approach would be to add the canonical URL (if present) to the visited list. Then we could arrive at that same page from a different origin URL, but we would detect it as duplicate. We could also remove some query string parameters using &lt;a href="https://w3lib.readthedocs.io/en/latest/w3lib.html#w3lib.url.url_query_cleaner"&gt;url_query_cleaner&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#robotstxt"&gt;
  &lt;/a&gt;
  Robots.txt
&lt;/h3&gt;

&lt;p&gt;We have not checked it because we are using a test website prepared for scraping. But please check the robots file and comply with it when crawling an actual target. And above it, do not cause more traffic than they can handle. Once again, be civil and nice ;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-code"&gt;
  &lt;/a&gt;
  Final Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;queue&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt; 

&lt;span class="n"&gt;starting_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://scrapeme.live/shop/page/1/'&lt;/span&gt; 
&lt;span class="n"&gt;visited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="n"&gt;max_visits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;# careful, it will crawl all the pages 
&lt;/span&gt;&lt;span class="n"&gt;num_workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; 
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="c1"&gt;# response = requests.get(url, headers=headers, proxies=proxies) 
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; 
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a.page-numbers'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.product'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
            &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'data-product_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="s"&gt;'data-product_id'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
            &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'h2'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'amount'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; 
        &lt;span class="p"&gt;})&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Crawl: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;extract_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extract_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;queue_worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Get an item from the queue, blocks until one is available 
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;max_visits&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
            &lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task_done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Notifies the queue that the item has been processed 
&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_workers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starting_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Blocks until all items in the queue are processed and marked as done 
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Done'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Visited:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Data:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We'd like you to part with three main points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Separate getting the HTML and extracting the links from the crawling itself.&lt;/li&gt;
&lt;li&gt;Choose the appropriate system for your use case: simple sequential, parallel, or distributed.&lt;/li&gt;
&lt;li&gt;Building from scratch to a vast scale will probably hurt. Take a look at free or paid libraries/solutions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are close to finishing this series on Web Scraping. Stay tuned for the next one on scaling this crawling process even further.&lt;/p&gt;

&lt;p&gt;Did you find the content helpful? Please, spread the word and share it. 👈&lt;/p&gt;




&lt;p&gt;Originally published at &lt;a href="https://zenrows.com/blog/mastering-web-scraping-in-python-crawling-from-scratch?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=crawling_scratch"&gt;https://www.zenrows.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Chinese Malware in Machine Learning Models</title>
      <author>The Sharp Ninja</author>
      <pubDate>Wed, 11 Aug 2021 11:46:51 +0000</pubDate>
      <link>https://dev.to/sharpninja/chinese-malware-in-machine-learning-models-4c72</link>
      <guid>https://dev.to/sharpninja/chinese-malware-in-machine-learning-models-4c72</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The new research, [...] envisions a future where an organization may bring in an off-the-shelf machine learning model for any given task (say, a chat bot, or image detection) that could be loaded with malware while performing its task well enough not to arouse suspicion. &lt;/p&gt;

&lt;p&gt;By Radhamely De Leon: &lt;em&gt;&lt;a href="https://www.vice.com/en/article/bvzp78/researchers-hid-malware-inside-an-ais-neurons-and-it-worked-scarily-well"&gt;Researchers Hid Malware Inside an AI's 'Neurons' And It Worked Scarily Well&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, is it any surprise the Chinese did this research?  If ever there was a case study for why ethics are necessary, China is exhibit A.&lt;/p&gt;

&lt;p&gt;Second, this is done using &lt;a href="https://en.wikipedia.org/wiki/Steganography"&gt;steganography&lt;/a&gt;, which is a way to hide one message in another message.  The message being concealed appears as noise in the data concealing it.  This is how lossy compression formats are used to embed child porn in seemingly normal images.  That there are &lt;a href="https://github.com/search?q=steganography&amp;amp;type=repositories"&gt;over 6000 repositories on GitHub&lt;/a&gt; around this should be concerning to everyone.&lt;/p&gt;

&lt;p&gt;Third, awareness needs to be front and center on the dangers of pre-generated ML Models.  The truth is, nobody knows what's in them.  ML models are typically not deterministic.  Someone will have to figure out a way to prove mathematically how to determine if a model has been tampered with and if it is safe to use.  Trusting the creator is more difficult than code because most of the time, the training is not deterministic and is highly susceptible to outside influences that cause each training run to produce slightly different neural networks.  This eliminates a source of proof for an ML model being authentic or one hiding malware.  &lt;/p&gt;

&lt;p&gt;The only solution I see is for vendors to hash the neural net after building it and during packaging it and failing the packaging phase if they differ.  It may even be necessary to encrypt the model as it is generated and to run the model from its encrypted state, only decrypting on the fly to retrieve nodes at runtime.  Registering the hashes of models with a common registrar of know-good-models would help anti-virus software to block infected models from entering the network.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>ai</category>
      <category>malware</category>
    </item>
    <item>
      <title>Node.js CRUD Operation with MySQL example</title>
      <author>Tien Nguyen</author>
      <pubDate>Wed, 11 Aug 2021 11:37:52 +0000</pubDate>
      <link>https://dev.to/tienbku/node-js-crud-operation-with-mysql-example-1gme</link>
      <guid>https://dev.to/tienbku/node-js-crud-operation-with-mysql-example-1gme</guid>
      <description>&lt;p&gt;This tutorial will guide you through the steps of building a simple Node.js CRUD Operation with MySQL database using Expressjs for Rest API.&lt;/p&gt;

&lt;p&gt;Full Article: &lt;a href="https://www.bezkoder.com/node-js-rest-api-express-mysql/"&gt;Build Node.js Rest APIs with Express &amp;amp; MySQL&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Application overview&lt;/h2&gt;

&lt;p&gt;We will build Node.js CRUD Operation with MySQL - Rest Apis for creating, retrieving, updating &amp;amp; deleting Customers.&lt;/p&gt;

&lt;p&gt;First, we start with an Express web server. Next, we add configuration for MySQL database, create &lt;code&gt;Customer&lt;/code&gt; model, write the controller. Then we define routes for handling all CRUD operations:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Urls&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/customers&lt;/td&gt;
&lt;td&gt;get all Customers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/customers/42&lt;/td&gt;
&lt;td&gt;get Customer with id=42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/customers&lt;/td&gt;
&lt;td&gt;add new Customer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/customers/42&lt;/td&gt;
&lt;td&gt;update Customer with id=42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/customers/42&lt;/td&gt;
&lt;td&gt;remove Customer with id=42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/customers&lt;/td&gt;
&lt;td&gt;remove all Customers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Finally, we're gonna test the Rest Apis using Postman.&lt;/p&gt;

&lt;p&gt;Our project structure will be like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9WzgxFhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-project-structure.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9WzgxFhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-project-structure.png" alt="nodejs-rest-api-express-mysql-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Test the APIs&lt;/h2&gt;

&lt;p&gt;Run our Node.js application with command: &lt;code&gt;node server.js&lt;/code&gt;.&lt;br&gt;
The console shows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Server is running on port 3000.
Successfully connected to the database.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using Postman, we're gonna test all the Apis above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;li&gt;Create a new Customer using &lt;code&gt;POST /customers&lt;/code&gt; Api&lt;/li&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J6QMsgbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-test-create.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6QMsgbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-test-create.png" alt="nodejs-rest-api-express-mysql-test-create"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating some new Customers, we can check MySQL table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt; SELECT * FROM customers;
+----+--------------------+--------+--------+
| id | email              | name   | active |
+----+--------------------+--------+--------+
|  1 | bezkoder@gmail.com | zKoder |      1 |
|  2 | jack123@gmail.com  | Jack   |      0 |
|  3 | drhelen@gmail.com  | Helen  |      0 |
+----+--------------------+--------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;li&gt;Retrieve all Customers using &lt;code&gt;GET /customers&lt;/code&gt; Api&lt;/li&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ricAgI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-test-retrieve-all.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ricAgI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-test-retrieve-all.png" alt="nodejs-rest-api-express-mysql-test-retrieve-all"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;li&gt;Retrieve a single Customer by id using &lt;code&gt;GET /customers/:customerId&lt;/code&gt; Api&lt;/li&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JU_ajQz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-test-retrieve-one.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JU_ajQz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-test-retrieve-one.png" alt="nodejs-rest-api-express-mysql-test-retrieve-one"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;li&gt;Update a Customer using &lt;code&gt;PUT /customers/:customerId&lt;/code&gt; Api&lt;/li&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6z2WkB6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-test-update.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6z2WkB6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-test-update.png" alt="nodejs-rest-api-express-mysql-test-update"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check &lt;code&gt;customers&lt;/code&gt; table after a row was updated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt; SELECT * FROM customers;
+----+--------------------+----------+--------+
| id | email              | name     | active |
+----+--------------------+----------+--------+
|  1 | bezkoder@gmail.com | zKoder   |      1 |
|  2 | jack123@gmail.com  | Jack     |      0 |
|  3 | drhelen@gmail.com  | Dr.Helen |      1 |
+----+--------------------+----------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;li&gt;Delete a Customer using &lt;code&gt;DELETE /customers/:customerId&lt;/code&gt; Api&lt;/li&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--daBDHLAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-test-delete-one.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--daBDHLAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-test-delete-one.png" alt="nodejs-rest-api-express-mysql-test-delete-one"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Customer with id=2 was removed from &lt;code&gt;customers&lt;/code&gt; table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt; SELECT * FROM customers;
+----+--------------------+----------+--------+
| id | email              | name     | active |
+----+--------------------+----------+--------+
|  1 | bezkoder@gmail.com | zKoder   |      1 |
|  3 | drhelen@gmail.com  | Dr.Helen |      1 |
+----+--------------------+----------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;li&gt;Delete all Customers using &lt;code&gt;DELETE /customers&lt;/code&gt; Api&lt;/li&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--czs1tr8s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-test-delete-all.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--czs1tr8s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bezkoder.com/wp-content/uploads/2019/09/nodejs-rest-api-express-mysql-test-delete-all.png" alt="nodejs-rest-api-express-mysql-test-delete-all"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now there are no rows in &lt;code&gt;customers&lt;/code&gt; table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt; SELECT * FROM customers;
Empty set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For step by step instruction and Github source code, please visit:&lt;br&gt;
&lt;a href="https://www.bezkoder.com/node-js-rest-api-express-mysql/"&gt;Build Node.js Rest APIs with Express &amp;amp; MySQL&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;Related Posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-js-express-sequelize-mysql/"&gt;Node.js Rest APIs example with Express &amp;amp; MySQL (including Sequelize)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-js-jwt-authentication-mysql/"&gt;Node.js – JWT Authentication &amp;amp; Authorization example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-js-upload-excel-file-database/"&gt;Node.js: Upload/Import Excel file data into MySQL Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-js-upload-csv-file-database/"&gt;Node.js: Upload CSV file data into MySQL Database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fullstack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/vue-js-node-js-express-mysql-crud-example/"&gt;Vue.js + Node.js + Express + MySQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/vue-node-express-mongodb-mevn-crud/"&gt;Vue.js + Node.js + Express + MongoDB example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-node-express-mysql/"&gt;Angular 8 + Node.js Express + MySQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-10-node-js-express-mysql/"&gt;Angular 10 + Node.js Express + MySQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-11-node-js-express-mysql/"&gt;Angular 11 + Node.js Express + MySQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-12-node-js-express-mysql/"&gt;Angular 12 + Node.js Express + MySQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-mysql/"&gt;React + Node.js + Express + MySQL example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Security: &lt;a href="https://bezkoder.com/node-js-jwt-authentication-mysql/"&gt;Node.js – JWT Authentication &amp;amp; Authorization example&lt;/a&gt;&lt;br&gt;
Deployment: &lt;a href="https://bezkoder.com/deploy-node-js-app-heroku-cleardb-mysql/"&gt;Deploying/Hosting Node.js app on Heroku with MySQL database&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Node.js &amp;amp; MySQL Associations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/sequelize-associate-one-to-many/"&gt;One-to-Many Relationship example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/sequelize-associate-many-to-many/"&gt;Many-to-Many Relationship example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>node</category>
      <category>mysql</category>
    </item>
    <item>
      <title>Haskell as an alternative to TypeScript</title>
      <author>digitallyinduced</author>
      <pubDate>Wed, 11 Aug 2021 11:20:33 +0000</pubDate>
      <link>https://dev.to/digitallyinduced/haskell-as-an-alternative-to-typescript-1091</link>
      <guid>https://dev.to/digitallyinduced/haskell-as-an-alternative-to-typescript-1091</guid>
      <description>&lt;p&gt;If you've been using TypeScript for your web development, you have understood the value that static typing brings to your productivity. However, TypeScript still has some issues in regards to type safety. This article is supposed to show these issues and help you see how another statically typed language - Haskell - is solving them. In the end, I hope that you will have learned something, and might be interested in continuing your journey into type-safe programming by trying out Haskell for your next project. If you choose to do so, I recommend using IHP, a productivity-focused web framework with which you can build full-stack web-apps (but APIs work just fine as well).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-antipattern-that-is-raw-any-endraw-"&gt;
  &lt;/a&gt;
  The anti-pattern that is &lt;code&gt;any&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;any&lt;/code&gt; type included in TypeScript can cause many issues, as it straight up disables typechecking for whatever it's used for. Once you use it, you might as well write plain JavaScript. But it might actually be worse than that: people might be highly confident in their refactoring or new code if they don't get any type errors. What they might not notice is that an &lt;code&gt;any&lt;/code&gt; somewhere else in the code where they didn't change anything is not throwing a type error, although it would if the correct type were used.&lt;/p&gt;

&lt;p&gt;So why would anyone use &lt;code&gt;any&lt;/code&gt;? I think there's a few different reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the correct type is not known to the developer at the time of writing,&lt;/li&gt;
&lt;li&gt;the correct type would be too complex, or&lt;/li&gt;
&lt;li&gt;it's implicitly used by TypeScript because it can't figure out the correct type by itself (this one can be disabled using the &lt;code&gt;noImplicitAny&lt;/code&gt; setting)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if the correct type is not known by the developer, that could either mean it'd be useful for them to do some research into what it actually is, or, more likely, the type cannot be known at that point in time. In any case using TypeScript's &lt;code&gt;unknown&lt;/code&gt; type is much better, as that is a type-safe way of accepting any value, that also disallows any interaction with the value that might be problematic. This is the type to use in case of migrating an existing JS codebase to TypeScript, as it keeps the guards of TypeScript intact.&lt;/p&gt;

&lt;p&gt;If the correct type is too complex for the developer to figure out or to bother typing, and TypeScript isn't able to do so either, there's little you can do except use &lt;code&gt;unknown&lt;/code&gt; again, which definitely isn't ideal. The developer probably already understands things about the type, but using &lt;code&gt;unknown&lt;/code&gt; means that TypeScript will not, which will just lead to unnecessary checks.&lt;/p&gt;

&lt;p&gt;In case Haskell was used instead, the likelihood of Haskell figuring out the type by itself (this is called type inference btw) is much higher. This is because in Haskell &lt;code&gt;any&lt;/code&gt; isn't even an option, so it can't confuse the compiler. But also, ghc - the most widespread Haskell compiler - has years and years of effort behind it. And lastly, as long as you stick to basic Haskell, it is specifically designed to enable type inference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations-of-being-a-superset-of-javascript"&gt;
  &lt;/a&gt;
  Limitations of being a super-set of JavaScript
&lt;/h2&gt;

&lt;p&gt;TypeScript has the core design-goal of being a super-set of JavaScript. What that means is that any JavaScript code is valid TypeScript code as well (if the transpiler is configured to accept it), and you only need to add code to add more definitive types to the code. This is great if you need to convert an existing codebase from JavaScript to TypeScript, as it allows you to work in very small increments.&lt;/p&gt;

&lt;p&gt;The problem is that new projects built using TypeScript still suffer from many of the problems of JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;difficult-to-understand behavior that doesn't behave like in other languages (for example the &lt;code&gt;this&lt;/code&gt; keyword)&lt;/li&gt;
&lt;li&gt;many things on &lt;a href="https://wtfjs.com/"&gt;https://wtfjs.com/&lt;/a&gt;
...and probably more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So while I applaud converting an existing JavaScript codebase to TypeScript, I would never start a new project in either if there's good alternatives, which there always are for backend development. Also, using the right tools the need for a lot of frontend code can be eliminated, while maintaining a highly-interactive webapp. &lt;a href="https://ihp.digitallyinduced.com/"&gt;Check out IHP for my favorite solution right now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Being a super-set of JavaScript, many type definitions are a lot more complex to write than they would otherwise need to be as well. Check out the following examples, which are type definitions for equivalent Haskell and TypeScript code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// A function that takes a tuple of two values and returns the first:

// TypeScript
type first = &amp;lt;A, B&amp;gt; ([a, b]: [A, B]) =&amp;gt; A

// Haskell
first :: (a, b) -&amp;gt; a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// a map function for lists/arrays

// TypeScript
type map = &amp;lt;A, B&amp;gt; ((a: A) =&amp;gt; B, list: A[]) =&amp;gt; B[]

// Haskell
map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#typescript-cant-type-everything"&gt;
  &lt;/a&gt;
  TypeScript can't type everything
&lt;/h2&gt;

&lt;p&gt;If you're using TypeScript you see the advantages of having static typing available, so we don't need to go over them. As such, it should bother you whenever you cannot actually use static types to encode useful information. Here are a few cases in which TypeScript cannot actually fulfill its promise of type-safety, and the way that Haskell solves it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sideeffects"&gt;
  &lt;/a&gt;
  Side-Effects
&lt;/h3&gt;

&lt;p&gt;If you've been following recent trends in software development, especially in the JavaScript world, you know that functional programming principles are becoming more and more popular. React is built on them! One of the things people are advocating for are "pure functions": functions that, given the same arguments, always return the same result and that don't have side-effects. What makes these functions so great is that they are very easy to reason about, and there are various techniques for performance optimization that are much easier using them, if not impossible without them.&lt;/p&gt;

&lt;p&gt;When coding in TypeScript, figuring out whether or not a function is pure requires you to read its source code and figure out how it works, which might lead to other functions that you have to do the same thing for. This gets tedious and could easily be avoided if the information of function purity was included in the function's type.&lt;/p&gt;

&lt;p&gt;In Haskell, this is done by making every function pure by-default. Whenever you need to have a side-effect in a function, you need to declare this on the type-level. Not doing so is a compiler error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#failures"&gt;
  &lt;/a&gt;
  Failures
&lt;/h3&gt;

&lt;p&gt;As long as everything works as expected, TypeScript works just fine. However, when something goes wrong, you will likely have to interact with an error that gives you more information. Before you can even do so though, you need to be aware that an error can occur - and this is one of the shortcomings of TypeScript. It is impossible to declare on the type-level that a function might throw an error. This means you still need rigorous testing to figure this out, and even then you might run into unhandled errors in production due to not having tested thoroughly enough.&lt;/p&gt;

&lt;p&gt;In Haskell it is most common to force handling errors by making the return type include the information of whether or not the function succeeded or not. Depending on the actual function, you might get no, some, or a lot of information in case of a failure, but you can be sure that you are handling these cases. The two most common ways of representing the option for failure are the &lt;code&gt;Maybe&lt;/code&gt; and &lt;code&gt;Either&lt;/code&gt; types.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Maybe&lt;/code&gt; type can represent success and failure by containing the success value in the success case, or &lt;code&gt;Nothing&lt;/code&gt; in the case of a failure. This is also basically Haskell's way of handling &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;, which prevents from using these values in a way that they don't support, which might cause issues.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Either&lt;/code&gt; type works in a very similar way: in the case of a success it simply contains the value that the function would return anyways. But in case of a failure it contains some other value. The type of this is clearly defined, which means that there's no ambiguity in how to handle it.&lt;/p&gt;

&lt;p&gt;What's best about these techniques is that it does not only &lt;em&gt;allow&lt;/em&gt; you to handle the error case in a type-safe fashion, it &lt;em&gt;forces&lt;/em&gt; you to handle error cases where they might occur. If the function doesn't force you to handle the error case, no error can occur.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One place where typing the failure state should clearly be possible are promises, however TypeScript has no default way of doing this, which means that in case you run into a failure in your asynchronous code, TypeScript is not going to help you in figuring out the value you got in place of the success value.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;TypeScript is a great way to improve an existing JavaScript codebase, and to bring a bit more productivity and safety to your frontend code. However, the language has issues, some of which are so ingrained in the language itself that they are not going to be solved with time. So whenever you can, try opting for a language that has less design issues at its core, such as Haskell, and avoid writing JavaScript/TypeScript wherever possible.&lt;/p&gt;

&lt;p&gt;To allow you to do this, we at digitally induced have written IHP - an opinionated full-stack web framework based on Haskell, with a focus on developer experience and productivity, without sacrificing user experience. To try it out for your next full-stack project or backend, &lt;a href="https://ihp.digitallyinduced.com/Guide/installation.html"&gt;get started using the Guide&lt;/a&gt; and join our &lt;a href="https://ihp.digitallyinduced.com/community/"&gt;community forum&lt;/a&gt; or &lt;a href="https://ihp.digitallyinduced.com/Slack"&gt;active slack workspace&lt;/a&gt; to get any support you might need. We try to help wherever we can.&lt;/p&gt;

&lt;p&gt;Do you have any thoughts on TypeScript that you want to share? Did I miss anything? I'd love to hear your opinions and thoughts!&lt;/p&gt;

</description>
      <category>haskell</category>
      <category>typescript</category>
      <category>functional</category>
      <category>ihp</category>
    </item>
    <item>
      <title>Higher order functions and closures example in Javascript</title>
      <author>Adrian Matei </author>
      <pubDate>Wed, 11 Aug 2021 10:37:11 +0000</pubDate>
      <link>https://dev.to/codever/higher-order-functions-and-closures-example-in-javascript-4go3</link>
      <guid>https://dev.to/codever/higher-order-functions-and-closures-example-in-javascript-4go3</guid>
      <description>&lt;p&gt;First with "normal" functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//closures and higher order function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;salute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;salutation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;salutation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;salute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mr.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//output&lt;/span&gt;
&lt;span class="nx"&gt;hi&lt;/span&gt; &lt;span class="nx"&gt;Mr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;John&lt;/span&gt; &lt;span class="nx"&gt;Wick&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shorter variant with arrow functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;saluteArrowFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;salutation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;salutation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;saluteArrowFunction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mr.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Johnny&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//output&lt;/span&gt;
&lt;span class="nx"&gt;hi&lt;/span&gt; &lt;span class="nx"&gt;Mr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Johnny&lt;/span&gt; &lt;span class="nx"&gt;Cage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;br&gt;
Learn more about:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;closures on mdn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/javascript-scene/higher-order-functions-composing-software-5365cf2cbe99"&gt;higher order functions on Composing Software&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Shared ❤️ from &lt;a href="https://www.codever.land/snippets/6113a246f52006531138ff57/details"&gt;Codever&lt;/a&gt;.   👉    use the &lt;a href="https://www.codever.land/snippets/6113a246f52006531138ff57/details"&gt;&lt;strong&gt;copy to mine&lt;/strong&gt;&lt;/a&gt; functionality to add it to your personal snippets collection. &lt;/p&gt;


&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>codever</category>
      <category>snippets</category>
    </item>
    <item>
      <title>[Package] Laravel Currency Formatter</title>
      <author>Marc Garcia Torrent</author>
      <pubDate>Wed, 11 Aug 2021 10:18:08 +0000</pubDate>
      <link>https://dev.to/magarrent/package-laravel-currency-formatter-11f8</link>
      <guid>https://dev.to/magarrent/package-laravel-currency-formatter-11f8</guid>
      <description>&lt;p&gt;Hello there! Marc here again.&lt;/p&gt;

&lt;p&gt;I've just released a new Laravel package, this time it's about currencies. Almost in every project we have to format money in one or more formats, and personally, I've never remember how format with number format and round functions 😅&lt;/p&gt;

&lt;p&gt;Easy and tiny package for all of you guys, enjoy it. And always, PRs and suggestions will be welcome!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/magarrent/laravel-currency-formatter"&gt;https://github.com/magarrent/laravel-currency-formatter&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#laravel-currency-formatter"&gt;
  &lt;/a&gt;
  Laravel Currency Formatter
&lt;/h2&gt;

&lt;p&gt;Tiny Laravel worldwide currency formatter&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nw4iEzNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6561770/128357354-34e67b91-3f76-4e8f-92db-186843517f99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nw4iEzNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6561770/128357354-34e67b91-3f76-4e8f-92db-186843517f99.png" alt="Laravel Currency Formatter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--whwn4QRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/license-MIT-brightgreen.svg%3Fstyle%3Dflat-square" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--whwn4QRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/license-MIT-brightgreen.svg%3Fstyle%3Dflat-square" alt="Software License"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fm8expJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/languages/code-size/magarrent/laravel-currency-formatter" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fm8expJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/languages/code-size/magarrent/laravel-currency-formatter" alt="Package Size"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/magarrent"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kziPr3-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt='"Buy Me A Coffee"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;composer require magarrent/laravel-currency-formatter&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Magarrent\LaravelCurrencyFormatter\Facades\Currency

Currency::currency("EUR")-&amp;gt;format(256)          // 256,00 €
Currency::currency("EUR")-&amp;gt;format(256, true)    // 256 €
Currency::currency("USD")-&amp;gt;format(256)          // $256,00
Currency::currency("USD")-&amp;gt;format(256, true)    // $256

Currency::currency("GBP")-&amp;gt;format(256)          // £256.00
Currency::currency("BTC")-&amp;gt;format(256)          // 256.00000000Ƀ

Currency::currency("USD")-&amp;gt;format(123456789)    // $123,456,789.00
Currency::currency("EUR")-&amp;gt;format(123456789)    // 123.456.789,00 €
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Available Currencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AED - د.إ.‏
AFN - ؋
ALL - Lek
AMD - ֏
ANG - ƒ
AOA - Kz
ARS - $
AUD - $
AWG - ƒ
AZN - ₼
BAM - КМ
BBD - $
BDT - ৳
BGN - лв.
BHD - د.ب.‏
BIF - FBu
BMD - $
BND - $
BOB - Bs
BRL - R$
BSD - $
BTC - Ƀ
BTN - Nu.
BWP - P
BYR - р.
BYN - р.
BZD - BZ$
CAD - $
CDF - FC
CHF - CHF
CLP - $
CNY - ¥
COP - $
CRC - ₡
CUC - CUC
CUP - $MN
CVE - $
CZK - Kč
DJF - Fdj
DKK - kr.
DOP - RD$
DZD - د.ج.‏
EGP - ج.م.‏
ERN - Nfk
ETB - ETB
EUR - €
FJD - $
FKP - £
GBP - £
GEL - GEL
GHS - ₵
GIP - £
GMD - D
GNF - FG
GTQ - Q
GYD - $
HKD - HK$
HNL - L.
HRK - kn
HTG - G
HUF - Ft
IDR - Rp
ILS - ₪
INR - ₹
IQD - د.ع.‏
IRR - ﷼
ISK - kr.
JMD - J$
JOD - د.ا.‏
JPY - ¥
KES - KSh
KGS - сом
KHR - ៛
KMF - CF
KPW - ₩
KRW - ₩
KWD - د.ك.‏
KYD - $
KZT - ₸
LAK - ₭
LBP - ل.ل.‏
LKR - ₨
LRD - $
LSL - M
LYD - د.ل.‏
MAD - د.م.‏
MDL - lei
MGA - Ar
MKD - ден.
MMK - K
MNT - ₮
MOP - MOP$
MRO - UM
MTL - ₤
MUR - ₨
MVR - MVR
MWK - MK
MXN - $
MYR - RM
MZN - MT
NAD - $
NGN - ₦
NIO - C$
NOK - kr
NPR - ₨
NZD - $
OMR - ﷼
PAB - B/.
PEN - S/.
PGK - K
PHP - ₱
PKR - ₨
PLN - zł
PYG - ₲
QAR - ﷼
RON - L
RSD - Дин.
RUB - ₽
RWF - RWF
SAR - ﷼
SBD - $
SCR - ₨
SDD - LSd
SDG - £‏
SEK - kr
SGD - $
SHP - £
SLL - Le
SOS - S
SRD - $
STD - Db
SVC - ₡
SYP - £
SZL - E
THB - ฿
TJS - TJS
TMT - m
TND - د.ت.‏
TOP - T$
TRY - ₺
TTD - TT$
TVD - $
TWD - NT$
TZS - TSh
UAH - ₴
UGX - USh
USD - $
UYU - $U
UZS - сўм
VEB - Bs.
VEF - Bs. F.
VND - ₫
VUV - VT
WST - WS$
XAF - F
XCD - $
XBT - Ƀ
XOF - F
XPF - F
YER - ﷼
ZAR - R
ZMW - ZK
WON - ₩
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#contributing"&gt;
  &lt;/a&gt;
  Contributing
&lt;/h2&gt;

&lt;p&gt;Please see &lt;a href="//CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/magarrent"&gt;Marc Garcia Torrent (Kodio Technologies)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/smirzaei/currency-formatter"&gt;Soroush Mirzaei - NPM Currency list JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/magarrent/laravel-currency-formatter/contributors"&gt;All Contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;p&gt;If you discover any security-related issues, use the issue tracker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;The MIT License (MIT). Please see &lt;a href="///LICENSE.md"&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
    </item>
  </channel>
</rss>
