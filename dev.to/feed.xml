<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Improve Your Engineering Pipeline with Value Streams w/ Helen Beal</title>
      <author>Conor Bronsdon</author>
      <pubDate>Mon, 26 Jul 2021 17:23:16 +0000</pubDate>
      <link>https://dev.to/linearb/improve-your-engineering-pipeline-with-value-streams-w-helen-beal-f40</link>
      <guid>https://dev.to/linearb/improve-your-engineering-pipeline-with-value-streams-w-helen-beal-f40</guid>
      <description>&lt;p&gt;Software development and delivery are critical. But how do you determine what value you get from all of that investment?&lt;/p&gt;

&lt;p&gt;Value Stream Management helps companies improve, monitor, and manage value so they can better visualize how work flows from idea to realization. &lt;/p&gt;

&lt;p&gt;On this week's episode of &lt;a href="https://open.spotify.com/episode/3UsLqEe5xYeS4GaBLjtQR2"&gt;Dev Interrupted&lt;/a&gt;, we interview Helen Beal, Chair of the VSM Consortium, DevOps coach, author and "flowologist", to understand her research on Value Stream Management. Helen's research can also be found &lt;a href="https://www.vsmconsortium.org/research"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3UsLqEe5xYeS4GaBLjtQR2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What is Value Stream Management?&lt;/li&gt;
&lt;li&gt;How companies can best utilize VSM in their engineering pipeline&lt;/li&gt;
&lt;li&gt;What is the VSM Consortium and what are its goals?&lt;/li&gt;
&lt;li&gt;Technical writing as a force multiplier in your career&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1400 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s1WHPiQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrzc51hhz30s20dxabmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s1WHPiQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrzc51hhz30s20dxabmw.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>valuestreammanagement</category>
      <category>engineeringpipeline</category>
      <category>technicalwriting</category>
      <category>devops</category>
    </item>
    <item>
      <title>Awesome JavaScript Posts (Week 28)</title>
      <author>Palash Mondal</author>
      <pubDate>Mon, 26 Jul 2021 17:16:44 +0000</pubDate>
      <link>https://dev.to/palashmon/awesome-javascript-posts-week-28-2i48</link>
      <guid>https://dev.to/palashmon/awesome-javascript-posts-week-28-2i48</guid>
      <description>&lt;p&gt;Here is a curated list of the latest posts, blogs and repositories related to &lt;strong&gt;JavaScript&lt;/strong&gt; from last week (week 28). I hope you will find it useful and it will help you to gain more knowledge about what's latest happening in the world of JavaScript.&lt;/p&gt;

&lt;p&gt;Let's start!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-building-a-dynamic-header-with-intersection-observer"&gt;
  &lt;/a&gt;
  1. Building A Dynamic Header With Intersection Observer
&lt;/h3&gt;

&lt;p&gt;Have you ever needed to build a UI where some component on the page needs to respond to elements as they’re scrolled to a certain threshold within the viewport — or perhaps in and out of the viewport itself? In JavaScript, attaching an event listener to constantly fire a callback on the scroll can be &lt;strong&gt;performance-intensive&lt;/strong&gt;, and if used unwisely, can make for a sluggish user experience. But there is a better way with &lt;strong&gt;Intersection Observer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://www.smashingmagazine.com/2021/07/dynamic-header-intersection-observer/"&gt;dynamic-header-intersection-observer&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-ultimate-guide-to-browserside-storage"&gt;
  &lt;/a&gt;
  2. The Ultimate Guide to Browser-Side Storage
&lt;/h3&gt;

&lt;p&gt;Browsers have evolved over the past three decades so it’s not surprising they offer a multitude of storage APIs which essentially do the same thing. It’s not always easy to find the *best *option and you may have to combine several depending on the functionality you’re implementing. Here is the ultimate guide to browser-side storage. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://blog.openreplay.com/the-ultimate-guide-to-browser-side-storage"&gt;the-ultimate-guide-to-browser-side-storage&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-freelance-react-developer-checklist"&gt;
  &lt;/a&gt;
  3. Freelance React Developer Checklist
&lt;/h3&gt;

&lt;p&gt;Essentially this checklist makes your &lt;strong&gt;onboarding as a React freelance developer&lt;/strong&gt; more seaming-less when entering a new project and team because before a company can &lt;strong&gt;hire you as a React freelancer&lt;/strong&gt;, both sides need to talk through this checklist to get their requirements aligned.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://www.robinwieruch.de/freelance-react-developer"&gt;freelance-react-developer&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-vue-3-migration-build-safely-upgrade-your-app-to-vue-3-pt-1"&gt;
  &lt;/a&gt;
  4. Vue 3 Migration Build: safely upgrade your app to Vue 3 (Pt. 1)
&lt;/h3&gt;

&lt;p&gt;The Vue team has recently released the highly anticipated migration build for Vue 3. If you’ve been thinking about upgrading your &lt;strong&gt;Vue 2 app to Vue 3&lt;/strong&gt;, this is what you need. The process of upgrading an app to the latest version of the framework can be a daunting task. This article series is created to make that process &lt;strong&gt;&lt;em&gt;easier&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://www.vuemastery.com/blog/vue-3-migration-build/"&gt;vue-3-migration-build&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-how-to-migrate-from-jquery-to-nextjs"&gt;
  &lt;/a&gt;
  5. How To Migrate From jQuery To Next.js
&lt;/h3&gt;

&lt;p&gt;In this article, we’re taking a closer look at different approaches and strategies on how we can migrate a web application that uses the &lt;strong&gt;jQuery&lt;/strong&gt; framework, and start using one of the coolest &lt;strong&gt;React&lt;/strong&gt; frameworks in the market: Next.js.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://www.smashingmagazine.com/2021/07/migrate-jquery-nextjs/"&gt;migrate-jquery-nextjs&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-new-tailwind-app-cli"&gt;
  &lt;/a&gt;
  6. New Tailwind App CLI
&lt;/h3&gt;

&lt;p&gt;A zero-configuration cross-platform Node.js based CLI that generates boilerplate code for different tailwind web applications. Set up a tailwind app with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# install the CLI globally&lt;/span&gt;
&lt;span class="s"&gt;npm install -g new-tailwind-app&lt;/span&gt;

&lt;span class="c1"&gt;# use it with npx (recommended)&lt;/span&gt;
&lt;span class="s"&gt;npx new-tailwind-app [app_name] --flag&lt;/span&gt;

&lt;span class="c1"&gt;# create a react.js tailwind app&lt;/span&gt;
&lt;span class="s"&gt;npx new-tailwind-app [app_name] --react&lt;/span&gt;

&lt;span class="c1"&gt;# create a react.js tailwind app with prettier&lt;/span&gt;
&lt;span class="s"&gt;npx new-tailwind-app [app_name] --react --prettier&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Link: &lt;a href="https://github.com/msaaddev/new-tailwind-app"&gt;new-tailwind-app&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-using-redis-with-nodejs"&gt;
  &lt;/a&gt;
  7. Using Redis with Node.js
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt; is a super fast and efficient in-memory, key-value cache and store. It’s also known as a data structure server, as the keys can contain strings, lists, sets, hashes and other data structures. This tutorial explains basic Redis data structures and interactions, as well as several common use cases using the &lt;strong&gt;node-redis&lt;/strong&gt; library.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://www.sitepoint.com/using-redis-node-js/"&gt;using-redis-node-js&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-how-to-convert-arrays-to-humanreadable-lists-in-javascript"&gt;
  &lt;/a&gt;
  8. How to convert arrays to human-readable lists in JavaScript
&lt;/h3&gt;

&lt;p&gt;Oftentimes, you might end up in situations where you have an array and you just want to deflate the entire array content in a &lt;strong&gt;human-readable form&lt;/strong&gt;. Or more specifically in a &lt;strong&gt;list-like format&lt;/strong&gt;. This tutorial explains how would you achieve this.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://www.amitmerchant.com/how-to-convert-arrays-to-human-readable-lists-in-javascript/"&gt;convert-arrays-to-human-readable-lists-in-javascript&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-how-to-structure-a-large-scale-vuejs-application"&gt;
  &lt;/a&gt;
  9. How to Structure a Large Scale Vue.js Application
&lt;/h3&gt;

&lt;p&gt;What is the best way to structure a &lt;strong&gt;Vue.js application&lt;/strong&gt; so that it scales and remains maintainable and extendable the more it grows? This is a question that I've heard on numerous occasions and I think one answer to that question lies in the &lt;strong&gt;principle of predictability&lt;/strong&gt;. When it comes to creating a scalable project you want everything about it to be as predictable as possible.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://vueschool.io/articles/vuejs-tutorials/how-to-structure-a-large-scale-vue-js-application/"&gt;structure-a-large-scale-vue-js-application&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-the-road-to-ember-40"&gt;
  &lt;/a&gt;
  10. The Road to Ember 4.0
&lt;/h3&gt;

&lt;p&gt;In his EmberConf 2021 keynote, Yehuda shared a name for Ember's next edition: &lt;strong&gt;Polaris&lt;/strong&gt;. In order to unblock Polaris providing the best, most productive experience the Ember project can build, we're going to remove already-deprecated APIs in a 4.0 release. &lt;strong&gt;Ember 4.0 will be released around September 20th&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://blog.emberjs.com/the-road-to-ember-4-0/"&gt;the-road-to-ember-4-0&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you have read or found a quality post or blog recently related to JavaScript that you will like to be included in the GitHub repository, then please submit a PR here: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/palashmon/awesome-js-posts"&gt;https://github.com/palashmon/awesome-js-posts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, if you liked this article, be sure to ❤ it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy Coding!
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Loopple v0.1.0 Beta - Multiple Pages Drag and Drop Dashboard Builder</title>
      <author>rarestoma</author>
      <pubDate>Mon, 26 Jul 2021 16:59:07 +0000</pubDate>
      <link>https://dev.to/rarestoma/loopple-v0-1-0-beta-multiple-pages-drag-and-drop-dashboard-builder-f68</link>
      <guid>https://dev.to/rarestoma/loopple-v0-1-0-beta-multiple-pages-drag-and-drop-dashboard-builder-f68</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;It's been 3 months since I am working on Loopple, a Drag and Drop Dashboard Builder. Today I made a new update and the biggest feature is the option to add multiple pages to your dashboard. 🚀&lt;/p&gt;

&lt;p&gt;Now I am looking for feedback to see what do you think about the structure of the pages and if you find it easy to use. You can try this here: &lt;a href="https://www.loopple.com/"&gt;loopple&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This update also comes with the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add option to remove elements using Delete/Backspace button&lt;/li&gt;
&lt;li&gt;Change sidebar grid sections design&lt;/li&gt;
&lt;li&gt;Add actions for tables: "add new row" &amp;amp; "add new column"&lt;/li&gt;
&lt;li&gt;Add Loopple logo&lt;/li&gt;
&lt;li&gt;General style changes&lt;/li&gt;
&lt;li&gt;General design &amp;amp; bugs issues fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any feedback is very helpful and highly appreciated.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>ReactJS, nodejs, Javascript,c++ Project For Beginners</title>
      <author>coders</author>
      <pubDate>Mon, 26 Jul 2021 16:54:27 +0000</pubDate>
      <link>https://dev.to/coderzway/projects-for-beginners-reactjs-nodejs-javascript-c-project-are-included-448e</link>
      <guid>https://dev.to/coderzway/projects-for-beginners-reactjs-nodejs-javascript-c-project-are-included-448e</guid>
      <description>&lt;h3&gt;1.  Nodejs Project&lt;br&gt;&lt;br&gt;
&lt;/h3&gt;
&lt;br&gt;&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable web applications.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/36YTCSA"&gt;Nodejs Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;2. ReactJS project&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;Aiming to master front-end frameworks? Start learning &lt;span&gt;ReactJS &lt;/span&gt;diligently and look forward to a great career in programming. The best way to move forward is to start building ReactJS projects for beginners and get hands-on with ReactJS.&lt;/p&gt;
&lt;p&gt;By working on smaller real-life projects, you can master theoretical concepts and get ready for the professional development challenges. Once you have successfully deployed your &lt;em&gt;ReactJS&lt;/em&gt; apps you can present those achievements to your future employers and get your dream job.&lt;/p&gt;
&lt;p&gt;Building &lt;span&gt;ReactJS projects for beginners&lt;/span&gt; will not only allow you to strengthen up React skills but also will help you explore your creative sides as a developer. Also, it will make you familiar with &lt;span&gt;React developer tools&lt;/span&gt; and react ecosystem for each project as per the need for that project.&lt;/p&gt;
&lt;p&gt;React project development is a self-directed process. You’ll have to learn on a trial and error basis. Unlike the basics of React via online learning materials, there’ll not be much to guide you on building React projects.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/2TCFknJ"&gt;ReactJS project for beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;3.AngularJS Project&lt;/h3&gt;
&lt;p&gt;Presenting the best angular projects for beginners list that will prepare you well with the basics and practical needs in angular development. Mentioning your experience in Angular projects can make your resume stand apart from other candidates.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/3i3AVDr"&gt;AngularJS Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;4. C++ Project For Beginners&lt;/h3&gt;
&lt;p&gt;C++ was built as an extension to C and gave programmers a high control over memory and system resources. If you know any other programming language, C++ will be easy to learn. Even otherwise, C++ is a friendly language, and you can learn it through some hands-on projects and practice.&lt;/p&gt;
&lt;p&gt;This article lists 10 C++ projects of different levels, which will help you appreciate the language more. You can also try many other similar projects. For example, one of our projects is Bookshop inventory management. You can try a library management system as well on the same lines. Again, similar to the railway ticket reservation system, you can try out the Bus ticket reservation system.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://www.codelivly.com/top-c-project-for-beginners/"&gt;C++ Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;5. JavaScript&lt;/p&gt;
&lt;p&gt;Today, the key to learning JavaScript or any other programming language for that matter requires you to invest a lot of time and effort into developing a lot of projects.&lt;/p&gt;
&lt;p&gt;Let us assume that you have a limited amount of time and you want to create JavaScript projects that you haven’t worked on before. And working on new ideas and projects is necessary because if you keep doing stuff that you already understand, you won’t be making much progress against your long-term programming ambitions.&lt;/p&gt;
&lt;p&gt;At the very same time, you want to select tasks that are not too complicated. The key is to find a proposed project that’s just a little above your current ability level.&lt;/p&gt;
&lt;p&gt;Your goal, then, should be to start small and set reasonable milestones for your learning journey. The last thing you want is to launch an ambitious project and end up feeling discouraged when you’re stuck with it. And believe us when we say this, it happens a lot.&lt;/p&gt;
&lt;p&gt;It is a web developer’s job to stay in touch with all the latest trends, as well as all the essential frameworks and libraries. It is also possible that you just got done with your JavaScript course and want to put your learning into practice. Either, we understand your needs and thus have created a compelling list of some of the best &lt;span&gt;JavaScript projects for beginners&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/3eZUpHf"&gt;Javascript Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



</description>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>JavaScript 'this' - Four rules to know</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 26 Jul 2021 16:51:01 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/javascript-this-four-rules-to-know-fhd</link>
      <guid>https://dev.to/ubahthebuilder/javascript-this-four-rules-to-know-fhd</guid>
      <description>&lt;p&gt;When you use &lt;code&gt;this&lt;/code&gt; in your code, it automatically resolves to an object or scope depending on the context at which is was defined.&lt;/p&gt;

&lt;p&gt;But what are those possible contexts a &lt;code&gt;this&lt;/code&gt; call can refer to? Additionally, how can we use that information to find out which object a &lt;code&gt;this&lt;/code&gt; call will resolve to? Let's find out!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-context"&gt;
  &lt;/a&gt;
  this Context
&lt;/h3&gt;

&lt;p&gt;When used in a function, the &lt;code&gt;this&lt;/code&gt; keyword simply points to an object which it is bound to. In simple terms, it answers the question of where it should get some value or data from:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is calling&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the function above, the &lt;code&gt;this&lt;/code&gt; keyword is simply referring to an object to which it is bound to access the "name" property from it.&lt;/p&gt;

&lt;p&gt;But how do you know what object or scope the function is bound to? How do you make out what &lt;code&gt;this&lt;/code&gt; is referring to?&lt;/p&gt;

&lt;p&gt;To unravel that, we need to understand the various binding rules that guide the &lt;code&gt;this&lt;/code&gt; behavior.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-binding-in-javascript"&gt;
  &lt;/a&gt;
  Types of Binding in JavaScript
&lt;/h3&gt;

&lt;p&gt;Generally, there are four kinds of bindings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Default Binding&lt;/li&gt;
&lt;li&gt;Implicit Binding&lt;/li&gt;
&lt;li&gt;Explicit Binding&lt;/li&gt;
&lt;li&gt;Constructor Call Binding&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#default-binding-in-javascript"&gt;
  &lt;/a&gt;
  Default Binding in JavaScript
&lt;/h3&gt;

&lt;p&gt;One of the first rules to remember is that if the function housing a &lt;code&gt;this&lt;/code&gt; reference is a standalone function, then that function is bound to the global object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is calling&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kingsley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Kingsley is calling&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;name()&lt;/code&gt; is a standalone, unattached function. As per the rule, it is bound to the global scope. Hence, the this.name reference resolves to the global variable const name = 'Kingsley'.&lt;/p&gt;

&lt;p&gt;This rule, however, doesn't hold if &lt;code&gt;name()&lt;/code&gt; were to be defined in strict mode as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is calling&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kingsley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// TypeError: `this` is `undefined`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#implicit-binding-in-javascript"&gt;
  &lt;/a&gt;
  Implicit Binding in JavaScript
&lt;/h3&gt;

&lt;p&gt;Another scenario to look out for is whether the function is attached to an object (its context) at the call site.&lt;/p&gt;

&lt;p&gt;According to the binding rule in JavaScript, a function can use an object as its context only if that object is bound to it at the call site. This form of binding is known as implicit binding.&lt;/p&gt;

&lt;p&gt;Here is what I mean by that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; years old&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 22 years old&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Put simply, when you call a function using dot notation, this is implicitly bound to the object the function is being called from.&lt;/p&gt;

&lt;p&gt;In this example, since alert is being called from myObj, the this keyword is bound to myObj. So when alert is called with myObj.alert(), this.age is 22, which is the age property of myObj.&lt;/p&gt;

&lt;p&gt;Let's look at another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; years old&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;nestedObj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nestedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 26 years old&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, because &lt;code&gt;alert&lt;/code&gt; is ultimately being called from nestedObj, &lt;code&gt;this&lt;/code&gt; is implicitly bound to &lt;code&gt;nestedObj&lt;/code&gt; instead of &lt;code&gt;myObj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An easy way to figure out which object this is implicitly bound to is to look at which object is to the left of the dot (.):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; years old&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;nestedObj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// `this` is bound to `myObj` -- 22 years old&lt;/span&gt;
&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nestedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// `this` is bound to `nestedObj` -- 26 years old&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explicit-binding-in-javascript"&gt;
  &lt;/a&gt;
  Explicit binding in JavaScript
&lt;/h3&gt;

&lt;p&gt;We saw that implicit binding had to do with having a reference in that object.&lt;/p&gt;

&lt;p&gt;But what if we want to force a function to use an object as its context without putting a property function reference on the object?&lt;/p&gt;

&lt;p&gt;We have two utility methods to achieve this: &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;apply()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Along with a couple other set of utility functions, these two utilities are available to all functions in JavaScript via the &lt;code&gt;[[Prototype]]&lt;/code&gt; mechanism.&lt;/p&gt;

&lt;p&gt;To explicitly bind a function call to a context, you simply have to invoke the &lt;code&gt;call()&lt;/code&gt; on that function and pass in the context object as parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; years old&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 22 years old&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now here's the fun part. Even if you were to pass around that function multiple times to new variables (currying), every invocation will use the same context because it has been locked (explicitly bound) to that object. This is called hard binding.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 22&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 22 &lt;/span&gt;
&lt;span class="c1"&gt;// a hard-bound `bar` can no longer have its `this` context overridden &lt;/span&gt;
&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// still 22&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hard binding is a perfect way to lock a context into a function call and truly make that function into a method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#constructor-call-binding-in-javascript"&gt;
  &lt;/a&gt;
  Constructor Call Binding in JavaScript
&lt;/h3&gt;

&lt;p&gt;The final and perhaps most interesting kind of binding is the &lt;code&gt;new&lt;/code&gt; binding which also accentuates the unusual behaviour of JavaScript in comparison to other class-based languages.&lt;/p&gt;

&lt;p&gt;When a function is invoked with the &lt;code&gt;new&lt;/code&gt; keyword in front of it, otherwise known as a constructor call, the following things occur:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A brand new object is created (or constructed)&lt;/li&gt;
&lt;li&gt;The newly constructed object is [[Prototype]]-linked to the function that constructed it&lt;/li&gt;
&lt;li&gt;The newly constructed object is set as the this binding for that function call.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see this in code to get a better understanding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;giveAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;giveAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 22&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By calling giveAge(...) with new in front of it, we’ve constructed a new object and set that new object as the this for the call of foo(...). So new is the final way that you can bind a function call’s this .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  SUMMARY
&lt;/h3&gt;

&lt;p&gt;To summarize, the this keyword, when used in a function, binds that function to a context object.&lt;/p&gt;

&lt;p&gt;There are four kinds of bindings: default binding, implicit binding, explicit binding and constructor call binding (new).&lt;/p&gt;

&lt;p&gt;Knowing these four rules will help you easily discern the context for a &lt;code&gt;this&lt;/code&gt; reference.&lt;/p&gt;

&lt;p&gt;I hope you got something valuable from this article. If you are learning JavaScript, here are some other articles that might interest you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ubahthebuilder.tech/complete-web-development-roadmap-for-newbies"&gt;Web Development roadmap for beginners&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ubahthebuilder.tech/50-web-development-terms-all-programmers-should-know"&gt;50 Web Development terms to know&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ubahthebuilder.tech/introduction-to-asynchronous-programming-with-javascript"&gt;Introduction to Asynchronous Programming in JavaScript&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading and see you soon.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P/S: If you are learning JavaScript, I created an eBook which teaches 50 topics in JavaScript with hand-drawn digital notes. Check it out &lt;a href="//gum.co/js-50"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Code-fi to Chill your Mood</title>
      <author>Rahul Khinchi</author>
      <pubDate>Mon, 26 Jul 2021 16:47:15 +0000</pubDate>
      <link>https://dev.to/rk7/coding-lofi-to-chill-your-frustration-1o2j</link>
      <guid>https://dev.to/rk7/coding-lofi-to-chill-your-frustration-1o2j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-lofi-music"&gt;
  &lt;/a&gt;
  What is Lo-fi Music?
&lt;/h1&gt;

&lt;p&gt;Lo-fi (aka low-fi; short for low fidelity) is a music or production quality in which elements usually regarded as imperfections of a performance are audible, sometimes as a deliberate aesthetic choice.&lt;br&gt;
 The standards of sound quality (fidelity) and music production have evolved throughout the decades, meaning that some older examples of lo-fi may not have been originally recognized as such. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lofi-and-coding"&gt;
  &lt;/a&gt;
  Lo-fi and Coding
&lt;/h2&gt;

&lt;p&gt;Lo-Fi mixes are often used as relaxing ambient music that can be left open on the side while you work on a project, or played in the background at the end of a long day to recharge. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nuMk7hzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ps9mfc7ch7woufk58yuv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nuMk7hzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ps9mfc7ch7woufk58yuv.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reason-for-listening-lofi"&gt;
  &lt;/a&gt;
  Reason for listening Lo-fi?
&lt;/h1&gt;

&lt;p&gt;Coding can become your best friend but sometimes while solving questions, you get frustrated when you don't get the optimized algorithm to solve the question and at that place, Lo-fi helps to get calm and enjoy the process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lofi-isnt-only-for-coding-but-for-every-mood"&gt;
  &lt;/a&gt;
  Lo-fi isn't only for Coding but for every mood.
&lt;/h3&gt;

&lt;p&gt;Some are:&lt;br&gt;
Hustle Lo-fi&lt;br&gt;
Coding Lo-fi&lt;br&gt;
Study or Focus Lo-fi&lt;br&gt;
Sad Mood Lo-fi&lt;br&gt;
3 am Lo-fi&lt;br&gt;
Happy Lo-fi&lt;br&gt;
Chill beat Lo-fi&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-best-lofi-music-for-coding"&gt;
  &lt;/a&gt;
  Some best Lo-fi Music for Coding:
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Spotify Playlist: Click &lt;a href="https://open.spotify.com/playlist/6Q3Qo3XxSj5Cu9pQJlBfzG"&gt;HERE&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;YouTube:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=f02mOEt11OQ"&gt;Code-fi&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=bmVKaAV_7-A"&gt;3am&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=_ITiwPMUzho"&gt;Chill-Beats&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Personal Favourite: &lt;a href="https://www.youtube.com/watch?v=DvPtvfJ1_EU"&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more Genre: Try searching on YouTube for eg:&lt;br&gt;
Sad mood lo-fi, coding lo-fi, sleep lo-fi, frustrated lo-fi.&lt;/p&gt;

</description>
      <category>news</category>
      <category>codenewbie</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>#6) What is NaN property in JavaScript❓</title>
      <author>Mayank Yadav</author>
      <pubDate>Mon, 26 Jul 2021 16:39:20 +0000</pubDate>
      <link>https://dev.to/myk/6-what-is-nan-property-in-javascript-53of</link>
      <guid>https://dev.to/myk/6-what-is-nan-property-in-javascript-53of</guid>
      <description>&lt;h1&gt;
  &lt;a href="#-raw-nan-not-a-number-endraw-"&gt;
  &lt;/a&gt;
  🚀&lt;code&gt;NaN : Not a Number&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;✔So basically it means that the value should not be a legal number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1d--mTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kex9njte1rprxkrftrio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1d--mTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kex9njte1rprxkrftrio.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
💠Some Examples for better understanding👇&lt;/p&gt;

&lt;p&gt;✔For checking if a value is NaN, we use isNaN() function. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5Eng6Si--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dolzbjt36324x53pythl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5Eng6Si--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dolzbjt36324x53pythl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⚠##Note:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%9C%94-raw-nan-first-converts-it-into-a-number-type-and-then-compares-or-equates-to-nan-endraw-"&gt;
  &lt;/a&gt;
  ✔&lt;code&gt;NaN first converts it into a number type and then compares or equates to NaN&lt;/code&gt;.
&lt;/h3&gt;




</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Partition and Clustering Key on Scylla DB</title>
      <author>João Victor Martins</author>
      <pubDate>Mon, 26 Jul 2021 16:33:57 +0000</pubDate>
      <link>https://dev.to/j_a_o_v_c_t_r/partition-and-clustering-key-on-scylla-db-1l1e</link>
      <guid>https://dev.to/j_a_o_v_c_t_r/partition-and-clustering-key-on-scylla-db-1l1e</guid>
      <description>&lt;p&gt;In the last 2 previous posts, we talked about &lt;em&gt;Scylla DB&lt;/em&gt;. Today I will keep talking about the database, more specifically how works &lt;em&gt;Primary Key&lt;/em&gt; on &lt;em&gt;Scylla&lt;/em&gt;. We will see that the &lt;em&gt;PK&lt;/em&gt; can be divided into two: &lt;em&gt;Partition Key&lt;/em&gt; and &lt;em&gt;Clustering Key&lt;/em&gt;. Let's get the difference between both and some differences in relation to a relational database.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#partition-key"&gt;
  &lt;/a&gt;
  Partition Key
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Partition Key&lt;/em&gt; is responsible for data distribution across the nodes. It determines which node will store a given row. It can be one or more columns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uc5Jp6jX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v48jx4qqwsxk6908dlge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uc5Jp6jX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v48jx4qqwsxk6908dlge.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#clustering-key"&gt;
  &lt;/a&gt;
  Clustering Key
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Clustering Key&lt;/em&gt; is responsible for sorting the rows within the partition. It can be zero or more columns.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem-of-car-table"&gt;
  &lt;/a&gt;
  The problem of Car Table
&lt;/h1&gt;

&lt;p&gt;Now that we know the difference about the &lt;em&gt;Composites Keys&lt;/em&gt;, let's remember how we modeling our &lt;em&gt;PK&lt;/em&gt; in Car table. In the &lt;em&gt;cqlsh&lt;/em&gt; after selecting the &lt;em&gt;Keyspace&lt;/em&gt;, use the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DESCRIBE car
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result will be.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE automobilies.car (
    id uuid PRIMARY KEY,
    brand text,
    color text,
    model text
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'ALL'}
    AND comment = ''
    AND compaction = {'class': 'SizeTieredCompactionStrategy'}
    AND compression = {'sstable_compression': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99.0PERCENTILE';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How we can see, the unique &lt;em&gt;PK&lt;/em&gt; that we have is &lt;em&gt;id&lt;/em&gt; and could be calling of &lt;em&gt;Simple Primary Key&lt;/em&gt;. If we do a &lt;em&gt;select&lt;/em&gt; in the database, will retrieve only one car&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; select * from car;

 id                                   | brand | color | model
--------------------------------------+-------+-------+-------
 f714e8e5-b160-4341-807d-f4cd92b973a4 |    VW |   Red |  Golf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To improve our test, let's include more cars in the table. The same &lt;em&gt;model&lt;/em&gt; of car will have the same &lt;em&gt;id&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (e0625c94-e9c2-11eb-9a03-0242ac130003, 'Ford', 'Red', 'Focus');
cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (fbd04f2c-511a-43c5-b588-9e29ebcb5d7a, 'VW', 'Nardo Grey', 'Passat');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now the &lt;em&gt;select&lt;/em&gt; clause result in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; id                                   | brand | color      | model
--------------------------------------+-------+------------+--------
 fbd04f2c-511a-43c5-b588-9e29ebcb5d7a |    VW | Nardo Grey | Passat
 e0625c94-e9c2-11eb-9a03-0242ac130003 |  Ford |        Red |  Focus
 f714e8e5-b160-4341-807d-f4cd92b973a4 |    VW |        Red |   Golf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to find just a Golf car, we can query by &lt;em&gt;id&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; select * from car where id = f714e8e5-b160-4341-807d-f4cd92b973a4;

 id                                   | brand | color | model
-------------------------------------------+-------+-------+-------
 f714e8e5-b160-4341-807d-f4cd92b973a4 |    VW |   Red |  Golf

(1 rows)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what happening if we want to query by &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;color&lt;/em&gt;? Well, maybe just need to add the &lt;em&gt;and&lt;/em&gt; in the query and choose &lt;em&gt;color&lt;/em&gt;, right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; select * from car where id = f714e8e5-b160-4341-807d-f4cd92b973a4 and color = 'Red';

InvalidRequest: Error from server: code=2200 [Invalid query] message="Cannot execute this query as it might involve data filtering and thus may have unpredictable performance. If you want to execute this query despite the performance unpredictability, use ALLOW FILTERING"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like we can see, when add &lt;em&gt;color&lt;/em&gt;, we get an error, but why? &lt;br&gt;
To answer this question, we need to understand how &lt;em&gt;Scylla&lt;/em&gt; saves data &lt;em&gt;(I will use an example with another domain)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g423RzAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as7d3eshh5i5qtg4q8ho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g423RzAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as7d3eshh5i5qtg4q8ho.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the image above, we see that &lt;em&gt;Scylla&lt;/em&gt; uses a &lt;em&gt;PK&lt;/em&gt; to divide the partitions. When we use just &lt;em&gt;id&lt;/em&gt; for query, &lt;em&gt;Scylla&lt;/em&gt; knows exactly which node contains the data by hashing the ID (which is the partition key) and that is why we got results in the first query. In the second query, when we tried to filter for &lt;em&gt;color&lt;/em&gt;, wasn't possible, because we not defined &lt;em&gt;color&lt;/em&gt; as &lt;em&gt;Clustering Key&lt;/em&gt; or as &lt;em&gt;Partition Key&lt;/em&gt;. We would still know on which partition the data exists because we have the partition key, but we would have to do a linear scan of the entire data on that partition to find the specific row we are looking for &lt;em&gt;(using ALLOW FILTERING)&lt;/em&gt;, but performing this query would be inefficient and possibly very slow. To use &lt;em&gt;ALLOW FILTERING&lt;/em&gt; is like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; select * from car where id = f714e8e5-b160-4341-807d-f4cd92b973a4 and color = 'Red' ALLOW FILTERING;

 id                                   | brand | color | model
-------------------------------------------+-------+-------+-------
 f714e8e5-b160-4341-807d-f4cd92b973a4 |    VW |   Red |  Golf

(1 rows)


cqlsh:automobilies&amp;gt; select * from car where id = f714e8e5-b160-4341-807d-f4cd92b973a4 and color = 'Green' ALLOW FILTERING;

--------MORE---
(0 rows)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How we saw, this it's not good, so let's improve our data modeling. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#remodeling-car-table"&gt;
  &lt;/a&gt;
  Remodeling Car Table
&lt;/h1&gt;

&lt;p&gt;We should know for which attributes we will want to query to define our keys. How we want a query for &lt;em&gt;color&lt;/em&gt; and &lt;em&gt;id&lt;/em&gt;, both will be our &lt;em&gt;Pk&lt;/em&gt;, being &lt;em&gt;id&lt;/em&gt; a &lt;em&gt;Partition Key&lt;/em&gt; and &lt;em&gt;color&lt;/em&gt; a &lt;em&gt;Clustering Key&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; CREATE TABLE car (id uuid, brand text, color text, model text, PRIMARY KEY (id, color));

cqlsh:automobilies&amp;gt; DESCRIBE car;

CREATE TABLE automobilies.car (
    id uuid,
    color text,
    brand text,
    model text,
    PRIMARY KEY (id, color)
) WITH CLUSTERING ORDER BY (color ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'ALL'}
    AND comment = ''
    AND compaction = {'class': 'SizeTieredCompactionStrategy'}
    AND compression = {'sstable_compression': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99.0PERCENTILE';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have a &lt;em&gt;Clustering Key&lt;/em&gt; we can &lt;em&gt;insert&lt;/em&gt; some cars with the same &lt;em&gt;id&lt;/em&gt;, but different colors and &lt;em&gt;Scylla&lt;/em&gt; will sort for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (f714e8e5-b160-4341-807d-f4cd92b973a4, 'VW', 'Red', 'Golf');
cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (e0625c94-e9c2-11eb-9a03-0242ac130003, 'Ford', 'Red', 'Focus');
cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (fbd04f2c-511a-43c5-b588-9e29ebcb5d7a, 'VW', 'Red', 'Passat');
cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (fbd04f2c-511a-43c5-b588-9e29ebcb5d7a, 'VW', 'Green', 'Passat');
cqlsh:automobilies&amp;gt; insert into car (id, brand, color, model) values (f714e8e5-b160-4341-807d-f4cd92b973a4, 'VW', 'Green', 'Golf');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our partition will stay like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8jafHfsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03hs5yfh3jox5mjic2fg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8jafHfsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03hs5yfh3jox5mjic2fg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thus we have the partitions divided for &lt;em&gt;id&lt;/em&gt; and rows of cars sorted by color&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; select * from car;

 id                                   | color | brand | model
-------------------------------------------+-------+-------+--------
 fbd04f2c-511a-43c5-b588-9e29ebcb5d7a | Green |    VW | Passat
 fbd04f2c-511a-43c5-b588-9e29ebcb5d7a |   Red |    VW | Passat
 e0625c94-e9c2-11eb-9a03-0242ac130003 |   Red |  Ford |  Focus
 f714e8e5-b160-4341-807d-f4cd92b973a4 | Green |    VW |   Golf
 f714e8e5-b160-4341-807d-f4cd92b973a4 |   Red |    VW |   Golf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we can query by &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;color&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cqlsh:automobilies&amp;gt; select * from car where id = fbd04f2c-511a-43c5-b588-9e29ebcb5d7a and color = 'Red';

 id                                   | color | brand | model
-------------------------------------------+-------+-------+--------
 fbd04f2c-511a-43c5-b588-9e29ebcb5d7a |   Red |    VW | Passat

(1 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In general, we saw how we define our &lt;em&gt;PK&lt;/em&gt; in &lt;em&gt;Scylla&lt;/em&gt;, can being &lt;em&gt;Partition Key&lt;/em&gt; and &lt;em&gt;Clustering Key&lt;/em&gt;. We need first think about our queries and after to model our tables. There are many others rules for work with these &lt;em&gt;PK's&lt;/em&gt;, but in a unique post is not possible to cover all subject matter. I recommend that you do the courses of &lt;a href="https://university.scylladb.com/"&gt;https://university.scylladb.com/&lt;/a&gt;. Well, this is what I wanted to introduce in this post, I really hope that you like it. Doubts, critics, and suggestions, I will be a disposition.  &lt;/p&gt;

</description>
      <category>database</category>
      <category>scylladb</category>
    </item>
    <item>
      <title>Migrating from promise chains to async-await and escaping the try catch hell</title>
      <author>AvishkarDalvi</author>
      <pubDate>Mon, 26 Jul 2021 16:22:55 +0000</pubDate>
      <link>https://dev.to/avishkardalvi/migrating-from-promise-chains-to-async-await-and-escaping-the-try-catch-hell-191l</link>
      <guid>https://dev.to/avishkardalvi/migrating-from-promise-chains-to-async-await-and-escaping-the-try-catch-hell-191l</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;async-await is a life saver when it comes to avoiding callback hell or the pyramid of doom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hell&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="nx"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;step2&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;step3&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// some code ...&lt;/span&gt;
         &lt;span class="p"&gt;})&lt;/span&gt;
       &lt;span class="p"&gt;})&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code can be written in a clean line-by-line format using async-await.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;heaven&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is great but when it comes to error handling this simplicity again goes for a toss because you end up with a try-catch tower of terror.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;towerOfTerror&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All your one-liners have now expanded to at least 5 lines of code.&lt;br&gt;
One easy way out would be to append the catch method to the end of each promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But that can still get repetitive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getBetter&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;step3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another option is to create a function that implements one try-catch to replace all the others. It will first resolve the promise and then return an array that has the first element as the data and the second element as an error. But if there is an error then the data is null and the error is defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
 &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can call this function in your code you can de-structure it to get a clean one-liner error handling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;error2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//or use the if statement if you want to handle the error differently&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;//do something&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Hosting Project Into Firebase</title>
      <author>Mochamad Rizky</author>
      <pubDate>Mon, 26 Jul 2021 16:11:25 +0000</pubDate>
      <link>https://dev.to/mochamadrizky/how-to-hosting-project-into-firebase-2cd1</link>
      <guid>https://dev.to/mochamadrizky/how-to-hosting-project-into-firebase-2cd1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-firebase-"&gt;
  &lt;/a&gt;
  What is Firebase ?
&lt;/h1&gt;

&lt;p&gt;Firebase is a service from Google that provides some convenience for developers in developing something in their application. By using firebase, we or developers can focus more on application development.&lt;/p&gt;

&lt;p&gt;In terms of service. in the past, Firebase provided its services on a trial, but at this time Firebase provides its services for free. But for free, it has its limitations in terms of features.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hosting-steps-on-firebase"&gt;
  &lt;/a&gt;
  Hosting Steps on Firebase
&lt;/h1&gt;

&lt;p&gt;For example, I am here create a folder called 'hostingFirebase' and in it, there is &lt;strong&gt;index.html&lt;/strong&gt; to display a message that hosting has been successful&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cw4SAlq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Srs5Xp8/Screen-Shot-2021-07-26-at-21-12-37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cw4SAlq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Srs5Xp8/Screen-Shot-2021-07-26-at-21-12-37.png" alt="hai"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-install-npm"&gt;
  &lt;/a&gt;
  1. Install NPM
&lt;/h2&gt;

&lt;p&gt;Install npm on your computer to make it easier to install the firebase-tools package. Firebase-tools, also known as Firebase CLI. is a tool to test, manage, and deploy our projects in the command line. to install npm you can visit the page &lt;a href="https://nodejs.org/en/download/"&gt;https://nodejs.org/en/download/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you have installed npm you can use &lt;code&gt;npm --version&lt;/code&gt; to check the version of npm and whether it was successfully installed&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2nZU_QB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/T8GBzwc/Screen-Shot-2021-07-26-at-21-26-45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2nZU_QB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/T8GBzwc/Screen-Shot-2021-07-26-at-21-26-45.png" alt="check version npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-install-firebasetools"&gt;
  &lt;/a&gt;
  2. Install Firebase-tools
&lt;/h2&gt;

&lt;p&gt;Now we install firebase-tools using npm. Here we install globally so that later it can be used without us installing every project that will be hosted.&lt;/p&gt;

&lt;p&gt;-g is the command to install globally&lt;br&gt;
type this command in terminal&lt;br&gt;
&lt;code&gt;npm install -g firebase-tools&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After you install firebase tools you can see the version of the global package you installed. You can use this command&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iTXVmWS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/8KNrm7m/Screen-Shot-2021-07-26-at-21-36-40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTXVmWS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/8KNrm7m/Screen-Shot-2021-07-26-at-21-36-40.png" alt="check global packages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-login-to-the-firebase-web-and-create-a-hosting-project"&gt;
  &lt;/a&gt;
  3. Login to the Firebase Web and Create a Hosting Project
&lt;/h2&gt;

&lt;p&gt;You can visit the firebase website at the following this link &lt;a href="https://firebase.google.com/"&gt;firebase&lt;/a&gt;. after you login, then you can see the button in the right corner next to your account profile, you can click the 'console' button&lt;/p&gt;

&lt;p&gt;After that, you will be presented with a screen like the following:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XkCk2Agd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/k8kz1SM/Screen-Shot-2021-07-26-at-21-49-56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkCk2Agd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/k8kz1SM/Screen-Shot-2021-07-26-at-21-49-56.png" alt="homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To start creating a project you can click the &lt;strong&gt;create project&lt;/strong&gt; button, and later it will be redirected to a page like this and you can fill in the project name as you like. But what you need to pay attention to is that the project name will usually be your domain name in Firebase. Click i accept the aggrement and continue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NgKCM1zh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/6chTJm7/Screen-Shot-2021-07-26-at-21-50-53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NgKCM1zh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/6chTJm7/Screen-Shot-2021-07-26-at-21-50-53.png" alt="projectname"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then the second stage you can turn on Google analytics for needs such as cloud messaging, remote config and others.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u1tXZ0Z8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/3WpS1dH/Screen-Shot-2021-07-26-at-21-51-09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u1tXZ0Z8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/3WpS1dH/Screen-Shot-2021-07-26-at-21-51-09.png" alt="enable analytic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the final stage you specify the location of the analytics then tick the checkbox in both and create project. and later you will be redirected to the dashboard of your project.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2QBmpQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/FhH91wb/Screen-Shot-2021-07-26-at-21-51-25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2QBmpQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/FhH91wb/Screen-Shot-2021-07-26-at-21-51-25.png" alt="location analityc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project Dashboard&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1x0q_Bbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/7zZR4sL/Screen-Shot-2021-07-26-at-21-52-18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1x0q_Bbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/7zZR4sL/Screen-Shot-2021-07-26-at-21-52-18.png" alt="project Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-login-firebase-account-in-terminal"&gt;
  &lt;/a&gt;
  4. Login Firebase Account in Terminal
&lt;/h2&gt;

&lt;p&gt;After you have successfully created the project, you must log in to the Firebase CLI to authenticate your account so that it is connected. use this command inside terminal to login &lt;code&gt;firebase login&lt;/code&gt;. After typing this, you will be run into the browser to login to the firebase account that will be used. Make sure you select the same firebase account as the firebase account in the previous project creation&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pDD3atLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/f1TkLXZ/Screen-Shot-2021-07-26-at-21-53-49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pDD3atLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/f1TkLXZ/Screen-Shot-2021-07-26-at-21-53-49.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;allow this section&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1CqZcBSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/TTwWwd3/Screen-Shot-2021-07-26-at-21-54-31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1CqZcBSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/TTwWwd3/Screen-Shot-2021-07-26-at-21-54-31.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;after you follow the next step, and then you will get a page that you have successfully logged in to the Firebase CLI.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vT_PEhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ZdbL5KJ/Screen-Shot-2021-07-26-at-21-54-43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vT_PEhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ZdbL5KJ/Screen-Shot-2021-07-26-at-21-54-43.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GllFpQTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YfJy0T6/Screen-Shot-2021-07-26-at-21-54-59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GllFpQTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YfJy0T6/Screen-Shot-2021-07-26-at-21-54-59.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-firebase-project-initialization"&gt;
  &lt;/a&gt;
  5. Firebase Project Initialization
&lt;/h2&gt;

&lt;p&gt;After you login to the firebase CLI. Now we will initialize our project with the command in terminal &lt;code&gt;firebase init hosting&lt;/code&gt;. After pressing the enter key, several questions will appear, you can answer like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0ez3Kj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/F8kfChd/Screen-Shot-2021-07-26-at-21-59-02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0ez3Kj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/F8kfChd/Screen-Shot-2021-07-26-at-21-59-02.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Please select an option :&lt;/code&gt; &lt;br&gt;
This option is used to select the option whether you will use a previously createrd porject or create a new project. Here we have previously created the project, so we select 'use an existing project'&lt;/p&gt;

&lt;p&gt;&lt;code&gt;select a default Firebase project for this directory :&lt;/code&gt; &lt;br&gt;
This option is used to select the default firebase directory&lt;/p&gt;

&lt;p&gt;&lt;code&gt;what do you want to use as your public directory :&lt;/code&gt;&lt;br&gt;
This option is used to determine the folder at the time of hosting later, by default is a folder named public&lt;/p&gt;

&lt;p&gt;&lt;code&gt;quoted configure as a single-page app (...) ?&lt;/code&gt;&lt;br&gt;
This option is used to ask if you want to configure a single app, if you don't use it, you can type no.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;quoted set up automatic builds and deploys with Github ?&lt;/code&gt;&lt;br&gt;
This option is use to ask if you want to automate and deploy it to github, if you don't want it, you can type no&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-move-files-into-public-folder"&gt;
  &lt;/a&gt;
  6. Move Files Into Public Folder
&lt;/h2&gt;

&lt;p&gt;Move the file to be hosted into the public folder, by default you will find 404.html and index.html, you can rewrite the file in the public folder.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zokAym2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Z2B4zn5/Screen-Shot-2021-07-26-at-21-59-33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zokAym2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Z2B4zn5/Screen-Shot-2021-07-26-at-21-59-33.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-deploy-project"&gt;
  &lt;/a&gt;
  7. Deploy Project
&lt;/h2&gt;

&lt;p&gt;The final stage we will send our files to the firebase hosting, we can use this command in the terminal to send our files to the firebase hosting &lt;code&gt;firebase deploy&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--anpY4Kys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/4mK04Cp/Screen-Shot-2021-07-26-at-21-59-55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--anpY4Kys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/4mK04Cp/Screen-Shot-2021-07-26-at-21-59-55.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it can be seen after the deploy process is successful, then you can see the hosting url. The hosting url is a url for our website, so we can visit the link by typing it in the search bar or clicking on the link.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--93LdbIX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ccKXCyG/Screen-Shot-2021-07-26-at-22-00-14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--93LdbIX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ccKXCyG/Screen-Shot-2021-07-26-at-22-00-14.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclution"&gt;
  &lt;/a&gt;
  Conclution
&lt;/h1&gt;

&lt;p&gt;Firebase is a service from Google which one of them can use as file hosting. Using firebase is free, so we can try it with some of the features offered by firebase itself. Hosting on Firebase is easy.&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>hosting</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Yarn 3.0 🚀🤖 Performances, ESBuild, Better Patches, ...</title>
      <author>Maël Nison</author>
      <pubDate>Mon, 26 Jul 2021 16:06:24 +0000</pubDate>
      <link>https://dev.to/arcanis/yarn-3-0-performances-esbuild-better-patches-e07</link>
      <guid>https://dev.to/arcanis/yarn-3-0-performances-esbuild-better-patches-e07</guid>
      <description>&lt;p&gt;Hello! Long time no see! Back in December, we decided to start working on our next major release, the &lt;strong&gt;3.0&lt;/strong&gt;. It took a bit of time to do everything we intended to do, but here we are! So let's talk a bit about what it changes, and what it brings. Note that these are only the highlights, the &lt;a href="https://github.com/yarnpkg/berry/blob/master/CHANGELOG.md"&gt;full changelog&lt;/a&gt; is much more comprehensive.&lt;/p&gt;

&lt;p&gt;And if you just love to read our log posts, here are the past entries 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-2-4-log-filters-audits-better-warnings-49io"&gt;Yarn 2.4 🎄🎁 Log Filters, Audits, Better Warnings, ...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-2-3-info-command-detailed-options-nohoist-409h"&gt;Yarn 2.3 🍦✨ Info Command, Detailed Options, Nohoist, ...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-2-2-dedupe-faster-lighter-ha5"&gt;Yarn 2.2 🚅🌟 Dedupe, Faster, Lighter, ...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-2-1-git-workspaces-focused-installs-loose-mode-live-playground-4kfc"&gt;Yarn 2.1 🐱‍🏍 Git Workspaces, Focused Installs, Loose Mode, ...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#governance"&gt;
  &lt;/a&gt;
  Governance
&lt;/h2&gt;

&lt;p&gt;Back when the project was started in 2017, we didn't took the time to establish a formal governance document. This is now addressed, and our team composition can be found &lt;a href="https://github.com/yarnpkg/berry/blob/master/GOVERNANCE.md"&gt;here&lt;/a&gt;. It doesn't change anything in practice (this is how we worked for more than two years now), but we hope it may give you a better understanding as to how we work and reach consensus.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opencollective"&gt;
  &lt;/a&gt;
  OpenCollective
&lt;/h2&gt;

&lt;p&gt;From 2017 to 2019 Yarn was mostly maintained by Facebook engineers. While it worked relatively well, the Yarn 1 -&amp;gt; 2 release also proved to be the right time to expand our active team to other horizons, and nowadays no two of our active contributors work at the same company - and none at Facebook.&lt;/p&gt;

&lt;p&gt;Consequently, we've decided to setup an &lt;a href="https://opencollective.com/yarnpkg"&gt;OpenCollective&lt;/a&gt; (or &lt;a href="https://github.com/sponsors/yarnpkg"&gt;GitHub Sponsors&lt;/a&gt;) to give our supporters a way to both express their thanks to our team, and give us resources we can then inject back into the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  Breaking Changes
&lt;/h2&gt;

&lt;p&gt;While the migration from Yarn 1 to Yarn 2 brought some discomfort, the migration to Yarn 3 should prove easier - regardless of the version you come from. The user-facing breaking changes we made this season are mostly little details that may only affect you in very specific cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node 10 isn't supported anymore&lt;/li&gt;
&lt;li&gt;Plug'n'Play hooks are now called &lt;code&gt;.pnp.cjs&lt;/code&gt; (vs &lt;code&gt;.pnp.js&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Virtual folders are now called &lt;code&gt;__virtual__&lt;/code&gt; (vs &lt;code&gt;$$virtual&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://yarnpkg.com/getting-started/editor-sdks"&gt;editor SDKs&lt;/a&gt; have been moved to &lt;code&gt;@yarnpkg/sdks&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Etc; full list &lt;a href="https://github.com/yarnpkg/berry/blob/master/CHANGELOG.md"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even for Yarn 1 users, migrating from 1 to 3 should be easier: we made it so that Yarn will detect when this situation arises to then automatically enable the &lt;code&gt;node-modules&lt;/code&gt; linker. That alone should address most of the problems you may have been hitting when attempting the upgrade - and for everything else, make sure to take a look at our &lt;a href="https://yarnpkg.com/getting-started/migration#step-by-step"&gt;Migration Guide&lt;/a&gt; which got significantly improved over the past year.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#support-for-the-raw-exports-endraw-field"&gt;
  &lt;/a&gt;
  Support for the &lt;code&gt;exports&lt;/code&gt; field
&lt;/h3&gt;

&lt;p&gt;When using Yarn 3 w/ PnP, the &lt;a href="https://nodejs.org/api/packages.html#packages_exports"&gt;&lt;code&gt;exports&lt;/code&gt;&lt;/a&gt; field will be properly resolved &lt;em&gt;regardless of your Node version&lt;/em&gt;. If you're not familiar with this field, you can see it as a way to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Replace the &lt;code&gt;main&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;Soft-prevent accessing arbitrary files in the package&lt;/li&gt;
&lt;li&gt;Conditionally remap files depending on the context (bundlers, ...)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#performances"&gt;
  &lt;/a&gt;
  Performances
&lt;/h2&gt;

&lt;p&gt;Various tweaks have been made to address some of the largest resource consumptions in Yarn. Installs have been improved (turning us faster than pnpm in some scenarios, which is quite a feat!), but not only: script execution tends to have a natural overhead, but bugs in 2.4 and prior caused this overhead to grow relative to the size of the project itself.  This is no longer the case, and the overhead should now be constant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-raw-nodemodules-endraw-linkers"&gt;
  &lt;/a&gt;
  New &lt;code&gt;node_modules&lt;/code&gt; linkers
&lt;/h2&gt;

&lt;p&gt;As you may know, Yarn is built around a few interfaces. One of them is called a "linker", and tells Yarn how to install packages on disk. It's how we can support both PnP and node_modules installs without changing much code.&lt;/p&gt;

&lt;p&gt;One advantage of this architecture is how it allows us to efficiently iterate on alternative install strategies. For this release, &lt;a href="https://github.com/larixer"&gt;larixer&lt;/a&gt; implemented a new experimental &lt;code&gt;nmMode&lt;/code&gt; setting that can be used to instruct the linker to use a specific copy scheme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hardlinks-local&lt;/code&gt; will use hardlinks when the same package is found multiple times within the same project (but only if they have exactly the same version at the moment).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hardlinks-global&lt;/code&gt; will use hardlinks on identical files (even across different versions!), but will also make them point to a global content-addressable directory. This is similar to what pnpm does. Note that if the cache is corrupted (for example because you manually edited it), Yarn will automatically repair it on subsequent installs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I myself have been playing with a pnpm-style linker. It hasn't shipped yet since I'm cautious about adding complexity that could end up unmaintained, but given how small it is there's a decent chance we could add it in a later release as an experimental install mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improved-shell"&gt;
  &lt;/a&gt;
  Improved Shell
&lt;/h2&gt;

&lt;p&gt;As you may know, given that system shells are rarely portable across Windows and Posix, Yarn no longer uses them to run your &lt;code&gt;scripts&lt;/code&gt; entries. Instead, we use our very own shell interpreter.&lt;/p&gt;

&lt;p&gt;We're happy to report that this shell just got smarter, and now provides two additional syntaxes that you can reliably use on both Windows and Posix:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;build-js &amp;amp; build-css &amp;amp;    # Background jobs
ls 2&amp;gt;/dev/null            # File descriptor redirections
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, background jobs have their output color-coded, so you can clearly identify their output, even interlaced.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#esbuild-support"&gt;
  &lt;/a&gt;
  ESBuild support
&lt;/h2&gt;

&lt;p&gt;We now use ESBuild to generate the Yarn bundles and as such worked to ensure good compatibility with Plug'n'Play installs. The result is the new &lt;a href="https://github.com/yarnpkg/berry/tree/master/packages/esbuild-plugin-pnp"&gt;&lt;code&gt;@yarnpkg/esbuild-plugin-pnp&lt;/code&gt;&lt;/a&gt; package which lets you transparently build your code using the default Yarn installation mode. It's still relatively young, so feel free to drop us an issue if you notice something strange!&lt;/p&gt;

&lt;p&gt;While it won't change much for most end-users, the move to ESBuild also provided decent build speed improvements (around 6x faster), making it less frustrating to &lt;a href="https://yarnpkg.com/cli/set/version/from/sources"&gt;build Yarn from sources&lt;/a&gt; ✨&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-plugin-apis"&gt;
  &lt;/a&gt;
  New plugin APIs
&lt;/h2&gt;

&lt;p&gt;Yarn supports writing plugins that can inject themselves into various places and leverage some of the builtin modules provided by the core. While we didn't get the chance to make all the improvements we hoped, we've still been able to upgrade the command line framework to &lt;a href="https://mael.dev/clipanion/"&gt;Clipanion 3&lt;/a&gt;, which lets you write intuitive type-checked commands with a minimal syntactic overhead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;According to DEV.to, those change notes take about 5 minutes to read - by contrast, the &lt;a href="https://dev.to/arcanis/introducing-yarn-2-4eh1"&gt;2.0 release post&lt;/a&gt; was a whopping 15 minutes! Of course, this time around we didn't need to fully rewrite Yarn, hence a lower amount of "critical information" we need you to be aware of 😉 We expect that to be the norm from now on: majors won't have a lot of super impactful changes, mostly just some architecture cleaning and modernization, as new features will tend to land in minors.&lt;/p&gt;

&lt;p&gt;As for our team, we're very happy of the work we've been doing! Working on the codebase still feels like a treat, and features are often constrained to a few identifiable files - proving that our initial redesign bet was right. Our stats suggest that the result are visible to our users as well, and while I remain cautious about popularity metrics it's certainly nice to see.&lt;/p&gt;

&lt;p&gt;Finally, remember that Yarn now has an &lt;a href="https://opencollective.com/yarnpkg"&gt;OpenCollective&lt;/a&gt; / &lt;a href="https://github.com/sponsors/yarnpkg"&gt;GitHub Sponsors&lt;/a&gt;! If your company benefits from our work, or would like to see particular fixes land, sponsoring the project is a good way to engage with us 🙂&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-to-come"&gt;
  &lt;/a&gt;
  What's to come?
&lt;/h3&gt;

&lt;p&gt;A few features initially slated for 3.0 have been pushed back to the next minor so that we have more time to properly incubate them. Some of the things we have in motion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodejs/corepack"&gt;Corepack&lt;/a&gt; integration&lt;/li&gt;
&lt;li&gt;ESM support under PnP mode&lt;/li&gt;
&lt;li&gt;Builtin CLI completion&lt;/li&gt;
&lt;li&gt;Changelog generation&lt;/li&gt;
&lt;li&gt;Improved performances&lt;/li&gt;
&lt;li&gt;pnpm-style linker&lt;/li&gt;
&lt;li&gt;And more...!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course that's only on the top of my head, so it's possible our objectives shift during the next weeks depending on our own priorities - and of course depending on whether you help us or not 😛&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>npm</category>
      <category>node</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Netflix Clone Version 2 - React  &amp; TMDb</title>
      <author>Thomas Gilmore</author>
      <pubDate>Mon, 26 Jul 2021 15:52:37 +0000</pubDate>
      <link>https://dev.to/thomasgilmore/netflix-clone-version-2-react-tmdb-3nko</link>
      <guid>https://dev.to/thomasgilmore/netflix-clone-version-2-react-tmdb-3nko</guid>
      <description>&lt;p&gt;I recreated the Netflix Clone I created from the following post, where I used &lt;a href="https://www.themoviedb.org/"&gt;The Movie Database (TMDb)&lt;/a&gt; to fetch the movie images and posters to populate the Netflix Clone.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thomasgilmore" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SIthfnfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S6JKZ3qK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/594112/c3fcd342-a876-44be-9c47-901146db54c2.jpeg" alt="thomasgilmore"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thomasgilmore/netflix-clone-using-react-and-tmdb-32gb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Netflix Clone Using React and TMDb&lt;/h2&gt;
      &lt;h3&gt;Thomas Gilmore ・ Jul 13 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#api&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I created a version 2 of the Netflix Clone because the first version was running slow. I received feedback to use &lt;a href="https://web.dev/measure/"&gt;Web.dev Measure&lt;/a&gt; to see how well the first version performance was and that's where I found out it was loading much more data than it needed to. &lt;/p&gt;

&lt;p&gt;One of the bigger differences from version 1 to version 2 was that in version 1 I was using React Class Components and in version 2 I switched to React Functional Components. &lt;/p&gt;

&lt;p&gt;In version 1 I was using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX"&gt;ajax&lt;/a&gt; calls to fetch the api information. In version 2 I updated the calls to use &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt; to fetch the api to help the performance. Even though this step did not help a huge amount in performance, it did cut down the amount of javascript code that is needed to make the api calls compared to using ajax.&lt;/p&gt;

&lt;p&gt;I also used &lt;a href="https://www.npmjs.com/package/react-lazy-load-image-component"&gt;React Lazy Load Image Component&lt;/a&gt; as all the movie and tv show images. This helps with performance because if the image is not in the window view the image does not get loaded so a lot less data needs to load to view the page and this helps on the performance a lot.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://loadable-components.com/"&gt;Loadable Components&lt;/a&gt; is also used in version 2. Loadable lets the Netflix Clone to render a dynamic import as a regular component so the component will be loaded in a separate bundle also improving the Netflix Clone performance. &lt;/p&gt;

&lt;p&gt;I have learned a lot from recreating the Netflix Clone and also from the helpful feedback I have received. If you have any other feedback I would really appreciate it. I think it's a great way of learning and seeing someone else's perspective of something. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LINK&lt;/strong&gt;: &lt;a href="https://gilmore-netflix-clone-version-2.netlify.app"&gt;https://gilmore-netflix-clone-version-2.netlify.app&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>api</category>
    </item>
  </channel>
</rss>
