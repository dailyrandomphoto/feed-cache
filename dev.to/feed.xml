<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React Native Animated Credit Card Library</title>
      <author>Halil Bilir</author>
      <pubDate>Wed, 03 Feb 2021 06:38:24 +0000</pubDate>
      <link>https://dev.to/halilb/react-native-animated-credit-card-library-1na6</link>
      <guid>https://dev.to/halilb/react-native-animated-credit-card-library-1na6</guid>
      <description>&lt;p&gt;I built a new library upon the tutorials I posted about React Native forms, and published it on Github.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Byr2dmZ3TRU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I won't go into the implementation details this time. You can check out the source code and let me know about any questions you might have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Works on iOS and Android.&lt;/li&gt;
&lt;li&gt;Validations.&lt;/li&gt;
&lt;li&gt;Card icon animation with Lottie.&lt;/li&gt;
&lt;li&gt;Card flip animation with react-native-card-flip.&lt;/li&gt;
&lt;li&gt;Possible to access all react-hook-form methods.&lt;/li&gt;
&lt;li&gt;TypeScript code base.&lt;/li&gt;
&lt;li&gt;Works on Expo.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Install the library first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install rn-credit-card
// OR
yarn add rn-credit-card
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Install &lt;code&gt;react-hook-form&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-hook-form
// OR
yarn add react-hook-form
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You also need to install &lt;code&gt;lottie-react-native&lt;/code&gt; if you want to display card icon animations. Please note that this is optional, and the library will display simple card icons if &lt;code&gt;Lottie&lt;/code&gt; is not present:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install lottie-react-native
// OR
yarn add lottie-react-native
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you'd like to use the library on Android, make sure you're using a &lt;code&gt;lottie-react-native&lt;/code&gt; version greater than &lt;code&gt;3.0.0&lt;/code&gt;. The animations are not working on &lt;code&gt;2.x.x&lt;/code&gt; versions.&lt;/p&gt;

&lt;p&gt;Additional steps might be needed depending on your platform. Please check &lt;a href="https://github.com/lottie-react-native/lottie-react-native#installing-react-native--0600"&gt;lottie-react-native documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-fonts" class="anchor"&gt;
  &lt;/a&gt;
  Configuring Fonts
&lt;/h3&gt;

&lt;p&gt;The library uses &lt;a href="https://fonts.google.com/specimen/Roboto+Mono"&gt;Roboto Mono&lt;/a&gt; font by default. If you'd like to keep it that way, you need to import &lt;code&gt;RobotoMono_400Regular&lt;/code&gt; and &lt;code&gt;RobotoMono_700Bold&lt;/code&gt; fonts to your project. Please see &lt;a href="https://docs.expo.io/versions/latest/sdk/font/"&gt;Expo&lt;/a&gt; or &lt;a href="https://dev.to/aneeqakhan/add-custom-fonts-in-react-native-0-63-for-ios-and-android-3a9e"&gt;this dev.to post&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;You may also use custom fonts with this library. Please see &lt;a href="#fonts"&gt;#fonts&lt;/a&gt; section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;You need to create a &lt;code&gt;react-hook-form&lt;/code&gt; and pass it down to the &lt;code&gt;CreditCardForm&lt;/code&gt; through &lt;code&gt;FormProvider&lt;/code&gt; context. This structure helps you accessing every propery and method of the form so you can build some features on top of the library.&lt;/p&gt;

&lt;p&gt;The library is written in TypeScript, and types are also available out of the box. You may use &lt;code&gt;FormModel&lt;/code&gt; to type your form.&lt;/p&gt;

&lt;p&gt;Here is a fully functional example with &lt;code&gt;KeyboardAvodingView&lt;/code&gt;, which manages the scroll position when keyboard is open.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FormProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-hook-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;KeyboardAvoidingView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SafeAreaView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LottieView&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lottie-react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CreditCardForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FormModel&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rn-credit-card&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formMethods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FormModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// to trigger the validation on the blur event&lt;/span&gt;
    &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;onBlur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;defaultValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;holderName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;expiration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;cvv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formMethods&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FormModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Success: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormProvider&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;formMethods&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SafeAreaView&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;KeyboardAvoidingView&lt;/span&gt;
          &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avoider&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OS&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;padding&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCardForm&lt;/span&gt;
            &lt;span class="na"&gt;LottieView&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LottieView&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;horizontalStart&lt;/span&gt;
            &lt;span class="na"&gt;overrides&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;labelText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;KeyboardAvoidingView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;
            &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CONFIRM PAYMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onPress&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SafeAreaView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;avoider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you are not using TypeScipt on your project, simply remove &lt;code&gt;FormModel&lt;/code&gt; references from the example above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#available-props" class="anchor"&gt;
  &lt;/a&gt;
  Available Props
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#lottieview" class="anchor"&gt;
  &lt;/a&gt;
  LottieView
&lt;/h3&gt;

&lt;p&gt;This prop takes the default exported value of &lt;code&gt;lottie-react-native&lt;/code&gt; library. This is optional because &lt;code&gt;Lottie&lt;/code&gt; might require additional configuration steps. The library will display simple png card icons if this prop is not provided.&lt;/p&gt;

&lt;p&gt;Please remember you need a &lt;code&gt;lottie-react-native&lt;/code&gt; version greater than &lt;code&gt;3.x.x&lt;/code&gt; to make it work on Android.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;platform&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;any&lt;/td&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;td&gt;iOS/Android&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LottieView&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lottie-react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CreditCardForm&lt;/span&gt; &lt;span class="nx"&gt;LottieView&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LottieView&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#horizontalstart" class="anchor"&gt;
  &lt;/a&gt;
  horizontalStart
&lt;/h3&gt;

&lt;p&gt;This makes the form start with a horizontal scroll. This is the default behaviour.&lt;/p&gt;

&lt;p&gt;This feature is not working on Android due to a weird problem happening when the &lt;code&gt;ScrollView&lt;/code&gt; is switched from &lt;code&gt;horizontal&lt;/code&gt;.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;platform&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;td&gt;iOS only&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This is the outcome when &lt;code&gt;horizontalStart&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9P48_X3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/halilb/rn-credit-card/master/assets/card-form-second-low.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9P48_X3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/halilb/rn-credit-card/master/assets/card-form-second-low.gif" alt="vertical"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backgroundimage" class="anchor"&gt;
  &lt;/a&gt;
  backgroundImage
&lt;/h3&gt;

&lt;p&gt;You may use this prop to replace the background image of the card preview.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;platform&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;React.ReactNode&lt;/td&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;td&gt;iOS/Android&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCardForm&lt;/span&gt;
  &lt;span class="na"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fonts" class="anchor"&gt;
  &lt;/a&gt;
  fonts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;fonts&lt;/code&gt; props take an object with two fields:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;field&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;fonts.regular&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;RobotoMono_400Regular&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fonts.bold&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;RobotoMono_700Bold&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Please note that you should use a &lt;a href="https://en.wikipedia.org/wiki/Monospaced_font"&gt;Monospaced font&lt;/a&gt; for the best user experience. The fixed width helps maintaining the same card number width while the user types.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCardForm&lt;/span&gt;
  &lt;span class="na"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;regular&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RobotoMono_400Regular&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RobotoMono_700Bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#inputcolors" class="anchor"&gt;
  &lt;/a&gt;
  inputColors
&lt;/h3&gt;

&lt;p&gt;You may modify the &lt;code&gt;TextInput&lt;/code&gt; colors using this. It's an object with three optional fields:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;field&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;focused&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;#080F9C&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;errored&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;#B00020&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;regular&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;#B9C4CA&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCardForm&lt;/span&gt;
  &lt;span class="na"&gt;inputColors&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;focused&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#080F9C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;errored&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#B00020&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;regular&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#B9C4CA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#translations" class="anchor"&gt;
  &lt;/a&gt;
  translations
&lt;/h3&gt;

&lt;p&gt;An optional object that takes a string for each displayed text on the library. You may use it to modify any or all of those displayed texts.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;platform&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Translations&lt;/td&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;td&gt;iOS/Android&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCardForm&lt;/span&gt;
  &lt;span class="c1"&gt;// those are the default values&lt;/span&gt;
  &lt;span class="na"&gt;translations&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Card Number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cardHolderName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cardholder Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;nameSurname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name Surname&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;mmYY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MM/YY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;expiration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Expiration&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;securityCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Security Code&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cardNumberRequired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Card number is required.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cardNumberInvalid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This card number looks invalid.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cardHolderNameRequired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cardholder name is required.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cardHolderNameInvalid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This cardholder name looks invalid.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;expirationRequired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Expiration date is required.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;expirationInvalid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This expiration date looks invalid.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;securityCodeRequired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Security code is required.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;securityCodeInvalid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This security date looks invalid.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#overrides" class="anchor"&gt;
  &lt;/a&gt;
  overrides
&lt;/h3&gt;

&lt;p&gt;This props might be used to override some component styles within the library. All fields are optional.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;field&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cardPreview&lt;/td&gt;
&lt;td&gt;ViewStyle or TextStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;labelText&lt;/td&gt;
&lt;td&gt;TextStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cardHolderPreview&lt;/td&gt;
&lt;td&gt;TextStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;expirationPreview&lt;/td&gt;
&lt;td&gt;ViewStyle or TextStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;outline&lt;/td&gt;
&lt;td&gt;ViewStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input&lt;/td&gt;
&lt;td&gt;ViewStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;labelContainer&lt;/td&gt;
&lt;td&gt;ViewStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inputLabel&lt;/td&gt;
&lt;td&gt;TextStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;errorText&lt;/td&gt;
&lt;td&gt;TextStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>reactnative</category>
      <category>typescript</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Algorithm Practice: Two Sum</title>
      <author>Andrew Williams</author>
      <pubDate>Wed, 03 Feb 2021 05:05:14 +0000</pubDate>
      <link>https://dev.to/andrewjwilliams/algorithm-practice-two-sum-44of</link>
      <guid>https://dev.to/andrewjwilliams/algorithm-practice-two-sum-44of</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why-algorithms" class="anchor"&gt;
  &lt;/a&gt;
  Why Algorithms?
&lt;/h1&gt;

&lt;p&gt;By definition, in software development, Algorithms are computer procedures designed to accomplish a specific task. Each algorithm consists of a number of steps the computer takes in order to produce a result. The ultimate goal in using algorithms is to find a result or solution in the most efficient way possible.&lt;/p&gt;

&lt;p&gt;Creating and studying algorithms is an essential part of being a software engineer. Sure, you may not run into a situation where you have to fulfill the requirements present in many of your study questions, but the techniques you learn will prove beneficial when performing technical analysis. You may find part of an algorithm you studied makes your application run more efficiently or returns the results your end-user needs. &lt;/p&gt;

&lt;p&gt;Regardless of how you use them, algorithms are a great problem-solving tool, and for that reason, I have made it a personal goal to practice algorithm development. For however long it takes, I will be working my way through a series of coding challenges, each designed to test my knowledge (or lack of knowledge) on certain software concepts. I will be using this blog as an outlet to discuss what went well and what didn't go so well with each challenge. If you yourself are a new software developer or are exploring the possibility of becoming one, I hope these posts can be encouraging and motivating for you in your own personal journey!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem-two-sum" class="anchor"&gt;
  &lt;/a&gt;
  The Problem: Two Sum
&lt;/h1&gt;

&lt;p&gt;The prompt for this challenge is pretty straightforward: write a function, taking in a non-empty array of integers and a target value, that returns a new array with two values from our input array whose sum equals the target value. Below is an example of what we would expect our function to do:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array&lt;/strong&gt; = [8, 1, 7, 5, -9, -11, 3]&lt;br&gt;
&lt;strong&gt;Target Value&lt;/strong&gt; = 10&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt; = [7, 3] or [3, 7]&lt;/p&gt;

&lt;p&gt;If no two numbers in the array sum up to the target value, we simply return an empty array. It should also be noted that the function cannot add an integer to itself (ex. 5 + 5) and that it should be assumed that there is at most one pair of numbers summing up to the target value.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#my-initial-solution" class="anchor"&gt;
  &lt;/a&gt;
  My Initial Solution
&lt;/h1&gt;

&lt;p&gt;While this problem is classified as "easy" on the platform I wrote it on, I did find it challenging at first since I had little experience with these kinds of questions. After about 30-35 minutes I finally came up with a solution that cleared all the tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function twoSum(array, targetSum) {
    let finalArray = []
    let newArray = array

    for(i=0; i &amp;lt; array.length; i++){
        let targetValue = array[i]
        newArray.splice(i,1)

        newArray.map(value =&amp;gt; {
            if (targetValue + value === targetSum){
                finalArray.push(targetValue)
                finalArray.push(value)
            }
        })

        if (finalArray.length === 0){
            newArray.splice(i, 0, targetValue)
        } else {
            return finalArray;
        }
    }
    return finalArray
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Breaking down the code, I first defined two arrays, one set to an empty array and another set to the array that was passed into the function. I then initiate a for loop that is set to run the length of the array. Within the for loop, I define another variable equal to a value in the array where &lt;em&gt;i&lt;/em&gt; is the index number. This variable's value will change each time the loop increments. I then took my newArray and spliced out the value that the index of &lt;em&gt;i&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After removing this value, I then map through newArray to check and see if any other value added with the targetValue equals the targetSum. If these two values return the correct sum, I then push each value into the finalArray.&lt;/p&gt;

&lt;p&gt;Once the map is complete, I run another conditional that checks the length of our finalArray. If the length is equal to zero, then the target value is inserted back into newArray at the index value of &lt;em&gt;i&lt;/em&gt;, continuing the loop's run. If the length is greater than zero, it indicates there are values present and the program returns finalArray. The last return line after this conditional exists to return the empty array if the loop has cycled all the way through and failed to have found a pair of integers.     &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#refining-my-approach" class="anchor"&gt;
  &lt;/a&gt;
  Refining My Approach
&lt;/h1&gt;

&lt;p&gt;While this algorithm does pass the challenge presented in the prompt, it is a mess on more levels than one. In fact, I was so happy I simply cleared the tests I submitted this problem without taking time to refactor my work. After a few days I finally decided to take a look, and oh boy was it rough! &lt;/p&gt;

&lt;p&gt;For starters, I defined a couple of redundant variables, the most obvious example being newArray at the very beginning. The code becomes cluttered with a large number of variables and it becomes increasingly difficult for someone reading the code to figure out what the function is actually doing. For refactoring purposes, I knew I needed to cut out the redundancy. &lt;/p&gt;

&lt;p&gt;I had the right approach incorporating a for loop, but somehow made the puzzling decision to incorporate map. Sure, map can be used to iterate over an array and examine each value, but the purpose is to return a new array. Instead of map, I should have used a second for loop, which would have accomplished same goal of iteration without the need to return a value.&lt;/p&gt;

&lt;p&gt;Finally, I made the task of returning a final array more difficult than it needed to be. Instead of a complicated exercise in creating an empty array, pushing the correct values into that array, and checking to see if there are any values in the array, I could have just returned an array with the values inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return [value1, value2]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I would have to set my code up differently, but this is definitely the preferred way of doing things.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#coding-an-alternative-solution" class="anchor"&gt;
  &lt;/a&gt;
  Coding an Alternative Solution
&lt;/h1&gt;

&lt;p&gt;After reviewing these issues, researching big-O notation, and getting advice from some other developers, I submitted a second solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function twoSum(array, targetSum) {
   array.sort((a,b) =&amp;gt; a - b);
   let leftIndex = 0
   let rightIndex = array.length-1

   while(leftIndex &amp;lt; rightIndex){
    const currentSum = array[leftIndex] + array[rightIndex]

    if(currentSum === targetSum){
       return [array[leftIndex], array[rightIndex]]
    } else if (currentSum &amp;lt; targetSum){
            leftIndex++
    } else if (currentSum &amp;gt; targetSum){
            rightIndex--
    }
   }
   return [];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this version, the first thing I did was sort the integers in the array from smallest to largest. I then created two variables to represent the first and last index of the array. Then I initiated a while loop, which runs continuously until either the leftIndex is greater than or equal to the rightIndex or a return statement is executed.&lt;/p&gt;

&lt;p&gt;Within the loop, I created another variable, currentSum, responsible for holding the sum of the left index value and the right index value. Armed with this variable, I created a conditional that checks to see if this value is equal to the targetSum. If it is, the function returns an array with both index values. The other statements check to see if the currentSum is either greater than or less than the targetSum, adjusting the value of either index in order to change the currentSum. If every value in the array has been evaluated and no pairs have produced the targetSum, the algorithm returns an empty array.&lt;/p&gt;

&lt;p&gt;This approach works thanks to numeric ordering and the use of left and right "pointers". Let's use the array I defined earlier and pass it into this algorithm. Below would be our initial values before entering the loop:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Target Value&lt;/strong&gt; = 10&lt;br&gt;
&lt;strong&gt;Sorted Array&lt;/strong&gt; = [-11, -9, 1, 3, 5, 7, 8]&lt;br&gt;
&lt;strong&gt;leftIndex&lt;/strong&gt; = 0&lt;br&gt;
&lt;strong&gt;rightIndex&lt;/strong&gt; = 6&lt;/p&gt;

&lt;p&gt;Once we entered the loop, we sum -11 and 8, which results in -3. Since -3 is less than 10, the first &lt;em&gt;else if&lt;/em&gt; statement is executed and leftIndex value is increased by one, which is the index for -9 in the array. Over time the function adjusts the position of each index accordingly until a pair is summed equal to the targetSum. In the case of the example above, this would occur when the leftIndex equals 3 and the rightIndex equals 5.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;It feels so good to go back, even with the easier problems, and nail down how and why an algorithm is working. Being able to learn from your mistakes and make your code run more efficiently gives you that confidence boost to tackle another coding challenge. Hopefully, when my future self looks back, I can recognize these small accomplishments as stepping stones of knowledge that helped make me a more well-rounded developer! &lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Fake API - An API to generate fake data</title>
      <author>Amal Shaji</author>
      <pubDate>Wed, 03 Feb 2021 03:32:22 +0000</pubDate>
      <link>https://dev.to/amal/fake-api-an-api-to-generate-fake-data-390b</link>
      <guid>https://dev.to/amal/fake-api-an-api-to-generate-fake-data-390b</guid>
      <description>&lt;p&gt;Here is an API for all the frontend developers. An API to generate fake data, lots of it. This tool comes in handy when you are developing a frontend for applications that requires data a lot of data. &lt;/p&gt;

&lt;p&gt;Frontend frameworks like &lt;code&gt;React&lt;/code&gt;, &lt;code&gt;Vue&lt;/code&gt;, etc., are trendy, and many applications are built on these frameworks. Hot reloading is one of the features of such libraries. So when you press &lt;code&gt;save&lt;/code&gt;, the whole app reloads, and all the APIs are called. &lt;/p&gt;

&lt;p&gt;Making multiple API calls every few seconds is a costly task. Keeping the backend running the whole time to prototype the frontend is also an expensive process. This is where an API generating fake data comes into play. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-base-url" class="anchor"&gt;
  &lt;/a&gt;
  API Base URL
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fakedataapi.vercel.app"&gt;https://fakedataapi.vercel.app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fakeapi.tk"&gt;https://fakeapi.tk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#source-code" class="anchor"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/amalshaji/fakeapi"&gt;https://github.com/amalshaji/fakeapi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-does-the-api-work" class="anchor"&gt;
  &lt;/a&gt;
  How does the API work?
&lt;/h2&gt;

&lt;p&gt;The API is built using &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;, and the fake data is generated using the &lt;a href="https://faker.readthedocs.io/en/master/"&gt;Faker&lt;/a&gt; library. All the data types(the type of data generated) supported by the API are the ones in Faker. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#endpoints" class="anchor"&gt;
  &lt;/a&gt;
  Endpoints
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[GET] /api/types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This endpoint returns all the data types supported. Only these types should be provided as values to any key.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[POST] /api/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This endpoint does all the heavy lifting. It generates fake data based on the JSON payload. Each key in the payload is an identifier, i.e., the key in the resulting fake data. The value to each key must be one of the valid data types. For an invalid type, the API ignores the entry. &lt;/p&gt;

&lt;p&gt;For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Will generate something like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Amal Shaji"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-kind-of-payload-can-the-api-handle" class="anchor"&gt;
  &lt;/a&gt;
  What kind of payload can the API handle?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Simple Payloads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VgS9lueU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265041320/PSAqL8-Aj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgS9lueU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265041320/PSAqL8-Aj.png" alt="simple.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complex payloads (nested JSON)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wsayIkGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265167197/pkYlNC1lT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wsayIkGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265167197/pkYlNC1lT.png" alt="complex1.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complex payloads (Maybe the person has multiple contact information)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2HO_szs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265231436/aCrLJLekD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2HO_szs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265231436/aCrLJLekD.png" alt="complex2.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use the &lt;code&gt;repeat&lt;/code&gt; key for repeating any block of data. Max repeat count is 10.&lt;br&gt;
Use the &lt;code&gt;repeat&lt;/code&gt; key in the outer block to get data for &lt;code&gt;n&lt;/code&gt; users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The function to generate data based on the payload is recursive. So whenever the function encounters a &lt;code&gt;dict&lt;/code&gt;, it calls itself, solving all the nested structures. You can read about it in the source code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MhWPqt3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265406349/_xDGUfex7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MhWPqt3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265406349/_xDGUfex7.png" alt="interesting.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hmm. Interesting...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Navigate to &lt;a href="https://fakeapi.tk/api/types"&gt;https://fakeapi.tk/api/types&lt;/a&gt; to know about all the supported data types. Fire up your favorite API testing client and test it out with various data types. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment" class="anchor"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#deploy-to-vercel" class="anchor"&gt;
  &lt;/a&gt;
  Deploy to Vercel
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://vercel.com/new/git/external?repository-url=https%3A%2F%2Fgithub.com%2Famalshaji%2Ffakeapi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45UgOyrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vercel.com/button" alt="Deploy with Vercel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-locally-using-docker" class="anchor"&gt;
  &lt;/a&gt;
  Deploy locally using docker
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/amalshaji/fakeapi
&lt;span class="nb"&gt;cd &lt;/span&gt;fakeapi
docker build &lt;span class="nt"&gt;-t&lt;/span&gt; fakeapi &lt;span class="nb"&gt;.&lt;/span&gt;
docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 8000:8000 fakeapi
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you find any bugs, feel free to open an issue or create a pull request. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#happy-hunting" class="anchor"&gt;
  &lt;/a&gt;
  Happy Hunting🥳🥳
&lt;/h3&gt;

</description>
      <category>python</category>
      <category>opensource</category>
    </item>
    <item>
      <title>What's the longest you've ever spent debugging a single bug?</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 03 Feb 2021 02:56:23 +0000</pubDate>
      <link>https://dev.to/ben/what-s-the-longest-you-ve-ever-spent-debugging-a-single-bug-op4</link>
      <guid>https://dev.to/ben/what-s-the-longest-you-ve-ever-spent-debugging-a-single-bug-op4</guid>
      <description></description>
      <category>discuss</category>
    </item>
    <item>
      <title>JavaScript Monorepo Tools</title>
      <author>🅰️ Geek</author>
      <pubDate>Wed, 03 Feb 2021 01:56:25 +0000</pubDate>
      <link>https://dev.to/ageekdev/javascript-monorepo-tools-34g9</link>
      <guid>https://dev.to/ageekdev/javascript-monorepo-tools-34g9</guid>
      <description>&lt;p&gt;If you're new to monorepo, read my previous post &lt;a href="https://ageek.dev/monorepo"&gt;on adoption of monorepo&lt;/a&gt; first to have a good understanding of what it is, who's using it, and whether it is a thing for you.&lt;/p&gt;

&lt;p&gt;To manage a multi-language monorepo, you have to use powerful and complicated build systems like &lt;a href="https://buck.build"&gt;Buck&lt;/a&gt;, &lt;a href="https://bazel.build"&gt;Bazel&lt;/a&gt;, &lt;a href="https://www.pantsbuild.org/"&gt;Pants&lt;/a&gt;, or &lt;a href="https://please.build"&gt;Please&lt;/a&gt;. These tools are great for enterprise-level projects but seem a bit overkill for individuals or small teams.&lt;/p&gt;

&lt;p&gt;This post focuses only managing an almost pure JavaScript/TypeScript monorepo (Also called multi-package monorepo) including websites built with JavaScript frameworks, Node-based servers, React Native mobile apps, or shared npm packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;monorepo-root
├── package.json
├── package-one
│   ├── package.json
│   └── index.js
└── package-two
    ├── package.json
    └── index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The expectation is low when you just want a streamline workflow of dealing with git, npm packages, and npm scripts. You can use built-in workspaces feature provided by &lt;a href="https://ageek.dev/javascript-package-managers"&gt;JavaScript package managers&lt;/a&gt; or dedicated JavaScript monorepo tools like &lt;a href="https://lerna.js.org/"&gt;Lerna&lt;/a&gt;, &lt;a href="https://rushjs.io/"&gt;Rush&lt;/a&gt;, &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workspaces-by-package-managers" class="anchor"&gt;
  &lt;/a&gt;
  Workspaces by Package Managers
&lt;/h2&gt;

&lt;p&gt;Notable package managers like Yarn, Npm, or Pnpm have built-in feature called workspaces aim to make working with monorepo easy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://yarnpkg.com/features/workspaces"&gt;Yarn workspaces&lt;/a&gt; (since v1)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.npmjs.com/cli/v7/using-npm/workspaces"&gt;Npm workspaces&lt;/a&gt; (since v7)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pnpm.js.org/en/workspaces"&gt;Pnpm workspaces&lt;/a&gt; (since v3.7.0)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Workspaces is a generic term that refers to the set of features in package manager CLI that provides support to managing multiple packages from your local files system from within a singular top-level, root package. Workspaces are usually defined via the workspaces property of the package.json file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"monorepo-root"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"package-one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"package-two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This set of features makes up for a much more streamlined workflow handling linked packages from the local file system. Automating the linking process as part of &lt;strong&gt;install&lt;/strong&gt; command and avoiding manually having to use &lt;strong&gt;link&lt;/strong&gt; command in order to add references to packages that should be symlinked into the current node_modules folder.&lt;/p&gt;

&lt;p&gt;When a workspace is packed into an archive (whether it's through &lt;strong&gt;pack&lt;/strong&gt; or &lt;strong&gt;publish&lt;/strong&gt;), package manager will dynamically update associated semver range.&lt;/p&gt;

&lt;p&gt;At minimum, you’ll be able to keep multiple related packages all together in a single repository, and test changes in an integrated environment, without continually re-linking.&lt;/p&gt;

&lt;p&gt;Not possible for more advanced workspace management features like building, versioning, managing permissions, and publishing all the packages within a workspace together with a single command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lerna" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://lerna.js.org/"&gt;Lerna&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Lerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm. Your repository will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;monorepo-root
├── package.json
├── lerna.json
├── packages
│   ├── package-three
│       ├── package.json
│       └── index.js
├── package-one
│   ├── package.json
│   └── index.js
└── package-two
    ├── package.json
    └── index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Your lerna.json will look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.1.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"npmClient"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"bootstrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"npmClientArgs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"--no-package-lock"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"packages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"package-one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"package-two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lerna is good at versioning in both fixed and independent mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fixed mode Lerna projects operate on a single version line kept in lerna.json. If a module has been updated since the last time a release was made, it will be updated to the new version you're releasing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Independent mode Lerna projects allows maintainers to increment package versions independently of each other. Each time you publish, you will get a prompt for each package that has changed to specify if it's a patch, minor, major or custom change.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lerna support filtering packages by name, hoisting common dependencies to root, automatic local linking, versioning, bulk publishing, diffing changes since last release, or running arbitrary commands.&lt;/p&gt;

&lt;p&gt;Lerna operates in a higher level than above package managers' workspaces but not close to a build system when it has no support for build languages, caching, action directed graphs, or incremental builds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rush" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://rushjs.io/"&gt;Rush&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Rush makes life easier for JavaScript developers who build and publish many packages from a common Git repo.&lt;/p&gt;

&lt;p&gt;Rush's unique installation strategy produces a single shrinkwrap/lock file for all your projects that installs extremely fast. Rush supports parallel builds, subset builds, and incremental builds.&lt;/p&gt;

&lt;p&gt;Repo policies allow new package dependencies to be reviewed before they are accepted. Rush can enforce consistent dependency versions across your repo. Different subsets of projects can publish separately with lockstep or independent versioning strategies, private releases, and so forth.&lt;/p&gt;

&lt;p&gt;Rush's isolated symlinking model eliminates npm phantom dependencies, ensuring you'll never again accidentally import a library that was missing from package.json.&lt;/p&gt;

&lt;p&gt;Rush helps to ensure that installs and builds are completely deterministic. If you define custom commands or options, they are strictly validated and documented as part of Rush's command-line help.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nx" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Nx is a set of extensible dev tools for monorepo, has first-class support for many frontend and backend technologies like Angular, React, and Node.&lt;/p&gt;

&lt;p&gt;Nx is smart when it analyzes your workspace and figures out what can be affected by every code change and only rebuilds what is necessary.&lt;/p&gt;

&lt;p&gt;Nx has support for distributed and incremental builds. If someone has already built or tested similar code, Nx will use their results to speed up the command for everyone else instead of rebuilding or retesting the code from scratch.&lt;/p&gt;

&lt;p&gt;Nx is an open platform with plugins for many modern tools and frameworks. It has support for TypeScript, React, Angular, Cypress, Jest, Prettier, Nest.js, Next.js, Storybook, Ionic among others. With Nx, you get a consistent dev experience regardless of the tools used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Package managers' workspaces is good at optimizing &lt;code&gt;node_modules&lt;/code&gt; installation and nothing else, you need dedicated tools to actually orchestrate a monorepo.&lt;/p&gt;

&lt;p&gt;Lerna is fast to get started with very little configuration, good at running scripts in packages, can be used together with package managers' workspaces to improve bootstrap performance. Following are notable public lerna-based monorepos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/jest"&gt;jest&lt;/a&gt; - delightful JavaScript testing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/babel/babel"&gt;babel&lt;/a&gt; - compiler for writing next generation JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; - create React apps with no build configuration&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ReactTraining/react-router"&gt;react-router&lt;/a&gt; - declarative routing for React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nx and Rush are way more complicated, optimized for &lt;a href="https://ageek.dev/javascript-tooling"&gt;JavaScript Tooling&lt;/a&gt;, close to a build system in terms of features and learning curve.&lt;/p&gt;

&lt;p&gt;Above tools makes life easier for JavaScript developers who build and publish many npm packages at once. Lerna is a safe start, switch to Rush when build time getting out of hand, or a complete build system when monorepo is not pure JavaScript anymore.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>monorepo</category>
    </item>
    <item>
      <title>How to setup scheduled cron jobs in Node.js</title>
      <author>Michael Burrows</author>
      <pubDate>Tue, 02 Feb 2021 22:36:05 +0000</pubDate>
      <link>https://dev.to/michaelburrows/how-to-setup-scheduled-cron-jobs-in-node-js-4926</link>
      <guid>https://dev.to/michaelburrows/how-to-setup-scheduled-cron-jobs-in-node-js-4926</guid>
      <description>&lt;p&gt;In this tutorial you’ll learn how to schedule cron jobs in Node.js. Typically cron jobs are used to automate system maintenance but can also be used for scheduling file downloads or sending emails at regular intervals.&lt;/p&gt;

&lt;p&gt;Let’s first setup our project by running the following commands :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir cron-jobs
cd cron jobs
npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We’ll be using the &lt;a href="https://www.npmjs.com/package/node-cron"&gt;node-cron&lt;/a&gt; package which simplifies creating cron jobs in node.js using the full crontab syntax. Run the following command to install &lt;code&gt;node-cron&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install node-cron
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With node-cron installed create a new &lt;code&gt;index.js&lt;/code&gt; file with a sample cron job that will run every minute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cron&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-cron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;* * * * *&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Running each minute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The asterisks are part of the crontab syntax used to represent different units of time. Five asterisks represents the crontab default which will run every minute.&lt;/p&gt;

&lt;p&gt;Here’s what unit of time each of the asterisks represent and the values allowed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;┌──────────────── second (optional 0 - 59) 
| ┌────────────── minute (0 - 59)
| | ┌──────────── hour (0 - 23)
| | | ┌────────── day of month (1 - 31)
| | | | ┌──────── month (1 - 12)
| | | | | ┌────── day of week (0 - 7, 0 or 7 are sunday)
| | | | | | 
| | | | | |
* * * * * *
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#schedule-cron-jobs-dailyweeklymonthly" class="anchor"&gt;
  &lt;/a&gt;
  Schedule cron jobs daily/weekly/monthly
&lt;/h2&gt;

&lt;p&gt;Run at midnight every day:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 * * *&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// task to run daily&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run every Sunday at midnight:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 * * 0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// task to run weekly&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run on the first day of every month at midnight:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 1 * *&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// task to run monthly&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you’re struggling to understand exactly how the crontab syntax works check out &lt;a href="https://crontab.guru/"&gt;crontab guru&lt;/a&gt;. This website provides a simple editor that displays the cron schedule based on the cron syntax you input:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdCLXp3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9gyyjefjijcrfuakfwjl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdCLXp3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9gyyjefjijcrfuakfwjl.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s all for this tutorial. Hopefully you now know how to a setup a cron job to save time on things you may have done manually in the past. As always thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Mistakes come for Juniors and Seniors alike</title>
      <author>Patricio Ferraggi</author>
      <pubDate>Tue, 02 Feb 2021 21:19:13 +0000</pubDate>
      <link>https://dev.to/patferraggi/mistakes-come-for-juniors-and-seniors-alike-41de</link>
      <guid>https://dev.to/patferraggi/mistakes-come-for-juniors-and-seniors-alike-41de</guid>
      <description>&lt;p&gt;If you are interested in reading this article in Spanish, check out my blog:&lt;br&gt;
&lt;a href="https://www.patferraggi.dev/blog/2021/feb/mistakes-everyone/"&gt;The Developer's Dungeon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I first started my career as a software developer over 6 years ago, I was scared, scared about making a mistake, deleting something that I was not supposed to, making dumb code, or missing some important stuff while developing a feature. &lt;/p&gt;

&lt;p&gt;If you were expecting a story where I would tell how none of these things happened and everything was fine and you should not worry, this is not that type of story, there is not gonna be any happy unreal endings here.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#some-mistakes-i-made-so-far" class="anchor"&gt;
  &lt;/a&gt;
  Some mistakes I made so far
&lt;/h3&gt;

&lt;p&gt;I took my second job as a developer when I had less than a year of experience. On my first week, I successfully broke the production database as a consultant which caused that some employees of the client, and myself, had to stay during the weekend checking the reach of the damage I caused. I spent an entire Saturday fixing broken entries in other systems and restoring database backups. What was I exactly doing with production access on my first week, to this day I still don't know.&lt;/p&gt;

&lt;p&gt;For years I have written code that fails to do the job, produced bugs, and delivered the wrong things. Failing builds, broken environments, blocked other people's work, and delayed releases.&lt;/p&gt;

&lt;p&gt;In my third job (less than 2 years experience) I failed to release to production one feature we have been working on for months, when I finally got it to production it was riddled with bugs, some parts of the workflow were not usable at all.&lt;/p&gt;

&lt;p&gt;In my fourth job (around 3 years experience) I took on the assignment of building a microservice for a feature that our company needed to survive the following years. Although I was in charge of building it I was scared to fail so I left many decisions to someone more technically capable than me, someone with years and years of experience.&lt;br&gt;
Those decisions guided us through an insanely complicated implementation phase with tons of features that we didn't actually need and did nothing more than complicating the code and the deployment. Before I left that company I took care of "Refactoring" that service and heavily simplifying the number of things that it needed to do, the deployment went great and we were very happy with the implementation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#did-i-learned-something" class="anchor"&gt;
  &lt;/a&gt;
  Did I learned something?
&lt;/h3&gt;

&lt;p&gt;All these mistakes I made gave me some experiences that I will never forget, and I sure learned from those mistakes. I learned to check 20 times before deploying, I learned how to write unit tests and integration tests, how to smoke test on staging environments, how to make my code resilient so that failures in one feature don't bring the entire system down.&lt;/p&gt;

&lt;p&gt;I learned how to interact with the QA, I got some insights on how they test the product so I can do extra verifications before passing the problem to another person.&lt;/p&gt;

&lt;p&gt;I learned to take responsibility for the code I work on, take ownership for the mistakes and go the extra mile to fix them.&lt;/p&gt;

&lt;p&gt;I learned to question features and not just blindingly build a specification that has been drop to my feet, ask questions and try to solve problems instead of just being a coding monkey.&lt;/p&gt;

&lt;p&gt;It has also taught me what type of senior developer I want to be, do you want to be the guy who screams at the jr developer for making a mistake? (yes, this, unfortunately, does happen) or do you prefer to be the one that understands him and makes him grow? do you see a problem caused by a team member as his/her fault or as a problem caused by a process that WE as a team need to fix?&lt;/p&gt;

&lt;p&gt;Thanks to those mistakes, and the people that have helped me along the way I learned the type of developer I want to be:&lt;/p&gt;

&lt;p&gt;Someone who takes pride in their craft, someone who loves helping others and sees mistakes not as failures but as new opportunities to learn, someone who takes the deliberate care to make sure features are delivered in time with the appropriate quality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-are-a-senior-now-what" class="anchor"&gt;
  &lt;/a&gt;
  You are a senior, now what?
&lt;/h3&gt;

&lt;p&gt;I would love to say that mistakes stop happening when you become a senior, unfortunately, that is not the case, they will never stop happening, the sword of Damocles will always be there hanging on top of your head. &lt;/p&gt;

&lt;p&gt;Even today I almost had a heart attack when for a moment I thought one of my local db scripts was running on the staging database instead of my local docker instance, all just on my second week in a new job.&lt;/p&gt;

&lt;p&gt;Nothing happened, I knew I had the proper configuration file pointing to my local instance, I was checking the database while the script run and took the appropriate measures to revert it if anything would have been wrong, but when I saw error logs on the staging channel let's say I doubted myself a little 😂. In the end, it was just that analytics for development and staging were thrown in the same channel, that is all.&lt;/p&gt;




&lt;p&gt;My point with this blog post is not to scare you, is to let you know that everyone makes mistakes, what differentiates developers is how they take those mistakes and what they do with the lessons learned.&lt;/p&gt;

&lt;p&gt;If you liked this blog post please share it and let me know below in the comments. What mistakes have you made in your career? I would love to hear them so we can laugh together.&lt;/p&gt;

</description>
      <category>career</category>
      <category>motivation</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🗿 Why Humans Invented HTML - Learning Frontend Deeply - Part 1</title>
      <author>Mir Ali Mobasheri</author>
      <pubDate>Tue, 02 Feb 2021 20:18:28 +0000</pubDate>
      <link>https://dev.to/alimobasheri/why-humans-invented-html-learning-frontend-deeply-part-1-h1l</link>
      <guid>https://dev.to/alimobasheri/why-humans-invented-html-learning-frontend-deeply-part-1-h1l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-should-you-read-this" class="anchor"&gt;
  &lt;/a&gt;
  Why Should You Read This?
&lt;/h2&gt;

&lt;p&gt;If you have ever watched Kubrick’s &lt;strong&gt;2001: A Space Odyssey&lt;/strong&gt;, you should’ve noticed its popular cutscene, in which an ape-man throws a bone into the sky and when the bone reaches it’s climax, it cuts into a scene in which a spacecraft is accelerating in the space.&lt;/p&gt;

&lt;p&gt;It contains an indirect and heroic message: “The same ape-man who threw a bone into the sky, out of joy and curiosity, was also the same man who sent spaceships to the outer space.”&lt;/p&gt;

&lt;p&gt;It’s the idea of evolution. How humans learnt to develop better solutions and tools, based on their past discoveries and knowledges.&lt;/p&gt;

&lt;p&gt;But how can all this stuff be related to HTML? We’re living in an age, where the web is rocking! There are web apps, websites, blogs, e-commerce stores, social medias, web games and much more. How could such a thing be related to an ape-man and his bone? The answer lies in how and for what purpose and based on what concepts, previously developed by humans, HTML was introduced.&lt;/p&gt;

&lt;p&gt;And this is what we’re going to learn about in this post. Fasten your seatbelts as we’re going to have a blazing journey throughout the history of HTML and the World Wide Web foundation! &lt;/p&gt;

&lt;p&gt;
  ❓ How Can This Article Be Helpful To You?
  &lt;ul&gt;
&lt;li&gt;This article is not a tutorial or doesn't try to teach you writing HTML. Of course in the future parts of this series, codes and tutorials will be added to the content too. 
But for now I would just like to demonstrate a deep picture of HTML and its purpose and foundation.
If you've just started to learn web development, it can be a good help for you. And if you're currently an experienced frontend developer, it can extend your view on the web development environment.
&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;
&lt;p&gt;
  ❓ Why Am I Publishing This Series?
  &lt;ul&gt;
&lt;li&gt;Because after I had succeeded in an interview but had lost the job in a week, I was motivated to learn everything related to frontend, deeply and bit by bit. In this series I will share with you the experience and the knowledge I gather along this journey.
You can read more in this article: &lt;a href="https://dev.to/alimobasheri/why-i-succeeded-in-the-interview-but-lost-the-job-gej"&gt;Why I Succeeded In The Interview But Lost The Job!&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#before-we-start" class="anchor"&gt;
  &lt;/a&gt;
  Before We Start...
&lt;/h3&gt;

&lt;p&gt;Question: Like everything made by humans, HTML too has been developed in order to overcome a challenge. But what was the challenge and how could HTML specifically help to solve it?&lt;/p&gt;

&lt;p&gt;The short answer is that: HTML is the human solution for sharing documents. It's a Markup Language that simplifies the process of structuring documents that can be shared on the context of the World Wide Web.&lt;/p&gt;

&lt;p&gt;But the long answer is something more thorough. We should first learn how HTML was developed...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#born-in-a-physics-laboratorygreyexclamation" class="anchor"&gt;
  &lt;/a&gt;
  👨‍🔬 Born In A Physics Laboratory❕
&lt;/h2&gt;

&lt;p&gt;No. HTML wasn't meant to create webpages by using the energy released from atom excitation. But it was founded by Sir Tim Berners-Lee, who was in a position in the computing services section of CERN (the European Laboratory for Particle Physics in Geneva, Switzerland) in order to ease the process of document transportation. &lt;/p&gt;

&lt;p&gt;
  ❓ What made Tim feel the urge to create HTML? (click to expand)
  &lt;ul&gt;
&lt;li&gt;&lt;p&gt;CERN was a center for the gatherings of top physicians where they discussed and exchanged revolutionary ideas about things that can evolve and revolute the life on earth.&lt;br&gt;
Thus we can conclude that documents, like official ones or articles or manuscripts or etc. had a great usage in their gatherings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But what if they could get rid of all the hassle of accessibility to these documents and save their valuable times for thinking on theories that could end human life on the earth with an easy swipe of particles, instead of waiting to reach Geneva and discuss for long hours with other scientists who would stubbornly never accept their theories?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/p&gt;


&lt;p&gt;Hence Tim came up with the idea of a kind of a Hypertext which could behave like a paper document and let the reader navigate the pages and the contents by clicking on what became to be known as Hyperlinks. And all of these documents were going to be transformed through HTTP (HyperText Transformation Protocol), which helped the physicians access them around the world by having an internet connection. &lt;/p&gt;

&lt;p&gt;Surely, the internet we're talking about was different from what it looks today and the initial web browsers and webpages had many differences. Tim's idea for the HTML Document Type Definition was a blend of SGML and Hypertext. But what are these two? Let's find out together.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hypertext-texts-that-only-superman-can-read" class="anchor"&gt;
  &lt;/a&gt;
  🦸‍♂️ Hypertext: Texts That Only Superman Can Read
&lt;/h3&gt;

&lt;p&gt;In defining Hypertext we should note that the word "Hyper" isn't used in the sense of a very long text or something that is about 1 million of words. Of course the internet and the Hypertext are useful tools that facilitate the access to billions of pages of documents, but Hypertext specifically means: "Documents that contain special anchors to other documents. These anchors can be accessed via mouse click or keypress or touch screens. Activating these anchors would make the browser jump to another document."&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;

  The Anchor Tag ⚓ (click to expand)
  &lt;code&gt;&amp;lt;a href="http://example.com"&amp;gt;Link Text&amp;lt;/a&amp;gt;&lt;/code&gt;: The &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag is one of the main HTML tags. The word &lt;code&gt;a&lt;/code&gt; is the first letter of 'Anchor'. And it accepts an attribute called href which stands for Hypertext Reference and it's value is the destination to which the browser must jump, upon the anchor's activation. This tag will render a link on the Hypertext document, whose address is the href's value.


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Hypertext terminology had been known among the academics since the 1940s. But it wasn't until the first graphical PCs came to life, that Hypertexts could become a reality.&lt;br&gt;
The development of Hypertexts on PCs included document files which consisted of buttons by clicking on which, the system decided what content had to be displayed. Those were buttons like &lt;code&gt;next page&lt;/code&gt; and &lt;code&gt;previous page&lt;/code&gt; or &lt;code&gt;Chapter Titles&lt;/code&gt; in a table of contents. &lt;/p&gt;

&lt;p&gt;Yet these Hypertexts only worked on a PC and couldn't access documents on other PCs on the other side of the world. For this, Tim decided to implement &lt;strong&gt;HTTP&lt;/strong&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explaining what HTTP is and how it works, is out of the scope of this article. We will learn about it in some future articles of this series where we shall read about ajax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then let's see what a Markup Language is and how SGML inspired Tim.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#markup-language-how-to-define-elements-in-a-document" class="anchor"&gt;
  &lt;/a&gt;
  🧾 Markup Language: How To Define Elements In A Document
&lt;/h3&gt;

&lt;p&gt;I have many times come across people on the internet who debated whether HTML is a Programming Language or not. To me the answer can be found as easily as looking up it's name.&lt;br&gt;
HTML stands for &lt;strong&gt;Hypertext Markup Language&lt;/strong&gt;. Well, the name itself doesn't claim it's a programming language but instead it's a markup one. A markup language is a human-readable text that uses tags to define elements within a document. &lt;/p&gt;

&lt;p&gt;For a better understanding you can have a look at the current post. There's a title which says 'Why Humans Invented HTML'. Now let's suppose that we need to print a copy of this post and we fancy the title to be printed on the top-left corner of the page. The position is set beforehand in the printer, but the printer needs to know what the title is. Instead of passing the title to the printer separately, we define it in the document itself. But how?&lt;br&gt;
That's where the Markup Language comes to our rescue. &lt;br&gt;
In the text containing the Markup Language we define a title tag and pass it the title we desire. The printer, while parsing the text, would store the value for the title and print it in the correct position.&lt;br&gt;
Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Why Humans Invented HTML&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above example uses HTML tags. But since there are different Markup Languages, we could use any of them in their own respective environment.&lt;br&gt;
The following an example of the Scribe Markup Language:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Title(Why Humans Invented HTML)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So now that we have a good idea of how a Markup Language defines elements in a document, let's find out what SGML is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sgml-the-way-markup-languages-should-be-defined" class="anchor"&gt;
  &lt;/a&gt;
  📋 SGML: The Way Markup Languages Should Be Defined
&lt;/h3&gt;

&lt;p&gt;SGML stands for &lt;strong&gt;'Standard Generalized Markup Language'&lt;/strong&gt;. It's not a Markup Language in itself, instead it's a standard registered by ISO (International Standard Organization) which defines the standards for a Markup language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;

  How can SGML be useful?
  &lt;p&gt;If new Markup Languages were about to be developed, this standard can be applied to them in order to make the Markup language supported on different platforms. Since the Markup languages based on this standard behave close to each other and obey the same rules, they can easily be ported to different formats and be printed easily. That's how HTML can easily be transformed into PDFs, EPUBs, XML and etc.&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The SGML itself was developed based on GML &lt;strong&gt;(Generalized Markup Language)&lt;/strong&gt;, earlier developed by IBM for it's printer devices. A document's structure in GML might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:h1.The Title Goes Here!
:p.A paragraph about the content.
:h2.A title for a list.
:ol.
:li.List Item 1.
:li.List Item 2.
:eol.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;

  What's the ':ol' Markup?
  &lt;p&gt;❗ Notice how &lt;code&gt;ol&lt;/code&gt; (ordered list) is used to start an ordered list and &lt;code&gt;eol&lt;/code&gt; (end ordered list) is used to declare that the list element ends there.&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Markup would print the following document:&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#the-title-goes-here" class="anchor"&gt;
  &lt;/a&gt;
  The Title Goes Here!
&lt;/h4&gt;

&lt;p&gt;A paragraph about the content.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#a-title-for-a-list" class="anchor"&gt;
  &lt;/a&gt;
  A title for a list.
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;List Item 1.&lt;/li&gt;
&lt;li&gt;List Item 2.&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;SGML replaced &lt;code&gt;:tagname. :etagname.&lt;/code&gt; with &lt;code&gt;&amp;lt;tagname&amp;gt;&amp;lt;/tagname&amp;gt;&lt;/code&gt;, which was also implemented into HTML.&lt;/p&gt;

&lt;p&gt;Now a new question pops up. How did HTML implement SGML?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-comes-to-life" class="anchor"&gt;
  &lt;/a&gt;
  ✅ HTML Comes To Life.
&lt;/h3&gt;

&lt;p&gt;When Sir Burners-Lee, first began to publicize his idea about sharing Hypertexts through the internet, it became well known among the researchers who taught it would become the main communication tool in the future.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;

  What did companies think about the HTTP at first? (click to expand)
  &lt;li&gt;The big companies like HP or IBM saw it useful only for the researchers who wanted to share their documents and make referencing simpler. To them, the communication future depended heavily on the telephone companies and the solutions they could find for its development.&lt;/li&gt;
&lt;li&gt;Well as it turns out they were wrong. Right now the WWW is the home to billions of websites, which nowadays are about more than just the research and the official documents.&lt;/li&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But even so, Tim was alone at first. He had to use his own computer abilities to bring his concepts into reality. He blended other concepts like Hypertexts, SGML and etc. and also developed his own sharing protocol which is HTTP. Then he was able to gather small teams and develop the world of communication!&lt;/p&gt;

&lt;p&gt;But what did the HTML look like at the beginning?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#html-the-first-version" class="anchor"&gt;
  &lt;/a&gt;
  HTML: The First Version.
&lt;/h4&gt;

&lt;p&gt;For a real example you can visit this page: &lt;a href="http://info.cern.ch/hypertext/WWW/TheProject.html"&gt;The World Wide Web Project&lt;/a&gt;&lt;br&gt;
The above link will redirect you to the first page ever written in HTML. If you want to see how the page was Marked up, you can do so by right clicking on the browser page and selecting 'View Page Source', or other options like this.&lt;/p&gt;

&lt;p&gt;We can have a close look at it's source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;HEADER&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/HEADER&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/BODY&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The source as you can observe consists of human-readable tags. There are two main tags: &lt;code&gt;&amp;lt;HEADER&amp;gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;lt;BODY&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now that we've learnt that a Markup language tries to stimulate a paper document, we can easily understand what these two tags are about. They define the two main parts of a document: 'Details' &amp;amp; 'Contents'. It's like many document folders you can find in offices and schools and elsewhere. Chances are you have yourself written such a document too.&lt;/p&gt;

&lt;p&gt;
  What does 'Header' really do?(click to learn)
  &lt;ul&gt;
&lt;li&gt;The details that the &lt;code&gt;&amp;lt;HEADER&amp;gt;&lt;/code&gt; tag gives are different from what we need to know about a paper document. The &lt;code&gt;&amp;lt;HEADER&amp;gt;&lt;/code&gt; part actually isn't meant to be read by humans. It contains information that a browser might find useful. Like what? Like a 'title' or a 'character set'.&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;
&lt;p&gt;Let's zoom into the &lt;code&gt;&amp;lt;HEADER&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;HEADER&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;TITLE&amp;gt;&lt;/span&gt;The World Wide Web project&lt;span class="nt"&gt;&amp;lt;/TITLE&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;NEXTID&lt;/span&gt; &lt;span class="na"&gt;N=&lt;/span&gt;&lt;span class="s"&gt;"55"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/HEADER&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since this is a very elementary version of HTML, just two tags have been defined inside &lt;code&gt;&amp;lt;HEADER&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;One of them is title, which is simply a title or a name given to the current document. Since browsers have to inform the user about what they are looking at; the title is what the browser, shows at the top most position. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The title is one of the most important elements in a HTML document, based on the fact that if no title is defined, the user must rely on the HTTP Address URL to identify what document he/she's looking at.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;NEXTID&amp;gt;&lt;/code&gt; tag was used in the elementary HTML versions and produced by the &lt;strong&gt;Next&lt;/strong&gt; HTML editor to generate &lt;code&gt;name&lt;/code&gt; attributes for &lt;code&gt;Anchor&lt;/code&gt; tags. It's a long-deprecated tag and honestly I myself don’t perfectly know how it was used. 😅 It's not used anymore.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#how-can-a-deep-understanding-of-htmls-development-help-you-in-developing-modern-web" class="anchor"&gt;
  &lt;/a&gt;
  How can a deep understanding of HTML's development help you in developing modern web?
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;I can guess what you might be thinking by now: All we've learnt thus far, is how Markup languages have been developed and resulted in HTML's creation. But the facts about documents and their paper-like structures might seem irrelevant to how the web environment functions and looks nowadays. &lt;/li&gt;
&lt;li&gt;But that's the trick about it. Nothing has really changed. Everything you see on the web, from the HTML5 games to the Progressive Web Apps to the smoothly maintained animations and SVG graphics, all this and more is built upon document structure concept. This concept is known as &lt;strong&gt;Document Object Model&lt;/strong&gt; or &lt;strong&gt;DOM&lt;/strong&gt;, which I will write about in the next part of this series. &lt;/li&gt;
&lt;li&gt;I know reading this might seem boring and long and time consuming, but I can bet that by gathering this knowledge you can dive deeper into HTML5 Semantic Tags, Best CSS Layout Practices, SEO and How a Search Engine will treat and analyze your web application's &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, JSX's data pipeline and how a Virtual DOM can become real and many more things.&lt;/li&gt;
&lt;li&gt;Believe me, these are all based upon the simple Hypertext idea 😊.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you're again full of energy and motivated to search for the deep roots of HTML, let's see what an HTML document &lt;code&gt;BODY&lt;/code&gt; is.&lt;/p&gt;

&lt;p&gt;This is how the &lt;code&gt;&amp;lt;BODY&amp;gt;&lt;/code&gt; part is written in the example above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;H1&amp;gt;&lt;/span&gt;World Wide Web&lt;span class="nt"&gt;&amp;lt;/H1&amp;gt;&lt;/span&gt;The WorldWideWeb (W3) is a wide-area&lt;span class="nt"&gt;&amp;lt;A&lt;/span&gt; &lt;span class="na"&gt;NAME=&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt; &lt;span class="na"&gt;HREF=&lt;/span&gt;&lt;span class="s"&gt;"WhatIs.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
hypermedia&lt;span class="nt"&gt;&amp;lt;/A&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;DL&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;DT&amp;gt;&amp;lt;A&lt;/span&gt; &lt;span class="na"&gt;NAME=&lt;/span&gt;&lt;span class="s"&gt;44&lt;/span&gt; &lt;span class="na"&gt;HREF=&lt;/span&gt;&lt;span class="s"&gt;"../DataSources/Top.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;What's out there?&lt;span class="nt"&gt;&amp;lt;/A&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;DD&amp;gt;&lt;/span&gt; Pointers to the
    world's online information,&lt;span class="nt"&gt;&amp;lt;A&lt;/span&gt; &lt;span class="na"&gt;NAME=&lt;/span&gt;&lt;span class="s"&gt;45&lt;/span&gt; &lt;span class="na"&gt;HREF=&lt;/span&gt;&lt;span class="s"&gt;"../DataSources/bySubject/Overview.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
    subjects&lt;span class="nt"&gt;&amp;lt;/A&amp;gt;&lt;/span&gt;
    , &lt;span class="nt"&gt;&amp;lt;A&lt;/span&gt; &lt;span class="na"&gt;NAME=&lt;/span&gt;&lt;span class="s"&gt;z54&lt;/span&gt; &lt;span class="na"&gt;HREF=&lt;/span&gt;&lt;span class="s"&gt;"../DataSources/WWW/Servers.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;W3 servers&lt;span class="nt"&gt;&amp;lt;/A&amp;gt;&lt;/span&gt;, etc.
    &lt;span class="nt"&gt;&amp;lt;DT&amp;gt;&amp;lt;A&lt;/span&gt; &lt;span class="na"&gt;NAME=&lt;/span&gt;&lt;span class="s"&gt;46&lt;/span&gt; &lt;span class="na"&gt;HREF=&lt;/span&gt;&lt;span class="s"&gt;"Help.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Help&lt;span class="nt"&gt;&amp;lt;/A&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;DD&amp;gt;&lt;/span&gt; on the browser you are using
    ...
  &lt;span class="nt"&gt;&amp;lt;/DL&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/BODY&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What the body renders is a set of &lt;code&gt;elements&lt;/code&gt;. Each element is identified by using tags. What text you put inside a tag is called its &lt;code&gt;inner text&lt;/code&gt; and tags that you nest into it are called it’s &lt;code&gt;children&lt;/code&gt;. The main tag itself is called the &lt;code&gt;parent&lt;/code&gt;. &lt;br&gt;
The inner text is the part which is printed in the browser page.&lt;/p&gt;

&lt;p&gt;Question: But why should we use such sibling terms like children and parents for a HTML structure?&lt;br&gt;
Answer: Because the HTML Document Structure behaves in an inheriting way.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;inheritance&lt;/code&gt; concept becomes more important when you need to handle &lt;code&gt;layout&lt;/code&gt;, &lt;code&gt;positioning&lt;/code&gt; and &lt;code&gt;display&lt;/code&gt;. There's a good example in the above HTML markup which demonstrates how &lt;code&gt;inheritance&lt;/code&gt; helps in &lt;code&gt;layout&lt;/code&gt; designing.&lt;/p&gt;

&lt;p&gt;The tag &lt;code&gt;&amp;lt;DL&amp;gt;&lt;/code&gt; defines a &lt;code&gt;Data List&lt;/code&gt;. What a Data List demonstrates is a list of &lt;code&gt;items&lt;/code&gt; with each of them having a &lt;code&gt;description&lt;/code&gt; of their own.&lt;/p&gt;

&lt;p&gt;
  A good example for a Data List would be a dictionary. (click to read why)
  &lt;ul&gt;
&lt;li&gt;A dictionary document contains a list of words. And each of the words has got a definition of itself. &lt;/li&gt;
&lt;li&gt;The words are the &lt;code&gt;items&lt;/code&gt; and the definitions are the &lt;code&gt;description&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;
&lt;p&gt;The above example uses &lt;code&gt;&amp;lt;DL&amp;gt;&lt;/code&gt; to show a list of Hyperlinks. It can be said that each Hyperlink is written like a &lt;strong&gt;term&lt;/strong&gt;, which in turn is defined with a &lt;strong&gt;description&lt;/strong&gt; to tell the user about where the Hyperlink leads them to. This is the obvious purpose for the implementation of the &lt;code&gt;DL&lt;/code&gt; in this document. But there's also another use for it...&lt;/p&gt;

&lt;p&gt;It's &lt;code&gt;layout&lt;/code&gt;. If you're already familiar with web design and CSS, you'd know how CSS properties like Flexbox or Grid help with the layout. &lt;br&gt;
But the initial Hypertext project had defined no way of styling. And this was for good reason. Because Burners-lee anticipated the fact that HTML had to only contain document structure and markup, concluding that the styling logic shouldn't be implemented in HTML itself. This made HTML more flexible. One document structure could be styled in different ways, either by the user or the author or the browser.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;

  What is Flexbox or Grid? Hell, what is CSS? (click to read if you don't know)
  &lt;p&gt;CSS stands for &lt;strong&gt;Cascading Style Sheets&lt;/strong&gt;. A style sheet is a set of rules that apply styles to a document. And cascading means these rules act like cascades of water which override everything beneath themselves. 
&lt;/p&gt;


&lt;li&gt;Thus certain style rules can be changed or overridden in certain parts of a document. This property is different from HTML's inheritance behavior and will be covered in future parts of this series.&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Flexbox and Grid are some properties of CSS used for HTML layout. They align contents in a &lt;code&gt;list-like&lt;/code&gt; and &lt;code&gt;table-like&lt;/code&gt; way respectively.&lt;/li&gt;
&lt;br&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What this means is that the &lt;code&gt;data list&lt;/code&gt; element is used to give the printed (or the rendered) content some visual &lt;strong&gt;layout&lt;/strong&gt; and &lt;strong&gt;structure&lt;/strong&gt;. &lt;br&gt;
The structure is implemented by showing only one Hyperlink on each line and it's description in the next line. This structure makes it easier for the reader to read the document.&lt;/p&gt;

&lt;p&gt;I hope this example has demonstrated how the HTML documents were initially structured. Even the newest HTML versions follow many of these rules. So you can observe how and for what purposes HTML was developed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-thats-all-for-now" class="anchor"&gt;
  &lt;/a&gt;
  And That's All For Now...!
&lt;/h3&gt;

&lt;p&gt;We've come a long way, describing many things, that you may have already known. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;But what I was trying to achieve by writing this long article, was to give you a fundamental sense of how the frontend technologies have been defined. &lt;/li&gt;
&lt;li&gt;In my opinion, it's all based on the document structure, whether it's about online video meetings or social applications, or graphical animations. &lt;/li&gt;
&lt;li&gt;Having a firm knowledge of the markup language and the inheritance methodology will surely help us throughout our journey to learn frontend deeply.&lt;/li&gt;
&lt;li&gt;One important thing about the DOM is the usage of the semantic tags. You've seen different kinds of these tags in this article. They include &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt; and etc. Such tags are semantic in the sense that they let the browser know what role their content has in the document. &lt;/li&gt;
&lt;li&gt;For example, a &lt;code&gt;h1&lt;/code&gt; tag means that its text is the most important title in the current document and surely its text contains some important and descriptive information about the current section.&lt;/li&gt;
&lt;li&gt;Learning semantic tags is important for SEO, layout and even mastering the declarative and component-based programming. And in the latest definitions of HTML, newer semantic tags have been introduced which play a key role in developing better frontend applications.&lt;/li&gt;
&lt;li&gt;In the upcoming parts we're going to use the knowledge gathered in this article to dive deeper into the sea of the frontend programming!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feedbacks-please" class="anchor"&gt;
  &lt;/a&gt;
  Feedbacks please!
&lt;/h3&gt;

&lt;p&gt;This is a long post, and it took me a while to write it down. And since I'm planning to extend it into a series I would like to know your opinions and ideas about it. &lt;/p&gt;

&lt;p&gt;And most important than all: Many things written in this post can be categorized as opiniated explanations. Therefore opposite or better explanations and theorizations might exist. If you have such ideas, please comment them.&lt;/p&gt;

&lt;p&gt;In the next part we'll back with the DOM.&lt;/p&gt;

&lt;p&gt;Thanks for the reading! ❤️&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title> Git and GitHub Essentials - #1 Getting started with Git  </title>
      <author>Envoy-VC</author>
      <pubDate>Tue, 02 Feb 2021 18:56:34 +0000</pubDate>
      <link>https://dev.to/envoy_/git-and-github-essentials-getting-started-with-git-gkc</link>
      <guid>https://dev.to/envoy_/git-and-github-essentials-getting-started-with-git-gkc</guid>
      <description>&lt;h1&gt;
  &lt;a href="#section-11-create-your-first-repository-then-add-and-commit-files" class="anchor"&gt;
  &lt;/a&gt;
  Section 1.1: Create your first repository, then add and commit files
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Install Git from &lt;a href="https://git-scm.com/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once Git is installed, navigate to the directory you want to place under version control and create an empty Git&lt;br&gt;
repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git init 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This creates a hidden folder, .git, which contains the plumbing needed for Git to work.&lt;br&gt;
Next, check what files Git will add to your new repository; this step is worth special care:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Adding files&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add &amp;lt;filename1&amp;gt; &amp;lt;filename2&amp;gt;
git add *.&amp;lt;file-extention&amp;gt;            # adds all files with that extention
git add .                             # adds all files
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Commit all the files that have been added, along with a commit message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "Initial commit"

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This creates a new commit with the given message. A commit is like a save or snapshot of your entire project. You&lt;br&gt;
can now push, or upload, it to a remote repository, and later you can jump back to it if necessary.&lt;br&gt;
If you omit the -m parameter, your default editor will open and you can edit and save the commit message there&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding a remote&lt;/strong&gt;&lt;br&gt;
To add a new remote, use the git remote add command on the terminal, in the directory your repository is stored&lt;br&gt;
at.&lt;/p&gt;

&lt;p&gt;The git remote add command takes two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. A remote name, for example, origin&lt;/li&gt;
&lt;li&gt;2. A remote URL, for example,

&lt;code&gt;https://&amp;lt;your-git-service-address&amp;gt;/user/repo.git&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; git remote add origin https://&amp;lt;your-git-service-address&amp;gt;/owner/repository.git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#section-12-clone-a-repository" class="anchor"&gt;
  &lt;/a&gt;
  Section 1.2: Clone a repository
&lt;/h1&gt;

&lt;p&gt;The git clone command is used to copy an existing Git repository from a server to the local machine.&lt;/p&gt;

&lt;p&gt;For example, to clone a GitHub project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd &amp;lt;path where you would like the clone to create a directory&amp;gt;
git clone https://github.com/username/projectname.git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When cloning to a specified directory, the directory must be empty or non-existent.&lt;/li&gt;
&lt;li&gt;You can also use the ssh version of the command:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone git@github.com:username/projectname.git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#section-13-sharing-code" class="anchor"&gt;
  &lt;/a&gt;
  Section 1.3: Sharing code
&lt;/h1&gt;

&lt;p&gt;To share your code you create a repository on a remote server to which you will copy your local repository&lt;/p&gt;

&lt;p&gt;On the remote server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init --bare /path/to/repo.git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On the local machine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin ssh://username@server:/path/to/repo.git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(Note that ssh: is just one possible way of accessing the remote repository.)&lt;/p&gt;

&lt;p&gt;Now copy your local repository to the remote:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push --set-upstream origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Adding --set-upstream (or -u) created an upstream (tracking) reference which is used by argument-less Git&lt;br&gt;
commands, e.g. git pull&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#section-14-setting-your-user-name-and-email" class="anchor"&gt;
  &lt;/a&gt;
  Section 1.4: Setting your user name and email
&lt;/h1&gt;

&lt;p&gt;You need to set who you are &lt;em&gt;before&lt;/em&gt; creating any commit. That will allow commits to have the&lt;br&gt;
right author name and email associated to them.&lt;/p&gt;

&lt;p&gt;To declare that identity for all repositories, use git config --global&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "Your Name"
git config --global user.email mail@example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To declare an identity for a single repository, use git config inside a repo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /path/to/my/repo
git config user.name "Your Login At Work"
git config user.email mail_at_work@example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Remove a global identity
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global --remove-section user.name
git config --global --remove-section user.email

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#section-15-setting-up-the-upstream-remote" class="anchor"&gt;
  &lt;/a&gt;
  Section 1.5: Setting up the upstream remote
&lt;/h1&gt;

&lt;p&gt;To get more information about any git command – i.e. details about what the command does, available options and&lt;br&gt;
other documentation – use the --help option or the help command.&lt;/p&gt;

&lt;p&gt;For example, to get all available information about the git pull command, use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull --help
git help pull
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you only want a quick help showing you the meaning of the most used command line flags, use -h:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull -h
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>github</category>
      <category>git</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 02 Feb 2021 18:49:03 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-3p6p</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-3p6p</guid>
      <description>&lt;p&gt;Every Tuesday, we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#please-emoji-responsibly" class="anchor"&gt;
  &lt;/a&gt;
  Please Emoji Responsibly
&lt;/h3&gt;

&lt;p&gt;As a software developer, it’s easy to use emojis the wrong way -- but there are very real accessibility consequences. &lt;a class="comment-mentioned-user" href="https://dev.to/iamludal"&gt;@iamludal&lt;/a&gt;
 shares a better path. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/iamludal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v4PhmWvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4A8y8sWH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/567699/24688b79-3b93-4935-9cff-33321e2547e4.jpeg" alt="iamludal image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/iamludal/you-are-using-emojis-the-wrong-way-i71" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;You Are Using Emojis The Wrong Way ❌&lt;/h2&gt;
      &lt;h3&gt;Ludal 🚀 ・ Jan 27 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mobile&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#twitter&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#slow-amp-steady-serves-you-better" class="anchor"&gt;
  &lt;/a&gt;
  Slow &amp;amp; Steady Serves You Better
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/alexlsalt"&gt;@alexlsalt&lt;/a&gt;
 talks about the importance of taking things slow as an early-career developer. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alexlsalt" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mY85lbma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rbWwRtco--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/284014/36cbe4fd-2ae3-4651-a2fd-ea65ef3b6cb9.jpg" alt="alexlsalt image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alexlsalt/the-importance-of-slowing-way-down-as-a-junior-software-engineer-4jei" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Importance of Slowing (Way!) Down as a Junior Software Engineer&lt;/h2&gt;
      &lt;h3&gt;Alex Morton ・ Jan 30 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devjournal&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#womenintech&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#no-bones-about-it" class="anchor"&gt;
  &lt;/a&gt;
  No bones about it
&lt;/h3&gt;

&lt;p&gt;… skeleton layouts have so much going for them! &lt;a class="comment-mentioned-user" href="https://dev.to/lukekyl"&gt;@lukekyl&lt;/a&gt;
 explains why. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lukekyl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_GETeWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yYmVBOr9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/421066/269c500a-abd3-455d-8682-60af1d3ac462.png" alt="lukekyl image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lukekyl/how-to-build-a-skeleton-layout-in-react-21hb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Build a Skeleton Layout in React&lt;/h2&gt;
      &lt;h3&gt;Kyle Luke ・ Jan 27 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#plots-twists-can-lead-to-satisfying-stories" class="anchor"&gt;
  &lt;/a&gt;
  Plots twists can lead to satisfying stories
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/anfibiacreativa"&gt;@anfibiacreativa&lt;/a&gt;
 shared a look inside their career journey -- from &lt;em&gt;physical&lt;/em&gt; architectural draftswoman to to solutions architect! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/anfibiacreativa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DewiXoYz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uD9bDcPe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/150849/3e174cf2-1d34-4ad2-a696-6b6d6458504e.jpg" alt="anfibiacreativa image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/this-is-learning/from-designer-to-software-engineer-to-solutions-architect-my-journey-2p5b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;From Designer to Software Engineer to Solutions Architect: my journey&lt;/h2&gt;
      &lt;h3&gt;Natalia Venditto ・ Jan 29 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#the-expert-in-anything-was-once-a-beginner" class="anchor"&gt;
  &lt;/a&gt;
  The expert in anything was once a beginner
&lt;/h3&gt;

&lt;p&gt;“To be honest,” writes &lt;a class="comment-mentioned-user" href="https://dev.to/rajatarya007zxc"&gt;@rajatarya007zxc&lt;/a&gt;
 “JavaScript still changes my perspective, but it also gives me more strength to work hard on it.”&lt;/p&gt;

&lt;p&gt;This post provides great encouragement and guidance for when you’re beating yourself up over JavaScript (spoiler: don’t do that)&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rajatarya007zxc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UtUMiSL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZRIWE0gP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/453599/b59ff508-f011-4a3d-a593-ea15e2a8346f.png" alt="rajatarya007zxc image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rajatarya007zxc/sometimes-javascript-is-tricky-67j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Sometimes JavaScript is Tricky.&lt;/h2&gt;
      &lt;h3&gt;Rajat_Arya ・ Jan 30 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#yearly-healthscreenings-at-a-bare-minimum" class="anchor"&gt;
  &lt;/a&gt;
  Yearly health-screenings -- at a bare minimum.
&lt;/h3&gt;

&lt;p&gt;You go in to get your blood pressure checked at least once per year. Your websites need those screenings, too and security headers are an essential step in this wellness check. Thanks for these tips on checking security headers, &lt;a class="comment-mentioned-user" href="https://dev.to/madsstoumann"&gt;@madsstoumann&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/madsstoumann" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoLwOpQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S8Kp4bXC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/515396/61d796b8-f5ce-468b-8cb5-808b2bbb9279.jpeg" alt="madsstoumann image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/madsstoumann/frontend-security-security-headers-517p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Frontend Security: Security Headers&lt;/h2&gt;
      &lt;h3&gt;Mads Stoumann ・ Jan 27 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#getting-into-the-freelance-flow" class="anchor"&gt;
  &lt;/a&gt;
  Getting into the freelance flow
&lt;/h3&gt;

&lt;p&gt;As developers, it can be hard to switch to freelance in part because it requires you to “sell yourself” more frequently. Recently, &lt;a class="comment-mentioned-user" href="https://dev.to/tanoaksam"&gt;@tanoaksam&lt;/a&gt;
 made this shift successfully! Here’s how.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tanoaksam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYB7sf-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1teICR4d--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/533945/6a9dfd56-ad3c-4d73-8f97-aa43618fa436.jpg" alt="tanoaksam image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tanoaksam/my-freelancing-workflow-from-cold-leads-to-paid-invoices-38hd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My freelancing workflow, from cold leads to paid invoices&lt;/h2&gt;
      &lt;h3&gt;Sam Tanoak Sycamore ・ Jan 31 ・ 15 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#freelancing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100devs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>How I Hacked Cookie Clicker Game with Inspect Element</title>
      <author>Muhammad Furqan Ul Haq</author>
      <pubDate>Tue, 02 Feb 2021 17:58:13 +0000</pubDate>
      <link>https://dev.to/trulyfurqan/how-i-hacked-cookie-clicker-game-with-inspect-element-cd8</link>
      <guid>https://dev.to/trulyfurqan/how-i-hacked-cookie-clicker-game-with-inspect-element-cd8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-i-hacked-cookie-clicker-game-with-inspect-element" class="anchor"&gt;
  &lt;/a&gt;
  How I Hacked Cookie Clicker Game with Inspect Element
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://orteil.dashnet.org/cookieclicker/"&gt;Cookie Clicker&lt;/a&gt; is a very popular browser-based game. It revolves around producing cookies for the world. This game gets more interesting over time which keeps the player engaged.&lt;/p&gt;

&lt;p&gt;Basically, there are a few ways to get cookies. These cookies can then be used to create new buildings or purchase upgrades. At first, I’m going to mention a few genuine ways to earn cookies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By clicking the big “Cookie” shown on the user interface.&lt;/li&gt;
&lt;li&gt;By creating new buildings. There are different types of buildings and each type can only produce a specified number of cookies per second. Initially, all buildings are locked, but they will get unlocked over time as the game progresses.&lt;/li&gt;
&lt;li&gt;By enhancing the efficiency of your cookie store through upgrades.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, here comes the actual hacking stuff you’re waiting for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, this is a browser-based game. Meaning that it is developed using HTML5, CSS3, and JavaScript. All of these are client-side languages that can be modified through programs like &lt;a href="https://developers.google.com/web/tools/chrome-devtools"&gt;Chrome DevTools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s &lt;a href="https://orteil.dashnet.org/cookieclicker/"&gt;open this game&lt;/a&gt; in Google Chrome.&lt;/p&gt;

&lt;p&gt;Now to open Chrome DevTools, right-click anywhere on the game and select “Inspect” from the context menu. For now, we will only be focusing on its functionality that is written in JavaScript. So, open the “Console” tab.&lt;/p&gt;

&lt;p&gt;Another way is to press &lt;strong&gt;Ctrl+Shift+J&lt;/strong&gt; on Windows or &lt;strong&gt;⌘+⌥Option+J&lt;/strong&gt; on Mac.&lt;/p&gt;

&lt;p&gt;You’ve to execute the below-mentioned codes here.&lt;/p&gt;

&lt;p&gt;It’s time to hack different features of this Cookie Clicker game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hack-cookies" class="anchor"&gt;
  &lt;/a&gt;
  Hack Cookies
&lt;/h2&gt;

&lt;p&gt;As everything in this game depends on cookies, so I hacked them!&lt;/p&gt;

&lt;p&gt;Basically, after analyzing its source code, I found that the functionality of this game is written inside a file called “main.js”.&lt;/p&gt;

&lt;p&gt;This file initializes an object &lt;code&gt;Game&lt;/code&gt; through which we can easily access different features of Cookie Clicker. For example, we can modify the number of cookies we have using the &lt;code&gt;Game.cookies&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Let’s do that now!&lt;/p&gt;

&lt;p&gt;Simply copy the below code and paste it inside the “Console” tab of Chrome DevTools. Press “Enter” to execute it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;57000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once executed, you will get 57000 cookies absolutely FREE. You can add any number here.&lt;/p&gt;

&lt;p&gt;For example, the below code will give you “Infinity Cookies”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#keep-getting-cookies" class="anchor"&gt;
  &lt;/a&gt;
  Keep Getting Cookies
&lt;/h2&gt;

&lt;p&gt;This game also has the functionality of earning cookies per second. &lt;code&gt;Game.cookiesPs&lt;/code&gt; property will give us a specified number of cookies for one second.&lt;/p&gt;

&lt;p&gt;So, why not wrap it inside a &lt;code&gt;setInterval&lt;/code&gt; of one second to continuously get more and more cookies?&lt;/p&gt;

&lt;p&gt;Here’s the code snippet to do so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookiesPs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This code will add 50 cookies to your account every second.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unlock-all-upgrades-and-purchase-them" class="anchor"&gt;
  &lt;/a&gt;
  Unlock All Upgrades and Purchase Them
&lt;/h2&gt;

&lt;p&gt;Finally, the developers of Cookie Clicker have also provided a cheat to get all upgrades for free.&lt;/p&gt;

&lt;p&gt;Basically, the below method will give you all upgrades as well as unlocks all types of buildings. Additionally, you will get 1.000 nonillion cookies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RuinTheFun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;Now you might be wondering can we hack other browser-based games too?&lt;/p&gt;

&lt;p&gt;And the answer is "Yes, definitely!"&lt;/p&gt;

&lt;p&gt;You can hack any game no matter whether it is browser-based, Android, or even PC.&lt;/p&gt;

&lt;p&gt;I would like to mention that I learned game hacking from &lt;a href="https://guidedhacking.com/"&gt;guidedhacking.com&lt;/a&gt;. It is the best community forum that helps us understand all the concepts of game hacking in a step-by-step manner.&lt;/p&gt;

&lt;p&gt;Spend some time there!&lt;/p&gt;

&lt;p&gt;You'll find game hacking tutorials and guides right from their main menu. If you find something difficult then you can always ask questions from fellow hackers.&lt;/p&gt;

&lt;p&gt;At last, I would say that game hacking is not very difficult. It just depends on how much time you can dedicate to learn it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Use Mac APIs and build Mac apps with Go</title>
      <author>Jeff Lindsay</author>
      <pubDate>Tue, 02 Feb 2021 17:31:33 +0000</pubDate>
      <link>https://dev.to/progrium/use-mac-apis-and-build-mac-apps-with-go-ap6</link>
      <guid>https://dev.to/progrium/use-mac-apis-and-build-mac-apps-with-go-ap6</guid>
      <description>&lt;p&gt;If you work with Apple devices and you're a Go programmer, or are thinking about learning Go, we just got some new powers that are pretty cool. Today I'm releasing an alpha of &lt;a href="https://github.com/progrium/macdriver"&gt;macdriver&lt;/a&gt;, an Objective-C bridge for Go with bindings to common Mac APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/progrium/macdriver"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGWskN0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/progrium/macdriver/raw/main/macdriver.gif" alt="macdriver logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those that were paying attention to my last post about &lt;a href="https://dev.to/progrium/large-type-legacy-celebrated-in-80-line-go-program-1mob"&gt;Large Type in 80 lines of Go&lt;/a&gt; might have already found macdriver. The largetype program is one of the example projects for macdriver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/707db8e6d47c31ed90f0a65aeea1b805c718b1c18a2cd61b94e1ebb932b091af/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f4571616f4f324d584941454a4e4b323f666f726d61743d6a7067266e616d653d6c61726765" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/707db8e6d47c31ed90f0a65aeea1b805c718b1c18a2cd61b94e1ebb932b091af/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f4571616f4f324d584941454a4e4b323f666f726d61743d6a7067266e616d653d6c61726765" alt="largetype screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another example in the macdriver repo is this little menu bar extra (aka systray or status icon) that gives you a Pomodoro timer. This little program is &lt;em&gt;also&lt;/em&gt; &lt;a href="https://github.com/progrium/macdriver/blob/main/examples/pomodoro/main.go"&gt;less than 80 lines of Go&lt;/a&gt; using macdriver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oRrArg1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/progrium/macdriver/raw/main/examples/pomodoro/pomodoro.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oRrArg1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/progrium/macdriver/raw/main/examples/pomodoro/pomodoro.gif%3Fraw%3Dtrue" alt="pomodoro screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, if you've been playing with the Go 1.16 beta, or can wait for its imminent release, there is also an example that gives you a full screen webview with a transparent background, letting you draw overlays and such on your screen using web tech. Twitch streamers might be into that one. Pretty cool, yea?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#years-in-the-making" class="anchor"&gt;
  &lt;/a&gt;
  Years in the making
&lt;/h2&gt;

&lt;p&gt;The motivation for macdriver was just making applications in Go that use Mac system APIs like Cocoa for making GUI apps. That said, most of my work now uses web tech for user interfaces, a la Electron.  &lt;/p&gt;

&lt;p&gt;Last year I started an alternative Electron stack in Go using the &lt;a href="https://github.com/webview/webview"&gt;webview&lt;/a&gt; project, which uses your platform's native browser engine and makes a window with a webview. While absolutely simple and cross platform, the project has not been prioritizing any platform specific functionality. &lt;/p&gt;

&lt;p&gt;On top of this, if you want to also make a little menu applet like the Pomodoro timer in the same program (not... uncommon), you can find another standalone cross platform Go library for systray stuff, but these one-off libraries often suffer from being incomplete APIs. More importantly they are not composable! You can't use the systray library with the webview library because they both presume to own the main Cocoa thread. &lt;/p&gt;

&lt;p&gt;So as usual, I was frustrated there wasn't a broader thought out, more general solution. What do I do if I wanted to use some other Mac API? Wait for another incomplete, non-composable project? No, we build our own future here. &lt;/p&gt;

&lt;p&gt;I've actually been working on this (and so many other things) for a few years. I even found an &lt;a href="https://github.com/mkrautz/objc"&gt;Objective-C bridge for Go&lt;/a&gt; by a Danish fellow named Mikkel from &lt;em&gt;2013&lt;/em&gt;, except... it didn't work.&lt;/p&gt;

&lt;p&gt;This whole thing &lt;em&gt;should&lt;/em&gt; be straightforward. The &lt;a href="https://developer.apple.com/documentation/objectivec/objective-c_runtime"&gt;Objective-C runtime&lt;/a&gt; is actually a C library called libobjc. So in theory you should be able to use cgo to call libobjc and work with Objective-C objects from Go like any other C library. &lt;/p&gt;

&lt;p&gt;Unfortunately, the method calling functions in libobjc, to be generic to any method call, are variadic (takes arbitrary number of arguments). Cgo doesn't support variadic function calls! So Mikkel did an &lt;a href="https://github.com/mkrautz/variadic"&gt;assembly hack&lt;/a&gt; to make nearly any variadic C function callable. Amazing! But since 2013, changes to the Go runtime broke this and he had long since moved on to other projects. &lt;/p&gt;

&lt;p&gt;With some determination I got the variadic hack working again. I even forgot I posted about this &lt;a href="https://dev.to/progrium/start-of-an-objective-c-bridge-in-go-ep9"&gt;on dev.to in 2018&lt;/a&gt;. There were still more things to figure out, but I shelved it until early last year when I needed to solve this webview and systray composability problem. I brought in the abandoned objc bridge package, the variadic package I fixed, and started making native Go wrappers for some of the more common Mac APIs. The result was macdriver!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits" class="anchor"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;p&gt;Now you can make fast, machine native binaries in Go that do Mac things. And I don't just mean make MacOS apps. There are a lot of APIs that just open up new possibilities. For example, I'm excited to use the Core ML APIs for working with the Neural Engine on the new M1 devices. &lt;/p&gt;

&lt;p&gt;Another benefit is just being able to quickly make Mac apps using the Go build toolchain. No more Xcode! Just &lt;code&gt;go build&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next" class="anchor"&gt;
  &lt;/a&gt;
  What Next
&lt;/h2&gt;

&lt;p&gt;I'm excited to see what people do with macdriver. There's lots more information on using it in &lt;a href="https://github.com/progrium/macdriver"&gt;the README&lt;/a&gt;, but I am still working on docs. At this point it should mostly be self explanatory, but feel free to ask questions in &lt;a href="https://github.com/progrium/macdriver/discussions"&gt;the forum&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you're interested in exploring new possibilities with me, I've been meaning to try using macdriver for an Apple Watch app. There was an iOS proof of concept in the original bridge package by Mikkel, but I haven't tried it. Assuming it works (which may involve Xcode or other developer tools), it seems plausible it would also work for the Apple Watch or even... the Apple TV. &lt;/p&gt;

&lt;p&gt;Thanks for reading, have fun, and &lt;a href="https://github.com/sponsors/progrium"&gt;consider sponsoring my work&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>go</category>
      <category>showdev</category>
      <category>productivity</category>
      <category>mac</category>
    </item>
  </channel>
</rss>
