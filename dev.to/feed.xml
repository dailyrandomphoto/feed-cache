<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tips about Splunk Timecharts</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 07 Dec 2021 11:26:32 +0000</pubDate>
      <link>https://dev.to/adaendra/tips-about-splunk-timecharts-13d2</link>
      <guid>https://dev.to/adaendra/tips-about-splunk-timecharts-13d2</guid>
      <description>&lt;p&gt;In some requests or in some dashboards, you want to have a timechart to visualize &lt;em&gt;(for example)&lt;/em&gt; how much calls you receive for an operation.&lt;/p&gt;

&lt;p&gt;So here are 2 tips which can help you to work with!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#span"&gt;
  &lt;/a&gt;
  Span
&lt;/h2&gt;

&lt;p&gt;By default, the timechart will group the data with a span depending of the time period you choose. But maybe you want to fix this span a particular value.&lt;br&gt;
So here is the parameter&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;timechart &lt;strong&gt;span=&lt;/strong&gt;&lt;em&gt;[time]&lt;/em&gt; ...&lt;br&gt;
Where &lt;strong&gt;time&lt;/strong&gt; is a number associated with a letter to define the time span.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#letters-available"&gt;
  &lt;/a&gt;
  Letters available
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;s&lt;/strong&gt; - &lt;em&gt;second&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;m&lt;/strong&gt; - &lt;em&gt;minute&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;h&lt;/strong&gt; - &lt;em&gt;hour&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;d&lt;/strong&gt; - &lt;em&gt;day&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;w&lt;/strong&gt; - &lt;em&gt;week&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# 1 hour span
index=application_a | timechart span=1h count by name

# 10 seconds span
index=application_b | timechart span=10s count by title
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#thing-to-avoid"&gt;
  &lt;/a&gt;
  Thing to avoid
&lt;/h2&gt;

&lt;p&gt;When you are using the timechart, avoid to have a "&lt;strong&gt;sort&lt;/strong&gt;" in it. It won't be useful and it can alter your result.&lt;/p&gt;

&lt;p&gt;In a larger way, be sure to remove all the treatments which are not useful for your request. It will take more time for your request to be executed and as said, you can retrieve a false result.&lt;/p&gt;




&lt;p&gt;I hope it will help you! üç∫&lt;/p&gt;

</description>
      <category>splunk</category>
      <category>monitoring</category>
      <category>sre</category>
    </item>
    <item>
      <title>How to create a parallax on pure Javascript</title>
      <author>Anton</author>
      <pubDate>Tue, 07 Dec 2021 10:58:24 +0000</pubDate>
      <link>https://dev.to/antmik/how-to-create-a-parallax-on-pure-javascript-5hgj</link>
      <guid>https://dev.to/antmik/how-to-create-a-parallax-on-pure-javascript-5hgj</guid>
      <description>&lt;p&gt;Everyone at least once has seen parallax effects on a website. They could‚Äôve been simple. Such as a static background on a specific spot while scrolling. On the other hand, these effects can be extremely complex. However usually visually this effect looks impressive.&lt;/p&gt;

&lt;p&gt;Parallax always amazed me. How it‚Äôs done in web development. It seemed to me so complex and unachievable. Then after a couple of years of contemplation of beautiful websites using this technique I decided to give it a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is parallax?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The meaning of the word ‚Äúparallax‚Äù refers to a specific technique used in computer graphics. Multiple layers move at different speeds, while the user scrolls a webpage. This number of movements creates an optical illusion. To be honest the technique is not new. Ii was used in the early 1980‚Äôs Super Mario Bros game to create the sensation of depth. Then this graphic trick got a second life in web design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tech stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As already mentioned above here I used vanillaJS (pure JavaScript). Pug templating language was used to accelerate work with HTML. As well as SCSS instead of pure CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What was created and how it works?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It started as an experiment. Though at the end turned into a small library. It requires a small HTML and a few Javascript functions. We have specific classes. Each &lt;code&gt;.prlx-item-inner&lt;/code&gt; can have an animation. Also, each one can have multiple animations. So you can combine for instance zoom with spinning.&lt;/p&gt;

&lt;p&gt;This code can be used on any HTML website. Javascript &lt;em&gt;&lt;code&gt;(function () {} )&lt;/code&gt;&lt;/em&gt; wrapping will prevent conflicting with any other library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reusable classes list&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Directional movements classes: let, right,top,bottom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;speed- ‚Äî Can have any number. Ex.: &lt;code&gt;speed-3&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;spin ‚Äî spinning object&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;zoom ‚Äî zooms out&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;To structure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The basic elements needed for this are the container and the number of inside elements which gonna is moving on scroll.&lt;/p&gt;

&lt;p&gt;Here is the HTML code: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#prlx-container
  .text-top
    p Scroll down to see the parallax effect
  .row
    .prlx-item
      .prlx-item-inner.left.speed-3
    .prlx-item
      .prlx-item-inner.top.speed-2.spin
    .prlx-item
      .prlx-item-inner.right
    .prlx-item
      .prlx-item-inner.left.speed-5
    .prlx-item
      .prlx-item-inner.zoom.speed-2
    .prlx-item
      .prlx-item-inner.right.speed-5
    .prlx-item
      .prlx-item-inner.left
    .prlx-item
      .prlx-item-inner.bottom
    .prlx-item
      .prlx-item-inner.right.spin
  .side-dots
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In this example I set &lt;code&gt;.row&lt;/code&gt; element as &lt;em&gt;&lt;code&gt;position:fixed;&lt;/code&gt;&lt;/em&gt;. So it‚Äôs always will be visible.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;.prlx-item-inner&lt;/em&gt; has to be &lt;em&gt;position:absolute;&lt;/em&gt; this way we can control it with x,y (top, left) coordinates. It‚Äôs parent &lt;em&gt;.prlx-item&lt;/em&gt; is &lt;em&gt;position: relative;&lt;/em&gt;. That way it‚Äôs children will move relatively to the parent instead moving relatively the whole viewport.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are three functions responsible for movements. &lt;code&gt;zoom()&lt;/code&gt;, &lt;code&gt;spin()&lt;/code&gt;, &lt;code&gt;move()&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;checkMovement()&lt;/code&gt; check which direction, speed and animation type is set to an element. Then&lt;code&gt;bindMovementsToElement()&lt;/code&gt; binds specific animations to an html element.&lt;/p&gt;

&lt;p&gt;At the end of the file we have &lt;em&gt;&lt;code&gt;window.addEventListener(‚Äòscroll‚Äô, ()=&amp;gt;{})&lt;/code&gt;&lt;/em&gt; event which triggered each time scrolling happens and activates animations on html elements.&lt;/p&gt;

&lt;p&gt;That‚Äôs it. Nothing more. The code is simple and quick.&lt;/p&gt;

&lt;p&gt;Here is the code itself:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/AntM/embed/YRMoLo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It started as an experiment. Though at the end turned into a small library. Maybe one day I will publish it on github. At the moment anyone can try it on codepen and use on his own website.&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Cross browser speech synthesis - the hard way and the easy way</title>
      <author>Jan K√ºster</author>
      <pubDate>Tue, 07 Dec 2021 10:42:24 +0000</pubDate>
      <link>https://dev.to/jankapunkt/cross-browser-speech-synthesis-the-hard-way-and-the-easy-way-353</link>
      <guid>https://dev.to/jankapunkt/cross-browser-speech-synthesis-the-hard-way-and-the-easy-way-353</guid>
      <description>&lt;p&gt;When I implemented my first speech-synthesis app using the &lt;a href="https://wicg.github.io/speech-api/"&gt;&lt;code&gt;Web Speech API&lt;/code&gt;&lt;/a&gt; I was shocked how hard it was to setup and execute it with cross-browser support in mind: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some browsers don't support &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis"&gt;speech synthesis&lt;/a&gt; at all, for instance IE (at least I don't care ü§∑‚Äç‚ôÇÔ∏è) and Opera (I do care üò†) and a few more mobile browsers (I haven't decided yet, whether I care or not ü§î). &lt;/li&gt;
&lt;li&gt;On top of that, each browser implements the API differently or with some specific quirks the other browsers don't have&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Just try it yourself&lt;/strong&gt; - go to and execute the &lt;a href="https://mdn.github.io/web-speech-api/speak-easy-synthesis/"&gt;MDN speech synthesis example&lt;/a&gt; on different browsers and different platforms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux, Windows, MacOS, BSD, Android, iOS&lt;/li&gt;
&lt;li&gt;Firefox, Chrome, Chromium, Safari, Opera, Edge, IE, Samsung Browser, Android Webview, Safari on iOS, Opera Mini&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will realize that this example will only work on a subset of these platform-browser combinations. Worst: when you start researching you'll get shocked how quirky and underdeveloped this whole API still is in 2021/2022.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To be fair:&lt;/strong&gt; it is still labeled as experimental technology. However, it's almost &lt;a href="https://www.w3.org/2005/Incubator/htmlspeech/XGR-htmlspeech-20111206/"&gt;10 years&lt;/a&gt; now, since it has been drafted and still is not a living standard.&lt;/p&gt;

&lt;p&gt;This makes it much harder to leverage for our applications and I hope this guide I will help you to get the most out of it for as many browsers as possible.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#minimal-example"&gt;
  &lt;/a&gt;
  Minimal example
&lt;/h2&gt;

&lt;p&gt;Let's approach this topic step-by-step and start with a minimal example that all browsers (that generally support speech synthesis) should run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;speechSynthesis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can simply copy that code and execute it in your browser console.&lt;/p&gt;

&lt;p&gt;If you have basic support you will hear some "default" voice speaking the text &lt;code&gt;'Hello, world!'&lt;/code&gt; and it may sound natural or not, depending on the default "voice" that is used.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#loading-voices"&gt;
  &lt;/a&gt;
  Loading voices
&lt;/h2&gt;

&lt;p&gt;Browsers may detect your current language and select a default voice, if installed. However, this may not represent the desired language you'd like to hear for the text to be spoken.&lt;/p&gt;

&lt;p&gt;In such case you need to load the list of voices, which are instances of &lt;code&gt;SpeechSynthesisVoice&lt;/code&gt;. This is the first greater obstacle where browsers behave quite differently:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load voices sync-style&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="c1"&gt;// Array of voices or empty if none are installed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Firefox and Safari Desktop just load the voices immediately in sync-style. This however would return an empty array on Chrome Desktop, Chrome Android and &lt;strong&gt;may&lt;/strong&gt; return an empty Array on Firefox Android (see next section).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load voices async-style&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onvoiceschanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="c1"&gt;// Array of voices or empty if none are installed&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This methods loads the voices async, so your overall system needs a callback or wrap it with a &lt;code&gt;Promise&lt;/code&gt;. Firefox Desktop does not support this method at all, although it's defined as property of &lt;code&gt;window.speechSynthesis&lt;/code&gt;, while Safari does not have it at all.&lt;/p&gt;

&lt;p&gt;In contrast: Firefox Android loads the voices the first time using this method and on a refresh has them available via the sync-style method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loading using interval&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some users of older Safari have reported that their voices are not available immediately (while &lt;code&gt;onvoiceschanged&lt;/code&gt; is not available, too). For this case we need to check in a constant interval for the voices:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadVoices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;maxTimeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loadVoices max timeout exceeded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;loadVoices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;loadVoices&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="c1"&gt;// voices loaded and available&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#speaking-with-a-certain-voice"&gt;
  &lt;/a&gt;
  Speaking with a certain voice
&lt;/h2&gt;

&lt;p&gt;There are use-cases, where the default selected voice is not the same language as the text to be spoken. We need to change the voice for the "utterance" to speak.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-get-a-voice-by-a-given-language"&gt;
  &lt;/a&gt;
  Step 1: get a voice by a given language
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// assume voices are loaded, see previous section&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getVoicebyLang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;voice&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;voice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;german&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getVoicebyLang&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;de&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note: Voices have standard language codes, like &lt;code&gt;en-GB&lt;/code&gt; or &lt;code&gt;en-US&lt;/code&gt; or &lt;code&gt;de-DE&lt;/code&gt;. However, on Android's Samsung Browser or Android Chrome voices have underscore-connected codes, like &lt;code&gt;en_GB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then on Firefox android voices have three characters before the separator, like &lt;code&gt;deu-DEU-f00&lt;/code&gt; or &lt;code&gt;eng-GBR-f00&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, they all start with the language code so passing a two-letter short-code should be sufficient.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2-create-a-new-utterance"&gt;
  &lt;/a&gt;
  Step 2: create a new utterance
&lt;/h3&gt;

&lt;p&gt;We can now pass the voice to a new &lt;code&gt;SpeechSynthesisUtterance&lt;/code&gt; and as your precognitive abilities correctly manifest - there are again some browser-specific issues to consider:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Guten Tag!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;utterance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// I found no browser yet that does not support text&lt;/span&gt;
  &lt;span class="c1"&gt;// as constructor arg but who knows!?&lt;/span&gt;
  &lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;voice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;german&lt;/span&gt; &lt;span class="c1"&gt;// ios required&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;voice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="c1"&gt;// // Android Chrome required&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;voiceURI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;voice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;voiceURI&lt;/span&gt; &lt;span class="c1"&gt;// Who knows if required?&lt;/span&gt;

&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pitch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;// API allows up to 10 but values &amp;gt; 2 break on all Chrome&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can now pass the utterance to the speak function as a preview:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// speaks 'Guten Tag!' in German&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-events-and-speak"&gt;
  &lt;/a&gt;
  Step 3: add events and speak
&lt;/h3&gt;

&lt;p&gt;This is of course just the half of it. We actually want to get deeper insights of what's happening and what's missing by tapping into some of the utterance's events:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onstart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// SSML markup is rarely supported&lt;/span&gt;
&lt;span class="c1"&gt;// See: https://www.w3.org/TR/speech-synthesis/&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;

&lt;span class="c1"&gt;// word boundaries are supported by&lt;/span&gt;
&lt;span class="c1"&gt;// Safari MacOS and on windows but&lt;/span&gt;
&lt;span class="c1"&gt;// not on Linux and Android browsers&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onboundary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;

&lt;span class="c1"&gt;// not supported / fired&lt;/span&gt;
&lt;span class="c1"&gt;// on many browsers somehow&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onpause&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onresume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;

&lt;span class="c1"&gt;// finally speak and log all the events&lt;/span&gt;
&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-4-chromespecific-fix"&gt;
  &lt;/a&gt;
  Step 4: Chrome-specific fix
&lt;/h3&gt;

&lt;p&gt;Longer texts on Chrome-Desktop will be cancelled automatically after 15 seconds. This can be fixed by either chunking the texts or by using an interval of "zero"-latency pause/resume combination. At the same time this fix breaks on Android, since Android devices don't implement &lt;code&gt;speechSynthesis.pause()&lt;/code&gt; as pause but as cancel:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt;

&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onstart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// detection is up to you for this article as&lt;/span&gt;
  &lt;span class="c1"&gt;// this is an own huge topic for itself&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isAndroid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resumeInfinity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resumeInfinity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// prevent memory-leak in case utterance is deleted, while this is ongoing&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resumeInfinity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Furthermore, some browser don't update the &lt;code&gt;speechSynthesis.paused&lt;/code&gt; property when &lt;code&gt;speechSynthesis.pause()&lt;/code&gt; is executed (and speech is correctly paused). You need to manage these states yourself then.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#issues-that-cant-be-fixed-with-javascript"&gt;
  &lt;/a&gt;
  Issues that can't be fixed with JavaScript:
&lt;/h2&gt;

&lt;p&gt;All the above fixes rely on JavaScript but some issues are platform-specific. You need to your app in a way to avoid these issues, where possible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All browsers on Android actually do a cancel/stop when calling &lt;code&gt;speechSynthesis.pause&lt;/code&gt;; pause is simply not supported on Android üëé&lt;/li&gt;
&lt;li&gt;There are no voices on Chromium-Ubuntu and Ubuntu-derivatives unless the browser is started with a flag üëé&lt;/li&gt;
&lt;li&gt;If on Chromium-Desktop Ubuntu and the very first page wants to load speech synthesis, then there are no voices ever loaded until the page is refreshed or a new page is entered. This can be fixed with JavaScript but it can lead to very bad UX to auto-refresh the page. üëé&lt;/li&gt;
&lt;li&gt;If voices are not installed on the host-OS and there are no voices loaded from remote by the browser, then there are no voices and thus no speech synthesis üëé&lt;/li&gt;
&lt;li&gt;There is no chance to just instant-load custom voices from remote and use them as a shim in case there are no voices üëé&lt;/li&gt;
&lt;li&gt;If the installed voices are just bad users have to manually install better voices üëé&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#making-your-life-easier-with-raw-easyspeech-endraw-"&gt;
  &lt;/a&gt;
  Making your life easier with &lt;code&gt;EasySpeech&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Now you have seen the worst and believe me, it takes ages to implement all potential fixes.&lt;/p&gt;

&lt;p&gt;Fortunately I already did this and published a package to NPM with the intent to provide a common API that handles most issues internally and provide the same experience across browsers (that support &lt;code&gt;speechSynthesis&lt;/code&gt;):&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jankapunkt"&gt;
        jankapunkt
      &lt;/a&gt; / &lt;a href="https://github.com/jankapunkt/easy-speech"&gt;
        easy-speech
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Cross browser Speech Synthesis
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Easy Speech&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://standardjs.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bde227e3207c7143032c0feb73889ffbda8eb1ef234b820b915ccaf74f9c66d7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d7374616e646172642d627269676874677265656e2e737667" alt="JavaScript Style Guide"&gt;&lt;/a&gt;
&lt;a href="https://www.repostatus.org/#active" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active ‚Äì The project has reached a stable, usable state and is being actively developed."&gt;&lt;/a&gt;
&lt;a href="https://github.com/jankapunkt/easy-speech/actions/workflows/tests.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--epeI6eag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jankapunkt/easy-speech/actions/workflows/tests.yml/badge.svg" alt="Test suite"&gt;&lt;/a&gt;
&lt;a href="https://github.com/jankapunkt/easy-speech/actions/workflows/codeql-analysis.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nj5PvfWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jankapunkt/easy-speech/actions/workflows/codeql-analysis.yml/badge.svg" alt="CodeQL Semantic Analysis"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8941ce460d3b29a0251d69254408f9a6e4a933d267a4316a4108416b1860cda4/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f656173792d737065656368"&gt;&lt;img src="https://camo.githubusercontent.com/8941ce460d3b29a0251d69254408f9a6e4a933d267a4316a4108416b1860cda4/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f656173792d737065656368" alt="npm"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b164de05851de3a51ddeba04db3bef0713f150f9df29a855638ded9cec2fc305/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e2f656173792d737065656368"&gt;&lt;img src="https://camo.githubusercontent.com/b164de05851de3a51ddeba04db3bef0713f150f9df29a855638ded9cec2fc305/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e2f656173792d737065656368" alt="npm bundle size"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/fc3e1111654817a8302274b84a09df2ecf166ede7a1de2ea4f346ddb5d715885/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f656173792d737065656368"&gt;&lt;img src="https://camo.githubusercontent.com/fc3e1111654817a8302274b84a09df2ecf166ede7a1de2ea4f346ddb5d715885/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f656173792d737065656368" alt="npm bundle size"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cross browser Speech Synthesis&lt;/p&gt;
&lt;p&gt;This project was created, because it's always a struggle to get the synthesis
part of &lt;code&gt;Web Speech API&lt;/code&gt; running on most major browsers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this is not a polyfill package, if your target browser does not
support speech synthesis or the Web Speech API, this package is not usable.&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;Install from npm via&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;$ npm install easy-speech&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Import &lt;code&gt;EasySpeech&lt;/code&gt; and first, detect, if your browser is capable of tts (text
to speech):&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;EasySpeech&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'easy-speech'&lt;/span&gt;
&lt;span class="pl-v"&gt;EasySpeech&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;detect&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;it returns an Object with the following information:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;speechSynthesis&lt;/span&gt;: &lt;span class="pl-v"&gt;SpeechSynthesis&lt;/span&gt;&lt;span class="pl-c1"&gt;|&lt;/span&gt;&lt;span class="pl-c1"&gt;undefined&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;speechSynthesisUtterance&lt;/span&gt;: &lt;span class="pl-v"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="pl-c1"&gt;|&lt;/span&gt;&lt;span class="pl-c1"&gt;undefined&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;speechSynthesisVoice&lt;/span&gt;: &lt;span class="pl-v"&gt;SpeechSynthesisVoice&lt;/span&gt;&lt;span class="pl-c1"&gt;|&lt;/span&gt;&lt;span class="pl-c1"&gt;undefined&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;speechSynthesisEvent&lt;/span&gt;: &lt;span class="pl-v"&gt;SpeechSynthesisEvent&lt;/span&gt;&lt;span class="pl-c1"&gt;|&lt;/span&gt;&lt;span class="pl-c1"&gt;undefined&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;speechSynthesisErrorEvent&lt;/span&gt;: &lt;span class="pl-v"&gt;SpeechSynthesisErrorEvent&lt;/span&gt;&lt;span class="pl-c1"&gt;|&lt;/span&gt;&lt;span class="pl-c1"&gt;undefined&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;onvoiceschanged&lt;/span&gt;: &lt;span class="pl-v"&gt;Boolean&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;onboundary&lt;/span&gt;: &lt;span class="pl-v"&gt;Boolean&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;onend&lt;/span&gt;: &lt;span class="pl-v"&gt;Boolean&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;onerror&lt;/span&gt;: &lt;span class="pl-v"&gt;Boolean&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;onmark&lt;/span&gt;: &lt;span class="pl-v"&gt;Boolean&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;onpause&lt;/span&gt;: &lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jankapunkt/easy-speech"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should give it a try if you want to implement speech synthesis the next time. It also comes with a DEMO page so you can easy test and debug your devices there: &lt;a href="https://jankapunkt.github.io/easy-speech/"&gt;https://jankapunkt.github.io/easy-speech/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look how it works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;EasySpeech&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;easy-speech&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// sync, returns Object with detected features&lt;/span&gt;
&lt;span class="nx"&gt;EasySpeech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;EasySpeech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no speech synthesis:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;EasySpeech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will not only detect, which features are available but also loads an optimal default voice, based on a few heuristics.&lt;/p&gt;

&lt;p&gt;Of course there is much more to use and the full API is also documented via JSDoc: &lt;a href="https://github.com/jankapunkt/easy-speech/blob/master/API.md"&gt;https://github.com/jankapunkt/easy-speech/blob/master/API.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like it leave a star and please file an issue if you found (yet another) browser-specific issue.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wicg.github.io/speech-api/#tts-section"&gt;https://wicg.github.io/speech-api/#tts-section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis"&gt;https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/alrra/6741915"&gt;https://gist.github.com/alrra/6741915&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ubershmekel/audio-language-tests"&gt;https://github.com/ubershmekel/audio-language-tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/33889107/speech-synthesis-in-chrome-for-android-not-loading-voices"&gt;https://stackoverflow.com/questions/33889107/speech-synthesis-in-chrome-for-android-not-loading-voices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/49506716/speechsynthesis-getvoices-returns-empty-array-on-windows"&gt;https://stackoverflow.com/questions/49506716/speechsynthesis-getvoices-returns-empty-array-on-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/21947730/chrome-speech-synthesis-with-longer-texts"&gt;https://stackoverflow.com/questions/21947730/chrome-speech-synthesis-with-longer-texts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/34130734"&gt;https://stackoverflow.com/a/34130734&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/68060634"&gt;https://stackoverflow.com/a/68060634&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/48056986"&gt;https://stackoverflow.com/a/48056986&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=582455"&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=582455&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/65883556"&gt;https://stackoverflow.com/a/65883556&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>browser</category>
      <category>javascript</category>
      <category>standards</category>
    </item>
    <item>
      <title>Should you optimize every re-render?</title>
      <author>Kevin Farrugia</author>
      <pubDate>Tue, 07 Dec 2021 10:35:35 +0000</pubDate>
      <link>https://dev.to/imkevdev/should-you-optimize-every-re-render-56me</link>
      <guid>https://dev.to/imkevdev/should-you-optimize-every-re-render-56me</guid>
      <description>&lt;p&gt;Cross-posted from &lt;a href="https://imkev.dev/optimizing-rerenders"&gt;https://imkev.dev/optimizing-rerenders&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the more frequent discussions I have with my colleagues is whether we should be investing the effort to optimize a React re-render (re-render).&lt;/p&gt;

&lt;p&gt;React determines which components need to be re-rendered during the &lt;code&gt;render&lt;/code&gt; phase. During this phase, React traverses the &lt;code&gt;current&lt;/code&gt; Fiber tree and creates a list of &lt;a href="https://reactjs.org/docs/hooks-overview.html#effect-hook"&gt;effects&lt;/a&gt; that need to be applied to the Fiber nodes. The &lt;code&gt;current&lt;/code&gt; tree reflects the state of the application that was used to render the UI. As React processes effects, it clones the current tree and performs these updates on the &lt;code&gt;current&lt;/code&gt; tree, resulting in a new &lt;code&gt;workInProgress&lt;/code&gt; tree. Once all updates are processed, React will flush the &lt;code&gt;workInProgress&lt;/code&gt; tree to the DOM and this will become the &lt;code&gt;current&lt;/code&gt; tree. If you're interested in more detail, I cover the &lt;a href="https://dev.to/react-reconciliation-performance-measures"&gt;React Reconciliation&lt;/a&gt; algorithm in a separate post.&lt;/p&gt;

&lt;p&gt;A render is usually required whenever your props or state change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, if &lt;code&gt;data&lt;/code&gt; changes, then we need to re-render the component with the latest values so these changes are reflected on the screen. Since we know that the component's output is dependent on &lt;code&gt;data&lt;/code&gt;, if &lt;code&gt;data&lt;/code&gt; does not change, then there is no need to recalculate the output as that is also unchanged. This allows us to use &lt;a href="https://reactjs.org/docs/react-api.html#reactmemo"&gt;&lt;code&gt;React.memo&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://reactjs.org/docs/react-api.html#reactpurecomponent"&gt;&lt;code&gt;React.PureComponent&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What we &lt;em&gt;do not&lt;/em&gt; want, is to re-render the component when &lt;code&gt;data&lt;/code&gt; does not change. This is what I refer to as an &lt;em&gt;unnecessary re-render&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-all-rerenders-are-bad"&gt;
  &lt;/a&gt;
  Not all re-renders are bad
&lt;/h2&gt;

&lt;p&gt;Not all re-renders are equal. Some re-renders are more CPU intensive than others. You may debug React re-rendering using the &lt;a href="https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab"&gt;React Profiler&lt;/a&gt; Chrome extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="/media/blog/rerendering.png" class="article-body-image-wrapper"&gt;&lt;img src="/media/blog/rerendering.png" alt="Chrome DevTools React Profiler showing two panels. Left panel shows components which have been re-rendered. Right panel shows time spent on each re-render" title="React Profiler"&gt;&lt;/a&gt; {.centered}&lt;/p&gt;

&lt;p&gt;The left column shows which components have been re-rendered, while the right column shows you how many times the component has re-rendered. Each re-rendering also includes the component's self-time - the time it takes to execute the &lt;code&gt;render()&lt;/code&gt; method for that component.&lt;/p&gt;

&lt;p&gt;In most cases, the time spent rendering each component is a few milliseconds. This has led to the argument that &lt;a href="https://mobile.twitter.com/iamakulov/status/1362397452884717571"&gt;not all unnecessary re-renders are bad&lt;/a&gt;; a statement I have to disagree with*.&lt;/p&gt;

&lt;p&gt;While not all re-renders are equally important, I believe that &lt;em&gt;all&lt;/em&gt; unnecessary re-renders should be eliminated to improve your applications reliability.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ClickCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Update counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demo: &lt;a href="https://codesandbox.io/s/re-rendering-demo-cpo2g?file=/src/ClickCounter.js"&gt;/src/ClickCounter.js&lt;/a&gt; {.caption}&lt;/p&gt;

&lt;p&gt;Whenever &lt;code&gt;count&lt;/code&gt; is updated, &lt;code&gt;MyComponent&lt;/code&gt; will be re-rendered, even if it is not dependent on &lt;code&gt;count&lt;/code&gt;. This is caused as you are passing a new array reference on each render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The correct solution would be to create a constant and place it outside of the &lt;code&gt;ClickCounter&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ClickCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Update counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demo: &lt;a href="https://codesandbox.io/s/re-rendering-demo-solution-k6p0z?file=/src/ClickCounter.js"&gt;/src/ClickCounter.js&lt;/a&gt; {.caption}&lt;/p&gt;

&lt;p&gt;This no longer renders &lt;code&gt;MyComponent&lt;/code&gt; whenever the user clicks on the &lt;code&gt;button&lt;/code&gt; to update &lt;code&gt;count&lt;/code&gt;. But how much faster is our application following this optimization? Most likely, the improvements are negligible. So does this mean you shouldn't bother optimizing your re-renders?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demo: &lt;a href="https://codesandbox.io/s/re-rendering-demo-bug-tbkhm?file=/src/Demo.js"&gt;/src/Demo.js&lt;/a&gt; { .caption }&lt;/p&gt;

&lt;p&gt;In the example above, we have two instances of &lt;code&gt;MyComponent&lt;/code&gt;; one which re-renders on each render and one which is correctly optimized. The &lt;code&gt;Demo&lt;/code&gt; itself component will render whenever &lt;code&gt;location&lt;/code&gt; changes, using the &lt;code&gt;useLocation&lt;/code&gt; hook from &lt;a href="https://reactrouter.com/"&gt;React Router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In most cases, these two components will behave identically. But in the first &lt;code&gt;MyComponent&lt;/code&gt;, there is the premise for obscure bugs which would be hidden by causing the component to needlessly re-render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demo: &lt;a href="https://codesandbox.io/s/re-rendering-demo-bug-tbkhm?file=/src/MyComponent.js"&gt;/src/MyComponent.js&lt;/a&gt; { .caption }&lt;/p&gt;

&lt;p&gt;If the rendered output of a component is dependent on more than its props, then needlessly re-rendering the component may hide this issue. In &lt;code&gt;MyComponent&lt;/code&gt;, the rendered output includes the &lt;code&gt;location.pathname&lt;/code&gt;, which would change whenever the URL changes. If the component does not re-render, then the updated &lt;code&gt;location.pathname&lt;/code&gt; would not be visible on the screen. As a result, the &lt;code&gt;MyComponent&lt;/code&gt; which needlessly re-renders would reflect this change on the next render, while the optimized component would not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course in this example, we are simplifying things greatly and the issue is both easy to find and fix. However, from my experience, sometimes these bugs could go unnoticed for a very long time, making them very difficult to debug and eventually resolve.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-unnecessary-rerenders"&gt;
  &lt;/a&gt;
  Other unnecessary re-renders
&lt;/h3&gt;

&lt;p&gt;There are other forms of unnecessary renders. Similar to the new array reference, passing an object or a function will cause the component to re-render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This could be mitigated by either placing the object outside of the component's render method or memoizing the prop using &lt;a href="https://reactjs.org/docs/hooks-reference.html#usememo"&gt;&lt;code&gt;React.useMemo&lt;/code&gt;&lt;/a&gt;. The latter is usually required if the prop is dependent on other prop or state variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt;
    &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React includes &lt;a href="https://reactjs.org/docs/hooks-reference.html#usecallback"&gt;&lt;code&gt;React.useCallback&lt;/code&gt;&lt;/a&gt; which returns a memoized callback function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClickHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Passing a React component as a prop will have a similar effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And once again, the recommended solution is similar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While the performance improvements from optimizing every render may not always be significant, maintaining a &lt;a href="https://en.wikipedia.org/wiki/Pure_function"&gt;pure&lt;/a&gt; codebase makes your work more predictable. If the output of every component is dependent on its inputs, then you minimize the risk of unwanted side effects. And you also get good performance "out-of-the-box".&lt;/p&gt;

&lt;p&gt;Let me know what you think. ü§ô&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommended-reading"&gt;
  &lt;/a&gt;
  Recommended Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react"&gt;Inside Fiber: in-depth overview of the new reconciliation algorithm in React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://indepth.dev/posts/1009/in-depth-explanation-of-state-and-props-update-in-react"&gt;In-depth explanation of state and props update in React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;&lt;a href="https://mobile.twitter.com/iamakulov"&gt;Ivan Akulov&lt;/a&gt; is an expert on web performance and I recommend reading &lt;a href="https://3perf.com/"&gt;his work&lt;/a&gt;. This is by no means an attempt at bashing a colleague's work.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@malcoo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Tom√°≈° Mal√≠k&lt;/a&gt; on &lt;a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>performance</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introduction to JavaScript Again?</title>
      <author>Unclebigbay</author>
      <pubDate>Tue, 07 Dec 2021 10:22:56 +0000</pubDate>
      <link>https://dev.to/unclebigbay/introduction-to-javascript-again-jai</link>
      <guid>https://dev.to/unclebigbay/introduction-to-javascript-again-jai</guid>
      <description>&lt;p&gt;Hello buddy üëã , It actually took me a while to understand what to learn first in JavaScript and how to get started, and if you're in the same shoe right now, then this article is for you.&lt;/p&gt;

&lt;p&gt;In this episode, I will be introducing you to JavaScript, what to expect and how to get started as a JavaScript developer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;Before you continue with this introductory article, ensure you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have a working knowledge of HTML and CSS&lt;/li&gt;
&lt;li&gt;Else check out the &lt;a href="https://unclebigbay.com/skeleton-of-html-css-and-javascript"&gt;Skeleton of HTML, CSS and JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because you will always see &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt;, and &lt;strong&gt;Python&lt;/strong&gt; &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#what-is-javascript"&gt;
  &lt;/a&gt;
  What is JavaScript
&lt;/h1&gt;

&lt;p&gt;JavaScript is basically a programming language for the web, you can see JavaScript as the official language for web development and the only programming language that allows you to build frontend applications &lt;strong&gt;(web interface)&lt;/strong&gt;, backend applications &lt;strong&gt;(server+database)&lt;/strong&gt; down to mobile applications, and machine learning.&lt;/p&gt;

&lt;p&gt;This definition only means one thing, and it's that JavaScript knowledge can be applied in multiple fields, and their application also follows the same patterns.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#why-learn-javascript"&gt;
  &lt;/a&gt;
  Why Learn JavaScript?
&lt;/h1&gt;

&lt;p&gt;Imagine a website showing the same profile information for every logged-in user, or a button not responding to the action it's labeled, these are properties of static web pages, and a static webpage does not interact with the user because they lack little or no JavaScript (programming).&lt;/p&gt;

&lt;p&gt;With JavaScript we can add actions to our web pages, we can define what should happen when a button is clicked or a specific action is being taken or triggered on a web application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-static-webpage"&gt;
  &lt;/a&gt;
  What is a Static Webpage?
&lt;/h3&gt;

&lt;p&gt;A static webpage inherently displays hardcoded contents from the HTML file that won't change based on any user actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mxHfux7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638816510324/aMxxBbG8M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mxHfux7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638816510324/aMxxBbG8M.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The contents of the dashboard above can only be updated from the HTML document and not based on the currently logged-in user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-dynamic-webpage"&gt;
  &lt;/a&gt;
  What is a Dynamic Webpage?
&lt;/h3&gt;

&lt;p&gt;A dynamic webpage interacts with the user through triggered actions and a set of conditional rules, the contents of a dynamic web page change based on events and conditions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0o9O7ZWf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638816407300/wYeLth1454.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0o9O7ZWf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638816407300/wYeLth1454.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The username and profile image are dynamic, which means the dashboard contents change each time a new user logs in.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#getting-started-with-javascript"&gt;
  &lt;/a&gt;
  Getting started with JavaScript
&lt;/h1&gt;

&lt;p&gt;There are a few concepts you should be aware of in order to start creating interactive applications with JavaScript, these concepts are important whether you're interested in using JavaScript for frontend or backend development, mobile applications, or any other area that JavaScript can be applied.&lt;/p&gt;




&lt;p&gt;Below are a few concepts you should learn first when learning JavaScript.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#1-learn-javascript-data-types"&gt;
  &lt;/a&gt;
  1. Learn JavaScript Data Types
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x8UL7i3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829576685/_v_9-EJ60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x8UL7i3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829576685/_v_9-EJ60.png" alt="image.png" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Data types are basically the data that can be legally used in JavaScript or any specific programming language.&lt;/p&gt;

&lt;p&gt;Just as we have &lt;strong&gt;A, B, C&lt;/strong&gt; to  &lt;strong&gt;Z&lt;/strong&gt; as alphabets, and digit &lt;strong&gt;0 to 9&lt;/strong&gt; as numerics, similarly JavaScript has a name for each of its acceptable data, which includes a &lt;strong&gt;string&lt;/strong&gt;, &lt;strong&gt;number&lt;/strong&gt;, &lt;strong&gt;array&lt;/strong&gt;, &lt;strong&gt;object&lt;/strong&gt;, &lt;strong&gt;undefined&lt;/strong&gt;, &lt;strong&gt;null&lt;/strong&gt;, and &lt;strong&gt;boolean&lt;/strong&gt;, they are referred to as data types.&lt;/p&gt;

&lt;p&gt;The difference between the data types in JavaScript is their syntax, structure, and the operations you can perform with them.&lt;/p&gt;

&lt;p&gt;It is important to understand how each of these data types works in JavaScript so that you won't end up performing an addition operation on &lt;strong&gt;A, B, C&lt;/strong&gt; alphabets instead of &lt;strong&gt;0 to 9&lt;/strong&gt; numbers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Learn more about JavaScript data types on  &lt;a href="https://www.w3schools.com/js/js_datatypes.asp"&gt;w3schools&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check out &lt;a href="https://unclebigbay.com/javascript-syntax-profile"&gt;JavaScript Syntax Profile&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#2-learn-javascript-variables"&gt;
  &lt;/a&gt;
  2. Learn JavaScript Variables
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pNwhPw0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829650193/WBaZ7_P27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pNwhPw0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829650193/WBaZ7_P27.png" alt="image.png" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Variables are like containers that can hold items for later use, we use variables to store any data type in JavaScript so that we can make reference to them later in our code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A variable can only hold one data type at a time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt; Learn more from &lt;a href="https://unclebigbay.com/generations-of-javascript-variables"&gt;Generations of JavaScript Variables&lt;/a&gt; article&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#21-variable-declaration"&gt;
  &lt;/a&gt;
  2.1. Variable Declaration
&lt;/h3&gt;

&lt;p&gt;Variable declaration in JavaScript is all about booking a space (allocating memory) for a data type or value that you're not ready to store yet, it's basically an act of keeping a container to keep a cube of sugar that you're yet to purchase.&lt;/p&gt;

&lt;p&gt;There are three major techniques in which variables are created in JavaScript that you need to know, these techniques determine what operation or rules you want to allow for a particular variable you're declaring. &lt;/p&gt;

&lt;p&gt;Variable keyword declaration technique includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;var&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;const&lt;/code&gt; keyword, and&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;let&lt;/code&gt; keyword&lt;/li&gt;
&lt;/ol&gt;



&lt;h3&gt;
  &lt;a href="#22-variable-initilization"&gt;
  &lt;/a&gt;
  2.2. Variable Initilization
&lt;/h3&gt;

&lt;p&gt;Since variable declaration is the act of keeping space for later use, then variable initialization is the process of assigning or putting the value you're keeping the space for into the declared variable, which then means our container is not empty anymore.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://unclebigbay.com/generations-of-javascript-variables"&gt;Generations of JavaScript Variables&lt;/a&gt; for full explanations.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#3-learn-javascript-scope"&gt;
  &lt;/a&gt;
  3. Learn JavaScript Scope
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W2L9Z4bO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829697301/Z6eUl5dNj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W2L9Z4bO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829697301/Z6eUl5dNj.png" alt="image.png" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The term Scope in JavaScript refers to the current context of code, and it determines how variables can be referenced or accessed in the code.&lt;/p&gt;

&lt;p&gt;There are 3 main types of JavaScript scopes, which includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Global scope&lt;/li&gt;
&lt;li&gt;Local scope/function scope, and&lt;/li&gt;
&lt;li&gt;Block scope&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These 3 scopes provide ways to either secure a variable from being accessed outside or within a particular scope.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can learn more about JavaScript scope from Mr. @&lt;a href="https://dev.to@atapas"&gt;Tapas Adhikary&lt;/a&gt; &lt;a href="https://blog.greenroots.info/javascript-scope-fundamentals-with-tom-and-jerry"&gt;JavaScript Scope Fundamentals with Tom and Jerry&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#4-learn-javascript-functions"&gt;
  &lt;/a&gt;
  4. Learn JavaScript Functions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jL_wjHAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829723008/c2Uk36NF_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jL_wjHAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829723008/c2Uk36NF_.png" alt="image.png" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript functions are like procedures, they contain a set of instructions to be executed or invoked (called) when an event is been triggered.&lt;/p&gt;

&lt;p&gt;Functions are capable of accepting inputs and generating output based on the logic in the function.&lt;/p&gt;

&lt;p&gt;There are two types of JavaScript functions:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Regular function (ES5)&lt;/p&gt;

&lt;p&gt;This is the default method of writing functions in JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Arrow function (ES6)&lt;/p&gt;

&lt;p&gt;JavaScript arrow functions came with the release of ECMAScript 2015, also known as ES6, arrow function has a concise syntax and it has some unique features that make it the favorite of several Javascript developers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do not bother much about arrow functions if you're still very new to it, you will figure the difference as you code more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Learn more about the difference between &lt;a href="https://betterprogramming.pub/difference-between-regular-functions-and-arrow-functions-f65639aba256"&gt;regular functions and arrow functions&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#5-learn-javascript-hoisting"&gt;
  &lt;/a&gt;
  5. Learn JavaScript Hoisting
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nj5cGkFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829750525/LzYdAFN58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nj5cGkFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829750525/LzYdAFN58.png" alt="image.png" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hoisting is the next concept to learn when you're done with learning variables scope in JavaScript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hoisting is a JavaScript mechanism where variable declarations are moved to the top of their scope before code execution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This concept will expose you to how JavaScript handles variables in each scope before execution, JavaScript basically moves all the declared variables to the top of every scope whether global or local scope.&lt;/p&gt;

&lt;p&gt;You need to know-how &lt;strong&gt;var&lt;/strong&gt;, &lt;strong&gt;const&lt;/strong&gt;, and &lt;strong&gt;let&lt;/strong&gt; works to understand this concept better.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here is a detailed article to help you understand &lt;a href="https://blog.vivek-sharma.com/variable-hoisting-in-javascript"&gt;Variable Hoisting in Javascript&lt;/a&gt; by @&lt;a href="https://dev.to@vivekshrma"&gt;Vivek Sharma&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#6-learn-javascript-closures"&gt;
  &lt;/a&gt;
  6. Learn JavaScript Closures
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n9DU9-36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829779738/cLMX1Qi_Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n9DU9-36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829779738/cLMX1Qi_Z.png" alt="image.png" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The JavaScript closure is basically a function inside of another function and this gives the inner function the ability to have access to the variable in the outer function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn about JavaScript closures  &lt;a href="https://www.w3schools.com/js/js_function_closures.asp"&gt;here&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-learn-javascript-callback-functions"&gt;
  &lt;/a&gt;
  7. Learn JavaScript Callback functions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rri_fIU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829850594/9DBhGnxUF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rri_fIU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829850594/9DBhGnxUF.png" alt="image.png" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A callback is any function that is being passed to another function as an argument (input) and is executed later.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn callback  &lt;a href="https://www.w3schools.com/js/js_callback.asp"&gt;here&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-learn-javascript-array-and-array-methods"&gt;
  &lt;/a&gt;
  8. Learn JavaScript Array and Array Methods.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TFsR4OYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829910546/RvfDzWrrH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TFsR4OYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829910546/RvfDzWrrH.png" alt="image.png" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Array is one of JavaScript's data types that you cannot do without when you're convenient with variables and have a grasp of how functions works then you can proceed to learn JavaScript Arrand its methods.&lt;/p&gt;

&lt;p&gt;An array is also a container that can hold items, but unlike a variable that only holds a single data type at a time, the array data type on the other side can store as many collections of different data types at a time.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#9-learn-javascript-fetch"&gt;
  &lt;/a&gt;
  9. Learn JavaScript Fetch.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUg3lGMf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829938198/NesParFv0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUg3lGMf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829938198/NesParFv0.png" alt="image.png" width="880" height="462"&gt;&lt;/a&gt;&lt;br&gt;
Chances are you will not be working with static data forever, learning JavaScript fetch will enable you to interact with backend APIs and perform some &lt;strong&gt;HTTPS&lt;/strong&gt; calls.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.w3schools.com/js/js_api_fetch.asp"&gt;Learn JavaScript fetch&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#10-learn-javascript-promises-and-asyncawait"&gt;
  &lt;/a&gt;
  10. Learn JavaScript Promises and Async/Await.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9NxWV_Tq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829975208/tN8i5wD-H.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9NxWV_Tq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638829975208/tN8i5wD-H.png" alt="image.png" width="880" height="462"&gt;&lt;/a&gt;&lt;br&gt;
While working with Fetch or backend generally, you need a way to resolve failure or success calls from the backend, which might take a while to arrive.&lt;/p&gt;

&lt;p&gt;The JavaScript promises is a technique of handling asynchronous operations in JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Check out &lt;a href="https://blog.greenroots.info/javascript-promises-explain-like-i-am-five"&gt;JavaScript Promises - Explain Like I'm Five&lt;/a&gt; by @&lt;a href="https://dev.to@atapas"&gt;Tapas Adhikary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blog.greenroots.info/javascript-async-and-await-in-plain-english-please"&gt;JavaScript async and await - in plain English, please&lt;/a&gt; by @&lt;a href="https://dev.to@atapas"&gt;Tapas Adhikary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#11-learn-dom-manipulation"&gt;
  &lt;/a&gt;
  11. Learn DOM manipulation
&lt;/h2&gt;

&lt;p&gt;The Document Object Model is used to access HTML elements in JavaScript, this concept allows us to interact with the HTML elements directly from the JavaScript code.&lt;/p&gt;

&lt;p&gt;DOM can be used to modify the text, color, background color, and other HTML element properties using JavaScript.&lt;/p&gt;

&lt;p&gt;You can learn more about DOM manipulation from  &lt;a href="https://www.w3schools.com/js/js_htmldom.asp"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-build-projects"&gt;
  &lt;/a&gt;
  12. Build Projects
&lt;/h2&gt;

&lt;p&gt;The best way to know you've really understood a concept is by implementing those concepts in a project.  Ensure to apply all these concepts in a side project as your learning continues.&lt;/p&gt;

&lt;p&gt;JavaScript projects you can work on.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Todo list.&lt;/li&gt;
&lt;li&gt;Count down.&lt;/li&gt;
&lt;li&gt;Tic Tac Toe.&lt;/li&gt;
&lt;li&gt;Pong game.&lt;/li&gt;
&lt;li&gt;Vanilla JavaScript stopwatch.&lt;/li&gt;
&lt;li&gt;JavaScript clock.&lt;/li&gt;
&lt;li&gt;JavaScript calculator.&lt;/li&gt;
&lt;li&gt;A Quiz Application&lt;/li&gt;
&lt;li&gt;A Game Application&lt;/li&gt;
&lt;li&gt;Music App.&lt;/li&gt;
&lt;li&gt;File Converter.&lt;/li&gt;
&lt;li&gt;Interactive Map.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These projects will help you to make use of the JavaScript concepts that you've learned, you can proceed to build more advanced projects with JavaScript when you're convenient understanding how these applications work.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This article covers the important basics of JavaScript that are essential for you to know before proceeding to any of the JavaScript frameworks, I hope this article has helped you to know some concepts to focus on more in JavaScript.&lt;/p&gt;

&lt;p&gt;See you in the next one.&lt;/p&gt;




&lt;p&gt;Wow, what a journey, I am glad you made it to the end of this article, if you enjoyed and learned something new from this article, I will like to connect with you.&lt;/p&gt;

&lt;p&gt;Let's connect on&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=unclebigbay143"&gt;Twitter @unclebigbay143&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.linkedin.com/in/unclebigbay/"&gt;LinkedIn @unclebigbay&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;See you in the next article. Bye Bye üôã‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---96uVdrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622627809083/3i7ThmW-M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---96uVdrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622627809083/3i7ThmW-M.png" alt="image.png" width="432" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Creating long lasting content on Observable</title>
      <author>Tom Larkworthy</author>
      <pubDate>Tue, 07 Dec 2021 10:10:55 +0000</pubDate>
      <link>https://dev.to/tomlarkworthy/creating-long-lasting-content-on-observable-30b3</link>
      <guid>https://dev.to/tomlarkworthy/creating-long-lasting-content-on-observable-30b3</guid>
      <description>&lt;p&gt;I am 100% convinced &lt;a href="//observablehq.com"&gt;Observable&lt;/a&gt; is the right way to share computational thought. Sometimes though, it feels like notebooks are only read once during their birth on the &lt;a href="https://observablehq.com/trending"&gt;&lt;code&gt;/trending&lt;/code&gt;&lt;/a&gt; page. However, I am happy to report you &lt;em&gt;can&lt;/em&gt; create long-lasting content with lots of repeat visitors and it is surprisingly straightforward to do. In this article, I will share what I have learned on my &lt;a href="//observablehq.com"&gt;Observable&lt;/a&gt; journey.&lt;/p&gt;

&lt;p&gt;I took data-driven approach to find out what works. After wiring my pages to &lt;a href="https://observablehq.com/@endpointservices/plausible-analytics"&gt;Plausible Analytics&lt;/a&gt; I could finally get a birds-eye view of my readership. I found the results fascinating! Here are my page views in the last month (Nov. 2021):-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--It1f1CF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ze0xdj33o9zl4bu08xug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--It1f1CF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ze0xdj33o9zl4bu08xug.png" alt="Image description" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collaborate-and-solve-a-platform-need"&gt;
  &lt;/a&gt;
  Collaborate and solve a platform need
&lt;/h2&gt;

&lt;p&gt;My #1 content by a long shot is &lt;em&gt;&lt;a href="https://observablehq.com/@tomlarkworthy/view"&gt;Composing viewofs with the &lt;strong&gt;view&lt;/strong&gt; literal&lt;/a&gt;&lt;/em&gt;. This is a super useful utility that helps create complex UIs on the Observablehq platform. It fills a gap in the platform primitives, and clearly, I was not the only one who needed it. I collaborated with &lt;a href="https://dev.to/@mootari"&gt;@mootari&lt;/a&gt; and &lt;a href="https://dev.to/@mbostock"&gt;@mbostock&lt;/a&gt; on it, and it was developed to support a consulting job that needed a production-level UI.&lt;/p&gt;

&lt;p&gt;Now, I have written &lt;em&gt;many&lt;/em&gt; libraries for &lt;strong&gt;Observable&lt;/strong&gt;. None of them do as well as this one. I think this one resonated so much harder because it was the product of a business need, and it was refined via conversations with others. So my first tip for creating great content is: &lt;em&gt;talk to others in the community!&lt;/em&gt; Use the &lt;a href="https://talk.observablehq.com/"&gt;forum&lt;/a&gt; or leave comments on people's notebooks!&lt;/p&gt;

&lt;p&gt;However, most of my other utilities are not in my top ten, which implies that it is actually very hard to develop a library that others will use. It took me 6 months of full-time work on Observable to understand enough to craft that library. So generally, I would say it is not a very easy path. The &lt;a href="https://observablehq.com/@tomlarkworthy/saas-tutorial"&gt;saas-tutorial&lt;/a&gt; and &lt;a href="https://observablehq.com/@tomlarkworthy/firebase"&gt;Firebase&lt;/a&gt; are other examples of Observable utilities that have done quite well, but again, they took a lot of effort to produce.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#go-viral"&gt;
  &lt;/a&gt;
  Go viral!
&lt;/h2&gt;

&lt;p&gt;My next most popular content was created well over a year ago and is still going strong. The &lt;em&gt;&lt;a href="https://observablehq.com/@tomlarkworthy/hacker-favourites-analysis"&gt;Most favorited Hacker News posts of all time&lt;/a&gt;&lt;/em&gt; went stratospheric on &lt;em&gt;&lt;a href="//news.ycombinator.com"&gt;Hackernews&lt;/a&gt;&lt;/em&gt;, getting &lt;a href="https://news.ycombinator.com/item?id=24351073"&gt;1260 upvotes&lt;/a&gt; and linked to all over the web.&lt;/p&gt;

&lt;p&gt;It is very satisfying to me that good content like that is rewarded with a steady stream of traffic continuously for years. It gives me the motivation to keep trying. The Hackenews Favourites notebook really is an excellent article as it surfaces the &lt;em&gt;cr√®me de la cr√®me&lt;/em&gt; of Hackernews which was previously unknown.&lt;/p&gt;

&lt;p&gt;Obviously writing good viral content is kind of hard. If I had the formula to do it I would have more, but I am satisfied that if you do figure one out, you will get good readership numbers. The notebook &lt;a href="https://www.facebook.com/hn.hiren.news/posts/2979774452265797"&gt;Sign a PDF and Adobe: Go Fuck Yourself&lt;/a&gt; also was a Hackernews hit, though not to the same level, but that's also why it has reached the top ten.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#promote-your-content-outside-of-observable"&gt;
  &lt;/a&gt;
  Promote your content outside of &lt;a href="https://observablehq.com"&gt;Observable&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The notebooks mentioned in the previous tips represent my &lt;em&gt;"smash hits"&lt;/em&gt;, which are a bit random to produce. They were generated when inspiration hit. On the other hand, the remaining notebooks are doing well, and did well for fairly simple and repeatable reasons. This section is the most important one as this is where luck no longer plays a role.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;notebook&lt;/th&gt;
&lt;th&gt;views&lt;/th&gt;
&lt;th&gt;likes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://observablehq.com/@tomlarkworthy/switch-dataflow"&gt;switch-dataflow&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;126&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://observablehq.com/@tomlarkworthy/merge-dataflow"&gt;merge-dataflow&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://observablehq.com/@tomlarkworthy/mip"&gt;mip&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;62&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://observablehq.com/@tomlarkworthy/sound-cloud-reactive-audio-visualizer"&gt;sound-cloud-reactive-audio-visualizer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;What's interesting with these notebooks is that their success is not dependant on Observable "likes". The real reason why these set of notebooks do so well is that they were all promoted &lt;em&gt;outside&lt;/em&gt; of Observable.&lt;/p&gt;

&lt;p&gt;The switch and merge dataflow tutorials are blog posts that were syndicated to &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt; and &lt;a href="https://medium.com"&gt;medium&lt;/a&gt; using the meta-notebook &lt;a href="https://observablehq.com/@tomlarkworthy/blogify"&gt;Blogify&lt;/a&gt;. The &lt;a href="https://observablehq.com/@tomlarkworthy/mip"&gt;Mixed Integer Programming (mip)&lt;/a&gt; notebook was shared on &lt;a href="https://www.reddit.com/r/optimization/comments/pil5ao/i_made_a_milp_frontend_in_a_reactive_javascript/"&gt;r/optimization&lt;/a&gt; and the &lt;a href="https://observablehq.com/@tomlarkworthy/sound-cloud-reactive-audio-visualizer"&gt;reactive visualizer&lt;/a&gt; on &lt;a href="https://www.reddit.com/r/edmproduction/comments/j0vj3o/reactive_audio_visuals_music_video_creator/"&gt;r/edmproduction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These notebooks were not big hits! But this is what is really cool about them. By simply cross-posting them off the platform has a &lt;em&gt;huge&lt;/em&gt; effect on their longevity, regardless of their popularity on Observable. Their SEO is good. &lt;em&gt;This is great news.&lt;/em&gt; Performance on &lt;code&gt;/trending&lt;/code&gt; is not indicative of performance elsewhere. You simply have to cross-post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I am not a gifted content producer, but you don't need to be! It's easy to share your work on &lt;a href="https://www.reddit.com/"&gt;Reddit&lt;/a&gt;, and that act alone makes a huge difference to the longevity of your work. I think most people on Observable produce much better work than me. &lt;em&gt;You are not doing it justice if it stays only on the platform&lt;/em&gt;. If you just go out and share it on places like &lt;a href="https://www.reddit.com/r/dataisbeautiful/"&gt;r/dataisbeautiful&lt;/a&gt; or &lt;a href="https://news.ycombinator.com"&gt;hackernews&lt;/a&gt; you will amplify your impact &lt;em&gt;massively&lt;/em&gt;. This is the simple secret of creating long-lasting content on &lt;a href="https://observablehq.com"&gt;Observable&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>observable</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>writing</category>
    </item>
    <item>
      <title>Code Complete: Is It a Big White Elephant on Your Working Desk?</title>
      <author>Mitya Dementiy</author>
      <pubDate>Tue, 07 Dec 2021 09:59:18 +0000</pubDate>
      <link>https://dev.to/halolab/code-complete-is-it-a-big-white-elephant-on-your-working-desk-364h</link>
      <guid>https://dev.to/halolab/code-complete-is-it-a-big-white-elephant-on-your-working-desk-364h</guid>
      <description>&lt;p&gt;When I &lt;a href="https://twitter.com/De_Mityai/status/1403641281461506048"&gt;tweeted about my intention to read Code Complete&lt;/a&gt;, I got a couple of warning replies. I found out that the book is "a waste of time", "big white elephant on your desk" and "a dull book to while away the time in one's old age".&lt;/p&gt;

&lt;p&gt;But such feedback didn't disturb me because Code Complete is listed in books to read by Hexlet School of Witchcraft and Wizardry where I studied programming.&lt;/p&gt;

&lt;p&gt;The book was easy and fun to read. Yes, McConnel's humor is fire. So I laughed many times while reading a serious work about programming. But first thing's first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-great-and-powerful-code-complete"&gt;
  &lt;/a&gt;
  The great and powerful Code Complete
&lt;/h2&gt;

&lt;p&gt;The book received Jolt Award in 1993, a prestigious award by Dr. Dobb's Journal for books on software development.&lt;/p&gt;

&lt;p&gt;It also received positive reviews from Martin Fowler, Grady Booch, and other famous software engineers and computer science experts.&lt;/p&gt;

&lt;p&gt;Hardback version of 900 pages weighs more than 1 kg. Probably, that is what frightens people away from this work. Let's open the book and find out if there is anything to be afraid of?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oiOzr2oZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bz8d3lwh4ikwyvlmuj0i.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oiOzr2oZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bz8d3lwh4ikwyvlmuj0i.jpeg" alt="Code Complete McConnell" width="880" height="779"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Russian-language version of Code Copmplete by McConnell&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-mcconnell-wrote-in-1993-and-reasons-to-read-it-in-the-21st-century"&gt;
  &lt;/a&gt;
  What McConnell wrote in 1993 and reasons to read it in the 21st century
&lt;/h2&gt;

&lt;p&gt;Code Complete is still relevant even though it was first published almost 30 years ago. This book contains very little information that could ever get out of date. McConell discusses fundamental coding principles that are unlikely to change within the next few years.&lt;/p&gt;

&lt;p&gt;The code examples are mainly in Visual Basic, Java and C++. But the book's main points make sense regardless of specific languages.&lt;/p&gt;

&lt;p&gt;There is a difference between programming into the language and in It.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Programming in your language limits your programming thinking only to the constructs that the language directly supports. If the language tools are primitive, the programmer's thought will also be primitive. Programmers who program "into" a language first decide what thoughts they want to express, and then they determine how to express those thoughts using the tools provided by their specific language. ‚Äî Steve McConnel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had the feeling that there is not that much code in Code Complete.&lt;br&gt;
The author talks about coding in general and occasionally goes to specifics and illustrates his points with examples.&lt;/p&gt;

&lt;p&gt;He pays big attention to the process of development ‚Äî from requirements gathering and choosing the technology to coding, testing,  debugging, refactoring, and optimization.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metaphor-is-a-programmers-weapon"&gt;
  &lt;/a&gt;
  Metaphor is a programmer‚Äôs weapon
&lt;/h3&gt;

&lt;p&gt;The book starts with an explanation of why metaphors are important. One of the metaphors offered is building construction. &lt;/p&gt;

&lt;p&gt;Metaphors help both developers and any people they work with, such as managers, designers, and clients.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mistakes-that-cost-the-most"&gt;
  &lt;/a&gt;
  Mistakes that cost the most
&lt;/h3&gt;

&lt;p&gt;They occur on the stage of requirements gathering and designing. &lt;/p&gt;

&lt;p&gt;It is easy to explain with building construction metaphors. If you make mistakes when laying the foundation, it will be difficult to fix them when the building is nine floors high.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dirty-problems"&gt;
  &lt;/a&gt;
  "Dirty" problems
&lt;/h3&gt;

&lt;p&gt;These are the problems that can be defined only by partially or fully fixing them. I bet every programmer had a situation when a manager asked you to define the time needed for your task. And you explain that it is impossible because you actually have to solve the task first. This is what McConnel calls a dirty problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managing-complexity"&gt;
  &lt;/a&gt;
  Managing complexity
&lt;/h3&gt;

&lt;p&gt;Managing complexity is the main technical aspect of software development. McConnel quotes Dijkstra, who pointed out that no one's skull is really big enough to contain a modern computer program. This means that software developers shouldn't try to cram whole programs into our skulls at once. We should try to organize our programs in such a way that we can safely focus on one part of it at a time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-correctness-and-software-robustness-have-an-inverse-relationship"&gt;
  &lt;/a&gt;
  Software correctness and software robustness have an inverse relationship
&lt;/h3&gt;

&lt;p&gt;This was a huge insight for me. &lt;/p&gt;

&lt;p&gt;For some software robustness is more important than correctness, for some conversely.&lt;/p&gt;

&lt;p&gt;For instance, safety-critical software for a spaceship would require a high level of correctness. And we would have to sacrifice correctness in favour of robustness.&lt;/p&gt;

&lt;p&gt;Please, leave comments about your interpretation of this point and if you agree with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wisca-phenomenon"&gt;
  &lt;/a&gt;
  WISCA phenomenon
&lt;/h3&gt;

&lt;p&gt;Why Isn‚Äôt Sam Coding Anything? Non-tech people suppose that programmers must be coding nonstop. Clients and bosses get nervous while programmers are planning or working on requirements.&lt;/p&gt;

&lt;p&gt;McConnel gives us an easy way to fight WISCA phenomenon. Just keep a straight face and keep the source-code editor window open.&lt;/p&gt;

&lt;p&gt;By the way, on the sense of humor. McConnell inserts jokes on nearly every page. They are witty and specific. This is the famous programming humor in its purest form. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-liked-and-disliked-about-the-book"&gt;
  &lt;/a&gt;
  What I liked and disliked about the book
&lt;/h2&gt;

&lt;p&gt;I found the book helpful because it‚Äôs all about fundamentals. It helps to look for the forests before we look for the trees. And generalize problems and tasks.&lt;/p&gt;

&lt;p&gt;The book sure contains plenty of practical and specific examples or recommendations. The parts about variable naming, operators and mastery of programming are pure concentrated usefulness.&lt;/p&gt;

&lt;p&gt;I was happy that a big and serious book is written in easy language. Even examples in unfamiliar languages turned out to be comprehendible and useful.&lt;/p&gt;

&lt;p&gt;What I didn‚Äôt like is how quickly I finished the book. I also didn‚Äôt like the chapter on programming tools.The choice of compiler, IDE and other tools depends on which specific technology is used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-read-or-not-to-read"&gt;
  &lt;/a&gt;
  To read or not to read?
&lt;/h2&gt;

&lt;p&gt;Well, my conclusion is predictable. The book is worth the money and the time spent. It is more about basics in general rather than a handbook with practical guidelines. Thanks to Code Complete I gained a deeper understanding of coding in general. I started to see things that were out of my attention.&lt;/p&gt;

&lt;p&gt;Don‚Äôt be put off by the thickness of the book. I guarantee you‚Äôll let out a chuckle many times when reading it.&lt;/p&gt;

</description>
      <category>books</category>
      <category>development</category>
      <category>programming</category>
    </item>
    <item>
      <title>[Binary Search]Decode Message</title>
      <author>Wenqi Jiang</author>
      <pubDate>Tue, 07 Dec 2021 09:51:11 +0000</pubDate>
      <link>https://dev.to/jiangwenqi/binary-searchdecode-message-2idi</link>
      <guid>https://dev.to/jiangwenqi/binary-searchdecode-message-2idi</guid>
      <description>&lt;p&gt;Created Time: December 7, 2021 10:43 AM&lt;br&gt;
Date: December 7, 2021&lt;br&gt;
Difficulty: Middle&lt;br&gt;
Last Edited Time: December 7, 2021 10:47 AM&lt;br&gt;
Multiple Solutions: No&lt;br&gt;
Question Link: &lt;a href="https://binarysearch.com/problems/Decode-Message"&gt;https://binarysearch.com/problems/Decode-Message&lt;/a&gt;&lt;br&gt;
Topics: Dynamic Programming&lt;/p&gt;

&lt;p&gt;Given the mapping¬†&lt;code&gt;"a" = 1&lt;/code&gt;,¬†&lt;code&gt;"b" = 2&lt;/code&gt;, ...¬†&lt;code&gt;"z" = 26&lt;/code&gt;, and an encoded message¬†&lt;code&gt;message&lt;/code&gt;¬†(as a string), count the number of ways it can be decoded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Constraints&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;n ‚â§ 100,000&lt;/code&gt;¬†where¬†&lt;code&gt;n&lt;/code&gt;¬†is the length of message&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#example%C2%A01"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Example¬†1&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;message = "111"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This can be decoded 3 ways:¬†&lt;code&gt;aaa&lt;/code&gt;,¬†&lt;code&gt;ak&lt;/code&gt;, and¬†&lt;code&gt;ka&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example%C2%A02"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Example¬†2&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;message = "8"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This can be only decoded one way, as¬†&lt;code&gt;h&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example%C2%A03"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Example¬†3&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;message = "12"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This can be decoded 2 ways:¬†&lt;code&gt;ab&lt;/code&gt;¬†or¬†&lt;code&gt;l&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example%C2%A04"&gt;
  &lt;/a&gt;
  Example¬†4
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;message = "60"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There's no way to decode this message.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example%C2%A05"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Example¬†5&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;message = "0012"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;intuition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dynamic Programming&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;‚Äò‚Äô =&amp;gt; 1&lt;/li&gt;
&lt;li&gt;'0' =&amp;gt; 0; '1' =&amp;gt; 1&lt;/li&gt;
&lt;li&gt;'x10' =&amp;gt; dp[x]&lt;/li&gt;
&lt;li&gt;'x21' =&amp;gt; dp[2] + dp[x]&lt;/li&gt;
&lt;li&gt;'x01' =&amp;gt; dp[0]&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 1. ‚Äò‚Äô =&amp;gt; 1&lt;/span&gt;
&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 2. '0' =&amp;gt; 0; '1' =&amp;gt; 1&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;substring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// 3. 'x10' =&amp;gt; dp[x]&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;//  4. 'x21' =&amp;gt; dp[2] + dp[x]&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// 5. 'x01' =&amp;gt; dp[0]&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Time Complexity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O(&lt;em&gt;n&lt;/em&gt;): only need one loop for check digit and number(2 digits)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Space Complexity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O(&lt;em&gt;n&lt;/em&gt;): store states for reaching more digits.&lt;/p&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;substring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>programming</category>
      <category>100daysofcode</category>
      <category>java</category>
    </item>
    <item>
      <title>TikTok Colors - HTML Hex, RGB and CMYK Color Codes</title>
      <author>pakainfo</author>
      <pubDate>Tue, 07 Dec 2021 09:46:58 +0000</pubDate>
      <link>https://dev.to/pakainfo_com/tiktok-colors-html-hex-rgb-and-cmyk-color-codes-4mb</link>
      <guid>https://dev.to/pakainfo_com/tiktok-colors-html-hex-rgb-and-cmyk-color-codes-4mb</guid>
      <description>&lt;p&gt;The &lt;a href="https://www.pakainfo.com/tik-tok-colors/"&gt;TikTok colors&lt;/a&gt; found in the logo are turqoise, red, black and white. Use this TikTok brand color scheme for digital or print projects that need to use specific color values to match their company color palette. Find the rest of your favorite brand color codes on this web page.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.pakainfo.com/tik-tok-colors/"&gt;TikTok Colors&lt;/a&gt; with Hex &amp;amp; RGB Codes has 4 colors which are Black (#010101), Sea Serpent (#69C9D0), White (#FFFFFF) and Crayola's Red (#EE1D52).&lt;/p&gt;

&lt;p&gt;This color combination was created by user Keshav Naidu. The Hex, RGB and CMYK codes are in the table below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TURQOISE&lt;/strong&gt;&lt;br&gt;
PANTONE: PMS 319 C (BEST MATCH)&lt;br&gt;
HEX COLOR: #25F4EE;&lt;br&gt;
RGB: (37,244,238)&lt;br&gt;
CMYK: (54,0,18,0)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RED&lt;/strong&gt;&lt;br&gt;
PANTONE: PMS 1787 C (BEST MATCH)&lt;br&gt;
HEX COLOR: #FE2C55;&lt;br&gt;
RGB: (254,44,85)&lt;br&gt;
CMYK: (0,93,56,0)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BLACK&lt;/strong&gt;&lt;br&gt;
PANTONE: PMS BLACK C&lt;br&gt;
HEX COLOR: #000000;&lt;br&gt;
RGB: (0,0,0)&lt;br&gt;
CMYK: (70,35,40,100)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHITE&lt;/strong&gt;&lt;br&gt;
PANTONE: PMS WHITE C&lt;br&gt;
HEX COLOR: #FFFFFF;&lt;br&gt;
RGB: (255,255,255)&lt;br&gt;
CMYK: (0,0,0,0)&lt;/p&gt;

&lt;p&gt;TikTok Logo has four Colors. Hex Codes, RGB Codes and CMYK Color Codes of TikTok logo are given.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tiktok-logo-meaning"&gt;
  &lt;/a&gt;
  TikTok Logo Meaning
&lt;/h2&gt;

&lt;p&gt;TikTok was launched in China and it's Chinese name translates to Tremolo in English. Tremolo is a trembling effect in music produced by rapid reiteration of a musical note.&lt;/p&gt;

&lt;p&gt;TikTok logo also has a white symbol of Musical Note in it, with the black background. While designer created a shaky or glitch effect with two other colors, light aqua and shade of red, to symbolize Tremolo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tiktok-logo-color-code"&gt;
  &lt;/a&gt;
  TikTok Logo Color Code
&lt;/h2&gt;

&lt;p&gt;TikTok Logo has four colors, Black, shade of Red, shade of Light Aqua or Blue and White Color. TikTok was launched in 2016 and it's logo hasn't changed much since then. The Light Aqua and shade of Red, these two colors are not much visible in smaller size logo of TikTok.&lt;/p&gt;

&lt;p&gt;The Hex Codes, RGB Codes and CMYK Codes of all four colors of TikTok logo are given below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tiktok-logo-color-hex-code"&gt;
  &lt;/a&gt;
  TikTok Logo Color Hex Code
&lt;/h2&gt;

&lt;p&gt;The Hex values or Hex Codes of all Colors of TikTok Logo are given below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Black&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hex Value: #010101;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Light Aqua&lt;br&gt;
*&lt;/em&gt;&lt;br&gt;
Hex Value: #69C9D0;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Red&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hex Value: #EE1D52;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;White&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hex Value: #FFFFFF;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tiktok-logo-color-rgb-code"&gt;
  &lt;/a&gt;
  TikTok Logo Color RGB Code
&lt;/h2&gt;

&lt;p&gt;The RGB values or RGB Codes of all Colors of TikTok Logo are given below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Black&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RGB Value: (1, 1, 1)&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Light Aqua&lt;br&gt;
*&lt;/em&gt;&lt;br&gt;
RGB Value: (105, 201, 208)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Red&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RGB Value: (238, 29, 82)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;White&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RGB Value: (255, 255, 255)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tiktok-logo-color-cmyk-code"&gt;
  &lt;/a&gt;
  TikTok Logo Color CMYK Code
&lt;/h2&gt;

&lt;p&gt;The CMYK values or CMYK Codes of all Colors of TikTok Logo are given below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Black&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CMYK Value: (0%, 0%, 0%, 100%)&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Light Aqua&lt;br&gt;
*&lt;/em&gt;&lt;br&gt;
CMYK Value: (50%, 3%, 0%, 18%)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Red&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CMYK Value: (0%, 88%, 66%, 7%)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;White&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CMYK Value: (0%, 0%, 0%, 0%)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; : &lt;a href="https://www.pakainfo.com/tik-tok-colors/"&gt;Tik Tok Colors&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>productivity</category>
      <category>css</category>
    </item>
    <item>
      <title>Slice and Splice JavaScript Arrays Like a Pro</title>
      <author>Sumudu Siriwardana</author>
      <pubDate>Tue, 07 Dec 2021 09:23:41 +0000</pubDate>
      <link>https://dev.to/sumusiriwardana/slice-and-splice-javascript-arrays-like-a-pro-2d9d</link>
      <guid>https://dev.to/sumusiriwardana/slice-and-splice-javascript-arrays-like-a-pro-2d9d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was originally published on &lt;a href="https://dasha.ai/en-us/blog/javascript-arrays-slice-and-splice"&gt;Dasha.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you are wondering, Dasha is a &lt;strong&gt;conversational-AI-as-a-service&lt;/strong&gt; platform that lets you embed realistic voice and text conversational capabilities into your apps or products.  &lt;a href="https://auth.dasha.ai/account/register"&gt;Start building for free!&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Do you find yourself looking up the difference between slice() and splice() methods all the time?&lt;/p&gt;

&lt;p&gt;The two methods are among the most used array methods when it comes to adding, updating, or removing items in an array, and cloning an array or copying a portion of an array.  ‚Äã&lt;/p&gt;

&lt;p&gt;Slice() and splice() methods look similar, and they sound similar, so it's very easy to get confused and remember which is which. I've put together this guide on these two methods so that you can slice and splice JavaScrips arrays like a pro. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pcl9I1dd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637390493075/6vSKjLJt-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pcl9I1dd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637390493075/6vSKjLJt-.png" alt="slice-vs-splice.png" width="500" height="557"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slice-method"&gt;
  &lt;/a&gt;
  Slice() Method
&lt;/h2&gt;

&lt;p&gt;The slice() method copies a chunk (or slice) from an array and returns that copied part as a new array. It does not modify or change the original array. Instead, it creates a new shallow copy of the original array.&lt;/p&gt;

&lt;p&gt;This method takes two optional arguments. The first argument is the &lt;code&gt;startIndex&lt;/code&gt;, and the second is the &lt;code&gt;endIndex&lt;/code&gt;.  If you do not pass any arguments, the entire original array will be copied by default. Also, If the arguments you pass are greater than the actual array, it will return an empty array. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// No arguments&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="err"&gt;‚Äã&lt;/span&gt;&lt;span class="c1"&gt;// One argument&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="err"&gt;‚Äã&lt;/span&gt;&lt;span class="c1"&gt;// Two arguments&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;startIndex&lt;/code&gt;: 

&lt;ul&gt;
&lt;li&gt;The index where the slice should begin. &lt;/li&gt;
&lt;li&gt;If the value is omitted, it will start at 0. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;endIndex&lt;/code&gt;: 

&lt;ul&gt;
&lt;li&gt;The slice will end before this index. So, for example, adding &lt;code&gt;index 4&lt;/code&gt; will slice up to &lt;code&gt;index 3&lt;/code&gt;, omitting the value of &lt;code&gt;index 4&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;endIndex&lt;/code&gt; value is omitted, it will slice to the end of the array. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's slice an array with no arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçï&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçî&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üåÆ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üç®&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slicedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slicedArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçï", "üçî", "üåÆ", "üç®"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;favoriteFood&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;slicedArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, since there are no arguments, it has returned a copy of the entire array. &lt;/p&gt;

&lt;p&gt;One important thing to note here is that these two arrays are not equal! They are two separate arrays containing the same values inside them. So if you check their equality as in the example, it will return &lt;code&gt;false&lt;/code&gt;.   &lt;/p&gt;

&lt;p&gt;Now let's check how we can slice an array with a single argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçï&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçî&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üåÆ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üç®&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slicedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slicedArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçî", "üåÆ", "üç®"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you pass a single argument to the slice() method, it grabs all the elements from that argument until the end of the array, including the index in the argument. So in our example, we have made a copy from &lt;code&gt;index 1&lt;/code&gt; to &lt;code&gt;favoriteFood.length - 1&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Here's a visual representation of our example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GfDolLEl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484088868/-AVxMvauj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GfDolLEl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484088868/-AVxMvauj.gif" alt="slice-example-1.gif" width="480" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's move on to slicing an array by passing two arguments. &lt;/p&gt;

&lt;p&gt;Imagine that we want to copy only the &lt;code&gt;üçî&lt;/code&gt; and &lt;code&gt;üåÆ&lt;/code&gt; from our previous example to a new array. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--htFpe4y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484107516/rr4aTSu9U.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htFpe4y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484107516/rr4aTSu9U.gif" alt="slice-example-2.gif" width="480" height="282"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçï&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçî&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üåÆ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üç®&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slicedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slicedArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçî", "üåÆ"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚Äã&lt;br&gt;
In the above example, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have added &lt;code&gt;index 1&lt;/code&gt; as the first argument. Remember that the first argument includes the index itself when slicing the array.&lt;/li&gt;
&lt;li&gt;As the second argument, we have added &lt;code&gt;index 3&lt;/code&gt;. But it doesn't include the index when slicing the array. Instead, it only includes the elements up to that index. In this case, it will grab only up to &lt;code&gt;index 2&lt;/code&gt;. 
This array slice returns a new array with &lt;code&gt;üçî&lt;/code&gt; and &lt;code&gt;üåÆ&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another thing that we can do with the slice() method is that use negative numbers for arguments. Let's see how this works with the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçï&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçî&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üåÆ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üç®&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slicedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFood&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slicedArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["üçî", "üåÆ", "üç®"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we have added a single argument as &lt;code&gt;-3&lt;/code&gt;. This will start counting from the end of the array and slice it (not the beginning from the array). If we have given &lt;code&gt;-2&lt;/code&gt;, it will return only &lt;code&gt;["üåÆ", "üç®"]&lt;/code&gt;. This is very useful when you want to get the last element of the array, and then you just have to use  &lt;code&gt;-1&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The slice() method is very useful for cloning an array, copying a portion of an array, and converting an array-like object into an array. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QMloLdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637413072435/FqfF-SItr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QMloLdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637413072435/FqfF-SItr.gif" alt="slice-it-all.gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#splice-method"&gt;
  &lt;/a&gt;
  Splice() Method
&lt;/h2&gt;

&lt;p&gt;The splice() method helps you add, update, and remove elements in an array. This method modifies the array and does not create a new array. It will also return a new array with all the elements you have removed, which is helpful if you want to track what has been removed.  &lt;/p&gt;

&lt;p&gt;The splice() method takes several arguments to decide which elements to delete, the delete count, and what elements to add. You can check further details on these parameters below. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// general&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// With the optional parameters&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;start&lt;/code&gt;(required): 

&lt;ul&gt;
&lt;li&gt;The index where the slice should begin for removing elements in the array.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;start&lt;/code&gt; is negative, it will count backward from the end of the array.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;deleteCount&lt;/code&gt; (optional): 

&lt;ul&gt;
&lt;li&gt;The number of elements to be deleted from that index.&lt;/li&gt;
&lt;li&gt;If you don't specify the &lt;code&gt;deleteCount&lt;/code&gt;, it will delete everything in the array after the &lt;code&gt;startIndex&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;newElement&lt;/code&gt; (optional):  The new element(s) to be added to the array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see how to remove elements with a single argument, with only the &lt;code&gt;start&lt;/code&gt; parameter. &lt;/p&gt;

&lt;p&gt;We have our favorite fruits in the array below, and we want to remove the last two fruits. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--STXLi6Rz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484129639/1UjQsUjgB.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--STXLi6Rz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484129639/1UjQsUjgB.gif" alt="splice-example-1.gif" width="480" height="282"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçì&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ü•ë&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçä&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçá&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removedFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  ["üçì", "ü•ë"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removedFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//   ["üçä", "üçá"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we have added the &lt;code&gt;start&lt;/code&gt; parameter as &lt;code&gt;2&lt;/code&gt;, and that's where it has started removing things from this array. Since we haven't specified a second parameter, it has removed everything after &lt;code&gt;index 2&lt;/code&gt;, including the &lt;code&gt;index 2&lt;/code&gt; element. So now the &lt;code&gt;favoriteFruits&lt;/code&gt; only includes &lt;code&gt;["üçì", "ü•ë"]&lt;/code&gt;. And you can see the removed item in the array, &lt;code&gt;removedFruits&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you add &lt;code&gt;0&lt;/code&gt; as the &lt;code&gt;start&lt;/code&gt; parameter without any other parameters, it will remove everything from the array and change it to an empty array. Also, if you add any number higher than the largest index number of the array, it will not affect the original array. &lt;/p&gt;

&lt;p&gt;So what happens if we add a negative number as the &lt;code&gt;start&lt;/code&gt; parameter? If the &lt;code&gt;start&lt;/code&gt; is negative, it will count backward from the end of the array and remove the elements. Check the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçì&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ü•ë&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçä&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçá&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removedFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  ["üçì"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removedFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//   ["ü•ë", "üçä", "üçá"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we have added the &lt;code&gt;start&lt;/code&gt; parameter as &lt;code&gt;-3&lt;/code&gt;. This will start counting from the end of the array and remove items. If we have given &lt;code&gt;-2&lt;/code&gt;, the original array will return &lt;code&gt;["üçä", "üçá"]&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now let's see how to remove elements with the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;deleteCount&lt;/code&gt; parameters. &lt;/p&gt;

&lt;p&gt;Check the below example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VFIfhytR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484149581/H-S-fHiXc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VFIfhytR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484149581/H-S-fHiXc.gif" alt="splice-example-2.gif" width="480" height="282"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçì&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ü•ë&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçä&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçá&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removedFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  ["üçì", "üçá"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removedFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//   ["ü•ë", "üçä"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we removed elements starting from &lt;code&gt;index 1&lt;/code&gt; and removed two elements. And it has modified the original array with the remaining elements and returned an array with the removed elements. &lt;/p&gt;

&lt;p&gt;So let's move on to adding elements to the array with the &lt;code&gt;newElement&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;You can add a continuous list of elements separated by commas. Let's add two additional fruits to our favorite Fruits. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_tKFznW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484162373/qqhwUIF0D.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_tKFznW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637484162373/qqhwUIF0D.gif" alt="splice-exaple-3.gif" width="480" height="282"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçì&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ü•ë&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçä&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçá&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removedFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçè&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;favoriteFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  ["üçì", "üçè", "üçí", "üçä", "üçá"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removedFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;//   ["ü•ë"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see what we have done here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We removed &lt;code&gt;"ü•ë"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We set the &lt;code&gt;deleteCount&lt;/code&gt; as &lt;code&gt;1&lt;/code&gt; since we want to remove only one element.&lt;/li&gt;
&lt;li&gt;And we added &lt;code&gt;"üçè", "üçí"&lt;/code&gt; to the array where we remove the elements. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can add any number of elements to the array by separating them by commas. When we add elements to the array, the array will grow in length. Also, if you don't want to remove any items, you can simply add the second parameter as &lt;code&gt;0&lt;/code&gt;. &lt;br&gt;
‚Äã&lt;br&gt;
The splice() method is mainly used when you need to delete or add new elements to an array. And you can either assign the returned array to a variable or ignore it as you wish. &lt;/p&gt;

&lt;p&gt;Now we have a clear idea about how slice() and splice() methods work. You can find out what's the main differences between these two methods below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slice-vs-splice"&gt;
  &lt;/a&gt;
  Slice() vs. Splice()
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Slice()&lt;/th&gt;
&lt;th&gt;Splice()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Does not modify the original array&lt;/td&gt;
&lt;td&gt;Modifies the original array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;This method is used to get a new array by selecting a sub-array of a given array.&lt;/td&gt;
&lt;td&gt;This method is used to add/remove an item from the given array.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The result has to be assigned to a new array variable.&lt;/td&gt;
&lt;td&gt;The result is not required to assign to a new variable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Takes two arguments, both being optional.&lt;/td&gt;
&lt;td&gt;Takes 3 arguments, the last two arguments being optional, and the last argument can have any number of parameters (just remember that you don't have to pass it as an array type).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The second argument represents an index.&lt;/td&gt;
&lt;td&gt;The second argument represents the count.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I hope this post helps you clear the confusion between these two methods. I use one trick to remember things: &lt;strong&gt;the letter "p" of the splice() referred to as &lt;em&gt;permanently modifying&lt;/em&gt; the array&lt;/strong&gt;. I hope it will help you as well üòä&lt;/p&gt;

&lt;p&gt;Happy Coding! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6nNDv4bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637433934605/oI5ngNT_V.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6nNDv4bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637433934605/oI5ngNT_V.gif" alt="happy-coding.gif" width="480" height="320"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://dasha.ai/"&gt;&lt;img alt="Visit Dasha AI" src="https://res.cloudinary.com/practicaldev/image/fetch/s--66PDtMQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/75135110%3Fs%3D50%26v%3D4" width="50" height="50"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Join  &lt;a href="https://community.dasha.ai/"&gt;Dasha Developer Community&lt;/a&gt; where you‚Äôll meet welcoming like-minded developers who share ideas, questions, and get all the help they need to build cool conversational AI apps (for free, of course).&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to get out of tutorial doom</title>
      <author>Nmurgor</author>
      <pubDate>Tue, 07 Dec 2021 09:21:21 +0000</pubDate>
      <link>https://dev.to/nmurgor/how-to-get-out-of-tutorial-doom-13of</link>
      <guid>https://dev.to/nmurgor/how-to-get-out-of-tutorial-doom-13of</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;As a new developer, you are constantly bombarded with Youtube tutorials, newsletters with titles like: ‚ÄúLearn React in 30 minutes‚Äù and whatnot. It‚Äôs so insane.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this blog article, I‚Äôll share my view about the so-called ‚Äútutorial doom‚Äù.&lt;br&gt;
Tutorial hell is when one confines all forms of learning to curated tutorials in the form of Youtube videos.&lt;br&gt;
Let‚Äôs see how to avoid falling into this pit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-get-out-of-the-comfort-zone"&gt;
  &lt;/a&gt;
  1. Get out of the comfort zone
&lt;/h3&gt;

&lt;p&gt;Getting out of a comfort zone is like a rest. Taking on a project as a freelancer and sweat through it to the end can be a great way of learning. At some point, you will learn things on the way as-needed using standard docs, blog articles and tutorials as you build the project towards completion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-goal-oriented-course-of-action"&gt;
  &lt;/a&gt;
  2. Goal oriented course of action
&lt;/h3&gt;

&lt;p&gt;Want to build a mobile app for a business? chances are you already know some React. You can begin by building a mobile application using React Native. As you progress, the overall goal would be to build the mobile app. 6 months down the line, you‚Äôll see your React Native skills slowly improving. Why? because you have a goal set.&lt;br&gt;
I blocked Youtube using an extension because Youtube nowadays has ‚Äúclickbaity‚Äù videos such as ‚ÄúLearn X in y minutes‚Äù&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-going-back-to-the-basics"&gt;
  &lt;/a&gt;
  3. Going back to the basics
&lt;/h3&gt;

&lt;p&gt;Our brains are tiny, we can never recall all the details. We can never memorize details instead we refer. Once I feel stuck, I go back to the standard documentation or book to refer and get the gist of what I‚Äôm supposed to do.&lt;br&gt;
Memorization is for school, once you feel you are stuck, ask for help, look up the problem or call a friend to help out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-build-build-build"&gt;
  &lt;/a&gt;
  4. Build, build, build
&lt;/h3&gt;

&lt;p&gt;Build things off the concepts you already grasped. You don‚Äôt have to complete the projects you‚Äôve built. I recently wanted to learn how ORM and Migrations work in Laravel, I built a small dating site to learn the concept. Build small throw-away projects to get a finer grasp of the concept.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Tutorials are good at breaking down a concept so one can dive in and start hacking but tutorials are not the alpha and omega of learning. My use of tutorial goes like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get project concept&lt;/li&gt;
&lt;li&gt;Break the project into small bits&lt;/li&gt;
&lt;li&gt;For new parts, I look up tutorials related to these parts to see how it is done(blog article type)&lt;/li&gt;
&lt;li&gt;Use the tutorials to tackle the project with all project requirements and goals in mind&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Here's how to get out the most of tutorials:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Look for projects as a freelancer and tackle the projects. Small projects can be a great start&lt;/li&gt;
&lt;li&gt;Build small projects that solidify learning about a concept&lt;/li&gt;
&lt;li&gt;Write blog articles about your progress in learning and observations, tips to document the fun!&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>productivity</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to manage environment secrets and credentials in a Nodejs application</title>
      <author>Nmurgor</author>
      <pubDate>Tue, 07 Dec 2021 09:13:19 +0000</pubDate>
      <link>https://dev.to/nmurgor/how-to-manage-environment-scerets-and-credentials-in-nodejs-application-4ano</link>
      <guid>https://dev.to/nmurgor/how-to-manage-environment-scerets-and-credentials-in-nodejs-application-4ano</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this blog article, we will see how we can programmatically store and read environment secrets in a Nodejs application.&lt;/p&gt;

&lt;p&gt;Ideally, we'd want to avoid:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hard-coding API KEYs, PRIVATE KEYs, WALLET SEED phrases, we might end up pushing this sensitive data to a VCS like GitHub or Bitbucket&lt;/li&gt;
&lt;li&gt;exposing sensitive these credentials while in use.&lt;/li&gt;
&lt;li&gt;make these credentials configurable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's jump in.&lt;br&gt;
You can find all project code here: &lt;a href="https://github.com/naftalimurgor/environment-secrets"&gt;manage environment secrets&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-add-a-raw-gitignore-endraw-file-to-root-of-project"&gt;
  &lt;/a&gt;
  1. add a &lt;code&gt;.gitignore&lt;/code&gt; file to root of project.
&lt;/h3&gt;

&lt;p&gt;The first step would be creating a &lt;code&gt;.gitignore&lt;/code&gt; file. This file will contain an entry of files and directories that we want git to ignore so we don't accidentally add the files to version control.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;.env&lt;/code&gt; to the &lt;code&gt;.gitignore&lt;/code&gt; file, like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Inside file: .gitignore&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;.env
// other entries to be ignored by git
node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-create-a-env-file"&gt;
  &lt;/a&gt;
  2. create a .env file
&lt;/h3&gt;

&lt;p&gt;Create a file named &lt;code&gt;.env&lt;/code&gt; at the root of your project.&lt;br&gt;
Inside the file, add a key value pair of your credentials like this(no double quotes)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;API_KE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;your_value
&lt;span class="nv"&gt;MNEMOMIC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mnemonic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-read-environment-secrets-from-the-env-file"&gt;
  &lt;/a&gt;
  3. Read environment secrets from the .env file
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;dotenv&lt;/code&gt; dependency to your project
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; yarn add dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then from where we want to read environmnent secrets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the &lt;code&gt;dotenv&lt;/code&gt; dependency:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// or with ESM&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// read and make secrets from the .env entries available:&lt;/span&gt;
&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Call &lt;code&gt;dotenv.config()&lt;/code&gt; to make the secrets available from the &lt;code&gt;process.env&lt;/code&gt; object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MNEMONIC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MNEMEONIC&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MNEMONIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// prints 'mnemomic`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The goal of hiding environment secrets is to hide sensitive information within our applications. Care must however be taken not to add, commit and push .env files to version control as they might end up in the wrong hands.&lt;/p&gt;

&lt;p&gt;Here's what might happen, if one accidentally pushes PRIVATE key to &lt;code&gt;Github&lt;/code&gt;, a bot may grab the private key, restore your wallet and drain all your ETH or BTC in a matter of seconds. &lt;/p&gt;

&lt;p&gt;Did I miss anything? Feel free to leave a comment, a complement and honest feedback.&lt;br&gt;
Happy hacking!&lt;br&gt;
This article was originally published at &lt;a href="https://naftalimurgor.netlify.com"&gt;https://naftalimurgor.netlify.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>security</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
