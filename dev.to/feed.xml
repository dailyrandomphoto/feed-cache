<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why I Love Zero Result Search as a Metric and You Should Too!</title>
      <author>Amara Graham</author>
      <pubDate>Fri, 09 Apr 2021 20:05:13 +0000</pubDate>
      <link>https://dev.to/missamarakay/why-i-love-zero-result-search-as-a-metric-and-you-should-too-3efj</link>
      <guid>https://dev.to/missamarakay/why-i-love-zero-result-search-as-a-metric-and-you-should-too-3efj</guid>
      <description>&lt;p&gt;Have you ever "broken" Google search? Typed in something and received exactly zero results? Or maybe like a handful of results, with what almost looks like an apology from the search engine, that might as well be nothing? It's equal parts thrilling and annoying. Like HA! I got you Google. Until you realize, you didn't make any progress helping yourself. &lt;/p&gt;

&lt;p&gt;It's likely your technical documentation or developer portal has a search capability. &lt;/p&gt;

&lt;p&gt;Search gives you two really great opportunities, you can track what terms people are using and maybe even see what they are clicking on (click-through) after searching with those terms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-your-assumptions-meet-the-community-where-they-are"&gt;
  &lt;/a&gt;
  Check your assumptions, meet the community where they are
&lt;/h2&gt;

&lt;p&gt;Ask yourself questions like the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are searchers using the terms &lt;em&gt;you&lt;/em&gt; expected?&lt;/li&gt;
&lt;li&gt;Are searchers finding what &lt;em&gt;you&lt;/em&gt; expect with the terms they are using?&lt;/li&gt;
&lt;li&gt;Are searchers finding what &lt;em&gt;they&lt;/em&gt; expect with the terms they are using?&lt;/li&gt;
&lt;li&gt;Are searchers finding nothing with a term &lt;em&gt;you&lt;/em&gt; expect them to use?&lt;/li&gt;
&lt;li&gt;Are searchers seeming to use terms &lt;em&gt;you&lt;/em&gt; previously didn't think of and are they hitting a dead end? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This really all boils down to the core question - &lt;strong&gt;did you make assumptions about your community's knowledge that are incorrect?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your searchers, your community members including potential customers(!!!), are using their terms, their language. &lt;/p&gt;

&lt;p&gt;It is your job to educate or train them in the right direction.&lt;/p&gt;

&lt;p&gt;This can be done with synonyms explicitly written in your content, a glossary, or more subtly, enhancing search metadata with synonyms. &lt;/p&gt;

&lt;p&gt;Failure to guide them through this experience efficiently will result in the path of least resistance - finding a competing technology that does better/easier/more seamlessly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-can-measure-it"&gt;
  &lt;/a&gt;
  If you can measure it...
&lt;/h2&gt;

&lt;p&gt;Let's revisit that last question in the bulleted list. Depending on the tool you are using (slightly more on that below), you should be able to see when a term returns zero results - often called zero result search or no search result. &lt;/p&gt;

&lt;p&gt;This is my &lt;strong&gt;favorite&lt;/strong&gt; thing to track, both terms and a ratio. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-BggmXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1305986664381247494/RH5n-NVn_normal.jpg" alt="Amara Graham profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Amara Graham
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/missamarakay"&gt;@missamarakay&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      What's your favorite developer experience (&lt;a href="https://twitter.com/hashtag/DX"&gt;#DX&lt;/a&gt;) metric? &lt;br&gt;&lt;br&gt;I'll start - zero result search or no result search rate 🤩
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:45 PM - 05 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1357716874532958209" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1357716874532958209" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1357716874532958209" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In Developer Experience, my goal is to offer developers an efficient, effective, delightful experience and I would use none of those words to describe hitting the wall that is "zero results returned" when searching technical documentation.&lt;/p&gt;

&lt;p&gt;I've already mentioned above some of the ways to improve this, including overt synonyms to educate your searchers or synonyms in metadata for a more subtle approach. &lt;/p&gt;

&lt;p&gt;What I haven't mentioned is that zero result search is a great opportunity for a success metric you can clearly track and improve! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-you-can-improve-it"&gt;
  &lt;/a&gt;
  ... you can improve it
&lt;/h2&gt;

&lt;p&gt;I consider zero result search rich data because it often gives me a ratio (great for things like KPIs or other quantitative tracking metrics) and a curated list of terms I can iterate on and improve. It's literally like "hey, should people be searching for this? Why or why not? Better investigate." &lt;/p&gt;

&lt;p&gt;It may even prioritize things for me by showing me just how many people attempted a given search! &lt;/p&gt;

&lt;p&gt;Now, allow me to throw myself under the bus by sharing with you the data that has been collected and I've done exactly zero work towards improving. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sc0rC9tT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4nysai1jdcq2kmdr3to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sc0rC9tT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4nysai1jdcq2kmdr3to.png" alt="A line chart showing a 7-day range in Algolia DocSearch of total searches, total users, and no results rate."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a look at a 7-day range in our Algolia DocSearch for a project that hasn't officially launched. Dark blue, top line is total searches. Aqua, mostly middle line, is total users. Dusty purple, mostly bottom line, is no results rate.&lt;/p&gt;

&lt;p&gt;Until we officially launch, I don't know what a good baseline is, as these early engagers have been asked to critique the overall experience and offering, as you do with pre-GA programs. They are in a mindset to break and challenging things, which is not to say our post-GA audience won't do this, but theoretically, they may have different goals in mind. This is why I've done no work to improve this, but I'm casually monitoring. &lt;/p&gt;

&lt;p&gt;I do know the closer I can get the no results rate to 0% the better the developer experience will be, at least from one aspect of the searcher's perspective. I may have not solved their problem, but I have given them something to read that's hopefully relevant. And I didn't hit them with that "no results returned" page.&lt;/p&gt;

&lt;p&gt;Let me show you a few terms that came up over a 3 month period, a great list to iterate on to improve your docs outside of the usual new or improved features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--suSI2Eih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx1ihenbauq6ayntg8gw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--suSI2Eih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx1ihenbauq6ayntg8gw.png" alt="A list of zero result search terms from a 3 month period."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we've got some interesting terms in here like "maxmessagesize", "newthrowerrorcommand", and "encryption". &lt;/p&gt;

&lt;p&gt;We previously had a bug with &lt;code&gt;maxMessageSize&lt;/code&gt; where it wasn't respecting the value on write, which I only know because I did a Google search and found a &lt;a href="https://camunda.com/blog/2020/07/zeebe-0225-0234-release/"&gt;release blog&lt;/a&gt;. Because of this history, and because &lt;code&gt;maxMessageSize&lt;/code&gt; feels like an important value to understand in a system that does messaging, we should probably take care to explicitly document it somewhere. &lt;em&gt;Writes herself a to-do.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youve-convinced-me-now-what-do-i-do"&gt;
  &lt;/a&gt;
  You've convinced me, now what do I do?
&lt;/h2&gt;

&lt;p&gt;You don't need to roll your own tools to track search terms and zero results search, but you may need to configure portions of existing tooling to do it.&lt;/p&gt;

&lt;p&gt;You can capture this search data with purpose-built tools like Algolia (DocSearch) or configure Google Analytics and the massive voodoo magic that is that suite of tools. &lt;/p&gt;

&lt;p&gt;If you are using a documentation framework or developer portal framework this may already be available to you in your admin console. For example, I know KnowledgeOwl makes this available and I've worked with tech writers who monitor this quite closely because they care about the experience. &lt;/p&gt;

&lt;p&gt;So do a little investigating, see what you are currently tracking, or could track in your search experience, and go from there.&lt;/p&gt;

&lt;p&gt;Are you measuring zero result search? Or have you looked at the data? I'd love to know what your threshold is for your no results ratio. Or if this post inspires you to start tracking this, let me know that too! &lt;/p&gt;

</description>
      <category>documentation</category>
      <category>developerrelations</category>
      <category>devrel</category>
      <category>developerexperience</category>
    </item>
    <item>
      <title>My Favorite C# Features - Part 3: Nullability</title>
      <author>Jeffrey T. Fritz</author>
      <pubDate>Fri, 09 Apr 2021 19:57:37 +0000</pubDate>
      <link>https://dev.to/dotnet/my-favorite-c-features-part-3-nullability-2mcg</link>
      <guid>https://dev.to/dotnet/my-favorite-c-features-part-3-nullability-2mcg</guid>
      <description>&lt;p&gt;I'm a practical programmer.  I don't like to over-optimize my code, and I want to make it very readable for the next person who needs to work with something that I wrote.  Consequently, I sometimes leave alternate interpretations and access patterns into my code that might not always work as expected.  A great example of this is the ability to pass &lt;code&gt;null&lt;/code&gt; into C# methods and trigger a different behavior.  This can lead to errors in future code where you are now accessing something that inadvertently is a &lt;code&gt;null&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;In C# 8, the langauge designers introduced a feature called &lt;a href="https://docs.microsoft.com/dotnet/csharp/nullable-references?WT.mc_id=friends-0000-jefritz"&gt;&lt;strong&gt;Nullable Reference Types&lt;/strong&gt;&lt;/a&gt; that allows you to define which variables could be null and which variables should &lt;strong&gt;NEVER&lt;/strong&gt; be null.&lt;/p&gt;

&lt;p&gt;In this article, and as an effort to help make myself a better programmer, we're going to review the nullable Reference Types feature of C# and discuss why it is an important feature that we should start using by default in our applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-null"&gt;
  &lt;/a&gt;
  Why null?
&lt;/h2&gt;

&lt;p&gt;As an object oriented language, C# has always had the concept of &lt;code&gt;null&lt;/code&gt; in code.  null is the absence of an object, its synonymous with "nothing" and is an easy concept for folks to understand when you declare a variable.  However, this can (and most likely WILL) lead to the dreaded &lt;code&gt;NullReferenceException&lt;/code&gt;, an error that indicates a &lt;code&gt;null&lt;/code&gt; object was acted on unexpectedly.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;PRO TIP:&lt;/em&gt; Sometimes, you'll hear C# programming folks refer to a &lt;code&gt;NullReferenceException&lt;/code&gt; as an NRE.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="n"&gt;myConsoleLogger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;myConsoleLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LogInformation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Processed the data"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the sample above, the &lt;code&gt;myConsoleLogger&lt;/code&gt; object is declared but never assigned.  This would trigger a &lt;code&gt;NullReferenceException&lt;/code&gt; because &lt;code&gt;myConsoleLogger&lt;/code&gt; was never assigned an instance of an object.  This is a simple mistake, but it would be really nice if the compiler caught this before we even tried to run the code.  Consider a scenario like this array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;firstValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to throw a &lt;code&gt;NullReferenceException&lt;/code&gt; also, because the &lt;code&gt;values&lt;/code&gt; array is declared but never assigned values.  The &lt;code&gt;firstValue&lt;/code&gt; variable is initialized with a &lt;code&gt;null&lt;/code&gt; value on line 2 and the &lt;code&gt;ToLower()&lt;/code&gt; method is then attempting to operate on a &lt;code&gt;null&lt;/code&gt; object.  Once again, a simple error because the &lt;code&gt;values&lt;/code&gt; array is never assigned values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nullable-contexts-and-compiler-warnings-to-the-rescue"&gt;
  &lt;/a&gt;
  Nullable Contexts and Compiler Warnings to the Rescue!
&lt;/h2&gt;

&lt;p&gt;Some folks fear the compiler.  There's a feeling that the compiler throwing errors or emitting warnings is an intimidating practice.  I see it the other way:  The compiler is my friend telling me when I made a mistake before I attempt to run my application.  In this case, I want the compiler to tell me when I might work with a &lt;code&gt;null&lt;/code&gt; object because the variables weren't initialized properly.  Let's get some help to ensure that our objects in our code are being used correctly.&lt;/p&gt;

&lt;p&gt;By default in C#, any reference type can be assigned the &lt;code&gt;null&lt;/code&gt; value.  With C# 8 and .NET Core 3.0 and later, we can define contexts in and around our projects where the compiler will perform nullability checks and raise warnings if we are potentially going to throw a &lt;code&gt;NullReferenceException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can enable nullable checking on a segment of code by wrapping it with a compiler pre-processor &lt;code&gt;#nullable&lt;/code&gt; with a setting the indicates how it should behave.  Let's add nullability checking to the &lt;code&gt;Hat&lt;/code&gt; class I introduced in the previous post in this series:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;AcquiredYear&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;restore&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two pre-processor commands present in this code:  &lt;code&gt;#nullable enable&lt;/code&gt; and &lt;code&gt;#nullable restore&lt;/code&gt;.  The &lt;code&gt;enable&lt;/code&gt; command tells the compiler to check for variables that could be inadvertently assigned null and raise a compiler warning if there are any.  Sure enough, in the &lt;code&gt;Hat&lt;/code&gt; class, the string properties &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Theme&lt;/code&gt; need to be initialized according to these compiler warnings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;warning CS8618: Non-nullable property 'Name' must contain a non-null value when exiting 
constructor. Consider declaring the property as nullable. 
warning CS8618: Non-nullable property 'Theme' must contain a non-null value when exiting constructor. Consider declaring the property as nullable.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This are easy fixes as I can default the values for these two properties to &lt;code&gt;string.Empty&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;AcquiredYear&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;restore&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The compiler warnings go away, and I am a happy developer.  If I try to define a &lt;code&gt;Hat&lt;/code&gt; and assign &lt;code&gt;null&lt;/code&gt; to these fields, will the compiler catch it?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;newHat&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Phillies 80's Maroon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;AcquiredYear&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1985&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code DOES compile with no warnings.  Why?  The &lt;code&gt;#nullable&lt;/code&gt; compiler directive is set on the &lt;code&gt;Hat&lt;/code&gt; class, not the construction of the &lt;code&gt;newHat&lt;/code&gt; variable.  In order to protect more of our code, we need to expand the nullable check's scope to include more of our code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;newHat&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Phillies 80's Maroon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;AcquiredYear&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1985&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;restore&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This raises the appropriate compiler warning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;warning CS8625: Cannot convert null literal to non-nullable reference type.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's review quickly:  these are ONLY compiler warnings.  In fact, this code will run and not produce any errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declaring-a-reference-type-as-nullable"&gt;
  &lt;/a&gt;
  Declaring a Reference Type as Nullable
&lt;/h2&gt;

&lt;p&gt;I can also tell the compiler that it's ok if one of these reference values is assigned null by attaching a &lt;code&gt;?&lt;/code&gt; to the end of it's variable declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;AcquiredYear&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this change, the &lt;code&gt;Name&lt;/code&gt; of the hat is allowed to be assigned &lt;code&gt;null&lt;/code&gt; regardless of the Nullable context around the class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#projectwide-nullable-checking"&gt;
  &lt;/a&gt;
  Project-wide Nullable Checking
&lt;/h2&gt;

&lt;p&gt;What if I want to roll-out this compiler interaction across my ENTIRE project.  You can add an entry to your project file that indicates nullable checking should be enabled with the &lt;code&gt;Nullable&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;OutputType&amp;gt;&lt;/span&gt;Exe&lt;span class="nt"&gt;&amp;lt;/OutputType&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net5.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Nullable&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/Nullable&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now remove the &lt;code&gt;#nullable&lt;/code&gt; directives from the &lt;code&gt;Hat&lt;/code&gt; class and I'll receive the same compiler warnings without writing more code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disable-nullable-checking"&gt;
  &lt;/a&gt;
  Disable Nullable Checking
&lt;/h2&gt;

&lt;p&gt;What if I have an application that is configured with the &lt;code&gt;Nullable&lt;/code&gt; entry in the project file, and I want to relax the checking on various sections of my application?&lt;/p&gt;

&lt;p&gt;Similar to before, we can add a processor directive to our code that disables null checking:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;disable&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;newHat&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Phillies 80's Maroon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;AcquiredYear&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1985&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;restore&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're talking...  I can enforce the better developer behavior by adding the Nullable check to my project file, and those developers that want to take the risk of assigning and working with &lt;code&gt;null&lt;/code&gt; can wrap their code with the processor to remove the warnings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-final-step"&gt;
  &lt;/a&gt;
  The Final Step
&lt;/h2&gt;

&lt;p&gt;Warnings are just silly yellow text the compiler emits that tells us we MIGHT have a concern in our project.  Did you know that you can turn up the importance of this warnings, converting them to errors the compiler emits and ensuring that you write better code?  Add the &lt;code&gt;TreatWarningsAsErrors&lt;/code&gt; element to your project file and those pesky warnings become a real problem that blocks your project from compiling properly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;OutputType&amp;gt;&lt;/span&gt;Exe&lt;span class="nt"&gt;&amp;lt;/OutputType&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net5.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Nullable&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/Nullable&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TreatWarningsAsErrors&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/TreatWarningsAsErrors&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our project team will be forced to treat &lt;code&gt;null&lt;/code&gt; values with more respect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The ability to assign and work with the &lt;code&gt;null&lt;/code&gt; value is valuable in C#, but can be misused and lead to errors in our running applications.  Let's get some help from the compiler to make handling of &lt;code&gt;null&lt;/code&gt; values easier and clearer when we're building our projects.&lt;/p&gt;

&lt;p&gt;Did you know, I host a weekly live stream on the &lt;a href="https://twitch.tv/visualstudio"&gt;Visual Studio Twitch channel&lt;/a&gt; teaching the basics of C#? Tune in on Mondays at 9a ET / 1300 UTC for two hours of learning in a beginner-friendly Q+A format with demos and sample code you can download.&lt;/p&gt;

&lt;p&gt;Looking to get started learning C#? Checkout our &lt;a href="https://docs.microsoft.com/users/dotnet/collections/yz26f8y64n7k07?WT.mc_id=friends-0000-jefritz"&gt;free on-demand courses on Microsoft Learn!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>programming</category>
    </item>
    <item>
      <title>How I Learned Machine Learning in a Weekend</title>
      <author>Guy Torbet</author>
      <pubDate>Fri, 09 Apr 2021 19:29:53 +0000</pubDate>
      <link>https://dev.to/torbet/how-i-learned-machine-learning-in-a-weekend-3fac</link>
      <guid>https://dev.to/torbet/how-i-learned-machine-learning-in-a-weekend-3fac</guid>
      <description>&lt;p&gt;Machine learning and AI as a whole can seem hugely daunting when you're first getting started. Over a weekend, I &lt;em&gt;painstakingly&lt;/em&gt; sifted through all of the "beginner" guides on how to get started, so that you don't have to.&lt;/p&gt;

&lt;p&gt;If you like this post, feel free to &lt;a href="https://torbet.co/subscribe"&gt;subscribe&lt;/a&gt; or check out my other posts &lt;a href="https://torbet.co/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most people recommend an image classifier using the MNIST dataset as your 'hello world'/first machine learning program - I'm not sure if there is just an obscenely high barrier to entry, or if I'm simply just stupid, but for someone who wants to go from zero to something in the world of machine learning, this project seems a bit tricky.&lt;/p&gt;

&lt;p&gt;Now of course I attempted it. I read anything and everything that I could get my hands on about the inner workings for how neural networks ACTUALLY work, and thought I had a pretty rudimentary understanding of what was going on, but with pre-made datasets and perplexing technical jargon, it's often hard to dilute what is actually happening - I'm still not entirely sure what the fuck a 2D convolutional layer is.&lt;/p&gt;

&lt;p&gt;So without further ado, here's how a beginner can get started with machine learning, by a REAL beginner. This will cover everything, from what libraries and frameworks to use, to how to save and load your trained model. By the end of this project, you should have a rough idea as to how it all works, which will send you on your merry way to more complex projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-framework-to-use"&gt;
  &lt;/a&gt;
  What Framework to Use
&lt;/h2&gt;

&lt;p&gt;There are countless machine learning frameworks and libraries out there, but the main players are TensorFlow, PyTorch and Keras (now part of TensorFlow). As usual, I ended up in a state of paralysis as to which to pick, and which one was the best - this is what inspired me to adopt the mentality of &lt;a href="https://torbet.co/posts/Just-Start"&gt;&lt;strong&gt;just starting&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end, I went with PyTorch. I would recommend this as you get control of everything and it makes it easy to visualise what's going on, but in the grand scheme of things they all work well and it doesn't really matter which one you go with - so just pick one and get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-project"&gt;
  &lt;/a&gt;
  First Project
&lt;/h2&gt;

&lt;p&gt;Neural Networks function around arrays, or tensors if you're cool (yes, I know that there is a difference, but it's not that important at this stage).&lt;/p&gt;

&lt;p&gt;Long story short, you give a trained model an input as an array, and it gives you an output, that is hopefully correct. The simplest way that I could think to demonstrate this was to count the number of occurrences in a list.&lt;/p&gt;

&lt;p&gt;The end goal of this model is to give it a binary list, and it outputs the number of ones, for example;&lt;/p&gt;

&lt;p&gt;input: [1, 0, 0, 1, 0, 0, 0, 0, 1, 1], output: 4&lt;/p&gt;

&lt;p&gt;Neural networks require an input and an expected output in order to train. You can generate arrays of random 1's and 0's like so, which also includes labels (expected outputs) for easy training later down the line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;genData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then can assign the values and labels to variables, which we convert to tensors so that the neural network can easily read and process them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;genData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;xTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;yTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple so far right? Now we structure our network! We will use PyTorches nn.Module to include all of the layers we could ever need, and then just piece them together. For this network, I only used 1 layer, it takes in 10 inputs (I used a random binary array of length 10), and 1 output (0-10, number of 1's in the given list).&lt;/p&gt;

&lt;p&gt;We then have a forward method, which tells the network how to process the inputs as they pass through the layers, we're keeping it simple by just passing them through layer 1 and using a relu function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we need a loss function, which will tell our network how far off the expected output it was, so that it can correct itself and become more accurate, we will also add an optimiser, to you know... optimise this process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;criterion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MSELoss&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;optimizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SGD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;lr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can do a lot of reading for yourself on the different loss functions, there are hundreds of them, but I enjoyed the MSE or cross entropy loss function for linear NN's.&lt;/p&gt;

&lt;p&gt;Now, TRAIN, TRAIN, TRAIN! Think of an epoch as a training loop, so in this example, I'm cycling through the data 1000 times:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xTensor&lt;/span&gt;
        &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yTensor&lt;/span&gt;

        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zero_grad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;criterion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unsqueeze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can finally save the model like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cnn.pt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! you've successfully created and trained your first neural network, from the ground up!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-model"&gt;
  &lt;/a&gt;
  Running the Model
&lt;/h2&gt;

&lt;p&gt;Now that we've trained and saved our model, we can start to pass in real inputs, and see what it predicts!&lt;/p&gt;

&lt;p&gt;Make a new file, and initialise a simple array, and turn it into a tensor like before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;in_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;inTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to copy the model from our previous file, so that we can add the weights and biases from our saved neural network to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can load our saved model, evaluate it, and pass in our new input data!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'cnn.pt'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inTensor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you print the value of the "out" variable, you should see a 6 in this case!&lt;/p&gt;

&lt;p&gt;If you've made it this far and have been following along, you should hopefully have a better understanding as to how PyTorch, and machine learning, works as a whole. For me, this project was a good jumping off point, and after it I felt more comfortable pursuing image classification with MNIST!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>python</category>
      <category>ai</category>
      <category>learnprogramming</category>
    </item>
    <item>
      <title>type vs interface in TypeScript</title>
      <author>saad ahmad</author>
      <pubDate>Fri, 09 Apr 2021 19:10:17 +0000</pubDate>
      <link>https://dev.to/saadsharfuddin/type-vs-interface-in-typescript-35i6</link>
      <guid>https://dev.to/saadsharfuddin/type-vs-interface-in-typescript-35i6</guid>
      <description>&lt;p&gt;When I first started working with TypeScript, I quickly found myself questioning the use of &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt; in regards to providing type safety to my code. What is the difference between the two? When should I use one over the other? I decided it was time to get some answers.&lt;/p&gt;

&lt;p&gt;After a bit of research, I realized that the two are more similar today than they have ever been. However, there are still some differences that are worth mentioning. Let’s talk about it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-and-interfaces-at-a-high-level"&gt;
  &lt;/a&gt;
  types and interfaces at a high level
&lt;/h3&gt;

&lt;p&gt;Before we take a look at the similarities and differences between a &lt;code&gt;type&lt;/code&gt; and an &lt;code&gt;interface&lt;/code&gt;, let’s first get a good mental model of what the two were intended to achieve in the first place.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;type&lt;/code&gt; keyword in TypeScript is a way for you to provide type aliases to your variables, objects, and functions. These aliases essentially &lt;em&gt;describe&lt;/em&gt; what your data is going to look like. You can describe what your data is going to look like by using the core types (e.g. &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt; etc.) or by creating your own custom types. Let’s take a look at a few examples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDkDY49p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ehj9d5iv6ln8cj3m5er.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDkDY49p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ehj9d5iv6ln8cj3m5er.png" alt="1_MKAKdf6Gco0bcRhNr3pgjg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;interface&lt;/code&gt; keyword in TypeScript on the other hand is a way for you to describe &lt;strong&gt;only&lt;/strong&gt; what your objects are going to look like. Let’s see an example of &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mALzEbEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67zhfletiltbgvs5op0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mALzEbEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67zhfletiltbgvs5op0g.png" alt="1_hSlmeCXEy1x37EZ9E9smLQ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right off the bat, you might think that the &lt;code&gt;type&lt;/code&gt; keyword is the more flexible choice of the two when it comes to type safety. Hold that thought. Let’s take a look now at how the two are similar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#similarities"&gt;
  &lt;/a&gt;
  Similarities
&lt;/h3&gt;

&lt;p&gt;Let’s say I wanted to provide some type safety for an object, one of the most common use cases for using a &lt;code&gt;type&lt;/code&gt; or an &lt;code&gt;interface&lt;/code&gt;. Turns out they both work pretty much the same, and the syntax is almost identical.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t-2-1gn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44iatgimtabmszm93vhn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t-2-1gn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44iatgimtabmszm93vhn.png" alt="1_TPjtC18Ro3IhSSro3ZXoYw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What if I wanted to combine object properties from one &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; into another? We can do that too for both.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4-RQca7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10m7jy8j3dapyxso11on.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4-RQca7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10m7jy8j3dapyxso11on.png" alt="1_ARdjVoUQbBugTD8MlvenrA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJkRPXLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwguegx24ggi9dlavfmk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJkRPXLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwguegx24ggi9dlavfmk.png" alt="1_yNQhRWm2m2F8esP1HPw1Yg"&gt;&lt;/a&gt; &lt;em&gt;I personally prefer the extends syntax as it feels a bit more natural to me.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Want to provide some type safety to your functions? This is also possible with both a &lt;code&gt;type&lt;/code&gt; and an &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l6BF6NTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gx5733qewnx6pmfwvob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l6BF6NTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gx5733qewnx6pmfwvob.png" alt="1_B1WDG4pKhygWDnPN8vCCEA"&gt;&lt;/a&gt; &lt;em&gt;I personally prefer using a type here since it reads a bit cleaner, but totally up to you!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A quick note about the above. Earlier I mentioned that an interface can &lt;strong&gt;only&lt;/strong&gt; describe what an object is going to look like, yet here I am describing what a function is going to look like with an &lt;code&gt;interface&lt;/code&gt;. The reason this is possible is because a function technically &lt;em&gt;is&lt;/em&gt; an object under the hood.&lt;/p&gt;

&lt;p&gt;Finally, if you wanted to create a class that adheres to a certain type safety contract provided by a &lt;code&gt;type&lt;/code&gt; or an &lt;code&gt;interface&lt;/code&gt;, you would be able to do so just fine with both.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig4uYVhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zf0gacwfbvrqkz811yv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig4uYVhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zf0gacwfbvrqkz811yv.png" alt="1_0FTHZgh-R80TUJ355AwURA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That covers most of the similarities of &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt;, let’s now take a look at the differences.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#differences"&gt;
  &lt;/a&gt;
  Differences
&lt;/h3&gt;

&lt;p&gt;Starting with &lt;code&gt;type&lt;/code&gt;, there are a few things that are possible that you wouldn’t be able to do with an &lt;code&gt;interface&lt;/code&gt;. For example, If you wanted to setup a type alias for just a single core type (e.g. string, number, boolean etc.), this is something that is possible with &lt;code&gt;type&lt;/code&gt; but not with &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSIM3fBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op7uwnpwny4wsw85yfh0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSIM3fBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op7uwnpwny4wsw85yfh0.png" alt="1_9msX1PR0rC_REWxd3eouAw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another possibility with &lt;code&gt;type&lt;/code&gt; is that you are able to create a bit more custom type aliases by using unions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OsirRkWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/balanxh1crdkuimpg39j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OsirRkWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/balanxh1crdkuimpg39j.png" alt="1_QlcaARr_2JgnLPry7FEsoQ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pretty much sums up the unique offerings of &lt;code&gt;type&lt;/code&gt;. While there may be some more advance features that &lt;code&gt;type&lt;/code&gt; offers that I missed, this should cover the most common use cases.&lt;/p&gt;

&lt;p&gt;Moving on to &lt;code&gt;interface&lt;/code&gt;, there is a unique feature called “declaration merging” that you aren’t able to do with a &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3yI3bMzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0zhxxxvuqq52hdjuap1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3yI3bMzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0zhxxxvuqq52hdjuap1.png" alt="1_pbV0jRO22ETpb0-_obqmBw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h3&gt;

&lt;p&gt;To summarize, both &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt; provide some nice type safety options for you to choose from depending on your needs. When it comes to describing object shapes which is the majority of my use cases, I prefer to go with an &lt;code&gt;interface&lt;/code&gt;. I personally like that an &lt;code&gt;interface&lt;/code&gt; was designed specifically with this purpose in mind, and is very intentional about it.&lt;/p&gt;

&lt;p&gt;However anytime I need to provide type safety for a function, or need a bit more customization for a type alias such as the case with unions, I prefer to go with &lt;code&gt;type&lt;/code&gt;. Both are lovely options for providing type safety, and you really can’t go wrong with using either one!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Super Useful Menubar Apps For macOS</title>
      <author>Rohith Gilla</author>
      <pubDate>Fri, 09 Apr 2021 18:48:55 +0000</pubDate>
      <link>https://dev.to/gillarohith/5-super-useful-menubar-apps-for-macos-1o9o</link>
      <guid>https://dev.to/gillarohith/5-super-useful-menubar-apps-for-macos-1o9o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMpaJ4ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/dzaUX7CAG0Ihi/giphy.gif%3Fcid%3Decf05e47lyeouvoiu4bvmmmdlzfgx8dwfb0n5jptcz4zo6yj%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMpaJ4ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/dzaUX7CAG0Ihi/giphy.gif%3Fcid%3Decf05e47lyeouvoiu4bvmmmdlzfgx8dwfb0n5jptcz4zo6yj%26rid%3Dgiphy.gif" alt="Hello"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey everyone! In this post let's breeze ❄️ through some of my most used and favourite, free menu bar applications for Mac. &lt;/p&gt;

&lt;p&gt;At one point or another, nearly every Mac user reaches a point where they feel as though the functionality included with macOS is not enough to enable them to perform their jobs to their standards. For this reason, many Mac owners turn to third-party applications that will help improve these workflows while offering additional features.&lt;/p&gt;

&lt;p&gt;There are a number of menu bar applications that Mac owners use for daily workflows. In many cases, these applications help you improve your workflow and offers you some extra features that will allow you to do your work more efficiently throughout the day.&lt;/p&gt;

&lt;p&gt;If you haven't checked my 2020 edition I'll leave the link here, do check it out 😄&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/gillarohith" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vVXfW6Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xIsgHLUD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/317018/ae62352f-cc66-414d-8d25-1735f649f780.jpg" alt="gillarohith image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/xenoxdev/6-super-useful-menubar-apps-for-macos-3g19" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;6 Super Useful Menubar Apps For MacOS&lt;/h2&gt;
      &lt;h3&gt;Rohith Gilla ・ Jun 16 '20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#macos&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;The 5 Applications we will go over are the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cloud App&lt;/li&gt;
&lt;li&gt;Dozer&lt;/li&gt;
&lt;li&gt;Tot&lt;/li&gt;
&lt;li&gt;xbar&lt;/li&gt;
&lt;li&gt;Drafts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's glide over them now&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jwmoiNWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/9DeF9TxMxqybiMiKDK/giphy.gif%3Fcid%3Decf05e47swknnji9oc0a2fq8u2e4atinmczxiduaeorihybu%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jwmoiNWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/9DeF9TxMxqybiMiKDK/giphy.gif%3Fcid%3Decf05e47swknnji9oc0a2fq8u2e4atinmczxiduaeorihybu%26rid%3Dgiphy.gif" alt="Glide"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloud-app"&gt;
  &lt;/a&gt;
  Cloud App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--edLTPeGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets-global.website-files.com/58e32bace1998d6e3fee8d71/6063e0c4f2ded72e5e7cebc3_cloudapp-logo-full-lockup.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edLTPeGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets-global.website-files.com/58e32bace1998d6e3fee8d71/6063e0c4f2ded72e5e7cebc3_cloudapp-logo-full-lockup.svg" alt="Cloud app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Record your screen as a video with your voice &amp;amp; face, an annotated image, or a GIF and instantly share it as a link to get your point across.&lt;/p&gt;

&lt;p&gt;This is an amazing application, this is currently my go-to app to take and share screenshots, record screen.&lt;/p&gt;

&lt;p&gt;You can download it &lt;a href="https://www.getcloudapp.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dozer"&gt;
  &lt;/a&gt;
  Dozer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Q6T1z6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/Mortennn/Dozer/raw/master/Stuff/demo.gif" class="article-body-image-wrapper"&gt;&lt;img height="100" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Q6T1z6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/Mortennn/Dozer/raw/master/Stuff/demo.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hide menu bar icons to give your Mac a cleaner look. This is a free version of the famous bartender application.&lt;/p&gt;

&lt;p&gt;You can download it &lt;a href="https://github.com/Mortennn/Dozer/releases"&gt;here&lt;/a&gt;&lt;br&gt;
You can also check and contribute to the code &lt;a href="https://github.com/Mortennn/Dozer/releases"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tot"&gt;
  &lt;/a&gt;
  Tot
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZzy6r7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmsavs5amxksc5x2jbhy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZzy6r7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmsavs5amxksc5x2jbhy.png" alt="Tot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An elegant, simple way to collect &amp;amp; edit text on your Mac, iPhone, and iPad.&lt;/p&gt;

&lt;p&gt;I use to jot down quick stuff, write some important tasks and taking notes during an impromptu meeting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#xbar"&gt;
  &lt;/a&gt;
  xbar
&lt;/h2&gt;

&lt;p&gt;Put the output from any script or program into your macOS Menu Bar.&lt;/p&gt;

&lt;p&gt;If you want a custom script running on your menubar, like your youtube stats, Twitter followers or anything else, this is the application for you.&lt;/p&gt;

&lt;p&gt;You can download and check other plugins &lt;a href="https://xbarapp.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drafts"&gt;
  &lt;/a&gt;
  Drafts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlcEoa_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6geqt5uqd57qpstx6qh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlcEoa_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6geqt5uqd57qpstx6qh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Drafts opens to a new page with the keyboard ready so you can type immediately. Go hands-free with Dictation. Drafts lets you get things down before you forget without fiddling folders, naming, etc.&lt;/p&gt;

&lt;p&gt;This is one of the most underrated application, this is the quickest way to jot down anything. The best thing is not only it resides in the menu bar, but it can also be added as a complication to an Apple Watch. It syncs between iPad, iPhone, Mac, Watch seamlessly. You get the amazing apple ecosystem feeling.&lt;/p&gt;

&lt;p&gt;You can support me here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/C0C042WW1"&gt;&lt;img height="36" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EWEX3xu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi2.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rohithgilla"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to drop your favourite apps in the comments below and let me know if I missed any amazing application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--624_nTBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/KB8C86UMgLDThpt4WT/giphy.gif%3Fcid%3Decf05e47z9s61cqcouzqcscd5f037k6yeo7ljgegtgy0z06v%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--624_nTBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/KB8C86UMgLDThpt4WT/giphy.gif%3Fcid%3Decf05e47z9s61cqcouzqcscd5f037k6yeo7ljgegtgy0z06v%26rid%3Dgiphy.gif" alt="Thanks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
Rohith Gilla&lt;/p&gt;

&lt;p&gt;P.S: Please let me know if you want me to explain how each of the application helps make your workflow better in detail. &lt;/p&gt;

&lt;p&gt;Will definitely try to make it happen.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>macos</category>
      <category>todayilearned</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Litmus Tests in Tech</title>
      <author>Adam Nathaniel Davis</author>
      <pubDate>Fri, 09 Apr 2021 18:43:37 +0000</pubDate>
      <link>https://dev.to/bytebodger/litmus-tests-in-tech-1ll7</link>
      <guid>https://dev.to/bytebodger/litmus-tests-in-tech-1ll7</guid>
      <description>&lt;p&gt;Since I began blogging on Dev.to, one of my primary subjects has been the (arbitrary) standards that we apply to others when we evaluate them as potential candidates for jobs.  In fact, it was the focus of my &lt;em&gt;first&lt;/em&gt; blog on this platform, and I've addressed it on several different levels since.  But this really became much clearer (in &lt;em&gt;my&lt;/em&gt; mind, at least) after I posted my last article - an article about applying to Facebook.&lt;/p&gt;

&lt;p&gt;In that article, I explained that I'd been told to expect questions about &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt;.  And because I don't feel any need to "bolster" my image in this forum, I also mentioned that I had to immediately Google those concepts - because I wasn't familiar with them.&lt;/p&gt;

&lt;p&gt;To be absolutely clear, I've been coding, quite literally, since I was a kid.  I've been coding &lt;em&gt;professionally&lt;/em&gt; for almost a quarter-century.  I've been doing JavaScript development quite heavily for about... a decade or so.  And I've been doing React development, specifically, for the last five+ years.  &lt;/p&gt;

&lt;p&gt;Despite this mountain of real-world experience, I wasn't terribly familiar with the ideas of &lt;code&gt;.call()&lt;/code&gt; or &lt;code&gt;.apply()&lt;/code&gt;.  After I looked them up, I realized exactly &lt;em&gt;why&lt;/em&gt; I'm not familiar with them - because I don't use them &lt;strong&gt;&lt;em&gt;at all&lt;/em&gt;&lt;/strong&gt; in my regular work.  And given "modern" JS norms, I'm not even sure how or why I would use them going forward.  &lt;/p&gt;

&lt;p&gt;As a React dev, I'm intimately familiar with &lt;code&gt;.bind()&lt;/code&gt;.  I'm familiar with it because there was a time when I used it frequently.  That time has passed.  In my current dev (and by "current", I mean, the last 2-3 years), I haven't used it at all.  Quite frankly, for me, &lt;code&gt;.bind()&lt;/code&gt; is basically... &lt;em&gt;deprecated&lt;/em&gt;.  And when I looked up &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt;, I similarly felt that these concepts are &lt;em&gt;deprecated&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;You see, I don't even &lt;em&gt;use&lt;/em&gt; &lt;code&gt;this&lt;/code&gt; anymore.  And I'm not saying that there aren't some potentially-valid use-cases out there for &lt;code&gt;this&lt;/code&gt;.  But for the most part, if you're repeatedly falling back on &lt;code&gt;this&lt;/code&gt;, I gotta wonder how "modern" your JS dev really is?  And if you're &lt;em&gt;not&lt;/em&gt; using &lt;code&gt;this&lt;/code&gt;, then the use-cases for &lt;code&gt;.bind()&lt;/code&gt;, &lt;code&gt;.call()&lt;/code&gt;, and &lt;code&gt;.apply()&lt;/code&gt; become incredibly... &lt;em&gt;scant&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But this article is &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; about &lt;code&gt;.bind()&lt;/code&gt; or &lt;code&gt;.call()&lt;/code&gt; or &lt;code&gt;.apply()&lt;/code&gt;.  I truly couldn't care less whether you agree with my take on them.  In fact, this article isn't about any particular language construct at all.  This article is about the arrogance of "tech folks" (like myself), and &lt;em&gt;litmus tests&lt;/em&gt;, and &lt;em&gt;shibboleths&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MK0EOH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9qmi48tlbt10axk2iyg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MK0EOH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9qmi48tlbt10axk2iyg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shibboleths"&gt;
  &lt;/a&gt;
  Shibboleths
&lt;/h2&gt;

&lt;p&gt;To truly understand someone's abilities is... &lt;em&gt;hard&lt;/em&gt;.  And most of us can't really put in the time to do a "deep dive" on someone else's credentials.  So we take shortcuts.&lt;/p&gt;

&lt;p&gt;I'm not pointing fingers here.  &lt;em&gt;I&lt;/em&gt; do this.  We &lt;em&gt;all&lt;/em&gt; do this.  We create an informal list slang that we can use to determine whether someone is "one of &lt;em&gt;us&lt;/em&gt;" or "one of &lt;em&gt;them&lt;/em&gt;".  &lt;/p&gt;

&lt;p&gt;In other words, we create (consciously or subconsciously) &lt;em&gt;shibboleths&lt;/em&gt;.  We create shortcuts to separate the &lt;em&gt;real&lt;/em&gt; devs - from the pretenders.&lt;/p&gt;

&lt;p&gt;What do shibboleths look/sound like in the current JavaScript environment?  Here are some common examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If a JS dev says "class" or "constructor" or "OOP" without the appropriate level of derision, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev says "declarative" or "pure" or "immutable" or "functional programming", he's one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a frontend dev (of nearly any language) uses tabs, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If he uses spaces (and only &lt;em&gt;two-space&lt;/em&gt; indents!), he's one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev refers to object properties via dot-notation, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev relentlessly destructures all of his object properties into standalone variables, he one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev uses the &lt;code&gt;function&lt;/code&gt; keyword, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If he uses arrow syntax, he's one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev uses &lt;code&gt;.then()&lt;/code&gt;/&lt;code&gt;.catch()&lt;/code&gt;, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If he uses &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, he's one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I could go on and on here, but I think you get the point.  Because we don't have the time to do a "deep dive" on everyone's skillset, we resort to using these shorthand call signs to swiftly label a dev as one of &lt;em&gt;us&lt;/em&gt;, or one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The (massive) problem with this approach is that it's lazy.  And it frequently leads to wildly-inaccurate assessments.  &lt;/p&gt;

&lt;p&gt;If I can perfectly pronounce &lt;em&gt;shibbólet&lt;/em&gt;, does that mean I'm Jewish?  Possibly.  But it could also mean that I was raised in an environment with heavy Jewish influences.  Or it could mean that I study languages and I'm fluent in Hebrew.  Or it could even mean that I knew you'd use this silly test as a sorting mechanism, so I studied, beforehand, exactly how to pronounce &lt;em&gt;shibbólet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, the shibboleths we employ when evaluating fellow coders are prone to serious miscalculations.  More importantly, they're also rife with our own personal biases.  &lt;/p&gt;

&lt;p&gt;I've met some coders who absolutely adore &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;.  And that's fine.  But sometimes they are so enamored with it that they'll look down their nose at anyone who uses &lt;code&gt;.then()&lt;/code&gt;/&lt;code&gt;.catch()&lt;/code&gt;.  Or they scoff at anyone who uses the &lt;code&gt;function&lt;/code&gt; keyword.  Or they snigger when they see a &lt;code&gt;class&lt;/code&gt; in your code.  In other words, they're treating these concepts as shibboleths to sort out the poor coders.  But what they're &lt;em&gt;really&lt;/em&gt; sorting out is: people who don't code &lt;strong&gt;&lt;em&gt;like them&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1-AqPqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyr3kc4fswzxr7s0y24s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1-AqPqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyr3kc4fswzxr7s0y24s.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#litmus-snobbery"&gt;
  &lt;/a&gt;
  Litmus Snobbery
&lt;/h2&gt;

&lt;p&gt;A litmus test is similar to a shibboleth - but not entirely.  Shibboleths are more about &lt;em&gt;communication&lt;/em&gt; - concepts that we &lt;em&gt;want&lt;/em&gt; to hear from other coders, and concepts that we do &lt;em&gt;not&lt;/em&gt; want to hear.  &lt;/p&gt;

&lt;p&gt;But litmus tests are more about tactics that you've either mastered - or you haven't.  Here's how a litmus test typically works in coding environments:&lt;/p&gt;

&lt;p&gt;A candidate comes in for an interview and the team positions the nervous, sweaty soul at the whiteboard.  Then they ask him to code an example of doing a search with a binary tree.  The candidate has some extensive experience, and a solid grasp of many coding concepts.  But he's never studied or implemented a binary tree.  So he fails to provide any satisfactory solution to the problem.&lt;/p&gt;

&lt;p&gt;At this point, the interview is &lt;em&gt;functionally&lt;/em&gt; over.  They might afford him the courtesy of continuing the interview for another 45 minutes or so.  But the devs in that room who are evaluating the candidate have already decided that this guy's an imposter.  And they &lt;em&gt;know&lt;/em&gt; he's an imposter because he can't do a binary tree!  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I mean... the &lt;em&gt;nerve&lt;/em&gt; of this guy!  Whatever made him believe that he was worthy of writing code if he hasn't already mastered the concept of binary trees?!  Not only should he be eliminated from consideration for the job, but he should also have his hands chopped off, so he's never tempted to sit down at a keyboard again! &lt;em&gt;Ammiright???&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, the &lt;em&gt;reality&lt;/em&gt; is quite different.  In a quarter century of professional coding, a binary tree has been the "right tool for the job", for &lt;em&gt;me&lt;/em&gt;, exactly... &lt;strong&gt;&lt;em&gt;ONCE&lt;/em&gt;&lt;/strong&gt;.  I know what a binary tree &lt;em&gt;is&lt;/em&gt;, and I generally know &lt;em&gt;where&lt;/em&gt; they should be used.  But if I had to set up a binary tree search today, I'd first start by hitting up Google for a few minutes, because I haven't actually &lt;em&gt;written&lt;/em&gt; anything related to a binary tree in about 15 years.&lt;/p&gt;

&lt;p&gt;But this article isn't about binary trees.  It's about the fact that we latch onto some programming technique that &lt;em&gt;we're&lt;/em&gt; familiar with, and then we use that technique as a litmus test to eliminate potential candidates.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QT0z5OTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wawfii32q827dv8tbd0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QT0z5OTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wawfii32q827dv8tbd0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinlyveiled-arrogance"&gt;
  &lt;/a&gt;
  Thinly-Veiled Arrogance
&lt;/h2&gt;

&lt;p&gt;Litmus tests reek of &lt;em&gt;arrogance&lt;/em&gt;.  They function from the perspective that &lt;em&gt;you&lt;/em&gt; know how to do this thing, so anyone else who claims to be a "real" coder should also know how to do this thing.  And if they can't do that thing?  Then no amount of experience will allow you to overlook the fact that this person - who &lt;em&gt;claims&lt;/em&gt; to know how to code - couldn't do this "thing" that you yourself can do just fine.  So clearly... they must royally suck at life!&lt;/p&gt;

&lt;p&gt;This is where the Arrogants get all in a lather.  They start hyperventilating and flailing their arms, and they say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But, but, &lt;em&gt;but&lt;/em&gt;... if this guy can't do a binary tree, he's obviously not a dev with broad and deep knowledge!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take it from me.  When a litmus tester reaches &lt;em&gt;this&lt;/em&gt; point, there's really no benefit in talking to them about it any longer.  Because at &lt;em&gt;this&lt;/em&gt; point, there is no amount of knowledge or skill or experience that will, in their mind, erase the fact that this guy didn't know how to do &lt;em&gt;this one thing&lt;/em&gt;.  You can tell them, "But... he wrote Tesla's entire self-driving application.  By himself.  In assembly code.  Over a long weekend."  And their only response will be, "But he didn't know how to write that binary tree search, so he obviously can't be too dedicated to his craft!"&lt;/p&gt;

&lt;p&gt;You see, once someone gets it in their head that you should know some particular bit of programming knowledge, it won't matter to them whether you can prove that you know &lt;strong&gt;&lt;em&gt;ALL THE (other) THINGS!!!&lt;/em&gt;&lt;/strong&gt;  They will always come back to the fact that you didn't know &lt;em&gt;this&lt;/em&gt; thing - and therefore, you suck.&lt;/p&gt;

&lt;p&gt;Defenders of this mindset will tell you that there's nothing wrong with expecting a candidate to have certain skills - like programming a binary tree search.  And if they can't do that, then how is it &lt;em&gt;arrogant&lt;/em&gt; to eliminate candidates on that basis???  But the answer to that is incredibly simple:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For those who rely on litmus tests, their basis for what is-or-is-not "standard" is: Do &lt;em&gt;they&lt;/em&gt; know how to do it themselves???&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me say that again, in a slightly different way.  Because I want this to really &lt;em&gt;sink in&lt;/em&gt; for you.&lt;/p&gt;

&lt;p&gt;When we apply litmus tests to other coders, we generally assume that whatever &lt;em&gt;we&lt;/em&gt; are comfortable with is "common knowledge" - and any "real" coder should be able to do the same.  And we assume that whatever we &lt;em&gt;aren't&lt;/em&gt; comfortable with is... esoteric.  Rare.  Arcane.  &lt;/p&gt;

&lt;p&gt;The Arrogants who are judging you based upon your binary tree skills are doing so either because A) their environment just so happens to use a lot of binary tree searches, or B) it's been established in their dev shop that this is a Sacred Coding Test and all of their current devs either knew how to do binary tree searches before they came onboard, or they quickly learned after it became a "standard" in their environment.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9r3-03Dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkegalgcm7hzo3lqb40v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9r3-03Dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkegalgcm7hzo3lqb40v.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#karma-is-a"&gt;
  &lt;/a&gt;
  Karma is a...
&lt;/h2&gt;

&lt;p&gt;In case you can't hear them yourself, those Arrogants are still squawking in the background.  They're fidgeting and arguing that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don't care what you say, if someone isn't intimately familiar with binary tree searches, they're not a &lt;em&gt;real&lt;/em&gt; programmer!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To which I will only respond with this:&lt;/p&gt;

&lt;p&gt;I wasn't familiar with &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt; until a few weeks ago.  I guess that means I'm not a "real" coder.  I'd need to do a little googling before I'd be ready to sit down and write out a binary tree search algorithm from scratch.  I guess that also means that I'm not a "real" coder.&lt;/p&gt;

&lt;p&gt;But I've been doing this now for a quarter-century.  Do you &lt;em&gt;really&lt;/em&gt; believe that, if &lt;em&gt;I'm&lt;/em&gt; the one conducting the interview, that I couldn't possibly come up with a litmus test that you would &lt;code&gt;FAIL&lt;/code&gt;???  Are you so certain in the incredibly-broad and impressively-deep scope of your knowledge, that you're sure I couldn't possibly stump you???  &lt;/p&gt;

&lt;p&gt;And if I &lt;em&gt;could&lt;/em&gt; stump you on any particular "litmus test", how will you feel when you get summarily dismissed from consideration just because you hadn't mastered the one technique that I happened to ask you to illustrate on the whiteboard???&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>hiring</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Git Bisect &gt; Encontrando o Commit Bugado</title>
      <author>Felipe Ribeiro</author>
      <pubDate>Fri, 09 Apr 2021 18:41:41 +0000</pubDate>
      <link>https://dev.to/felipefrbr/git-bisect-encontrando-o-commit-bugado-14g0</link>
      <guid>https://dev.to/felipefrbr/git-bisect-encontrando-o-commit-bugado-14g0</guid>
      <description>&lt;p&gt;Então você roda a sua aplicação e descobre um bug! &lt;br&gt;
Você olha o histórico de alterações do projeto e não consegue identificar quando o bug foi introduzido.&lt;br&gt;
O jeito é fazer o checkout de cada revision e testar... um por um! Se for apenas 3 commits, ok! Mas se for 10, 15, 30... vai levar horas!&lt;/p&gt;

&lt;p&gt;Aí que entra o &lt;code&gt;git bisect&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KX6hdPMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ui6nm9hvzenfgblvq0jd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KX6hdPMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ui6nm9hvzenfgblvq0jd.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;git bisect&lt;/code&gt; utiliza um algoritmo de pesquisa binária no histórico de alterações do seu projeto para descobrir qual commit introduziu o bug. Mas ele não faz tudo sozinho. Precisamos interagir bastante nesse processo mas ainda assim é bem mais fácil do que fazer tudo sozinho.&lt;/p&gt;

&lt;p&gt;Para iniciarmos o processo, precisamos informar um commit "bad" (ruim) e um commit "good" (bom). Então o primeiro passo é descobrir um commit onde você tenha certeza de que a sua aplicação estava funcionando. Com esse commit na mão podemos começar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git bisect start
$ git bisect bad            # A versão atual está ruim
$ git bisect good bf21fee   # bf21fee é uma versão boa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Então o &lt;code&gt;git bisect&lt;/code&gt; vai fazer uma análise e irá te responder algo assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Bisecting: 84 revisões deixadas para testar depois disso (aproximadamente 7 passos)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A partir daí, ele vai selecionar um commit entre esses dois pontos, vai fazer o checkout e vai te perguntar se esse commit é "bom" ou "ruim". Então cabe a você decidir... ou melhor, testar! Faça o teste e verifique se o bug está lá.&lt;/p&gt;

&lt;p&gt;Se o bug ainda estiver lá, basta digitar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git bisect bad
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mas, se a versão estiver funcionando corretamente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git bisect good
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após isso, ele irá responder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Bisecting: 42 revisões deixadas para testar depois disso (aproximadamente 6 passos)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em seguida, ele irá escolher um outro commit, fará o checkout e te perguntará novamente se o commit é bom ou ruim. Agora é só ir repetindo esse processo até acabarem os commits. Então o &lt;code&gt;git bisect&lt;/code&gt; irá te informar qual é o primeiro commit ruim.&lt;/p&gt;

&lt;p&gt;Pronto! Agora é com você! Hora de corrigir esse bug!&lt;/p&gt;

</description>
      <category>git</category>
      <category>brazilliandev</category>
    </item>
    <item>
      <title>What's your favorite programming channel?</title>
      <author>CristoferK</author>
      <pubDate>Fri, 09 Apr 2021 18:41:18 +0000</pubDate>
      <link>https://dev.to/cristoferk/what-s-your-favorite-programming-channel-2113</link>
      <guid>https://dev.to/cristoferk/what-s-your-favorite-programming-channel-2113</guid>
      <description>&lt;p&gt;What's your favorite programming YouTube channel?&lt;br&gt;
Mine are Web Dev, Web Dev Simplified, Codingflag, and Online Tutorials.&lt;/p&gt;

&lt;p&gt;Also, I am making programming tutorials too! Here is the link to my channel&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured"&gt;https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured&lt;/a&gt;&lt;br&gt;
Please Subscribe!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>youtube</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Best 5 Steps To Improve Your Programming skills</title>
      <author>Thu Htet Tun</author>
      <pubDate>Fri, 09 Apr 2021 18:05:37 +0000</pubDate>
      <link>https://dev.to/thuhtetdev/best-5-steps-to-improve-your-programming-skills-cil</link>
      <guid>https://dev.to/thuhtetdev/best-5-steps-to-improve-your-programming-skills-cil</guid>
      <description>&lt;p&gt;Hey guys,&lt;br&gt;
Today I would like to share you how to improve your programming skills within an unexpected time limit.&lt;/p&gt;

&lt;p&gt;I also uploaded this content on my YouTube channel.&lt;br&gt;
If you prefer to watch, please go for it. &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=60nn5OECvF4"&gt;https://www.youtube.com/watch?v=60nn5OECvF4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For readers, let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-choose-your-specific-role"&gt;
  &lt;/a&gt;
  1. Choose your specific role
&lt;/h2&gt;

&lt;p&gt;There are a lot of roles in software engineering. For example, Front-End, Back-end, DevOps, Analyst, Security, QA, DB admin etc. So, what gets you excited about them. If you are interested in design, go for designing things. If you enjoy about algorithms and data structures, just go for it. Important things is you have to choose one first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-choose-your-weapon-programming-language"&gt;
  &lt;/a&gt;
  2. Choose your weapon (programming language)
&lt;/h2&gt;

&lt;p&gt;First, you have to choose what programming language will be yours. &lt;br&gt;
There are a lot of programming languages in software engineering so if you don't decide it first, you will never escape from beginner step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-learn-it-but-not-study"&gt;
  &lt;/a&gt;
  3. Learn it but not study
&lt;/h2&gt;

&lt;p&gt;After you got your weapon, then learn about it. You can learn from different ways like University, Bootcamp, Mentor, Online class or YouTube etc. Important thing is to be enjoyed on your learning. Personally, I don't like studying just for an exam. I used to be but I don't like it. Studying is just intended for making a result. Learning is different because it is continuous and fun for me. Mostly, if you are in IT field, learning is an essential thing you have to follow. Plus, don't forget to learn about your main programming language's documentation deeply.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-apply-your-knowledge-with-multiple-projects"&gt;
  &lt;/a&gt;
  4. Apply your knowledge with multiple projects
&lt;/h2&gt;

&lt;p&gt;You've got some knowledge from learning things. So, Apply it. Start with small projects so that you can feel achievement. It is important too. That will make you the reason what you are learning about. &lt;/p&gt;

&lt;p&gt;In this case, sometimes learning and applying might be parallel. Because there is no complete learning. we have to keep that in mind. &lt;/p&gt;

&lt;p&gt;As another reason, you can boost your self-confidence by creating projects. Plus, you can show those projects to your clients or whatever as your experiences. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-keep-in-touch-with-community"&gt;
  &lt;/a&gt;
  5. Keep in touch with Community
&lt;/h2&gt;

&lt;p&gt;Congratulations to reach this step. Now, you know yourself in this professional field. It is time to upgrade your skills. Go for advanced projects or get a job. At this point, you will see that your domain knowledge is not enough while building things. Time to learn from real world experience. &lt;/p&gt;

&lt;p&gt;You may find some skills or tools that you don't have. Don't worry. You've already got learning skills right? So quick learn them. You can connect to respective engineering community, forum, social media page or groups. Discuss and sharing about what you gets and needs. &lt;/p&gt;

&lt;p&gt;That's it.&lt;br&gt;
Now, it is time to spread your wings and fly.&lt;/p&gt;

&lt;p&gt;I hope you enjoy this post.&lt;br&gt;
I also uploaded this content on my YouTube channel.&lt;br&gt;
Please check this out too.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=60nn5OECvF4"&gt;https://www.youtube.com/watch?v=60nn5OECvF4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't forget to follow me back if you like.&lt;br&gt;
See you guys.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>career</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>ng-learn: How to Become An Angular Expert</title>
      <author>ng-conf</author>
      <pubDate>Fri, 09 Apr 2021 18:02:27 +0000</pubDate>
      <link>https://dev.to/ngconf/ng-learn-how-to-become-an-angular-expert-34mh</link>
      <guid>https://dev.to/ngconf/ng-learn-how-to-become-an-angular-expert-34mh</guid>
      <description>&lt;p&gt;Maria Korneeva | ng-conf | Sep 2020&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pv4vnA5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Avst1n-bdK-0td0O_Q1JP-w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pv4vnA5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Avst1n-bdK-0td0O_Q1JP-w.jpeg" alt='A black sketch style drawing of three small pile of books, one book is open between them. The book on top of one pile has the Angular logo on the cover and a fabric bookmark peeking out of the pages. The bottom book of another pile has the word "Angular" on the spine. The open book has a pair of glasses resting on it.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once I settled to become a frontend developer, I wanted to be a good one. To become an expert, you need to gain the knowledge. To have the knowledge, you have to learn and practice. So, how does it usually start? You pick up a new framework, follow a couple of tutorials, build a couple of demos — your learning curve sky-rockets. You know, what happens next? Once you get familiar with the framework’s logic, the learning pace slows down. Now, instead of learning overall concepts and approaches, you make progress just when something does not work as expected. So the question is, how to keep learning?&lt;/p&gt;

&lt;p&gt;I’m going to share my experience with you about how I continued to learn after that initial learning curve. I might mention some podcasts, mailing lists etc., but none of them is my recommendation for &lt;strong&gt;you&lt;/strong&gt;. I care more about the process than the content. So, it is more important that after reading this text you will find &lt;strong&gt;your&lt;/strong&gt; podcasts, mailing lists, or further resources for yourself. Though I explicitly mention Angular, you can use my tips for any kind of frontend or backend or any tech topics.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ARlfb6TG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/1%2AVTwtLFav6O_Em-OoiJYfXg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ARlfb6TG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/1%2AVTwtLFav6O_Em-OoiJYfXg.jpeg" alt="A black and white sketch styled picture of a stick figure girl with short hair and a large smile. She has her arms crossed over her chest. There is a thought bubble, and in that is the same girl. In her thoughts she's wearing a fancy hat with the Angular logo and has a hand tucked into her jacket lapel."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with the problem statement. Here is Maria. Maria wants to become an Angular guru NOW! She could binge-watch tutorials and spend a week or two reading professional articles 10 hours a day if she only could see the result immediately. The problem is, that it does not work this way (yet). The key to success lies in consistency and regular effort. But how to come to this path of enlightenment? Let’s have a look at the main idea.&lt;/p&gt;

&lt;p&gt;Whenever you work on your professional or private projects, you progress in &lt;em&gt;incident-based learning&lt;/em&gt;. One might go very deep on a specific use case without having an overarching understanding of the underlying principles. The opposite (or rather complementary) way is the &lt;em&gt;concept-based learning&lt;/em&gt; — looking at the topic from the bird-perspective. While specific implementation details are shot-lived, the understanding of framework concepts usually survives several (minor) versions. To progress as a developer, you need both — enough practical learning (e.g. from bug fixing) and enough theory to avoid similar pitfalls in the future. So, we need to maximize our information inflow, keep it stable and overcome the &lt;a href="https://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html"&gt;instant gratification monkey&lt;/a&gt;. Here are some tips.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#put-it-on-your-dailyregular-todo-list"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Put it on your daily/regular To-Do list&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCxwo89b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/1%2A88udmmzMwYrEMqMFPhPEJg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCxwo89b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/1%2A88udmmzMwYrEMqMFPhPEJg.jpeg" alt='A black and white sketch style picture of an elephant holding a pen in its trunk. There is a paper list in front of the elephant containing three list items, each with a checkmark box. The first says "today", the second "tomorrow" and the third reads ". . .".'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having a to-do list might be an obvious suggestion. Nevertheless, let’s briefly touch upon it. You probably already know t&lt;a href="https://www.absencehub.com/elephant-technique-how-to-get-things-done/"&gt;hat the elephant should be eaten in steaks&lt;/a&gt;. In other words, the huge mission of becoming an Angular guru should be split into easy-to-manage learning tasks. Do not put “learn Angular” on your list, but put “watch tutorial XYZ” instead. Start with a very small step to trick your lazy mind — something like “open the website in the browser”, “find a good course to follow”, “write down the action plan” etc.&lt;/p&gt;

&lt;p&gt;And now, how to achieve consistency? Have a look at &lt;a href="https://flow-e.com/blog/no-zero-days/"&gt;the concept of no zero days&lt;/a&gt;: every single day brings you closer to your goal if you make even the tiniest progress. I have a daily task called “education” in my to-do list. It comprises the following items: “reading 1 article from my list”, “watching 1 video from my list”, “listening to 1 podcast episode”, “searching for frontend community events”. To check the task as “done”, I need to finish at least one of them — daily sense of accomplishment guaranteed. You can drive it even further by establishing a habit through your own reward system. For this, check out &lt;a href="https://charlesduhigg.com/the-power-of-habit/"&gt;The Power of Habit by Charles Duhigg&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another task that I have on my monthly To-Do list is to answer at least 1 question on &lt;a href="https://stackoverflow.com/questions/tagged/angular"&gt;stackoverflow&lt;/a&gt;. It gives me some karma points and increases my use-case-based learning chances. Every Monday I have a “twitter update” task. It puts me under the pressure of analyzing what I have learned so far or which of my daily Angular experiences are worth sharing with others. To sum up — app reminders and public pressure will help your keep going.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-a-reading-watching-web-crawler"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Be a reading / watching web crawler&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The reading list or the list of tutorials, conference talks etc. is the foundation of concept-based learning. To keep the inflow of information steady, be just like &lt;a href="https://www.webfx.com/blog/internet/what-is-a-web-crawler/"&gt;a web crawler&lt;/a&gt;: when you “process” one of the items on your list, check links and concepts that they refer to. If the linked resource sounds interesting, add it to your list. The clue here is to keep updating the list as regularly as possible. For example, my &lt;a href="https://todoist.com/"&gt;To-Do app&lt;/a&gt; allows me to add links from Twitter or LinkedIn as tasks without leaving the social network. The hurdle of opening the article is smaller if the task is clickable and redirects to the resource.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KFL3moqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/1%2Au4QlMw1GzVyVAuABn2LUDg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KFL3moqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/1%2Au4QlMw1GzVyVAuABn2LUDg.png" alt="A black and white sketched style drawing of a stick figure girl with short hair walking across the image. Beneath her are four pages, one has an arrow leading to another, and that has two arrows each leading to one page."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is also possible to keep the reading list on the blogging platform of your choice. Here are some examples that have tons of articles on Angular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://medium.com/search?q=angular"&gt;Medium&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/search?q=angular"&gt;Dev.to&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://indepth.dev/search?query=angular"&gt;inDepth.dev&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hackernoon.com/search?query=angular"&gt;hackernoon&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org/news/search/?query=angular"&gt;freeCodeCamp&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.angular-university.io/top-10-angular-2-tutorials-blogs-and-podcasts/"&gt;Angular-university&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ultimatecourses.com/blog/category/angular/"&gt;Ultimate Courses&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.angularminds.com/blog.html?utm_source=devglan"&gt;AngularMindes&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.mgechev.com/"&gt;Minko Gechev’s blog&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juristr.com/blog/"&gt;Juri Strumpflohner’s blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For further blogs and even more input, check out and chose your favourites yourself from ‘&lt;a href="https://2muchcoffee.com/blog/top-43-angular-blogs-websites-influencers/"&gt;Top 43 Angular websites and influencers&lt;/a&gt;’ or the verified education list from Angular. The drawback is that you might end up with 2–3–4 lists on different platforms.&lt;/p&gt;

&lt;p&gt;Mailing lists are another source of Angular insights. There is an old saying: “If the mountain will not go to the man, then the man must go to the mountain”. So if I do not personally check for the most recent articles myself, then I should have the must-reads delivered to my inbox automatically. Such emails serve as a reminder for my learning goals and as an input source for my reading list (remember, be like a web crawler!). Yet, chose wisely, which topics you would like to follow… As of now, I am getting digests from (Angular + overall frontend focus):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Medium,&lt;/li&gt;
&lt;li&gt;inDepth,&lt;/li&gt;
&lt;li&gt;Dev.to,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.2021.ng-conf.org/"&gt;ng-conf&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.thisdot.co/"&gt;This Dot&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jamstack.email/"&gt;JamStack&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org/"&gt;freecodecamp&lt;/a&gt; and&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN web docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also go for further product-specific lists (e.g. Cypress, NX etc.).&lt;/p&gt;

&lt;p&gt;When there is no time for reading…start listening to podcasts. I am not a podcasts person, but maybe, you are? A friend of mine listens to podcasts when doing the dishes, another one when jogging. Maybe, you can listen to an episode, when driving home? A quick search for the keyword “Angular” on Spotify gives around &lt;a href="https://open.spotify.com/search/angular/shows"&gt;10 matches&lt;/a&gt;, even more for broader terms (“JS”, “JavaScript”, “Frontend”, “Web Dev” etc.). Apple Podcasts is a good source, too. Insider tip: check if blog authors have a podcast, like &lt;a href="https://podcast.mgechev.com/"&gt;Minko Gechev&lt;/a&gt; (and vice versa — if the podcast authors have a twitter account). One really great podcast worth checking out is &lt;a href="https://open.spotify.com/show/1PrLErQHBqBhZsRV1KHhGM"&gt;The Angular Show&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Besides articles, books, or podcasts, you can learn from other people! That is why one of my daily tasks encompasses searching for new events — check out LinkedIn, Xing, This Dot, Mozilla, &lt;a href="https://angular.io/events"&gt;list of conferences&lt;/a&gt; or &lt;a href="https://www.meetup.com/topics/angularjs/"&gt;Angular MeetUps&lt;/a&gt; for that. Due to COVID-19, more and more MeetUps go online so that you can join from anywhere! Many of them are being recorded and can be watched later on YouTube, so it is definitely worth it to search for such channels. Some examples include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC1nBp6ouBB1o5P8YvPznPOw"&gt;Frontend Love&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCHkqtrnQO2HMyW50ixOtJGw"&gt;This Dot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/ngconfvideos"&gt;ng-conf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCZ4GiUa-sCui8Kh5_rs5_EA/videos"&gt;500Tech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCUlbE1BakJPBVx8OAzc5quA"&gt;AngularToronto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC3dvhlLD9QsFwe3H0HrFJLg"&gt;Angular Meetup Zurich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCiRMADUpw0enFE3ehyns5ew"&gt;Meetup Leipzig&lt;/a&gt;, and many more&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-your-learning-bubble"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Create your learning bubble&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Being in a bubble is generally not good. I don’t want to only see only the content that I going to hit the “like” button for and get even more of it (vicious circle!). The “learning bubble” I’m talking about is different. I see it as a mind hack to maximize information on Angular that I get. If I spend plenty of time on Facebook, I make sure that my newsfeed has some learning potential. For example, I follow &lt;a href=""&gt;Dev Community&lt;/a&gt; to get some posts on frontend topics (including Angular) and have joined some similar groups. Here are some further ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow people on Twitter that post Angular content&lt;/li&gt;
&lt;li&gt;Check “who to follow” suggestions for the keyword “Angular”&lt;/li&gt;
&lt;li&gt;Search for authors of the articles from your reading/watching list, speakers from conferences, tutors, peer developers (just like web crawler, huh?). Check their posts before subscribing, though —the keyword does not always guarantee tech-only content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you get it all settled —let’s customize! The learning bubble only works if the information you get is valuable and relevant. Like, follow, unfollow, hide content, unsubscribe from unuseful lists, show less irrelevant content, let the recommender system learn from your feedback— design your own learning bubble and make it inescapable!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-now-what-to-do-with-all-the-input"&gt;
  &lt;/a&gt;
  &lt;strong&gt;And now — what to do with all the input?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The best way to turn information into knowledge is to create new things using it (side projects, blog posts, twits). Even better — to expose it to the wider audience. This is exactly what Shawn Wang underlines in his brilliant essay “&lt;a href="https://www.swyx.io/learn-in-public/"&gt;Learn in public&lt;/a&gt;” (I am not going to repeat his suggestions here). Create some &lt;a href="https://coggle.it/diagram/Xe1hAtfvayr9ztsi/t/frontend/9fc512b335a1bfa12e0c80df6d5fbdc51dfe44ff0b7e05249c0b63de515b226f"&gt;mind maps&lt;/a&gt; to structure your knowledge and share it with your colleagues. &lt;a href="https://twitter.com/BrowserPerson/status/1276912794500304896?s=20"&gt;Illustrate some articles on Angular&lt;/a&gt; that you liked and post it on social networks. Process and output it.&lt;/p&gt;

&lt;p&gt;That’s it. The final words:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.informationStream$.pipe(
   shareReplay(1);
   ).subscribe(
      (input) =&amp;gt; {
         this.doDiscipline(habit, reward);
         const referredInput = this.process(input);
         this.informationStream$.next(referredInput);
      }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learning is not a one-time action, it’s a system!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ngconf-the-musical-is-coming"&gt;
  &lt;/a&gt;
  &lt;strong&gt;ng-conf: The Musical is coming&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;ng-conf: The Musical is a two-day conference from the ng-conf folks coming on April 22nd &amp;amp; 23rd, 2021. Check it out at &lt;a href="https://www.2021.ng-conf.org/"&gt;ng-conf.org&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;[&lt;strong&gt;Disclaimer&lt;/strong&gt;: did I miss something / is something not quite correct? Please let me and other readers know &lt;strong&gt;AND&lt;/strong&gt; provide missing/relevant/correct information in your comments — help other readers (and the author) to get it straight! a.k.a. #learningbysharing]&lt;/em&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#thanks-to-rogelio-flores-zubillaga"&gt;
  &lt;/a&gt;
  Thanks to Rogelio Flores Zubillaga.
&lt;/h6&gt;

</description>
      <category>angular</category>
      <category>frontend</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Symfony Live Online 2021</title>
      <author>Mathieu Ledru</author>
      <pubDate>Fri, 09 Apr 2021 17:59:51 +0000</pubDate>
      <link>https://dev.to/darkwood-fr/symfony-live-online-2021-3nk5</link>
      <guid>https://dev.to/darkwood-fr/symfony-live-online-2021-3nk5</guid>
      <description>&lt;p&gt;Nouvel article sur le blog&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.darkwood.fr/article/symfony-live-online-2021"&gt;https://blog.darkwood.fr/article/symfony-live-online-2021&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Big O notation 1/2
</title>
      <author>Guillain bisimwa</author>
      <pubDate>Fri, 09 Apr 2021 17:22:50 +0000</pubDate>
      <link>https://dev.to/guillainbisimwa/big-o-notation-1-2-4nol</link>
      <guid>https://dev.to/guillainbisimwa/big-o-notation-1-2-4nol</guid>
      <description>&lt;p&gt;Welcome to this series of articles dedicated to &lt;strong&gt;Big O&lt;/strong&gt; scoring. What is it anyway? Big O? before knowing more on the subject, I would like to warn you that this concept can seem a bit confusing if you do not have a basic knowledge of data structure and algorithms! If that’s your case, I welcome you to check out some great resources on this topic at the bottom of this article!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Big O&lt;/strong&gt; is a notion that describes the performance or complexities of an algorithm. We write it with a capital letter &lt;strong&gt;O&lt;/strong&gt;, not a zero (Read as Big Oh), the &lt;strong&gt;Big O&lt;/strong&gt; is a measure and a description of the time necessary for the execution of an algorithm… In short, we are talking about efficiency! We use it to evaluate codes for performance and space.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Oops! Does this definition seem a bit awkward to you ?? Ok let’s try to see an analogy!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Suppose you occasionally enjoy baking your own cake at home. For you, it will take you &lt;strong&gt;“T”&lt;/strong&gt; time to bake a cake. Now your birthday is approaching, and you decide to invite 5 of your friends.&lt;/p&gt;

&lt;p&gt;Easily you can provide 3 cakes which make &lt;strong&gt;“3T”&lt;/strong&gt; to prepare everything. It’s not exaggerating, eh!&lt;br&gt;
So imagine you decide to call 200 people, wow it’s very hard to get by because when the number of guests increases so does the time to bake the cakes for everyone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vcBYlSgI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ezxw8c8onf6axull3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vcBYlSgI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ezxw8c8onf6axull3v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“We used ’n’ to denote the variable size of the input of the algorithm. We use &lt;strong&gt;Big O&lt;/strong&gt; notation also to describe how much space an algorithm uses.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then an alternative is available for you. You can order the cakes online. By ordering the number you want: whether it’s 10, 50 or 200 everything will take the same delivery time.&lt;br&gt;
We then notice that even if the number of guests increases, the time to bake the cakes and the time to deliver the cakes remain constant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70jUE3Q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyze15yvqgqr52im8sn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70jUE3Q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyze15yvqgqr52im8sn9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We ask ourselves, what is the place of the algorithm and DataStructure? In section 2 we will see in detail the different types of data structures that can be used to store data and some algorithms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take the case of a simple array, and let’s break that down!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--09zSUINC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiqabag9t24l0vhnlpju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--09zSUINC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiqabag9t24l0vhnlpju.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A collection of items sorted in a contiguous memory location. Each element can be identified by its index in the array. Since the array uses computer memory, we also need this memory optimally. This is why the &lt;strong&gt;Big O&lt;/strong&gt; measures space complexity, which is the amount of storage a program wants. This explains how the size grows as the inputs increase.&lt;/p&gt;

&lt;p&gt;There are several operations that we can do with an array such as for example adding elements in it, reading an element at a position (index), sorting by order or alphabetically, … &lt;br&gt;
These operations are considered as algorithms that we can apply to achieve the desired result. This leads us to evaluate the time complexity. It represents the number of times a statement or operation is executed in a program. The Big O notation expresses the run time of an algorithm in terms of how quickly it grows in relation to the input.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Vx7jjZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tjh8uexs16pwt31eagq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Vx7jjZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tjh8uexs16pwt31eagq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s not easy to determine the exact runtime of an algorithm. It depends on the speed of the computer processor. Instead of talking about the run time directly, we use Big O notation to talk about how quickly the runtime grows. There are more runtimes than what we saw in this previous example. The best known are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constant O (1),&lt;/li&gt;
&lt;li&gt;Logarithmic O (log N),&lt;/li&gt;
&lt;li&gt;Log-linear O (N log N),&lt;/li&gt;
&lt;li&gt;Linear O (N),&lt;/li&gt;
&lt;li&gt;Quadratic O (N² ),&lt;/li&gt;
&lt;li&gt;Cubic O (N³), and&lt;/li&gt;
&lt;li&gt;Exponential O (2^n)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This series of articles is devoted to the details and examples of these runtimes!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Without huge memory, we can address huge problems&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-o1-constant-time-complexity-read-as-big-oh-of-1"&gt;
  &lt;/a&gt;
  1. O(1) — Constant time complexity. (Read as Big Oh of 1)
&lt;/h2&gt;

&lt;p&gt;In this complexity, no matter how big or small your inputs are, the output time will always be the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NwH6sIWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7w1amlaveok8t7ukz1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NwH6sIWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7w1amlaveok8t7ukz1n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;This algorithm takes the same amount of time to execute.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helpful-links"&gt;
  &lt;/a&gt;
  Helpful links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.khanacademy.org/computing/computer-science/algorithms"&gt;https://en.khanacademy.org/computing/computer-science/algorithms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513"&gt;https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.bigocheatsheet.com/"&gt;https://www.bigocheatsheet.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bigonotation</category>
      <category>bigo</category>
      <category>timecomplexity</category>
      <category>spacecomplexity</category>
    </item>
  </channel>
</rss>
