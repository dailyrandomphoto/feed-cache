<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Mastering Enums in TypeScript</title>
      <author>Arnaud Leymet</author>
      <pubDate>Tue, 27 Jul 2021 16:06:10 +0000</pubDate>
      <link>https://dev.to/prod/mastering-enums-in-typescript-1c1j</link>
      <guid>https://dev.to/prod/mastering-enums-in-typescript-1c1j</guid>
      <description>&lt;p&gt;Let's assume we have the following enum:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;Fruit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;APPLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;BANANA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;CHERRY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cherry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-the-keys-of-an-enum-dynamically"&gt;
  &lt;/a&gt;
  Get the keys of an enum dynamically
&lt;/h3&gt;

&lt;p&gt;This one needs the use of two type operators: &lt;a href="https://www.typescriptlang.org/docs/handbook/2/keyof-types.html#the-keyof-type-operator"&gt;&lt;code&gt;keyof&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#the-typeof-type-operator"&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;FruitValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;Fruit&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; type FruitValue = "APPLE" | "BANANA" | "CHERRY"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-the-keys-of-an-enum-dynamically"&gt;
  &lt;/a&gt;
  Get the keys of an enum dynamically
&lt;/h3&gt;

&lt;p&gt;This snippet leverages the &lt;a href="https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html"&gt;Template Literal&lt;/a&gt; type operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;FruitValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; type FruitValue = "apple" | "banana" | "cherry"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterate-over-an-enum-keys"&gt;
  &lt;/a&gt;
  Iterate over an enum keys
&lt;/h3&gt;

&lt;p&gt;Looping through the enum keys is as simple as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; APPLE&lt;/span&gt;
&lt;span class="c1"&gt;//    BANANA&lt;/span&gt;
&lt;span class="c1"&gt;//    CHERRY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterate-over-an-enum-values"&gt;
  &lt;/a&gt;
  Iterate over an enum values
&lt;/h3&gt;

&lt;p&gt;In the same spirit, looping through the enum values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; apple&lt;/span&gt;
&lt;span class="c1"&gt;//    banana&lt;/span&gt;
&lt;span class="c1"&gt;//    cherry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>typescript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build a Facebook Chatbot For Beginners</title>
      <author>Tousif</author>
      <pubDate>Tue, 27 Jul 2021 16:03:29 +0000</pubDate>
      <link>https://dev.to/codingmonkeyz/build-a-facebook-chatbot-for-beginners-4chf</link>
      <guid>https://dev.to/codingmonkeyz/build-a-facebook-chatbot-for-beginners-4chf</guid>
      <description>&lt;p&gt; &lt;span&gt;While some digital marketers are still discovering the power of social media, those who are on the cutting edge of technological progress are raising awareness about chatbots and how to build a bot.&lt;/span&gt;&lt;/p&gt;
&lt;p id="f646"&gt;The rapid rise of chatbots has been made possible thanks to the recent advances in artificial intelligence and machine learning. Younger generations of consumers, who have grown up with at least one chat window permanently opened, find it natural to communicate with their favorite brands and companies through interactive messenger chatbots that mimic real conversations with people.&lt;/p&gt;
&lt;p id="28af"&gt;By integrating chatbots with e-commerce platforms, it’s possible to monetize existing social media accounts by helping consumers find products or offering personalized recommendations based on their instant messaging profiles and personal preferences.&lt;/p&gt;

&lt;p id="28af"&gt;Originally Published: &lt;b&gt;&lt;a href="https://bit.ly/3fl4dvV"&gt;How to make a Facebook Chatbot for beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Kool Way to Run Hugo Static Sites on Docker</title>
      <author>Daniel Polito</author>
      <pubDate>Tue, 27 Jul 2021 16:02:53 +0000</pubDate>
      <link>https://dev.to/kooldev/the-kool-way-to-run-hugo-static-sites-on-docker-3k04</link>
      <guid>https://dev.to/kooldev/the-kool-way-to-run-hugo-static-sites-on-docker-3k04</guid>
      <description>&lt;p&gt;In just 2 simple steps, you can use &lt;a href="https://github.com/kool-dev/kool"&gt;&lt;strong&gt;Kool&lt;/strong&gt;&lt;/a&gt; to start a new &lt;strong&gt;Hugo&lt;/strong&gt; application running in a local Docker development environment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Kool&lt;/strong&gt; is a free, open source CLI tool that makes local development with Docker super easy. Kool CLI will level up your development workflow, and help you and your team improve the way you develop and deploy cloud native applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;If you haven't done so already, you first need to &lt;a href="https://kool.dev/docs/getting-started/installation"&gt;install Docker and the Kool CLI&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you already have &lt;code&gt;kool&lt;/code&gt; installed, make sure you're running the latest version with &lt;code&gt;kool self-update&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-a-new-hugo-application"&gt;
  &lt;/a&gt;
  Step 1 – Create a New Hugo Application
&lt;/h2&gt;

&lt;p&gt;Use the &lt;a href="https://kool.dev/docs/commands/kool-create"&gt;&lt;code&gt;kool create&lt;/code&gt; command&lt;/a&gt; to create your new Hugo project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool create hugo my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;IMPORTANT: if you're on &lt;strong&gt;Windows WSL&lt;/strong&gt; or &lt;strong&gt;Linux&lt;/strong&gt;, you should run &lt;code&gt;sudo kool create hugo my-project&lt;/code&gt; as the superuser (via &lt;code&gt;sudo&lt;/code&gt;) to avoid permissions issues when creating the project directory and files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Under the hood, this command will run &lt;code&gt;kool docker klakegg/hugo:ext-alpine new site my-project&lt;/code&gt; using the &lt;a href="https://hub.docker.com/r/klakegg/hugo/"&gt;klakegg/hugo&lt;/a&gt; Docker image.&lt;/p&gt;

&lt;p&gt;Now, move into your new Hugo project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After installing Hugo, &lt;code&gt;kool create&lt;/code&gt; automatically runs the &lt;a href="https://kool.dev/docs/commands/kool-preset"&gt;&lt;code&gt;kool preset hugo&lt;/code&gt; command&lt;/a&gt;, which auto-generates the following configuration files and adds them to your project. As your project evolves, you can easily modify and extend these files to suit your needs.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+docker-compose.yml
+kool.yml
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#step-2-start-your-local-environment"&gt;
  &lt;/a&gt;
  Step 2 – Start Your Local Environment
&lt;/h2&gt;

&lt;p&gt;As mentioned above, the &lt;a href="https://kool.dev/docs/commands/kool-preset"&gt;&lt;code&gt;kool preset&lt;/code&gt; command&lt;/a&gt; added a &lt;strong&gt;kool.yml&lt;/strong&gt; file to your project. To help get you started, &lt;strong&gt;kool.yml&lt;/strong&gt; comes prebuilt with an initial set of scripts based on your chosen framework and stack. Since Hugo requires a few extra steps to create a Hello World site, &lt;strong&gt;kool.yml&lt;/strong&gt; includes a special &lt;code&gt;quickstart&lt;/code&gt; script to make it super easy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Think of &lt;strong&gt;kool.yml&lt;/strong&gt; as an easy-to-use task &lt;em&gt;helper&lt;/em&gt;. Instead of writing custom shell scripts, add your own scripts to &lt;strong&gt;kool.yml&lt;/strong&gt; (under the &lt;code&gt;scripts&lt;/code&gt; key), and run them with &lt;code&gt;kool run SCRIPT&lt;/code&gt; (e.g. &lt;code&gt;kool run hugo&lt;/code&gt;). You can add your own single line commands (see &lt;code&gt;hugo&lt;/code&gt; below), or add a list of commands that will be executed in sequence (see &lt;code&gt;quickstart&lt;/code&gt; below).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;scripts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;hugo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kool docker -p 1313:1313 klakegg/hugo:ext-alpine&lt;/span&gt;
    &lt;span class="na"&gt;dev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kool run hugo server -D&lt;/span&gt;

    &lt;span class="c1"&gt;# remove or modify to suit the needs of your project&lt;/span&gt;
    &lt;span class="na"&gt;quickstart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool start&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;git init&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;echo theme = \"ananke\" &amp;gt;&amp;gt; config.toml&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool run hugo new posts/my-first-post.md&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool run dev&lt;/span&gt;

    &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool start&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool run dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Go ahead and run &lt;code&gt;kool run quickstart&lt;/code&gt; to start your Docker environment and initialize your Hugo site.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool run quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;As you can see in &lt;strong&gt;kool.yml&lt;/strong&gt;, the &lt;code&gt;quickstart&lt;/code&gt; script does the following in sequence: runs the &lt;code&gt;kool start&lt;/code&gt; command to spin up your Docker environment; calls &lt;code&gt;git init&lt;/code&gt; to create a Git repository; downloads the Ananke theme; uses an &lt;code&gt;echo&lt;/code&gt; command to add the theme to your Hugo config file; adds your first post; and then calls &lt;code&gt;kool run dev&lt;/code&gt; to build your Hugo site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;Once &lt;code&gt;kool run quickstart&lt;/code&gt; finishes, you should be able to access your new site at &lt;a href="http://localhost/"&gt;http://localhost&lt;/a&gt; and see the "My New Hugo Site" page. Hooray!&lt;/p&gt;



&lt;p&gt;Verify your Docker service containers are running using the &lt;a href="https://dev.to/docs/commands/kool-status"&gt;&lt;code&gt;kool status&lt;/code&gt; command&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool status
+---------+---------+------------------------------+--------------+
| SERVICE | RUNNING | PORTS                        | STATE        |
+---------+---------+------------------------------+--------------+
| app     | Running | 0.0.0.0:80-&amp;gt;80/tcp, 1313/tcp | Up 2 minutes |
| static  | Running | 80/tcp                       | Up 2 minutes |
+---------+---------+------------------------------+--------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Run &lt;code&gt;kool logs app&lt;/code&gt; to see the logs from your running &lt;code&gt;app&lt;/code&gt; container.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use &lt;code&gt;kool logs&lt;/code&gt; to see the logs from all running containers. Add the &lt;code&gt;-f&lt;/code&gt; option after &lt;code&gt;kool logs&lt;/code&gt; to follow the logs (i.e. &lt;code&gt;kool logs -f app&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool logs app
Attaching to my-project_app_1
app_1     |   Non-page files   |  0
app_1     |   Static files     |  0
app_1     |   Processed images |  0
app_1     |   Aliases          |  0
app_1     |   Sitemaps         |  1
app_1     |   Cleaned          |  0
app_1     |
app_1     | Built &lt;span class="k"&gt;in &lt;/span&gt;1 ms
app_1     | Watching &lt;span class="k"&gt;for &lt;/span&gt;changes &lt;span class="k"&gt;in&lt;/span&gt; /app/&lt;span class="o"&gt;{&lt;/span&gt;archetypes,content,data,layouts,static&lt;span class="o"&gt;}&lt;/span&gt;
app_1     | Watching &lt;span class="k"&gt;for &lt;/span&gt;config changes &lt;span class="k"&gt;in&lt;/span&gt; /app/config.toml
app_1     | Environment: &lt;span class="s2"&gt;"DEV"&lt;/span&gt;
app_1     | Serving pages from memory
app_1     | Running &lt;span class="k"&gt;in &lt;/span&gt;Fast Render Mode. For full rebuilds on change: hugo server &lt;span class="nt"&gt;--disableFastRender&lt;/span&gt;
app_1     | Web Server is available at http://localhost:80/ &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bind &lt;/span&gt;address 0.0.0.0&lt;span class="o"&gt;)&lt;/span&gt;
app_1     | Press Ctrl+C to stop
app_1     |
app_1     | Change of config file detected, rebuilding site.
app_1     | 2021-05-01 20:34:06.306 +0000
app_1     | Rebuilt &lt;span class="k"&gt;in &lt;/span&gt;136 ms
app_1     | adding created directory to watchlist /app/content/posts
app_1     |
app_1     | Change detected, rebuilding site.
app_1     | 2021-05-01 20:34:07.305 +0000
app_1     | Source changed &lt;span class="s2"&gt;"/app/content/posts/my-first-post.md"&lt;/span&gt;: CREATE
app_1     | Total &lt;span class="k"&gt;in &lt;/span&gt;26 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When it's time to stop working on the project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool stop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When you're ready to start coding again:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;If you like what we're doing, show your support for this new open source project by &lt;a href="https://github.com/kool-dev/kool"&gt;&lt;strong&gt;starring us on GitHub&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#level-up-your-development-workflow"&gt;
  &lt;/a&gt;
  Level Up Your Development Workflow
&lt;/h2&gt;

&lt;p&gt;Once you're up and running with your new Hugo project, you can use the &lt;code&gt;kool&lt;/code&gt; CLI to level up your development workflow. &lt;a href="https://kool.dev/docs/getting-started/how-it-works#better-development-workflow"&gt;Learn more in "How It Works"&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#support-the-kool-open-source-project"&gt;
  &lt;/a&gt;
  Support the Kool Open Source Project
&lt;/h2&gt;

&lt;p&gt;Kool is open source and totally free to use. If you're interested in learning more about the project, please check out &lt;a href="https://kool.dev"&gt;kool.dev&lt;/a&gt;. If you have questions, need support, or want to get involved, please &lt;a href="https://kool.dev/slack"&gt;join our Slack channel&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kool-dev"&gt;
        kool-dev
      &lt;/a&gt; / &lt;a href="https://github.com/kool-dev/kool"&gt;
        kool
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      From local development to the cloud: development workflow made easy.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://kool.dev" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/264349f4dfe091a4e3a224429ff033d9a68031905905816be9a847aac7167904/68747470733a2f2f6b6f6f6c2e6465762f696d672f6c6f676f2e706e67" width="400" alt="kool - cloud native dev tool"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href="https://goreportcard.com/report/github.com/kool-dev/kool" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2838d0fd3358d49e216af5ec0cab74eaaca5565ca82ee3b53637a34a3af64d15/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f6b6f6f6c2d6465762f6b6f6f6c" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/kool-dev/kool" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a2add92a4e91eebea7bea5f9f2c4af90d7d3da733934d4b6b7560b93b8463ba2/68747470733a2f2f636f6465636f762e696f2f67682f6b6f6f6c2d6465762f6b6f6f6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://github.com/kool-dev/kool/workflows/docker"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zv88EOKd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/kool-dev/kool/workflows/docker/badge.svg" alt="Docker Hub"&gt;&lt;/a&gt;
&lt;a href="https://github.com/kool-dev/kool/workflows/golangci-lint"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZY5yv7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/kool-dev/kool/workflows/golangci-lint/badge.svg" alt="Golang CI Lint"&gt;&lt;/a&gt;
&lt;a href="https://codeclimate.com/github/kool-dev/kool/maintainability" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/251105110de0dadd5bd3976a8b5ba78cc0a420c3180456982d420ea25630dc68/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f31353131663832366465393264326162333963632f6d61696e7461696e6162696c697479" alt="Maintainability"&gt;&lt;/a&gt;
&lt;a href="https://kool.dev/slack" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1be987074d33367933f31ae02d66b36abbbdf76dc54ee7522670ba4a7f794452/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230536c61636b2d6b6f6f6c2d2d6465762d6f72616e67653f6c6f676f3d736c61636b" alt="Join Slack Kool community"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
About &lt;code&gt;kool&lt;/code&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Kool&lt;/strong&gt; is a CLI tool that brings the complexities of modern software development environments down to earth - making these environments lightweight, fast and reproducible. It reduces the complexity and learning curve of &lt;em&gt;Docker&lt;/em&gt; and &lt;em&gt;Docker Compose&lt;/em&gt; for local environments, and offers a simplified interface for using &lt;em&gt;Kubernetes&lt;/em&gt; to deploy staging and production environments to the cloud.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kool&lt;/strong&gt; gets your local development environment up and running easily and quickly, so you have more time to build a great application. When the time is right, you can then use Kool Cloud to deploy and share your work with the world!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kool&lt;/strong&gt; is suitable for solo developers and teams of all sizes. It provides a hassle-free way to handle the Docker basics and immediately start using containers for development, while simultaneously guaranteeing no loss of control over more specialized Docker environments.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kool.dev" rel="nofollow"&gt;Learn more at kool.dev&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;Requirements: Kool is…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/kool-dev/kool"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>hugo</category>
      <category>docker</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Simple improving UX of textarea using CSS</title>
      <author>Stas Melnikov</author>
      <pubDate>Tue, 27 Jul 2021 16:01:51 +0000</pubDate>
      <link>https://dev.to/melnik909/simple-improving-ux-of-textarea-using-css-2gh7</link>
      <guid>https://dev.to/melnik909/simple-improving-ux-of-textarea-using-css-2gh7</guid>
      <description>&lt;p&gt;Whenever I see textarea with a fixed height I want to scream: "Give me userfriendly textarea". I want to enter data comfortably. Give me this.&lt;/p&gt;

&lt;p&gt;I understand developers do that because textarea changing breaks the layout. But we can find a more elegant solution. Set a minimal comfortable height and save resizing of it but disable width changes using resize: vertical. And your users will not break the layout by chance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
🙏 You can say thank you &lt;a href="//twitter.com/intent/tweet?text=Stas%20Melnikov%20(%40melnik909)%20shared%20the%20short%20tip%20Simple%20improving%20UX%20of%20textarea%20on%20%40ThePracticalDev%20Let%27s%20go%20to%20read%20it%20dev.to/melnik909/simple-improving-ux-of-textarea-using-css-2gh7"&gt;by sharing it on Twitter&lt;/a&gt;&lt;br&gt;
🖐 I'm always open to any opportunities to share knowledge about CSS and HTML with you. Feel free to reach out to me: &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get awesome goods for frontenders: 👕 &lt;a href="https://www.redbubble.com/i/t-shirt/Front-End-developer-by-melnik909/79109127.FPE53"&gt;T-Shirt&lt;/a&gt;, 🎁 &lt;a href="https://www.redbubble.com/i/sticker/Front-End-developer-by-melnik909/79109127.EJUG5"&gt;Stickers&lt;/a&gt;, 🥽 &lt;a href="https://www.redbubble.com/i/mask/Front-End-developer-by-melnik909/79109127.6BSL1"&gt;Masks&lt;/a&gt;, 🧩 &lt;a href="https://www.redbubble.com/i/magnet/Front-End-developer-by-melnik909/79109127.TBCTK"&gt;Magnets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my sponsors: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Pure CSS checkboxes with one element</title>
      <author>Posandu Mapa</author>
      <pubDate>Tue, 27 Jul 2021 15:58:34 +0000</pubDate>
      <link>https://dev.to/posandu/pure-css-checkboxes-with-one-element-1pne</link>
      <guid>https://dev.to/posandu/pure-css-checkboxes-with-one-element-1pne</guid>
      <description>&lt;p&gt;Here is a Pure CSS checkbox with only one element. It’s also accessibility friendly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"Item 3"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-css"&gt;
  &lt;/a&gt;
  The CSS
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&amp;amp;display=swap")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;circle&lt;/span&gt; &lt;span class="n"&gt;farthest-corner&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;145&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0.1%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;99.8%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;360%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data-name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Inter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3f3f3f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-0.55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1.55&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e9e9e9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:hover:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:focus-visible:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cacaca&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;-6px&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:focus-visible&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#480f5d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the result on &lt;a href="https://www.tronic247.com/pure-css-checkboxes-with-one-element/"&gt;My Website&lt;/a&gt;. (I do this because I can't embed iframes).&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>css</category>
      <category>checkboxes</category>
    </item>
    <item>
      <title>14 VS Code Shortcuts to Supercharge Your Productivity </title>
      <author>Domagoj Vidovic</author>
      <pubDate>Tue, 27 Jul 2021 15:28:48 +0000</pubDate>
      <link>https://dev.to/domagojvidovic/14-vs-code-shortcuts-to-supercharge-your-productivity-4khn</link>
      <guid>https://dev.to/domagojvidovic/14-vs-code-shortcuts-to-supercharge-your-productivity-4khn</guid>
      <description>&lt;p&gt;We, software engineers, tend to be extremely efficient beings.&lt;/p&gt;

&lt;p&gt;Our goal is to optimize everything, not just the code.&lt;/p&gt;

&lt;p&gt;That's why we don't want to spend 10 seconds looking for something on the GUI. We don't want to spend even 2 seconds.&lt;/p&gt;

&lt;p&gt;Why would we, when we can do it in 0,1s by using the powerful keyboard shortcuts?&lt;/p&gt;

&lt;p&gt;If I repeatedly do the same actions, I always Google for its shortcut. Usually, I find it.&lt;/p&gt;

&lt;p&gt;Let me share with you the shortcuts I use every day. I bet you don't know many of them!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-search-files-by%C2%A0name"&gt;
  &lt;/a&gt;
  1. Search files by name
&lt;/h3&gt;

&lt;p&gt;Ok, we'll start by listing the most common and simples shortcuts.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd + P&lt;/code&gt; (Mac) / &lt;code&gt;crtl + P&lt;/code&gt; (Windows) will open a search field with an incredibly powerful fuzzy search. I probably use this 100+ times a day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-search%C2%A0settings"&gt;
  &lt;/a&gt;
  2. Search settings
&lt;/h3&gt;

&lt;p&gt;This one is similar; after clicking &lt;code&gt;cmd + P&lt;/code&gt; (Mac) / &lt;code&gt;crtl + P&lt;/code&gt; (Windows), just type &lt;code&gt;&amp;gt;&lt;/code&gt;. You can now type in any search term, and only settings will be affected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-multiple%C2%A0cursors"&gt;
  &lt;/a&gt;
  3. Multiple cursors
&lt;/h3&gt;

&lt;p&gt;This feature is so cool, I wish I could use it everywhere else!&lt;/p&gt;

&lt;p&gt;Just press &lt;code&gt;alt&lt;/code&gt; and start clicking around the editor. Multiple cursors will appear!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-multiple-cursors%C2%A0v2"&gt;
  &lt;/a&gt;
  4. Multiple cursors v2
&lt;/h3&gt;

&lt;p&gt;You can do something similar without clicking around. &lt;code&gt;cmd option + arrow down&lt;/code&gt; (Mac) / &lt;code&gt;shift alt + arrow down&lt;/code&gt; (Windows) will insert an extra cursor below.&lt;/p&gt;

&lt;p&gt;Obviously, you can use &lt;code&gt;arrow up&lt;/code&gt; to insert a cursor above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-select-all-occurrences"&gt;
  &lt;/a&gt;
  5. Select all occurrences
&lt;/h3&gt;

&lt;p&gt;This one is quite uncommon, but it's extremely powerful! First, you need to select some text.&lt;/p&gt;

&lt;p&gt;Then,&lt;code&gt;cmd shift + L&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + L&lt;/code&gt; (Windows) select all occurrences of that text. It's so useful for situations like renaming a variable across the file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--621ivIVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1npwkhc4wih2nlfxzosb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--621ivIVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1npwkhc4wih2nlfxzosb.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine manually renaming a variable repeated 30 times in the file. Nightmare.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-delete-a%C2%A0line"&gt;
  &lt;/a&gt;
  6. Delete a line
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cmd shift + K&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + K&lt;/code&gt; (Windows) does the trick here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-duplicate-a%C2%A0line"&gt;
  &lt;/a&gt;
  7. Duplicate a line
&lt;/h3&gt;

&lt;p&gt;Put your cursor in the line you want to duplicate.&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;cmd + C&lt;/code&gt;, then &lt;code&gt;cmd + V&lt;/code&gt; (Mac) / &lt;code&gt;crtl + C&lt;/code&gt;, then &lt;code&gt;crtl + V&lt;/code&gt; (Windows). Voila!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-search-in-a%C2%A0file"&gt;
  &lt;/a&gt;
  8. Search in a file
&lt;/h3&gt;

&lt;p&gt;This one is quite familiar across all the common apps (like browsers): &lt;code&gt;cmd + F&lt;/code&gt; (Mac) / &lt;code&gt;crtl + F&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd + G&lt;/code&gt; (Mac) / &lt;code&gt;crtl + G&lt;/code&gt; (Windows) search for the next occurrence, while cmd &lt;code&gt;shift + G&lt;/code&gt; (Mac) / &lt;code&gt;crtl + shift + G&lt;/code&gt; (Windows) search for the previous one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-replace-in-a%C2%A0file"&gt;
  &lt;/a&gt;
  9. Replace in a file
&lt;/h3&gt;

&lt;p&gt;If you want to replace the term you searched for, fire &lt;code&gt;cmd option + G&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + G&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;p&gt;Then, click enter to replace the current occurrence.&lt;/p&gt;

&lt;p&gt;If you want to replace them all, click &lt;code&gt;cmd + enter&lt;/code&gt; (Mac) / &lt;code&gt;crtl + enter&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-search-in-all%C2%A0files"&gt;
  &lt;/a&gt;
  10. Search in all files
&lt;/h3&gt;

&lt;p&gt;Nothing can exist without a good old search in all files.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd shift + F&lt;/code&gt; (Mac) / &lt;code&gt;ctrl shift + F&lt;/code&gt; (Windows) does the trick.&lt;/p&gt;

&lt;p&gt;If you want to match text by case, press &lt;code&gt;cmd option + C&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + C&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;p&gt;You can also match the whole word by pressing &lt;code&gt;cmd option + W&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + W&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-replace-in-all%C2%A0files"&gt;
  &lt;/a&gt;
  11. Replace in all files
&lt;/h3&gt;

&lt;p&gt;Do you want to replace all occurrences in all files across the project, i.e. search/replace?&lt;/p&gt;

&lt;p&gt;Amazing, &lt;code&gt;cmd option + H&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + H&lt;/code&gt; (Windows) does the trick.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd option + enter&lt;/code&gt; (Mac) / &lt;code&gt;crtl alt + enter&lt;/code&gt; (Windows) triggers the replacement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-split%C2%A0editor"&gt;
  &lt;/a&gt;
  12. Split editor
&lt;/h3&gt;

&lt;p&gt;One tab is not enough, you need many of them! Great, just press &lt;code&gt;cmd + \&lt;/code&gt; (Mac) / &lt;code&gt;alt shift + 0&lt;/code&gt; (Windows). Repeat until you're satisfied.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-close%C2%A0tab"&gt;
  &lt;/a&gt;
  13. Close tab
&lt;/h3&gt;

&lt;p&gt;This one is the same as in Chrome - &lt;code&gt;cmd + W&lt;/code&gt; (Mac) / &lt;code&gt;crtl + W&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-switching-between-opened%C2%A0tabs"&gt;
  &lt;/a&gt;
  14. Switching between opened tabs
&lt;/h3&gt;

&lt;p&gt;Do you want to open the previous tab? &lt;code&gt;crtl + tab&lt;/code&gt; does the trick.&lt;/p&gt;

&lt;p&gt;Do you want to go to a tab on a known position? &lt;code&gt;crtl + [index]&lt;/code&gt; does that.&lt;/p&gt;

&lt;p&gt;Finally, you can pick the tab on left/right by pressing &lt;code&gt;cmd option + arrow left/right&lt;/code&gt; (Mac) / &lt;code&gt;crtl page down/up&lt;/code&gt; (Windows).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I wouldn't suggest learning all of them by heart immediately - try with one or two of them, and slowly adapt them to your work.&lt;/p&gt;

&lt;p&gt;Save this article in case you want to revisit it later.&lt;/p&gt;

&lt;p&gt;Using more keyboard shortcuts will increase your productivity.&lt;/p&gt;

&lt;p&gt;And oh, it does feel so good.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>javascript</category>
      <category>tooling</category>
    </item>
    <item>
      <title>CSS z-index illustrated</title>
      <author>Natalia Venditto</author>
      <pubDate>Tue, 27 Jul 2021 15:21:04 +0000</pubDate>
      <link>https://dev.to/this-is-learning/css-z-index-illustrated-51f7</link>
      <guid>https://dev.to/this-is-learning/css-z-index-illustrated-51f7</guid>
      <description>&lt;p&gt;My followers know that I no longer work as a frontend developer, however, I worked as one for nearly 15 years and I was self-taught. I was lucky to have a background in architecture, CAD and graphic and 3d design, so grasping the more mathematical (or in this case geometrical) aspects of putting together a layout, was not difficult for me. However, I see that for self-taught developers coming from completely unrelated backgrounds, the &lt;code&gt;z-index&lt;/code&gt; is a tough one to grasp.&lt;/p&gt;

&lt;p&gt;This is my attempt at explaining it in an illustrated way.&lt;/p&gt;

&lt;p&gt;Most people will be familiar with the concept of cartesian &lt;a href="https://www.techopedia.com/definition/14290/cartesian-coordinates"&gt;coordinates&lt;/a&gt;. They are used to define the location of a point in either a line (2d) or in space (3d). If you drive and use Google Maps, you are probably familiar with geospatial coordinates, or longitude and latitude; the points we use for locations on maps or Earth.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2d-or-two-dimensional"&gt;
  &lt;/a&gt;
  2d or two dimensional
&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;2d&lt;/code&gt;, we have the &lt;code&gt;y-axis&lt;/code&gt;, and the &lt;code&gt;x-axis&lt;/code&gt;. From their &lt;a href="https://www.techopedia.com/definition/769/convergence"&gt;convergence&lt;/a&gt;, the point (0,0), we can then specify where another point is located. Typically the &lt;code&gt;y-axis&lt;/code&gt; defines the vertical location, and the &lt;code&gt;x-axis&lt;/code&gt; the horizontal location of a point. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-FxKBoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5las3igefk54ciebz8ff.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-FxKBoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5las3igefk54ciebz8ff.jpg" alt="x-y-axis illustrated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we have several points that define a shape, like a box, then we can define its dimensions AND its location, using coordinates.&lt;/p&gt;

&lt;p&gt;This is basically how we do layout with css, defining the dimensions and location of elements with respect to those two imaginary lines that come defined by the edge of the viewport.&lt;/p&gt;

&lt;p&gt;We understand &lt;code&gt;y=0&lt;/code&gt; as the top of the browser viewport, and &lt;code&gt;x=0&lt;/code&gt; as the left edge (when left to right), so (0,0) would be the most top-left point as we load the page (considering it is not programmatically scrolling to another &lt;code&gt;x,y&lt;/code&gt; location).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVuG0STC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4rqzbonscyn29iys07j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVuG0STC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4rqzbonscyn29iys07j.jpg" alt="a shape with respect to the x y axis of the viewports"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#layout-and-the-box-model"&gt;
  &lt;/a&gt;
  Layout and the box model
&lt;/h3&gt;

&lt;p&gt;When we are adding new elements to the markup of a page, by default they're added to the default context (I will explain context later in the article). They will follow the document flow and be stacked on top of each other, in the same order they are added to the document.&lt;/p&gt;

&lt;p&gt;So if we had 3 block elements like &lt;code&gt;divs&lt;/code&gt; for example, added to a document like you see in the figure below, if we could see them from the side in terms of an imaginary vertical stack, they would be stacked in this way:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aj0GtqLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atqr531eof4fhw352s9w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aj0GtqLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atqr531eof4fhw352s9w.jpg" alt="divs stacked following the document flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what would happen if you added a child to &lt;code&gt;div&lt;/code&gt; number 2, and give it a top margin to move it on top of &lt;code&gt;div&lt;/code&gt; 3 in the y-axis? That "overlapping" bit would be hidden by &lt;code&gt;div&lt;/code&gt; 3, and that's expected, since in terms of markup &lt;code&gt;div&lt;/code&gt; 3 is coming after &lt;code&gt;div&lt;/code&gt; 4 in the document flow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mWucamsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndn3sn0lyl1vtdq0qjzp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mWucamsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndn3sn0lyl1vtdq0qjzp.jpg" alt="divs markup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VX5yIE4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5lc5g3oy0lkuda7laom.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VX5yIE4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5lc5g3oy0lkuda7laom.jpg" alt="divs stacked following the document flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zindex-99999999999-important-will-helpnot"&gt;
  &lt;/a&gt;
  z-index: 99999999999 !important will help...NOT
&lt;/h3&gt;

&lt;p&gt;Many developers new to frontend will try to fix this using the &lt;code&gt;z-index&lt;/code&gt; property, with a very high positive value (or maybe negative, supposign they wanted to completely hide the &lt;code&gt;div 4&lt;/code&gt;). But that on its own, won't work. &lt;/p&gt;

&lt;p&gt;EDIT: Thanks to &lt;a href="https://dev.to/afif"&gt;Temani Afif&lt;/a&gt; Originally I had written -&amp;gt; "If you don't create a new stacking context, z-index won't work, no matter how many 9's and &lt;code&gt;!importants&lt;/code&gt; you add." &lt;strong&gt;But he clarifies below giving a div a position, which I always understood creates a new stacking context as well. He points at the painting order which I mention in my article as the order in which elements are placed in the document flow.&lt;/strong&gt;  Please read his comment below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-stacking-contexts"&gt;
  &lt;/a&gt;
  Understanding stacking contexts
&lt;/h2&gt;

&lt;p&gt;Let's port that two-dimensional representation of cartesian coordinates, to a three-dimensional or spatial one. As you probably guessed, now we have 3 points that specify the location of a point: (x, y, z)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRJe0eTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62rydnsnjpch3stw6mv2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRJe0eTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62rydnsnjpch3stw6mv2.jpg" alt="3 dimensional representation of a layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A stacking context is each new layer added to that z-axis, that you can now reorder, to bring elements on top or place them below the default context or other contexts. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p6FRRv7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pip0ucwsr1jt1orb8tnx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p6FRRv7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pip0ucwsr1jt1orb8tnx.jpg" alt="stacking contexts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The order comes defined by the index, that can be 0, a positive integer or a negative integer or auto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2HQE3y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh3rcr87bg5q8hys8byz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2HQE3y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh3rcr87bg5q8hys8byz.jpg" alt="stack with z-index"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I advise you now head to the official documentation on MDN, and read all you can about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context"&gt;stacking contexts&lt;/a&gt;. But in a nutshell, you create a new stacking context by giving a container div the following properties and values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you give it an &lt;code&gt;opacity&lt;/code&gt; different than 0&lt;/li&gt;
&lt;li&gt;you give it a &lt;code&gt;position&lt;/code&gt; other than &lt;code&gt;static&lt;/code&gt;, and a &lt;code&gt;z-index&lt;/code&gt; other than &lt;code&gt;auto&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;you give it &lt;code&gt;display&lt;/code&gt; either &lt;code&gt;flex&lt;/code&gt; or &lt;code&gt;grid&lt;/code&gt;, and a &lt;code&gt;z-index&lt;/code&gt; other than &lt;code&gt;auto&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;you use &lt;code&gt;transform&lt;/code&gt;, &lt;code&gt;perspective&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;clip-path&lt;/code&gt; or &lt;code&gt;mask&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;or you use some of the brand new properties, such as &lt;code&gt;isolate&lt;/code&gt;(with a value of &lt;code&gt;isolate&lt;/code&gt;), &lt;code&gt;will-change&lt;/code&gt;, or &lt;code&gt;contain&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all folks! I hope you find it useful and don't have to struggle with z-index issues anymore! &lt;em&gt;Also if this article has an error or you want to suggest an improvement, do it in the comments!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>layout</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why tabs are better than spaces</title>
      <author>Matt Kenefick</author>
      <pubDate>Tue, 27 Jul 2021 15:20:31 +0000</pubDate>
      <link>https://dev.to/mattkenefick/why-tabs-are-better-than-spaces-3k08</link>
      <guid>https://dev.to/mattkenefick/why-tabs-are-better-than-spaces-3k08</guid>
      <description>&lt;h3&gt;
  &lt;a href="#warning"&gt;
  &lt;/a&gt;
  ⚠️ Warning!
&lt;/h3&gt;

&lt;p&gt;Opinions in this article may differ from your own. Beware of mild generalizations.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h4&gt;

&lt;p&gt;I've been writing code for over 20 years in several languages and all types of editors, including: Notepad, Visual Basic, Dreamweaver, TextMate, Coda, Sublime, Xcode, Visual Studio, and others.&lt;/p&gt;

&lt;p&gt;For the majority of that time, I've been pretty adamant about &lt;strong&gt;4 spaces&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-i-might-be-changing-my-mind"&gt;
  &lt;/a&gt;
  Why I might be changing my mind
&lt;/h3&gt;

&lt;p&gt;In very recent years, the popularity of a few frameworks has spawned a rise of cases in 2-space indentation. In my opinion, this level of indentation is too low and creates confusion. My assumption is that 2-space indentation was adopted to save horizontal real estate, but I'm not entirely sure why that would be required.&lt;/p&gt;

&lt;p&gt;After all, if your code has to be indented to the point it becomes unreadable, you likely have other code-related issues to fix. In fairly broad strokes (⚠️), you have indentation for the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;namespace
    class
        function
            conditional
                loop
                    logic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's more than enough room to keep code within an 80 character margin with a 4-gap indentation even at 6 levels.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#but-why-tabs"&gt;
  &lt;/a&gt;
  But why tabs?
&lt;/h4&gt;

&lt;p&gt;I'm not on a mission to stop people from writing 2-gap indentation. &lt;strong&gt;If that's what you like, that's what you like.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I write my code, I want to see 4-gap indentation even if I'm sharing the codebase with 2-gappers. This creates a problem because formatting the file will add/remove spaces on every line to meet indentation levels which causes your &lt;code&gt;git diff&lt;/code&gt; to change virtually every line; unreasonable and irresponsible!&lt;/p&gt;

&lt;p&gt;✅ &lt;strong&gt;Tabs make more sense&lt;/strong&gt; because each individual tab represents one logical level of indentation.&lt;/p&gt;

&lt;p&gt;You may have noticed I changed my terminology in this article to say "2-gap" rather than "2-space" and that's because it's the visual representation of space that matters; not the actual character. &lt;em&gt;Even though spaces require more disk space.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Within your editor, you can change the visual representation of a tab:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BB028Rf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb3tfcr86u90szhky2hd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BB028Rf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb3tfcr86u90szhky2hd.png" alt="Sublime Text Tab Representation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can still get your 2-gap, 4-gap, 8-gap indentation level using tabs while working seamlessly with other developers. If Johnny is using 2-gap tabs, I'm using 4-gap tabs, and Maria is using 8-gap tabs... none of the actual characters change in our commits even though we can all feel comfortable with our preferred indentation sizes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each tab (&lt;em&gt;\t / 0x09&lt;/em&gt;) represents one level of logical indentation, rather than having to compute/reduce spaces as a representation of indentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tabs allow multiple developers to use their own indentation preferences without overriding formatting of others.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Forcing spaces of your own preference onto the other members of your team is a bit selfish.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>code</category>
      <category>editor</category>
      <category>redpill</category>
    </item>
    <item>
      <title>Django React - Datta Able (Free Full-stack Product)</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 27 Jul 2021 15:08:55 +0000</pubDate>
      <link>https://dev.to/sm0ke/django-react-datta-able-1hpj</link>
      <guid>https://dev.to/sm0ke/django-react-datta-able-1hpj</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This article presents an open-source full-stack product that uses a decoupled &lt;strong&gt;React UI&lt;/strong&gt; and a simple &lt;strong&gt;Django Rest API&lt;/strong&gt; for authentication. This simple starter might help beginners to accommodate faster with a full-stack pattern by coding simple features on top of existing code. Sources are available on Github under the MIT License. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/product/django-react-datta-able"&gt;Django React Datta Able&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://django-react-datta-able.appseed-srv1.com/"&gt;Django React Datta Able&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2GdGExom--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26eqh8vp7u0o5dbhklg1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2GdGExom--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26eqh8vp7u0o5dbhklg1.gif" alt="Django React Datta Able - Open-source fullstack product provided by AppSeed and CodedThemes."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This free product can be used in many ways: the first one might be educational. Beginners can clone the project and experiment the build and code simple things on top of both parts of the project: backend and frontend. Other way is to use the product in production and reuse the features for a hobby or commercial end-product. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-build-the-backend"&gt;
  &lt;/a&gt;
  How to build the backend
&lt;/h2&gt;

&lt;p&gt;The backend is a simple Django API server built with SQLite, Django REST API and &lt;code&gt;JSON Web Tokens&lt;/code&gt; and Docker support. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Product requirements:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Python3 (Python2 is not supported) &lt;/li&gt;
&lt;li&gt;Django 3.2.5 (latest stable version)&lt;/li&gt;
&lt;li&gt;DRF Library&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the sources&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/api-server-django.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;api-server-django
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Create a virtual environment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nt"&gt;-p&lt;/span&gt; python3 venv
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Install dependencies (via PIP)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Start the API server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the API server should be up and running. &lt;/p&gt;




&lt;p&gt;Product comes with &lt;code&gt;Docker&lt;/code&gt; configuration and the set up is considerably faster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#start-the-react-ui"&gt;
  &lt;/a&gt;
  Start the REACT UI
&lt;/h2&gt;

&lt;p&gt;To built the UI a decent Node JS version is requited (&amp;gt;= 12.x) and also GIT to clone/download the project from the public repository.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/react-datta-able-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;react-datta-able-dashboard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install dependencies via NPM or yarn&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Start in development mode&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start 
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;At this point, we should see the React UI running in the browser. By default guest users are redirected to the login page. Once we create a new user and successfully authenticate, the app unlocks all private pages: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Django React Datta&lt;/strong&gt; - Login Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uO32ouUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdxdys342gzm8lu9efx5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uO32ouUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdxdys342gzm8lu9efx5.jpg" alt="Django React - Datta Able, the login page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Django React Datta&lt;/strong&gt; - Widgets page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrUc-Csw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0i7k87apjgxuduepucp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrUc-Csw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0i7k87apjgxuduepucp.jpg" alt="Django React - Datta Able, the widgets page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For support and more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;(free) &lt;a href="https://appseed.us/product/react-node-js-berry-dashboard"&gt;React Node JS Berry&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;(free) &lt;a href="https://appseed.us/product/react-node-js-datta-able"&gt;React Node JS Datta Able&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated list published here on Dev&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>django</category>
      <category>webdev</category>
      <category>fullstack</category>
    </item>
    <item>
      <title>Narrowing the Type of Class Accessors</title>
      <author>Benny Powers 🇮🇱🇨🇦</author>
      <pubDate>Tue, 27 Jul 2021 15:03:09 +0000</pubDate>
      <link>https://dev.to/bennypowers/narrowing-the-type-of-class-accessors-bi8</link>
      <guid>https://dev.to/bennypowers/narrowing-the-type-of-class-accessors-bi8</guid>
      <description>&lt;p&gt;Javascript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get"&gt;class accessors&lt;/a&gt; let you define a function to get or set a particular value on an object.&lt;/p&gt;

&lt;p&gt;Why would you want to do that? One popular reason is to run "side effects" in a setter. So for example say you want to make an HTTP request every time a user sets the &lt;code&gt;options&lt;/code&gt; property on your object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Fetcher&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By defining the &lt;code&gt;options&lt;/code&gt; property with an accessor pair, we can run our side effects (in this case, calling &lt;code&gt;fetch&lt;/code&gt;) in the setter.&lt;/p&gt;

&lt;p&gt;But now let's say we want to write a &lt;code&gt;Poster&lt;/code&gt; class that only makes POST requests. It makes sense to extend Fetcher so that we don't duplicate our work. We want to &lt;em&gt;narrow the type&lt;/em&gt; of options, however, to only allow options where the &lt;code&gt;method&lt;/code&gt; is &lt;code&gt;POST&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;PostInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Poster&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Fetcher&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PostInit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we're essentially saying with the &lt;code&gt;declare&lt;/code&gt; keyword is "This class is exactly the same as it's parent, except that TypeScript should limit the options property to only accept PostInit objects". This &lt;em&gt;should&lt;/em&gt; work, but...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;'options' is defined as an accessor in class 'Fetcher', but is overridden here in 'Poster' as an instance property.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oops! TypeScript complains. This &lt;a href="https://github.com/microsoft/TypeScript/pull/37894"&gt;change was introduced in 2020&lt;/a&gt; in order to make TypeScript behave more like plain JavaScript. Indeed, TC39 decreed that &lt;a href="https://github.com/tc39/proposal-class-fields#public-fields-created-with-objectdefineproperty"&gt;class fields should have "define semantics"&lt;/a&gt; instead of "set semantics", which means that if we merely stripped these files of typescript syntax, our Poster class would break.&lt;/p&gt;

&lt;p&gt;The debate over TC39's decision to use define semantics continues (even though the decision was made already), so we won't get deeper into it here, but when using typescript and "ambient declarations" like we did above with the &lt;code&gt;declare&lt;/code&gt; keyword, we don't have the problem of our class field overriding the accessors, particularly if we don't have &lt;code&gt;useDefineForClassFields&lt;/code&gt; turned on (which is probably a good choice anyways).&lt;/p&gt;

&lt;p&gt;In fact, one of the three proposals which aim to fix this behaviour in typescript calls to allow fields to override accessors if they use the &lt;code&gt;declare&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;But until that proposal, or a similar fix, is accepted, what can we do?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-workaround-using-decorators"&gt;
  &lt;/a&gt;
  A Workaround Using Decorators
&lt;/h2&gt;

&lt;p&gt;TypeScript field decorators have access to the class prototype. We can use one then to define our property with get and set functions. Since we're using a class private field for storage, and those are only available within a class body, let's define our decorator as a static method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Fetcher&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** @internal */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;proto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Fetcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;proto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;options&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;

      &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Fetcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you squint, you can still see the original outline of the class, and this version does not error when we &lt;code&gt;declare&lt;/code&gt; our narrow type on the subclass.&lt;/p&gt;

&lt;p&gt;Really, this is a (kind of ugly) loophole to tide us over until TypeScript decides which proposal (if any) to adopt for this pattern. Here's hoping they don't close it before then.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#footnotes"&gt;
  &lt;/a&gt;
  Footnotes
&lt;/h2&gt;

&lt;p&gt;Eagle-eyed readers might object to my example: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Poster&lt;/code&gt; should implement it's own setter to only allow &lt;code&gt;POST&lt;/code&gt; at run time!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They'd be right to do so. We could come up with other examples where the options object doesn't have runtime validation, or where that validation is done in other methods. In those cases, it would be right-handy to declare the narrower type on the subclass.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Visual Studio 2022 is here✅ (5 features that you will love)</title>
      <author>Dotnetsafer</author>
      <pubDate>Tue, 27 Jul 2021 15:02:55 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/visual-studio-2022-is-here-5-features-that-you-will-love-3dh6</link>
      <guid>https://dev.to/dotnetsafer/visual-studio-2022-is-here-5-features-that-you-will-love-3dh6</guid>
      <description>&lt;p&gt;We have already reached the middle of the year 2021 and &lt;em&gt;Microsoft&lt;/em&gt; does not leave for tomorrow what it can announce today. From the hand of &lt;em&gt;CVP&lt;/em&gt; &lt;strong&gt;Amanda Silver&lt;/strong&gt; we get some news that the next version of &lt;em&gt;Visual Studio&lt;/em&gt; will incorporate, which we already know officially as &lt;strong&gt;Visual Studio 2022&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#visual-studio-2022-new-features"&gt;
  &lt;/a&gt;
  🟣Visual Studio 2022 new features
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#net-6"&gt;
  &lt;/a&gt;
  &lt;strong&gt;.NET 6&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Probably the most relevant feature is the inclusion of .&lt;strong&gt;NET 6&lt;/strong&gt;, which will be among us in November 2021. .NET 6 will allow the creation of multiplatform applications and will already incorporate specific frameworks for Android and Mac. Here are the news about .NET 6.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#net-maui"&gt;
  &lt;/a&gt;
  .NET MAUI
&lt;/h3&gt;

&lt;p&gt;The most remarkable functionality of this new version of the framework will be &lt;strong&gt;.NET MAUI.&lt;/strong&gt; Is a technology that allows you to &lt;strong&gt;create&lt;/strong&gt; common interfaces for any environment, be it &lt;strong&gt;desktop&lt;/strong&gt;, &lt;strong&gt;mobile&lt;/strong&gt; or &lt;strong&gt;web&lt;/strong&gt;, and on &lt;strong&gt;any operating system&lt;/strong&gt;. .NET MAUI is the replacement for &lt;em&gt;Xamarin Forms&lt;/em&gt; and will add the ability to create desktop applications using &lt;em&gt;Blazor&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JGGb07U---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A6GxBOMangBbMRZX2u7D9fg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JGGb07U---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A6GxBOMangBbMRZX2u7D9fg.png" alt=".net maui features"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#64bit-visual-studio"&gt;
  &lt;/a&gt;
  64-bit Visual Studio
&lt;/h3&gt;

&lt;p&gt;One of the great novelties comes from the same application. And it is that &lt;em&gt;Visual Studio 2022&lt;/em&gt; will be for the first time a &lt;strong&gt;64-bit&lt;/strong&gt; application, which will no longer be limited to 4 GB of memory in the main &lt;code&gt;**devenv.exe**&lt;/code&gt;process. The goal is to be able to open, edit, run, and debug even the largest and most complex solutions without running out of memory. Obviously, both 64-bit and 32-bit applications can be created.&lt;/p&gt;

&lt;p&gt;Unrestricted access to all memory on the PC should result in much better performance across the board and fewer out-of-memory errors. &lt;em&gt;Microsoft&lt;/em&gt; says it is working to make every part of the workflow faster and more efficient, from loading solutions to debugging &lt;strong&gt;F5&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here you can see how &lt;em&gt;Visual Studio 2022&lt;/em&gt; loads a solution with &lt;strong&gt;1,600&lt;/strong&gt; &lt;strong&gt;projects&lt;/strong&gt; and more than &lt;strong&gt;300,000 files&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LGnnH0eh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1280/1%2AC9JVUGDWQcB6HU1n4-sHCw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LGnnH0eh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1280/1%2AC9JVUGDWQcB6HU1n4-sHCw.gif" alt="Microsoft Visual Studio 2022 loading project"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#new-user-interface"&gt;
  &lt;/a&gt;
  New user interface
&lt;/h3&gt;

&lt;p&gt;Other new features include a modernization of the user interface, with lighter icons for the light and dark versions of the interface.&lt;br&gt;&lt;br&gt;
Overall, the goal is to reduce complexity, decrease cognitive load, and offer better usability for all users. The new version will include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Updated &lt;strong&gt;icons&lt;/strong&gt; for clarity, readability, and contrast.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Cascadia Code&lt;/strong&gt;, a new fixed width font for better readability. (It can already be tested at &lt;a href="https://github.com/microsoft/cascadia-code"&gt;GitHub&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  Updated and improved &lt;strong&gt;themes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;  Integration with &lt;strong&gt;Accessibility Insights&lt;/strong&gt; to detect accessibility issues early on, before the software reaches end users.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Customization&lt;/strong&gt; of the experience with Visual Studio, with settings for the IDE and the ability to synchronize (or not) settings between devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CRPcYLID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2APyT22LR0x9Ut9XRhmCGVlg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRPcYLID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2APyT22LR0x9Ut9XRhmCGVlg.jpeg" alt="Microsoft Visual Studio 2022 new theme"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#hot-reload"&gt;
  &lt;/a&gt;
  Hot Reload
&lt;/h3&gt;

&lt;p&gt;There is also the &lt;strong&gt;Hot Reload&lt;/strong&gt; feature that allows making changes to the interface while the project is in debugging and applying them without having to &lt;strong&gt;restart&lt;/strong&gt; debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ECz7w4hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1362/1%2ARsAUPN10hT2HSJY8o1H3mw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ECz7w4hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1362/1%2ARsAUPN10hT2HSJY8o1H3mw.png" alt="Visual Studio 2022 Hot Reload"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>visualstudio</category>
      <category>csharp</category>
      <category>dotnet</category>
      <category>netcore</category>
    </item>
    <item>
      <title>Swapping Tokens on MetaMask</title>
      <author>Manbir Singh Marwah</author>
      <pubDate>Tue, 27 Jul 2021 14:44:29 +0000</pubDate>
      <link>https://dev.to/manbir/swapping-tokens-on-metamask-3klf</link>
      <guid>https://dev.to/manbir/swapping-tokens-on-metamask-3klf</guid>
      <description>&lt;p&gt;MetaMask, one of the most popular Ethereum-based crypto wallets offers the ability to swap a crypto token with another, seamlessly. We can do that either by using the built-in swap feature within the wallet app, or manually by using any DEX platform such as Uniswap or Pancakeswap.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-builtin-swap-feature"&gt;
  &lt;/a&gt;
  Using the built-in swap feature
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IGoJilQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo392dxlybibghvp3io3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IGoJilQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo392dxlybibghvp3io3.jpeg" alt="1_uy-1VbHPw8vJd62lIqgGvA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To swap a token using the swap feature on MetaMask, we'll need to follow these simple steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the MetaMask extension&lt;/li&gt;
&lt;li&gt;Click the new ‘Swap’ button&lt;/li&gt;
&lt;li&gt;Select the tokens you want to swap and click ‘Get quotes’&lt;/li&gt;
&lt;li&gt;Let MetaMask do its magic ;)&lt;/li&gt;
&lt;li&gt;Compare all available quotes and select the best one&lt;/li&gt;
&lt;li&gt;Click on ‘Swap’ and wait until the transaction completes&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#manually-using-a-dex"&gt;
  &lt;/a&gt;
  Manually using a DEX
&lt;/h2&gt;

&lt;p&gt;To manually swap tokens using MetaMask, we can use a DEX such as Uniswap or Pancakeswap. Let's walk down the steps on how to do it with Pancakeswap. These steps would be pretty much the same on most DEX platforms. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-fire-up-your-browser-and-visit-pancakeswapfinance"&gt;
  &lt;/a&gt;
  1. Fire up your browser and visit pancakeswap.finance
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fBa2Pvx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmls4pr4uymofbi6yj6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fBa2Pvx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmls4pr4uymofbi6yj6n.png" alt="pancakeswap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on &lt;code&gt;Trade &amp;gt; Exchange&lt;/code&gt; from the menu at the left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Rv9mZMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekv1dumg4qfvlcwlyq1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Rv9mZMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekv1dumg4qfvlcwlyq1n.png" alt="Screenshot from 2021-07-27 16-24-46"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-click-on-connect-at-the-top-right-corner"&gt;
  &lt;/a&gt;
  2. Click on 'Connect' at the top right corner
&lt;/h3&gt;

&lt;p&gt;Ensure that you're signed into your MetaMask wallet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ov8-4Qqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neti5fsytdewbtx6ro2j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ov8-4Qqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neti5fsytdewbtx6ro2j.png" alt="Screenshot from 2021-07-27 16-24-46"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-select-metamask-from-the-list-of-supported-wallets"&gt;
  &lt;/a&gt;
  3. Select 'MetaMask' from the list of supported wallets
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFtaAFRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrx8j5wgae4cli68e3dm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFtaAFRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrx8j5wgae4cli68e3dm.png" alt="Screenshot from 2021-07-27 16-24-46"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-select-the-account-you-want-to-connect-and-click-next"&gt;
  &lt;/a&gt;
  4. Select the account you want to connect and click 'Next'
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oVAGQIu2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tad9gv0tbk9vaq4nazze.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oVAGQIu2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tad9gv0tbk9vaq4nazze.png" alt="Screenshot from 2021-07-27 16-26-00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-select-the-tokens-you-want-to-swap-in-the-from-and-to-section-and-click-swap"&gt;
  &lt;/a&gt;
  5. Select the tokens you want to swap in the 'From' and 'To' section, and click 'Swap'
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zz96_ysx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq57oe24scll8hd9nusb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zz96_ysx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq57oe24scll8hd9nusb.png" alt="Screenshot from 2021-07-27 16-24-46"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-confirm-the-transaction-from-your-wallet"&gt;
  &lt;/a&gt;
  6. Confirm the transaction from your wallet
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OqZOaCN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gk39qyg0fkk1vyxfz7m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqZOaCN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gk39qyg0fkk1vyxfz7m.png" alt="Screenshot from 2021-07-27 16-27-54"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And voila! Your transaction is submitted. You can view the status of your transaction on BSCScan. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzXKePCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zarjgpfb90afabagv29z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzXKePCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zarjgpfb90afabagv29z.png" alt="9vw40kseg2p61"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure that you've added the token's contract in your MetaMask wallet so that it shows up after the swap! &lt;/p&gt;

</description>
      <category>blockchain</category>
    </item>
  </channel>
</rss>
