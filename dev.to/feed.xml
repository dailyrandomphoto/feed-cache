<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My (almost) self-taught journey to code</title>
      <author>Jonnie Oak</author>
      <pubDate>Thu, 28 Jan 2021 07:21:28 +0000</pubDate>
      <link>https://dev.to/oakj/my-almost-self-taught-journey-to-code-114a</link>
      <guid>https://dev.to/oakj/my-almost-self-taught-journey-to-code-114a</guid>
      <description>&lt;h4&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;I wasn't happy at my job. In September of 2020, I decided that I needed to make a change. After 5 years of working as an electrical engineer I bit the bullet and left my job to pursue coding. This is my journey. I hope that my journey can be used as a guide for anyone that wants to take on a similar path. It's never too late to learn how to code! &lt;/p&gt;

&lt;p&gt;In the past 4.5 months, I have learned so much. It makes me so happy to share this experience with the world. It also acts as a reminder for how far I've come and to not be too hard on myself when I feel like I'm not progressing fast enough. I hope people will find this useful. If it is - feel free to come a long on the journey by giving a follow!&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;September 2020&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;i&gt;9/8/20:&lt;/i&gt;&lt;br&gt;
I start my Python class and my SQL class at Bunker Hill Community College.&lt;/p&gt;

&lt;p&gt;I learned a lot from these classes but it's definitely not required. Actually, I recommend new coders to AVOID taking classes (unless it's low cost). Make sure to check back in for a future blog post where I go into detail on my experience and when structured classes are worth it!&lt;/p&gt;

&lt;p&gt;&lt;i&gt;9/18/20:&lt;/i&gt;&lt;br&gt;
I start a Udemy course. The Complete Web Developer in 2020: Zero to Mastery by Andrei Neagoie. I highly recommend this course for any beginner interested in the world of web development. This course goes over everything: how the web works, HTML, CSS, JavaScript, React, databases, http requests and more. It also talks about coding environments. At this point I start using VSCode. To this day VSCode is still my favorite code editor.&lt;/p&gt;

&lt;p&gt;I'll go into detail on my experience and if this course is right for you in a future blog post.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;October 2020&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;i&gt;10/5/20 - 10/9/20:&lt;/i&gt;&lt;br&gt;
I participate in live webinars for Springboards conference "RISE". Springboard is a coding boot camp and RISE is their annual conference that discusses the software engineering and data science industries. At this point I was still trying to see if a boot camp was right for me. Spoiler alert - it's not! I'm very happy with my choice in taking the self taught route. Even though I haven't attended a boot camp, I've done a lot of research. Boot camps are expensive. The guaranteed jobs are sketchy. The career mentorship is not worth the tuition. As long as you're disciplined, you can learn everything a boot camp offers for a MUCH cheaper price point. At the bottom of this post, I have a table that shows how much I've spent so far. Make sure to check back in for a blog where I discuss my findings on boot camps.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;November 2020&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;i&gt;11/6/20-11/8/20:&lt;/i&gt;&lt;br&gt;
I participate in Liquid Hacks. This is my first "test" to see what I have learned. I tried building a website called "a team liquid story". Honestly it was supposed to be extremely simple. I fail at completing the project by the deadline and I end up not submitting. Even though I wasn't able to complete a project. I don't regret participating. It showed me how much I still didn't know.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;11/30/20:&lt;/i&gt;&lt;br&gt;
Back to The Complete Web Developer by Andrei Neagoie. At this point I did every exercise up to the React section. I felt like I needed to focus on the fundamentals. I "finished" the course by watching the rest of the videos. Finishing the course without completing the exercises helped me learn broad pictures of what other tools are used and how they are used. It gave me a good idea of what to expect in the future so that I wouldn't be completely lost.&lt;/p&gt;

&lt;p&gt;I start grinding FreeCodeCamp - Javascript Algorithms and Data Structures Certification.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;December 2020&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;i&gt;12/1/20:&lt;/i&gt;&lt;br&gt;
I complete my semester project for my Python class. A program that takes a summoner name from the game League of Legends and outputs the user's match history and charts the frequency of each champion played. The program is coded in Python using Jupyter notebook.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;12/16/20:&lt;/i&gt;&lt;br&gt;
I finish FreeCodeCamp - Javascript Algorithms and Data Structures Certification&lt;/p&gt;

&lt;p&gt;&lt;i&gt;12/16/20 - 12/24/20:&lt;/i&gt;&lt;br&gt;
I start learning React by working through the tutorial in the official docs. I can't find quality material on how to learn React until 12/28/20.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;12/18/20&lt;i&gt;&lt;/i&gt;&lt;br&gt;
My Python and SQL classes end&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;12/28/20 - 1/20/21:&lt;/i&gt;&lt;br&gt;
I start going through Pure React by Dave Ceddia. This was easily one of my best coding investments. I highly recommend this book for anyone that knows HTML/CSS/JavaScript and wants to jump into React. React is a framework that has many many many tools. It can be very overwhelming to figure out where to start. Pure React is a book that teaches... well.... pure React. All of the extra tools can be learned later.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;January 2021&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;i&gt;1/20/21 - 1/22/21:&lt;/i&gt;&lt;br&gt;
I finish going through Pure React. At this point I feel comfortable and I decide that I am ready to build a web app from "scratch". Scratch is in quotes because I actually decide to build a Discord clone in React. I decide to build a Discord clone because building an actual app from scratch would involve designing UI/UX which is not the current goal. I want to test my developer knowledge.&lt;/p&gt;

&lt;p&gt;I start off by prototyping the frontend.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;1/22/21-1/26/21:&lt;/i&gt;&lt;br&gt;
Frontend prototype is complete. I start thinking about the backend. After some research, I end up going with Firebase. I have some familiarity with databases from my SQL class and The Complete Web Developer course but Firestore is a noSQL database so there is a a bit of a learning curve. I end up buying Fireship's course Firestore Data Modeling Master Course. This course is perfect for someone that has some database knowledge because it's short and sweet. It covers everything you need to know quickly. It shouldn't be used as your first course in databases.&lt;/p&gt;

&lt;p&gt;I have some familiarity from fetching data from my Python project where I fetched data from Riot Games API. I build my first feature that combines both frontend and backend: a side bar that fetches real time data and outputs the community name and avatar links as a list.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;1/27/21:&lt;/i&gt;&lt;br&gt;
This brings me to dev community and my first post. I've learned a lot... enough to where I felt like I needed to share my experience.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;updates coming...&lt;/strong&gt;&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Money spent so far&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Worth it&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Complete Web Developer by Andrei Neagoie&lt;/td&gt;
&lt;td&gt;$13.99&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pure React by Dave Ceddia&lt;/td&gt;
&lt;td&gt;$59.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fireship's Firestore Data Modeling Course&lt;/td&gt;
&lt;td&gt;$19.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total:&lt;/td&gt;
&lt;td&gt;$91.99&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Not worth it&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python at Bunker Hill Community College&lt;/td&gt;
&lt;td&gt;$1248.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SQL at Bunker Hill Community College&lt;/td&gt;
&lt;td&gt;$1248.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total:&lt;/td&gt;
&lt;td&gt;$2496.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10 Advanced Projects to Build in 2021</title>
      <author>Henry Boisdequin</author>
      <pubDate>Thu, 28 Jan 2021 05:51:56 +0000</pubDate>
      <link>https://dev.to/hb/10-advanced-projects-to-build-in-2021-425o</link>
      <guid>https://dev.to/hb/10-advanced-projects-to-build-in-2021-425o</guid>
      <description>&lt;p&gt;I've curated a list of 10 advanced projects to complete in 2021. Most of these are systems programming projects, but there are a few other AI and networking projects in the list. When I say these projects are advanced, they are &lt;strong&gt;advanced&lt;/strong&gt;. I would recommend being very familiar with the programming language you choose to use to tackle one of these projects. Let's dive right into it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-programming-language" class="anchor"&gt;
  &lt;/a&gt;
  1. Programming Language
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lSja0DtK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/domylpqbyboghckm79m7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lSja0DtK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/domylpqbyboghckm79m7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating a programming language, interpreted or compiled, is no easy feat. Some programming languages include: Python, Rust, Javascript, C++, Elixr, and many more. For this project, design and implement an interpreted or compiled programming language from scratch. If you would like this project to not only be a 2-week thing, think about the problems you have with certain programming languages, and how to fix them. For example, Rust is an awesome programming language that has memory safety and speed. The downside to Rust is its learning curve. I would try to create a programming language that is fast, memory safe, but would be easier to learn than Rust.&lt;/p&gt;

&lt;p&gt;Tutorials (if you get stuck):&lt;/p&gt;

&lt;p&gt;Golang: &lt;a href="https://interpreterbook.com/"&gt;https://interpreterbook.com/&lt;/a&gt;&lt;br&gt;
Rust: &lt;a href="https://arzg.github.io/lang/"&gt;https://arzg.github.io/lang/&lt;/a&gt;&lt;br&gt;
Python: &lt;a href="https://youtu.be/Eythq9848Fg?list=PLZQftyCk7_SdoVexSmwy_tBgs7P0b97yD"&gt;https://youtu.be/Eythq9848Fg?list=PLZQftyCk7_SdoVexSmwy_tBgs7P0b97yD&lt;/a&gt;&lt;br&gt;
General: &lt;a href="https://online.stanford.edu/courses/soe-ycscs1-compilers"&gt;https://online.stanford.edu/courses/soe-ycscs1-compilers&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-toy-databasekey-value-store" class="anchor"&gt;
  &lt;/a&gt;
  2. Toy Database/Key, Value Store
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A-z7frjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/byr748zy4umfj4f1jxg3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A-z7frjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/byr748zy4umfj4f1jxg3.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this project, create a toy database or a key, value store. If you would like some more practice with how databases work before building a real one, I would recommend creating a key, value store, a Redis clone, or a Memcached clone. As these projects are smaller than a full NoSQL/SQL database, these would be great intermediate systems projects. Once you feel ready, create a toy database. This database can be whatever you want: SQL or NoSQL, relational or nonrelational, the list goes on. &lt;/p&gt;

&lt;p&gt;Tutorials (if you get stuck):&lt;/p&gt;

&lt;p&gt;Python (beginner-friendly): &lt;a href="https://www.freecodecamp.org/news/how-to-write-a-simple-toy-database-in-python-within-minutes-51ff49f47f1/"&gt;https://www.freecodecamp.org/news/how-to-write-a-simple-toy-database-in-python-within-minutes-51ff49f47f1/&lt;/a&gt;&lt;br&gt;
General: &lt;a href="https://www.coursera.org/specializations/database-systems"&gt;https://www.coursera.org/specializations/database-systems&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-implement-the-tcp-protocol" class="anchor"&gt;
  &lt;/a&gt;
  3. Implement the TCP Protocol
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HkopAidz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0heabe0chylgva726379.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HkopAidz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0heabe0chylgva726379.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this project, implement the TCP protocol from scratch. If you don't know what the TCP protocol is, that would be the first step. I would recommend reading this: &lt;a href="https://tools.ietf.org/html/rfc793"&gt;https://tools.ietf.org/html/rfc793&lt;/a&gt;. As the TCP protocol is a more advanced protocol, if you would like to tackle something a little simpler, I would recommend implementing the FTP protocol which you can learn about here: &lt;a href="https://en.wikipedia.org/wiki/File_Transfer_Protocol"&gt;https://en.wikipedia.org/wiki/File_Transfer_Protocol&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tutorials (if you get stuck):&lt;/p&gt;

&lt;p&gt;Rust: &lt;a href="https://youtu.be/bzja9fQWzdA?list=PLqbS7AVVErFivDY3iKAQk3_VAm8SXwt1X"&gt;https://youtu.be/bzja9fQWzdA?list=PLqbS7AVVErFivDY3iKAQk3_VAm8SXwt1X&lt;/a&gt;&lt;br&gt;
C++: &lt;a href="https://youtu.be/WDn-htpBlnU?list=PLZo2FfoMkJeEogzRXEJeTb3xpA2RAzwCZ"&gt;https://youtu.be/WDn-htpBlnU?list=PLZo2FfoMkJeEogzRXEJeTb3xpA2RAzwCZ&lt;/a&gt;&lt;br&gt;
Python (FTP): &lt;a href="https://www.tutorialspoint.com/python_network_programming/python_ftp.htm"&gt;https://www.tutorialspoint.com/python_network_programming/python_ftp.htm&lt;/a&gt;&lt;br&gt;
Node: &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-develop-a-node-js-tcp-server-application-using-pm2-and-nginx-on-ubuntu-16-04"&gt;https://www.digitalocean.com/community/tutorials/how-to-develop-a-node-js-tcp-server-application-using-pm2-and-nginx-on-ubuntu-16-04&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-implement-biometric-authentication" class="anchor"&gt;
  &lt;/a&gt;
  4. Implement Biometric Authentication
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ue--5y08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2rjtc3f0mlgxfk9mmjeg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ue--5y08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2rjtc3f0mlgxfk9mmjeg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For number 4, implement biometric authentication. If you didn't know, biometric authentication uses a user's unique biological characteristics to confirm their identity. Some examples of biometric authentication include: fingerprint, face recognition, eye recognition, and more. This project requires you to be proficient with AI and machine learning. You could extend this project by implementing biometric authentication in an attendance platform, fingerprint voting system, and more.&lt;/p&gt;

&lt;p&gt;Tutorials (if you get stuck):&lt;/p&gt;

&lt;p&gt;Python (face recognition): &lt;a href="https://youtu.be/535acCxjHCI"&gt;https://youtu.be/535acCxjHCI&lt;/a&gt;&lt;br&gt;
Node (fingerprint): &lt;a href="https://youtu.be/RLpeBil53bk?list=PLrUF5HNl_xIKDmlYxMXtnQywpbfByH07r"&gt;https://youtu.be/RLpeBil53bk?list=PLrUF5HNl_xIKDmlYxMXtnQywpbfByH07r&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-concurrent-data-structure" class="anchor"&gt;
  &lt;/a&gt;
  5. Concurrent Data Structure
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IFl-MxT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gx4j3693ws3qb0tzaobv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IFl-MxT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gx4j3693ws3qb0tzaobv.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this project, create a concurrent data structure. If you don't have any ideas on which concurrent data structure to make, I find looking at old research papers on concurrent data structures useful (usually they have some pseudocode). This project requires you to know what concurrency is and have a general knowledge of data structures.&lt;/p&gt;

&lt;p&gt;Tutorials (if you get stuck):&lt;/p&gt;

&lt;p&gt;Rust (concurrent hashmap): &lt;a href="https://youtu.be/yQFWmGaFBjk?list=PLqbS7AVVErFj824-6QgnK_Za1187rNfnl"&gt;https://youtu.be/yQFWmGaFBjk?list=PLqbS7AVVErFj824-6QgnK_Za1187rNfnl&lt;/a&gt;&lt;br&gt;
General: &lt;a href="http://www.cs.tau.ac.il/%7Eafek/ConcurrentDS-MS04.pdf"&gt;http://www.cs.tau.ac.il/~afek/ConcurrentDS-MS04.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-create-an-operating-system" class="anchor"&gt;
  &lt;/a&gt;
  6. Create an Operating System
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2txjRRz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0i79qz27hi90emlyxfbd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2txjRRz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0i79qz27hi90emlyxfbd.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is a fun one! This project is all about creating your own operating system from scratch. For this project, I would recommend that you use a performant language like Rust, C, or C++ as creating an OS can slow your computer down a little. You could make this operating as simple or as complex as you like. Some extra features you could include are: basic built-in apps like Notes, QuickTime Player, or a text editor, multitasking, and more. &lt;/p&gt;

&lt;p&gt;Tutorials (if you get stuck):&lt;/p&gt;

&lt;p&gt;Rust: &lt;a href="https://os.phil-opp.com/"&gt;https://os.phil-opp.com/&lt;/a&gt;&lt;br&gt;
C: &lt;a href="https://github.com/cfenollosa/os-tutorial"&gt;https://github.com/cfenollosa/os-tutorial&lt;/a&gt;&lt;br&gt;
C++: &lt;a href="https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System"&gt;https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-image-encryption-using-aes-algorithm" class="anchor"&gt;
  &lt;/a&gt;
  7. Image Encryption using AES Algorithm
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ux7RCXzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mjifayyrzeiy04a62py1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ux7RCXzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mjifayyrzeiy04a62py1.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have to admit, this one is pretty cool, I'll definitely be doing this one for my next project! In this project, create an image encryption tool using the AES algorithm. I found this blog post really helpful for understanding the AES algorithm: &lt;a href="https://www.tutorialspoint.com/cryptography/advanced_encryption_standard.htm"&gt;https://www.tutorialspoint.com/cryptography/advanced_encryption_standard.htm&lt;/a&gt;. You could extend this project by using your image encryption tool in some web applications like an Instagram clone. &lt;/p&gt;

&lt;p&gt;Tutorials (if you get stuck):&lt;/p&gt;

&lt;p&gt;General: &lt;a href="https://link.springer.com/article/10.1007/s11227-019-02878-7"&gt;https://link.springer.com/article/10.1007/s11227-019-02878-7&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-create-a-text-editor" class="anchor"&gt;
  &lt;/a&gt;
  8. Create a Text Editor
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V3yrNzO5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xp81dx07bo75famwgw56.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V3yrNzO5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xp81dx07bo75famwgw56.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this project, your goal is to create a fully functioning text editor. Some examples of text editors: sublime text, notepad++, and more. You could create a text editor which is mainly focusing on programming (syntax highlighting, keyboard shortcuts, etc) like sublime or just a regular notepad (more subtitle for beginners) like notepad++. &lt;/p&gt;

&lt;p&gt;Tutorials (if you get stuck):&lt;/p&gt;

&lt;p&gt;Rust: &lt;a href="https://www.philippflenker.com/hecto/"&gt;https://www.philippflenker.com/hecto/&lt;/a&gt;&lt;br&gt;
Java: &lt;a href="https://www.geeksforgeeks.org/java-swing-create-a-simple-text-editor/"&gt;https://www.geeksforgeeks.org/java-swing-create-a-simple-text-editor/&lt;/a&gt;&lt;br&gt;
C: &lt;a href="https://viewsourcecode.org/snaptoken/kilo/"&gt;https://viewsourcecode.org/snaptoken/kilo/&lt;/a&gt;&lt;br&gt;
Python: &lt;a href="https://www.codespeedy.com/create-a-text-editor-in-python/"&gt;https://www.codespeedy.com/create-a-text-editor-in-python/&lt;/a&gt;&lt;br&gt;
C#: &lt;a href="https://youtu.be/e_ychG719Fk"&gt;https://youtu.be/e_ychG719Fk&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-create-a-browser-engine" class="anchor"&gt;
  &lt;/a&gt;
  9. Create a Browser Engine
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tunkJCoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6qypjmmthflm15vyrr8j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tunkJCoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6qypjmmthflm15vyrr8j.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a fully functioning browser engine. Make this browser engine allow for HTML, CSS, and JS files. You could make this project as complex or as simple as you want. For this project, I would focus on the design aspect as that is a big factor when choosing which browser to choose.&lt;/p&gt;

&lt;p&gt;Tutorials (if you get stuck):&lt;/p&gt;

&lt;p&gt;Rust: &lt;a href="https://youtu.be/brhuVn91EdY?list=PLJbE2Yu2zumDD5vy2BuSHvFZU0a6RDmgb"&gt;https://youtu.be/brhuVn91EdY?list=PLJbE2Yu2zumDD5vy2BuSHvFZU0a6RDmgb&lt;/a&gt;&lt;br&gt;
Java: &lt;a href="https://youtu.be/anoPsxasIBE"&gt;https://youtu.be/anoPsxasIBE&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-create-a-cryptocurrency" class="anchor"&gt;
  &lt;/a&gt;
  10. Create a Cryptocurrency
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I1xls1l4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gmnq8q2a8ysj21pr2pi6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I1xls1l4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gmnq8q2a8ysj21pr2pi6.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this project, create a cryptocurrency. Some examples of cryptocurrencies include: Bitcoin, Ethereum, Dash, etc. Like all the previous projects, you choose how deep you want to go into this project. If you want to add more advanced features such as smart contracts, mining, and more.&lt;/p&gt;

&lt;p&gt;Tutorials (if you get stuck):&lt;/p&gt;

&lt;p&gt;Rust: &lt;a href="https://youtu.be/vJdT05zl6jk?list=PLwnSaD6BDfXL0RiKT_5nOIdxTxZWpPtAv"&gt;https://youtu.be/vJdT05zl6jk?list=PLwnSaD6BDfXL0RiKT_5nOIdxTxZWpPtAv&lt;/a&gt;&lt;br&gt;
Python: &lt;a href="https://www.freecodecamp.org/news/create-cryptocurrency-using-python/"&gt;https://www.freecodecamp.org/news/create-cryptocurrency-using-python/&lt;/a&gt;&lt;br&gt;
Elixir: &lt;a href="https://shyr.io/blog/writing-blockchain-elixir"&gt;https://shyr.io/blog/writing-blockchain-elixir&lt;/a&gt;&lt;br&gt;
Typescript: &lt;a href="https://lhartikk.github.io/"&gt;https://lhartikk.github.io/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;These are some pretty big projects! If you complete any of them, I would love to know how it went! Good luck if you want to tackle any of these projects! Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Henry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://buttondown.email/hb"&gt;📰 Newsletter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/henryboisdequin"&gt;🐱 GitHub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/henryboisdequin"&gt;🐦 Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>systems</category>
      <category>career</category>
      <category>c</category>
    </item>
    <item>
      <title>Back to Basics: Operators, Operators, Operators</title>
      <author>Alisa Bajramovic</author>
      <pubDate>Thu, 28 Jan 2021 00:14:09 +0000</pubDate>
      <link>https://dev.to/alisabaj/back-to-basics-operators-operators-operators-3l3h</link>
      <guid>https://dev.to/alisabaj/back-to-basics-operators-operators-operators-3l3h</guid>
      <description>&lt;p&gt;This series discusses the building blocks of JavaScript. Whether you're new to the language, you're preparing for a technical interview, or you're hoping to brush up on some key JS concepts, this series is for you.&lt;/p&gt;

&lt;p&gt;Today's post is about operators. In this post, I'll go over some of the most common operators you'll come across in JavaScript, but it's by no means an exhaustive list. At the bottom of this post, you can find a link to the MDN documentation, which has information on other kinds of JavaScript operators.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-an-operator"&gt;What is an operator?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assignment-operators"&gt;Assignment operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparison-operators"&gt;Comparison operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arithmetic-operators"&gt;Arithmetic operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logical-operators"&gt;Logical operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#string-operators"&gt;String operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ternary-conditional-operator"&gt;Ternary (conditional) operator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-operator" class="anchor"&gt;
  &lt;/a&gt;
  What is an operator?
&lt;/h2&gt;

&lt;p&gt;In JavaScript, an operator is a way to compare or assign values, or perform operations. There are many different types of operators.&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;binary&lt;/em&gt; operators, &lt;em&gt;unary&lt;/em&gt; operators, and a &lt;em&gt;ternary&lt;/em&gt; operator in JavaScript. "Binary" means that there are &lt;strong&gt;two&lt;/strong&gt; values, or &lt;em&gt;operands&lt;/em&gt;, involved, with one coming before the operator, and one coming after the operator. An example of a binary operator is &lt;code&gt;1 + 2&lt;/code&gt;. In this example, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; are the operands, and &lt;code&gt;+&lt;/code&gt; is the operator.&lt;/p&gt;

&lt;p&gt;A "unary" operator means that there is only &lt;strong&gt;one&lt;/strong&gt; operand. The operand is either before the operator, or after the operator. An example of a unary operator is &lt;code&gt;x++&lt;/code&gt; (don't worry if you're unfamiliar with this syntax, we'll talk about below).&lt;/p&gt;

&lt;p&gt;The "ternary" operator in JavaScript involves &lt;strong&gt;three&lt;/strong&gt; operands. It's used as a shortened version of an &lt;code&gt;if...else&lt;/code&gt; statement, and is therefore also known as a "conditional" operator. An example of a ternary operator is &lt;code&gt;num &amp;gt;= 0 ? "Positive" : "Negative"&lt;/code&gt;. In this example, the three operands are &lt;code&gt;num &amp;gt;= 0&lt;/code&gt;, &lt;code&gt;"Positive"&lt;/code&gt;, and &lt;code&gt;"Negative"&lt;/code&gt;, and the operators that separate them are &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#assignment-operators" class="anchor"&gt;
  &lt;/a&gt;
  Assignment operators
&lt;/h2&gt;

&lt;p&gt;An &lt;strong&gt;assignment&lt;/strong&gt; operator is a binary operator. It assigns a value to the left operand based on the value of the right operand.&lt;/p&gt;

&lt;p&gt;The most common assignment operator is &lt;code&gt;=&lt;/code&gt;, as in &lt;code&gt;a = b&lt;/code&gt;. In this example, &lt;code&gt;a&lt;/code&gt; is the left operand, and it's assigned the value of &lt;code&gt;b&lt;/code&gt;, which is the right operand.&lt;/p&gt;

&lt;p&gt;There are also &lt;em&gt;compound assignment operators&lt;/em&gt;. Compound assignment operators typically combine assignment and arithmetic operators in a shortened version. For example, &lt;code&gt;a += b&lt;/code&gt; is a shortened version of &lt;code&gt;a = a + b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below is a table of some of the most common assignment operators:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator name&lt;/th&gt;
&lt;th&gt;Shortened operator&lt;/th&gt;
&lt;th&gt;Longform version&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Assignment operator&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;td&gt;a = b&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x = 4;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Addition operator&lt;/td&gt;
&lt;td&gt;a += b&lt;/td&gt;
&lt;td&gt;a = a + b&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x += 4;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subtraction assignment&lt;/td&gt;
&lt;td&gt;a -= b&lt;/td&gt;
&lt;td&gt;a = a - b&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x -= 4;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiplication assignment&lt;/td&gt;
&lt;td&gt;a *= b&lt;/td&gt;
&lt;td&gt;a = a * b&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x *= 4;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Division assignment&lt;/td&gt;
&lt;td&gt;a /= b&lt;/td&gt;
&lt;td&gt;a = a / b&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x /= 4;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remainder assignment&lt;/td&gt;
&lt;td&gt;a %= b&lt;/td&gt;
&lt;td&gt;a = a % b&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x %= 4;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Let's see some examples of the above operators:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// x = 10 + 3 -&amp;gt; x = 13&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// y = 8 - 3 -&amp;gt; y = 5&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// z = 3 * 3 -&amp;gt; z = 9&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// m = 6 / 3 -&amp;gt; m = 2&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// n = 7 % 3 -&amp;gt; n = 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comparison-operators" class="anchor"&gt;
  &lt;/a&gt;
  Comparison operators
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;comparison&lt;/strong&gt; operator is a binary operator. It compares the two operands, and returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending on the comparison.&lt;/p&gt;

&lt;p&gt;One comparison operator is less than, or &lt;code&gt;&amp;lt;&lt;/code&gt;. For example, &lt;code&gt;1 &amp;lt; 2&lt;/code&gt; would return &lt;code&gt;true&lt;/code&gt;, because &lt;code&gt;1&lt;/code&gt; is less than &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When comparing two values of different types, JavaScript does something called &lt;strong&gt;type conversion&lt;/strong&gt;. This means that if you're comparing a string with an integer, for example, JavaScript will try to convert the string into a number so that the values can actually be compared. There are two comparison operators that &lt;strong&gt;don't&lt;/strong&gt; do type conversion: strict equal, &lt;code&gt;===&lt;/code&gt;, and strict not equal, &lt;code&gt;!==&lt;/code&gt;. Strict equal and strict not equal do not convert values of different types before performing the operation.&lt;/p&gt;

&lt;p&gt;Below is a table of comparison operators in JavaScript:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator name&lt;/th&gt;
&lt;th&gt;Operator symbol&lt;/th&gt;
&lt;th&gt;Operator function&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Equal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns &lt;code&gt;true&lt;/code&gt; if the operands are equal, and &lt;code&gt;false&lt;/code&gt; if the operands are not equal.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;4 == "4"&lt;/code&gt; (returns true)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Not equal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns &lt;code&gt;true&lt;/code&gt; if the operands are not equal, and &lt;code&gt;false&lt;/code&gt; if the operands are equal.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;4 != "5"&lt;/code&gt; (returns true)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Strict equal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;===&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns &lt;code&gt;true&lt;/code&gt; if the operands are of the same type and are equal, and &lt;code&gt;false&lt;/code&gt; if the operands are the same type and are not equal or are different types.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;4 === 4&lt;/code&gt; (returns true)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Strict not equal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!==&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns &lt;code&gt;true&lt;/code&gt; if the operands are the same type but are not equal or are different types, and &lt;code&gt;false&lt;/code&gt; if the operands are of the same type and are equal.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;4 !== "4"&lt;/code&gt; (returns true)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Greater than&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns &lt;code&gt;true&lt;/code&gt; if the left operand is greater than the right operand, and &lt;code&gt;false&lt;/code&gt; if the left operand is less than or equal to the right operand.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;4 &amp;gt; 3&lt;/code&gt; (returns true)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Greater than or equal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns &lt;code&gt;true&lt;/code&gt; if the left operand is greater than or equal to the right operand, and &lt;code&gt;false&lt;/code&gt; if the left operand is less than the right operand.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;4 &amp;gt;= "4"&lt;/code&gt; (returns true)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Less than&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns &lt;code&gt;true&lt;/code&gt; if the left operand is less than the right operand, and &lt;code&gt;false&lt;/code&gt; if the left operand is greater than or equal to the right operand.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;4 &amp;lt; "5"&lt;/code&gt; (returns true)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Less than or equal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns &lt;code&gt;true&lt;/code&gt; if the left operand is less than or equal to the right operand, and &lt;code&gt;false&lt;/code&gt; if the left operand is greater than the right operand.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;4 &amp;lt;= 7&lt;/code&gt; (returns true)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Let's see some examples of the above operators:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 5 == "5" -&amp;gt; true&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 5 != 2 -&amp;gt; true&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 5 === 7 -&amp;gt; false&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 5 !== "5" -&amp;gt; true&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 5 &amp;gt; 2 -&amp;gt; true&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 5 &amp;gt;= 7 -&amp;gt; false&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 5 &amp;lt; "6" -&amp;gt; true&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 5 &amp;lt;= "5" -&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arithmetic-operators" class="anchor"&gt;
  &lt;/a&gt;
  Arithmetic operators
&lt;/h2&gt;

&lt;p&gt;An &lt;strong&gt;arithmetic&lt;/strong&gt; operator can be a binary or unary operator. As a binary operator, it takes two numerical values as the operands, performs an arithmetic operation, and returns a numerical value. As a unary operator, it takes one numerical value, performs an operation, and returns a numerical value.&lt;/p&gt;

&lt;p&gt;One arithmetic operator is the plus sign, &lt;code&gt;+&lt;/code&gt;, which is used to add two numbers. For example, &lt;code&gt;4 + 6&lt;/code&gt; would return &lt;code&gt;10&lt;/code&gt;. Below is a table of some of the arithmetic operators in JavaScript:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator name&lt;/th&gt;
&lt;th&gt;Operator symbol&lt;/th&gt;
&lt;th&gt;Operator function&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Addition&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Binary operator. Returns the result of adding two operands.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;4 + 6&lt;/code&gt; returns 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subtraction&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Binary operator. Returns the result of subtracting one operand from another.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;5 - 2&lt;/code&gt; returns 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiplication&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Binary operator. Returns the result of multiplying two operands.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;3 * 4&lt;/code&gt; returns 12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Division&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Binary operator. Returns the result of dividing one operand by another.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;9 / 3&lt;/code&gt; returns 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remainder&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Binary operator. Returns the integer remainder of dividing one operand by another.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;10 % 3&lt;/code&gt; returns 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Increment&lt;/td&gt;
&lt;td&gt;&lt;code&gt;++&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unary operator. Adds &lt;code&gt;1&lt;/code&gt; to the operand. If it comes before the operand (&lt;code&gt;++z&lt;/code&gt;), it returns the value of the operand &lt;em&gt;after&lt;/em&gt; adding &lt;code&gt;1&lt;/code&gt;. If it comes after the operand (&lt;code&gt;z++&lt;/code&gt;), it returns the value of the operand &lt;em&gt;before&lt;/em&gt; adding &lt;code&gt;1&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;If &lt;code&gt;z = 4&lt;/code&gt;, &lt;code&gt;++z&lt;/code&gt; returns &lt;code&gt;5&lt;/code&gt;, and &lt;code&gt;z++&lt;/code&gt; returns &lt;code&gt;4&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Decrement&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;Unary operator. Subtracts &lt;code&gt;1&lt;/code&gt; from the operand. If it comes before the operand (&lt;code&gt;--z&lt;/code&gt;), it returns the value of the operand &lt;em&gt;after&lt;/em&gt; subtracting &lt;code&gt;1&lt;/code&gt;. If it comes after the operand (&lt;code&gt;z--&lt;/code&gt;), it returns the value of the operand &lt;em&gt;before&lt;/em&gt; subtracting &lt;code&gt;1&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;If &lt;code&gt;z = 4&lt;/code&gt;, &lt;code&gt;--z&lt;/code&gt; returns &lt;code&gt;3&lt;/code&gt;, and &lt;code&gt;z--&lt;/code&gt; returns &lt;code&gt;4&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Exponentiation&lt;/td&gt;
&lt;td&gt;&lt;code&gt;**&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Binary operator. Returns the result of raising one operand to the power of the other operand.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;5 ** 2&lt;/code&gt; returns 25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Let's see some examples of the above operators:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3 + 5 -&amp;gt; 8&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5 - 3 -&amp;gt; 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3 * 6 -&amp;gt; 18&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6 / 3 -&amp;gt; 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5 % 3 -&amp;gt; 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5 * 5 * 5 -&amp;gt; 125&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#logical-operators" class="anchor"&gt;
  &lt;/a&gt;
  Logical operators
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;logical&lt;/strong&gt; operator can be a binary operator or a unary operator. As a binary operator, it typically takes two Boolean values, evaluates them, and returns a Boolean value.&lt;/p&gt;

&lt;p&gt;The unary logical operator in JavaScript is the logical NOT. It takes one operand and evaluates if it can be converted to the Boolean value &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below is a table of logical operators in JavaScript:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator name&lt;/th&gt;
&lt;th&gt;Operator symbol&lt;/th&gt;
&lt;th&gt;Operator function&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Logical AND&lt;/td&gt;
&lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td&gt;Returns &lt;code&gt;true&lt;/code&gt; if both operands are &lt;code&gt;true&lt;/code&gt;, and returns &lt;code&gt;false&lt;/code&gt; if at least one of the operands is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;true &amp;amp;&amp;amp; true&lt;/code&gt; (returns true) &lt;code&gt;true &amp;amp;&amp;amp; false&lt;/code&gt; (returns false)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical OR&lt;/td&gt;
&lt;td&gt;||&lt;/td&gt;
&lt;td&gt;Returns &lt;code&gt;true&lt;/code&gt; if at least one operand is &lt;code&gt;true&lt;/code&gt;, and returns &lt;code&gt;false&lt;/code&gt; if both operands are &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;true&lt;/code&gt; || &lt;code&gt;false&lt;/code&gt; (returns true) &lt;code&gt;false&lt;/code&gt; || &lt;code&gt;false&lt;/code&gt; (returns false)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical NOT&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;Returns &lt;code&gt;false&lt;/code&gt; if the operand can be converted to &lt;code&gt;true&lt;/code&gt;, and returns &lt;code&gt;true&lt;/code&gt; if the operand cannot be converted to &lt;code&gt;true&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;!true&lt;/code&gt; (returns false) &lt;code&gt;!false&lt;/code&gt; (returns true)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Let's see some examples of the above operators:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#string-operators" class="anchor"&gt;
  &lt;/a&gt;
  String operators
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;string&lt;/strong&gt; operator is a binary operator. It takes two strings and combines them into a single string using &lt;code&gt;+&lt;/code&gt;, which in this case is called the &lt;em&gt;concatenation operator&lt;/em&gt;. String &lt;em&gt;concatenation&lt;/em&gt; means combining two string values together.&lt;/p&gt;

&lt;p&gt;An example of a string operator is &lt;code&gt;console.log("Happy " + "birthday")&lt;/code&gt;, which console logs the string &lt;code&gt;"Happy birthday"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is also a shortened version of the string operator, which is &lt;code&gt;+=&lt;/code&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;string1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;birth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;string2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;day&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string1&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;string2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "birthday"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ternary-conditional-operator" class="anchor"&gt;
  &lt;/a&gt;
  Ternary (conditional) operator
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;conditional&lt;/strong&gt; operator, or ternary operator, is used with three operands. It's used to evaluate if a condition is true, and then returns one of two values depending on that.&lt;/p&gt;

&lt;p&gt;The ternary operator is structured like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;condition ? expressionIfTrue : expressionIfFalse
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ternary operators are discussed at length &lt;a href="https://dev.to/alisabaj/back-to-basics-conditional-statements-in-javascript-2feo#the-ternary-operator"&gt;in this post&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;This post just went over some of the more common operators you'll use and come across in JavaScript. There are many more operators, including bitwise operators and relational operators, and I encourage you to learn more about them in the MDN documentation &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>operators</category>
      <category>beginners</category>
      <category>technicalinterviews</category>
    </item>
    <item>
      <title>Problem Solving Patterns</title>
      <author>Code_Regina</author>
      <pubDate>Wed, 27 Jan 2021 22:37:43 +0000</pubDate>
      <link>https://dev.to/code_regina/problem-solving-patterns-j4k</link>
      <guid>https://dev.to/code_regina/problem-solving-patterns-j4k</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                   -Problem Solving Patterns
                   -Frequency Counter Patterns
                   -Multiple Pointers Patterns 
                   -Sliding Window Pattern
                   -Divide and Conquer Pattern 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#problem-solving-patterns" class="anchor"&gt;
  &lt;/a&gt;
  Problem Solving Patterns
&lt;/h3&gt;

&lt;p&gt;These are some common patterns to solving problems with code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Frequency Counter 
Multiple Pointers
Sliding Window 
Divide and Conquer 
Dynamic Programming 
Greedy Algorithms
Backtracking
and many many more. 



&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are many different approaches to solving common problems. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frequency-counter-patterns" class="anchor"&gt;
  &lt;/a&gt;
  Frequency Counter Patterns
&lt;/h3&gt;

&lt;p&gt;A frequency counter uses objects or sets to collect values and frequencies. May often avoid the need for nested loops operations with array and strings. &lt;/p&gt;

&lt;p&gt;Frequency Counter Problem &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#write-a-function-called-same-which-accepts-two-arrays-the-function-should-return-true-if-every-value-in-the-array-has-its-corresponding-value-squared-in-the-second-array-the-frequency-of-values-must-be-the-same" class="anchor"&gt;
  &lt;/a&gt;
  Write a function called same, which accepts two arrays. The function should return true if every value in the array has its corresponding value squared in the second array. The frequency of values must be the same.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;same&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;frequencyCounter1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frequencyCounter1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;frequencyCounter2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frequencyCounter2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;        
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frequencyCounter1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frequencyCounter2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter2&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frequencyCounter2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;same&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Anagram Problem &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#given-two-strings-write-a-function-to-determine-if-the-second-string-is-an-anagram-of-the-first" class="anchor"&gt;
  &lt;/a&gt;
  Given two strings, write a function to determine if the second string is an anagram of the first.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function validAnagram(first, second) {
  if (first.length !== second.length) {
    return false;
  }

  const lookup = {};

  for (let i = 0; i &amp;lt; first.length; i++) {
    let letter = first[i];
    // if letter exists, increment, otherwise set to 1
    lookup[letter] ? lookup[letter] += 1 : lookup[letter] = 1;
  }
  console.log(lookup)

  for (let i = 0; i &amp;lt; second.length; i++) {
    let letter = second[i];
    // can't find letter or letter is zero then it's not an anagram
    if (!lookup[letter]) {
      return false;
    } else {
      lookup[letter] -= 1;
    }
  }

  return true;
}

// {a: 0, n: 0, g: 0, r: 0, m: 0,s:1}
validAnagram('anagrams', 'nagaramm')

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#multiple-pointers-patterns" class="anchor"&gt;
  &lt;/a&gt;
  Multiple Pointers Patterns
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#creating-pointers-or-values-that-correspond-to-an-index-or-position-and-move-towards-the-beginning-end-or-middle-based-on-certain-condition" class="anchor"&gt;
  &lt;/a&gt;
  Creating pointers or values that correspond to an index or position and move towards the beginning, end, or middle based on certain condition.
&lt;/h4&gt;

&lt;p&gt;Multiple Pointers is very efficient for solving problems with minimal space complexity as well. &lt;/p&gt;

&lt;p&gt;Sum Zero Problem&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sumZero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;sumZero&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Count Unique Values Problem &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#implement-a-function-called-countuniquevalues-which-accepts-a-sorted-array-and-counts-the-unique-values-in-the-array-there-can-be-negative-numbers-in-the-array-but-it-will-always-be-sorted" class="anchor"&gt;
  &lt;/a&gt;
  Implement a function called countUniqueValues, which accepts a sorted array, and counts the unique values in the array. There can be negative numbers in the array, but it will always be sorted.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;countUniqueValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;countUniqueValues&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sliding-window-pattern" class="anchor"&gt;
  &lt;/a&gt;
  Sliding Window Pattern
&lt;/h3&gt;

&lt;p&gt;This pattern involves creating a window which can be either an array or number from one position to another. Depending on a certain condition, the window either increases or closes and a new window is created. &lt;/p&gt;

&lt;p&gt;Very useful for keeping track of a subset of data in an array/string. &lt;/p&gt;

&lt;p&gt;Max Subarray Sum Problem&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;maxSubarraySum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;maxSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tempSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;maxSum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;tempSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;maxSum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tempSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tempSum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;maxSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxSum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tempSum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;maxSum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;maxSubarraySum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#write-a-function-called-maxsubarraysum-which-accepts-an-array-of-integers-and-a-number-called-n-the-function-should-calculate-the-maximum-sum-of-n-consecutive-elements-in-the-array" class="anchor"&gt;
  &lt;/a&gt;
  Write a function called maxSubarraySum which accepts an array of integers and a number called n. The function should calculate the maximum sum of n consecutive elements in the array.
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#divide-and-conquer-pattern" class="anchor"&gt;
  &lt;/a&gt;
  Divide and Conquer Pattern
&lt;/h3&gt;

&lt;p&gt;This pattern involves dividing a data set into smaller chunks and then repeating a process with a subset of data. &lt;/p&gt;

&lt;p&gt;This pattern can decrease time complexity. &lt;/p&gt;

&lt;p&gt;Divide and Conquer Problem &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#given-a-sorted-array-of-integers-write-a-function-called-search-that-accepts-a-value-and-returns-the-index-where-the-value-passed-to-the-function-is-located-if-the-value-if-not-found-return-1" class="anchor"&gt;
  &lt;/a&gt;
  Given a sorted array of integers, write a function called search, that accepts a value and returns the index where the value passed to the function is located. If the value if not found, return -1.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

 &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A letter for those who want to learn JavaScript</title>
      <author>Leonardo Maldonado</author>
      <pubDate>Wed, 27 Jan 2021 17:59:04 +0000</pubDate>
      <link>https://dev.to/leonardomso/a-letter-for-those-who-want-to-learn-javascript-5ad0</link>
      <guid>https://dev.to/leonardomso/a-letter-for-those-who-want-to-learn-javascript-5ad0</guid>
      <description>&lt;p&gt;Yesterday I received an email from a young developer who told me that was having difficulties learning JavaScript. He told me that he looked at some of my open source projects and found them pretty interesting and was asking for some advice about how he could learn JavaScript.&lt;/p&gt;

&lt;p&gt;I'm not the best JavaScript developer in the world, in fact I am really distant from where I want to be in a few years from now, but I decided to help him.&lt;/p&gt;

&lt;p&gt;I started to write the email to him right away and after almost 1 hour writing, I wrote this mini-blog post that you guys will read. I decided to post here because I think it might have helped other developers as well how are starting to learn JavaScript.&lt;/p&gt;

&lt;p&gt;Hope it might be useful for those who are starting to learn JavaScript. Feel free to share in case you guys like it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hi Developer,&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I appreciate that you liked my open source contributions. I think I can help you with a few tips that helped me to get started with JavaScript:&lt;/p&gt;

&lt;p&gt;JavaScript is the best programming language to get started right now if you don't have any programming background and want to learn it. The JavaScript ecosystem has matured over the years and new libraries are created every day, to solve an enormous range of different problems. &lt;/p&gt;

&lt;p&gt;I think this piece of advice can help not only you but many others who are starting to learn JavaScript. &lt;/p&gt;

&lt;p&gt;Here are a few things that I learned throughout the years and I think can help you: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn the basics.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You need to start learning JavaScript by the basics, after that you can start to learn and build more complex things. Your goal here is to learn JavaScript, so start to search for content for JavaScript beginners, find what works for you. Take a few courses. Read articles. Watch talk videos. Listen to podcasts. There are a lot of different ways that you can learn it, you need to find the way that works for you. Don't compare yourself with developers that are in the field for a long time, you will get frustrated. Compare yourself to who you were yesterday as a developer, try to learn new things every day. A few years from now you will see how long you have improved and mastered JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn in public.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This is the fastest way to learn, you will not only learn but also build a network while helping others as well. You might have been experiencing a problem that another person might have been experiencing as well, you might provide value to them showing how you solved or how to solve it. Start to write articles, you can write about the most basic JavaScript concept, you will not only help others but learn in the process, that's a powerful way to learn in my opinion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build different projects.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I could easily say here to you, after have you learned JavaScript, to start to learn React. That would be unfair. You want to learn JavaScript but don't know exactly which way as a developer you're going to follow it, there are a lot of different ways that you could go from here. That's why you need to build a lot of different projects and work with a range of different JavaScript technologies. Build a REST API, learn how APIs work, and how to build using different approaches. Create a simple calculator using different projects such as React and Vue, learn what problems each one of them solves. Learn and work with different types of databases, know the difference between SQL and NoSQL databases. Build different things. You'll find yourself along the way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contribute to projects that you like.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open source is the most powerful thing for a developer. You will work with different people from across the globe, create a network, solve people's problems, will help developers who want to start to contribute to that project, etc. Contribute to different projects that you like or that you use daily. You don't need to create the most complex thing for that project, you can easily start with a simple documentation suggestion. Try to mess a little bit with the code, read how the code works and how the project works under the hood. Open source contribution brings value not only for you who are contributing to the project but for people and companies who will use your code in the future to scale applications for millions of users.&lt;/p&gt;

&lt;p&gt;These are the pieces of advice that I can give to you. You need to keep grinding and learning new things every day. JavaScript, like any other programming language, can be very hard for those who are not determined to learn it the right way.&lt;/p&gt;

&lt;p&gt;Wish you success and hope you can learn JavaScript and become and fantastic developer.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Leonardo&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hope you enjoyed this content, follow me on &lt;a href="https://twitter.com/leonardomso"&gt;Twitter&lt;/a&gt; and tell me which piece of advice to you have for JavaScript beginners. You will help me a lot by liking and sharing this post with your friends, it will encourage me to make more content like this one 🙏&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Geo-Distributed Data Lakes Explained (By a Non-Developer)</title>
      <author>Kaylan Stock</author>
      <pubDate>Wed, 27 Jan 2021 17:57:08 +0000</pubDate>
      <link>https://dev.to/harperdb/geo-distributed-data-lakes-explained-by-a-non-developer-m68</link>
      <guid>https://dev.to/harperdb/geo-distributed-data-lakes-explained-by-a-non-developer-m68</guid>
      <description>&lt;p&gt;Happy 2021! This week’s term is a mouthful, but don’t let the long name deter you. It’s a pretty interesting topic and I think you will agree after finishing this breakdown. There is a lot to say about how awesome it is to combine the flexibility of a data lake with the power of a distributed architecture, but I’ll get more into the benefits of both as a joint solution later. To start, I want to look at geo-distributed data lakes in two parts before we marry them together, for my non-developer brain that made the most sense! No time to waste, let’s kick things off with the one and only… data lakes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-a-data-lake-not-warehouse" class="anchor"&gt;
  &lt;/a&gt;
  It’s a Data LAKE, Not Warehouse!
&lt;/h3&gt;

&lt;p&gt;It shouldn’t be a shock to the system to point out that we are living in a data-driven world going into 2021. Because of this, “data lakes” are a fitting term for the amount of data companies are collecting. In my opinion, we could probably start calling them data oceans, expansive and seemingly never-ending. &lt;a href="https://aws.amazon.com/big-data/datalakes-and-analytics/what-is-a-data-lake/"&gt;So what is a data lake exactly?&lt;/a&gt; Think of all your data as the water and your repository as the lake that holds that water. Unstructured data or “water” comes from one source and your structured data/water comes from another. You can use any of the water coming from any number of water sources (i.e. multiple structured and unstructured data sources) to build out visualizations, real-time analytics, or even machine learning models. So while your water is flowing in from rivers, creeks, and mountain runoffs, you can drink any of that water and it will keep you hydrated. &lt;/p&gt;

&lt;p&gt;Data lakes can be on-premise or hosted in the cloud, and I think my favorite thing about data lakes is that the natural or raw form of the data that is stored in a lake is &lt;a href="https://en.wikipedia.org/wiki/Data_lake"&gt;usually called an “object blob.”&lt;/a&gt; What is the first thing you think of when you hear the word blob? It’s such a great word. So thanks to object blobs in data lakes, data management becomes &lt;a href="https://www.guru99.com/data-lake-architecture.html"&gt;more cost-effective&lt;/a&gt; than other solutions when it comes to storing historical data because it allows you to store both relational and non-relational data. &lt;a href="https://www.forbes.com/sites/bernardmarr/2017/07/24/what-is-data-democratization-a-super-simple-explanation-and-the-key-pros-and-cons/?sh=3788c54e6013"&gt;Data lakes democratize data&lt;/a&gt;, which simply means that everyone has access to the data instead of having gatekeepers or admins that decide who has access. Data lakes also provide folks with an easy way to understand said data that is shared in the data repository. I can imagine at large companies with many employees and departments, a data lake makes company collaboration ten times easier. &lt;/p&gt;

&lt;p&gt;There is a difference between a data lake and a data warehouse, which should be mentioned before we move on.  &lt;a href="https://aws.amazon.com/big-data/datalakes-and-analytics/what-is-a-data-lake/"&gt;According to AWS’s website&lt;/a&gt;, a data warehouse is a repository database optimized for specific data used to analyze relational data coming from transactional systems and line of business applications. So that means data warehouses do not handle unstructured data or are not optimized to handle it. So I say, in 2021 with hundreds of data sources, all hail the data lake! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#geodistributed-data-all-over-the-world" class="anchor"&gt;
  &lt;/a&gt;
  Geo-Distributed: Data All Over the World
&lt;/h3&gt;

&lt;p&gt;In general, geo-distributed is used in reference to data storage, websites, applications, containers, etc. For the sake of this article, we will focus on geo-distributed data storage. A one-sentence description of geo-distributed databases and storage would tell you that it means a &lt;a href="https://www.databasejournal.com/sqletc/the-guiding-principles-for-cloud-scale-geo-distributed-databases.html"&gt;database technology deployed&lt;/a&gt; across more than one geographical location without performance delays. &lt;a href="https://dzone.com/articles/9-techniques-to-build-cloud-native-geo-distributed"&gt;Some might say&lt;/a&gt; that geo-distributed data storage can come in the form of zone, region, or even multi-cloud.  &lt;/p&gt;

&lt;p&gt;Multi or Hybrid cloud is an important architecture in this case because it's a powerful and cost-saving example of geo-distributed. &lt;a href="https://harperdb.io/blog/hybrid-cloud-a-perfect-blend/"&gt;To quote our very own CTO&lt;/a&gt; &lt;a href="https://dev.to/kylebernhardy"&gt;Kyle&lt;/a&gt; “Hybrid cloud is the peanut butter in your chocolate, it can be an intermixing of public cloud services, but is more typically a blend of private cloud (or on-premise) with public.” When working with hybrid cloud, you are using multiple local "edge" nodes closer to the end-user, instead of large centralized data centers, hence to implement hybrid cloud you are using a geo-distributed data storage architecture. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tutorialspoint.com/distributed_dbms/distributed_dbms_databases.htm"&gt;Geo-distributed functionality&lt;/a&gt; is great in the sense that with the increased &lt;a href="https://www.techopedia.com/definition/18707/data-redundancy#:~:text=Data%20redundancy%20is%20a%20condition,multiple%20software%20environments%20or%20platforms."&gt;redundancy&lt;/a&gt;, you don’t need to worry as much about one data center, cloud instance, or on-premise site going down. A fail in one location isn’t the end all be all for your team, data is gold after-all. Global performance is improved because queries are distributed across many different servers in parallel, and users are able to hit a database that is physically closer to them, ultimately reducing latency (or if you want to be fancy you can call it &lt;a href="https://www.geeksforgeeks.org/advantages-of-distributed-database/"&gt;“interquery and intraquery parallelism”&lt;/a&gt;). The user experience is also better when data storage is distributed because of the rapid query times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mix-them-together-hello-geodistributed-data-lake" class="anchor"&gt;
  &lt;/a&gt;
  Mix Them Together: Hello Geo-Distributed Data Lake!
&lt;/h3&gt;

&lt;p&gt;So we have all the ingredients, now let’s bake this data cake! From here it’s pretty easy to understand that a geo-distributed data lake is a type of geo-distributed data storage. A data lake distributed across multiple locations….kinda sounds like the data version of an ocean! As a powerful way to collaborate efficiently with large dispersed teams, geo-distributed data lakes make big data analysis easy and user-friendly. Companies spread across the country or even the world can easily access company data and know that the data they are looking at is the most up to date version, which comes in handy, especially when dealing with real-time mission-critical analytics. Here's a nice bulleted list for all my dev friends on the &lt;a href="https://www.educba.com/distributed-database-system/"&gt;advantages of a distributed data lake&lt;/a&gt; (hint: I touched on some of them when talking about geo-distributed data storage):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Collaboration and Synchronization&lt;/strong&gt;- These two things can become streamlined and done in real-time when you have multiple copies of a database out in the world. Local teams can have the data most important to them running nearby, making it easy to pull the most recent updates. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data Redundancy and Recovery&lt;/strong&gt;- Similar to when we talk about general-purpose distributed data storage, you don’t have to worry about network, data center, or any other outages or downtime. You have backup from your other replicated data lakes there to give you peace of mind.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt;- Instead of one large data lake, you now have many smaller data lakes spread across your network (also known as load distribution). You aren’t hammering one system all at once.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Agile Development and Data Analytics&lt;/strong&gt;- Distributed data lake means you can use the same data across different applications along with improved collaboration and sync, as listed above. Your team can work in a smarter and faster fashion.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scalability&lt;/strong&gt;- It's easier to scale your data collection when you not only have the flexibility of a data lake that can collect both unstructured and structured data, but you also have access to multiple copies of that data lake spread across different locations. With a distributed architecture, you can easily add additional data lake nodes as demand increases. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cost Savings&lt;/strong&gt;- If you are using the &lt;a href="https://dev.to/margo_hdb/enhance-your-hybrid-cloud-strategy-with-a-new-edge-36c4"&gt;hybrid cloud&lt;/a&gt; model that we discussed earlier, then you can significantly cut the costs of your data lake. This is because you are not exclusively locked into cloud providers and their cloud hosting costs, instead, you using localized edge nodes that are maintained by your organization or a third-party.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#use-cases-amp-tools-for-geodistributed-data-lakes" class="anchor"&gt;
  &lt;/a&gt;
  Use Cases &amp;amp; Tools for Geo-Distributed Data Lakes
&lt;/h3&gt;

&lt;p&gt;With so many benefits to geo-distributed data lakes, use cases and tools that work in the geo-distributed data lake space are not hard to find. Here are some of my favorite ideas for implementing distributed data lakes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Internet of Things (IoT)&lt;/strong&gt;- A no-brainer. IoT data can be a pain in the…. and a lot of IoT use cases require real-time or near real-time analytics. When you combine the ability to pull in large amounts of structured and unstructured data with the replication of a geo-distributed architecture, you get the perfect IoT tool. Now your IoT strategy and implementation won’t get bogged down by how to store the massive amounts of data coming in from many devices across many locations. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Extract Transform Load (ETL)&lt;/strong&gt;- Data lakes are famous for being an excellent route when working in ETL and this is because you can now &lt;a href="https://www.sqlchick.com/entries/2016/7/31/data-lake-use-cases-and-planning"&gt;extract and load your data&lt;/a&gt; into your data lake and transform it whenever you need. Imagine the power of this strategy being multiplied across different locations.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Enterprise and Big Data&lt;/strong&gt;d- This makes total sense when you consider the benefits above, including agile development, data analytics, scalability, collaboration, and data sync. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Advanced and Real-Time Analytics&lt;/strong&gt;- When you aren’t worried about the operational side of your data storage, you can focus on the juicy part of data collection, analyzing, and putting your data to work! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these use cases in mind let's talk tools. &lt;a href="https://harperdb.io/developers/get-started/"&gt;HarperDB&lt;/a&gt; works for all of the above use cases because it can ingest both structured and unstructured data. That allows it to act as a data lake repository. THEN add in the advanced &lt;a href="https://harperdb.io/developers/documentation/clustering/"&gt;clustering and replication&lt;/a&gt; capabilities, followed up with &lt;a href="https://harperdb.io/product/#sql"&gt;SQL capabilities&lt;/a&gt; for analytical jobs and you are not only working with a geo-distributed data lake, but you can also use HarperDB simultaneously as a data warehouse! You can spin up HarperDB on any computing device, from large scale servers down to micro-computing devices like the Raspberry Pi.  Other great tools to check out for geo-distributed data lakes include &lt;a href="https://www.snowflake.com/workloads/data-lake/"&gt;Snowflake&lt;/a&gt;, &lt;a href="https://www.cloudera.com/products/sdx/data-lake-service.html"&gt;Cloudera&lt;/a&gt;, and &lt;a href="https://databricks.com/product/delta-lake-on-databricks"&gt;Databricks&lt;/a&gt;, which I have linked to their Data Lake info pages if you are curious about how they all fit into the landscape. “Distributed” is becoming quite the buzzword for good reason, and it will be exciting to see how that space transforms as more and more teams adopt a distributed architecture. &lt;/p&gt;

&lt;p&gt;Combining the flexibility of data lakes with the power of a distributed architecture is a no brainer in my opinion. Data lakes provide an easy way to ingest all types of data, store large amounts of historical data, and then use only the data that you need when you need it. Geo-distributed enables improved performance, cost savings, scalability, and better safety nets for the ever-growing data needs of modern-day enterprises and startups alike. As always, let me know what I missed and shoot me your ideas for my next “Explained By” blog. 👋 &lt;/p&gt;

</description>
      <category>database</category>
      <category>distributedsystems</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build a Random Hex Color Generator with Vanilla JavaScript</title>
      <author>Tolu Agboola</author>
      <pubDate>Wed, 27 Jan 2021 17:47:06 +0000</pubDate>
      <link>https://dev.to/toluagboola/build-a-random-hex-color-generator-with-vanilla-javascript-3382</link>
      <guid>https://dev.to/toluagboola/build-a-random-hex-color-generator-with-vanilla-javascript-3382</guid>
      <description>&lt;p&gt;In this tutorial, I will be showing how I built a &lt;a href="https://tolu-color-picker.surge.sh/"&gt;hex color generator&lt;/a&gt;. It is a simple page that generates a random hexadecimal color code when you click a button and updates the background of the page to correspond with the generated color code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-markup" class="anchor"&gt;
  &lt;/a&gt;
  The markup
&lt;/h2&gt;

&lt;p&gt;I decided to make the page very simple, giving it only a heading containing a span tag that will display the value of the current background color, and a button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hex Color: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hexValue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;#ffffff&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click to generate new color&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#styles" class="anchor"&gt;
  &lt;/a&gt;
  Styles
&lt;/h2&gt;

&lt;p&gt;I gave the page a default background color of white, added a transition effect to make the color change smoother and set its height and width to that of the viewport which is the user's visible area of a web page. Then I went ahead to center the contents of the page using CSS Flexbox:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Lato'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functionality" class="anchor"&gt;
  &lt;/a&gt;
  Functionality
&lt;/h2&gt;

&lt;p&gt;First thing I did was to create references to the necessary HTML elements and the button in the JS file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.hexValue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then I stored all hexadecimal values in an array and added a &lt;code&gt;click&lt;/code&gt; event listener to the button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hexValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;D&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;E&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;F&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 

&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;changeHex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I defined the callback function of the event listener as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;changeHex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;hexValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;hex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;hexValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Every time the button is clicked, the &lt;code&gt;changeHex&lt;/code&gt; function is called which creates a variable &lt;code&gt;hex&lt;/code&gt; and sets its value to #. Then it loops over the &lt;code&gt;hexValues&lt;/code&gt; array 6 times and each time generates a random number using &lt;code&gt;Math.random()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, the &lt;code&gt;Math.random()&lt;/code&gt; function picks a random number between 0 and 1 (not including 1) and returns a decimal but we don't want decimals. So what do we do if we want a whole number larger than 1? We multiply it by the number we want (in this case, the length of the &lt;code&gt;hexValues&lt;/code&gt; array) and wrap it within the &lt;code&gt;Math.floor()&lt;/code&gt; function which returns the largest integer less than or equal to a given number. It basically rounds it down to the nearest whole number. This makes sure that any number generated is a valid &lt;code&gt;hexValues&lt;/code&gt; index. &lt;/p&gt;

&lt;p&gt;The random whole number generated is appended to a new variable &lt;code&gt;index&lt;/code&gt;. I can now access the &lt;code&gt;hexValues&lt;/code&gt; array item in the position corresponding to the generated &lt;code&gt;index&lt;/code&gt; number using bracket notation, then add it to the end of the &lt;code&gt;hex&lt;/code&gt; variable i.e &lt;code&gt;hex += hexValues[index]&lt;/code&gt;. Then the cycle repeats itself until the 6th round is over at which time a full 6-digit hex code will have been generated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-the-page" class="anchor"&gt;
  &lt;/a&gt;
  Updating the page
&lt;/h3&gt;

&lt;p&gt;All that's left is to set the &lt;code&gt;textContent&lt;/code&gt; of the &lt;code&gt;span&lt;/code&gt; tag and the background color of the page to be the value of &lt;code&gt;hex&lt;/code&gt;. And that's all! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We've successfully built a random hex color generator using HTML, CSS and a few lines of JavaScript. I hope you learnt a lot from my method. You can find the complete code on &lt;a href="https://github.com/toluagboola/hex-color-picker"&gt;my GitHub repository&lt;/a&gt;. There are certainly other ways to achieve the same result so do check them out and give them a try. &lt;/p&gt;

&lt;p&gt;Thanks a lot for reading, and happy coding!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why You Need a Design System</title>
      <author>Tyler Hawkins</author>
      <pubDate>Wed, 27 Jan 2021 16:20:59 +0000</pubDate>
      <link>https://dev.to/thawkin3/why-you-need-a-design-system-14lf</link>
      <guid>https://dev.to/thawkin3/why-you-need-a-design-system-14lf</guid>
      <description>&lt;p&gt;Your frontend application needs a design system. If you want to provide a consistent user experience (UX), ship features faster, make re-branding changes more easily, and free up your time to focus on hard UX problems, this article is for you.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#first-off-what-is-a-design-system" class="anchor"&gt;
  &lt;/a&gt;
  First off, what is a design system?
&lt;/h2&gt;

&lt;p&gt;A design system is a tool that enables you to build your application. It provides all the building blocks and guidance your team needs to design and develop a product. In simple terms, you can think of a design system as a component library. At the “atomic” level, you might have components for a button, or an avatar, or a tooltip. These components are used like Lego blocks to piece together your application, forming “molecules” and eventually whole pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AoAY5ub2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2ArIFyJCY2SvlkpQZj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AoAY5ub2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2ArIFyJCY2SvlkpQZj.png" alt="[Palantir’s Blueprint](https://dribbble.com/Palantir) component library"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a href="https://dribbble.com/Palantir"&gt;Palantir’s Blueprint&lt;/a&gt; component library



&lt;p&gt;However, a design system is more than just a component library. It also includes the design principles and branding rules on how to use the components. It includes good documentation with templates and examples of do’s and don’ts. It encompasses the surrounding processes, strategy, and vision for the component library. It might include a blog or newsletter for updates. And it has a clearly defined governance model for who owns the design system or contributes to it.&lt;/p&gt;

&lt;p&gt;There’s a lot more to design systems than meets the eye!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-would-you-use-a-design-system" class="anchor"&gt;
  &lt;/a&gt;
  Why would you use a design system?
&lt;/h2&gt;

&lt;p&gt;Now that we’ve gotten that definition out of the way, why would you want to use a design system when building your app? There are four main reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To provide consistency throughout the app&lt;/li&gt;
&lt;li&gt;To enable you to ship features faster&lt;/li&gt;
&lt;li&gt;To make re-branding changes easy&lt;/li&gt;
&lt;li&gt;To allow you to focus on the hard UX problems&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s explore these ideas.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#provide-consistency-throughout-the-app" class="anchor"&gt;
  &lt;/a&gt;
  Provide consistency throughout the app
&lt;/h2&gt;

&lt;p&gt;Consistency creates a sense of familiarity for your users as they navigate your app. If a button looks a certain way on one page, it’s disorienting to have it look differently on another page. For more complex interactions in components like dropdowns, modals, or autocomplete inputs, you absolutely want the behavior to be consistent. If the same element looks and behaves differently from page to page, your users may become frustrated or confused.&lt;/p&gt;

&lt;p&gt;Spotify provides a &lt;a href="https://spotify.design/article/reimagining-design-systems-at-spotify"&gt;fascinating case study&lt;/a&gt; of how they addressed inconsistency in their UI.&lt;/p&gt;

&lt;p&gt;If you think back to 2009, the Spotify app looked much different ten years ago than it does today! The experience and design for web, desktop, and mobile looked nothing like each other. You had to re-learn how to use the app depending on your device. Even moving from page to page was a struggle. The home page didn’t feel the same as a playlist or artist page did. The experience felt disjointed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4b_H98J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ae99_NzQKMP1MjKuO" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4b_H98J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ae99_NzQKMP1MjKuO" alt="Spotify inconsistent UI from 2009"&gt;&lt;/a&gt;&lt;/p&gt;
Spotify inconsistent UI from 2009 (Source: &lt;a href="https://spotify.design/article/reimagining-design-systems-at-spotify"&gt;Spotify design blog&lt;/a&gt;)



&lt;p&gt;Spotify recognized this problem and sought a solution that would unify their user experience across pages, devices, and platforms. Starting in 2013, they spent two years building and implementing their design system. That’s a long time! But just look at the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D_-_4nzP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2As52vlp_ENokuuBVL" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D_-_4nzP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2As52vlp_ENokuuBVL" alt="Spotify consistent UI from 2015"&gt;&lt;/a&gt;&lt;/p&gt;
Spotify consistent UI from 2015 (Source: &lt;a href="https://spotify.design/article/reimagining-design-systems-at-spotify"&gt;Spotify design blog&lt;/a&gt;)



&lt;p&gt;Was it worth it? I think so.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ship-features-faster" class="anchor"&gt;
  &lt;/a&gt;
  Ship features faster
&lt;/h2&gt;

&lt;p&gt;Web applications are full of duplicated functionality. Sure, you may be building a new feature at the moment, but that feature is made up of building blocks. You likely have buttons, tooltips, avatars, and dialog modals all over your app.&lt;/p&gt;

&lt;p&gt;So, if you have 20 modals in your app, which scenario would you prefer: You can build each modal from scratch, with each modal taking one day to build. Or, you can build one reusable modal in three days, and then you can implement this modal in under 15 minutes anywhere you need it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B3HuR_GE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2APBiJ25hAdwIDtZxH" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3HuR_GE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2APBiJ25hAdwIDtZxH" alt="Cavemen pulling a cart with square wheels"&gt;&lt;/a&gt;&lt;/p&gt;
No thanks! We are too busy. — Source unknown



&lt;p&gt;This should be a no-brainer. It’s more beneficial to build a reusable component rather than re-writing similar code from scratch. Using a design system enables you to speed up your development lifecycle and ship features faster without sacrificing quality.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#make-rebranding-changes-easy" class="anchor"&gt;
  &lt;/a&gt;
  Make re-branding changes easy
&lt;/h2&gt;

&lt;p&gt;It’s not uncommon for a company to go through some sort of re-branding or design refresh every few years. And while the design changes may be relatively straightforward, it can be tedious to apply the style updates everywhere they’re needed.&lt;/p&gt;

&lt;p&gt;Design systems allow you to make an update in one place and then sit back and watch as the changes are applied everywhere in your app.&lt;/p&gt;

&lt;p&gt;Consider a simple change in which blue buttons with subtle rounded edges now need to be green buttons with more pronounced rounded edges. This change needs to be applied to every button in your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tw4RR9eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2696/1%2A92B3MetYC0K-3bAYz5Ib0Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tw4RR9eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2696/1%2A92B3MetYC0K-3bAYz5Ib0Q.png" alt="Your task: Update all buttons in your app from blue to green"&gt;&lt;/a&gt;&lt;/p&gt;
Your task: Update all buttons in your app from blue to green



&lt;p&gt;If you built each button as a one-off implementation or used a design system inconsistently, this menial task will easily become a nightmare.&lt;/p&gt;

&lt;p&gt;In the screenshot below, the first button was implemented using the design system, the second was built on its own but styled to look like the design system’s button, and the third is using entirely different styles. When it comes time to update your app’s design, only the first button will be affected by the changes in the design system. Now the look of the app is even more inconsistent!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BIzsto3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3968/1%2AHSAYV9I0GBZEtuYvQl5jSw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BIzsto3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3968/1%2AHSAYV9I0GBZEtuYvQl5jSw.png" alt="Bad: Inconsistent use of a design system makes simple style updates a pain"&gt;&lt;/a&gt;&lt;/p&gt;
Bad: Inconsistent use of a design system makes simple style updates a pain



&lt;p&gt;Now, what if every button in the app was provided by the design system? Updating the style in the design system is simple, and now all the buttons in your app have the appropriate new styles. Beautiful!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOa0l6qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3980/1%2AAVbqCc0YOdljJHWs8X8kEA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOa0l6qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3980/1%2AAVbqCc0YOdljJHWs8X8kEA.png" alt="Good: Consistent use of a design system makes style updates easy"&gt;&lt;/a&gt;&lt;/p&gt;
Good: Consistent use of a design system makes style updates easy






&lt;h2&gt;
  &lt;a href="#focus-on-the-hard-ux-problems" class="anchor"&gt;
  &lt;/a&gt;
  Focus on the hard UX problems
&lt;/h2&gt;

&lt;p&gt;One piece of pushback I sometimes hear criticizing the use of a design system goes a little like this: “Designers don’t want a design system. They don’t want to be put in a box. They want the freedom to be creative in their designs with each new feature they build.”&lt;/p&gt;

&lt;p&gt;However, I’d argue that this line of thinking is short-sighted.&lt;/p&gt;

&lt;p&gt;If you are a designer mocking up a new feature, do you really want to consider how a dropdown menu should appear and function? Do you want to design a new button each time? Do you want to re-imagine tooltip styles?&lt;/p&gt;

&lt;p&gt;Or, would you rather focus on the user experience as a whole? Would you rather focus on how this new feature can solve an important problem for your users? Would you rather focus on the overall workflow of the page and ensure that it feels natural and follows a logical progression?&lt;/p&gt;

&lt;p&gt;I’m betting most people would choose the latter set of choices. Design systems don’t limit creativity — they enable creativity. Design systems take care of providing the building blocks so you can focus on what’s most important: designing an exceptional user experience.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you want to build an application that can scale, you need a design system. Design systems enable you to provide a consistent user experience, ship features faster, make re-branding changes more easily, and free up your time to focus on hard UX problems.&lt;/p&gt;

</description>
      <category>design</category>
      <category>webdev</category>
      <category>systems</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to make a weather app in React using openweather api</title>
      <author>Sadman_Sakib</author>
      <pubDate>Wed, 27 Jan 2021 15:48:03 +0000</pubDate>
      <link>https://dev.to/sadmansakib2234/how-to-make-a-weather-app-in-react-using-openweather-api-dif</link>
      <guid>https://dev.to/sadmansakib2234/how-to-make-a-weather-app-in-react-using-openweather-api-dif</guid>
      <description>&lt;h3&gt;
  &lt;a href="#so-today-i-am-going-to-show-how-to-make-a-weather-app-in-react" class="anchor"&gt;
  &lt;/a&gt;
  So today i am going to show how to make a weather app in react
&lt;/h3&gt;

&lt;p&gt;At first create an empty react app&lt;/p&gt;

&lt;pre&gt;npx create-react-app weather-app&lt;/pre&gt;

&lt;p&gt;cd into it and now open it in code editor&lt;/p&gt;

&lt;pre&gt;code .&lt;/pre&gt;

&lt;p&gt;Now delete app.css and open the app.js&lt;br&gt;
import useState&lt;/p&gt;

&lt;pre&gt;import React, { useState } from 'react';&lt;/pre&gt;

&lt;p&gt;not make a variable and app api key&lt;/p&gt;

&lt;pre&gt;const api = {
  key: "key",
  base: "https://api.openweathermap.org/data/2.5/"
}
&lt;/pre&gt;

&lt;p&gt;Now set query and weather to empty&lt;/p&gt;

&lt;pre&gt;
  const [query, setQuery] = useState('');
  const [weather, setWeather] = useState({});
&lt;/pre&gt;

&lt;p&gt;now lets add search feature after that we will make the search field&lt;/p&gt;

&lt;pre&gt;
  const search = evt =&amp;gt; {
    if (evt.key === "Enter") {
      fetch(`${api.base}weather?q=${query}&amp;amp;units=metric&amp;amp;APPID=${api.key}`)
        .then(res =&amp;gt; res.json())
        .then(result =&amp;gt; {
          setWeather(result);
          setQuery('');
          console.log(result);
        });
    }
  }
&lt;/pre&gt;

&lt;p&gt;So now to add the date and month builder&lt;/p&gt;

&lt;pre&gt;
  const dateBuilder = (d) =&amp;gt; {
    let months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    let days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    let day = days[d.getDay()];
    let date = d.getDate();
    let month = months[d.getMonth()];
    let year = d.getFullYear();

    return `${day} ${date} ${month} ${year}`
  }
&lt;/pre&gt;

&lt;p&gt;it will retun day date and month&lt;br&gt;
so now lets build the ui&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hdd4nflo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/di19z5yvhdghktm1in2m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hdd4nflo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/di19z5yvhdghktm1in2m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
After that lets start the styling put the css code&lt;/p&gt;

&lt;pre&gt;
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "montseratt", sans-serif;
}

.app {
  background-image: url("./assets/cold-bg.jpg");
  background-size: cover;
  background-position: bottom;
  transition: 0.4s ease;
}

.app.warm {
  background-image: url("./assets/warm-bg.jpg");
}

main {
  min-height: 100vh;
  background-image: linear-gradient(
    to bottom,
    rgba(0, 0, 0, 0.2),
    rgba(0, 0, 0, 0.75)
  );
  padding: 25px;
}

.search-box {
  width: 100%;
  margin: 0 0 75px;
}

.search-box .search-bar {
  display: block;
  width: 100%;
  padding: 15px;

  appearance: none;
  background: none;
  border: none;
  outline: none;

  background-color: rgba(255, 255, 255, 0.5);
  border-radius: 0px 0px 16px 16px;
  margin-top: -25px;

  box-shadow: 0px 5px rgba(0, 0, 0, 0.2);

  color: #313131;
  font-size: 20px;

  transition: 0.4s ease;
}

.search-box .search-bar:focus {
  background-color: rgba(255, 255, 255, 0.75);
}

.location-box .location {
  color: #fff;
  font-size: 32px;
  font-weight: 500;
  text-align: center;
  text-shadow: 3px 3px rgba(50, 50, 70, 0.5);
}

.location-box .date {
  color: #fff;
  font-size: 20px;
  font-weight: 300;
  font-style: italic;
  text-align: center;
  text-shadow: 2px 2px rgba(50, 50, 70, 0.5);
}

.weather-box {
  text-align: center;
}

.weather-box .temp {
  position: relative;
  display: inline-block;
  margin: 30px auto;
  background-color: rgba(255, 255, 255, 0.2);
  border-radius: 16px;

  padding: 15px 25px;

  color: #fff;
  font-size: 102px;
  font-weight: 900;

  text-shadow: 3px 6px rgba(50, 50, 70, 0.5);
  text-align: center;
  box-shadow: 3px 6px rgba(0, 0, 0, 0.2);
}

.weather-box .weather {
  color: #fff;
  font-size: 48px;
  font-weight: 700;
  text-shadow: 3px 3px rgba(50, 50, 70, 0.5);
}

.description {
  color: #fff;
  font-size: 18px;
}
&lt;/pre&gt;

&lt;p&gt;Then start the react app&lt;/p&gt;

&lt;pre&gt;npm start&lt;/pre&gt;

&lt;p&gt;there you have it&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fi8U5OFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ya6m639wuka0xhxwotap.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fi8U5OFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ya6m639wuka0xhxwotap.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thank-you-for-reading-goodbye" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading goodbye
&lt;/h5&gt;

</description>
      <category>react</category>
      <category>opensource</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Functional programming in python</title>
      <author>Aswin Barath</author>
      <pubDate>Wed, 27 Jan 2021 15:26:45 +0000</pubDate>
      <link>https://dev.to/aswin2001barath/functional-programming-in-python-42fi</link>
      <guid>https://dev.to/aswin2001barath/functional-programming-in-python-42fi</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions. (Wikipedia)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#need-for-functional-programmingfp" class="anchor"&gt;
  &lt;/a&gt;
  Need for Functional Programming(FP)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The usage of Functional Programming provides us with separation of concern where we can separate data and logic separately. Hence, the code becomes &lt;em&gt;clear&lt;/em&gt; and &lt;em&gt;easy to understand&lt;/em&gt; to a developer.&lt;/li&gt;
&lt;li&gt;Functional Programming follows the &lt;em&gt;DRY (Do not Repeat Yourself)&lt;/em&gt; principle.&lt;/li&gt;
&lt;li&gt;Code which follows Functional Programming practice is &lt;em&gt;memory-efficient&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The codebase which implements Functional Programming will also be &lt;em&gt;easy to extend and maintain&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pure-functions" class="anchor"&gt;
  &lt;/a&gt;
  Pure functions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;One of the important concepts in functional programming is the usage of &lt;strong&gt;pure functions&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A function is said to be a &lt;em&gt;Pure function&lt;/em&gt; if:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1) Given the same input, the function will always return the same output.&lt;/p&gt;

&lt;p&gt;2) The function must not produce any &lt;em&gt;side effects&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Side effects&lt;/strong&gt; are things that a function does that affect the outside world, that is they change the state of the program.&lt;/li&gt;
&lt;li&gt;Changing the data in a variable, printing output can be considered as some examples of side effects of a function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider the following simple example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aG0VmWf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lipceb5cbltvuuylxsqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aG0VmWf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lipceb5cbltvuuylxsqf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The function square will always return only the square of a given number and will not change anything in the outside world.&lt;br&gt;
This type of functions are also called &lt;strong&gt;declarative functions&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#note" class="anchor"&gt;
  &lt;/a&gt;
  Note:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;But, technically it's not possible to use pure functions everywhere as we may need to change the state of the code.&lt;/li&gt;
&lt;li&gt;Although, it's a good practice to use pure functions as many places as possible.&lt;/li&gt;
&lt;li&gt;And the &lt;em&gt;fact&lt;/em&gt; here is that it highly probable to face bugs and errors occur in non-pure functions rather than in pure functions.&lt;/li&gt;
&lt;li&gt;Python provides us with some useful pure functions which are built-in python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#pure-functions-in-python" class="anchor"&gt;
  &lt;/a&gt;
  Pure Functions in python:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;map()&lt;/li&gt;
&lt;li&gt;filter()&lt;/li&gt;
&lt;li&gt;zip()&lt;/li&gt;
&lt;li&gt;reduce()&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#1-map" class="anchor"&gt;
  &lt;/a&gt;
  1) map()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;map() accepts two arguments - a function and an iterable.&lt;/li&gt;
&lt;li&gt;Consider the above example of square function, we can make use of map() function to quickly apply the function to a given iterable like a list of numbers:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tsXs5DhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nlk0ynd655xvqbsni04e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tsXs5DhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nlk0ynd655xvqbsni04e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[4, 36, 100]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The most common and useful use case of map() function is to receive multiple unknown numbers of input from the user:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpE3lyUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5yh2k05ao8kf45wlwhn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpE3lyUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5yh2k05ao8kf45wlwhn5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter some numbers: 2 5 3 7 4
Check your numbers: [2, 5, 3, 7, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-filter" class="anchor"&gt;
  &lt;/a&gt;
  2) filter()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;filter() function filters any given iterable based on the specified function.&lt;/li&gt;
&lt;li&gt;Consider the following example where the filter() function filters only the items which satisfy the condition of the given &lt;code&gt;only_even()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDmytKc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4se1zxrb81g5zgjcs7wu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDmytKc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4se1zxrb81g5zgjcs7wu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2, 4, 6, 8, 10]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-zip" class="anchor"&gt;
  &lt;/a&gt;
  3) zip()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When we need to zip two iterables literally, we use the zip() function.&lt;/li&gt;
&lt;li&gt;We can add as many iterables as we want inside a zip() function.&lt;/li&gt;
&lt;li&gt;Consider the following example with two iterables:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ltOMZlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kk0of0fmulej6ojcxhwp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ltOMZlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kk0of0fmulej6ojcxhwp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[('Iron Man', 'Batman'), ('Spider-Man', 'Superman')]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;zip() function binds together the corresponding index items in a tuple and inserts into a list function (as I specified as the list() function).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-reduce" class="anchor"&gt;
  &lt;/a&gt;
  4) reduce()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;reduce() function is part of a functools module - a standard python library.&lt;/li&gt;
&lt;li&gt;Consider the following example, where the reduce() function accumulates the given list values and provides a final output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xyVet6IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5swwddumg7fjsstm59la.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xyVet6IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5swwddumg7fjsstm59la.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Unlike other functions, the reduce() function accepts three arguments.&lt;/li&gt;
&lt;li&gt;From the example, you can see that the function accumulate() accepts two arguments &lt;code&gt;acc&lt;/code&gt; and &lt;code&gt;item&lt;/code&gt; and returns the sum.&lt;/li&gt;
&lt;li&gt;Here, the reduce() function passes the last argument 0 as acc at first and the first item from the list, then it accumulates and passes the sum as acc for the next list item and so on until all the list items are accumulated and the result is displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#code-along-and-learn-more" class="anchor"&gt;
  &lt;/a&gt;
  Code along and learn more...
&lt;/h4&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Stop learning everything</title>
      <author>Hanna</author>
      <pubDate>Wed, 27 Jan 2021 15:09:16 +0000</pubDate>
      <link>https://dev.to/hanna/stop-learning-everything-2j07</link>
      <guid>https://dev.to/hanna/stop-learning-everything-2j07</guid>
      <description>&lt;p&gt;One mistake I've seen people make, especially newcomers to devops or programming in general, is they try to learn to much. I don't mean in a specific time frame either, I mean overall. They end up learning 50 different languages and/or tools, when in reality they're going to only end up using using at most 5, especially in their career. I know this because it's something I've personally done, I ended up learning so many languages, tools and more, that I have per-say "cluttered" my brain with information that probably won't be used, and this is problematic, especially at scale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-or-need" class="anchor"&gt;
  &lt;/a&gt;
  Want or need
&lt;/h2&gt;

&lt;p&gt;Don't get me wrong learning is good and you should learn but you should only learn what is needed. There is a difference between learning something because you can, and learning something because something your working on needs it. I could learn all the programming languages in the world, but if I only end up using 5-10 of those languages, what use is that knowledge? &lt;/p&gt;

&lt;p&gt;One common phrase I often quote in things like job interviews, among other things is "lead by example, don't lead by courage", and what this phrase essentially means is, you want to be an example when you lead, what you don't want to do is lead or become an example that is only an example because you had the knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#knowledge-or-experience" class="anchor"&gt;
  &lt;/a&gt;
  Knowledge or experience
&lt;/h2&gt;

&lt;p&gt;Having the knowledge to use something, doesn't directly correlate with knowing how to use it well. Instead of focusing your time on learning 20 different tools or languages, instead focus on learning the specific tools your project or job(s) need, and improving your skills with them. This is very important when it comes to software engineering jobs, among things not even related to programming.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>tooling</category>
      <category>discuss</category>
      <category>leadership</category>
    </item>
    <item>
      <title>Day 34 Of 100DaysOfCode : Python Code To Find Count Of Mail</title>
      <author>Durga Pokharel</author>
      <pubDate>Wed, 27 Jan 2021 15:04:28 +0000</pubDate>
      <link>https://dev.to/iamdurga/day-34-of-100daysofcode-python-code-to-find-count-of-mail-4ddh</link>
      <guid>https://dev.to/iamdurga/day-34-of-100daysofcode-python-code-to-find-count-of-mail-4ddh</guid>
      <description>&lt;p&gt;Today is my 34 day of #100DaysOfCode and Python. Today I tried to write some code on python access to web data and data structure on python. Complete some assignment on coursera.&lt;/p&gt;

&lt;p&gt;Below is the python code I tried to write to find the count of mail from the file and from whom maximum times mail come.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#python-code" class="anchor"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h1&gt;

&lt;p&gt;At first we open file. Set counts to zero at first. There is empty list for mails. I write simple loop to find the mail. There is empty dictionary to store mail as a key and number of count as a value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fhand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'mbox-short.txt'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fhand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# print('Debug:', words)
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;'From'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;#print(emails)
&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;#print(d)
&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])))}&lt;/span&gt;
&lt;span class="n"&gt;nd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The output of this code is given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'cwen@iupui.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'david.horwitz@uct.ac.za'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'zqian@umich.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'gsilver@umich.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'louis@media.berkeley.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'rjlowe@iupui.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'stephen.marquard@uct.ac.za'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'ray@media.berkeley.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'gopal.ramasammycook@gmail.com'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'antranig@caret.cam.ac.uk'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'wagnermr@iupui.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To find by whom we got maximum mail is find by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"This &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; send mail most i.e &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; times."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output is,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;cwen&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;iupui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edu&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;blockquote class="twitter-tweet"&gt;
&lt;br&gt;
&lt;p&gt;Day 34 Of &lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100DaysOfCode&lt;/a&gt; and &lt;a href="https://twitter.com/hashtag/Python?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Python&lt;/a&gt; &lt;br&gt;* Web access on python&lt;br&gt;* Data structure on python&lt;br&gt;* Python program to find the maximum count of mail.&lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100DaysOfCode&lt;/a&gt; ,&lt;a href="https://twitter.com/hashtag/CodeNewbie?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#CodeNewbie&lt;/a&gt; ,&lt;a href="https://twitter.com/hashtag/Python?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Python&lt;/a&gt; ,&lt;a href="https://twitter.com/hashtag/beginners?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#beginners&lt;/a&gt; &lt;a href="https://t.co/pTaNyNoczI"&gt;pic.twitter.com/pTaNyNoczI&lt;/a&gt;&lt;/p&gt;— Durga Pokharel (@mathdurga) &lt;a href="https://twitter.com/mathdurga/status/1354440046322057220?ref_src=twsrc%5Etfw"&gt;January 27, 2021&lt;/a&gt;&lt;br&gt;
&lt;/blockquote&gt; 

</description>
      <category>100daysofcode</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>python</category>
    </item>
  </channel>
</rss>
