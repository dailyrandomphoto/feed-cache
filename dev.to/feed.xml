<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What do you want to know about how Facebook builds software? Answer to be featured on our podcast üéß  </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 20 Aug 2021 18:39:03 +0000</pubDate>
      <link>https://dev.to/devteam/what-do-you-want-to-know-about-how-facebook-builds-software-answer-to-be-featured-on-our-podcast-2j9o</link>
      <guid>https://dev.to/devteam/what-do-you-want-to-know-about-how-facebook-builds-software-answer-to-be-featured-on-our-podcast-2j9o</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners ‚Äî and we like to feature the &lt;em&gt;actual&lt;/em&gt; voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-do-you-want-to-know-about-how-facebook-builds-software"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What do you want to know about how Facebook builds software?&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message üìû&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; üéô&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) üó£&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Wednesday, August 25th at 1 PM, ET (5 PM UTC, 10 AM PT)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement üòâ
&lt;/h4&gt;

&lt;p&gt;Catch up on recent episodes of the show &lt;a href="https://dev.to/devdiscuss"&gt;here&lt;/a&gt;. A new season launched just a few weeks ago üëÄ  &lt;/p&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
      <category>facebook</category>
    </item>
    <item>
      <title>My streaming setups since Dec</title>
      <author>whykay üë©üèª‚Äçüíªüêàüè≥Ô∏è‚Äçüåà (she/her)</author>
      <pubDate>Fri, 20 Aug 2021 18:32:51 +0000</pubDate>
      <link>https://dev.to/whykay/my-streaming-setups-since-dec-2m57</link>
      <guid>https://dev.to/whykay/my-streaming-setups-since-dec-2m57</guid>
      <description>&lt;p&gt;Wow, it's August already! And yip, since December, my streaming setup has gotten a bit more shinier (might be a little bit complex but meant to make life easier for me, I was promising myself üòÜ)&lt;/p&gt;

&lt;p&gt;So here's a timeline of the ever changing setups, even some seem very small, but it's all experimentation from running PyLadies Dublin (monthly), Dublin Maker virtual Festival, collaborating and participating in various other events. So here we go, lots of piccies coming up with some gifs thrown in. üòâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#january"&gt;
  &lt;/a&gt;
  January
&lt;/h2&gt;

&lt;p&gt;Playing with the ATEM Mini, connected up my Nintendo Switch and Animal Crossing. I had ideas of running a meetup or conference (inspired by &lt;a href="https://desertedisland.club/"&gt;Deserted Island DevOps&lt;/a&gt;)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HXCzAAOW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86wrnx0rrvte51u6ckpq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HXCzAAOW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86wrnx0rrvte51u6ckpq.jpeg" alt="1ACC3A05-6980-472F-8264-4CBE3AE5E92B_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My new setup&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zuEYf-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1fiabiz70l4wigvwxwy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zuEYf-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1fiabiz70l4wigvwxwy.jpeg" alt="A9F3D6B4-DB08-4884-B12F-2587F3951E79_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Playing with my Elgato Streamdeck&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0GsKQXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp6y4klei4pfn062ijgy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0GsKQXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp6y4klei4pfn062ijgy.jpeg" alt="695C9B80-5AC6-4D42-BC94-1AC220623B37_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My setup for the first PyLadies Dublin of the year with special guest from Imagi Labs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wKMmlgnJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lqln903hx7q96iyvi2u.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wKMmlgnJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lqln903hx7q96iyvi2u.jpeg" alt="21610F2E-97B4-4CE1-85F6-37DD65CE2097_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My OBS scenes all set up just a click away on my Streamdeck.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MLoFtBvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67crqt1kr3e3tx3p5wq5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLoFtBvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67crqt1kr3e3tx3p5wq5.jpeg" alt="B8E3592B-1A12-43D3-B905-8EF1F50BA943_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pano pic of my new setup.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U3mdkraN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/867z8gaa170wt9n1eq3y.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U3mdkraN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/867z8gaa170wt9n1eq3y.jpeg" alt="8E85D403-44AB-4E84-ACC5-5B4B195DE2A6_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#problems-with-this-new-setup"&gt;
  &lt;/a&gt;
  Problems with this new setup
&lt;/h3&gt;

&lt;p&gt;This looked like a great idea at the time, if you had someone sitting at the iMac looking after OBS. I thought having all the buttons will help when I'm seated at the white table. When we had audio issues, I had to jump out of my seat and tried to fix problems on the main desk where OBS is streaming from zoom to Youtube. I also can't remember if it's this meetup that I had the wrong stream going on Youtube, and before I could tell everyone which stream to jump onto, they were booted out. But they all just went to the main Youtube channel and jumped on the correct live-stream. So lesson learnt that when you remove a live-stream, there's no warning for viewers. I was so proud of the fact before this happened that I had a couple of live-streams scheduled, all smugly prepped. But I clicked on the wrong one. Whoops.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQOcmOYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/grtLXNKvEXmxxfpO14/giphy.gif%3Fcid%3Decf05e474oztxnp6jg5vd1h0cjnhsh7e2my7miradntrdv5i%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQOcmOYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/grtLXNKvEXmxxfpO14/giphy.gif%3Fcid%3Decf05e474oztxnp6jg5vd1h0cjnhsh7e2my7miradntrdv5i%26rid%3Dgiphy.gif%26ct%3Dg" alt="whoops"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also learnt people are very forgiving and are very nice. So learning so many things at once and definitely if all hands on deck when things are live-streamed. So I do a more respect for those streamers who run these by themselves and they play games, moderate, answer questions, deal with problems live on air, create content all the time, and more.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#march"&gt;
  &lt;/a&gt;
  March
&lt;/h2&gt;

&lt;p&gt;Testing lighting (only had 1 x &lt;a href="https://www.elgato.com/en/key-light-air"&gt;Elgato Key Light Air&lt;/a&gt; LED panel and 1 x &lt;a href="https://www.amazon.co.uk/Ultra-thin-Batteries-3200-5600K-Brightness-Interview/dp/B07TYLGFD5"&gt;Raleno LED Panel&lt;/a&gt;). Before Mick got me the first Elgato LED Panel, I used the Raleno one and a desklamp. I reflected the desklamp light towards a reflector on its silver side. The gold side made my complexion yellower. So it was a lot of trial an error to get colour of my skin tone as close as possible when I'm capturing myself on camera.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i22KiA1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d59yodz04hwktj4jyg3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i22KiA1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d59yodz04hwktj4jyg3.jpeg" alt="D080CCF1-3A26-424D-A562-1CD2BA2F8AC8_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--36AzJvsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x596i1r3wu5zamvsmmhm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--36AzJvsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x596i1r3wu5zamvsmmhm.jpeg" alt="E2BC0B8F-7E9A-417A-9A20-710FFFAEA88D_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#april"&gt;
  &lt;/a&gt;
  April
&lt;/h2&gt;

&lt;p&gt;Cleared the table beside me and we got &lt;a href="https://www.elgato.com/en/multi-mount-system"&gt;Elgato Multi-clap system&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also we got ourselves a &lt;a href="https://lumecube.com/products/panel-mini"&gt;Lumecube Panel Mini&lt;/a&gt; which has a diffuser. It's very portable, and you can control its brightness. And did I say it's portable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xz3Hux7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkb0bjgc519yhie4hiys.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xz3Hux7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkb0bjgc519yhie4hiys.jpeg" alt="C7C035E0-4291-4BE9-B247-350A9F9EC3D1_1_105_c"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoTOqDzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq2r84bdsnyvluwdauxq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoTOqDzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq2r84bdsnyvluwdauxq.jpeg" alt="C232DE5D-6031-4DB9-B571-F870204C2444_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N4XWmyby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9r2xg26xa1jpqskgi1f.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N4XWmyby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9r2xg26xa1jpqskgi1f.jpeg" alt="CB32D8BF-5721-44BE-9C6C-3A9CAA139BE9_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course Shadow had to check out another new setup.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fCyo1rsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70qs6j6a6dx0st9ocxvx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fCyo1rsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70qs6j6a6dx0st9ocxvx.jpeg" alt="84662166-4FE6-4B00-9981-ABB6D317B21C_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--esSe62Lr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jovwtig99vztbpl3n9e.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--esSe62Lr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jovwtig99vztbpl3n9e.jpeg" alt="77B317B8-370B-400E-9CED-B4C9F49E742E_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#may"&gt;
  &lt;/a&gt;
  May
&lt;/h2&gt;

&lt;p&gt;After getting new standing desk&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3CMaV8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p0k5va1zf12c8fu0yrv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3CMaV8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p0k5va1zf12c8fu0yrv.jpeg" alt="C92711DE-F4C6-47E4-82F7-3C5ECD67718F_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hfIprTR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70g4m20j4vhwvd9s91mj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfIprTR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70g4m20j4vhwvd9s91mj.jpeg" alt="2B36309D-4E3E-4DF6-9117-340367C9931A_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lol, those cables. üòÖ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2SEqOd5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf06sl9hop8tz982f57g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2SEqOd5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf06sl9hop8tz982f57g.jpeg" alt="79DBE86F-E0BC-434D-A3EF-89ABA7CB126A_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#june-getting-ready-for-dublin-maker"&gt;
  &lt;/a&gt;
  June - Getting ready for Dublin Maker!
&lt;/h2&gt;

&lt;p&gt;It's a month away, but so many bits and pieces and Mick had a great time bringing our &lt;a href="https://shop.pimoroni.com/products/picade?variant=29210087489619"&gt;Picade&lt;/a&gt; upstairs from our living room.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vSnCEsxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2xoulk6ilkt8yzv4dug.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vSnCEsxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2xoulk6ilkt8yzv4dug.jpeg" alt="EC64582F-7973-4A8D-A293-DCC8B8665128_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Spot the black cat!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b17svQCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kn7tyc0vpl5gsfr1jmet.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b17svQCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kn7tyc0vpl5gsfr1jmet.jpeg" alt="8233B14A-0B04-447F-9B50-148C0C1C2601_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, easier during day time&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uyx85HeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syrn9n2gysaattmg31nx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uyx85HeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syrn9n2gysaattmg31nx.jpeg" alt="D45B3820-06B6-482E-A4E2-40AAF0D4CAAC_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DT9bOm3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5snla80m7ngl3bnh5zof.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DT9bOm3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5snla80m7ngl3bnh5zof.jpeg" alt="4A7AF043-52B2-4EA0-865D-CB6CD5673222_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#july-moar-dublin-maker-prepping"&gt;
  &lt;/a&gt;
  July - Moar Dublin Maker prepping
&lt;/h2&gt;

&lt;p&gt;Still working out setup, it's a bit more complex for Dublin Maker, but I was running PyLadies Dublin virtual meetup and also hosted a session during EuroPython. &lt;/p&gt;

&lt;p&gt;Hence the signage I put up, it's upcycled piece of cardboard (already stand-like) and I added a white poster board in front, and then I would add logos of whichever event I'm in to the front. You saw it in the previous pic above.. only started to change it for these events.&lt;/p&gt;

&lt;p&gt;And I found &lt;a href="https://rasterbator.net"&gt;rasterbator.net&lt;/a&gt; to create the large poster (2 x A4), was so cool to see this still around, it's been around for decades afaik.&lt;/p&gt;

&lt;p&gt;Mick found that if you tilt the LED strip (purple pink) instead of pointing up, it gives a nice reflective glow. And we tilted the LED flood light which I now leave changing colours gives a nice blend when all the (blackout) blinds are down. The effect is better when it's much darker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZ4WoQmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub55d3mcyonomj49tysw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZ4WoQmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub55d3mcyonomj49tysw.jpeg" alt="3042F31A-CA31-4804-BD64-4FD5FC2D866C_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lighting"&gt;
  &lt;/a&gt;
  Lighting
&lt;/h3&gt;

&lt;p&gt;LED panels off &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JMLbzjh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwh09ntfiu2s3o611xhq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JMLbzjh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwh09ntfiu2s3o611xhq.jpeg" alt="DCB30081-104F-437A-A1E1-E7951F5677E1_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ah better, LED panels on (using 2 x Elgato Key Light Air LED panels). Yup, got ourselves a second one as we were super happy with the first one. Very much worth it. And I can control it with a button push on my Streamdeck.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4AyoDJNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmuuxeld620yx9vxk5gy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AyoDJNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmuuxeld620yx9vxk5gy.jpeg" alt="89770859-0BCF-4F96-9B54-C27F0B82C376_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4aJvjXna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi8pu4rw3ejlhzig2mhb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4aJvjXna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi8pu4rw3ejlhzig2mhb.jpeg" alt="1CD9224F-7521-48DF-A722-165253B2F18C_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh, and an elusive black and white kitteh called Queenie makes a special appearance! üòÜ&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EOjU05VO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p900k86hd2ozgazmhb4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EOjU05VO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p900k86hd2ozgazmhb4.png" alt="C879D2CC-82D1-48AD-A255-C0C24DD3EB99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Current setup&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9C2vSXk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcultb62v41kxriby8xk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9C2vSXk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcultb62v41kxriby8xk.jpeg" alt="8916D892-CAA3-4817-8565-D7BE5A4EE6F4_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#still-found-problems"&gt;
  &lt;/a&gt;
  Still found problems
&lt;/h3&gt;

&lt;p&gt;Still not working as expect like for PyLadies Dublin August meetup.&lt;/p&gt;

&lt;p&gt;I normally run a live-raffle via my announcements scene (on OBS) - just myself and browser. I decided to change last minute to include a guest to announce the prizes over zoom. So when I shared my browser over zoom, only people on zoom saw it but not my live viewers on Youtube Live!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5UnUS2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xT0GqtpF1NWd9VbstO/giphy.gif%3Fcid%3Decf05e47o9v6uf0lv1mb2d5udlci4xkzg5afmr08x3rdolmd%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5UnUS2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xT0GqtpF1NWd9VbstO/giphy.gif%3Fcid%3Decf05e47o9v6uf0lv1mb2d5udlci4xkzg5afmr08x3rdolmd%26rid%3Dgiphy.gif%26ct%3Dg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My normal running order (before that last minute change):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Zoom -&amp;gt; OBS -&amp;gt; Youtube Live&lt;/li&gt;
&lt;li&gt;Guest speakers are on Zoom&lt;/li&gt;
&lt;li&gt;Usual running order when live button is clicked:

&lt;ul&gt;
&lt;li&gt;Starting looping video&lt;/li&gt;
&lt;li&gt;Countdown scene&lt;/li&gt;
&lt;li&gt;Announcements and myself (directly in OBS)&lt;/li&gt;
&lt;li&gt;Intermission while getting speaker set up&lt;/li&gt;
&lt;li&gt;Speaker with slides on Zoom&lt;/li&gt;
&lt;li&gt;Intermission for 2nd speaker set up&lt;/li&gt;
&lt;li&gt;Speaker with slides on Zoom&lt;/li&gt;
&lt;li&gt;Everyone on Zoom (gallery view)&lt;/li&gt;
&lt;li&gt;If live-raffle, switch back to Announcements scene&lt;/li&gt;
&lt;li&gt;End with outro video&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What would I do differently?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the ATEM mini and connect up my laptop as another input to share the announcements and live raffle. I've done this before, and it works really well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#future-upcoming-plans"&gt;
  &lt;/a&gt;
  Future upcoming plans
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;More Coding Grace videos - we use the Atem Mini to switch between cameras, feed from the Pi-Top for coding, and our feed from my Nintendo Switch with Animal Crossing (Mick is a visitor to my island). I've uploaded the videos so far here in this series here on Dev: &lt;a href="https://dev.to/whykay/series/12422"&gt;https://dev.to/whykay/series/12422&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;I'll say it again, make more use of the &lt;a href="https://www.blackmagicdesign.com/products/atemmini"&gt;ATEM Mini&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;p&gt;I made a video along with other Makers on how to make your own video, maybe this might be of use to you as well, playlist is at &lt;a href="https://www.youtube.com/playlist?list=PLAagJ_L-cqBEWAn-eUmlqN4wz9368fCBG"&gt;https://www.youtube.com/playlist?list=PLAagJ_L-cqBEWAn-eUmlqN4wz9368fCBG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1HsVQSpxG78"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/THU6n3kbkNg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UujMhooKpJU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MdvOwXYfQ2k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>streaming</category>
      <category>gadgets</category>
    </item>
    <item>
      <title>My Website Development Journey with I4G x HNGi8 (Zuri Team)</title>
      <author>Anne Ojoh</author>
      <pubDate>Fri, 20 Aug 2021 18:24:30 +0000</pubDate>
      <link>https://dev.to/annieoj/my-website-development-journey-with-i4g-x-hngi8-zuri-team-23o9</link>
      <guid>https://dev.to/annieoj/my-website-development-journey-with-i4g-x-hngi8-zuri-team-23o9</guid>
      <description>&lt;p&gt;‚ÄòLife is a daring adventure or nothing at all‚Äô.&lt;/p&gt;

&lt;p&gt;In this day and age where the world is developing and being more technology inclined, it is only appropriate to be informed, skilled and dispensible to give value.&lt;/p&gt;

&lt;p&gt;I‚Äôve always been a creative-inclined person, what other way to develop on that than learning to build, and design websites. I dived into tech without a single doubt and it‚Äôs only one way from here; up!&lt;/p&gt;

&lt;p&gt;Starting this journey of self-improvement, I scrubbed the internet, as you know, the internet is an unending pool of information, I found articles, videos and tutorials that helped me understand the basics of web-development and alot more,( a few of which I will share at the end of this article). While searching, I stumbled upon this amazing opportunity to learn an aspect of tech as an intern with a community called the Zuri Team.&lt;/p&gt;

&lt;p&gt;Zuri Team in partnership with Ingressive For Good are conducting an internship; the HNG Internship is a long running, large scale virtual internship for people learning to code and design. It focuses on the post-training phase, and creates a virtual work environment for participants to grow either as a beginner, intermediate or an expert.&lt;br&gt;
The internship involves tracks in: Front-End Development, Backend Development, Mobile Development, UI/UX design, and Digital Marketing as core tracks, while DevOps and Entrepreneurship as sub-tracks. It is fast paced with access to various mentors of different tracks to guide one through the 8-weeks duration of the internship.&lt;/p&gt;

&lt;p&gt;Hopping on this bandwagon, I enrolled for the Backend development track to begin with and I am more than excited starting this journey of web-development with a growing community. At the end of the 8-weeks duration, I hope to have achieved;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A reasonable skill level working with PHP, Python and JavaScript, and cloud tools such as AWS or Azure cloud services as a Backend Developer.&lt;/li&gt;
&lt;li&gt;Build a wide network of developers and mentors to connect with, share and build projects together.
Build projects easily that solve real world problems and create value to society.&lt;/li&gt;
&lt;li&gt;Have an impressionable portfolio of projects worked on.
It already started as quite an interesting ride and I cannot wait to grab these new skills while sharpening the creative knots in my head ;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The amazing team; The Zuri Team in partnership with Ingressive For Good always come up with great opportunities you wouldn‚Äôt want to miss out on, I wouldn‚Äôt either! You can read more about them here; &lt;a href="https://internship.zuri.team"&gt;https://internship.zuri.team&lt;/a&gt; and follow their social media pages on:&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/thezuriteam"&gt;https://twitter.com/thezuriteam&lt;/a&gt;&lt;br&gt;
Instagram: &lt;a href="https://instagram.com/thezuriteam"&gt;https://instagram.com/thezuriteam&lt;/a&gt;&lt;br&gt;
Youtube: &lt;a href="https://youtube.com/c/TheZuriTeam"&gt;https://youtube.com/c/TheZuriTeam&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/company/zuri-team"&gt;https://www.linkedin.com/company/zuri-team&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Finally, I‚Äôm certain you are as curious minded as I am and would love to emcompass knowledge and gain valuable skills, you can go through the links below for basic beginner‚Äôs guide and tutorials to some aspects of tech and web development. See it as an arm from me to you to join me on my tech-knowledge seeking journey!&lt;/p&gt;

&lt;p&gt;Designing with Figma:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/FTFaQWZBqQ8"&gt;https://youtu.be/FTFaQWZBqQ8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Designing with Git and Github: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/USjZcfj8yxE"&gt;https://youtu.be/USjZcfj8yxE&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Learning HTML: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/qz0aGYrrlhU"&gt;https://youtu.be/qz0aGYrrlhU&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beginner‚Äôs guide to CSS: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/1Rs2ND1ryYc"&gt;https://youtu.be/1Rs2ND1ryYc&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Basic Tutorials in Python:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/rfscVS0vtbw"&gt;https://youtu.be/rfscVS0vtbw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PHP for beginners: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/2eebptXfEvw"&gt;https://youtu.be/2eebptXfEvw&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;JavaScript Beginner‚Äôs Course: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/PkZNo7MFNFg"&gt;https://youtu.be/PkZNo7MFNFg&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;NodeJs For Beginners: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/TlB_eWDSMt4"&gt;https://youtu.be/TlB_eWDSMt4&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Learning Flutter: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/pTJJsmejUOQ"&gt;https://youtu.be/pTJJsmejUOQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kotlin Beginner‚Äôs guide: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/SXLmr4Qp4OM"&gt;https://youtu.be/SXLmr4Qp4OM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You‚Äôre welcome! ;)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>techtalks</category>
      <category>devops</category>
    </item>
    <item>
      <title>isJsonStructure() CFML User-Defined Function</title>
      <author>James Moberg</author>
      <pubDate>Fri, 20 Aug 2021 18:19:11 +0000</pubDate>
      <link>https://dev.to/gamesover/isjsonstructure-cfml-user-defined-function-1kg9</link>
      <guid>https://dev.to/gamesover/isjsonstructure-cfml-user-defined-function-1kg9</guid>
      <description>&lt;p&gt;Apparently strings, numbers, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; are considered valid JSON even though they consist of a single escaped value. (I recently &lt;a href="https://dev.to/gamesover/isjson-insertescapedstring-true-really-2kdf"&gt;discovered this&lt;/a&gt; while accepting API data from a third-party and they accidentally double-encoded the JSON body payload.&lt;/p&gt;

&lt;p&gt;To prevent this issue from occurring again, I wrote a CFML User-Defined Function (UDF) to test whether a string can successfully parsed to an object and/or array (versus accepting an invalid simple value).  Enjoy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#isjsonstructurestring-typeany"&gt;
  &lt;/a&gt;
  isJsonStructure(string, type="any")
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/JamoCA/e153c2ea40bfd75b60d180fbb709fe5b"&gt;https://gist.github.com/JamoCA/e153c2ea40bfd75b60d180fbb709fe5b&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZebdmGVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgrfweicflad1v34c4ky.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZebdmGVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgrfweicflad1v34c4ky.png" alt="function comparisons between isJson and isJsonStructure"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>coldfusion</category>
      <category>cfml</category>
      <category>json</category>
    </item>
    <item>
      <title>Docker setup for yarn workspaces</title>
      <author>Siddharth Venkatesh</author>
      <pubDate>Fri, 20 Aug 2021 18:06:44 +0000</pubDate>
      <link>https://dev.to/sidv93/docker-setup-for-yarn-workspaces-4pnj</link>
      <guid>https://dev.to/sidv93/docker-setup-for-yarn-workspaces-4pnj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As monorepos seem to be having their moment in the developer community right now, we can see quite a bit of new monorepo tools popping up. npm recently announced &lt;a href="https://docs.npmjs.com/cli/v7/using-npm/workspaces"&gt;npm workspaces&lt;/a&gt; with version 7, &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt; has been gaining a lot popularity and &lt;a href="https://github.com/lerna/lerna"&gt;lerna&lt;/a&gt; has been around for quite a while now. I use &lt;a href="https://yarnpkg.com/"&gt;yarn&lt;/a&gt; in most of my projects now, and thought it would be fun to explore &lt;a href="https://yarnpkg.com/features/workspaces/"&gt;yarn workspaces&lt;/a&gt; with a simple monorepo setup.&lt;/p&gt;

&lt;p&gt;In this workspace, I am going to be adding two React applications. Further, we can also add docker support to make it easier for deployments. Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initialising-the-workspace"&gt;
  &lt;/a&gt;
  Initialising the workspace
&lt;/h2&gt;

&lt;p&gt;Let's start by creating a folder for our project and initialise yarn&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir yarn-docker-setup
cd yarn-docker-setup
yarn init -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you do not have yarn installed already, you can install by &lt;code&gt;npm install yarn -g&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After filling out basic questions, you would have a &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To turn this project into a workspace, we need to add &lt;code&gt;workspaces&lt;/code&gt; option in our &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"workspaces": ["apps/*"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;apps&lt;/code&gt; is a directory where all our apps live.&lt;br&gt;
Great! We've initialised our workspace, next step is to add applications.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-apps"&gt;
  &lt;/a&gt;
  Adding apps
&lt;/h2&gt;

&lt;p&gt;We're going to be adding two React applications to this project namely &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;product&lt;/code&gt;. I'm using &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt; to scaffold our apps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create react-app apps/admin
yarn create react-app apps/product
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would take a couple of minutes to finish and by the end you would have two folders called &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;product&lt;/code&gt; inside the &lt;code&gt;apps&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Great! We've added two apps to our workspace. The next step is let yarn know about each app's dependencies, so it can optimise and cache them. In the project root folder, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This goes through the dependencies and moves them to a central &lt;code&gt;node_modules&lt;/code&gt; folder in the project's root.&lt;/p&gt;

&lt;p&gt;Let's test out our setup to see everything works. Let's add scripts in our &lt;code&gt;package.json&lt;/code&gt; to start and build our apps&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
    "admin": "yarn workspace admin start",
    "product": "yarn workspace product start",
    "build:admin": "yarn workspace admin build",
    "build:product": "yarn workspace product build"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've also added build scripts to compile our apps into static files.&lt;br&gt;
If we run &lt;code&gt;yarn admin&lt;/code&gt; or &lt;code&gt;yarn product&lt;/code&gt;, we should see the standard create react app screen&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N35ho9jn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5xff49wngki2svk7eeg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N35ho9jn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5xff49wngki2svk7eeg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-docker-support"&gt;
  &lt;/a&gt;
  Adding Docker support
&lt;/h2&gt;

&lt;p&gt;Docker provides us with a simple and effective way to package our apps into images that could be run anywhere without any dependence on the environment or operating system. With docker-compose, we can orchestrate multiple services(apps) with a simple configuration. Going too much into docker and docker-compose maybe a bit out of reach for this article, so let's dive into the docker setup.&lt;/p&gt;

&lt;p&gt;First step is add a &lt;code&gt;Dockerfile&lt;/code&gt;. We can add individual Dockerfiles for each app, but since the build process is same for both the apps, we can use a single Dockerfile for both of them.&lt;/p&gt;

&lt;p&gt;First, we need a &lt;code&gt;node&lt;/code&gt; environment to compile our React projects, and we need the name of the folder which we need to build, in this case &lt;code&gt;admin&lt;/code&gt; or &lt;code&gt;product&lt;/code&gt;. We get that using the &lt;code&gt;BUILD_CONTEXT&lt;/code&gt; argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:14.17.1 as build
ARG BUILD_CONTEXT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to copy over the source code into the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WORKDIR /base
COPY package.json .
COPY yarn.lock .
COPY ./apps/$BUILD_CONTEXT/package.json apps/$BUILD_CONTEXT/
RUN yarn install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are defining &lt;code&gt;/base&lt;/code&gt; as our working directory. All our code goes here.&lt;br&gt;
In the next 3 lines, we are copying &lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;yarn.lock&lt;/code&gt; and the &lt;code&gt;package.json&lt;/code&gt; file of the particular app into the image.&lt;br&gt;
Then we run &lt;code&gt;yarn install&lt;/code&gt; to install our dependencies.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Interesting thing to note here is, we could have copied our entire source code into the container in one go. The reason we don't do that is, every instruction in a Dockerfile is cached in the background. By copying just the &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;yarn.lock&lt;/code&gt; files, we can take advantage of this caching system. These files rarely change in the course of the project, so if we install our dependencies once, and if they don't change the next time we build, Docker will use the existing cache and not run &lt;code&gt;yarn install&lt;/code&gt; every-time we build. This will significantly reduce our build times.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step is to copy the app's code and build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;COPY ./apps/$BUILD_CONTEXT apps/$BUILD_CONTEXT
RUN yarn build:$BUILD_CONTEXT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, as of now our &lt;code&gt;Dockerfile&lt;/code&gt; looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:14.17.1 as build
ARG BUILD_CONTEXT

WORKDIR /fe
COPY package.json .
COPY yarn.lock .
COPY ./apps/$BUILD_CONTEXT/package.json apps/$BUILD_CONTEXT/
RUN yarn install
COPY ./apps/$BUILD_CONTEXT apps/$BUILD_CONTEXT
RUN yarn build:$BUILD_CONTEXT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our compilation step is complete. Our React app has been compiled into static files and they are inside the image. But order to serve them, we need a web server. We could use &lt;code&gt;node&lt;/code&gt; as our web server as we are already using it for building. But a node image is significantly bigger(close to a gigabyte) in size compared to a traditional web server like &lt;a href="https://www.nginx.com/"&gt;nginx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We'll add nginx configuration as part our build step in our &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM nginx:stable-alpine
ARG BUILD_CONTEXT
COPY --from=build /fe/apps/$BUILD_CONTEXT/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first two lines are self-explanatory.&lt;br&gt;
The third line is where is gets interesting. If you see the first line of our &lt;code&gt;Dockerfile&lt;/code&gt;, it says &lt;code&gt;as build&lt;/code&gt; next to our node version. This is done so we can refer to this as context in later parts of our build steps.&lt;br&gt;
We have our compiled React app in the &lt;code&gt;node&lt;/code&gt; image. We need to take those files and put it in our &lt;code&gt;nginx&lt;/code&gt; image. That's what this line does. It copies the &lt;code&gt;/fe/apps/$BUILD_CONTEXT/build&lt;/code&gt; folder from &lt;code&gt;build&lt;/code&gt; context into &lt;code&gt;/usr/share/nginx/html&lt;/code&gt;.&lt;br&gt;
The last line is to start our &lt;code&gt;nginx&lt;/code&gt; web server.&lt;/p&gt;

&lt;p&gt;The next step is to define an &lt;code&gt;nginx.conf&lt;/code&gt; config file nginx can use to run our app, which looks like this. This is a barebones nginx web server configuration which can be used for any frontend application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server {

  listen 80;

  location / {
    root   /usr/share/nginx/html;
    index  index.html index.htm;
    try_files $uri $uri/ /index.html;
  }

  error_page   500 502 503 504  /50x.html;

  location = /50x.html {
    root   /usr/share/nginx/html;
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our entire &lt;code&gt;Dockerfile&lt;/code&gt; now looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#build
FROM node:14.17.1 as build
ARG BUILD_CONTEXT

WORKDIR /base
COPY package.json .
COPY yarn.lock .
COPY ./apps/$BUILD_CONTEXT/package.json apps/$BUILD_CONTEXT/
RUN yarn install
COPY ./apps/$BUILD_CONTEXT apps/$BUILD_CONTEXT
RUN yarn build:$BUILD_CONTEXT

#webserver
FROM nginx:stable-alpine
ARG BUILD_CONTEXT
COPY --from=build /base/apps/$BUILD_CONTEXT/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This setup is enough for us to build a Docker image of our app and run by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run &amp;lt;image-name&amp;gt; -e BUILD_CONTEXT=admin/product
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to go a bit further and add in an orchestration step using &lt;a href="https://docs.docker.com/compose/"&gt;docker-compose&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this, we need to add a &lt;code&gt;docker-compose.yml&lt;/code&gt; file in the root of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '3'

services:
  admin:
    container_name: admin
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_CONTEXT=admin
    ports:
      - '8080:80'
  product:
    container_name: product
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_CONTEXT=product
    ports:
      - '8082:80'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We define two services here, &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;product&lt;/code&gt; for our two apps.&lt;br&gt;
In our service section, we define three properties, &lt;code&gt;container_name&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;ports&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;container_name&lt;/code&gt; defines the name of the container&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;context&lt;/code&gt; in &lt;code&gt;build&lt;/code&gt; refers to the directory this build needs to be executed on, &lt;code&gt;dockerfile&lt;/code&gt; refers to the name and location of the &lt;code&gt;Dockerfile&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; refer to build time arguments. These are the arguments that will be used in the &lt;code&gt;Dockerfile&lt;/code&gt; &lt;code&gt;ARG&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ports&lt;/code&gt; lets us map ports on the host machine to the container port. Value &lt;code&gt;8082:80&lt;/code&gt; indicates that any request on port 8082 on host machine will be routed to port 80 on the container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Awesome! We are done with our docker-compose setup. Final thing left to do is run and see for ourselves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;command is used to build out both our apps. This will compile our app using instructions from our &lt;code&gt;Dockerfile&lt;/code&gt; and create an image.&lt;/p&gt;

&lt;p&gt;To run these images,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will take our images and create containers and run them.&lt;/p&gt;

&lt;p&gt;Now we can go to &lt;code&gt;http://localhost:8080&lt;/code&gt; and &lt;code&gt;http://localhost:8082&lt;/code&gt; to see our apps in action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;What we have now is a very simple implementation of workspace and docker setup. We can use this as a starting point and start adding backend services and component libraries to this setup. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are interested in setting up a component library from scratch, check out my article on &lt;a href="https://dev.to/sidv93/component-library-setup-with-react-typescript-and-rollup-onj"&gt;Setting up a component library with React, TypeScript and Rollup&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can add new projects into the &lt;code&gt;apps&lt;/code&gt; folder and yarn would take care of the dependency resolutions for us. &lt;/p&gt;

&lt;p&gt;The source code for this setup can be found &lt;a href="https://github.com/sidv93/yarn-worspace-docker"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>yarn</category>
      <category>docker</category>
      <category>react</category>
    </item>
    <item>
      <title>How create Glitch Effect ü§ñ Pure CSS</title>
      <author>Roden</author>
      <pubDate>Fri, 20 Aug 2021 17:56:07 +0000</pubDate>
      <link>https://dev.to/kerthin/how-create-pure-css-glitch-effect-530p</link>
      <guid>https://dev.to/kerthin/how-create-pure-css-glitch-effect-530p</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Today I would like to talk about how to make a Glitch effect using CSS. To do this, I will use one of the most popular options. This is when we use &lt;code&gt;pseudo-elements&lt;/code&gt; to create &lt;code&gt;copies&lt;/code&gt; of the main element.&lt;/p&gt;

&lt;h1&gt;Demo&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/RodenKerthin/embed/bmrbJW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;HTML&lt;/h1&gt;

&lt;p&gt;In the HTML section, we need to create just 1 tag, inside which you should write the text, and also duplicate it in the &lt;code&gt;data-text&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like that:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;glitch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Glitch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Glitch&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can specify any tag. It is not necessary to use text tags.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQxcyV3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dffcyd5hxixnjxzbc3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQxcyV3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dffcyd5hxixnjxzbc3w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;CSS&lt;/h1&gt;

&lt;p&gt;We need to take into account that the &lt;code&gt;pseudo-elements&lt;/code&gt; of our text should be located approximately at the same &lt;code&gt;position&lt;/code&gt; as the &lt;code&gt;main text&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, for &lt;code&gt;pseudo-elements&lt;/code&gt;, we need to specify the &lt;code&gt;position&lt;/code&gt; property with the value &lt;code&gt;absolute&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;glitch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our text and its copies are on top of each other.&lt;/p&gt;

&lt;p&gt;Before we continue creating the Glitch effect, it would be nice to add styles to our text to make it look more beautiful.&lt;/p&gt;

&lt;p&gt;To do this, I will make our &lt;code&gt;sans-serif&lt;/code&gt; font, the font size is &lt;code&gt;larger&lt;/code&gt;, we create &lt;code&gt;shadows&lt;/code&gt; and a &lt;code&gt;linear gradient&lt;/code&gt; that completely &lt;code&gt;copies&lt;/code&gt; our text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;glitch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sans&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;repeating&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;005792&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;005792&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fff&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fff&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PHjScgaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x019i2uhfa2vxr3j2g9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PHjScgaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x019i2uhfa2vxr3j2g9w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Changing pseudo-elements&lt;/h3&gt;

&lt;p&gt;Now we need to shift each of our pseudo-elements in different directions. This is necessary in order to create the effect of shifting the text, as it happens during glitches.&lt;/p&gt;

&lt;p&gt;To do this, we need to &lt;code&gt;move&lt;/code&gt; each pseudo-element in the opposite direction from &lt;code&gt;each other&lt;/code&gt; by a couple of &lt;code&gt;pixels&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I decided to make the color of the pseudo-elements shadows the same as the main one, but you can make them different, in order to achieve the effect of a broken TV using &lt;code&gt;black&lt;/code&gt; and &lt;code&gt;blue&lt;/code&gt; colors.&lt;/p&gt;

&lt;h3&gt;Clip&lt;/h3&gt;

&lt;p&gt;Next, we need to use the clip property.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The clip property defines the area of the positioned element in which its contents will be displayed. Anything that doesn't fit in this area will be cut off and become invisible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rTpMkAmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owlgh73z21ifex7v9kjb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTpMkAmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owlgh73z21ifex7v9kjb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use this property to alternately display the &lt;code&gt;cropped parts&lt;/code&gt; of our pseudo elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;clip: rect(Y1, X1, Y2, X2);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The values are the distance from the edge of the element to the clipping area.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;clip: rect(&lt;code&gt;top&lt;/code&gt;/&lt;code&gt;right&lt;/code&gt;/&lt;code&gt;bottom&lt;/code&gt;/&lt;code&gt;left&lt;/code&gt;);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, in order to &lt;code&gt;completely crop&lt;/code&gt; our pseudo-elements, we set an indent of &lt;code&gt;900 pixels&lt;/code&gt; on the right side. (You can use any value depending on the size of your element)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$secondaryColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$primaryColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is very important that the background property of pseudo-elements is exactly the same as that of the background, so that they merge and there are no problems with the display.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o65xbm6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz0wfmknvx3e87nm3rgi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o65xbm6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz0wfmknvx3e87nm3rgi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Clip Animation&lt;/h3&gt;

&lt;p&gt;In order to qualitatively animate our elements, we need to create a step-by-step animation, where we will change the &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;third&lt;/code&gt; values in the &lt;code&gt;clip&lt;/code&gt; property, so that our pseudo-elements are displayed only in parts during the animation from top to bottom.&lt;/p&gt;

&lt;p&gt;In this case, the &lt;code&gt;second&lt;/code&gt; and &lt;code&gt;fourth&lt;/code&gt; values of the &lt;code&gt;clip&lt;/code&gt; property must be unchanged.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;$i&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt; &lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;))}{&lt;/span&gt;
            &lt;span class="na"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Personally, I use a &lt;code&gt;20-step&lt;/code&gt; animation, but you can specify any number of steps, since the animation is still &lt;code&gt;random&lt;/code&gt; and generates changes in the values of the &lt;code&gt;clip&lt;/code&gt; property itself. The more steps you specify, the &lt;code&gt;faster&lt;/code&gt; the animation will be.&lt;/p&gt;

&lt;p&gt;And now we just need to attach our animation to our two pseudo-elements. You also need to specify a different animation playback time for each pseudo-element. To achieve a more chaotic glitch animation effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's all.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/RodenKerthin/embed/bmrbJW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Well, that's it. This was a very simple and very popular way to create a glitch effect on pure CSS. Thank you very much for your time on my post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't switch.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n47fwcZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xTiQyohZdXceENvkcM/giphy.gif%3Fcid%3D790b76118a5d78e9e679d4656834dea41a593b3e721efb63%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n47fwcZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xTiQyohZdXceENvkcM/giphy.gif%3Fcid%3D790b76118a5d78e9e679d4656834dea41a593b3e721efb63%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>Starting a project with Svelte and Azure Static Web Apps</title>
      <author>Christopher Harrison</author>
      <pubDate>Fri, 20 Aug 2021 17:47:26 +0000</pubDate>
      <link>https://dev.to/geektrainer/starting-a-project-with-svelte-and-azure-static-web-apps-1da2</link>
      <guid>https://dev.to/geektrainer/starting-a-project-with-svelte-and-azure-static-web-apps-1da2</guid>
      <description>&lt;p&gt;I love &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=academic-39081-chrhar"&gt;Azure Static Web Apps&lt;/a&gt;. Yes, I know, I work for Microsoft, so you're probably thinking I would say that regardless. However I really do use what I feel works best for me, and Static Web Apps absolutely fits the bill. It's a wonderful service for hosting full-stack web applications. Static Web Apps uses &lt;a href="https://docs.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=academic-39081-chrhar"&gt;Azure Functions&lt;/a&gt; for server-side code, and provides wonderful functionality including &lt;a href="https://docs.microsoft.com/azure/static-web-apps/authentication-authorization"&gt;authentication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When it comes time to start doing local development, the initial setup can require a couple of steps as there's a fair bit being provided to you by the service. I want to explore how to setup a project for Azure Static Web Apps. I'm going to use &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;, my current favorite front-end framework, but the steps are similar to any other framework you may choose.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This blog assumes you have &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; already installed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#install-azure-functions-core-tools"&gt;
  &lt;/a&gt;
  Install Azure Functions Core Tools
&lt;/h2&gt;

&lt;p&gt;Azure Functions is the serverless offering from Azure. By using Azure Functions Core Tools, you can run the service locally on your system for development. The docs show how to &lt;a href="https://www.npmjs.com/package/azure-functions-core-tools"&gt;install Azure Functions Core Tools&lt;/a&gt;. I personally use &lt;a href="https://docs.microsoft.com/windows/wsl/about?WT.mc_id=academic-39081-chrhar"&gt;Windows Subsystem for Linux (WSL)&lt;/a&gt; for all my development. I was able to install by opening a terminal for WSL (Ubuntu in my case) and running the NPM command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; azure-functions-core-tools@3 &lt;span class="nt"&gt;--unsafe-perm&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bootstrap-the-project"&gt;
  &lt;/a&gt;
  Bootstrap the project
&lt;/h2&gt;

&lt;p&gt;It seems every front-end framework has its own bootstrapping tool. Svelte is no different. To create the project we'll use &lt;a href="https://github.com/Rich-Harris/degit"&gt;degit&lt;/a&gt; and the template provided by Svelte. In a terminal window, execute the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx degit sveltejs/template svelte-static-web-apps
&lt;span class="nb"&gt;cd &lt;/span&gt;svelte-static-web-apps
npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-the-api"&gt;
  &lt;/a&gt;
  Create the API
&lt;/h2&gt;

&lt;p&gt;With the front-end project created, let's create the back-end. We'll do this by using &lt;code&gt;func&lt;/code&gt;, which is the command-line tool for managing Azure Functions, and was installed with the core tools. The two commands we'll use are &lt;code&gt;func init&lt;/code&gt; to create the project, and &lt;code&gt;func new&lt;/code&gt; to create a new Azure Function. While we won't use the function, I want to at least demo the process.&lt;/p&gt;

&lt;p&gt;Typically, Azure Functions are stored in a folder named &lt;em&gt;api&lt;/em&gt;. To create the folder and project, run the following in the same terminal window.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;func init api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then select the runtime and language. Choose &lt;em&gt;Node&lt;/em&gt; (option 3) and &lt;em&gt;JavaScript&lt;/em&gt; (option 1).&lt;/p&gt;

&lt;p&gt;To create the first function, run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;api
func new
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select &lt;em&gt;HTTP trigger&lt;/em&gt; (option 10) for the template, and specify &lt;em&gt;sample&lt;/em&gt; for the name of the trigger.&lt;/p&gt;

&lt;p&gt;You have now setup Azure Functions for the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-azure-static-web-apps-cli"&gt;
  &lt;/a&gt;
  Add Azure Static Web Apps CLI
&lt;/h2&gt;

&lt;p&gt;As highlighted earlier, Static Web Apps includes some neat functionality including authentication. If you are going to develop for the platform you'll very likely want to take advantage of this. In addition, because the server-side is running in Azure Functions, local development can be a little trickier because of how the services will run on your system. Fortunately &lt;a href="https://github.com/Azure/static-web-apps-cli#readme"&gt;Azure Static Web Apps CLI&lt;/a&gt; will manage all of this for us, including giving us a great utility to mock the authentication process.&lt;/p&gt;

&lt;p&gt;You can install it as a dev dependency using npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @azure/static-web-apps-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update-the-start-script"&gt;
  &lt;/a&gt;
  Update the start script
&lt;/h2&gt;

&lt;p&gt;Finally we'll need to update the &lt;em&gt;dev&lt;/em&gt; script. Traditionally &lt;em&gt;dev&lt;/em&gt; or &lt;em&gt;start&lt;/em&gt; scripts launch the project for development purposes. We're going to update the &lt;em&gt;dev&lt;/em&gt; script to start everything we need - Svelte's dev server, our Azure Function, and Azure Static Web Apps to tie everything together.&lt;/p&gt;

&lt;p&gt;Open the project directory in Visual Studio Code by returning to the terminal window and running the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; .. &lt;span class="c"&gt;# To return to the root folder of the project&lt;/span&gt;
code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside Visual Studio Code, open &lt;em&gt;package.json&lt;/em&gt;. Replace the &lt;em&gt;dev&lt;/em&gt; script with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rollup -c -w &amp;amp; swa start http://localhost:5000 --api ./api"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file, and your project is now ready to go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-the-project"&gt;
  &lt;/a&gt;
  Run the project
&lt;/h2&gt;

&lt;p&gt;With everything setup, the last thing to do is run the project! Inside of Visual Studio Code, you can open a terminal window by selecting &lt;em&gt;Terminal&lt;/em&gt; &amp;gt; &lt;em&gt;New Terminal&lt;/em&gt;. In the newly opened terminal, run the following to start the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;You have now setup a project to use Svelte and Azure Static Web Apps with Azure Functions. If you want to continue to explore, you can see how to &lt;a href="https://docs.microsoft.com/learn/modules/publish-app-service-static-web-app-api/?WT.mc_id=academic-39081-chrhar"&gt;deploy the app&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/learn/modules/publish-static-web-app-authentication/?WT.mc_id=academic-39081-chrhar"&gt;manage authentication&lt;/a&gt;. You can also checkout &lt;a href="https://github.com/GeekTrainer/svelte-static-web-apps?WT.mc_id=academic-39081-chrhar"&gt;the sample&lt;/a&gt; I built while putting together this blog. And of course we're doing plenty of other &lt;a href="https://docs.microsoft.com/javascript/?WT.mc_id=academic-39081-chrhar"&gt;fun stuff with JavaScript&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>web</category>
      <category>javascript</category>
      <category>svelte</category>
    </item>
    <item>
      <title>PHP Laravel Development with Kubernetes using DevSpace - Developer Edition</title>
      <author>Rich Burroughs</author>
      <pubDate>Fri, 20 Aug 2021 17:43:07 +0000</pubDate>
      <link>https://dev.to/loft/php-laravel-development-with-kubernetes-using-devspace-developer-edition-305a</link>
      <guid>https://dev.to/loft/php-laravel-development-with-kubernetes-using-devspace-developer-edition-305a</guid>
      <description>&lt;p&gt;by Levent Ogut&lt;/p&gt;

&lt;p&gt;Kubernetes is an excellent open-source container orchestration platform that brings automatic scaling, automatic recovery, observability, and many more features. Since it differs from traditional operations, it has changed the development and deployment workflows as well. Debugging an application on Kubernetes can be a challenge. DevSpace is a tool that helps you develop, deploy, troubleshoot simple or complex applications. We will use a Laravel project to demonstrate its features; Laravel is a popular framework used by the PHP community with great features like extensibility, inheritance, and reusability with high customization options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;We will look at ways to deploy a Laravel based application into a Kubernetes cluster for development and production environments. We will develop our application while the application is running in Kubernetes as if we are developing locally. And we will be able to troubleshoot our application in real-time with ease.&lt;/p&gt;

&lt;p&gt;The desired setup uses four containers, in three pods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP-FPM container, which processes all the PHP assets.&lt;/li&gt;
&lt;li&gt;Nginx container, which serves static files and acts as a reverse proxy for the PHP assets.&lt;/li&gt;
&lt;li&gt;MySQL container, as the database.&lt;/li&gt;
&lt;li&gt;Redis container, as session and cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-devspace"&gt;
  &lt;/a&gt;
  Introduction to DevSpace
&lt;/h2&gt;

&lt;p&gt;Continuous Delivery is a challenge while developing on Kubernetes. Without using a special tool, you need to build and deploy every time code or assets change. &lt;a href="https://devspace.sh/"&gt;DevSpace&lt;/a&gt; handles this seamlessly either by synchronizing files and hot reload of the container in question or automatically rebuilding and deploying the image(s) required. DevSpace allows you to develop in a Kubernetes cluster as if you are developing in your local machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feature-highlights"&gt;
  &lt;/a&gt;
  Feature Highlights
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Agile development on local and remote Kubernetes clusters&lt;/strong&gt;. Execution of entire continuous development and deployment pipeline, and a single command to deploy all components of your application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Declarative configuration kept in source code&lt;/strong&gt;, in the devspace.yaml file. All of the development, deployment, and pre/post-deployment actions are defined in a single file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hot Reloading for faster feedback&lt;/strong&gt;. Instead of building and re-deploying artifacts, DevSpace allows you to use high-performance and bi-directional file synchronization. This allows changes to trigger a hot-reload on the deployed container. All of these features are highly configurable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Extensibility&lt;/strong&gt;. You can extend the functionality of DevSpace via the plugin system. Hooks and commands are also built-in constructs; you can expand the functionality heavily used in CI/CD pipelines.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easy clean Up&lt;/strong&gt;. You can delete the resources created via &lt;code&gt;devspace purge\&lt;/code&gt; in a single simple step.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Client Only&lt;/strong&gt;. DevSpace doesn't require server/cluster side components. A single executable on a local machine is sufficient to develop, troubleshoot and deploy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#requirements-and-setting-up-development-environment"&gt;
  &lt;/a&gt;
  Requirements and Setting Up Development Environment
&lt;/h2&gt;

&lt;p&gt;The following tools should be installed on your local development machine:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kubectl, documentation &lt;a href="https://kubernetes.io/docs/tasks/tools/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Helm, documentation &lt;a href="https://helm.sh/docs/intro/install/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;DevSpace, installation instructions &lt;a href="https://devspace.sh/cli/docs/getting-started/installation"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#developing-with-devspace"&gt;
  &lt;/a&gt;
  Developing with DevSpace
&lt;/h2&gt;

&lt;p&gt;First, let's start with the code. Clone the repository to your local development machine as follows. This code includes a vanilla Laravel installation, a Dockerfile, and a devspace.yaml prepopulated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git@github.com:loft-sh/devspace-php-laravel-nginx.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy .env.example to .env.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp&lt;/span&gt; .env.example .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open the .env file and modify where necessary, like adjusting port numbers if needed.&lt;/p&gt;

&lt;p&gt;After this, we can generate the Laravel APP_KEY variable via the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace run generate-key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Review the variables by running the &lt;code&gt;devspace list vars&lt;/code&gt; command, and set variables where necessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace list vars
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DevSpace will ask you a few questions regarding the image repository and other variables not defined in the .env file, and then show the output of the variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Variable              Value                                                
 APP_DEBUG             true                                                 
 APP_IMAGE             leventogut/php-laravel-nginx-devspace                
 APP_KEY               xxxxxxxxxxxxxxxx  
 ASSET_VOLUME_NAME     static-asset-volume                                  
 ASSET_VOLUME_SIZE     1Gi                                                  
 DB_DATABASE           laravel                                              
 DB_HOST               mysql                                                
 DB_MYSQL_VERSION      8.0.23                                               
 DB_PASSWORD           xxxxxxxxxxxxxxxx                                     
 DB_PORT               3306                                                 
 DB_ROOT_PASSWORD      xxxxxxxxxxxxxxxx                                     
 DB_USERNAME           laravel                                              
 NGINX_CONFIG_HASH     740941                                               
 NGINX_IMAGE_VERSION   1.9                                                  
 REDIS_PASSWORD        xxxxxxxxxxxxxxxx                                    
 REDIS_VERSION         6.0.12  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-devspace-dev"&gt;
  &lt;/a&gt;
  Running devspace dev
&lt;/h3&gt;

&lt;p&gt;DevSpace is context-aware; it follows your Kubernetes config to determine the Kubernetes cluster to deploy on.¬† However, It is good practice to set the context and namespace to use with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace use context docker-desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[info]   Your kube-context has been updated to 'docker-desktop'
         To revert this operation, run: devspace use context maple-staging

[done] ‚àö Successfully set kube-context to 'docker-desktop'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace use namespace laravel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[info]   The default namespace of your current kube-context 'docker-desktop' has been updated to 'laravel'
         To revert this operation, run: devspace use namespace 

[done] ‚àö Successfully set default namespace to 'laravel'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have all the variables and the configs, we can start in-cluster development:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DevSpace will build the artifacts we have defined in the &lt;code&gt;devspace.yaml&lt;/code&gt;, deploy all components, and start log streaming from the configured containers. This might take a few minutes.&lt;/p&gt;

&lt;p&gt;In a few minutes, DevSpace will open a browser window showing a login screen. Previously, we have installed the laravel/ui package to test MySQL and Redis. Simply register as a new user, and you will be redirected to the index page. The index page has several links, including a link to the ping/pong route we will use in a few steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_X3LIXCc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4hb4shgy5o9eeaadbx0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_X3LIXCc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4hb4shgy5o9eeaadbx0.png" alt="Screenshot of the PHP app's UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h3&gt;

&lt;p&gt;At this stage, we have deployed our application into the Kubernetes cluster, and DevSpace is watching any changes on the project directory.&lt;/p&gt;

&lt;p&gt;Now, having started DevSpace in development mode, we can change our code and see the immediate effect on our application that is running in the Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;Open the web.php file under the routes directory with your favorite editor. And paste the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ping'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"pong"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any asset added to the repo folder will also be synced (according to the sync rules defined) to the container.&lt;/p&gt;

&lt;p&gt;At this stage, you can try adding controllers, routes, dependencies and observe the ease of development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#port-forwarding-and-reverse-port-forwarding"&gt;
  &lt;/a&gt;
  Port Forwarding and Reverse Port Forwarding
&lt;/h3&gt;

&lt;p&gt;You can reach the application via port forwarding. These can be defined in the &lt;code&gt;devspace.yaml&lt;/code&gt; file. In the current configuration, the Nginx container's port 80 is forwarded to local port 8080. The browser will be automatically opened after a successful deployment and start of the containers.&lt;/p&gt;

&lt;p&gt;You can configure reverse port forwarding as well, which is very useful for certain debugging tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h3&gt;

&lt;p&gt;Our sample &lt;code&gt;devspace.yaml&lt;/code&gt; includes some Laravel and MySQL-specific commands to ease development workflow.&lt;/p&gt;

&lt;p&gt;You can run any artisan, composer, php, and npm commands and additionally drop into a MySQL shell with a single mysql command.&lt;/p&gt;

&lt;p&gt;You can list available commands via:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace list commands
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Name           Command                                                            Description
 artisan        devspace enter -c php -- php artisan                               Entry point for artisan commands.
 composer       devspace enter -c php -- composer                                  Entry point for composer commands.
 php            devspace enter -c php -- php                                       Entry point for PHP commands.
 npm            devspace enter -c php -- npm                                       Entry point for NPM commands.
 generate-key   TMP_FILE=.devspace/app_key.tmp &amp;amp;&amp;amp; docker run --rm -v $PWD:/ap...   Generate APP_KEY.
 mysql          devspace enter -c mysql -- mysql -h'mysql' -P'3306' -u'larave...   Enter to MySQL shell.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try these commands to get familiar with them in your workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://devspace.sh/cli/docs/configuration/hooks/basics"&gt;Hooks&lt;/a&gt; are a quite valuable feature of DevSpace. With hooks, you can run commands before and after certain deployments.&lt;/p&gt;

&lt;p&gt;We have defined several hooks in the devspace.yaml file, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Changing MySQL user and password&lt;/li&gt;
&lt;li&gt;Running &lt;code&gt;npm run watch&lt;/code&gt; on the PHP container.&lt;/li&gt;
&lt;li&gt;Reloading Nginx to re-read the configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-production"&gt;
  &lt;/a&gt;
  Deploying to Production
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;devspace deploy&lt;/code&gt; command will deploy our application into the environment we define. DevSpace configuration allows us to modify and alter our parameters based on profiles. This flexibility brings numerous configuration options for development, staging, production environments. DevSpace configuration can hold all different parameters and configurations for each environment. Generally speaking, it is a good practice to create a production profile for deployment, which will remove troubleshooting aids and set parameters accordingly.&lt;/p&gt;

&lt;p&gt;Our prepared &lt;code&gt;devspace.yaml&lt;/code&gt; consists of a production profile that will remove the additions we have made to make developing and troubleshooting easy.&lt;/p&gt;

&lt;p&gt;Deploy with production profile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace deploy &lt;span class="nt"&gt;-p&lt;/span&gt; production
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#troubleshooting-with-devspace"&gt;
  &lt;/a&gt;
  Troubleshooting with DevSpace
&lt;/h2&gt;

&lt;p&gt;Troubleshooting and debugging are pretty straightforward with DevSpace. DevSpace provides aid for the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;Entering into containers&lt;/li&gt;
&lt;li&gt;Running commands inside the containers&lt;/li&gt;
&lt;li&gt;Interactive mode&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#entering-to-and-working-with-containers"&gt;
  &lt;/a&gt;
  Entering to and Working with Containers
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;devspace enter&lt;/code&gt; command allows you to open a shell to any of the running containers by providing the container name, so you don't have to deal with the copy/paste of long pod names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace enter &lt;span class="nt"&gt;-c&lt;/span&gt; php
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[info]   Using namespace 'default'
[info]   Using kube context 'docker-desktop'
[info]   Opening shell to pod:container app-0:php
root@app-0:/var/www/html# 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a container is not specified, a selector will be displayed, and you can choose from the available containers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;? Which pod do you want to open the terminal for?
  [Use arrows to move, type to filter]
&amp;gt; redis-master-0:redis  app-0:nginx
  app-0:php
  mysql-0:mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;As you can execute any command in the container, running the tests you have for the application is a breeze.&lt;/p&gt;

&lt;p&gt;You can easily run phpunit or artisan test commands for running your tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace run php ./vendor/bin/phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[info]   Using namespace 'default'
[info]   Using kube context 'docker-desktop'
[info]   Opening shell to pod:container app-0:php
PHPUnit 9.5.3 by Sebastian Bergmann and contributors.

.F                                                                  2 / 2 (100%)

Time: 00:00.122, Memory: 20.00 MB

There was 1 failure:

1) Tests\Feature\ExampleTest::testBasicTest
Expected status code 200 but received 302.
Failed asserting that 200 is identical to 302.

/var/www/html/vendor/laravel/framework/src/Illuminate/Testing/TestResponse.php:187
/var/www/html/tests/Feature/ExampleTest.php:19

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's run &lt;code&gt;artisan test&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace run artisan &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[info]   Using namespace 'default'
[info]   Using kube context 'docker-desktop'
[info]   Opening shell to pod:container app-0:php

   PASS  Tests\Unit\ExampleTest
  ‚úì basic test

   FAIL  Tests\Feature\ExampleTest
  ‚®Ø basic test

  ---

  ‚Ä¢ Tests\Feature\ExampleTest &amp;gt; basic test
  Expected status code 200 but received 302.
  Failed asserting that 200 is identical to 302.

  at tests/Feature/ExampleTest.php:19
     15‚ñï     public function testBasicTest()
     16‚ñï     {
     17‚ñï         $response = $this-&amp;gt;get('/');
     18‚ñï 
  ‚ûú  19‚ñï         $response-&amp;gt;assertStatus(200);
     20‚ñï     }
     21‚ñï }
     22‚ñï 


  Tests:  1 failed, 1 passed
  Time:   0.19s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cicd"&gt;
  &lt;/a&gt;
  CI/CD
&lt;/h2&gt;

&lt;p&gt;DevSpace configuration can hold many profiles and can be used for different deployment options. It is common to see developers use DevSpace for their CI/CD pipeline as well. Deploying your application into the CI/CD pipeline is relatively straightforward. The ability to choose from various profiles makes it a breeze to switch from development to staging and production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clean-up"&gt;
  &lt;/a&gt;
  Clean Up
&lt;/h2&gt;

&lt;p&gt;You can easily clean your environment with the &lt;code&gt;devspace purge\&lt;/code&gt; command. This will be deleting all deployments. Please note that purge will not delete persistent storage(s).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have seen DevSpace in action while developing, deploying, and troubleshooting. We have seen that once DevSpace is configured, it can encompass all deployment options within it. So it can be used for development and deployment to any environment. The ability to change profiles, add new commands, and execute any hooks is advantageous.&lt;/p&gt;

&lt;p&gt;The second part of this series will delve into how to configure DevSpace, and we will go over the many possible configuration options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devspace.sh/cli/docs/introduction"&gt;DevSpace Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@benofthenorth?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ben&lt;/a&gt; on &lt;a href="https://unsplash.com/@benofthenorth?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devspace</category>
      <category>php</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Easiest way to understand Javascript Closure</title>
      <author>khalid ansari</author>
      <pubDate>Fri, 20 Aug 2021 17:36:35 +0000</pubDate>
      <link>https://dev.to/khalid283/easiest-way-to-understand-javascript-closure-7ol</link>
      <guid>https://dev.to/khalid283/easiest-way-to-understand-javascript-closure-7ol</guid>
      <description>&lt;p&gt;Closure is one most discussed topics in javascript for many reasons, but I am going to make it simple to understand. First we will look at the definition of Closure from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A closure is the combination of a function bundled together (enclosed) with references to its surrounding state&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let break it down with the most familiar example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--Home
¬† --Bedroom
¬† --Office Room
¬† --Kitchen
¬† ¬† --Fridge
¬† ¬† ¬† --Penguin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let look at the above structure, A home, and inside it a Bedroom, an Office room since its 2021, and Kitchen. Also, there is a Fridge inside the kitchen. Now consider there is a penguin in the fridge, yay yay they came back due to global warming.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;OfficeRoom&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OfficeRoom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Bedroom&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bedroom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Kitchen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;oven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;oven&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Fridge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bread&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Penguin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oven&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Bedroom&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;OfficeRoom&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="nx"&gt;Penguin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="nx"&gt;Fridge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="nx"&gt;Kitchen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-raw-penguin-endraw-function-can-access"&gt;
  &lt;/a&gt;
  what &lt;code&gt;Penguin()&lt;/code&gt; function can access?
&lt;/h3&gt;

&lt;p&gt;The above is what I converted in javascript code. Let see what penguin has access to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everything in fridge&lt;/li&gt;
&lt;li&gt;Everything in Kitchen&lt;/li&gt;
&lt;li&gt;Everything in Home&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let go from the top, can penguin access the office room, in real-world it can access and may fix some of your bugs, But in the javascript world, it can only call &lt;code&gt;OfficeRoom()&lt;/code&gt; since its a function and it can return anything, same goes for &lt;code&gt;Bedroom()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Moving to &lt;code&gt;Kitchen()&lt;/code&gt; it can access &lt;code&gt;oven&lt;/code&gt; variable and in &lt;code&gt;Fridge()&lt;/code&gt; it can access &lt;code&gt;bread&lt;/code&gt; variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-lets-look-at-the-definition-of-closure"&gt;
  &lt;/a&gt;
  Now let's look at the definition of closure
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A closure is the combination of a function bundled together (enclosed) with references to its surrounding state&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Kitchen()&lt;/code&gt; function bundled together with reference to its surrounding state that is &lt;code&gt;Bedroom()&lt;/code&gt; and &lt;code&gt;OfficeRoom()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Fridge()&lt;/code&gt; function bundled together with reference to its surrounding state that is &lt;code&gt;oven&lt;/code&gt;. And everything it has referenced from &lt;code&gt;Home()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Penguin()&lt;/code&gt; function bundled together with reference to its surrounding state that is &lt;code&gt;bread&lt;/code&gt;. And everything it has referenced from &lt;code&gt;Fridge()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In hierarchy it will bundle reference to function until Global scope.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we have three closure, and let see what chrome dev tool says.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GUtMP-EN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tyk564xh6m6c5xizjhb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUtMP-EN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tyk564xh6m6c5xizjhb.png" alt="Debugger screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every function that bundled together with references to its surrounding state is closure. In fact, closure is created every time a function is created.&lt;/p&gt;

&lt;p&gt;For more read &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>RegEx Basics in Ruby</title>
      <author>Joe Christensen</author>
      <pubDate>Fri, 20 Aug 2021 17:34:57 +0000</pubDate>
      <link>https://dev.to/christensenjoe/regex-basics-in-ruby-mfn</link>
      <guid>https://dev.to/christensenjoe/regex-basics-in-ruby-mfn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xNN3N2qj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfeb29tti4oe0efwgu65.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xNN3N2qj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfeb29tti4oe0efwgu65.jpeg" alt="RegEx Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-regex"&gt;
  &lt;/a&gt;
  What is Regex?
&lt;/h1&gt;

&lt;p&gt;Regular expression, or RegEx, is a a sequence of characters that specify some form of search or filtration pattern. Created in the 1950s, RegEx is a way for programmers to quickly and easily search, validate, and filter strings of characters. Using RegEx, a multiple line, complex, validation function can be condensed into a smaller pattern of characters. Due to its shown usefulness, multiple programming languages have some form of RegEx implementation.&lt;/p&gt;

&lt;p&gt;As an example, let's look at emails. When someone signs up for a new account on a website, many websites ask for an email. If the email is invalid, say its missing an &lt;strong&gt;@&lt;/strong&gt; or &lt;strong&gt;.com&lt;/strong&gt;, the website will give the user an error, stating such. But how does the website actually check that the email is invalid? Well, a poor programmer would have to create an incredibly complex validation function that splits the string that the user typed in up, checks every part, makes sure the &lt;strong&gt;@&lt;/strong&gt; and &lt;strong&gt;.com&lt;/strong&gt; are present and in the right positions, and so on. Now imagine having to write a function like this every time you needed user input to be validated. That's where RegEx really shines. These crazy, multi-line functions can be condensed into a small &lt;strong&gt;regular expression&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;One of the major downsides of RegEx, however, is also due to its ability to condense lots of code into a small expression. RegEx is confusing! A regular expression looks like a random string of characters all mushed together, making it really daunting for new programmers to try and tackle learning it. In this article, we'll go over some of the more useful parts about Ruby's RegEx.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h1&gt;

&lt;p&gt;There is a lot going on in any given RegEx expression, but there is a method to the madness! We'll be going through some of the basics of Ruby RegEx expressions to hopefully see some of that method. As you're following along &lt;a href="//rubular.com"&gt;Rubular&lt;/a&gt; is a great tool to use. It allows you to write your own RegEx expressions to manipulate a given string. It also has a handy list of useful RegEx expressions.&lt;/p&gt;

&lt;p&gt;Here is a basic RegEx expression that finds every letter ranging &lt;code&gt;a-f&lt;/code&gt; in a given string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="sr"&gt;/[a-f]/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go ahead and try it out in Rubular!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#delimiters"&gt;
  &lt;/a&gt;
  Delimiters
&lt;/h2&gt;

&lt;p&gt;For most programming languages, Ruby included, a RegEx expression normally starts and ends with the delimiters &lt;code&gt;/&lt;/code&gt;. These backslashes generally help identify the beginning and end of a regular expression, although there may be some cases where there is more information immediately following the second backslash.&lt;/p&gt;

&lt;p&gt;In our example, you can see the delimiters at the start and end of the expression. This lets the compiler know that everything between these two characters is a RegEx expression.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atoms-and-quantifiers"&gt;
  &lt;/a&gt;
  Atoms and Quantifiers
&lt;/h2&gt;

&lt;p&gt;Starting from the smallest part, an &lt;strong&gt;atom&lt;/strong&gt; is a single point within a RegEx expression that is used to try and manipulate a given string. These atoms have something called &lt;strong&gt;quantifiers&lt;/strong&gt; that are used to show how many times, where, or what, exactly, the atoms are supposed to match on the given string. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metacharacters"&gt;
  &lt;/a&gt;
  Metacharacters
&lt;/h2&gt;

&lt;p&gt;A step up from atoms are &lt;strong&gt;metacharacters&lt;/strong&gt;. These are expressions built into RegEx that help group expressions, while also making use of atoms and quantifiers.&lt;/p&gt;

&lt;p&gt;In our example expressions, the &lt;code&gt;[]&lt;/code&gt; is actually a metacharacter. If you refer back to your Rubular cheat sheet, you can see that &lt;code&gt;[]&lt;/code&gt; with characters inside tries to find matches of that single character in the string. &lt;/p&gt;

&lt;p&gt;As an example, the RegEx &lt;code&gt;/[a]/&lt;/code&gt; will try to find every instance of "a" in the string.&lt;/p&gt;

&lt;p&gt;Our expression is a little more special. We're using something called a &lt;strong&gt;range&lt;/strong&gt;, which is a way to tell RegEx that we want any single character or digit that matches between two characters. Our range &lt;code&gt;[a-f]&lt;/code&gt; is asking RegEx to find &lt;code&gt;a, b, c, d, e, or f&lt;/code&gt; anywhere in our test string. &lt;/p&gt;

&lt;p&gt;This also works for digits. Doing &lt;code&gt;[0-9]&lt;/code&gt; is the same as looking for every instance of &lt;code&gt;0,1,2,3,4,5,6,7,8, or 9&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One final handy thing about this metacharacter is the ability to have multiple ranges.&lt;/p&gt;

&lt;p&gt;Looking back to our example, &lt;code&gt;/[a-f]/&lt;/code&gt; only highlights the lowercase characters a-f. What if we wanted every character, both lowercase and uppercase, in that range to be selected? Well, then we would combine two ranges like so: &lt;code&gt;/[a-fA-F]/&lt;/code&gt;. As you can see, we've added a new range &lt;code&gt;[A-F]&lt;/code&gt; to our original one, using the same set of brackets. This will say to look for any characters from the range a-f &lt;strong&gt;or&lt;/strong&gt; from the range A-F.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;[]&lt;/code&gt; is only one metacharater, and there are &lt;strong&gt;many&lt;/strong&gt;, &lt;strong&gt;many&lt;/strong&gt; more that are commonly used by RegEx. As this was only a light overview, I strongly suggest experimenting with them on your own using the Rubular cheat sheet.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#regex-with-ruby-methods"&gt;
  &lt;/a&gt;
  Regex With Ruby Methods
&lt;/h1&gt;

&lt;p&gt;So, we now know a little about writing RegEx patterns. Now what? How can this actually be used in code? Well, Ruby has a few string mutation methods where the use of RegEx fits perfectly to filter, find, and validate strings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scan"&gt;
  &lt;/a&gt;
  Scan
&lt;/h2&gt;

&lt;p&gt;The first mutation method is the &lt;strong&gt;scan&lt;/strong&gt; method. Calling &lt;code&gt;.scan()&lt;/code&gt; on a string returns an array of &lt;strong&gt;all&lt;/strong&gt; items that match the given input. This is an incredibly useful way to filter through a string, only retaining the data that you want.&lt;/p&gt;

&lt;p&gt;As an example, say you have the string &lt;code&gt;"bat cat dot hat mat eat pat sat bit hit split "&lt;/code&gt; and you want to filter out every word that isn't 3 letters long and ends in &lt;code&gt;"at"&lt;/code&gt;. The easiest way to do this would be using the .scan method like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="s2"&gt;"bat cat dot hat mat eat pat sat bit batter hit split "&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\w+at/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Returns ["bat", "cat", "hat", "mat", "eat", "pat", "sat", "bat"]&lt;/span&gt;

&lt;span class="c1"&gt;# If you want it as a string again, just do .join&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The .scan method is filtering through the string, word for word, using the given RegEx pattern. Our RegEx pattern starts with the metacharacter &lt;code&gt;\w&lt;/code&gt;, which looks for any word character (letter, number, or underscore) at the start of each word. The last part of our expression, the &lt;code&gt;at&lt;/code&gt;, just looks for any instance of "at" in each word in our string. Combining them together with the &lt;code&gt;+&lt;/code&gt;, we get an expression that looks through each word, makes sure the first letter is a word character, and then makes sure that the following two letters are "at".&lt;/p&gt;

&lt;p&gt;One important thing to notice is the last character in the returned array. It's &lt;code&gt;"bat"&lt;/code&gt;, which the .scan method grabbed from the &lt;code&gt;"batter"&lt;/code&gt; word. Since our ruby expression only stated that the first letter be a valid word character and the following two letters be &lt;code&gt;"at"&lt;/code&gt;, nothing stops the scan from just grabbing that valid section from the word.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#match"&gt;
  &lt;/a&gt;
  Match
&lt;/h2&gt;

&lt;p&gt;The second method is the &lt;strong&gt;match&lt;/strong&gt; method. Match returns the first item in a string (in the form of a MatchData object) that matches a given RegEx pattern. More often than not, the Match method is used for input validation. You check to see if a sting contains a given RegEx pattern. If the return value is nil, then the given string doesn't pass the given RegEx pattern.&lt;/p&gt;

&lt;p&gt;As an example, say you have a phone number input on a website and you want to make sure that people are entering 10 numbers. You would do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="s2"&gt;"1234567891"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^\d{10}$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Returns a valid MatchData object containing the string&lt;/span&gt;

&lt;span class="s2"&gt;"123"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^\d{10}$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Returns nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the first string passed has valid numbers, so an object is returned. The second string doesn't, so nil is returned. Using this information, you can easily set up a validation check and response system. &lt;/p&gt;

&lt;p&gt;What exactly is the RegEx pattern that we're using? Well, to start with, the &lt;code&gt;^&lt;/code&gt; symbol means "start of line" and the &lt;code&gt;$&lt;/code&gt; symbol means "end of line". By having them at the start and the end of the expression, we're saying that the given input must match our expression EXACTLY, with no extra characters at the start or end of it. Moving on, the &lt;code&gt;\d&lt;/code&gt; means "any digit", or any number 0-9. It's roughly the same as doing &lt;code&gt;[0-9]&lt;/code&gt;. Finally, the &lt;code&gt;{10}&lt;/code&gt; is saying "exactly 10 of whatever is to the left of me". Since the &lt;code&gt;\d&lt;/code&gt; is to the left, it's saying "exactly 10 &lt;code&gt;\d&lt;/code&gt;", or "exactly 10 digits". All in all, our pattern is asking for exactly 10 digits to be input with nothing before or after it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grep"&gt;
  &lt;/a&gt;
  Grep
&lt;/h2&gt;

&lt;p&gt;Finally, another useful method is &lt;strong&gt;Grep&lt;/strong&gt;. Grep, however, is an Array enumerable method, not a string method. What &lt;code&gt;.grep()&lt;/code&gt; does is take in an array of strings. It will then return a filtered array of strings, comparing each value in the original array to a given RegEx pattern.&lt;/p&gt;

&lt;p&gt;Carrying on from our previous example, say you have a large array of phone numbers, and you &lt;strong&gt;only&lt;/strong&gt; want the &lt;strong&gt;valid&lt;/strong&gt; ones. Using &lt;code&gt;.grep()&lt;/code&gt;, you can filter through the array and get back only the valid numbers like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"1234567891"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"3216549871"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"3456215435"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"12"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"65435"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"9328456214"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^\d{10}$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Returns ["1234567891", "3216549871", "3456215435", "9328456214"] Only the valid phone numbers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, &lt;code&gt;.grep()&lt;/code&gt; is an incredibly useful filtering method for arrays of data. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#closing-statements"&gt;
  &lt;/a&gt;
  Closing Statements
&lt;/h1&gt;

&lt;p&gt;In the end, RegEx is an incredibly powerful, but daunting, tool. As a programmer, you should try to at least familiarize yourself with the basics of RegEx, but don't worry too much about mastering it. If there is a common validation, or filtering expression that you need, like email validation, then someone has probably already created it and shared it online.&lt;/p&gt;

&lt;p&gt;As you try to get more familiar with RegEx, be sure to use &lt;a href="//rubular.com"&gt;Rubular&lt;/a&gt;, &lt;a href="//regexr.com"&gt;Regexr&lt;/a&gt;, or some other online source. Experimenting and messing around with RegEx is by far the best way to learn it. Good luck!&lt;/p&gt;

</description>
      <category>ruby</category>
    </item>
    <item>
      <title>How to write a VERY HIGH quality post on DEV [13 top tips + a bonus ü§Ø!]</title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 20 Aug 2021 17:12:59 +0000</pubDate>
      <link>https://dev.to/inhuofficial/how-to-write-the-highest-quality-posts-on-dev-13-top-tips-cj6</link>
      <guid>https://dev.to/inhuofficial/how-to-write-the-highest-quality-posts-on-dev-13-top-tips-cj6</guid>
      <description>&lt;p&gt;There is a great article on writing high quality posts currently on the feed. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eC-1q7yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N11CuWa7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/550094/828a9054-da2d-4120-8949-7556f6715364.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/how-to-write-a-high-quality-post-on-dev-3me0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to write a high quality post on DEV&lt;/h2&gt;
      &lt;h3&gt;Ella Ang (she/her/elle) for The DEV Team „Éª Aug 20 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#howtodevto&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;It is great and I would suggest going to give that a read. (as you can probably tell, I am being mischievous and stealing post titles from people...again!)&lt;/p&gt;

&lt;p&gt;Following on from that post, I am going to expand on a few things and introduce a few more tips for writing high quality posts on DEV (and elsewhere).&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;in addition&lt;/strong&gt; to the post by &lt;a class="mentioned-user" href="https://dev.to/ellativity"&gt;@ellativity&lt;/a&gt;
, not a replacement for it!&lt;/p&gt;

&lt;p&gt;The tips in this article are ones I wish someone had given me when I first started writing. Oh and there are a few tips in here that will make you much faster at creating articles too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-use-headings-properly"&gt;1. Use Headings properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-create-a-document-outline"&gt;2. Create a document outline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-use-my-editor-if-you-dont-know-markdown"&gt;3. Use my editor if you don't know markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-fill-in-the-blanks-and-make-sure-to-link-to-any-references"&gt;4. Fill in the blanks and make sure to link to any references.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-run-your-article-through-the-hemmingway-app"&gt;5. Run your article through the Hemmingway App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-mind-your-language"&gt;6. Mind your language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-explain-abbreviations-and-acronyms"&gt;7. Explain abbreviations and acronyms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-image-alt-text-a-top-tip"&gt;8. Image alt text, a top tip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9-create-a-contents-section-if-needed"&gt;9. Create a contents section if needed.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10-a-good-cover-image-is-important"&gt;10. A good cover image is important&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#11-refine-your-opening-paragraph"&gt;11. Refine your opening paragraph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12-have-a-promotion-strategy-if-you-want-more-engagement"&gt;12. Have a promotion strategy if you want more engagement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13-pay-attention-to-comments-and-reply"&gt;13. Pay attention to comments (and reply!)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bonus-tip-publish-your-article-on-your-own-site-first-if-you-have-one"&gt;Bonus Tip: Publish your article on your own site first (if you have one)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-use-headings-properly"&gt;
  &lt;/a&gt;
  1. Use Headings properly
&lt;/h2&gt;

&lt;p&gt;Headings help break your article up and make it easier to digest. &lt;/p&gt;

&lt;p&gt;They also help people who use a screen reader orientate themselves in your article.&lt;/p&gt;

&lt;p&gt;There are a couple of things to note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;headings should start at level 2 on DEV (as your article title is level 1).&lt;/li&gt;
&lt;li&gt;You should not skip heading levels (see below)&lt;/li&gt;
&lt;li&gt;When writing your document outline start with the main headings, it will help you organise your thoughts and make writing easier.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1a-headings-example-this-article"&gt;
  &lt;/a&gt;
  1a. Headings example (this article)
&lt;/h3&gt;

&lt;p&gt;In Markdown the number of &lt;code&gt;#&lt;/code&gt;s correspond to the heading level.&lt;/p&gt;

&lt;p&gt;As such you will see the following structure only uses levels 2 and 3 (more on that after this example).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## 1. Use Headings Properly
### 1a. Headings example (how meta!)

## 2. Create a document outline
### 2a. Headings First
### 2b. Bullet points and curly braces
### 2c. Images list

## 3. Use my editor if you don't know markdown

## 4. Fill in the blanks and make sure to link to any references.
### 4a. Sentence Length
### 4b. Use follow on words / phrases (transitions)

## 5. Run your article through the Hemingway App
### 5a. Use Grammarly or similar


## 6. Mind your language
### 6a. Swearing (I should listen to this)
### 6b. Inclusive language

## 7. Explain abbreviations and acronyms
### 7a. Parenthesis (Brackets) method
### 7b. Glossary method

## 8. Image alt text, a top tip

## 9. Create a contents section

## 10. A good cover image is important
### 10a. Create your own

## 11. Refine your opening paragraph
### 11a. Also check your closing paragraphs

## 12. Have a promotion strategy if you want more engagement

## 13. Pay attention to comments (and reply!)
### 13a. Fix problems!

## Bonus Tip: Publish your article on your own site first (if you have one)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice how the structure is quite "flat". I only use level 2 and level 3 headings. This tends to be better for web based articles.&lt;/p&gt;

&lt;p&gt;If you find yourself getting to level 5 headings you should just check you aren't over-nesting information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-create-a-document-outline"&gt;
  &lt;/a&gt;
  2. Create a document outline
&lt;/h2&gt;

&lt;p&gt;This will save you a lot of time and also help your document "flow" nicely.&lt;/p&gt;

&lt;p&gt;A document outline is like a framework for the article, once you have it right all you need to do is follow your own structure and fill in the blanks.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2a-headings-first"&gt;
  &lt;/a&gt;
  2a. Headings First
&lt;/h3&gt;

&lt;p&gt;The easiest way to structure your document is to write down all of the headings first (or at least the top level headings - &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;s).&lt;/p&gt;

&lt;p&gt;This lets you put the sections in the right / logical order and also highlights areas where you may need some more research etc. before you start writing.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2b-bullet-points-and-curly-braces"&gt;
  &lt;/a&gt;
  2b. Bullet points and curly braces
&lt;/h3&gt;

&lt;p&gt;After you have your document headings outlined the next step is to detail what is going to go in each section.&lt;/p&gt;

&lt;p&gt;I have a useful method for you here!&lt;/p&gt;

&lt;p&gt;For each section I do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2-5 bullet points on what needs to be said in that section.&lt;/li&gt;
&lt;li&gt;add curly braces around any thoughts that pop into my head such as referencing sources, images / screen shots to include / create etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then once I have added bullet points and square brackets to all the sections I can just do CTRL + F and search for &lt;code&gt;{&lt;/code&gt; to quickly see what research I need to do / references I need to get together / screen shots / images I need.&lt;/p&gt;

&lt;p&gt;When you come to write your article leave these bullet points and curly braces in until you have dealt with them to make sure you don't miss anything!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2c-images-list"&gt;
  &lt;/a&gt;
  2c. Images list
&lt;/h3&gt;

&lt;p&gt;One final thing to note is that I keep my images list separate. &lt;/p&gt;

&lt;p&gt;That way I can just search for images all at one time rather than writing a bit, find an image, write some more, find another image. &lt;/p&gt;

&lt;p&gt;By not task switching / context switching often you will work more quickly.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-use-my-editor-if-you-dont-know-markdown"&gt;
  &lt;/a&gt;
  3. Use my editor if you don't know markdown
&lt;/h2&gt;

&lt;p&gt;New to writing in Markdown? It can be hard work.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://dev.to/p/editor_guide"&gt;DEV editor guide&lt;/a&gt; is useful, but it does take a while to learn everything.&lt;/p&gt;

&lt;p&gt;Don't worry though, I created a bookmarklet that gives you a WYSIWYG!&lt;/p&gt;

&lt;p&gt;It is only partially complete, but it has most of the features you need to make writing articles easy!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dECv5ZLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9w5mpc1w--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63sd35me1ncjdosgs9rj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dECv5ZLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9w5mpc1w--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63sd35me1ncjdosgs9rj.gif" alt="demo of formatting text with bold, italic, underlined and with a strikethrough"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#check-out-the-editor-here"&gt;
  &lt;/a&gt;
  Check out the editor here:
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/dev-to-markdown-editor-part-deux-massive-improvements-hack-2-continued-5mp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 new features, 51.3 new bugs added üòã, the DEV.TO üë©‚Äçüíªüë®‚Äçüíª editor [PART DEUX!]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Apr 7 „Éª 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-fill-in-the-blanks-and-make-sure-to-link-to-any-references"&gt;
  &lt;/a&gt;
  4. Fill in the blanks and make sure to link to any references.
&lt;/h2&gt;

&lt;p&gt;By now you should have all of your headings planned out, a few bullet points under each heading, a list of research items and a list of images to find.&lt;/p&gt;

&lt;p&gt;Do your research first, that may alter your headings etc. &lt;/p&gt;

&lt;p&gt;Once you have all your research together it is time to start writing!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4a-sentence-and-paragraph-length"&gt;
  &lt;/a&gt;
  4a. Sentence and Paragraph Length
&lt;/h3&gt;

&lt;p&gt;You write differently on the internet to how you would in a book or in an English class.&lt;/p&gt;

&lt;p&gt;You should stick to very short paragraphs (1 to 3 sentences).&lt;/p&gt;

&lt;p&gt;Additionally you should try to keep your sentences short. &lt;/p&gt;

&lt;p&gt;Many people using DEV will not have English as a first language. Shorter sentences make your content easier to understand.&lt;/p&gt;

&lt;p&gt;Short sentences are also easier to follow for people with dyslexia etc.&lt;/p&gt;

&lt;p&gt;Finally due to screen sizes, short sentences and paragraphs are much more manageable on a mobile screen so you don't get massive walls of text!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4b-use-follow-on-words-phrases-transitions"&gt;
  &lt;/a&gt;
  4b. Use follow on words / phrases (transitions)
&lt;/h3&gt;

&lt;p&gt;Transitional words / phrases allow a reader to know that a paragraph / sentence is a continuation of a previous one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example&lt;/strong&gt; I just used the phrase "for example" to indicate that this sentence builds upon the previous one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In addition&lt;/strong&gt; to providing a nice flow to the document it helps with comprehension of your text (especially as we are splitting it into very short paragraphs so the association between sentences is not as clear).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-run-your-article-through-the-hemmingway-app"&gt;
  &lt;/a&gt;
  5. Run your article through the Hemmingway App
&lt;/h2&gt;

&lt;p&gt;Did you know that 1 in 5 people have the reading age expected of a 12 year old (in the UK, Germany and the USA at least...I am sure other Countries are the same).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hemingwayapp.com/"&gt;The Hemmingway App / Editor&lt;/a&gt; is a great tool to help make your text easier to understand. &lt;/p&gt;

&lt;p&gt;It highlights long sentences, passive voice etc. This helps with the points raised in section 4.&lt;/p&gt;

&lt;p&gt;In addition to this, be conscious of the complexity of the words / vocabulary you use.&lt;/p&gt;

&lt;p&gt;You do not need to use big words to make yourself sound smart. If you can simplify your language it means that more people will be able to enjoy and understand what you have to say!&lt;/p&gt;

&lt;p&gt;The Hemmingway editor will give your article a "grade" based on complexity. You are aiming for grade 7 or below ideally. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Due to sentence length and careful word choices, this article is only grade 3!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5a-use-grammarly-or-similar"&gt;
  &lt;/a&gt;
  5a. Use Grammarly or similar
&lt;/h3&gt;

&lt;p&gt;I need to do this one as my grammar is awful!&lt;/p&gt;

&lt;p&gt;Using a service such as &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt; will help make your article easier to read as well.&lt;/p&gt;

&lt;p&gt;This is especially useful if English is a second or third language and you choose to write in English, due to how weird and wonderful English Grammar is! &lt;/p&gt;

&lt;p&gt;If I was to write an article in German (which would be impressive given the 7 German words I know), I would look to find a similar service for writing in German.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-mind-your-language"&gt;
  &lt;/a&gt;
  6. Mind your language
&lt;/h2&gt;

&lt;p&gt;I am glad this isn't a case of "the person who is without sin can cast the first stone". ü§£&lt;/p&gt;

&lt;p&gt;I don't follow my own advice here when it comes to swearing. &lt;/p&gt;

&lt;p&gt;But there are things to be &lt;strong&gt;conscious of&lt;/strong&gt;, but no fixed rules as such. As I have said before &lt;a href="https://dev.to/inhuofficial/comment/1gfan"&gt;context is key&lt;/a&gt; to knowing what is appropriate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6a-swearing-i-should-listen-to-this"&gt;
  &lt;/a&gt;
  6a. Swearing (I should listen to this)
&lt;/h3&gt;

&lt;p&gt;Ah, who am I kidding, I f***ing love a good swear every now and then.&lt;/p&gt;

&lt;p&gt;But bear in mind that if you are going to use swearing in an article, you should put a warning at or near the start for the people who are offended by swear words. Make sure not to swear before that warning!&lt;/p&gt;

&lt;p&gt;Oh and don't do what I did...I screenshotted an offensive site I had built for the cover image of the article...and forgot to censor the swear words ü§¶‚Äç‚ôÇÔ∏è! &lt;/p&gt;

&lt;p&gt;You should also bear in mind that DEV will not promote any articles with swear words in the titles on social media.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you are not offended by swearing...&lt;a href="https://ultimatemotherfuckingwebsite.com/"&gt;here is the highly offensive website in question&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6b-inclusive-language"&gt;
  &lt;/a&gt;
  6b. Inclusive language
&lt;/h3&gt;

&lt;p&gt;I am not going to lecture you on ableist language (as I know it is &lt;a href="https://dev.to/inhuofficial/comment/1gfan"&gt;such a difficult thing to get right (link to comment I made)&lt;/a&gt;), gendered language etc. &lt;/p&gt;

&lt;p&gt;Just bear it in mind. Use "they" &lt;strong&gt;where you can&lt;/strong&gt; instead of "he" and "she" (or mix it up throughout your article and try and keep it balanced).&lt;/p&gt;

&lt;p&gt;Use language that is acceptable in your culture for describing people with disabilities (and read up what is generally considered acceptable so you minimise the chance of people being offended).&lt;/p&gt;

&lt;p&gt;Don't use racial slurs, obviously! &lt;/p&gt;

&lt;p&gt;Oh and probably steer clear of politics unless you can take the heat! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-explain-abbreviations-and-acronyms"&gt;
  &lt;/a&gt;
  7. Explain abbreviations and acronyms
&lt;/h2&gt;

&lt;p&gt;Do not assume that people know what acronyms and abbreviations mean.&lt;/p&gt;

&lt;p&gt;People from various backgrounds and various stages in their careers from various disciplines will read your article.&lt;/p&gt;

&lt;p&gt;If you are going on about SSR then you need to explain what it is as there are &lt;a href="https://en.wikipedia.org/wiki/SSR"&gt;loads of possibilities for what SSR stands for&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Here are two ways you can explain abbreviations and acronyms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7a-parentheses-brackets-method"&gt;
  &lt;/a&gt;
  7a. Parentheses (Brackets)  method
&lt;/h3&gt;

&lt;p&gt;When you first use an acronym or abbreviation write out the full phrase and then put the shortened version in parentheses.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article we will be using JavaScript (JS) to create a Single Page Application (SPA).&lt;/p&gt;

&lt;p&gt;Our SPA will consist of three pages and all routing will be handled by JS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notice how I only add the full phrase once. After that you can use the abbreviation for the rest of the article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7b-glossary-method"&gt;
  &lt;/a&gt;
  7b. Glossary method
&lt;/h3&gt;

&lt;p&gt;If something needs a bit more explanation (or you don't want to slow the pace of your article if there are a lot of abbreviations in quick succession), then a glossary is a great solution.&lt;/p&gt;

&lt;p&gt;You add a section to the end of your document "Glossary".&lt;/p&gt;

&lt;p&gt;You then have a list of terms followed by their explanations (we can use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl"&gt;&lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt; element (and &lt;code&gt;&amp;lt;dt&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;dd&amp;gt;&lt;/code&gt;)&lt;/a&gt; for this. &lt;/p&gt;

&lt;p&gt;You need to then create a hyperlink that points to those terms in the glossary section.&lt;/p&gt;

&lt;p&gt;Here is an example for doing this in markdown:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;In this article we discuss [HTML](#def-html), [CSS](#def-css) and [JS](#def-js).

## First Heading etc.

[...all of your article content...]

## Glossary
&lt;span class="nt"&gt;&amp;lt;dl&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"def-html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;Short for Hyper Text Markup Language. It is a programming language üòâ&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;dt&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"def-css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CSS&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;Short for Cascading Style Sheets, used to make stuff pretty&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;dt&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"def-js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;JS&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;Short for JavaScript, it was written in 10 days.&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice how I prefix the IDs with &lt;code&gt;def-&lt;/code&gt;, this is just to reduce the chance of collisions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#8-image-alt-text-a-top-tip"&gt;
  &lt;/a&gt;
  8. Image alt text, a top tip
&lt;/h2&gt;

&lt;p&gt;When writing alt text on images the aim is to provide information that is relevant &lt;strong&gt;in context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That is why it is impossible to just have generic alt text for an image and use it everywhere.&lt;/p&gt;

&lt;p&gt;One way to write good alt text is to imagine you are reading your articles to someone over the phone.&lt;/p&gt;

&lt;p&gt;When you get to the image, what information is important so they get an idea of what the image is about, and what it adds to the article.&lt;/p&gt;

&lt;p&gt;That is what your alt text should be.&lt;/p&gt;

&lt;p&gt;Oh and also, you don't need "image of"...people already know it is an image.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#9-create-a-contents-section-if-needed"&gt;
  &lt;/a&gt;
  9. Create a contents section if needed.
&lt;/h2&gt;

&lt;p&gt;Right now you should have a beautifully written article, using inclusive language and with great alt text (and possibly a glossary!).&lt;/p&gt;

&lt;p&gt;Once you are happy with the article, create a contents section!&lt;/p&gt;

&lt;p&gt;Now this is assuming your article is over 1000-1500 words in length (which a high quality article is likely to be).&lt;/p&gt;

&lt;p&gt;You do it last because as you write the article the order of sections and headings may change.&lt;/p&gt;

&lt;p&gt;I would advise only adding your &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;s to the contents to keep it from getting cluttered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I am working on adding an auto contents creator to the WYSIWYG I mentioned earlier&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#10-a-good-cover-image-is-important"&gt;
  &lt;/a&gt;
  10. A good cover image is important
&lt;/h2&gt;

&lt;p&gt;The cover image shows on social media and if you article happens to end up at the top of the home feed.&lt;/p&gt;

&lt;p&gt;It is also the first thing people see when they open your article.&lt;/p&gt;

&lt;p&gt;Make sure the image is engaging and relevant (or branded...)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#10a-create-your-own"&gt;
  &lt;/a&gt;
  10a. Create your own
&lt;/h3&gt;

&lt;p&gt;If you write regularly you may want to create a branded template for article covers. &lt;/p&gt;

&lt;p&gt;This saves time and also lets people start to recognise your branding and know to look out for your articles.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#11-refine-your-opening-paragraph"&gt;
  &lt;/a&gt;
  11. Refine your opening paragraph
&lt;/h2&gt;

&lt;p&gt;Right nearly ready to launch!&lt;/p&gt;

&lt;p&gt;Now we do some selfish stuff! We need to optimise our opening paragraph for SEO and engagement.&lt;/p&gt;

&lt;p&gt;Now that you have written the article, what will people learn, is there anything fun in the article that would grab people's attention etc?&lt;/p&gt;

&lt;p&gt;Also think about SEO. The first 100-200 words in an article are very important for SEO. &lt;/p&gt;

&lt;p&gt;Think about key terms, semantically relevant / similar terms etc. &lt;/p&gt;

&lt;p&gt;Obviously this is secondary to creating an engaging opening paragraph as read time is important!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#11a-also-check-your-closing-paragraphs"&gt;
  &lt;/a&gt;
  11a. Also check your closing paragraphs
&lt;/h3&gt;

&lt;p&gt;Same thing here. &lt;/p&gt;

&lt;p&gt;People tend to read the beginning and the end of an article more than any other parts. Yes, I am sorry to break it to you, people probably won't read your whole article (which is why we putting headings in!).&lt;/p&gt;

&lt;p&gt;So make sure your closing couple of paragraphs are engaging as well and, if you want people to do something (visit a site, leave a comment, follow you on social media etc.) then make sure you say that prominently.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#12-have-a-promotion-strategy-if-you-want-more-engagement"&gt;
  &lt;/a&gt;
  12. Have a promotion strategy if you want more engagement
&lt;/h2&gt;

&lt;p&gt;I wish I wasn't just starting to do this myself.&lt;/p&gt;

&lt;p&gt;Content will get some natural traction on DEV and it may even get shared on social media by a couple of people.&lt;/p&gt;

&lt;p&gt;But you need to be in control of your own destiny and not leave it up to others!&lt;/p&gt;

&lt;p&gt;Build a following on social media and then make sure that you queue posts on the various social media channels to send out when you publish your article.&lt;/p&gt;

&lt;p&gt;It is a case of "the rich get richer" on DEV. If you article gets a lot of likes early on then more people are likely to click into it.&lt;/p&gt;

&lt;p&gt;If you get enough likes your article will then sit near the top of the "week" tab, where it will get more likes and views. &lt;/p&gt;

&lt;p&gt;All of this increased your chances of a share on social media...which adds more likes etc.&lt;/p&gt;

&lt;p&gt;So if you can give your article a boost when you first publish it then you are far more likely for it to do well.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#13-pay-attention-to-comments-and-reply"&gt;
  &lt;/a&gt;
  13. Pay attention to comments (and reply!)
&lt;/h2&gt;

&lt;p&gt;Engaging with people who take the time to leave comments on your article (other than "thanks for this" type comments) is important.&lt;/p&gt;

&lt;p&gt;It is how you get people to follow you and more importantly the comments are where you pick up loads of hints and tips.&lt;/p&gt;

&lt;p&gt;Oh and for the love of all that is mighty please &lt;strong&gt;please&lt;/strong&gt;....&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#13a-fix-problems"&gt;
  &lt;/a&gt;
  13a. Fix problems!
&lt;/h3&gt;

&lt;p&gt;If somebody pops up in your comments section telling you there are problems with your article and how to fix them then &lt;strong&gt;fix them&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is no excuse, it takes 2 minutes to make a couple of edits.&lt;/p&gt;

&lt;p&gt;Also, don't say "yeah I will fix it and then do nothing about it"...such as &lt;a href="https://dev.to/inhuofficial/comment/1h5j9"&gt;in this article where I left a comment with a couple of fixes&lt;/a&gt; (yes I am calling people out on this now, there is no excuse for leaving mistakes in articles and misinforming people!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-tip-publish-your-article-on-your-own-site-first-if-you-have-one"&gt;
  &lt;/a&gt;
  Bonus Tip: Publish your article on your own site first (if you have one)
&lt;/h2&gt;

&lt;p&gt;Just a general Search Engine Optimisation (SEO) tip and only relevant if you have your own site (I &lt;strong&gt;still&lt;/strong&gt; haven't got mine up and running yet!). &lt;/p&gt;

&lt;p&gt;Publish articles on your own site a few days before you publish on DEV and other platforms. Even though canonical URLs are meant to make sure you get the link juice etc. it isn't perfect. &lt;/p&gt;

&lt;p&gt;If you launch on your own site first and wait for Google to index the page then you are far more likely to get your own site appearing in Google search results. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully those 13+1 points are useful to you.&lt;/p&gt;

&lt;p&gt;If anything isn't clear please let me know in the comments.&lt;/p&gt;

&lt;p&gt;Oh and above all, you should &lt;/p&gt;



&lt;p&gt;&lt;a href="https://twitter.com/intent/follow?screen_name=inhuofficial"&gt;&lt;strong&gt;follow me on Twitter&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;I am about to ramp up my content game on the bird app, you need to follow just for the dad jokes!&lt;/p&gt;

&lt;p&gt;Oh and one last thing, &lt;strong&gt;if you are wondering why this article has 13 points + a bonus&lt;/strong&gt;, then these two articles will make sure you are in on the joke!&lt;/p&gt;

&lt;p&gt;Oh and these articles have some great examples of what &lt;strong&gt;not&lt;/strong&gt; to do if you want to produce high quality content. Enjoy (silly posts)!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/13-amazing-tips-for-writing-listicles-5eja" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;13+ ü§© amazing ü§© tips for writing ‚úÖ listicles ‚úÖ [don't be mad that you didn't know them before!]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jun 19 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/13-more-amazing-tips-for-writing-listicles-2hl5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;13++ More ü§Ø Amazing üòçTips for writing listicles [that will üß® blow people away]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jun 21 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>a11y</category>
      <category>writing</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Concurrency Patterns in Go</title>
      <author>Karan Kumar </author>
      <pubDate>Fri, 20 Aug 2021 17:05:36 +0000</pubDate>
      <link>https://dev.to/karankumarshreds/concurrency-patterns-in-go-3jfc</link>
      <guid>https://dev.to/karankumarshreds/concurrency-patterns-in-go-3jfc</guid>
      <description>&lt;p&gt;Before we even begin to understand what "concurrency" is in Go, we need to make sure we understand that &lt;strong&gt;concurrency is not parallelism&lt;/strong&gt;. Parallelism is means parallel execution of processes where as &lt;strong&gt;concurrency&lt;/strong&gt; is about design. With concurrency you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design your program as a collection of independent processes.&lt;/li&gt;
&lt;li&gt;Design these processes to &lt;em&gt;eventually&lt;/em&gt; run in parallel.&lt;/li&gt;
&lt;li&gt;Design your code so that the outcome is always the same.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do not worry if you don't understand the above explanation, we will take a deep dive into concurrency patterns in this blog with real examples. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-can-we-achieve-with-concurrency"&gt;
  &lt;/a&gt;
  What can we achieve with Concurrency?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;We can have multiple groups of code(workers) running &lt;em&gt;independent tasks&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;We can eliminate &lt;em&gt;race conditions&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;We can eliminate &lt;em&gt;deadlocks&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The more &lt;em&gt;workers&lt;/em&gt; we have, the &lt;em&gt;faster&lt;/em&gt; the execution is.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#goroutines"&gt;
  &lt;/a&gt;
  Goroutines
&lt;/h2&gt;

&lt;p&gt;To understand concurrency, we must understand what Goroutines are. A Goroutine is a function or a method which executes independently and simultaneously in connection with any other Goroutines present in your program. &lt;br&gt;
So we could also say, &lt;em&gt;every concurrently running process in Go language is known as a Goroutine&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://xyz.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;//  üëÜ makes this method a GoRoutine&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The link %v is up"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Code explanation:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main function invokes the makeHttpCall() function with a keyword &lt;code&gt;go&lt;/code&gt; in front of it. This makes this function run on in a Goroutine. You can consider a Goroutine like a light weighted thread. The cost of creating Goroutines is &lt;strong&gt;very small&lt;/strong&gt; as compared to a thread.&lt;/p&gt;

&lt;p&gt;The main function also has its own routine which we do not have to define, known as &lt;strong&gt;main Goroutine&lt;/strong&gt;. All the other Goroutines are working under the main Goroutine. If the main Goroutine is terminated, all the other Goroutines present in the program are also terminated. &lt;/p&gt;

&lt;p&gt;Where are we going with this?&lt;/p&gt;

&lt;p&gt;Let us say we want to fetch data from multiple links without using Goroutines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// creating a slice of links &lt;/span&gt;
    &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"http://abc.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://pqr.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://xyz.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// fetching data from each link&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The link %v is up"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Code explanation:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This code will iterate over the &lt;code&gt;slice&lt;/code&gt; of links and &lt;code&gt;sequentially&lt;/code&gt; make http calls on each of the links. In case on of the links takes &lt;code&gt;x seconds&lt;/code&gt; to retrieve the response, the other main go routine will block for &lt;code&gt;x seconds&lt;/code&gt; before it sends the next request.&lt;/p&gt;

&lt;p&gt;We can easily make use of &lt;code&gt;Goroutines&lt;/code&gt; to fix this. Let us see the code and then we will discuss how it helps us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// creating a slice of links &lt;/span&gt;
    &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"http://abc.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://pqr.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://xyz.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// fetching data from each link&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// üëà&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The link %v is up"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Code explanation: &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We made use of the same &lt;code&gt;go&lt;/code&gt; keyword we discuss earlier to run the &lt;code&gt;makeHttpCall&lt;/code&gt; function in its own Goroutine. Now the main Goroutine will not wait for the request to be resolve, rather it will keep on iterating and creating separate Goroutine for each invocation of &lt;code&gt;makeHttpCall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's the catch!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We might think that this solves the issue, right? But it doesn't. The output of this function would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üëÜ Absolutely nothing. Why is that? &lt;strong&gt;#[1]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is because, the main go routine (tied to the main function by default) creates the Goroutine for each &lt;code&gt;makeHttpCall&lt;/code&gt; function invocation. Once the iteration is completed, the main function continues to run and reaches the end. It doesn't wait for the other Goroutines to finish.&lt;br&gt;
Remember, we discussed a few minutes ago "If the main Goroutine is terminated, all the other Goroutines present in the program are also terminated". This is exactly what happened. So how do we solve it?&lt;/p&gt;

&lt;p&gt;To solve this, we need a way to communicate between these Goroutines and the main Goroutine. And to communicate between multiple Goroutines, we make use of something called &lt;strong&gt;channels&lt;/strong&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#channels"&gt;
  &lt;/a&gt;
  Channels
&lt;/h2&gt;

&lt;p&gt;Go provides a mechanism called a channel that is used to share data between goroutines. Channels act as a pipe between the goroutines and provide a mechanism that guarantees a &lt;code&gt;synchronous&lt;/code&gt; exchange.&lt;/p&gt;

&lt;p&gt;There are two types of channels: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Unbuffered channels (which we will be using for the example)&lt;/li&gt;
&lt;li&gt;Buffered channels&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Unbuffered&lt;/strong&gt; channels are used to perform &lt;code&gt;synchronous&lt;/code&gt; communication within the goroutines. These provide a guarantee that an exchange of the data is performed at the instant it is sent.&lt;/p&gt;

&lt;p&gt;In go we &lt;code&gt;declare&lt;/code&gt; the channels and we also must specify the &lt;code&gt;data-type&lt;/code&gt; at the time of the channel declaration. The &lt;code&gt;data-type&lt;/code&gt; is the type of the data that will be shared through the channel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;myChannel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means, this channel can be used to only share the data of type &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Buffered&lt;/strong&gt; channels are used to perform &lt;code&gt;asynchronous&lt;/code&gt; communication within the goroutines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;myBufferedChannel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#buffered-channels-you-may-skip-this-section"&gt;
  &lt;/a&gt;
  Buffered channels (you may skip this section)
&lt;/h3&gt;

&lt;p&gt;In the buffered channels there is a capacity to hold &lt;code&gt;one or more values&lt;/code&gt; before they're received. The sending and receiving is not performed synchronously and immediately. &lt;/p&gt;

&lt;p&gt;The blocking cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;receive&lt;/strong&gt; will block when there is no value in the channel to receive.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;send&lt;/strong&gt; will block when there is no &lt;code&gt;available buffer&lt;/code&gt; to place the value being sent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"io/ioutil"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"sync"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// initializing a WaitGroup&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitGroup&lt;/span&gt;

    &lt;span class="c"&gt;// adding 3 counts/buffer to the WaitGroup&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Start Goroutines"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;responseSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://www.golangprograms.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;responseSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://stackoverflow.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;responseSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://coderwall.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// wait for goroutines to finish&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Terminating the main program"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// just prints the response size of the body returned&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;responseSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitGroup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// schedule the Done() call when the goroutine is finished&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Step1: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Step2: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Step3: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output for the above program would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Start Goroutines
Step1:  https://coderwall.com
Step1:  https://www.golangprograms.com
Step1:  https://stackoverflow.com     
Step2:  https://stackoverflow.com
Step2:  https://www.golangprograms.com
Step3:  31857
Step3:  207321
Step2:  https://coderwall.com
Step3:  189752
Terminating the main program
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is quite intuitive how it worked. For the people who did not understand this, three different goroutines were spun up and the main program, waited (using wait group) for the all the goroutines to finish before terminating the program.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#back-to-the-main-topic"&gt;
  &lt;/a&gt;
  Back to the main topic üéâ
&lt;/h2&gt;

&lt;p&gt;We learned about channels and how they act as pipes to communicate data within the goroutines. Let us continue with the issue at hand &lt;strong&gt;#[1]&lt;/strong&gt;, that is the how to stop code to from terminating before goroutines are finished executing and get access to which link is down or not. &lt;/p&gt;

&lt;p&gt;So in this code, we will make use of channels and communicate the main goroutine (running by default in the main function) and the goroutine spun up during the helper function invocation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// creating a channel to share string type data&lt;/span&gt;
    &lt;span class="n"&gt;myChanel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// creating a slice of links &lt;/span&gt;
    &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"http://abc.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://pqr.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://xyz.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// fetching data from each link&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myChanel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// listening for three messages coming from the chanel&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Link %v is up &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;myChanel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myChanel&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// sending the link name to the chanel üëà&lt;/span&gt;
        &lt;span class="n"&gt;myChanel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the above program is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Link http://abc.com is up
Link http://xyz.com is up
Link http://pqr.com is up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Code explanation: &lt;/p&gt;

&lt;p&gt;So here, we listened (3 times) for the message to receive (synchronously) from the goroutines &lt;code&gt;from the channel&lt;/code&gt;.&lt;br&gt;
In other words, the main function's goroutine waited for the chanel to receive a message, printed out the print statement, and then went on to receive the next message from  the channel and repeated itself three times. &lt;/p&gt;

&lt;p&gt;That's all there is to know the &lt;strong&gt;basics&lt;/strong&gt; of goroutines and concurrency patterns. There is a lot more to learn. So, in the future blogs, we will take a deep dive on how everything is being handled behind the scenes. Until then, peace ‚úå&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>distributedsystems</category>
      <category>webassembly</category>
      <category>go</category>
    </item>
  </channel>
</rss>
