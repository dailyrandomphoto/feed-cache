<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Display Low Stock Warning In WooCommerce</title>
      <author>CodeWatchers</author>
      <pubDate>Wed, 10 Nov 2021 17:01:42 +0000</pubDate>
      <link>https://dev.to/codewatchers_en/how-to-display-low-stock-warning-in-woocommerce-4i47</link>
      <guid>https://dev.to/codewatchers_en/how-to-display-low-stock-warning-in-woocommerce-4i47</guid>
      <description>&lt;p&gt;Showing a low stock alert on your online store creates urgency and demand for your product. The consumer feels as if the product is amazing and has been sold enough times that it is now about to end.&lt;/p&gt;

&lt;p&gt;It is a proven way of boosting your sales and that is why almost every other online store uses this technique to push their consumers further into buying their product.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will help you understand the benefits of &lt;strong&gt;Low Stock Warning&lt;/strong&gt; and the way of enabling it on your WooCommerce store.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-should-you-display-low-stock-warnings" class="anchor"&gt;
  &lt;/a&gt;
  Why Should You Display Low Stock Warnings
&lt;/h2&gt;

&lt;p&gt;Online stores have been using this technique for a while now to increase their conversions. Even the biggest of online stores such as &lt;strong&gt;Amazon&lt;/strong&gt;, use this technique to increase their sales.&lt;/p&gt;

&lt;p&gt;These low stock alerts appear as a popup on your website alerting the users that the product is about to end and they should buy it as soon as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uYdcwpdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Amazon-Low-Stock-Alerrt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uYdcwpdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Amazon-Low-Stock-Alerrt.jpg" alt="" width="484" height="123"&gt;&lt;/a&gt;It is proven that Low Stock Warnings can boost your sales up to 15% and that is exactly why you should start using them now.&lt;/p&gt;

&lt;p&gt;These type of popups trigger human behaviour by displaying scarcity and creating urgency, both of which demand the consumer to act.&lt;/p&gt;

&lt;p&gt;By creating &lt;strong&gt;urgency&lt;/strong&gt;, you demand your consumer to speed up their decision making. You make them feel that the product they want to buy is not going to be there for long and they need to be quick and decisive in hitting the &lt;strong&gt;Buy Now&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;Simultaneously, &lt;strong&gt;scarcity&lt;/strong&gt; implements that the product they want to buy is short in supply and if they don't buy it now, they might not be able to buy it afterwards.&lt;/p&gt;

&lt;p&gt;Both of these scenarios blend in to urge the consumer in taking a positive decision and hence, help you increase your sales.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-display-low-stock-warnings-in-woocommerce" class="anchor"&gt;
  &lt;/a&gt;
  How To Display Low Stock Warnings In WooCommerce
&lt;/h2&gt;

&lt;p&gt;Now that you know why is it important to display Low Stock Warnings on your Online store. Let us help you in the process of enabling it.&lt;/p&gt;

&lt;p&gt;We will be using the &lt;strong&gt;&lt;a href="https://trustpulse.com/"&gt;Trust Pulse&lt;/a&gt;&lt;/strong&gt; plugin to display Low Stock alerts.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#trust-pulse" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://trustpulse.com/"&gt;Trust Pulse&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVZ9jeE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Trust-Pulse.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVZ9jeE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Trust-Pulse.jpg" alt="" width="880" height="332"&gt;&lt;/a&gt;&lt;a href="https://trustpulse.com/"&gt;Trust Pulse&lt;/a&gt; is a very popular tool to help you build Low Stock alerts for your website. It is very simple to use and you don't have to worry about your coding skills.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;Trust Pulse,&lt;/strong&gt; you can create Low Stock warnings with some simple tweaks here and there, without using any codes. It is highly user-friendly and can be connected to WooCommerce easily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://trustpulse.com/"&gt;Details&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://trustpulse.com/"&gt;Demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://codewatchers.com/aff/hostings/go"&gt;Hosting&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all, you will need to create an account on Trust Pulse as it is a premium plugin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mpl45Udg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Trust-Pulse-pricing.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mpl45Udg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Trust-Pulse-pricing.jpg" alt="" width="880" height="332"&gt;&lt;/a&gt;Once you have created your account, you need to &lt;strong&gt;Sign in&lt;/strong&gt; and press &lt;strong&gt;Create Campaign&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6urDtZyg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Create-Campaign.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6urDtZyg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Create-Campaign.jpg" alt="" width="744" height="159"&gt;&lt;/a&gt;Then, you need to name your campaign and &lt;strong&gt;connect it to the website you used while signing up.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y7qRb-7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Name-your-campaign.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y7qRb-7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Name-your-campaign.jpg" alt="" width="734" height="302"&gt;&lt;/a&gt;&lt;strong&gt;Trust Pulse&lt;/strong&gt; allows you to create two types of notifications i.e. &lt;strong&gt;Recent Activity&lt;/strong&gt; and &lt;strong&gt;On-Fire.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recent Activity&lt;/strong&gt; alerts the visitor whenever someone takes an action on your website.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;On-Fire&lt;/strong&gt; combines all the actions taken on your site and displays them together.&lt;/p&gt;

&lt;p&gt;For this tutorial, you need to go with the &lt;strong&gt;Recent Activity&lt;/strong&gt; option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zLqdGZ_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Select-Campaign-Type.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLqdGZ_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Select-Campaign-Type.jpg" alt="" width="744" height="442"&gt;&lt;/a&gt;Select &lt;strong&gt;Recent Activity&lt;/strong&gt; and press &lt;strong&gt;Next Step&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, you will need to design your &lt;strong&gt;Low Stock Notification&lt;/strong&gt; and you can move ahead by enabling &lt;strong&gt;Display a Default Notification&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_L0LS9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Enable-Display-Default-Notificiation.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_L0LS9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Enable-Display-Default-Notificiation.jpg" alt="" width="742" height="240"&gt;&lt;/a&gt;Now, you can &lt;strong&gt;Customize&lt;/strong&gt; your &lt;strong&gt;Low Stock&lt;/strong&gt; &lt;strong&gt;Alert&lt;/strong&gt; by selecting options from the &lt;strong&gt;Drop-Down Menu&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qjd1f17W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Customize-Notification.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qjd1f17W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/Customize-Notification.jpg" alt="" width="717" height="427"&gt;&lt;/a&gt;&lt;strong&gt;Title Text&lt;/strong&gt; will be the title of your notification.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Message Text&lt;/strong&gt; refers to the body of your popup.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Notification Image&lt;/strong&gt; serves as the image you want to display on the popup.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Message Link&lt;/strong&gt; will be the page where your users will be directed when they press the notification.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codewatchers.com/en/blog/how-to-display-low-stock-warning-in-woocommerce?utm_campaign=content-trimming&amp;amp;utm_source=dev.to&amp;amp;utm_medium=link"&gt;Read The Full Tutorial.&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Getting Started with Decorators in Python</title>
      <author>Adarsh Rawat</author>
      <pubDate>Wed, 10 Nov 2021 16:55:18 +0000</pubDate>
      <link>https://dev.to/adarshrawat7400/getting-started-with-decorators-in-python-4kpi</link>
      <guid>https://dev.to/adarshrawat7400/getting-started-with-decorators-in-python-4kpi</guid>
      <description>&lt;p&gt;To get started with Decorators , First we have to understand few things :-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;everything we see in python is an object.&lt;/li&gt;
&lt;li&gt;function in python is also an object.&lt;/li&gt;
&lt;li&gt;we can declare function within a function.&lt;/li&gt;
&lt;li&gt;we these inner function have access to local variables in th e enclosing function. &lt;/li&gt;
&lt;li&gt;a function can return any value, including a function&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;to understand the above point let us take an example&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; def hello(name):
...     return f"Hello {name}"
...
&amp;gt;&amp;gt;&amp;gt; a = hello
&amp;gt;&amp;gt;&amp;gt; # as we can see variable a referencing to a function object
&amp;gt;&amp;gt;&amp;gt; a("Ram")
'Hello Ram'
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with the above example we can,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;functions are objects &lt;/li&gt;
&lt;li&gt;they can be assigned/reference by other name ,such as variable &lt;em&gt;a&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let's take another example to clear other remaining &lt;br&gt;
points&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; def foo(name):
...     def bar():
...             print(f"Hey I'm the inner function bar enclosed inside foo function , {name}")
...     return bar
...
&amp;gt;&amp;gt;&amp;gt; f = foo("Ram")
&amp;gt;&amp;gt;&amp;gt; f.__name__
'bar'
&amp;gt;&amp;gt;&amp;gt; type(f)
&amp;lt;class 'function'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; f()
Hey I'm the inner function bar enclosed inside foo function , Ram
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we have declared a function &lt;em&gt;foo&lt;/em&gt; which contains another function &lt;em&gt;bar&lt;/em&gt;, and when we called the outer function &lt;em&gt;foo&lt;/em&gt; we get back reference to &lt;em&gt;bar&lt;/em&gt; function object,&lt;br&gt;
we also verified the same by,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;checking &lt;em&gt;f.&lt;strong&gt;name&lt;/strong&gt;&lt;/em&gt; attribute which return name of the function&lt;/li&gt;
&lt;li&gt;&lt;p&gt;checked &lt;em&gt;type(f)&lt;/em&gt; to see that it is of type &lt;em&gt;function&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inner function &lt;em&gt;bar&lt;/em&gt; has access to  all varibles of enclosing function like variable &lt;em&gt;name&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The concepts that we have covered in the above example&lt;br&gt;
will help in the understanding of Decorators&lt;/p&gt;

&lt;p&gt;Now we see some examples of special type of decorator&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-wrapper"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Function Wrapper&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Wrappers around the functions are also knows as decorators which are a very powerful and useful tool in Python since it allows programmers to modify the behavior of function or class.&lt;/p&gt;

&lt;p&gt;Let's understand with an example&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lines = '-' * 60 + '\n'

def with_lines(func):
    def wrapper():
        return f'{lines}{func()}{lines}'
    return wrapper

def a():
    return f'I am in a!\n'
new_a = with_lines(a)


def b():
    return f'I am in b!\n'
new_b = with_lines(b)

print(a())
print(b())
print(new_a())
print(new_b())

Output :-
I am in a!

I am in b!

------------------------------------------------------------
I am in a!
------------------------------------------------------------

-----------------------------------------------------------------
I am in b!
-----------------------------------------------------------------


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we created a &lt;em&gt;with_lines&lt;/em&gt; function which takes &lt;em&gt;func&lt;/em&gt; (callable object ) as and argument and &lt;em&gt;with_lines&lt;/em&gt; function has an inner function &lt;em&gt;wrapper&lt;/em&gt;&lt;br&gt;
which has access to the outer function variable, &lt;br&gt;
So we call the function passed by outer function inside the &lt;strong&gt;wrapper&lt;/strong&gt; function by adding &lt;em&gt;global varible&lt;/em&gt; lines at the start and end and return wrapper function object.&lt;/p&gt;

&lt;p&gt;With this now we have a &lt;em&gt;with_lines&lt;/em&gt; function wrapper which can we used with any function to change behiviour of the function,&lt;/p&gt;

&lt;p&gt;As we used it with  &lt;em&gt;new_a&lt;/em&gt; and &lt;em&gt;new_b&lt;/em&gt; functions that have some formating added to them using &lt;em&gt;with_lines&lt;/em&gt; wrapper function.&lt;/p&gt;

&lt;p&gt;Wrapper are one of the most powerful tools of python which can we used to change or added some extra behiviour to the existing function.&lt;/p&gt;

&lt;p&gt;Now we have gathered enough information to understand &lt;em&gt;Decorators&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-decorator"&gt;
  &lt;/a&gt;
  What is a Decorator?
&lt;/h3&gt;

&lt;p&gt;In simple terms :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A function&lt;/li&gt;
&lt;li&gt;that takes function as an argument &lt;/li&gt;
&lt;li&gt;and return a function as its output&lt;/li&gt;
&lt;li&gt;Because of the &lt;strong&gt;@&lt;/strong&gt; syntax in Python, decorating a function replaces that function with the result of calling the decorator on the function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-can-i-use-a-decorator-for"&gt;
  &lt;/a&gt;
  What can I use a Decorator For?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Anything that is repeated across multiple functions&lt;/li&gt;
&lt;li&gt;Grab / modify / filter input arguments&lt;/li&gt;
&lt;li&gt;Grab / modify / filter outputs&lt;/li&gt;
&lt;li&gt;Change the state&lt;/li&gt;
&lt;li&gt;Stop a function from being called under certain conditions&lt;/li&gt;
&lt;li&gt;Choose a different function to be called instead&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we will understand decorators with couple of examples&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lines = '-' * 60 + '\n'

def with_lines(func):
    def wrapper(*args, **kwargs):
        return f'{lines}{func(*args, **kwargs)}{lines}'
    return wrapper

@with_lines
def a():
    return f'I am in a!\n'
# a = with_lines(a)   # this line (after) is the same as @with_lines (before)


@with_lines
def b():
    return f'I am in b!\n'
# b = with_lines(b)  # this line (after) is the same as line 14

@with_lines
def add(x, y):
    return f'{x} + {y} = {x+y}\n'

print(a())
print(b())
print(add(3,5))  # add is actually wrapper! so when I call add(3,5), it's saying wrapper(3,5)

OUTPUT :- 

-----------------------------------------------------------------
I am in a!
-----------------------------------------------------------------

-----------------------------------------------------------------
I am in b!
-----------------------------------------------------------------

-----------------------------------------------------------------
3 + 5 = 8
-----------------------------------------------------------------

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the same &lt;em&gt;with_lines&lt;/em&gt; wrapper function used in the above example we added this decorator with the existing method &lt;em&gt;a()&lt;/em&gt; ,&lt;em&gt;b()&lt;/em&gt; and &lt;em&gt;add()&lt;/em&gt; method using using &lt;strong&gt;@&lt;/strong&gt; Symbol which replaces that function with the result of calling the decorator on the function.&lt;/p&gt;

&lt;p&gt;Let's take another example to see how we can filter the input using decorator :-&lt;br&gt;
We have given a list of int from which we have to all numbers which are only even, let's see how we can do it using &lt;em&gt;decorator&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

# Wrapper that filter even from list of ints
def only_evens(func):
    def wrapper(*args):
        even_numbers = [num for num in args if num % 2 == 0]
        print("\n\nWrapper added")
        print(f"even numbers {even_numbers}")
        result = f"sum of even numbers :- {func(*even_numbers)}"
        return result

    return wrapper



def add_nums(*numbers):
    sum = 0
    for num in numbers:
        sum += num
    return sum


print("Original add_nums function output :-",add_nums(1,2,3,4,5,6,7,8,9,10))

@only_evens
def add_nums(*numbers):
    sum = 0
    for num in numbers:
        sum += num
    return sum


print("Original add_nums function output :-",add_nums(1,2,3,4,5,6,7,8,9,10))

Output :-
Original add_nums function output :- 55


Wrapper added
even numbers [2, 4, 6, 8, 10]
Original add_nums function output :- sum of even numbers :- 30

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example &lt;br&gt;
first we called the orignal method &lt;em&gt;add_nums()&lt;/em&gt; which add all the numbers.&lt;br&gt;
then we declared the &lt;em&gt;add_nums()&lt;/em&gt; function again but this time &lt;br&gt;
added &lt;strong&gt;@only_evens&lt;/strong&gt; wrapper to it , the  wrapper &lt;em&gt;only_evens&lt;/em&gt; filter the list of values first then the filters values passed to the original method &lt;em&gt;add_nums()&lt;/em&gt; which return the sum of only even values.&lt;/p&gt;

&lt;p&gt;with this example we have come to an end,&lt;br&gt;
hope you all have learn some basis of &lt;em&gt;decorators&lt;/em&gt;&lt;br&gt;
this topic , at first is not easy to grasp,&lt;br&gt;
but as you explore more about &lt;em&gt;decorators&lt;/em&gt;&lt;br&gt;
you will know how useful it is.&lt;br&gt;
See you next time :-)&lt;/p&gt;

</description>
      <category>progamming</category>
      <category>python</category>
      <category>beginners</category>
      <category>decorators</category>
    </item>
    <item>
      <title>Tutorial on Chartist.js and custom tooltips.</title>
      <author>Jonathon Ringeisen</author>
      <pubDate>Wed, 10 Nov 2021 16:44:47 +0000</pubDate>
      <link>https://dev.to/jringeisen/tutorial-on-chartistjs-and-custom-tooltips-2lje</link>
      <guid>https://dev.to/jringeisen/tutorial-on-chartistjs-and-custom-tooltips-2lje</guid>
      <description>&lt;p&gt;The Chartist JavaScript library provides a high-level API to draw charts in various ways. It makes it easy to create the most common types of charts, and with its simple configuration options, you can get beautiful results quickly. In this tutorial, we’ll create a chart from scratch, step by step. You can also take a look at the &lt;a href="https://codesandbox.io/s/custom-tooltip-with-chartist-js-41mk4"&gt;codesandbox example&lt;/a&gt; for this tutorial to see the final result. This tutorial assumes that you have some basic knowledge of HTML and JavaScript but no prior experience with Chartist.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;To get Chartist working with your project, you’ll need to import the Chartist.js files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="stylesheet" href="//cdn.jsdelivr.net/chartist.js/latest/chartist.min.css"&amp;gt;
&amp;lt;script src="//cdn.jsdelivr.net/chartist.js/latest/chartist.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to add these between the &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag. The charts will render as SVG, which means they scale infinitely and can be printed or animated for use in infographics or presentations.&lt;/p&gt;

&lt;p&gt;Next, you'll need to add the following snippet of code in the body of your html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="ct-chart"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, you'll need the javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var data = {
  // A labels array that can contain any sort of values
  labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
  // Our series array that contains series objects or in this case series data arrays
  series: [
    [5, 2, 4, 2, 0]
  ]
};

// Create a new line chart object where as first parameter we pass in a selector
// that is resolving to our chart container element. The Second parameter
// is the actual data object.
new Chartist.Line('.ct-chart', data);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the bare minimum of what you need to start working with Chartist, pretty simple, right.&lt;/p&gt;

&lt;p&gt;I was recently working on a project where I needed a tooltip to display every-time I hovered over a point, and it needed to display the series data. Chartist has a tooltip plugin, but I found this plugin to have a lot of issues and it didn't work well for me, so I decided to implement my own tooltip. Let's discuss customizing our chart and then I will cover how to create and customize a tooltip.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customizing-chartist"&gt;
  &lt;/a&gt;
  Customizing Chartist
&lt;/h2&gt;

&lt;p&gt;Here is what we're going to build. A stats card that displays a chart of daily user signups.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_NpShtt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w378qbvkf4x4mvceokej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_NpShtt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w378qbvkf4x4mvceokej.png" alt="Chartist daily users chart" width="714" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To build this, I'm using &lt;a href="https://tailwindcss.com"&gt;Tailwindcss&lt;/a&gt; for styling, you can build your own classes and use those, but I love Tailwind so I'm using it.&lt;/p&gt;

&lt;p&gt;The HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="relative w-1/3 mx-auto mt-20 h-40 bg-white rounded-md overflow-hidden overflow-y-scroll shadow"&amp;gt;
  &amp;lt;div class="p-6 w-full"&amp;gt;Daily Users&amp;lt;/div&amp;gt;
  &amp;lt;div class="absolute w-full ct-chart"&amp;gt;
    // This part is important! We will cover this when we customize the tooltip.
    &amp;lt;div class="hidden absolute inline-block chartist-tooltip bg-white text-xs shadow text-center px-3 py-1 rounded-md w-28"&amp;gt;
       &amp;lt;span class="chartist-tooltip-meta"&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br /&amp;gt;
       &amp;lt;span class="chartist-tooltip-value"&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our series or chart data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var data = {
  series: [
    [
      { meta: "2021-01-01", value: 0 },
      { meta: "2021-01-02", value: 5 },
    ]
  ]
};

// The meta and value will display in the tooltip.
// The value is what's used to create the line on the chart.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, are the chart options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var options = {
  // extends the chart the full width of the div
  fullWidth: true,

  // removes any padding
  chartPadding: 0,

  // options for the x axis
  axisX: {
    // the chart was display outside the card.
    // to fix that we move it up with the offset.
    offset: 64,

    // turns off the grid
    showGrid: false,

    // turns off the labels
    showLabel: false
  },
  // options for the y axis
  axisY: {
    // no offset was needed so we set it to 0
    offset: 0,

    // turns off the grid
    showGrid: false,

    // turns off the labels
    showLabel: false
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Handeling the tooltip:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new Chartist.Line(".ct-chart", data, options).on("draw", function (data) {
    // We only want the tooltip to apply to the point.
    if (data.type === "point") {
      // What want the tooltip to display on mouseenter so we listen for that event.
      data.element._node.addEventListener("mouseenter", (e) =&amp;gt; {

        // I'm getting the tooltip by its class name.
        const tooltip = document.getElementsByClassName("chartist-tooltip");

        // This is how we're setting the position of the tooltip.
        // This will set the top of the tool tip.
        tooltip[0].style.top = data.y - 50 + "px";

        // This will set the left of the tooltip. What this does is if you're on the
        // right side of the card the tooltip display left of the cursor, if you're on
        // the left side of the card the tooltip displays right of the cursor.
        tooltip[0].style.left =
          data.x &amp;gt; 200 ? data.x - 100 + "px" : data.x + "px";

        // Here we're removing the hidden class so that the tooltip will display.
        tooltip[0].classList.remove("hidden");

        // This gets the tooltip meta div.
        const meta = document.getElementsByClassName(
          "chartist-tooltip-meta"
        );

        // This sets the data for the meta information on the tooltip
        meta[0].innerHTML = data.meta;

        // This gets the tooltip value div.
        const value = document.getElementsByClassName(
          "chartist-tooltip-value"
        );

        // This sets the data for the value.
        value[0].innerHTML =
          data.value.y === 1
          ? data.value.y + " view"
          : data.value.y + " views";
    });

    // here we're listening for when the mouse leaves, and when it does
    // we add the class hidden to hide the tooltip.
    data.element._node.addEventListener("mouseleave", (e) =&amp;gt; {
        const tooltip = document.getElementsByClassName("chartist-tooltip");
        tooltip[0].classList.add("hidden");
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-and-summary"&gt;
  &lt;/a&gt;
  Conclusion and Summary
&lt;/h2&gt;

&lt;p&gt;Chartist.js is a javascript library that makes it simple to create beautiful charts using HTML5 canvas, without requiring any knowledge of how JavaScript works under-the-hood. With Chartist, you can get away with only knowing basic HTML and CSS syntax, while your data automatically turns into professional looking charts! While Chartists doesn’t have any pre-made chart types built in, you can always customize one to fit your needs by combining multiple elements in unique ways.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tailwindcss</category>
      <category>programming</category>
      <category>graphs</category>
    </item>
    <item>
      <title>Building a Dot Matrix Animator</title>
      <author>Kenny Fitzgerald (he/him)</author>
      <pubDate>Wed, 10 Nov 2021 16:44:30 +0000</pubDate>
      <link>https://dev.to/fitzgeraldkd/building-a-dot-matrix-animator-4edm</link>
      <guid>https://dev.to/fitzgeraldkd/building-a-dot-matrix-animator-4edm</guid>
      <description>&lt;p&gt;Whenever I start learning a new skill, I like to come up with a project I can use to apply the skill, test my knowledge, and push myself to find areas where I need to improve. As helpful as tutorials and walkthroughs are, I find that I always get the most experience when I can struggle through a project I start from scratch and apply the knowledge I've learned without explicit instructions. I decided to write this blog about my first Ruby project because I really enjoyed this project and think the results are pretty cool! I won't get into the details about the code here, but it is all available on my &lt;a href="https://github.com/fitzgeraldkd/dot-matrix"&gt;GitHub&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-idea"&gt;
  &lt;/a&gt;
  The Idea
&lt;/h2&gt;

&lt;p&gt;The idea I came up with was to write a program that creates a dot matrix animation based on input images. Here were my goals for the project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The user can provide any number of images for the animation

&lt;ul&gt;
&lt;li&gt;Each image acts as a &lt;a href="https://en.wikipedia.org/wiki/Key_frame"&gt;keyframe&lt;/a&gt; in the animation&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The user can specify the size of the dot matrix (rows, columns, and dot size)&lt;/li&gt;
&lt;li&gt;The user can specify how long each keyframe is displayed, as well as how long the transition between keyframes lasts&lt;/li&gt;
&lt;li&gt;The user will receive an animation based on the inputs where dots are rendered on each frame with a size that relates to the pixel's color&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the purpose of having a set of images to start with, I made some simple, bitonal, vector images of my initials. I will be using these three images as the keyframes for my test animation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RFUEsT16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6WDhHC0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RFUEsT16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6WDhHC0.png" alt="My initials as keyframes" width="880" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-implementation"&gt;
  &lt;/a&gt;
  The Implementation
&lt;/h2&gt;

&lt;p&gt;Before writing the code, I wanted to come up with a plan so I could determine which tools I should implement. Here's what I came up with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Process&lt;/strong&gt; the input images

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Reduce the image size&lt;/em&gt; down to the dot matrix size so one pixel is represented by one dot (processing a full-size image would take longer, use more memory, and provide no benefit)&lt;/li&gt;
&lt;li&gt;For each pixel in the image, &lt;em&gt;determine the size&lt;/em&gt; a dot would need to be to represent a close approximation of the shade/tint&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Interpolate&lt;/strong&gt; between keyframes so the dots' sizes transition smoothly&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Generate frames&lt;/strong&gt; of the GIF animation

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Render a dot&lt;/em&gt; for each pixel with a size based on the pixel's color&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Save&lt;/strong&gt; the final GIF file&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#processing-the-input-images"&gt;
  &lt;/a&gt;
  &lt;em&gt;Processing the Input Images&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;To accomplish this project, I knew I would need some way to process the input images. Resizing the images was the easy bit. The more complex (and more important) task was to find the best way to relate a pixel's color in the source image to a dot's size in final animation. I felt that the &lt;strong&gt;relative luminance&lt;/strong&gt; as described &lt;a href="https://www.w3.org/TR/WCAG/#dfn-relative-luminance"&gt;in this W3 accessibility document&lt;/a&gt; was a logical property to use in this case, and can be easily calculated with a color's RGB components. After determining what tasks I needed to fulfill, I determined that the &lt;a href="https://rmagick.github.io/"&gt;RMagick library&lt;/a&gt; would be a good choice for this project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rendering-a-gif"&gt;
  &lt;/a&gt;
  &lt;em&gt;Rendering a GIF&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Since I already decided to use RMagick to process the images, it makes sense to continue using it to generate a new GIF file for the animation as well. Luckily most of the process is pretty straightforward:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Create an instance&lt;/strong&gt; of the &lt;code&gt;ImageList&lt;/code&gt; class (a class defined in the RMagick library) to hold each frame of the animation&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;For each frame&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Create an instance&lt;/em&gt; of the &lt;code&gt;Image&lt;/code&gt; class (also from RMagick)&lt;/li&gt;
&lt;li&gt;Provide a &lt;em&gt;background color&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;For each pixel/dot:

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Draw a circle&lt;/em&gt; in the corresponding location with a radius determined by the relative luminance&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Add&lt;/em&gt; the &lt;code&gt;Image&lt;/code&gt; instance to the &lt;code&gt;ImageList&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Provide a duration&lt;/em&gt; for how long the &lt;code&gt;Image&lt;/code&gt; just added should last (this allows us to pause longer on a keyframe compared to the transitional/animation frames)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Save&lt;/strong&gt; the &lt;code&gt;ImageList&lt;/code&gt; instance to a &lt;code&gt;.gif&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The more challenging piece is the &lt;strong&gt;transition between keyframes&lt;/strong&gt;. To do this, I decided to write a method that would generate a new, weighted average image between two keyframes. As time progresses, the weight will shift towards the end keyframe to allow me to interpolate and generate a frame &lt;em&gt;at any point in time&lt;/em&gt;. This new image can then be processed just like the keyframes. Below is an image demonstrating what I need to accomplish:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5hCC1h-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/905DSal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5hCC1h-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/905DSal.png" alt="Transitioning between two keyframes" width="880" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With any of these transitional images a new frame can be processed to create a frame of the dot matrix animation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-classes"&gt;
  &lt;/a&gt;
  The Classes
&lt;/h2&gt;

&lt;p&gt;With a library selected and a plan set, I had to determine how to actually write the program. Leaning more towards an object-oriented approach, I decided I wanted to use three classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;code&gt;Animation&lt;/code&gt; class that holds most of the information/logic for the animation as a whole&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Frame&lt;/code&gt; class that holds the data for a single image in the animation&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Dot&lt;/code&gt; class that holds the information for a single dot/pixel in an image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the program is initiated, it creates an instance of the &lt;code&gt;Animation&lt;/code&gt; class. It then resizes all of the input images down to the desired dot matrix size and adds them to an array in the &lt;code&gt;Animation&lt;/code&gt; instance. The next step is to create &lt;code&gt;Frame&lt;/code&gt; instances for each keyframe and all the transitional frames. Then each pixel of each &lt;code&gt;Frame&lt;/code&gt; is used to instantiate a &lt;code&gt;Dot&lt;/code&gt;, which is then used to render the animation. This is a bit of a simplification, but the source code is available on my &lt;a href="https://github.com/fitzgeraldkd/dot-matrix"&gt;repository on GitHub&lt;/a&gt; for those who want to dive a little deeper!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-interface"&gt;
  &lt;/a&gt;
  The Interface
&lt;/h2&gt;

&lt;p&gt;I wanted to provide a command-line interface for the user that was &lt;strong&gt;easy to use&lt;/strong&gt;, and I also wanted to provide the &lt;strong&gt;flexibility&lt;/strong&gt; with the options used to render the animation. After looking around online I found that &lt;a href="https://github.com/rails/thor"&gt;Thor&lt;/a&gt; was a good tool to utilize. It allowed me to easily create a number of options that make this program much more versatile. An example below shows how a user can select which folder the source images are in, as well as what the background and foreground colors should be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/run render_gif &lt;span class="nt"&gt;--subfolder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;demo &lt;span class="nt"&gt;--bg_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;black &lt;span class="nt"&gt;--fg_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;red
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are more options than that as well, and a default value is provided for each one. There is also a separate Ruby file that holds all the defaults to make it easy for a user to set their own preferences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-results"&gt;
  &lt;/a&gt;
  The Results
&lt;/h2&gt;

&lt;p&gt;I'm really proud of the results! I was able to get the program to do exactly what I was looking for, and I enjoy seeing the animation. For the first example, here are three images I used as keyframes: one image for each of my initials.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RFUEsT16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6WDhHC0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RFUEsT16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6WDhHC0.png" alt="My initials as keyframes" width="880" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After using these images in the script, here is the animation I got:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9z6lPIFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/zEfihJk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9z6lPIFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/zEfihJk.gif" alt="Dot matrix animation of my initials" width="256" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome! After seeing the results for a very simple bitonal image, I wanted to see how it looked for more complex examples. I decided to generate a static dot matrix with a width of 100 pixels for these examples. I used &lt;a href="https://unsplash.com/photos/MGDIKg9Bw5U"&gt;this black &amp;amp; white photo of the Eiffel Tower&lt;/a&gt; by Lisa BR on Unsplash and ran my script to see some nice results: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G50enR84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mV3w35E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G50enR84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mV3w35E.png" alt="Dot matrix of a photo of Paris" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also tried it out on &lt;a href="https://unsplash.com/photos/3v9CFkIKw_c"&gt;this photo of a dog and a pumpkin&lt;/a&gt; by Nathan Guzman on Unsplash and saw similarly promising results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LBUNe_NS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HrvseLH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LBUNe_NS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HrvseLH.png" alt="Dot matrix of a photo of a dog and a pumpkin" width="880" height="1320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obviously a lot of detail was lost since the original pictures were almost 2000 pixels in width each and were being reduced to 100 pixels (also all color is removed), but all things considered I think the results are great! The pumpkin next to the dog may not be recognizeable at this resolution and with the absense of color, but other than that both images still retain enough detail to be made sense of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future"&gt;
  &lt;/a&gt;
  The Future
&lt;/h2&gt;

&lt;p&gt;Here's a few things I'd like to add in the future:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have the foreground/background colors be dynamically set by the dominant colors in the source image&lt;/li&gt;
&lt;li&gt;Provide the option to generate an SVG instead of (or in addition to) a GIF&lt;/li&gt;
&lt;li&gt;Allow an animated GIF to be an input image and have each frame be processed (it currently reads only a single frame from animated GIFs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you found this project as interesting as I did! I had a lot of fun making it and feel a lot more comfortable with Ruby's syntax after going through it. &lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>ruby</category>
      <category>programming</category>
    </item>
    <item>
      <title>Transform tabular data with composable workflows</title>
      <author>David Mezzetti</author>
      <pubDate>Wed, 10 Nov 2021 16:34:41 +0000</pubDate>
      <link>https://dev.to/neuml/transform-tabular-data-with-composable-workflows-3lh4</link>
      <guid>https://dev.to/neuml/transform-tabular-data-with-composable-workflows-3lh4</guid>
      <description>&lt;p&gt;&lt;a href="https://colab.research.google.com/github/neuml/txtai/blob/master/examples/22_Transform_tabular_data_with_composable_workflows.ipynb"&gt;&lt;img src="https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667" alt="" width="117" height="20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article is part of a tutorial series on &lt;a href="https://github.com/neuml/txtai"&gt;txtai&lt;/a&gt;, an AI-powered semantic search platform.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;txtai executes machine-learning workflows to transform data and build AI-powered semantic search applications. txtai has support for processing both unstructured and structured data. Structured or tabular data is grouped into rows and columns. This can be a spreadsheet, an API call that returns JSON or XML or even list of key-value pairs.&lt;/p&gt;

&lt;p&gt;This article will walk through examples on how to use workflows with the tabular pipeline to transform and index structured data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  Install dependencies
&lt;/h1&gt;

&lt;p&gt;Install &lt;code&gt;txtai&lt;/code&gt; and all dependencies. We will install the api, pipeline and workflow optional extras packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;txtai[api,pipeline,similarity]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#csv-workflow"&gt;
  &lt;/a&gt;
  CSV Workflow
&lt;/h1&gt;

&lt;p&gt;The first example will transform and index a CSV file. The &lt;a href="https://allenai.org/data/cord-19"&gt;COVID-19 Open Research Dataset&lt;/a&gt; (CORD-19) is a repository of medical articles covering COVID-19. This workflow reads the input CSV and builds a semantic search index.&lt;/p&gt;

&lt;p&gt;The first step is downloading the dataset locally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Get CORD-19 metadata file
!wget https://ai2-semanticscholar-cord-19.s3-us-west-2.amazonaws.com/2021-11-01/metadata.csv
!head -1 metadata.csv &amp;gt; input.csv
!tail -10000 metadata.csv &amp;gt;&amp;gt; input.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next section creates a simple workflow consisting of a tabular pipeline. The tabular pipeline builds a list of (id, text, tag) tuples that can be easily loaded into an Embeddings index. For this example, we'll use the &lt;code&gt;url&lt;/code&gt; column as the id and the &lt;code&gt;title&lt;/code&gt; column as the text column. The textcolumns parameter takes a list of columns to support indexing text content from multiple columns. &lt;/p&gt;

&lt;p&gt;The file input.csv is processed and the first 5 rows are shown.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Tabular&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.workflow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Workflow&lt;/span&gt;

&lt;span class="c1"&gt;# Create tabular instance mapping input.csv fields
&lt;/span&gt;&lt;span class="n"&gt;tabular&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tabular&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Create workflow
&lt;/span&gt;&lt;span class="n"&gt;workflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tabular&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

&lt;span class="c1"&gt;# Print 5 rows of input.csv via workflow
&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"input.csv"&lt;/span&gt;&lt;span class="p"&gt;]))[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[('https://doi.org/10.1016/j.cmpb.2021.106469; https://www.ncbi.nlm.nih.gov/pubmed/34715516/',
  'Computer simulation of the dynamics of a spatial susceptible-infected-recovered epidemic model with time delays in transmission and treatment.',
  None),
 ('https://www.ncbi.nlm.nih.gov/pubmed/34232002/; https://doi.org/10.36849/jdd.5544',
  'Understanding the Potential Role of Abrocitinib in the Time of SARS-CoV-2',
  None),
 ('https://doi.org/10.1186/1471-2458-8-42; https://www.ncbi.nlm.nih.gov/pubmed/18234083/',
  "Can the concept of Health Promoting Schools help to improve students' health knowledge and practices to combat the challenge of communicable diseases: Case study in Hong Kong?",
  None),
 ('https://www.ncbi.nlm.nih.gov/pubmed/32983582/; https://www.sciencedirect.com/science/article/pii/S2095809920302514?v=s5; https://api.elsevier.com/content/article/pii/S2095809920302514; https://doi.org/10.1016/j.eng.2020.07.018',
  'Buying time for an effective epidemic response: The impact of a public holiday for outbreak control on COVID-19 epidemic spread',
  None),
 ('https://doi.org/10.1093/pcmedi/pbab016',
  'The SARS-CoV-2 spike L452R-E484Q variant in the Indian B.1.617 strain showed significant reduction in the neutralization activity of immune sera',
  None)]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we take the workflow output, build an Embeddings index and run a search query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.embeddings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Embeddings&lt;/span&gt;

&lt;span class="c1"&gt;# Embeddings with sentence-transformers backend
&lt;/span&gt;&lt;span class="n"&gt;embeddings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Embeddings&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"method"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"transformers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sentence-transformers/paraphrase-mpnet-base-v2"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;# Index subset of CORD-19 data
&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"input.csv"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"insulin"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Importance of diabetes management during the COVID-19 pandemic. https://doi.org/10.1080/00325481.2021.1978704; https://www.ncbi.nlm.nih.gov/pubmed/34602003/
Position Statement on How to Manage Patients with Diabetes and COVID-19 https://www.ncbi.nlm.nih.gov/pubmed/33442169/; https://doi.org/10.15605/jafes.035.01.03
Successful blood glucose management of a severe COVID-19 patient with diabetes: A case report https://www.ncbi.nlm.nih.gov/pubmed/32590779/; https://doi.org/10.1097/md.0000000000020844
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example searched for the term &lt;code&gt;insulin&lt;/code&gt;. The top results mention diabetes and blood glucose which are a closely associated terms for diabetes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#json-service-workflow"&gt;
  &lt;/a&gt;
  JSON Service Workflow
&lt;/h1&gt;

&lt;p&gt;The next example builds a workflow that runs a query against a remote URL, retrieves the results, then transforms and indexes the tabular data. This example gets the top results from the &lt;a href="https://news.ycombinator.com/"&gt;Hacker News front page&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Below shows how to build the ServiceTask and prints the first JSON result. Details on how to configure the ServiceTask can be found in &lt;a href="https://neuml.github.io/txtai/workflows/"&gt;txtai's documentation&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.workflow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ServiceTask&lt;/span&gt;

&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ServiceTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://hn.algolia.com/api/v1/search"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"get"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hits"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;workflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"front_page"&lt;/span&gt;&lt;span class="p"&gt;]))[:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[{'_highlightResult': {'author': {'matchLevel': 'none',
    'matchedWords': [],
    'value': 'withzombies'},
   'title': {'matchLevel': 'none',
    'matchedWords': [],
    'value': 'An opinionated guide on how to reverse engineer software'},
   'url': {'matchLevel': 'none',
    'matchedWords': [],
    'value': 'https://margin.re/media/an-opinionated-guide-on-how-to-reverse-engineer-software-part-1.aspx'}},
  '_tags': ['story', 'author_withzombies', 'story_29084716', 'front_page'],
  'author': 'withzombies',
  'comment_text': None,
  'created_at': '2021-11-02T17:43:47.000Z',
  'created_at_i': 1635875027,
  'num_comments': 25,
  'objectID': '29084716',
  'parent_id': None,
  'points': 254,
  'story_id': None,
  'story_text': None,
  'story_title': None,
  'story_url': None,
  'title': 'An opinionated guide on how to reverse engineer software',
  'url': 'https://margin.re/media/an-opinionated-guide-on-how-to-reverse-engineer-software-part-1.aspx'}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we'll map the JSON data using the tabular pipeline. &lt;code&gt;url&lt;/code&gt; will be used as the id column and &lt;code&gt;title&lt;/code&gt; as the text to index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.workflow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;

&lt;span class="c1"&gt;# Recreate service applying the tabular pipeline to each result
&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ServiceTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tabular&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://hn.algolia.com/api/v1/search"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"get"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hits"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;workflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"front_page"&lt;/span&gt;&lt;span class="p"&gt;]))[:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[('https://margin.re/media/an-opinionated-guide-on-how-to-reverse-engineer-software-part-1.aspx',
  'An opinionated guide on how to reverse engineer software',
  None)]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we did previously, let's build an Embeddings index and run a search query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Embeddings with sentence-transformers backend
&lt;/span&gt;&lt;span class="n"&gt;embeddings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Embeddings&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"method"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"transformers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sentence-transformers/paraphrase-mpnet-base-v2"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;# Index Hacker News front page
&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"front_page"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cloud"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;How Temporal Workload Shifting Can Reduce Carbon Emissions in the Cloud https://arxiv.org/abs/2110.13234
Hetzner Cloud Goes US (Ashburn/VA) https://twitter.com/Hetzner_Online/status/1455837994259210242
Hetzner cloud servers are now available in Ashburn USA https://www.hetzner.com/news/11-21-usa-cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#xml-service-workflow"&gt;
  &lt;/a&gt;
  XML Service workflow
&lt;/h1&gt;

&lt;p&gt;txtai's ServiceTask can consume both JSON and XML. This example runs a query against the &lt;a href="https://arxiv.org/"&gt;arXiv API&lt;/a&gt;, transforms the results and indexes them for search.&lt;/p&gt;

&lt;p&gt;Below shows how to build the ServiceTask and prints the first XML result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ServiceTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://export.arxiv.org/api/query"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"get"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"search_query"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"max_results"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"feed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"entry"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;workflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"all:aliens"&lt;/span&gt;&lt;span class="p"&gt;]))[:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[OrderedDict([('id', 'http://arxiv.org/abs/2102.01522v3'),
              ('updated', '2021-09-06T14:18:23Z'),
              ('published', '2021-02-01T18:27:12Z'),
              ('title',
               'If Loud Aliens Explain Human Earliness, Quiet Aliens Are Also Rare'),
              ('summary',
               "If life on Earth had to achieve n 'hard steps' to reach humanity's level,\nthen the chance of this event rose as time to the n-th power. Integrating this\nover habitable star formation and planet lifetime distributions predicts &amp;gt;99%\nof advanced life appears after today, unless n&amp;lt;3 and max planet duration\n&amp;lt;50Gyr. That is, we seem early. We offer this explanation: a deadline is set by\n'loud' aliens who are born according to a hard steps power law, expand at a\ncommon rate, change their volumes' appearances, and prevent advanced life like\nus from appearing in their volumes. 'Quiet' aliens, in contrast, are much\nharder to see. We fit this three-parameter model of loud aliens to data: 1)\nbirth power from the number of hard steps seen in Earth history, 2) birth\nconstant by assuming a inform distribution over our rank among loud alien birth\ndates, and 3) expansion speed from our not seeing alien volumes in our sky. We\nestimate that loud alien civilizations now control 40-50% of universe volume,\neach will later control ~10^5 - 3x10^7 galaxies, and we could meet them in\n~200Myr - 2Gyr. If loud aliens arise from quiet ones, a depressingly low\ntransition chance (~10^-4) is required to expect that even one other quiet\nalien civilization has ever been active in our galaxy. Which seems bad news for\nSETI. But perhaps alien volume appearances are subtle, and their expansion\nspeed lower, in which case we predict many long circular arcs to find in our\nsky."),
              ('author',
               [OrderedDict([('name', 'Robin Hanson')]),
                OrderedDict([('name', 'Daniel Martin')]),
                OrderedDict([('name', 'Calvin McCarter')]),
                OrderedDict([('name', 'Jonathan Paulson')])]),
              ('arxiv:comment',
               OrderedDict([('@xmlns:arxiv', 'http://arxiv.org/schemas/atom'),
                            ('#text', 'To appear in Astrophysical Journal')])),
              ('link',
               [OrderedDict([('@href', 'http://arxiv.org/abs/2102.01522v3'),
                             ('@rel', 'alternate'),
                             ('@type', 'text/html')]),
                OrderedDict([('@title', 'pdf'),
                             ('@href', 'http://arxiv.org/pdf/2102.01522v3'),
                             ('@rel', 'related'),
                             ('@type', 'application/pdf')])]),
              ('arxiv:primary_category',
               OrderedDict([('@xmlns:arxiv', 'http://arxiv.org/schemas/atom'),
                            ('@term', 'q-bio.OT'),
                            ('@scheme', 'http://arxiv.org/schemas/atom')])),
              ('category',
               [OrderedDict([('@term', 'q-bio.OT'),
                             ('@scheme', 'http://arxiv.org/schemas/atom')]),
                OrderedDict([('@term', 'physics.pop-ph'),
                             ('@scheme',
                              'http://arxiv.org/schemas/atom')])])])]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we'll map the XML data using the tabular pipeline. &lt;code&gt;id&lt;/code&gt; will be used as the id column and &lt;code&gt;title&lt;/code&gt; as the text to index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.workflow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;

&lt;span class="c1"&gt;# Create tablular pipeline with new mapping
&lt;/span&gt;&lt;span class="n"&gt;tabular&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tabular&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Recreate service applying the tabular pipeline to each result
&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ServiceTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tabular&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://export.arxiv.org/api/query"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"get"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"search_query"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"max_results"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"feed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"entry"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;workflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"all:aliens"&lt;/span&gt;&lt;span class="p"&gt;]))[:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[('http://arxiv.org/abs/2102.01522v3',
  'If Loud Aliens Explain Human Earliness, Quiet Aliens Are Also Rare',
  None)]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we did previously, let's build an Embeddings index and run a search query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Embeddings with sentence-transformers backend
&lt;/span&gt;&lt;span class="n"&gt;embeddings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Embeddings&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"method"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"transformers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sentence-transformers/paraphrase-mpnet-base-v2"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;# Index Hacker News front page
&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workflow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"all:aliens"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"alien radio signals"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Calculating the probability of detecting radio signals from alien
  civilizations http://arxiv.org/abs/0707.0011v2
Field Trial of Alien Wavelengths on GARR Optical Network http://arxiv.org/abs/1805.04278v1
Aliens on Earth. Are reports of close encounters correct? http://arxiv.org/abs/1203.6805v2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#build-a-workflow-with-no-code"&gt;
  &lt;/a&gt;
  Build a workflow with no code!
&lt;/h1&gt;

&lt;p&gt;The next example shows how one of the same workflows above can be constructed via API configuration. This is a no-code way to build a txtai indexing workflow!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Index settings
writable: true
embeddings:
    path: sentence-transformers/nli-mpnet-base-v2

# Tabular pipeline
tabular:
  idcolumn: url
  textcolumns: 
    - title

# Workflow definitions
workflow:
  index:
    tasks:
      - task: service
        action: tabular
        url: https://hn.algolia.com/api/v1/search
        method: get
        params:
          tags: null
        batch: false
        extract: hits
      - action: upsert
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This workflow connects to the Hacker News API, gets the data for the front page and indexes it. The workflow configures the same actions that were configured in Python previously.&lt;/p&gt;

&lt;p&gt;Let's start an API instance&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!killall -9 uvicorn
!CONFIG=workflow.yml nohup uvicorn "txtai.api:app" &amp;amp;&amp;gt; api.log &amp;amp;
!sleep 30
!cat api.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INFO:     Started server process [911]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we'll execute the workflow. txtai has API bindings for &lt;a href="https://github.com/neuml/txtai.js"&gt;JavaScript&lt;/a&gt;, &lt;a href="https://github.com/neuml/txtai.java"&gt;Java&lt;/a&gt;, &lt;a href="https://github.com/neuml/txtai.rs"&gt;Rust&lt;/a&gt; and &lt;a href="https://github.com/neuml/txtai.go"&gt;Golang&lt;/a&gt;. But to keep things simple, we'll just run the commands via cURL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Execute workflow via API call
!curl -X POST "http://localhost:8000/workflow" -H  "accept: application/json" -H  "Content-Type: application/json" -d "{\"name\":\"index\",\"elements\":[\"front_page\"]}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[["https://margin.re/media/an-opinionated-guide-on-how-to-reverse-engineer-software-part-1.aspx","An opinionated guide on how to reverse engineer software",null],["https://jichu4n.com/posts/how-x-window-managers-work-and-how-to-write-one-part-i/","How X Window Managers Work, and How to Write One (2014)",null],["https://mattferraro.dev/posts/geometric-algebra","What is the inverse of a vector?",null],["https://www.hetzner.com/news/11-21-usa-cloud","Hetzner cloud servers are now available in Ashburn USA",null],["https://zigmonthly.org/letters/2021/october/","Zig monthly, October 2021: Games, gamedev, Elixir, tools and more",null],["https://twitter.com/Hetzner_Online/status/1455837994259210242","Hetzner Cloud Goes US (Ashburn/VA)",null],["https://zig.news/sobeston/using-zig-and-translate-c-to-understand-weird-c-code-4f8","Using Zig's translate-C to understand weird C code",null],["https://real-italian-coffee.herokuapp.com/home","Show HN: A generator of Fake Italian Coffee names",null],["https://www.sciencealert.com/useless-specks-of-dust-turn-out-to-be-ancient-building-blocks-of-all-vertebrate-genomes","'Useless Specks of Dust' Turn Out to Be Building Blocks of All Vertebrate Genome",null],["https://olivierlacan.com/posts/high-fidelity-remote-communication/","High-fidelity remote communication",null],["https://github.com/Qinti/nazca","Nazca – New GUI for the Web",null],["https://susam.in/blog/microcentury.html","Microcentury (2020)",null],["https://addons.mozilla.org/de/firefox/addon/downthemall/","DownThemAll",null],["https://arxiv.org/abs/2110.13234","How Temporal Workload Shifting Can Reduce Carbon Emissions in the Cloud",null],["https://ideas.krishnan.ca/are-daily-standups-hurting-your-team","Are daily standups hurting your team?",null],["https://sethkim.me/l/thesolutionspace/","Automation != Leverage",null],["https://www.listennotes.com/blog/the-boring-technology-behind-a-one-person-23/","The boring technology behind a one-person Internet company",null],["https://www.vox.com/the-goods/22725031/buying-less-supply-chain-holiday-shopping","It’s time for Americans to buy less stuff",null],["https://blog.ilograph.com/posts/beyond-whiteboarding-creating-expert-system-architecture-diagrams/","Beyond Whiteboarding: Creating Expert System Architecture Diagrams",null],["https://www.sciencemuseumgroup.org.uk/blog/covid19-effect-on-the-vaccinated/","Covid-19: How the virus spreads among vaccinated people",null]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The data is now indexed. Note that the index configuration has an &lt;code&gt;upsert&lt;/code&gt; action. Each workflow call will insert new rows or update existing rows. This call could be scheduled with a system cron to execute periodically and build an index of top stories on Hacker News over time. &lt;/p&gt;

&lt;p&gt;Now that the index is ready, let's run a search.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Run a search
!curl -X GET "http://localhost:8000/search?query=cloud&amp;amp;limit=3" -H  "accept: application/json"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[{"id":"https://twitter.com/Hetzner_Online/status/1455837994259210242","score":0.475553035736084},{"id":"https://arxiv.org/abs/2110.13234","score":0.3434651494026184},{"id":"https://olivierlacan.com/posts/high-fidelity-remote-communication/","score":0.2550020217895508}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#add-a-translation-step-to-workflow"&gt;
  &lt;/a&gt;
  Add a translation step to workflow
&lt;/h1&gt;

&lt;p&gt;Next we'll recreate the workflow, adding one additional step, translating the text into French before indexing. This workflow gets the top results from Hacker News, translates the results and builds an semantic index of titles in French.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Index settings
writable: true
embeddings:
    path: sentence-transformers/nli-mpnet-base-v2

# Tabular pipeline
tabular:
  idcolumn: url
  textcolumns: 
    - title

# Translation pipeline
translation:

# Workflow definitions
workflow:
  index:
    tasks:
      - task: service
        action: tabular
        url: https://hn.algolia.com/api/v1/search
        method: get
        params:
          tags: null
        batch: false
        extract: hits
      - action: translation
        args: [fr]
      - action: upsert
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!killall -9 uvicorn
!CONFIG=workflow.yml nohup uvicorn "txtai.api:app" &amp;amp;&amp;gt; api.log &amp;amp;
!sleep 30
!cat api.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INFO:     Started server process [935]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same as before, we'll run the index workflow and a search.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Execute workflow via API call
!curl -s -X POST "http://localhost:8000/workflow" -H  "accept: application/json" -H  "Content-Type: application/json" -d "{\"name\":\"index\",\"elements\":[\"front_page\"]}" &amp;gt; /dev/null

# Run a search
!curl -X GET "http://localhost:8000/search?query=nuage&amp;amp;limit=3" -H  "accept: application/json"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[{"id":"https://arxiv.org/abs/2110.13234","score":0.46083423495292664},{"id":"https://twitter.com/Hetzner_Online/status/1455837994259210242","score":0.37807518243789673},{"id":"https://jichu4n.com/posts/how-x-window-managers-work-and-how-to-write-one-part-i/","score":0.36641401052474976}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h1&gt;

&lt;p&gt;This notework demonstrated how to transform, index and search tabular data from a variety of sources. txtai offers maximum flexibility in building composable workflows to maximize the number of ways data can be indexed for semantic search. &lt;/p&gt;

</description>
      <category>showdev</category>
      <category>machinelearning</category>
      <category>nlp</category>
      <category>python</category>
    </item>
    <item>
      <title>Series about cryptos: Intro</title>
      <author>miku86</author>
      <pubDate>Wed, 10 Nov 2021 16:33:37 +0000</pubDate>
      <link>https://dev.to/miku86/series-about-cryptos-intro-2oi4</link>
      <guid>https://dev.to/miku86/series-about-cryptos-intro-2oi4</guid>
      <description>&lt;p&gt;Hey folks,&lt;/p&gt;

&lt;p&gt;I'm into learning a whole new topic in-depth: cryptocurrencies.&lt;/p&gt;

&lt;p&gt;In public. #learninpublic&lt;/p&gt;

&lt;p&gt;I like to learn, I like to explain.&lt;/p&gt;

&lt;p&gt;It helps me to deepen my knowledge.&lt;/p&gt;

&lt;p&gt;That's why I share this stuff with you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So this will be the first post of a series.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;In the last few months, a lot of my friends have been talking about crypto.&lt;/p&gt;

&lt;p&gt;But when I ask them questions about it, because I want to learn from them, they literally know nothing, zero, niente about it.&lt;/p&gt;




&lt;p&gt;Q: Oh cool, why did you buy this cryptocurrency?&lt;br&gt;&lt;br&gt;
A: A Youtuber talked about it.&lt;/p&gt;

&lt;p&gt;Q: Which &lt;a href="https://wikiless.org/wiki/Consensus_(computer_science)?lang=en"&gt;consensus mechanism&lt;/a&gt; does this cryptocurrency use?&lt;br&gt;&lt;br&gt;
A: Eehm, what is a "consensus mechanism"?&lt;/p&gt;

&lt;p&gt;Q: What is your investment strategy (&lt;a href="https://wikiless.org/wiki/Investment_management?lang=en"&gt;1&lt;/a&gt;, &lt;a href="https://wikiless.org/wiki/Asset_allocation?lang=en"&gt;2&lt;/a&gt;)?&lt;br&gt;&lt;br&gt;
A: I don't have one.&lt;/p&gt;




&lt;p&gt;So most of the time I think they just want to ride the hype-train. Some uncle's step-daughter's friend become a millionaire, so maybe there is a lof of &lt;a href="https://wikiless.org/wiki/Fear_of_missing_out?lang=en"&gt;fear-of-missing-out&lt;/a&gt; involved.&lt;/p&gt;

&lt;p&gt;"I have to work 9-5, and this non-intelligent guy made some 10.000 bucks, I don't want to miss this next opportunity!"&lt;/p&gt;

&lt;p&gt;Don't get me wrong, this is a normal human emotion, so it is not bad. I just think making bad decisions based on this emotion is not so fruitful.&lt;/p&gt;

&lt;p&gt;Actually, I think this is &lt;strong&gt;very dangerous&lt;/strong&gt;. Because this nurtures a very dangerous habit: acting based on bad decision-making patterns.&lt;/p&gt;

&lt;p&gt;And I think one of the worst decision-making patterns is: not knowing the fundamentals.&lt;/p&gt;

&lt;p&gt;This is why I want to talk about the &lt;strong&gt;basics of cryptocurrencies&lt;/strong&gt; - as a software developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-objectives"&gt;
  &lt;/a&gt;
  Our objectives
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Which problems do we want to solve with cryptocurrencies?&lt;/li&gt;
&lt;li&gt;What is a ledger (e.g. a blockchain)?&lt;/li&gt;
&lt;li&gt;Who decides what the state of the ledger is?&lt;/li&gt;
&lt;li&gt;What is a wallet?&lt;/li&gt;
&lt;li&gt;How does a transaction work?&lt;/li&gt;
&lt;li&gt;What is a cryptocurrency?&lt;/li&gt;
&lt;li&gt;How do I buy cryptocurrency?&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;One simple disclaimer&lt;/strong&gt; : Always double-check your informations, also my posts - everything. If you don't understand it, read up about it, ask questions ("What does X mean?"), paraphrase in your own words ("So this means, that ...?"). Don't act like a fool, always understand the underlying fundamentals.&lt;/p&gt;




&lt;p&gt;See you in the next post! :)&lt;/p&gt;

&lt;p&gt;If you want to join forces, hit me up at: &lt;a href="mailto:michael@miku86.com"&gt;michael@miku86.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>bitcoin</category>
      <category>ethereum</category>
      <category>web3</category>
    </item>
    <item>
      <title>Tmux Tutorial for Beginners</title>
      <author>Igor Irianto</author>
      <pubDate>Wed, 10 Nov 2021 16:33:24 +0000</pubDate>
      <link>https://dev.to/iggredible/tmux-tutorial-for-beginners-5c52</link>
      <guid>https://dev.to/iggredible/tmux-tutorial-for-beginners-5c52</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Tmux is life. That is not an exaggeration. Once you started using Tmux, you will ask yourself why you have not used it until now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-tmux-is"&gt;
  &lt;/a&gt;
  What Tmux Is
&lt;/h3&gt;

&lt;p&gt;According to &lt;code&gt;man tmux&lt;/code&gt;, Tmux stands for "Terminal MUltipleXer". Before you get perPLEXed by the phrase Terminal MUltipleXer, I'll explain what it means.&lt;/p&gt;

&lt;p&gt;A terminal multiplexer lets you to leave a terminal in the middle of a process and return to it seamlessly. For example, suppose that you are running a &lt;code&gt;rails server&lt;/code&gt;, &lt;code&gt;vim&lt;/code&gt; editor, and a &lt;code&gt;mysql&lt;/code&gt; console in the middle of a rails workflow. Then someone asks you to debug a completely different node project. Without tmux, I would probably stop the rails server, close vim, and exit the mysql server before starting the node-project task. This context switch causes a grinding halt in your flow. What if instead of killing those rails-related processes, you can "put them aside" (while they're still running), run whatever processes you need to complete your node task, then return to your original rails-project task as if you never left? That would be nice, wouldn't it? Tmux lets you do just that!&lt;/p&gt;

&lt;p&gt;To be fair, you could argue that you could just open more tabs for node tasks instead of killing the previous rails processes. Although that would work, this could cause tab chaos. At some point, you'll start asking, "which of these 6 tabs did I just run the &lt;code&gt;jest&lt;/code&gt; test?" or "which of these two Vim tabs was my rails codebase?". When you start mixing tabs from completely unrelated tasks without clear boundaries, you can't tell which tab is for what. This also causes a grinding halt to your workflow. &lt;/p&gt;

&lt;p&gt;The terminal is the crux of my workflow. I need to organize my terminal. Imagine this: I can contain all my rails processes inside a session named "rails_project" and all my node processes in a session named "node_project". If I need to do node tasks, I'll leave rails_project and visit node_project session. When I'm done, I'll leave node_project and revisit rails_project. Easy!&lt;/p&gt;

&lt;p&gt;Tmux allows me to create any number of terminals from a single screen and group them. I can "detach" them and they will still continue running in the background. The best part? I can "attach" them at any time. Tmux is great for long-term running processes and local development.&lt;/p&gt;

&lt;p&gt;Don't you want to learn how to do that too?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-do-i-want-to-use-tmux"&gt;
  &lt;/a&gt;
  Why Do I Want to Use Tmux?
&lt;/h4&gt;

&lt;p&gt;Over time, the number of process dependencies you need to get a job done increases. Today, it is often not enough to have just two terminals: one for running &lt;code&gt;rails server&lt;/code&gt; and one for running &lt;code&gt;vim&lt;/code&gt; to accomplish your task. In reality, you probably need a &lt;code&gt;rails server&lt;/code&gt;, a &lt;code&gt;webpacker&lt;/code&gt;, a &lt;code&gt;sidekiq&lt;/code&gt;, a &lt;code&gt;redis&lt;/code&gt; instance, and a growing number of microservices to launch your app. In addition, you may need to have &lt;code&gt;mysql&lt;/code&gt; console and &lt;code&gt;rails console&lt;/code&gt; to see what's inside your app. You may even need a dedicated terminal to run your tests. Don't forget that SSH window to get the sql dump too! Even if you have docker-compose to host multiple services, if you need to debug them, you'll need multiple terminals to debug each service. My point is, a simple task today would require more than 10 different active processes! It makes it harder to switch context.&lt;/p&gt;

&lt;p&gt;Even if you don't need to switch context often, it is still useful to categorize your sub-workflows within your workflow. Maybe today you are focusing on writing tests, so you need to use vim and a free terminal to run your test code; they would need to fit inside a display. The next day, you may need to solve a data migration issue, so you need a vim editor, a mysql server to view your databases, and a rails console to check your models. Within a single project, you can still experience a grinding halt when trying to accomplish a different task.&lt;/p&gt;

&lt;p&gt;The point is, you need to reduce the frictions caused by context-switching in today's increasingly complex tasks. Tmux can help with that.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-to-expect-from-this-guide"&gt;
  &lt;/a&gt;
  What to Expect From This Guide
&lt;/h4&gt;

&lt;p&gt;Ultimately, you decide whether you want to use tmux or not. You don't have to use tmux. There are alternatives like GNU Screen, Terminator, Byobu, etc. Check them out and you decide whether or not to use tmux.&lt;/p&gt;

&lt;p&gt;Personally, I think tmux is a better fit for my workflow. I am writing this guide to share what I understand about tmux. I hope that you will learn one or two useful things.&lt;/p&gt;

&lt;p&gt;Here is what you will learn in this guide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sessions&lt;/li&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;Panes&lt;/li&gt;
&lt;li&gt;Servers&lt;/li&gt;
&lt;li&gt;Basic configs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the end of this article, you will be faster than you would ever be without tmux. Hopefully you will learn enough to continue pursuing learning tmux on your own, just like the proverbs say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Teach a man tmux, you improve his productivity for a lifetime (someone, probably)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please read this guide &lt;strong&gt;slowly&lt;/strong&gt;. It is tempting to speed-read through a book, call it done, and move on to the next book. To get the most out of this, take your time understanding each section. For every 5 minutes you spend reading, spend 15 minutes tinkering around with what you just read. Break things.&lt;/p&gt;

&lt;p&gt;With that said, let's learn some tmux!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h4&gt;

&lt;p&gt;First, you need to install tmux if you haven't already. A good way to visit the &lt;a href="https://github.com/tmux/tmux/wiki/Installing"&gt;tmux repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am using a Mac, so for me, I just needed to run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool! Verify that it is installed. Run &lt;code&gt;which tmux&lt;/code&gt;. It should return with a path. Now that tmux is installed, let's learn tmux's cornerstone: sessions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tmux-sessions"&gt;
  &lt;/a&gt;
  Tmux Sessions
&lt;/h3&gt;

&lt;p&gt;A tmux session is a collection of pseudo-terminals. Imagine running 10 different terminal processes, each doing different things. All these terminals are contained in a neat space that you can leave unattended and revisit at any time.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-a-new-session"&gt;
  &lt;/a&gt;
  Creating a New Session
&lt;/h4&gt;

&lt;p&gt;Let's use it. Run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will launch a new tmux &lt;em&gt;session&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you're still unsure about the tmux session, don't worry. I initially had a hard time grasping the concept too. It would become much easier once I started getting immersed in it. So let's continue.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#attaching-and-detaching-a-session"&gt;
  &lt;/a&gt;
  Attaching and Detaching a Session
&lt;/h4&gt;

&lt;p&gt;To exit a session, you need to *d*etach. Press:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hold up, what is a Prefix? I don't see any prefix key on my keyboard.&lt;/p&gt;

&lt;p&gt;The prefix key can be anything you want. Many tmux shortcuts require you to press a prefix key first. If you're a Vim user, it is similar to the concept of a leader key. Think of it like a key to signal tmux that you are executing a tmux command. By default, tmux uses &lt;code&gt;Ctrl + b&lt;/code&gt; as the Prefix key. From now, each time you see &lt;code&gt;Prefix&lt;/code&gt;, it means &lt;code&gt;Ctrl + b&lt;/code&gt; (hold Ctrl then press b). In this case, &lt;code&gt;Prefix + d&lt;/code&gt; means holding Ctrl, then press b, then release them, then quickly press the letter d. Later, you'll learn how to change the prefix key from &lt;code&gt;Ctrl + b&lt;/code&gt; to any key you want.&lt;/p&gt;

&lt;p&gt;If you do it correctly, you should be taken out of the tmux session back to the original terminal.&lt;/p&gt;

&lt;p&gt;When you're detaching from a session, any process running in that session is not terminated. It's still running. You just don't see it. Think of it like a background job.&lt;/p&gt;

&lt;p&gt;Let's stop and appreciate how awesome this is. On a regular terminal, if we close the tab, whatever process that we were running would be terminated immediately. If I had &lt;code&gt;rails server&lt;/code&gt; running and I close the tab, the rails server process would be killed. But if we detach from a session with &lt;code&gt;rails server&lt;/code&gt; running, the rails server is still there. You are hiding the current process so you can focus on a different one. Later when you're ready to resume, you can "unhide" the rails server session by attaching into it. &lt;/p&gt;

&lt;p&gt;To attach, from the terminal, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux attach
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aaannd you're back. Cool!&lt;/p&gt;

&lt;p&gt;The command line equivalent to detach (&lt;code&gt;Prefix + d&lt;/code&gt;) is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux detach
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#named-session"&gt;
  &lt;/a&gt;
  Named Session
&lt;/h4&gt;

&lt;p&gt;With tmux, you can liberally generate as many sessions as you need. Right now we have only one session running. To generate more sessions, you first need to be on the regular terminal (not inside a session). This time though, let's give our session a name. It's around breakfast time as I type this, so let's name it "breakfast" session (you can give it any name you want :D). Type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux new -s breakfast
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The alternative (verbose) command is &lt;code&gt;tmux new-session -s breakfast&lt;/code&gt;, but I like to keep it short. With that, you should be in the tmux breakfast session. Yum!&lt;/p&gt;

&lt;p&gt;While you're inside the breakfast session, recall that we also have the original session running. To see a list of sessions and travel between sessions, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's detach from whatever session you are in and go back to the regular terminal (you're not inside any session). We now have two detached sessions: the original session and the breakfast session. So how do we attach to a particular session from the terminal? Earlier we ran the &lt;code&gt;tmux attach&lt;/code&gt; to attach to the only available tmux session. Now that there are two sessions, we need to be more specific.&lt;/p&gt;

&lt;p&gt;First, if you're forgetful like me and already forgot the name of your sessions, you can list the name of all the sessions by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If I want to attach to the breakfast session, run the attach command with &lt;code&gt;-t&lt;/code&gt; (target) followed by the session name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux attach -t breakfast
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I'm back to the breakfast session. Tmux is smart enough that you can give it a partial string. So if I run &lt;code&gt;tmux attach -t b&lt;/code&gt;, as long as I don't have any session starting with b other than breakfast, tmux knows that I intend to go to breakfast.&lt;/p&gt;

&lt;p&gt;Think of sessions like terminal containers. Modern development usually requires you to launch multiple services and jobs just to get the app running. For example, maybe the app that you're working on requires a redis server, a rails server, two node services, and a background job. You can use a session to contain all of those processes. This makes your workflow manageable and identifiable. If you ever need to leave them to work on something else, no need to kill them, just detach it, do whatever else you need to do, and -re-attach.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#killing-a-session"&gt;
  &lt;/a&gt;
  Killing a Session
&lt;/h4&gt;

&lt;p&gt;Once you're done with the session task, you can kill that session.&lt;/p&gt;

&lt;p&gt;There are two ways to kill a session:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the terminal command to kill a session&lt;/li&gt;
&lt;li&gt;Close all the windows until there is no more&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'll start with method 1. To kill the breakfast session, run this from the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux kill-session -t breakfast
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;kill-session&lt;/code&gt; command needs a target (&lt;code&gt;-t&lt;/code&gt;) and a session name that you want to kill. Note the &lt;code&gt;-t&lt;/code&gt; (target) argument is similar to the &lt;code&gt;attach -t&lt;/code&gt; command. In tmux, anytime you have multiple targets and you need to pinpoint a single abstraction (like a session name), you probably need to pass it a target (&lt;code&gt;-t&lt;/code&gt;) plus the target name.&lt;/p&gt;

&lt;p&gt;Anyway, running &lt;code&gt;tmux kill-session -t breakfast&lt;/code&gt; will effectively kill that session. Note: killing a session terminates all processes inside it - make sure that you save all your changes.&lt;/p&gt;

&lt;p&gt;The second method is to kill all the panes and windows inside a session until there is nothing left. We will go over panes and windows in a little bit. For now, just follow along. To kill a pane, press:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do that to every single pane and window, upon closing the last pane in the last window in a session, the session is effectively killed.&lt;/p&gt;

&lt;p&gt;An alternative shortcut to &lt;code&gt;Prefix + x&lt;/code&gt; is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Ctrl + d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It does the same thing as &lt;code&gt;Prefix + x&lt;/code&gt;. Personally, I prefer &lt;code&gt;Ctrl + d&lt;/code&gt; because it only requires two keypresses as opposed to &lt;code&gt;Prefix + x&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tmux-sessions-conclusion"&gt;
  &lt;/a&gt;
  Tmux Sessions Conclusion
&lt;/h4&gt;

&lt;p&gt;We are done with tmux sessions. Let's recap what we learned!&lt;/p&gt;

&lt;p&gt;We learned that a session is like a container to a set of terminals. You can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a session in tmux with &lt;code&gt;tmux new -s MY_SESSION&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Detach from a session with &lt;code&gt;Prefix + d&lt;/code&gt; or &lt;code&gt;tmux detach&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;List sessions with &lt;code&gt;tmux ls&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Attach to a session with &lt;code&gt;tmux attach -t MY_SESSION&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;List sessions and switch to a different session with &lt;code&gt;Prefix + s&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Kill a session with &lt;code&gt;tmux kill-session -t MY_SESSION&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Close a pane / window with either &lt;code&gt;Ctrl + d&lt;/code&gt; or &lt;code&gt;Prefix + x&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are new to tmux, let this soak in. Take time to internalize this. Practice, practice, practice. Don't rush to the next one. It's better to go at a slower pace but to retain more than go at full-speed but forget almost everything.&lt;/p&gt;

&lt;p&gt;When you're ready, let's learn about tmux windows!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tmux-windows"&gt;
  &lt;/a&gt;
  Tmux Windows
&lt;/h3&gt;

&lt;p&gt;Tmux windows are subsets of tmux sessions. When you're creating a new tmux session (&lt;code&gt;tmux new -s MY_SESSION&lt;/code&gt;), what you're seeing is technically a tmux window. Earlier I said that a tmux session is like a container of terminals. While that was true, each terminal activity happens inside a window. So technically, a tmux session is a container for tmux windows.&lt;/p&gt;

&lt;p&gt;You can have as many windows as you want in a session. Since a window contains a terminal on its own, you can have a window dedicated for running your application server, another window for logging, and another window for text-editing.&lt;/p&gt;

&lt;p&gt;Many tmux window commands are conceptually similar to the session commands. You can create, delete, and switch windows, just to name a few. I won't go through every single tmux window operation because in my opinion, you can be very productive just by learning only a few of them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-a-new-window"&gt;
  &lt;/a&gt;
  Creating a New Window
&lt;/h4&gt;

&lt;p&gt;You can only create a new window from inside a tmux session. Since it's almost lunch time at the time I wrote this, let's start a new lunch session. From the regular terminal (not from inside tmux), create a new session. This should look familiar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux new -s lunch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool! You're inside a session named lunch. You're looking at a tmux window. When you create a new session, tmux automatically creates a new window. &lt;/p&gt;

&lt;p&gt;So right now there is one window - the default window - in the lunch session. To create a new window inside a session, run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux new-window -n fried-rice
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a new window named fried-rice (I had that earlier this week). If the &lt;code&gt;new-window&lt;/code&gt; command is too verbose, you can shorthand it a bit with &lt;code&gt;neww&lt;/code&gt;. Let's create a new window named ramen, because I'm craving that right now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux neww -n ramen
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Practically speaking though, I almost never use the &lt;code&gt;new-window&lt;/code&gt; terminal command. 99% of the time, I use the following new-window keyboard shortcut:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try creating two or three new windows! Get this in your muscle memory. Window creation is one of the most often-used commands in my tmux workflow.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#switching-windows"&gt;
  &lt;/a&gt;
  Switching Windows
&lt;/h4&gt;

&lt;p&gt;By now you should have multiple windows in a session. Let's learn how to quickly switch windows.&lt;/p&gt;

&lt;p&gt;Right now I have three windows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the default window&lt;/li&gt;
&lt;li&gt;fried-rice window&lt;/li&gt;
&lt;li&gt;ramen window&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am currently on the first window. If I want to go to the *n*ext window, I can do that with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + n
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Retrospectively, to go to the *p*revious window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing to know is that tmux window is indexed like an array data structure. In many programming languages, an array data structure is zero-indexed. Tmux window is also zero-based. The first window is window number 0, the second window window number 1, etc. To go to window number N, you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + N
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whereas N is the window number. So if I want to go to the first window, &lt;code&gt;Prefix + 0&lt;/code&gt; will do it. What if I want to go to the second window? &lt;code&gt;Prefix + 1&lt;/code&gt;. Third window? &lt;code&gt;Prefix + 2&lt;/code&gt;. In my regular workflow, I try to keep my window collections small. Normally I don't have more than 5 tmux windows in any session (if I have more, it can quickly get out of control). However, people's workflows are different. You may function better by having dozens of windows in any session. Use whatever works for you. &lt;/p&gt;

&lt;p&gt;If that's the case, how can you quickly jump to window number 11? The Prefix + N shortcut only accepts one key. When you try to do Prefix + 10 (the 11th window), tmux thinks you're doing &lt;code&gt;Prefix + 1&lt;/code&gt;. To quickly jump to double window digits, you can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + ' + N
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whereas N is the window number. First, press the prefix. Then press &lt;code&gt;'&lt;/code&gt; (a single quote). This lets you enter any window index number, like 10. Then press Return. &lt;/p&gt;

&lt;p&gt;I forget things a lot (my wife can vouch for that :D). I can hardly keep track of the 5 windows I have opened in the current session. I definitely &lt;em&gt;can't&lt;/em&gt; keep track of all the windows across &lt;em&gt;all&lt;/em&gt; my sessions if I have multiple sessions running. Luckily, you can quickly list and switch to any window in any session with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + w
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you do &lt;code&gt;Prefix + w&lt;/code&gt;, tmux lists all the windows inside all the sessions you have (even the windows from detached sessions). Try it! I also use this command a lot.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#renaming-windows"&gt;
  &lt;/a&gt;
  Renaming Windows
&lt;/h4&gt;

&lt;p&gt;A window name is used to identify what the window is about. It's good to give it a succinct name. If I'm debugging a controller test, then I'll create a new window named "controller test" (yes, not original, but it's concise!). However, sometimes your task changes. The "controller test" task may morph into "feature test" (&lt;em&gt;shudders&lt;/em&gt;). In this case, you may want to rename your window. To rename the current window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + ,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your cursor is now on the lower window area where you can edit the window name.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deleting-windows"&gt;
  &lt;/a&gt;
  Deleting Windows
&lt;/h4&gt;

&lt;p&gt;When you're done with a window, you may want to delete it so it doesn't crowd your session. There are two ways to kill a window:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;kill the window with a terminal command&lt;/li&gt;
&lt;li&gt;kill all panes inside a window&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For method 1, you can run this from inside a window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux kill-window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This kills the current window you're in. If you want to kill a different window, you can pass a target option to the command &lt;code&gt;-t&lt;/code&gt;. To kill the "ramen" window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux kill-window -t ramen
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For a less verbose option, you can use &lt;code&gt;killw&lt;/code&gt; instead of &lt;code&gt;kill-window&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux killw -t fried-rice
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the second method, you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Ctrl + d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#tmux-windows-conclusion"&gt;
  &lt;/a&gt;
  Tmux Windows Conclusion
&lt;/h4&gt;

&lt;p&gt;We are done with tmux windows. Let's recap.&lt;/p&gt;

&lt;p&gt;A window is where your terminal lives. A session consists of one or more windows. Some window commands that we learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a window with &lt;code&gt;tmux new-window -n MY_WINDOW&lt;/code&gt; or &lt;code&gt;Prefix + c&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Switch to a different window with &lt;code&gt;Prefix + n&lt;/code&gt;, &lt;code&gt;Prefix + p&lt;/code&gt;, and &lt;code&gt;Prefix + N&lt;/code&gt; (where &lt;code&gt;N&lt;/code&gt; is the window index number, zero-based)&lt;/li&gt;
&lt;li&gt;Kill a window with &lt;code&gt;tmux kill-window -t MY_WINDOW&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Close a pane / window with either &lt;code&gt;Ctrl + d&lt;/code&gt; or &lt;code&gt;Prefix + x&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, take your time to internalize this. Practice what you've learned about windows &lt;em&gt;and&lt;/em&gt; sessions. Try to create several windows, navigate between them, and delete them. Create a new session and create some new windows there too.&lt;/p&gt;

&lt;p&gt;Don't rush. When you're ready, it's time to learn about tmux panes!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tmux-panes"&gt;
  &lt;/a&gt;
  Tmux Panes
&lt;/h3&gt;

&lt;p&gt;Earlier I said that when you started a new session, what you saw was a tmux window. I lied, again. What you saw was actually a tmux pane inside a tmux window inside a tmux session. When you started a new session, tmux automatically created a new window. When a new window was created, tmux generated a new pane. Just like how a tmux session has at least one window, a tmux window always contains at least one tmux pane.&lt;/p&gt;

&lt;p&gt;Now that we've been exposed to sessions, windows, and panes, let's get the terminology straight. A tmux window is a container to tmux panes. A tmux session is a container to tmux windows. When you start a session, you have at least one tmux window. Inside a session, you can create many windows (&lt;code&gt;Prefix + c&lt;/code&gt;). Inside a tmux window, you have at least one tmux pane. When you split a window for the first time, you are splitting it into two panes. Each boxed terminal is a pane in its own right. The hierarchy goes like this: Session &amp;gt; window &amp;gt; pane.&lt;/p&gt;

&lt;p&gt;Let's go through some tmux pane operations.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-a-new-pane"&gt;
  &lt;/a&gt;
  Creating a New Pane
&lt;/h4&gt;

&lt;p&gt;If you own tablets or large smart phones, they probably have a feature to split the screen in half so you can open two apps simultaneously. Panes are similar such that you can split the screen vertically (or horizontally) so you can have multiple terminals in a single window.&lt;/p&gt;

&lt;p&gt;A tmux window can be split many times into smaller panes. The command to split a window horizontally is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux split-window -h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To split it vertically:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux split-window -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They are rather easy to remember: &lt;code&gt;-h&lt;/code&gt; for *h*orizontal and &lt;code&gt;-v&lt;/code&gt; for *v*ertical.&lt;/p&gt;

&lt;p&gt;To split a window horizontally with a keyboard shortcut:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + %
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To split a window vertically:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + "
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Split windows are also one of my most frequently used tmux commands. Commit them to your muscle memory!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deleting-a-pane"&gt;
  &lt;/a&gt;
  Deleting a Pane
&lt;/h4&gt;

&lt;p&gt;To delete a pane is similar to deleting a window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Ctrl + d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our third time seeing &lt;code&gt;Prefix + x&lt;/code&gt; and &lt;code&gt;Ctrl + d&lt;/code&gt;. Now you finally understand what this command actually does. It deletes a pane. When the last pane of a window is deleted, that window is automatically removed. When the last window of a session is deleted, that session is automatically killed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#navigate-between-panes"&gt;
  &lt;/a&gt;
  Navigate Between Panes
&lt;/h4&gt;

&lt;p&gt;Let's learn the different ways to navigate between panes. First, create multiple panes in a window. Use the &lt;code&gt;Prefix + %&lt;/code&gt; or &lt;code&gt;Prefix + &amp;amp;&lt;/code&gt; shortcut to do that.&lt;/p&gt;

&lt;p&gt;To switch to the "next" pane, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + o
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tmux focuses on a different pane each time you run that command.&lt;/p&gt;

&lt;p&gt;You can also move directionally with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + Up
Prefix + Down
Prefix + Left
Prefix + Right
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These commands give you slightly more control. Now you can instruct tmux which direction you want to focus on.&lt;/p&gt;

&lt;p&gt;But that's not all. Tmux can also display all the pane numbers of the current window for you to select from. Run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + q
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see numbers displayed in the foreground center of each pane. If you type a particular number, tmux will focus on that pane number.&lt;/p&gt;

&lt;p&gt;So if I want to go to pane number 1, I just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + q + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To go to pane number 5, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + q + 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Btw, you could also have done this with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux display-panes
tmux select-pane -t N
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first command lists all the panes and the second command jumps to pane number N. I personally would rather to &lt;code&gt;Prefix + q + N&lt;/code&gt;. Ain't nobody got time to type all that! :)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#resize-a-pane"&gt;
  &lt;/a&gt;
  Resize a Pane
&lt;/h4&gt;

&lt;p&gt;I usually have about 2-3 panes in a window. But you may need to adjust their sizes. For example, the other day I had to debug a controller spec. I had the tmux window split horizontally into two panes: top and bottom. I had Vim on the top window and the terminal on the bottom for running the specs. By default, tmux splits them equally, but I prefer to have Vim to have more screen real-estate. To resize a pane, you can run one of the followings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux resize-pane -D 10
tmux resize-pane -U 10
tmux resize-pane -L 10
tmux resize-pane -R 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The number 10 is a measurement unit (tmux "cells"). The &lt;code&gt;-D/U/L/R&lt;/code&gt; options stand for Down/Up/Left/Right. Unfortunately, there are no keyboard shortcuts for this. You can create your own shortcuts to make resizing quicker. I'll show you how to do that in a later section.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#zoom-a-pane"&gt;
  &lt;/a&gt;
  Zoom a Pane
&lt;/h4&gt;

&lt;p&gt;Another feature I find helpful is pane zooming. If you have four panes displayed in a window, each taking up 25% of that window total area, you can zoom your current pane into 100% and hide the other panes with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + z
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it looks as if you only have a single pane, allowing you to view the current pane at maximum area. This is useful if you need to remove distractions and focus on a specific task at a specific pane. Then once you're done, you can de-zoom and return to the previous layout by running &lt;code&gt;Prefix + z&lt;/code&gt; one more time.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#swapping-panes"&gt;
  &lt;/a&gt;
  Swapping Panes
&lt;/h4&gt;

&lt;p&gt;If you have two panes in a window side-by-side, you can swap them with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + {
Prefix + }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also rotate the pane positions with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + Ctrl + o
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#tmux-layouts"&gt;
  &lt;/a&gt;
  Tmux Layouts
&lt;/h4&gt;

&lt;p&gt;While we are discussing panes, let's learn about tmux layouts. because they are closely related. &lt;/p&gt;

&lt;p&gt;"Wait a minute, what are tmux layouts?" Good question! Tmux layouts are pane arrangements to organize your panes in a window. Tmux comes with five ready-to-use layouts. If that description is ambiguous and you're still confused, don't worry. Just follow along and you'll understand it soon enough!&lt;/p&gt;

&lt;p&gt;Create a new window. Then split it horizontally once (Prefix + %). Then split it vertically once (Prefix + "). Your window should now have three panes: one half on the left, and a quarter on top right and a quarter on bottom right.&lt;/p&gt;

&lt;p&gt;Let's go back to layouts. Tmux comes with 5 different layouts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;even-horizontal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;even-vertical&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main-horizontal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main-vertical&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tiled&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's try them. Type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux select-layout even-horizontal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how your tmux window is now split horizontally evenly. Just like the name says, the even-horizontal layout re-arranges the current panes into equidistant horizontal panes. &lt;/p&gt;

&lt;p&gt;Let's try the vertical one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux select-layout even-vertical
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try a different flavor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux select-layout main-vertical
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your tmux window is now split horizontally with the "main" pane taking up more space - while the other two panes are split evenly, taking up less window real estate. Let's try the horizontal version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux select-layout main-horizontal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let's see what the last one looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux select-layout tiled
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now your tmux window is split equally. If you had 3 panes, it wouldn't exactly be split evenly, but if you had 4 panes, it would split them perfectly equal.&lt;/p&gt;

&lt;p&gt;You can toggle tmux layouts with a keyboard shortcut. Press:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + Space
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first time you press Prefix + space, tmux goes to even-horizontal layout, then it goes to even-vertical layout, then main-horizontal, etc. It cycles between those five layouts.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tmux-panes-conclusion"&gt;
  &lt;/a&gt;
  Tmux Panes Conclusion
&lt;/h4&gt;

&lt;p&gt;Let's go over what we learned.&lt;/p&gt;

&lt;p&gt;You learned about tmux pane. A pane is where your sub-terminals are displayed through. A window can have one or more panes. Here are the commands you learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Split a window horizontally with &lt;code&gt;tmux split-window -h&lt;/code&gt; or &lt;code&gt;Prefix + %&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Split a window vertically with &lt;code&gt;tmux split-window -v&lt;/code&gt; or &lt;code&gt;Prefix + "&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Delete a pane with &lt;code&gt;Prefix + x&lt;/code&gt; or &lt;code&gt;Ctrl + d&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to the next pane with &lt;code&gt;Prefix + o&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to another pane directionally with &lt;code&gt;Prefix + Up/Down/Left/Right&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to pane number N with &lt;code&gt;Prefix + q + N&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Resize a pane by N unit with &lt;code&gt;tmux resize-pane -D/U/L/R N&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Zoom/de-zoom a pane with &lt;code&gt;Prefix + z&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Swap panes with &lt;code&gt;Prefix + {&lt;/code&gt; or &lt;code&gt;Prefix + }&lt;/code&gt; and rotate panes with &lt;code&gt;Prefix + Ctrl + o&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Toggle layouts with &lt;code&gt;tmux select-layout even-horizontal/even-vertical/main-horizontal/main-vertical/tiled&lt;/code&gt; or &lt;code&gt;Prefix + Space&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tmux pane is a unique feature that differentiates tmux from most regular terminals. Usually, to start a new terminal, you need to open a new tab. But what if you need to have two terminals side-by-side? With tmux, you can easily split a window into two or more panes. You can even organize how the panes are displayed.&lt;/p&gt;

&lt;p&gt;As always, take your time to digest what you just learned. Play around! Create multiple panes in a window, then navigate around them. Delete some panes. Resize them. Zoom in and out. Change the layouts. &lt;/p&gt;

&lt;p&gt;Combine this lesson with what you've learned. Create a new session. Create a few new windows with multiple panes in them. See how fast you can go from the current pane to another pane in a different window from a different session. Do this until you can navigate around effortlessly. Take as much time as you need.&lt;/p&gt;

&lt;p&gt;When you are ready, let's learn about tmux servers!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tmux-servers"&gt;
  &lt;/a&gt;
  Tmux servers
&lt;/h3&gt;

&lt;p&gt;By now, you should have a good idea what tmux can do. You should also understand how sessions, windows, and panes relate (otherwise, stop and review the last three sections). There is one more missing piece: tmux servers. Although you can do fine merely knowing about sessions, windows, and panes without knowing about tmux servers, it is good to know the whole picture to have a more accurate mental model. Understanding tmux server will explain why some commands, like &lt;code&gt;tmux kill-server&lt;/code&gt;, exist (to kill the server, duh!)&lt;/p&gt;

&lt;p&gt;When we run the command &lt;code&gt;tmux&lt;/code&gt;, tmux not only creates a new session, but it also creates a new server instance. This whole ecosystem that you have been &lt;em&gt;interacting with&lt;/em&gt; - you can think of it like the client in client-server interaction. If it is like a client-server interaction, then there must be a tmux server somewhere. Tmux server is what runs in the background while Tmux client runs in the foreground.&lt;/p&gt;

&lt;p&gt;When we create multiple sessions: &lt;code&gt;tmux new -s breakfast&lt;/code&gt;, &lt;code&gt;tmux new -s lunch&lt;/code&gt;, and &lt;code&gt;tmux new -s dinner&lt;/code&gt;, those three are connected to the same tmux server. Since we don't mention a server name, these sessions are connected to a &lt;em&gt;default&lt;/em&gt; server. &lt;/p&gt;

&lt;p&gt;To launch a named server - let's name it the food server - run this from the regular terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux -L food
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a new server named food. Running this command also launches a new session by default. Cool! Let's detach from this server (&lt;code&gt;Prefix + d&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;So we have a food server running somewhere in your machine, but you are detached from it. What if you want to reconnect to the food server? Run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux -L food attach
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll be reattached to the food server. Wait a minute, this looks like the attach command from way earlier when we only had one session (&lt;code&gt;tmux attach&lt;/code&gt;). It's because it is. The difference is that we are attaching back to a session from the food server instead of the default server.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;tmux -L food&lt;/code&gt; creates a default session inside the food session. What if we want to create a named session? To create a new named session inside the food server, say a roast-duck session, we can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux -L food new -s roast-duck
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recall that running &lt;code&gt;tmux ls&lt;/code&gt; will list the sessions from the default server. But what if we want to view all the sessions in the food server? Easy, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux -L food ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to attach to the roast-duck session in the food server, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux -L food attach -t roast-duck
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, to kill this food server, you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux -L food kill-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The kill-server command kills a server. When a server is killed, it kills everything inside it (sessions, windows, and panes) - make sure that you save everything before closing it. By the way, to kill the default (unnamed) server, just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux kill-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run &lt;code&gt;tmux kill-server&lt;/code&gt; when nothing is running, you'll see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;no server running on /private/tmp/tmux-501/default
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your exact path might be different from what I have, but the important ideas are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The command &lt;code&gt;kill-server&lt;/code&gt; is looking in the &lt;code&gt;tmp/&lt;/code&gt; directory, which is usually where linux sockets are. Wait, did you say socket? That sounds like a client-server interaction!&lt;/li&gt;
&lt;li&gt;The directory is named "default" because we tried to kill the default server. By the way, if you created multiple servers, you'll find all those server names stored in here. So if you created a food server, you would find &lt;code&gt;/food&lt;/code&gt; in there too.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Phew. That's a lot to take in. Let's practice what we just learned to solidify what we just learned. Do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create 2 new tmux servers (give them any name you want)&lt;/li&gt;
&lt;li&gt;Inside each server, create multiple sessions. Inside each session, create multiple windows. Inside each window, create multiple panes&lt;/li&gt;
&lt;li&gt;Detach from one server and attach to the other one&lt;/li&gt;
&lt;li&gt;Delete the servers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Practically speaking, I almost never use more than one server in my workflow. However, your use case might be different. Regardless, it wouldn't hurt to know! The more you know, the less you don't know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customizing-tmux"&gt;
  &lt;/a&gt;
  Customizing tmux
&lt;/h3&gt;

&lt;p&gt;In my opinion, tmux could use a better set of keys. For example, I find that using the &lt;code&gt;Ctrl + b&lt;/code&gt; keys are not comfortable. Let's change some key shortcuts.&lt;/p&gt;

&lt;p&gt;You can modify tmux keys with the tmux config file. When you launch tmux, it looks for a file named &lt;code&gt;.tmux.conf&lt;/code&gt; in the HOME path - in my case, it is &lt;code&gt;~/.tmux.conf&lt;/code&gt;. If it isn't there yet, create a file &lt;code&gt;.tmux.conf&lt;/code&gt; in your HOME path.&lt;/p&gt;

&lt;p&gt;Let's change the tmux prefix. Some of the popular prefix alternatives are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + Space&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + s&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + u&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Backticks &lt;/li&gt;
&lt;li&gt;Tab + key variation instead of Ctrl + key&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally, I use &lt;code&gt;Ctrl + Space&lt;/code&gt; mainly because my Vim leader key is the Space key. But ultimately, use whatever keys that make the most sense to you.&lt;/p&gt;

&lt;p&gt;To change your prefix to &lt;code&gt;Ctrl + Space&lt;/code&gt;, add these in the tmux config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unbind C-Space
set -g prefix C-Space
bind C-Space send-prefix
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The changes above won't take place immediately. You first need to source the file. You can either close tmux (kill your tmux session and start a new one) or source the config file.&lt;/p&gt;

&lt;p&gt;To source tmux config file, from inside a tmux session, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux source-file ~/.tmux.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the way, in the future, I would like to be able to source my configurations quickly with &lt;code&gt;Prefix + r&lt;/code&gt;. Add this in the config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key r source-file ~/.tmux.conf \; display-message "Tmux config reloaded!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to restart the tmux session. Now you can just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + r
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To quickly source your file. &lt;/p&gt;

&lt;p&gt;By the way, with some changes, you may notice that even running &lt;code&gt;Prefix + r&lt;/code&gt; isn't enough. You need to also restart the tmux server. Detach from the session, kill the server (&lt;code&gt;tmux kill-server&lt;/code&gt;), then start a new session. Alternatively, you can also run &lt;code&gt;Prefix + I&lt;/code&gt; (note the I is uppercased) to reload the tmux environment.&lt;/p&gt;

&lt;p&gt;In short, if running &lt;code&gt;Prefix + r&lt;/code&gt; is not sufficient, try running &lt;code&gt;Prefix + I&lt;/code&gt; also. If all fails, restart the tmux &lt;/p&gt;

&lt;p&gt;Two more shortcuts that I don't find intuitive are the window splits, &lt;code&gt;Prefix + %&lt;/code&gt; and &lt;code&gt;Prefix + "&lt;/code&gt;. To me, it makes more sense to use &lt;code&gt;|&lt;/code&gt; for a vertical split and &lt;code&gt;-&lt;/code&gt; for a horizontal split. Add these lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind | split-window -hc "#{pane_current_path}"
bind - split-window -vc "#{pane_current_path}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when I press &lt;code&gt;Prefix + |&lt;/code&gt;, tmux does a vertical split and when I press &lt;code&gt;Prefix + -&lt;/code&gt;, tmux does a horizontal split.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#more-configs"&gt;
  &lt;/a&gt;
  More configs?
&lt;/h4&gt;

&lt;p&gt;There are many different ways you can configure your tmux config. To address them all would be out of the scope of this article.&lt;/p&gt;

&lt;p&gt;If you want to learn more about tmux configs, I am currently working on another article to address tmux configs in more detail, so stay tuned! I will update this post with the link to the said article when it is done.&lt;/p&gt;

&lt;p&gt;If you want to see what my personal configs look like, check out my &lt;a href="https://github.com/iggredible/dotfiles"&gt;dotfiles&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Phew, we have now reached the end of this guide. I hope that you learned valuable things about tmux. If there is anything that is unclear, please feel free to drop by the comment section.&lt;/p&gt;

&lt;p&gt;Here's the final recap. In this guide, we learned about tmux session, window, pane, and server. We learned about their relationships with each other. We also learned a little about configuring tmux. In the next article, you will learn more about configuring tmux in detail. I will update this guide with the link to the next article when it is ready.&lt;/p&gt;

&lt;p&gt;More importantly, take your time reading this guide. It can be tempting to read through the entire guide without doing any practice. Take a day to read about a section and let it digest. Apply what you learn that day. Instead of reading for 15 minutes and practicing for 5 minutes, for every 5 minutes you learn about something, spend 15 minutes. Yes, it is a lot. Yes, you'll read less on average. But you will learn a lot more. In the end, what you learn is what actually matters, not the amount of articles/ books you read.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>tmux</category>
      <category>vim</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GraphQL Integration in Flutter</title>
      <author>rrtutors</author>
      <pubDate>Wed, 10 Nov 2021 16:25:44 +0000</pubDate>
      <link>https://dev.to/rrtutors/graphql-integration-in-flutter-4fib</link>
      <guid>https://dev.to/rrtutors/graphql-integration-in-flutter-4fib</guid>
      <description>&lt;p&gt;What is GraphQL and how to integrate &lt;a href="https://rrtutors.com/tutorials/Flutter-GraphQl-How-do-i-Integrate-GrapQL-Apis-in-Flutter"&gt;GraphQL Api integration in flutter application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What is GraphQL?&lt;/p&gt;

&lt;p&gt;GraphQL is an open source technology which will be used at server side to create optimized APIs to replace REST apis. This GraphQL is developed by Facebook.&lt;/p&gt;

&lt;p&gt;REST API contains multiple end points, where as GraphQL is single end point and Rest API will have the over fetching response which some of the response data not be used inside application, where as with GraphQL will fetch only required response.&lt;/p&gt;

&lt;p&gt;When we are having more end points to work REST API might be difficulty to work, in that case GraphQL APIs will be more easy to implement. We can't decide which APIs we need to implements.&lt;/p&gt;

&lt;p&gt;But in this example we are learning how to implement GraphQL APIs in flutter application&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=WkvbIXEGYPo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWxiWYXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/WkvbIXEGYPo/0.jpg" alt="IMAGE ALT TEXT HERE" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GraphQL mainly two types of operations will be there&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Query
Mutation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Query: This GraphQL operation will be used to Read/Fetch data from the End point&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="n"&gt;query_name&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Fields&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mutation: This GraphQL operation will be used to write/post data to the End point.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;mutation&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;editOperation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;dataField:&lt;/span&gt;&lt;span class="s"&gt;"valueOfField"&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>flutter</category>
      <category>android</category>
      <category>tutorial</category>
      <category>graphql</category>
    </item>
    <item>
      <title>React JS error WebPack 4.44.2 (temp Fix)</title>
      <author>Gilbert Ngeno</author>
      <pubDate>Wed, 10 Nov 2021 16:18:30 +0000</pubDate>
      <link>https://dev.to/gilly7/react-js-error-webpack-4442-temp-fix-2408</link>
      <guid>https://dev.to/gilly7/react-js-error-webpack-4442-temp-fix-2408</guid>
      <description>&lt;p&gt;The react-scripts package provided by Create React App requires a dependency:&lt;/p&gt;

&lt;p&gt;"webpack": "4.44.2"&lt;/p&gt;

&lt;p&gt;Don't try to install it manually: your package manager does it automatically.&lt;br&gt;
However, a different version of webpack was detected higher up in the tree:&lt;/p&gt;

&lt;p&gt;/home/user1/node_modules/webpack (version: 4.44.1)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create a .env at the root of the folder of react folder&lt;/li&gt;
&lt;li&gt;type SKIP_PREFLIGHT_CHECK=true in side .env file&lt;/li&gt;
&lt;li&gt;now run in cmd npm start .&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>Apache Airflow In EKS Cluster</title>
      <author>🚀  Vu Dao 🚀 </author>
      <pubDate>Wed, 10 Nov 2021 16:12:29 +0000</pubDate>
      <link>https://dev.to/aws-builders/apache-airflow-in-eks-cluster-dgo</link>
      <guid>https://dev.to/aws-builders/apache-airflow-in-eks-cluster-dgo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://airflow.apache.org/"&gt;Airflow&lt;/a&gt; is one of the most popular tools for running workflows especially data-pipeline.&lt;/li&gt;
&lt;li&gt;A successful pipeline moves data efficiently, minimizing pauses and blockages between tasks, keeping every process along the way operational. Apache Airflow provides a single customizable environment for building and managing data pipelines&lt;/li&gt;
&lt;li&gt;In this post, it provides step-by-step to deploy airflow on EKS cluster using Helm for the default chart with customization in &lt;code&gt;values.yaml&lt;/code&gt;, cdk for creating AWS resources such as EFS, node group with Taints for pod toleration in the SPOT instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;a href="https://dev.to/vumdao"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXktw8Qj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/tools.jpg%3Fraw%3Dtrue" width="880" height="488"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Architecture-Overview"&gt;Architecture Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Using-CDK-to-create-EFS-and-Access-Point-(AP)"&gt;Using CDK to create EFS and Access Point (AP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Install-EFS-CSI-Driver-using-helm-chart-within-airflow-workers-only"&gt;Install EFS CSI Driver using helm-chart within airflow workers only&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Create-EFS-storage-class,-PV,-and-PVC"&gt;Create EFS storage class, PV, and PVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Use-CDK-to-create-airflow-IAM-role"&gt;Use CDK to create airflow IAM role&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Use-CDK-to-create-Auto-scaling-groups-(ASG)"&gt;Use CDK to create Auto scaling groups (ASG)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Set-up-gitlab-repo-for-git-sync-sidecar"&gt;Set up gitlab repo for git-sync sidecar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Create-values.yaml"&gt;Create values.yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Airflow-secrets"&gt;Airflow secrets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Deploy-Airflow-using-helm-chart"&gt;Deploy Airflow using helm chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Create-airflow-ingress"&gt;Create airflow ingress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#architecture-overview"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Architecture Overview&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This blog guide you deploy airflow on an existing EKS cluster using namespace &lt;code&gt;airflow&lt;/code&gt; and its own resources&lt;/li&gt;
&lt;li&gt;Prerequiste:

&lt;ul&gt;
&lt;li&gt;EKS cluster&lt;/li&gt;
&lt;li&gt;IAM admin role or enough permission to create AWS resources&lt;/li&gt;
&lt;li&gt;CDK installation (Typescript)&lt;/li&gt;
&lt;li&gt;Helm-chart&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJNbc3ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/airflow-eks.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img alt="Architecture Overview" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJNbc3ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/airflow-eks.png%3Fraw%3Dtrue" width="880" height="610"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Airflow components&lt;/strong&gt;: Worker, scheduler, web server, flower. Other things are airflow database, redis and sync.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use EFS&lt;/strong&gt; to share logs, DAGs between components such as worker, scheduler and webserver. Plus use EFS to store airflow database metadata&lt;/li&gt;
&lt;li&gt;There are 3 &lt;strong&gt;node groups&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;On-demand EC2: workers (If you can control the retries of Airflow task and DAGS, this group is better to use Spot instances instead)&lt;/li&gt;
&lt;li&gt;On-demand EC2: Airflow database, pgBouncer and redis&lt;/li&gt;
&lt;li&gt;Spot-fleet EC2: Schedulers, webs, and other components&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#using-cdk-to-create-efs-and-access-point-ap"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Using CDK to create EFS and Access Point (AP)&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It's neccessary to create EFS as a way to persistent airflow DAGs, logs between workers and scheduler&lt;/li&gt;
&lt;li&gt;Checkout &lt;a href="https://dev.to/awscommunity-asean/aws-eks-with-efs-csi-driver-and-irsa-using-cdk-dgc"&gt;AWS EKS With EFS CSI Driver And IRSA Using CDK&lt;/a&gt; to undestand AWS EFS and CSI Driver provisioner&lt;/li&gt;
&lt;li&gt;Create EFS within the &lt;code&gt;VPC&lt;/code&gt; of EKS cluster and add &lt;code&gt;security group&lt;/code&gt; for open access from EKS nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  efs-stack.ts
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as efs from '@aws-cdk/aws-efs';
import * as ec2 from '@aws-cdk/aws-ec2';
import { RemovalPolicy, App, Stack, StackProps, Tags } from '@aws-cdk/core';


export class AirflowEfsStack extends Stack {
  constructor(scope: App, id: string, pattern: string, vpc: ec2.IVpc, ip: string, env_tag: string, props?: StackProps) {
    super(scope, id, props);

    const securityGroup = new ec2.SecurityGroup(this, 'AirflowEfsSG', {
      vpc,
      securityGroupName: `${pattern}-airflow-sg`,
      description: 'Security group for EFS CSI',
      allowAllOutbound: true
    })
    securityGroup.addIngressRule(ec2.Peer.ipv4(ip), ec2.Port.allTraffic(), 'Allow internal private vpc')

    Tags.of(securityGroup).add('Name', `${pattern}-efs-sg`)
    Tags.of(securityGroup).add('cdk:sg:stack', 'sg-stack')
    Tags.of(securityGroup).add('env', env_tag)

    const fileSystem = new efs.FileSystem(
      this, 'AirflowEFS', {
        vpc,
        securityGroup,
        fileSystemName: `${pattern}-airflow-efs`,
        lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS,
        removalPolicy: RemovalPolicy.DESTROY
      }
    )
    Tags.of(fileSystem).add('Name', `${pattern}-airflow-efs`)
    Tags.of(fileSystem).add('cdk:efs:stack', `${pattern}-efs-${env_tag}`)
    Tags.of(fileSystem).add('env', env_tag)

    const fsAcccessPoint = fileSystem.addAccessPoint(
      `${pattern}EFSAccesPoint`, {
        posixUser: {
          uid: '1001',
          gid: '1001'
        },
        createAcl: {
          ownerUid: '1001',
          ownerGid: '1001',
          permissions: '0700'
        },
        path: '/airflow/data'
      }
    )
    Tags.of(fsAcccessPoint).add('Name', `${pattern}-data-airflow-pg`)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HcDWDXz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/efs_ap.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HcDWDXz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/efs_ap.png%3Fraw%3Dtrue" width="880" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-efs-csi-driver-using-helmchart-within-airflow-workers-only"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Install EFS CSI Driver using helm-chart within airflow workers only&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CSI driver provisioner is DaemonSet, it will deploy to all worker nodes as default but we can restrict to run EFS &lt;code&gt;kube-system&lt;/code&gt; pods for airflow nodes only by adding toleration and affinity in &lt;code&gt;values.yaml&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  values.yaml
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;controller:
  tolerations:
    - key: 'dedicated'
      operator: 'Equal'
      value: 'airflow'
      effect: 'NoSchedule'
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: role
            operator: In
            values:
            - airflow

node:
  tolerations:
    - key: 'dedicated'
      operator: 'Equal'
      value: 'airflow'
      effect: 'NoSchedule'
  nodeSelector:
    role: airflow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm repo add aws-efs-csi-driver &amp;lt;https://kubernetes-sigs.github.io/aws-efs-csi-driver/&amp;gt;
helm repo update
helm upgrade -i aws-efs-csi-driver aws-efs-csi-driver/aws-efs-csi-driver --values efs-values.yaml -n kube-system
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-efs-storage-class-pv-and-pvc"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Create EFS storage class, PV, and PVC&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pre-requisite: EFS and AP IDs which are created from previous step&lt;/li&gt;
&lt;li&gt;Update the EFS and AP ID to the storage class and persistent volume then create them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  pvc.yaml
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: af-efs-sc
provisioner: efs.csi.aws.com
parameters:
  provisioningMode: efs-ap
  fileSystemId: fs-3529be16
  directoryPerms: "700"
  gidRangeStart: "1000"
  gidRangeEnd: "2000"
--------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: af-efs-pg-pv
spec:
  capacity:
    storage: 8Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: af-efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-3529be15::fsap-0679931424ff5f0ce
--------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-airflow-postgresql
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: af-efs-sc
  resources:
    requests:
      storage: 8Gi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get PVC, we will need this to update to &lt;code&gt;values.yaml&lt;/code&gt; later
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get pvc
NAME                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
data-airflow-postgresql   Bound    efs-pg-pv                                  8Gi        RWX            efs-sc         29h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#use-cdk-to-create-airflow-iam-role"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Use CDK to create airflow IAM role&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Best practice is to use IAM role service account (IRSA), but within airflow we can create its own role as instance profile with permission for node to join EKS cluster and permission to read/write EFS or other AWS resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  iamRole.ts
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    createWorkerRole(): IRole {
        // Airflow IAM worker role
        const worker_role = new Role(
            this, 'AirflowIamRole', {
                assumedBy: new ServicePrincipal('ec2.amazonaws.com'),
                roleName: `${this.eksCluserName}-airflow`
            }
        );
        const attachPolicies = ['AmazonEC2ContainerRegistryReadOnly', 'AmazonEKSWorkerNodePolicy', 'AmazonS3ReadOnlyAccess', 'AmazonEKS_CNI_Policy'];
        for (var policy of attachPolicies) {
            worker_role.addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName(policy))
        }
        Tags.of(worker_role).add('Name', `${this.eksCluserName}-airflow`)
        Tags.of(worker_role).add('cdk:iam:stack', `${this.pattern}-iam-${this.env_tag}`)
        Tags.of(worker_role).add('env', this.env_tag)

        const autoscalingStatement = new PolicyStatement({
            sid: 'AutoScalingGroup',
            actions: [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeLaunchConfigurations",
                "autoscaling:DescribeTags",
                "autoscaling:CreateOrUpdateTags",
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:TerminateInstanceInAutoScalingGroup",
                "ec2:DescribeLaunchTemplateVersions",
                "elasticfilesystem:*",
                "tag:GetResources",
            ],
            effect: Effect.ALLOW,
            resources: ['*'],
            conditions: {
                'StringEquals': {"aws:RequestedRegion": this.region}
            }
        });

        worker_role.addToPolicy(autoscalingStatement);

        return worker_role;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Note&lt;/strong&gt;: ASG launch template will add this Airflow role to &lt;code&gt;aws-auth&lt;/code&gt; configmap &lt;code&gt;mapRoles&lt;/code&gt; for joining new nodes to the EKS cluster&lt;/li&gt;
&lt;li&gt;Checkout &lt;a href="https://dev.to/aws-builders/aws-eks-launch-template-of-node-group-6a4"&gt;AWS EKS - Launch Template Of Node Group&lt;/a&gt; for understanding how IAM role in nodegroup works&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#use-cdk-to-create-auto-scaling-groups-asg"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Use CDK to create Auto scaling groups (ASG)&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Why do we need auto scaling here? In order to handle work loads between when running workflows&lt;/li&gt;
&lt;li&gt;Create a manage node group with spot instances for saving cost? Of course we should care about spot instance might be interrupted. If a workflow task gets interrupted due to node termination, you may lose a part of progress, but the cost of losing ten minutes of progress is much lower than losing four hours of work.&lt;/li&gt;
&lt;li&gt;Using Spot instances for long-running tasks can be disruptive if node running the task gets terminated by Spot. Consider breaking long-running tasks into multiple sub-tasks with a shorter execution time that can be used to checkpoint a workflow’s progress.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We also recommend that you configure automatic retries in DAGs, especially when using Spot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two autoscaling groups: Instance types are based on the need of Airflow processes such as workload, data size, number of DAGs, tasks and their complexity&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ASG-pet: min 2, max 2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;spot: 100%&lt;/li&gt;
&lt;li&gt;type: &lt;code&gt;c5a.xlarge&lt;/code&gt;, &lt;code&gt;c5a.large&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;components: 2 sch, 2 web, 1 flower, 1 sync&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ASG-sts (stateful set): min 1, max 3&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;calculate the number of workers and auto-scaling&lt;/li&gt;
&lt;li&gt;spot: 100%&lt;/li&gt;
&lt;li&gt;type: &lt;code&gt;c5a.2xlarge&lt;/code&gt;, &lt;code&gt;c5a.large&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;components: workers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ASG-db (database): min 1, max 1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on-demand: 100%&lt;/li&gt;
&lt;li&gt;type: &lt;code&gt;c5a.xlarge&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;components: airflow database, redis, pgBouncer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
  asg-stack.ts
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Stack, App, Tags, StackProps} from '@aws-cdk/core';
import { Cluster, Nodegroup, CapacityType, TaintEffect } from '@aws-cdk/aws-eks'
import { Role, ServicePrincipal, ManagedPolicy, PolicyStatement, Effect, IRole } from '@aws-cdk/aws-iam';
import * as ec2 from '@aws-cdk/aws-ec2';

interface Ec2Type {
    pet: Array&amp;lt;string&amp;gt;,
    pet_size: Array&amp;lt;number&amp;gt;,
    sts: string,
    sts_size: Array&amp;lt;number&amp;gt;,
    db: string
};

export class AirflowAsgStack extends Stack {
    public eks_cluster: any;
    public worker_role: any;
    public airflowSG: any;
    public eksCluserName: string;
    public launchTemplate: any;

    constructor(public scope: App, id: string, public pattern: string, public vpc: ec2.IVpc, public vpcSg: ec2.ISecurityGroup,
                public region: string, public ip: string, ec2_types: Ec2Type, public env_tag: string, props?: StackProps) {
        super(scope, id, props);

        this.eksCluserName = 'us-eks'

        // EKS cluster
        this.eks_cluster = Cluster.fromClusterAttributes(
            this, `EksCluster${pattern.toUpperCase()}`, {
                vpc,
                clusterName: this.eksCluserName
            }
        );

        this.launchTemplate = this.createLaunchTemplate();

        // Airflow-SG to workers
        this.airflowSG = this.createAirflowSG();

        this.worker_role = this.createWorkerRole();

        this.createAsgPet(ec2_types.pet, ec2_types.pet_size);

        this.createAsgSts(ec2_types.sts, ec2_types.sts_size);

        this.createAsgDb(ec2_types.db);

    };

    createAirflowSG(): any {
        /**
         * Airflow security group
         */
        const airflowSG = new ec2.SecurityGroup(this, 'AirflowairflowSG', {
            vpc: this.vpc,
            securityGroupName: 'airflow-priv-sg',
            description: 'Security group to access to worker in private vpc',
            allowAllOutbound: true
        });
        airflowSG.connections.allowFrom(airflowSG, ec2.Port.allTcp(), 'Allow node to communicate with each other');
        airflowSG.connections.allowFrom(this.vpcSg, ec2.Port.allTcp(), 'Allow nodes in another ASG communicate to airflow nodes');
        Tags.of(airflowSG).add('Name', 'airflow-priv-ssh-sg');
        Tags.of(airflowSG).add('cdk:sg:stack', `${this.pattern}-sg-${this.env_tag}`);
        Tags.of(airflowSG).add('env', this.env_tag);

        return airflowSG;
    };

    createLaunchTemplate(): any {
        /**
         * More about launch-templates: https://github.com/awsdocs/amazon-eks-user-guide/blob/master/doc_source/launch-templates.md
         * Notes:
         * - Nodegroup auto-generates role if not specify
         * - Launch template node group automatically add the worker role to aws-auth configmap
        */
        const airflowLaunchTemplate = new ec2.LaunchTemplate(this, 'AirflowLaunchTemplate-lt', {
            launchTemplateName: 'airflow-asg-lt',
            securityGroup: this.airflowSG,
            blockDevices: [{
                deviceName: '/dev/xvda',
                volume: ec2.BlockDeviceVolume.ebs(20)
            }],
            keyName: `${this.pattern}-airflow`
        });
        Tags.of(airflowLaunchTemplate).add('Name', 'airflow-asg-lt');
        Tags.of(airflowLaunchTemplate).add('cdk:lt:stack', `${this.pattern}:lt:${this.env_tag}`);
        Tags.of(airflowLaunchTemplate).add('env', this.env_tag);

        return airflowLaunchTemplate;
    }

    createAsgPet(types: Array&amp;lt;string&amp;gt;, sizes: Array&amp;lt;number&amp;gt;) {
        /**
         * ASG Pet is used to assign deployments. Due to using spot instances so recommendation min size 2
         */
        const asgNodeGroupName = 'eks-airflow-nodegroup-pet';

        const asgPet = new Nodegroup(this, 'AirflowPetAsg', {
            nodegroupName: 'eks-airflow-nodegroup-pet',
            subnets: this.eks_cluster.vpc.selectSubnets({subnetType: ec2.SubnetType.PRIVATE}),
            cluster: this.eks_cluster,
            capacityType: CapacityType.SPOT,
            nodeRole: this.worker_role,
            instanceTypes: [
                new ec2.InstanceType(types[0]),
                new ec2.InstanceType(types[1])
            ],
            minSize: sizes[0],
            maxSize: sizes[1],
            labels: {
                'role': 'airflow',
                'type': 'af-stateless',
                'lifecycle': 'spot'
            },
            taints: [
                {
                    effect: TaintEffect.NO_SCHEDULE,
                    key: 'dedicated',
                    value: 'airflow'
                }
            ],
            tags: {
                'Name': 'eks-airflow-nodegroup-pet',
                'cdk:asg:stack': `${this.pattern}-asg-${this.env_tag}`
            },
            launchTemplateSpec: {
                id: this.launchTemplate.launchTemplateId!
            }
        });
    };

    createAsgSts(type: string, sizes: Array&amp;lt;number&amp;gt;) {
        /**
         * ASG STS: Assign Airflow workers
         */
        const asgNodeGroupName = 'eks-airflow-nodegroup-sts';

        const asgStatefulSet = new Nodegroup(this, 'AirflowStsAsg', {
            nodegroupName: asgNodeGroupName,
            subnets: this.eks_cluster.vpc.selectSubnets({subnetType: ec2.SubnetType.PRIVATE}),
            cluster: this.eks_cluster,
            nodeRole: this.worker_role,
            instanceTypes: [new ec2.InstanceType(type)],
            capacityType: CapacityType.SPOT,
            minSize: sizes[0],
            maxSize: sizes[1],
            labels: {
                'role': 'airflow',
                'type': 'af-stateful',
                'lifecycle': 'spot'
            },
            taints: [
                {
                    effect: TaintEffect.NO_SCHEDULE,
                    key: 'dedicated',
                    value: 'airflow'
                }
            ],
            tags: {
                'Name': 'eks-airflow-nodegroup-sts',
                'cdk:asg:stack': `${this.pattern}-asg-${this.env_tag}`
            },
            launchTemplateSpec: {
                id: this.launchTemplate.launchTemplateId!
            }
        });
    };

    createAsgDb(type: string) {
        /**
         * ASG Db: Assign Airflow database and redis to this worker group
         */
        const asgNodeGroupName = 'eks-airflow-nodegroup-db';

        const asgStatefulSet = new Nodegroup(this, 'AirflowDbAsg', {
            nodegroupName: asgNodeGroupName,
            subnets: this.eks_cluster.vpc.selectSubnets({subnetType: ec2.SubnetType.PRIVATE}),
            cluster: this.eks_cluster,
            nodeRole: this.worker_role,
            instanceTypes: [new ec2.InstanceType(type)],
            capacityType: CapacityType.ON_DEMAND,
            minSize: 1,
            maxSize: 1,
            labels: {
                'role': 'airflow',
                'type': 'af-db',
                'lifecycle': 'on-demand'
            },
            taints: [
                {
                    effect: TaintEffect.NO_SCHEDULE,
                    key: 'dedicated',
                    value: 'airflow'
                }
            ],
            tags: {
                'Name': 'eks-airflow-nodegroup-db',
                'cdk:asg:stack': `${this.pattern}-asg-${this.env_tag}`
            },
            launchTemplateSpec: {
                id: this.launchTemplate.launchTemplateId!
            }
        });
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk deploy AirflowAsgStackUS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Check result
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# kf get node |grep 20-eks
ip-172-10-13-169.us-east-1.compute.internal   Ready    &amp;lt;none&amp;gt;   2d2h    v1.18.20-eks-c9f1ce
ip-172-10-41-179.us-east-1.compute.internal   Ready    &amp;lt;none&amp;gt;   2d14h   v1.18.20-eks-c9f1ce
ip-172-10-51-199.us-east-1.compute.internal   Ready    &amp;lt;none&amp;gt;   23h     v1.18.20-eks-c9f1ce
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gr0plVqC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/asg.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img alt="EKS ASG" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gr0plVqC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/asg.png%3Fraw%3Dtrue" width="880" height="181"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;IMPORTANT:&lt;/strong&gt; The above code contains creating Airflow security group, you should checkout &lt;a href="https://dev.to/aws-builders/understand-pods-communication-338c"&gt;Understand Pods communication&lt;/a&gt; for deep understanding how EKS node join EKS cluster and how Pods communicate&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#set-up-gitlab-repo-for-gitsync-sidecar"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Set up gitlab repo for git-sync sidecar&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create new project to store DAGs on Git and let git-sync update DAGs automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XV_NJp-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/git-project.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XV_NJp-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/git-project.png%3Fraw%3Dtrue" width="880" height="176"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create user &lt;code&gt;airflow&lt;/code&gt; and add to project as reporter/developer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OOvut8uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/airflow-git-user.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OOvut8uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/airflow-git-user.png%3Fraw%3Dtrue" width="880" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate its token as impersonating which will be used later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uPIpVhNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/token.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uPIpVhNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/token.png%3Fraw%3Dtrue" width="680" height="207"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-valuesyaml"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Create values.yaml&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;values.yaml&lt;/strong&gt; is used to customize some attributes from airflow helm chart to adapt with our system and deployments such as credentials, Airflow configs, Pods assignment, autoscaling, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use community airflow helm chart (not the official one). Template &lt;code&gt;values.yaml&lt;/code&gt; from &lt;a href="https://github.com/airflow-helm/charts/blob/main/charts/airflow/values.yaml"&gt;airflow-helm/charts&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Customizations&lt;br&gt;
&lt;strong&gt;1. Update airflow image if you'd like to deploy from your own one or use latest public one&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;airflow:
  image:
    repository: apache/airflow
    tag: 2.1.4-python3.9
    pullPolicy: IfNotPresent
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Persist airflow logs using EFS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
  logs
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    airflow:
      kubernetesPodTemplate:
        securityContext:
          fsGroup: 65534
      sync:
        securityContext:
          fsGroup: 65534
    scheduler:
      securityContext:
        fsGroup: 65534
    web:
      securityContext:
        fsGroup: 65534
    workers:
      securityContext:
        fsGroup: 65534
    flower:
      securityContext:
        fsGroup: 65534
    logs:
      ## the airflow logs folder
      ##
      path: /opt/airflow/efs/logs
      persistence:
        enabled: true
        subPath: ""
        storageClass: "efs-sc"
        accessMode: ReadWriteMany
        size: 1Gi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;Reference to &lt;a href="https://github.com/airflow-helm/charts/tree/main/charts/airflow#how-to-persist-airflow-logs"&gt;How to persist airflow logs?&lt;/a&gt; for more options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Update &lt;code&gt;web.service.type&lt;/code&gt; to &lt;code&gt;NodePort&lt;/code&gt; for later use Ingress&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web:
  service:
    type: NodePort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;4. Set up &lt;code&gt;workers&lt;/code&gt; replicas for balance workload&lt;/strong&gt;&lt;br&gt;
    &lt;a href="https://github.com/airflow-helm/charts/tree/main/charts/airflow#workers"&gt;How to set up celery worker autoscaling?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Add toleration to airflow components&lt;/strong&gt;&lt;br&gt;
    - Airflow nodes will only accept airflow Pods&lt;br&gt;
    - Global setting &lt;code&gt;airflow.defaultTolerations&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    defaultTolerations:
    - key: 'dedicated'
      operator: 'Equal'
      value: 'airflow'
      effect: 'NoSchedule'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;For other extra components such as &lt;code&gt;postgresql&lt;/code&gt;, &lt;code&gt;redis&lt;/code&gt;, &lt;code&gt;pgBouncer&lt;/code&gt; we need to add &lt;code&gt;tolerations&lt;/code&gt; at each field&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;6. Add &lt;code&gt;nodeAffinity&lt;/code&gt; to assign airflow components to their node group&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For deployment services such as web, scheduler, sync, flower
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                  - key: type
                    operator: In
                    values:
                      - af-stateless
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;For stateful service such as workers
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                  - key: type
                    operator: In
                    values:
                      - af-stateful
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;For postgresql, redis, pgBouncer
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: type
                  operator: In
                  values:
                    - af-db
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;7. Persist DAGs using git-sync&lt;/strong&gt;&lt;br&gt;
    &lt;strong&gt;7.1 git-sync sidecar (SSH auth)&lt;/strong&gt;&lt;br&gt;
    - Pre-requiste: Create Linux user &lt;code&gt;airflow&lt;/code&gt;, generate its rsa ssh-key, add public key to &lt;code&gt;airflow&lt;/code&gt; gitlab user and then use &lt;code&gt;id_rsa&lt;/code&gt; to generate secret&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        $ kubectl create secret generic \
            airflow-ssh-git-secret \
            --from-file=id_rsa=$(pwd)/id_rsa \
            --namespace airflow

        secret/airflow-ssh-git-secret created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Get gitlab known_hosts
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ssh-keyscan -H gitlab.cloudopz.co &amp;gt;&amp;gt; known_hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;values.yaml&lt;/code&gt; at &lt;code&gt;dags.gitSync&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        dags:
          ## the airflow dags folder
          ##
          path: /opt/airflow/efs/dags
          gitSync:
            enabled: true
            repo: "git@gitlab.cloudopz.co:devops/airflow-dags.git"
            branch: "master"
            revision: "HEAD"
            syncWait: 60
            sshSecret: "airflow-ssh-git-secret"
            sshSecretKey: "id_rsa"

            # "known_hosts" verification can be disabled by setting to "" 
            sshKnownHosts: |-
              gitlab.cloudopz.co ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDD18bjpsGTussTrWvrU9LzqDdb0DJ5XVlOvmv4E+svIN6ItUvS3UrNNKiABs9IlexsEnDTdYTfZkV14Ft7f79lTeLKqvEJowF6RZg1SDOtW4ljPxRUh8n8MgGftI37m3baRYBqdsSbTebjfDRkykgI3k5AW+Lw9syeckncL3ZLAUQ894bh/uIqu4tCP59UlxZ43B6n6nna9g+ZFz/EGCsQTxPsTUIy13Lrgeh6kLQk77zvxdz838/JDH7ELdmd1nwCJIXOKhFwwSDkRUAkHgVSHWsFZdfNM4Na3TRBR0IUCnEqwDuEqSlTh1yfv1oymu6FeA/JaiTgfhvDVleB4wSx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;7.2 git-sync sidecar (HTTP auth)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create secret with gitlab token key get from &lt;a href="#Set-up-gitlab-repo-for-git-sync-sidecar"&gt;"Set up gitlab repo for git-sync sidecar"&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        kubectl create secret generic \
          airflow-http-git-secret \
          --from-literal=username=airflow \
          --from-literal=password=EKZvPi8TCKVaNSz45rjn \
          --namespace airflow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;values.yaml&lt;/code&gt; at &lt;code&gt;dags.gitSync&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        dags:
          ## the airflow dags folder
          ##
          path: /opt/airflow/efs/dags
          gitSync:
            enabled: true
            repo: "https://gitlab.cloudopz.co/devops/airflow-dags.git"
            branch: "master"
            revision: "HEAD"
            syncWait: 60
            httpSecret: "airflow-http-git-secret"
            httpSecretUsernameKey: username
            httpSecretPasswordKey: password
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;8. Database - PostgreSQL Chart with enabling debug and using EFS&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We already created the PVC from &lt;a href="#Create-EFS-Access-Point-for-postgresql-volume"&gt;Create EFS Access Point for postgresql volume&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;values.yaml&lt;/code&gt; (Note: DEBUG enabled is optional)
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      postgresql:
        enabled: true
        postgresqlDatabase: airflow
        postgresqlUsername: postgres
        postgresqlPassword: airflow
        existingSecretKey: "postgresql-password"
        extraEnv:
          - name: BITNAMI_DEBUG
            value: "true"
        persistence:
          enabled: true
          storageClass: "efs-sc"
          existingClaim: "data-airflow-postgresql"
          accessModes:
            - ReadWriteMany
          size: 8Gi

        master:
          podAnnotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: "true"

        volumePermissions:
          enabled: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;9. Create Airflow variables&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can use plain/text or Secrets/Configmaps&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/airflow-helm/charts/tree/main/charts/airflow#how-to-create-airflow-variables"&gt;How-to&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;10. Generate Fernet&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Airflow uses &lt;a href="https://github.com/fernet/spec/"&gt;Fernet&lt;/a&gt; to encrypt passwords in the connection configuration and the variable configuration. It guarantees that a password encrypted using it cannot be manipulated or read without the key. Fernet is an implementation of symmetric (also known as “secret key”) authenticated cryptography.&lt;/li&gt;
&lt;li&gt;Generating Fernet key
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      from cryptography.fernet import Fernet
      fernet_key= Fernet.generate_key()
      print(fernet_key.decode()) # your fernet_key, keep it in secured place!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#airflow-secrets"&gt;
  &lt;/a&gt;
  🚀 Airflow secrets &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;For airflow users, reference to &lt;a href="https://airflow.apache.org/docs/apache-airflow/stable/security/access-control.html"&gt;Access Control&lt;/a&gt; to assign proper permissions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  airflow-secret.yaml
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  apiVersion: v1
  kind: Secret
  metadata:
    name: airflow-secret
    namespace: airflow
  data:
    airflow-admin-password: ==
    airflow-user-password:  
    airflow-viewer-password: =

    airflow-fernet: =

    clh-password: ==

    db_user: 
    db_password: 

    ttdb_user: =
    ttdb_password: ==

    slack_host: 
    slack_webhook: ==

    # airflow database
    postgresql-password: =

    # git-sync access token
    airflow-gitlab-user: ==
    airflow-gitlab-token: =
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deploy-airflow-using-helm-chart"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Deploy Airflow using helm chart&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The community usage helm chart
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# add this repo as "airflow-stable"
helm repo add airflow-stable https://airflow-helm.github.io/charts
helm repo update

kubectl create namespace airflow
helm upgrade -i "airflow" airflow-stable/airflow \
  --version "8.5.2" \
  --namespace "airflow" \
  --values values.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Check PVC
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get pvc
NAME                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
airflow-logs              Bound    pvc-177df93c-331f-4514-9733-9e67be7612ee   1Gi        RWX            af-efs-sc      7d18h
data-airflow-postgresql   Bound    af-efs-pg-pv                               8Gi        RWX            af-efs-sc      8d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R1hN4JmR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/efs-aps.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R1hN4JmR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/efs-aps.png%3Fraw%3Dtrue" width="880" height="199"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check pods
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get pod -owide
NAME                                  READY   STATUS      RESTARTS   AGE   IP             NODE                                              NOMINATED NODE   READINESS GATES
NAME                                        READY   STATUS    RESTARTS   AGE     IP            NODE                          NOMINATED NODE   READINESS GATES
airflow-db-migrations-8666f9b775-p9n6p      2/2     Running   0          7d2h    10.0.7.85     ip-10-0-7-188.ec2.internal    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-flower-79bf6f7b95-mst9x             2/2     Running   0          6d15h   10.0.6.117    ip-10-0-6-175.ec2.internal    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-pgbouncer-75b9ddcf89-q8vkf          1/1     Running   0          7d2h    10.0.9.109    ip-10-0-9-82.ec2.internal     &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-postgresql-0                        1/1     Running   0          7d2h    10.0.9.65     ip-10-0-9-82.ec2.internal     &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-redis-master-0                      1/1     Running   0          7d2h    10.0.9.237    ip-10-0-9-82.ec2.internal     &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-scheduler-6dc74f564f-44tzx          2/2     Running   0          6d15h   10.0.6.33     ip-10-0-6-175.ec2.internal    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-scheduler-6dc74f564f-cb5d4          2/2     Running   0          7d2h    10.0.15.232   ip-10-0-15-181.ec2.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-sync-connections-8579c86d44-dg9jq   2/2     Running   0          6d15h   10.0.15.150   ip-10-0-15-181.ec2.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-sync-pools-7f4f55776b-qdcjn         2/2     Running   0          6d15h   10.0.6.203    ip-10-0-6-175.ec2.internal    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-sync-users-6d98bb49ff-zx5rs         2/2     Running   0          6d15h   10.0.15.140   ip-10-0-15-181.ec2.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-sync-variables-7f9959cd-j8p8x       2/2     Running   0          6d15h   10.0.6.27     ip-10-0-6-175.ec2.internal    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-web-7f46664c6c-bvgls                2/2     Running   0          7d2h    10.0.15.111   ip-10-0-15-181.ec2.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-web-7f46664c6c-vq6kr                2/2     Running   0          6d15h   10.0.6.4      ip-10-0-6-175.ec2.internal    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-worker-0                            2/2     Running   0          7d2h    10.0.7.100    ip-10-0-7-188.ec2.internal    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-worker-1                            2/2     Running   0          7d2h    10.0.14.153   ip-10-0-14-28.ec2.internal    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;We see that the two workers locate on different nodes. Check node to be taints and pods are in toleration
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl describe node ip-10-0-7-188.ec2.internal | grep Taints -B 1
CreationTimestamp:  Thu, 15 Jul 2021 07:19:29 +0000
Taints:             dedicated=airflow:NoSchedule

kubectl describe pod airflow-worker-0 |grep Tolerations
Tolerations:     dedicated=airflow:NoSchedule

$ kubectl describe pod airflow-worker-1 |grep Tolerations
Tolerations:     dedicated=airflow:NoSchedule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Check git-sync for up-to-date DAGs. The DAG file &lt;code&gt;101_postgres_operator.py&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XpD_FktS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/gitsync_check.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XpD_FktS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/gitsync_check.png%3Fraw%3Dtrue" width="880" height="521"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl exec -it airflow-worker-0 -- ls -la efs/dags/repo/
Defaulting container name to airflow-worker.
Use 'kubectl describe pod/airflow-worker-0 -n airflow' to see all of the containers in this pod.
total 8
drwxr-sr-x 2 65533 nogroup   67 Jul 15 16:33 .
drwxrwsrwx 4 root  nogroup   82 Jul 15 16:33 ..
-rw-r--r-- 1 65533 nogroup   71 Jul 15 16:33 .git
-rw-r--r-- 1 65533 nogroup 3221 Jul 15 16:33 101_postgres_operator.py
-rw-r--r-- 1 65533 nogroup    0 Jul 15 16:33 README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-airflow-ingress"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Create airflow ingress&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;
  airflowingress.k8s.yaml
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-2:123456789012:certificate/b8299bf5-ae3b-4f69-zzzz-xxxxyyyy
    alb.ingress.kubernetes.io/group.name: dev
    alb.ingress.kubernetes.io/group.order: "9"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    kubernetes.io/ingress.class: alb
  labels:
    dev: airflow
  name: airflow
  namespace: airflow
spec:
  rules:
    - host: airflow.vinceredev.com
      http:
        paths:
          - backend:
              serviceName: airflow-web
              servicePort: 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6jCBY-V4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/airflow-board.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6jCBY-V4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/airflow-aws-eks/blob/master/images/airflow-board.png%3Fraw%3Dtrue" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Conclusion&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;With all of steps above, you can now deploy airflow in EKS cluster with control assigment of airflow components to AWS node group&lt;/li&gt;
&lt;li&gt;By using Amazon EC2 Spot, you can reduce your spend on EC2 instances significantly with minimal configuration changes.&lt;/li&gt;
&lt;li&gt;By using EFS with CSI driver you can persite data, logs cross multiple zones.&lt;/li&gt;
&lt;li&gt;By using CDK, you get more familiar to create IaC and Kubernetes yaml as code.&lt;/li&gt;
&lt;/ul&gt;




&lt;div class="ltag__user ltag__user__id__512906"&gt;
  
    .ltag__user__id__512906 .follow-action-button {
      background-color: #000000 !important;
      color: #62df88 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/vumdao" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGwkUMWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ugeYdWM---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/512906/2472752c-cfd5-4e02-b3d8-55b790178884.png" alt="vumdao image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/vumdao"&gt;🚀  Vu Dao 🚀 &lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/vumdao"&gt;🚀 AWSome Devops | AWS Community Builder | AWS SA || ☁️ CloudOpz ☁️&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vumdao"&gt;
        vumdao
      &lt;/a&gt; / &lt;a href="https://github.com/vumdao/vumdao"&gt;
        vumdao
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>aws</category>
      <category>eks</category>
      <category>cloudopz</category>
      <category>airflow</category>
    </item>
    <item>
      <title>Whats your biggest blocker getting your first software engineering job?</title>
      <author>Scott</author>
      <pubDate>Wed, 10 Nov 2021 16:08:56 +0000</pubDate>
      <link>https://dev.to/scottstern06/whats-your-biggest-blocker-getting-your-first-software-engineering-job-1b2e</link>
      <guid>https://dev.to/scottstern06/whats-your-biggest-blocker-getting-your-first-software-engineering-job-1b2e</guid>
      <description>&lt;p&gt;Getting your first job out of a bootcamp or being self taught is no easy task...but its possible.&lt;/p&gt;

&lt;p&gt;What is your biggest blocker making that next step?&lt;/p&gt;

&lt;p&gt;-Scott &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Want more?&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Come join our Facebook group to help you get your first job as a software engineer, career development, and so much more!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/groups/310120400851953"&gt;https://www.facebook.com/groups/310120400851953&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Here is a &lt;a href="https://engjobresources.carrd.co/"&gt;link&lt;/a&gt; to top 10 interview resources&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>career</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Google Homepage Clone With HTML and CSS | By Frontend Everything</title>
      <author>Frontend Everything</author>
      <pubDate>Wed, 10 Nov 2021 16:06:36 +0000</pubDate>
      <link>https://dev.to/frontendeverything/google-homepage-clone-with-html-and-css-by-frontend-everything-l0g</link>
      <guid>https://dev.to/frontendeverything/google-homepage-clone-with-html-and-css-by-frontend-everything-l0g</guid>
      <description>&lt;p&gt;Hello Everyone 👋Welcome to My New Blog Post! Today I have made a Google homepage clone with the help of HTML and CSS | We have used no JavaScript in this 😎&lt;/p&gt;

&lt;p&gt;I am Piyush, Sharing About Web development Daily. You can also check out me at &lt;a class="mentioned-user" href="https://dev.to/frontendeverything"&gt;@frontendeverything&lt;/a&gt;
.&lt;/p&gt;

&lt;p&gt;Let's start making the google homepage clone step by step&lt;/p&gt;

&lt;p&gt;First,&lt;br&gt;
We will make the nav, in the navbar we will include 4 things - Gmail, images, menu, sign-in button.&lt;/p&gt;

&lt;p&gt;Let's see the HTML Code of the navbar&lt;/p&gt;


&lt;ul&gt;

    &lt;li&gt;&lt;a href="#"&gt;Gmail&lt;/a&gt;&lt;/li&gt;

    &lt;li&gt;&lt;a href="#"&gt;Images&lt;/a&gt;&lt;/li&gt;

    &lt;li&gt;&lt;a href="#"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gc0CUYAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thumb.ibb.co/gykLCw/grid_menu.png" width="180" height="180"&gt;&lt;/a&gt;&lt;/li&gt;

    &lt;li&gt;&lt;a href="#"&gt;Sign in&lt;/a&gt;&lt;/li&gt;

   &lt;/ul&gt;
&lt;br&gt;&lt;br&gt;
    

&lt;p&gt;Output till now&lt;/p&gt;

&lt;p&gt;google&lt;br&gt;
This is nav with CSS we will move on CSS after html&lt;/p&gt;

&lt;p&gt;Second part of HTML,&lt;/p&gt;

&lt;p&gt;We will make the center part of the google home page with will include logo, searchbar and buttons.&lt;/p&gt;

&lt;p&gt;Let's see the Code of the center part&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
   &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSEJ3uId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSEJ3uId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png" alt="Google logo" width="272" height="92"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
   &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4Ayh8xH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/2/22/Google_microphone_logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4Ayh8xH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/2/22/Google_microphone_logo.png" alt="" width="141" height="201"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
   &lt;br&gt;&lt;br&gt;
    &lt;br&gt;&lt;br&gt;
    &lt;br&gt;&lt;br&gt;
     &lt;br&gt;&lt;br&gt;
     &lt;br&gt;&lt;br&gt;
    &lt;br&gt;&lt;br&gt;
   &lt;br&gt;&lt;br&gt;
    &lt;/p&gt;

&lt;p&gt;Output till now&lt;/p&gt;

&lt;p&gt;this is with CSS styling will show the CSS code after this html&lt;/p&gt;

&lt;p&gt;The final HTML Part,&lt;/p&gt;

&lt;p&gt;This is the final part we will make the footer of the google homepage it will not contain many things!&lt;/p&gt;

&lt;p&gt;Let's see the Code of the footer/last part&lt;/p&gt;


&lt;ul&gt;

    &lt;li&gt;&lt;a href="#"&gt;India&lt;/a&gt;&lt;/li&gt;

    &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt;

   &lt;/ul&gt;
&lt;br&gt;&lt;br&gt;
   &lt;ul&gt;

    &lt;li&gt;&lt;a href="#"&gt;Privacy&lt;/a&gt;&lt;/li&gt;

    &lt;li&gt;&lt;a href="#"&gt;Terms&lt;/a&gt;&lt;/li&gt;

    &lt;li&gt;&lt;a href="#"&gt;Settings&lt;/a&gt;&lt;/li&gt;

   &lt;/ul&gt;
&lt;br&gt;&lt;br&gt;
    

&lt;p&gt;This is the Output till now note: this output is not with css&lt;/p&gt;

&lt;p&gt;output with css&lt;/p&gt;

&lt;p&gt;This is the full CSS,&lt;/p&gt;

&lt;p&gt;Before we have only code HTML, this is the full CSS code&lt;br&gt;
 html {&lt;br&gt;&lt;br&gt;
  height: 100%;&lt;br&gt;&lt;br&gt;
  font-size: 100%&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 body {&lt;br&gt;&lt;br&gt;
  font: 13px arial;&lt;br&gt;&lt;br&gt;
  sans-serif;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 /* ------- Nav Items ------- &lt;em&gt;/&lt;br&gt;&lt;br&gt;
 ul {&lt;br&gt;&lt;br&gt;
  list-style: none;&lt;br&gt;&lt;br&gt;
  padding: 0px;&lt;br&gt;&lt;br&gt;
  line-height: 0px;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 li {&lt;br&gt;&lt;br&gt;
  display: inline-block;&lt;br&gt;&lt;br&gt;
  padding: 5px 7px;&lt;br&gt;&lt;br&gt;
  vertical-align: middle;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 nav, footer {&lt;br&gt;&lt;br&gt;
  padding: 4px 20px;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 /&lt;/em&gt; ------- Top Nav ------- &lt;em&gt;/&lt;br&gt;&lt;br&gt;
 nav img {&lt;br&gt;&lt;br&gt;
  list-style: none;&lt;br&gt;&lt;br&gt;
  color: #000;&lt;br&gt;&lt;br&gt;
  opacity: 0.85;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 nav a {&lt;br&gt;&lt;br&gt;
  text-decoration: none;&lt;br&gt;&lt;br&gt;
  color: #000;&lt;br&gt;&lt;br&gt;
  opacity: 0.75;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 nav ul li a:hover {&lt;br&gt;&lt;br&gt;
  text-decoration-line: underline;&lt;br&gt;&lt;br&gt;
  opacity: 0.65;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 /&lt;/em&gt; ------- Right Nav Items ------- &lt;em&gt;/&lt;br&gt;&lt;br&gt;
 .r_nav {&lt;br&gt;&lt;br&gt;
  float: right;&lt;br&gt;&lt;br&gt;
  position: relative;&lt;br&gt;&lt;br&gt;
  padding-top: 0px;&lt;br&gt;&lt;br&gt;
  padding-right: 8px;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .apps {&lt;br&gt;&lt;br&gt;
  width: 16px;&lt;br&gt;&lt;br&gt;
  height: 16px;&lt;br&gt;&lt;br&gt;
  margin-top: -2px;&lt;br&gt;&lt;br&gt;
  padding-right: 9px;&lt;br&gt;&lt;br&gt;
  opacity: 0.75;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .apps:hover {&lt;br&gt;&lt;br&gt;
  opacity: 1;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 /&lt;/em&gt; ------- Sign In Button ------- &lt;em&gt;/&lt;br&gt;&lt;br&gt;
 .sign_in {&lt;br&gt;&lt;br&gt;
  border: 1px solid #4285f4;&lt;br&gt;&lt;br&gt;
  outline: none;&lt;br&gt;&lt;br&gt;
  background: #4285f4;&lt;br&gt;&lt;br&gt;
  display: inline-block;&lt;br&gt;&lt;br&gt;
  line-height: 28px;&lt;br&gt;&lt;br&gt;
  padding: 0 12px;&lt;br&gt;&lt;br&gt;
  border-radius: 2px;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .sign_in a {&lt;br&gt;&lt;br&gt;
  font-weight: bold;&lt;br&gt;&lt;br&gt;
  color: #fff;&lt;br&gt;&lt;br&gt;
  opacity: 1;&lt;br&gt;&lt;br&gt;
  text-decoration: none;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .sign_in a:hover {&lt;br&gt;&lt;br&gt;
  opacity: 1;&lt;br&gt;&lt;br&gt;
  text-decoration: none;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .sign_in:hover {&lt;br&gt;&lt;br&gt;
  opacity: 1;&lt;br&gt;&lt;br&gt;
  box-shadow: 0 1.5px 0 0 #e4e4e4;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 /&lt;/em&gt; ------- Center Conte ------- &lt;em&gt;/&lt;br&gt;&lt;br&gt;
 .cntr_pg {&lt;br&gt;&lt;br&gt;
  position: absolute;&lt;br&gt;&lt;br&gt;
  top: 40%;&lt;br&gt;&lt;br&gt;
  left: 50%;&lt;br&gt;&lt;br&gt;
  margin-right: -50%;&lt;br&gt;&lt;br&gt;
  transform: translate(-50%, -50%)&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .logo {&lt;br&gt;&lt;br&gt;
      display: 100%;&lt;br&gt;&lt;br&gt;
  height: 92px;&lt;br&gt;&lt;br&gt;
  width: 272px;&lt;br&gt;&lt;br&gt;
  display: block;&lt;br&gt;&lt;br&gt;
  margin: auto;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .form {&lt;br&gt;&lt;br&gt;
  display: block;&lt;br&gt;&lt;br&gt;
  margin: auto;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .search_bar {&lt;br&gt;&lt;br&gt;
      border-radius: 40px;&lt;br&gt;&lt;br&gt;
  width: 585px;&lt;br&gt;&lt;br&gt;
  margin: auto;&lt;br&gt;&lt;br&gt;
  height: 39px;&lt;br&gt;&lt;br&gt;
  border: .7px solid #E4E4E4;&lt;br&gt;&lt;br&gt;
  background-color: #fff;&lt;br&gt;&lt;br&gt;
  box-shadow:0px 1px 4px #E4E4E4;&lt;br&gt;&lt;br&gt;
  margin-bottom: 20px;&lt;br&gt;&lt;br&gt;
  outline: none;&lt;br&gt;&lt;br&gt;
  text-indent: 15px;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .search_bar:hover, .search_bar:active {&lt;br&gt;&lt;br&gt;
  padding-bottom: 2px;&lt;br&gt;&lt;br&gt;
  padding-top: 1px;&lt;br&gt;&lt;br&gt;
  margin-top: -1px;&lt;br&gt;&lt;br&gt;
  width: 585px;&lt;br&gt;&lt;br&gt;
  box-shadow:0px 3px 8px #E4E4E4;&lt;br&gt;&lt;br&gt;
  outline: none;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .mic {&lt;br&gt;&lt;br&gt;
  width: 14px;&lt;br&gt;&lt;br&gt;
  height: 20px;&lt;br&gt;&lt;br&gt;
  position: relative;&lt;br&gt;&lt;br&gt;
  left: 555px;&lt;br&gt;&lt;br&gt;
  top: 34px;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .submit_buttons {&lt;br&gt;&lt;br&gt;
  display: inline-block;&lt;br&gt;&lt;br&gt;
  height: 36px;&lt;br&gt;&lt;br&gt;
      cursor: pointer;&lt;br&gt;&lt;br&gt;
  line-height: 27px;&lt;br&gt;&lt;br&gt;
  background-color: #f2f2f2;&lt;br&gt;&lt;br&gt;
  border: 1px solid #f2f2f2;&lt;br&gt;&lt;br&gt;
  border-radius: 2px;&lt;br&gt;&lt;br&gt;
  color: #757575;&lt;br&gt;&lt;br&gt;
  cursor: default;&lt;br&gt;&lt;br&gt;
  font-family: arial,sans-serif;&lt;br&gt;&lt;br&gt;
  font-size: 13px;&lt;br&gt;&lt;br&gt;
  font-weight: bold;&lt;br&gt;&lt;br&gt;
  margin: 11px 4px;&lt;br&gt;&lt;br&gt;
  min-width: 54px;&lt;br&gt;&lt;br&gt;
  padding: 0 16px;&lt;br&gt;&lt;br&gt;
  text-align: center;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .submit_buttons {&lt;br&gt;&lt;br&gt;
  position: relative;&lt;br&gt;&lt;br&gt;
  left: 25%;&lt;br&gt;&lt;br&gt;
  right: -50%;&lt;br&gt;&lt;br&gt;
      cursor: pointer;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .submit_buttons:hover {&lt;br&gt;&lt;br&gt;
  border: .7px solid #d0d0d0;&lt;br&gt;&lt;br&gt;
  color: #000;&lt;br&gt;&lt;br&gt;
  box-shadow:0px 1px 4px #E4E4E4;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 /&lt;/em&gt; ------- Footer ------- */&lt;br&gt;&lt;br&gt;
 .l_ftr {&lt;br&gt;&lt;br&gt;
  float: left;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 .r_ftr {&lt;br&gt;&lt;br&gt;
  float: right;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 footer {&lt;br&gt;&lt;br&gt;
  line-height: 0px;&lt;br&gt;&lt;br&gt;
  position: absolute;&lt;br&gt;&lt;br&gt;
  left: 0;&lt;br&gt;&lt;br&gt;
  right: 0;&lt;br&gt;&lt;br&gt;
  bottom: 0;&lt;br&gt;&lt;br&gt;
  color: #666666;&lt;br&gt;&lt;br&gt;
  background-color: #f2f2f2;&lt;br&gt;&lt;br&gt;
  border-top: solid 1px #e4e4e4;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 footer a {&lt;br&gt;&lt;br&gt;
  text-decoration: none;&lt;br&gt;&lt;br&gt;
  color: #000;&lt;br&gt;&lt;br&gt;
  opacity: 0.75;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
 footer a:hover {&lt;br&gt;&lt;br&gt;
  text-decoration-line: underline;&lt;br&gt;&lt;br&gt;
 }&lt;br&gt;&lt;br&gt;
This is complete code of CSS&lt;/p&gt;

&lt;p&gt;Final Output&lt;br&gt;
google&lt;br&gt;
Final output of google homepage&lt;/p&gt;

&lt;p&gt;To make your work easier here is the codepen link 🤩. don't forget to follow me there if you liked the project 😄.&lt;/p&gt;

&lt;p&gt;This is codepen link: &lt;a href="https://codepen.io/CodedByPiyush/pen/vYJpMpV"&gt;https://codepen.io/CodedByPiyush/pen/vYJpMpV&lt;/a&gt;&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
Thank You For Scrolling Till here 😊. If You gain any knowledge then do checkout me at &lt;a class="mentioned-user" href="https://dev.to/frontendeverything"&gt;@frontendeverything&lt;/a&gt;
. I am Piyush 🎉 I provide Content related to programming, technology, web development  Daily.&lt;br&gt;
.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>100daysofcode</category>
      <category>html</category>
      <category>css</category>
    </item>
  </channel>
</rss>
