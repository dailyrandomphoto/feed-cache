<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Right Mindset To Solve Complex Problems</title>
      <author>Tomer Raitz</author>
      <pubDate>Sat, 07 Aug 2021 09:20:55 +0000</pubDate>
      <link>https://dev.to/tomeraitz/the-right-mindset-to-solve-complex-problems-1gc6</link>
      <guid>https://dev.to/tomeraitz/the-right-mindset-to-solve-complex-problems-1gc6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1uJEDrhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja49uc0ecyg32oolcusx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1uJEDrhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja49uc0ecyg32oolcusx.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Hi all, I know that all of my articles are very technical. This time I will talk about something a little bit different, more abstract - the mindset of a developer when assigned to a new task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-to-notice-our-mindset-when-assigned-a-new-task"&gt;
  &lt;/a&gt;
  Why do we need to notice our mindset when assigned a new task?
&lt;/h2&gt;

&lt;p&gt;Lately, I have tried to be more self-aware of myself and my surrounding. I notice something significant when I'm dealing with a complex coding problem &lt;strong&gt;it always starts with "oh shit, it's too hard," and if this feeling stays with me, it impacts the quality and the amount of time that I spend on this task.&lt;/strong&gt; So, I believe to be a better developer We need to notice our attitude to the task we are currently working on. &lt;strong&gt;I think the right mindset is to be fully confident that you can succeed in finishing the task.&lt;/strong&gt; (Many people will say you can't always succeed in developing exactly what you wanted in the beginning, they are mostly correct, but you can always try to :)... I will talk about it in the "Importance of critical thinking with the right mindset" section).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-steps-to-change-your-mindset"&gt;
  &lt;/a&gt;
  The steps to change your mindset
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-be-aware-of-your-attitude-when-working-on-something-new"&gt;
  &lt;/a&gt;
  Step 1: be aware of your attitude when working on something new
&lt;/h3&gt;

&lt;p&gt;Try to follow your mood when you are working on something new. In my opinion, it doesn't matter how you follow it (write your thoughts in a diary or try to remember when you think about it), the important thing is to develop an awareness of this subject.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-find-your-weaknesses-and-your-strengths"&gt;
  &lt;/a&gt;
  Step 2: Find your weaknesses and your strengths.
&lt;/h3&gt;

&lt;p&gt;For example, I know that one of my weaknesses is trying many things myself without asking for help. This mindset can cause a waste of time (even though I know I can finish it by myself) - &lt;strong&gt;I can waste a few hours instead of someone helps me&lt;/strong&gt;, and it can be done in a half-hour. If you think about it, in this situation I  can save the company I work for, a lot of money (my half-hour + my co-worker half-hour &amp;lt; few hours of my time). But on the other side of this example, it's one of my strengths - &lt;strong&gt;I will never quit on something I need to do.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-choose-one-weakness-you-found-from-the-last-step-and-work-on-it"&gt;
  &lt;/a&gt;
  Step 3: Choose one weakness you found from the last step and work on it.
&lt;/h3&gt;

&lt;p&gt;If we take my previous example for the explanation - my plan is not always to ask for help (because it can cause the opposite of what I try to achieve). I need to see when I spend too much time on something and need to think about the cost of someone else who will help me. If I know the cost is worth it, I need to ask for help. &lt;strong&gt;But, more importantly, remember your strengths and make them your primary mindset.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-confident-you-can-do-the-task-you-got"&gt;
  &lt;/a&gt;
  Be confident you can do the task you got
&lt;/h2&gt;

&lt;p&gt;In my opinion, this is one of the most important mindsets when you solve a challenging task. Why? &lt;strong&gt;without it, you are mentally weak&lt;/strong&gt;, when you don't believe in yourself, the task you received seems too hard. &lt;strong&gt;But, if you do believe in yourself, you will do anything to complete the task.&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-of-the-right-mindset"&gt;
  &lt;/a&gt;
  Example of the right mindset
&lt;/h3&gt;

&lt;p&gt;Let me give you an example from one of my last private projects - a game called "Gold Rush." The main goal of this game is to collect more coins than your opponent. There are two options - single-player and multiplayer. I will talk only about the single-player option. The user plays vs. the computer in the single-player option. The computer will collect the coins and pass obstacles, &lt;strong&gt;so I needed to implement a path-finding algorithm.&lt;/strong&gt; At that time, it didn't sound to me that hard, so I decided to write the code myself. My design was very simple - matrix with two-player (0,0 and n-1,n-1) and random obstacles (there are obstacles in the game that the players need to pass). The main goal was - when the computer player moves, he will search for the coin, obstacle, or player 1. &lt;strong&gt;This design failed completely&lt;/strong&gt; for a lot of reasons, but the main was - when he detected an obstacle or player 1 - he tried to do random index generation from the indexes in the matrix near to him (search up, down, right, or left - only four random options in this case). What happened was he repeated the same moves again and again, and the game seems stuck. &lt;strong&gt;I must admit, at that point, I felt like a loser, But I told myself I am not giving up yet...&lt;/strong&gt; I searched for a solution on the internet, and I found this article: &lt;a href="https://briangrinstead.com/blog/astar-search-algorithm-in-javascript/"&gt;A* Search Algorithm in JavaScript (briangrinstead.com/blog)&lt;/a&gt;. &lt;strong&gt;Even though it was written very clearly, I didn't succeed to implement it in my code.&lt;/strong&gt; Honestly, I felt like shit, it's been a week, and I didn't do anything. &lt;strong&gt;But, I knew I am getting very close&lt;/strong&gt;. Eventually, I found this npm package - &lt;a href="https://www.npmjs.com/package/pathfinding"&gt;pathfinding&lt;/a&gt; and succeeded in ending this task (after a week and a half). If you want to play the game here is the link : &lt;a href="https://gold-rush.netlify.app/"&gt;Gold Rush Game&lt;/a&gt; and here is the code I talk about (the backend): &lt;a href="https://github.com/tomeraitz/gold-rush-server"&gt;Gold Rush - backend&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importance-of-critical-thinking-with-the-right-mindset"&gt;
  &lt;/a&gt;
  Importance of critical thinking with the right mindset
&lt;/h3&gt;

&lt;p&gt;I believe that you understand the importance of the right mindset after this example. But, &lt;strong&gt;I think the important in all attitudes is to remember that your approach will impact other things.&lt;/strong&gt; for example, if you take the mindset I talked about, you can mistakenly think you can finish the task in no time, &lt;strong&gt;and this why is important to have critical thinking with the right mindset&lt;/strong&gt;. Let's take, for example, the following scenario: you received a task to build a new service that no one in your company ever developed before. &lt;strong&gt;The mindset in this scenario should be "I can do it, and I will do anything to complete the task," but don't be arrogant, don't say you will complete the task in a few hours or a short time.&lt;/strong&gt; Be honest with yourself and think how long it would take to do it.&lt;/p&gt;

&lt;p&gt;Thank you for reading. I really would appreciate it if you comment your opinion about this subject because this is a new subject I explore and will be happy to learn more from others.&lt;/p&gt;

</description>
      <category>career</category>
      <category>discuss</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>GitHub awesome-sources</title>
      <author>UlugbekMuslitdinov</author>
      <pubDate>Sat, 07 Aug 2021 09:18:46 +0000</pubDate>
      <link>https://dev.to/ulugbekmuslitdinov/github-awesome-sources-1i30</link>
      <guid>https://dev.to/ulugbekmuslitdinov/github-awesome-sources-1i30</guid>
      <description>&lt;p&gt;Hi everyone. &lt;br&gt;
This is my GitHub repository project: &lt;a href="https://github.com/UlugbekMuslitdinov/awesome-sources"&gt;awesome-sources&lt;/a&gt;&lt;br&gt;
I am self-taught programmer and I know how it is difficult to find free books in the Internet or what to read to learn particular programming language. So I decided to make an open-source project where everyone can upload book they'd suggest other programmers and others can download and read them.&lt;br&gt;
For now there are more than 1GB of books on different programming languages and tools(e.g. Docker or Kubertenes) and this number is increasing day by day. Except books, there are bunch of useful resources, such as websites and other github repositories that are related to the programming.&lt;br&gt;
This project is advancing and I am ready to receive your suggestions and criticism in order to make this project more advanced. Moreover, I want you to make some contribution to this repository and enrich this library of programming books and different sources.&lt;/p&gt;

</description>
      <category>github</category>
      <category>opensource</category>
      <category>books</category>
      <category>programming</category>
    </item>
    <item>
      <title>Hacky: *Fun*ctional component-based UI library</title>
      <author>Aiden Bai</author>
      <pubDate>Sat, 07 Aug 2021 08:58:21 +0000</pubDate>
      <link>https://dev.to/aidenybai/hacky-fun-ctional-component-based-ui-library-2m5d</link>
      <guid>https://dev.to/aidenybai/hacky-fun-ctional-component-based-ui-library-2m5d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You can find the &lt;a href="https://github.com/aidenybai/hacky"&gt;GitHub&lt;/a&gt; here: &lt;a href="https://github.com/aidenybai/hacky"&gt;https://github.com/aidenybai/hacky&lt;/a&gt;. This was mostly a learning project, but some people could find this useful.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#hacky"&gt;
  &lt;/a&gt;
  🔧 Hacky
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#functional-componentbased-ui-library"&gt;
  &lt;/a&gt;
  *Fun*ctional component-based UI library
&lt;/h3&gt;

&lt;p&gt;Writing React for applications is alright. Sure, it probably works for most use cases and the DX is great! But some of the time, you just want to &lt;del&gt;limit your potential&lt;/del&gt; build a super simple application with basic state and components—That's what Hacky is for!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Plug: Hacky is built on &lt;a href="https://github.com/aidenybai/million"&gt;Million&lt;/a&gt;, a &amp;lt;1kb compiler-focused virtual DOM. It's fast!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#installing-hacky"&gt;
  &lt;/a&gt;
  Installing Hacky
&lt;/h2&gt;

&lt;p&gt;It is highly recommended you use a build tool, such as Vite (you can see &lt;a href="https://github.com/aidenybai/hacky/blob/master/vite.config.js"&gt;how we configured our settings&lt;/a&gt; under the &lt;code&gt;esbuild&lt;/code&gt; field). You can use NPM to directly install.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install hacky
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#clicker-game-example"&gt;
  &lt;/a&gt;
  Clicker Game Example
&lt;/h2&gt;

&lt;p&gt;Below is an extremely simple implementation of a Clicker Game example using Hacky.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hacky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// HTML is just &amp;lt;div id="app"&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#acknowledgments"&gt;
  &lt;/a&gt;
  Acknowledgments
&lt;/h2&gt;

&lt;p&gt;Hacky takes heavy inspiration from &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;, and believes in the core philosophies and values behind &lt;a href="https://million.js.org"&gt;Million&lt;/a&gt;. Feel free to check them out if you interested in an alternative library to use.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why is it called "Hacky"? The name originated from a quote from &lt;a href="https://twitter.com/HeyArav"&gt;@HeyArav&lt;/a&gt;: "&lt;del&gt;Hack Club Framework when&lt;/del&gt;"&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;Million is &lt;a href="https://github.com/aidenybai/hacky/blob/master/LICENSE"&gt;MIT-licensed&lt;/a&gt; open-source software by &lt;a href="https://github.com/aidenybai"&gt;Aiden Bai&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Basics of Functions in JS</title>
      <author>Sankalp Swami</author>
      <pubDate>Sat, 07 Aug 2021 08:08:46 +0000</pubDate>
      <link>https://dev.to/swamisankalp/basics-of-functions-in-js-473p</link>
      <guid>https://dev.to/swamisankalp/basics-of-functions-in-js-473p</guid>
      <description>&lt;p&gt;Here we will be going through the very basics of javascript. &lt;br&gt;
functions are one of the core fundamental building blocks in javascript.&lt;br&gt;
Functions are like programs in your programs.It is a block of code designed to perform a particular task. Javascript function can be executed when you invoke or call it any time you want same as Hermione gives a wave to her wand anytime she wants&lt;br&gt;
&lt;a href="https://i.giphy.com/media/RyLtUMBdogHvO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/RyLtUMBdogHvO/giphy.gif" alt="hermione"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  &lt;em&gt;&lt;strong&gt;SYNTAX&lt;/strong&gt;&lt;/em&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;wingardiumLeviosa&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameter1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameter2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code to be executed&lt;/span&gt;
  &lt;span class="c1"&gt;// make objects fly&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;wingardiumLeviosa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;argument1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;argument2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;JS Function is defined with &lt;code&gt;function&lt;/code&gt; keyword followed by its name and parantheses &lt;code&gt;()&lt;/code&gt;. Parantheses may contain parameters. Inside the curly braces, the code to be executed is placed. The function is executed by invoking by its name with parantheses and arguments if any.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parameters - Parameters are nothing but named variables passed into a function.&lt;/li&gt;
&lt;li&gt;Arguments - The arguments are the values passed into a function.&lt;/li&gt;
&lt;li&gt;Code - Code to be executed in the function placed inside the curly braces.&lt;/li&gt;
&lt;li&gt;Return - Return statement ends the function and returns control to the calling function.It returns value to the calling function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets write a function &lt;code&gt;greetFullName&lt;/code&gt; which takes &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; as arguments and returns full name of a person.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#invoking-or-calling-a-function"&gt;
  &lt;/a&gt;
  Invoking or Calling a Function
&lt;/h2&gt;

&lt;p&gt;You cannot execute a function by just defining it. For executing a function you need to invoke (call) a function.&lt;br&gt;
You can call a function by just its name with parantheses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return value is stored in the calling function.&lt;br&gt;
You can log the value to the console by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sankalp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Swami&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will print: Sankalp Swami&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some examples -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Harry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Potter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hermione&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Granger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ronald&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Weasley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lord&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Voldemort&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will print: Harry Potter&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will print: Hermione Granger&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will print: Ronald Weasley&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will print: You know who // just kidding&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#argument-defaults"&gt;
  &lt;/a&gt;
  Argument Defaults
&lt;/h2&gt;

&lt;p&gt;When you have declared an parameter but nothing is passed as an argument you can set an parameter to default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example if one of the argument is not passed, it gets default value of &lt;code&gt;-&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dobby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will print: Dobby -&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#function-scope"&gt;
  &lt;/a&gt;
  Function Scope
&lt;/h2&gt;

&lt;p&gt;Functions create a new local scope. This contains variables defined in the function body as well as the arguments passed in the functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError: result is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here function &lt;code&gt;add&lt;/code&gt; is defined at Global scope but variable &lt;code&gt;num1&lt;/code&gt; is passed as an argument inside the &lt;code&gt;add&lt;/code&gt; function so, it is not accesible outside the function.&lt;/p&gt;

&lt;p&gt;Once a function is defined, it can be used over and over and over again. You can invoke the same function many times in your program, which saves lot of your work.&lt;br&gt;
Thanks for reading, keep learning, Peace and Bubbyyee&lt;br&gt;
&lt;a href="https://i.giphy.com/media/2gGEWrIGVioP6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2gGEWrIGVioP6/giphy.gif" alt="Bubbyee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>beginners</category>
    </item>
    <item>
      <title>End-to-End Testing: What, Why and How?
</title>
      <author>DEEPIKA K</author>
      <pubDate>Sat, 07 Aug 2021 06:52:02 +0000</pubDate>
      <link>https://dev.to/deepika83008768/end-to-end-testing-what-why-and-how-3pfj</link>
      <guid>https://dev.to/deepika83008768/end-to-end-testing-what-why-and-how-3pfj</guid>
      <description>&lt;p&gt;Considering the present scenario, software applications are built on various layers of code, subsystem networks, and third-party integrations. The whole system has become so complex, that even if one component fails, the entire product crashes. &lt;/p&gt;

&lt;p&gt;Hence, the importance of the stability of each component in the application system is vital for the success of the overall product. That’s where end-to-end testing comes into play.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-endtoend-testing"&gt;
  &lt;/a&gt;
  What is End-to-End Testing?
&lt;/h2&gt;

&lt;p&gt;End-to-end testing is a methodology which is used to verify that the functionality and performance of an application flow match the expectations from start to end. &lt;/p&gt;

&lt;p&gt;Generally, end-to-end testing is executed after performing functional and system testing. The main objective of carrying out end-to-end testing is to make sure that correct information is being passed between various systems, components, networks, interfaces, and databases.&lt;/p&gt;

&lt;p&gt;And that the integrated components in an application function as per the expectations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-endtoend-testing-methods"&gt;
  &lt;/a&gt;
  Different End-to-End Testing Methods
&lt;/h2&gt;

&lt;p&gt;End-to-end testing is performed in two ways which includes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Horizontal End-to-End Testing:&lt;/strong&gt; It works from the user’s perspective. It goes through an application’s business login from start to end. It is performed once changes to systems or subsystems are complete.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Vertical End-to-End Testing:&lt;/strong&gt; This type of testing tests an application’s architecture in layers or in other words - the tests happen sequentially from top to bottom. Under this, each subsystem  or component is tested independently from start to finish. &lt;/p&gt;

&lt;p&gt;Vertical end-to-end testing helps achieve higher test coverage as each component is tested with a special focus. If there is a layer that does not have a user interface, then vertical testing is the recommended testing for it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w3PNkaSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rslksbd8fblpmp746c4f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3PNkaSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rslksbd8fblpmp746c4f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PC:&lt;a href="https://stackoverflow.com/questions/19378183/difference-between-system-testing-and-end-to-end-testing"&gt;https://stackoverflow.com/questions/19378183/difference-between-system-testing-and-end-to-end-testing&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-endtoend-testing"&gt;
  &lt;/a&gt;
  Benefits of End-to-End Testing
&lt;/h2&gt;

&lt;p&gt;Here are some of the benefits of end-to-end testing:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Expands Test Coverage:&lt;/strong&gt; End-to-end testing helps achieve increased test coverage which mitigates risk and ensures a quality software release.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Validates Software Functions:&lt;/strong&gt; End-to-end testing validates all the given software functions at every level on multiple systems and ensures that the end user experience is working as per the expectations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Enhances Application Productivity:&lt;/strong&gt; End-to-end testing ensures that all components communicate in expected ways with each other. This way, all bugs that could hinder a user are detected and corrected faster. Thus, helping increase application productivity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Reduces Effort and Costs Significantly:&lt;/strong&gt; When done regularly and before the release, end-to-end testing helps catch bugs earlier, before the change is deployed in production. Thus, saving time and cost of fixing those bugs in production.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Ensures Interaction Accuracy:&lt;/strong&gt; As end-to-end testing also involves front-end testing, it ensures that the application behaves as expected with a consistent user experience across multiple platforms, devices and environments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Reusability of the Test Cases:&lt;/strong&gt; End-to-end testing can be used to execute tests that are repeatable during the different processes of an application’s development cycle. Thus, end-to-end are reusable test cases too, usually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Easy to Locate Errors in Distributed Environment:&lt;/strong&gt; End-to-end testing allows testing an application on cloud environments easily too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Reduces Future Risks:&lt;/strong&gt; As an application is tested thoroughly after every iteration and sprint in end-to-end testing, the chances of failure and future risks gets diminished.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Build Confidence in the Application:&lt;/strong&gt; End-to-end testing increases confidence in the functioning and performance of the application as the application goes through a comprehensive testing of the user flows at different points across different platforms and devices before its release.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-endtoend-test-cases"&gt;
  &lt;/a&gt;
  How to Create End-to-End Test Cases?
&lt;/h2&gt;

&lt;p&gt;End-to-end test cases can be classified in three parts:&lt;/p&gt;

&lt;p&gt;End-to-end testing involves testing the user flows from start to end. &lt;/p&gt;

&lt;p&gt;Thus test cases can be created by following below steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go through all the business requirement specifications&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go through all acceptance criterias&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on steps 1 and 2, construct all end-to-end user flows/journeys and mark them as test cases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From the test cases created in step 3, also see what would happen if the user did something unexpected - like entering wrong data, clicking on something by mistake etc and create all edge scenarios&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;5.Figure out what test cases might need different types of data for testing and arrange that&lt;/p&gt;

&lt;p&gt;6.Figure out what all environments - devices and browsers would be needed for test execution and mark test cases accordingly&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-perform-endtoend-testing"&gt;
  &lt;/a&gt;
  How to Perform End-to-End Testing?
&lt;/h2&gt;

&lt;p&gt;End-to-end testing can only be done once all the components are ready for testing and are communicating with each other. Usually, by this time, testers are ready with the test cases.&lt;/p&gt;

&lt;p&gt;There are two different approaches to doing this testing:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manually&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Automated&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For horizontal end-to-end testing, manual testing makes sense the first time this testing is done for a product. This is because &lt;a href="https://testsigma.com/automated-testing"&gt;automated testing&lt;/a&gt; is beneficial only when the product is stable and is known to work as expected.&lt;/p&gt;

&lt;p&gt;Above statement does vary in case of vertical end-to-end testing, such that unit testing can be done by the developer along with other development tasks. And then the integration tests and the end-to-end tests can be executed manually. &lt;/p&gt;

&lt;p&gt;Now let's break down the above steps when you have to do manual testing and then automate those test cases too.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Execute all the positive end-to-end test cases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execute all the negative and edge cases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure that the test cases are executed on all environments - devices and browsers that your target users might be using &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure to report all the bugs and discrepancies found, as soon as they are found&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once all the reported bugs (at least the major ones) have been fixed and verified, run all the end-to-end test cases once again and repeat steps 1 to 3&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the product is majorly stable, start with test automation. But before that mark the test cases that you will automate first. Start with automating the test case that is the main user scenario. This ensures that the main user scenario is executed every time there is a change. And, any discrepancies are reported sooner rather than later&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After that automate other test cases and scenarios that are supposed to remain stable and unchanged in future. Always start with automating the high priority test cases first.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you don’t have a test automation setup yet and you are looking for one then here is an article that can help you choose a test automation tool that will suit you - &lt;a href="https://testsigma.com/blog/10-points-to-help-you-choose-the-right-test-automation-tool/"&gt;10 Points to Help You Choose the Right Test Automation Tool&lt;/a&gt;&lt;/p&gt;

</description>
      <category>endtoendtesting</category>
      <category>softwaretesting</category>
      <category>automationtesting</category>
      <category>testautomation</category>
    </item>
    <item>
      <title>Building A Minimal AutoSuggest</title>
      <author>Mads Stoumann</author>
      <pubDate>Sat, 07 Aug 2021 06:42:43 +0000</pubDate>
      <link>https://dev.to/madsstoumann/building-a-minimal-autosuggest-4big</link>
      <guid>https://dev.to/madsstoumann/building-a-minimal-autosuggest-4big</guid>
      <description>&lt;p&gt;It took the Web a lot of years to introduce the &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;-tag, essential in creating one of the most widely used UI-components: the “AutoSuggest”. In this tutorial we'll be building a minimal “AutoSuggest”, both &lt;em&gt;with&lt;/em&gt; and &lt;em&gt;without&lt;/em&gt; JavaScript.&lt;/p&gt;




&lt;p&gt;In one of the first books I read about UI-design, “The Windows Interface Guidelines for Software Design” from 1995, it was called &lt;em&gt;a Combobox&lt;/em&gt; — because it's a &lt;em&gt;combination&lt;/em&gt; of a &lt;em&gt;drop-down list&lt;/em&gt; and a &lt;em&gt;text-input&lt;/em&gt;. I personally think that term makes more sense than “AutoSuggest” or “Type Ahead”, but it seems the world has chosen “AutoSuggest” — so let's stick with that!&lt;/p&gt;

&lt;p&gt;jQueryUI has the “AutoComplete”-plugin, incorrectly named, as “autocomplete” is a slightly different thing, as seen in this image from a &lt;a href="https://ux.stackexchange.com/questions/40104/how-to-provide-autocomplete-and-autosuggest-on-the-same-search-box-at-the-same-t"&gt;UX Stackexchange&lt;/a&gt; post:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlXl-Qip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04e3trgwhp84fo75avd3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlXl-Qip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04e3trgwhp84fo75avd3.jpg" alt="nXHX2"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#basic-structure"&gt;
  &lt;/a&gt;
  Basic Structure
&lt;/h2&gt;

&lt;p&gt;In most of the examples you'll see online, a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; is used with the &lt;code&gt;&amp;lt;input type="text"&amp;gt;&lt;/code&gt;. I prefer to use &lt;code&gt;&amp;lt;input type="search"&amp;gt;&lt;/code&gt;. Why? Because this type adds some nice, extra, accessibility-friendly features out-of-the-box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Escape&lt;/code&gt;-key clears the list-selection, a second press clears the input altogether.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Chrome and Safari, an event — &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/search_event"&gt;onsearch&lt;/a&gt; — is triggered when you press &lt;code&gt;Escape&lt;/code&gt; or &lt;code&gt;Enter&lt;/code&gt;, or when you click the little “reset cross”.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#the-markup"&gt;
  &lt;/a&gt;
  The markup
&lt;/h2&gt;

&lt;p&gt;The suggestions themselves are &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;s in a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;datalist&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"browsers"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Firefox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Chrome"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Opera"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Safari"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Chrome, this format is also supported:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"MSE"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Microsoft Edge&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;innerText&lt;/code&gt; will show up in the list, but only &lt;code&gt;value&lt;/code&gt; will be inserted, when you select an item.&lt;/p&gt;

&lt;p&gt;To link a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; with an input, just take the &lt;code&gt;id&lt;/code&gt; and use as a &lt;code&gt;list&lt;/code&gt;-attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Pick a browser&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
    &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
    &lt;span class="na"&gt;autocorrect=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
    &lt;span class="na"&gt;list=&lt;/span&gt;&lt;span class="s"&gt;"browsers"&lt;/span&gt;
    &lt;span class="na"&gt;spellcheck=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't want &lt;code&gt;autocomplete&lt;/code&gt; or &lt;code&gt;spellcheck&lt;/code&gt; to interfere, so we set them to &lt;code&gt;off&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;autocorrect&lt;/code&gt; is a Safari-only property, that should also be disabled in this case.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-css"&gt;
  &lt;/a&gt;
  The CSS
&lt;/h2&gt;

&lt;p&gt;Not much here. We can use &lt;code&gt;-webkit-appearance: none&lt;/code&gt; to clear the default browser-styling, and add our own. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"search"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#AAA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;margin-block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;min-inline-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="m"&gt;0.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you probably &lt;strong&gt;do&lt;/strong&gt; want to change, is that little “cross-icon”, that resets the input:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q6o5yNl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s67cgoo2ijye0docdh21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6o5yNl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s67cgoo2ijye0docdh21.png" alt="Reset Cross"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I use a SVG-icon in a &lt;code&gt;url()&lt;/code&gt;, that I store in a &lt;em&gt;CSS Custom Property&lt;/em&gt;, so it can be used as both a &lt;code&gt;mask-image&lt;/code&gt; and a &lt;code&gt;-webkit-mask-image&lt;/code&gt; for browser-compatibility:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"search"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-search-cancel-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--reset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('data:image/svg+xml,&amp;lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"&amp;gt;&amp;lt;path d="M17.016 15.609l-3.609-3.609 3.609-3.609-1.406-1.406-3.609 3.609-3.609-3.609-1.406 1.406 3.609 3.609-3.609 3.609 1.406 1.406 3.609-3.609 3.609 3.609zM12 2.016q4.125 0 7.055 2.93t2.93 7.055-2.93 7.055-7.055 2.93-7.055-2.93-2.93-7.055 2.93-7.055 7.055-2.93z"/&amp;gt;&amp;lt;/svg&amp;gt;')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;currentColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;mask-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--reset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-mask-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--reset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Chrome adds a drop-down-arrow to an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;, which we can hide:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-calendar-picker-indicator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There, much better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6HpA84UX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73jaxeyi90441ekte26v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6HpA84UX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73jaxeyi90441ekte26v.png" alt="Reset Cross Styled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On mobile devices, the &lt;code&gt;&amp;lt;input type="search"&amp;gt;&lt;/code&gt; will trigger a virtual keyboard with a “Search”-button. If you &lt;strong&gt;don't&lt;/strong&gt; want that, look into &lt;a href="https://css-tricks.com/everything-you-ever-wanted-to-know-about-inputmode/"&gt;inputmode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On an iPhone, a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; is displayed like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yb-RrjL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q9kdeesayyis88sjonn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yb-RrjL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q9kdeesayyis88sjonn.png" alt="iphonedatalist"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Far from perfect, but still much better than many custom solutions, where the virtual keyboard makes the “AutoSuggest” jump up and down!&lt;/p&gt;




&lt;p&gt;That's the minimalistic, JavaScript-free &lt;em&gt;AutoSuggest!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Excellent for things like a &lt;a href="https://madsstoumann.github.io/autosuggest/countries.html"&gt;country selector&lt;/a&gt; — and &lt;em&gt;much better&lt;/em&gt; than the minified &lt;strong&gt;224kb&lt;/strong&gt; jQueryUI's “AutoComplete”-plugin consumes (including it's CSS, and jQuery itself).&lt;/p&gt;

&lt;p&gt;But what if you want to use an API, creating &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;s dynamically?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#adding-an-api"&gt;
  &lt;/a&gt;
  Adding an API
&lt;/h2&gt;

&lt;p&gt;Before we look at the JavaScript, let's add some extra attributes to the &lt;code&gt;&amp;lt;input type="search"&amp;gt;&lt;/code&gt;-markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;data-api="//domain.com?q="
data-api-cache="0"
data-api-key="key"
min-length="3"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;data-api&lt;/code&gt; is for the &lt;code&gt;url&lt;/code&gt; we want to &lt;code&gt;fetch()&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
The search-text will be appended to this.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;data-api-cache&lt;/code&gt; can either be &lt;code&gt;0&lt;/code&gt; (disabled) or &lt;code&gt;1&lt;/code&gt; (enabled). If enabled, the &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;-options will not be overwritten after the initial &lt;code&gt;fetch()&lt;/code&gt;, and as you type in more text, the native browser-filtering of a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; will be used.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;data-api-key&lt;/code&gt; is the “key / property” in the result-objects, you want to search and display as &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;min-length&lt;/code&gt; is a standard-attribute. In this case, it indicates how many characters you need to type, before the &lt;code&gt;fetch()&lt;/code&gt; is triggered.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;For the JavaScript, I'm going to explain all the methods I'm using, so you can build your own, customized &lt;em&gt;AutoSuggest&lt;/em&gt; with just the features you need.&lt;/p&gt;

&lt;p&gt;First, we add a function, &lt;code&gt;autoSuggest(input)&lt;/code&gt; with a single parameter: the &lt;code&gt;input&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, a boolean indicating whether cache should be used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apiCache&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The returned data, will be stored in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order not to crash the service, we're calling, we need a &lt;em&gt;debounce&lt;/em&gt;-method to filter out events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debounced&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timerId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;timerId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;timerId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We store a reference to the &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;… and add an &lt;code&gt;eventListener&lt;/code&gt; on the &lt;code&gt;input&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;debounced&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onentry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;200&lt;/code&gt; is the delay used in the &lt;code&gt;debounce&lt;/code&gt;-method. You can modify this, or add it to a settings-object or similar.&lt;/p&gt;

&lt;p&gt;Finally, there's the &lt;code&gt;onentry&lt;/code&gt;-method called from within the &lt;code&gt;debounce&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onentry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minLength&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;option value="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's an async function, that first checks whether the input has the minimal amount of characters. If not, it simply returns.&lt;/p&gt;

&lt;p&gt;If no data exists already, or if the cache is set to &lt;code&gt;0: false&lt;/code&gt;, a &lt;code&gt;fetch()&lt;/code&gt; is triggered, and the &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;s are updated.&lt;/p&gt;

&lt;p&gt;Cool, we now have dynamic options, and a minified script, that's just &lt;strong&gt;497 bytes&lt;/strong&gt;, approx. &lt;strong&gt;349 bytes gzipped!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But I think it lacks a few features. I want to trigger a &lt;em&gt;Custom Event&lt;/em&gt;, when I select an option from the list, and I want the &lt;em&gt;object&lt;/em&gt; from the matching search-result in that event.&lt;/p&gt;

&lt;p&gt;Let's modify the &lt;code&gt;onentry&lt;/code&gt;-method a bit. We can use the &lt;code&gt;event.inputType&lt;/code&gt; to detect, when the user clicks on a list item, or selects it using &lt;code&gt;Enter&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;insertReplacementText&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autoSuggestSelect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;selected&lt;/code&gt;-method looks up and returns the current input-text in the array of objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now — in another script! — we can listen for that event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autoSuggestSelect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What if we want to &lt;em&gt;reset&lt;/em&gt; the list? In Safari and Chrome, there's the &lt;code&gt;onsearch&lt;/code&gt;-event, that's triggered on both reset and &lt;code&gt;Enter&lt;/code&gt;.&lt;br&gt;
Let's add a &lt;code&gt;reset()&lt;/code&gt;-method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;option value=""&amp;gt;`&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And trigger it, when a user clicks the “reset-cross” or presses &lt;code&gt;Escape&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;search&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;// Do something on Enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The blank &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; in the &lt;code&gt;reset()&lt;/code&gt;-method is a hack for Firefox and Safari, that otherwise has some issues with a dynamic &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;. It can therefore be a good idea to add an empty option by default in the markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;datalist&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"suggest"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/option&amp;gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script is now &lt;strong&gt;544 bytes&lt;/strong&gt; gzipped. Is there anything else, we can do?&lt;/p&gt;

&lt;p&gt;In Firefox, we can add a small “polyfill” for &lt;code&gt;onsearch&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;onsearch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Escape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#what-else"&gt;
  &lt;/a&gt;
  What Else?
&lt;/h2&gt;

&lt;p&gt;You can continue to add stuff yourself. But before you do that, let's add a &lt;code&gt;settings&lt;/code&gt;-object to hold the configuration parameters for what we already have — and whatever you want to add! First, we'll change the main function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;autoSuggest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll merge the &lt;code&gt;args&lt;/code&gt; into a settings-object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;api&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;apiCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;datasetToType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;datasetToType&lt;/code&gt; is a small helper-function, that'll convert dataset-entries to correct types (non-string values prefixed with a &lt;code&gt;:&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;datasetToType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, we can call the &lt;code&gt;autoSuggest&lt;/code&gt;-method with &lt;em&gt;either&lt;/em&gt; a standard JavaScript-object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;autoSuggest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;apiCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;— or with it's &lt;code&gt;dataset&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;autoSuggest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the markup, we'll replace the &lt;code&gt;0&lt;/code&gt;'s with &lt;code&gt;:false&lt;/code&gt; and the &lt;code&gt;1&lt;/code&gt;'s with &lt;code&gt;:true&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;data-api-cache=":false"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to replace &lt;code&gt;input.dataset.api&lt;/code&gt; with &lt;code&gt;settings.api&lt;/code&gt;, remove the &lt;code&gt;cache&lt;/code&gt; constant, and replace it with &lt;code&gt;settings.cache&lt;/code&gt; (and various other places, check the final example!), but we now have a &lt;code&gt;settings&lt;/code&gt;-object, we can extend with new features.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#limiting-choices"&gt;
  &lt;/a&gt;
  Limiting choices
&lt;/h2&gt;

&lt;p&gt;Do you want to limit the &lt;code&gt;value&lt;/code&gt; to &lt;strong&gt;only&lt;/strong&gt; allow values from the list? Let's extend the &lt;code&gt;settings&lt;/code&gt;-object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;invalid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not a valid selection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll add a new method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setCustomValidity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkValidity&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reportValidity&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;invalid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, we'll update the &lt;code&gt;onsearch&lt;/code&gt;-event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;search&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method uses HTML5's default validation api — and currently does &lt;em&gt;nothing&lt;/em&gt; (apart from logging to the &lt;code&gt;console&lt;/code&gt;!). You can/should tweak it, to use your own way of handling invalid state.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;The first &lt;a href="https://madsstoumann.github.io/autosuggest/"&gt;example&lt;/a&gt; is DAWA, a danish service for looking up addresses &lt;em&gt;(try typing “park”):&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;DAWA - Danish Address Lookup&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
    &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
    &lt;span class="na"&gt;autocorrect=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
    &lt;span class="na"&gt;data-api=&lt;/span&gt;&lt;span class="s"&gt;"//dawa.aws.dk/adresser/autocomplete?side=1&amp;amp;per_side=10&amp;amp;q="&lt;/span&gt;
    &lt;span class="na"&gt;data-api-cache=&lt;/span&gt;&lt;span class="s"&gt;":false"&lt;/span&gt;
    &lt;span class="na"&gt;data-api-key=&lt;/span&gt;&lt;span class="s"&gt;"tekst"&lt;/span&gt;
    &lt;span class="na"&gt;data-limit=&lt;/span&gt;&lt;span class="s"&gt;":true"&lt;/span&gt;
    &lt;span class="na"&gt;list=&lt;/span&gt;&lt;span class="s"&gt;"dawa"&lt;/span&gt;
    &lt;span class="na"&gt;minlength=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;
    &lt;span class="na"&gt;spellcheck=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;datalist&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"dawa"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/option&amp;gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below that is JSON placeholder &lt;em&gt;(try typing “lorem”):&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;JSON placeholder&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
    &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
    &lt;span class="na"&gt;autocorrect=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
    &lt;span class="na"&gt;data-api=&lt;/span&gt;&lt;span class="s"&gt;"//jsonplaceholder.typicode.com/albums/?_limit=10&amp;amp;q="&lt;/span&gt;
    &lt;span class="na"&gt;data-api-key=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;
    &lt;span class="na"&gt;list=&lt;/span&gt;&lt;span class="s"&gt;"jsonplaceholder"&lt;/span&gt;
    &lt;span class="na"&gt;minlength=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;
    &lt;span class="na"&gt;spellcheck=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;datalist&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"jsonplaceholder"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/option&amp;gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick way to run the &lt;code&gt;autoSuggest&lt;/code&gt;-method on all elements with an associated &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;autoSuggest&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./autosuggest.mjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[list]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autoSuggestSelect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;autoSuggest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is not meant to be a tried and tested “AutoSuggest”, you can use “as-is” in a project. It's more a set of principles and ideas, so you can go ahead and make your own, customizing it to your needs: minimal or bloated with features!&lt;/p&gt;

&lt;p&gt;More importantly, it's meant to show how a “native first”-approach, using built-in tags and their built-in functionality, can often result in much less JavaScript and less overhead.&lt;/p&gt;

&lt;p&gt;I've made a &lt;a href="https://github.com/madsstoumann/autosuggest"&gt;repository&lt;/a&gt;, from where you can grab the demo-files. Open the folder in &lt;em&gt;VS Code&lt;/em&gt;, and start it with &lt;em&gt;Live Server&lt;/em&gt; or similar. &lt;a href="https://madsstoumann.github.io/autosuggest/"&gt;Live demo here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Drawing a cartoon with HTML and CSS (with video)</title>
      <author>Alvaro Montoro</author>
      <pubDate>Sat, 07 Aug 2021 06:20:07 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/drawing-a-cartoon-with-html-and-css-with-video-5cml</link>
      <guid>https://dev.to/alvaromontoro/drawing-a-cartoon-with-html-and-css-with-video-5cml</guid>
      <description>&lt;p&gt;I enjoy coding &lt;a href="https://dev.to/alvaromontoro/100-days-of-css-illustrations-4hi5"&gt;CSS drawings&lt;/a&gt; for fun. I find it relaxing and think it's an excellent way to practice CSS. So today, I did a session and completed &lt;a href="https://codepen.io/alvaromontoro/full/mdmzojb"&gt;this drawing on CodePen&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/mdmzojb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I recorded the process, but this time was a bit different: I record myself speaking and explaining the process on video for the first time. Typically, I only show time-lapses of the process as I’m too self-conscious of my voice and accent. Anyway, here's the video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uf_sG7yrO9Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It’s also my first long video, and I know it is pretty amateur (not a great mic, using iMovie for editing, etc.) So, any constructive feedback on the video will be appreciated and welcomed.&lt;/p&gt;

&lt;p&gt;And, if you don’t like long videos, or my voice is annoying or puts you to sleep (you wouldn’t be the first), here’s the time-lapse video I usually do:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kk9GCmAS6do"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;If you enjoy this content, &lt;a href="http://youtube.com/c/AlvaroMontoroCSS"&gt;check the other videos on my channel&lt;/a&gt; too! :P&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>art</category>
      <category>youtube</category>
    </item>
    <item>
      <title>Efficient copying between DynamoDB tables using Parallel Scans and Batch Write</title>
      <author>Oksana Horlock</author>
      <pubDate>Sat, 07 Aug 2021 06:09:50 +0000</pubDate>
      <link>https://dev.to/aws-builders/efficient-copying-between-dynamodb-tables-using-parallel-scans-and-batch-write-1ec2</link>
      <guid>https://dev.to/aws-builders/efficient-copying-between-dynamodb-tables-using-parallel-scans-and-batch-write-1ec2</guid>
      <description>&lt;p&gt;Recently we had a situation where we needed to copy a large amount of data from a DynamoDB table into another one in a different account. Originally we used a Scan function to get items with a ExclusiveStartKey/LastEvaluatedKey  marker to check if more records needed to be obtained. Then we used PutItem API call to insert data into the destination table. Because there were several hundred thousand records in the table, it took several hours to copy them; at that point we decided that we needed to use a faster method to copy the data. We achieved a massive improvement of the copying times by using Parallel Scans and Writing Items in Batch. This post will provide an example of how to use them and compare the results of the methods we used.&lt;/p&gt;

&lt;p&gt;For demo purposes, I’m using the same account, rather than different ones. I have written a method to create a simple DynamoDB table programmatically. It will contain data about temperatures in 2020 in a few cities:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private static async Task&amp;lt;TableDescription&amp;gt; CreateTable(string name)
{
    var request = new CreateTableRequest
    {
        AttributeDefinitions = new List&amp;lt;AttributeDefinition&amp;gt;()
        {
            new AttributeDefinition{
                AttributeName = "City",
                AttributeType = "S"
            },
            new AttributeDefinition{
                AttributeName = "Date",
                AttributeType = "S"
            }
        },
        TableName = name,
        ProvisionedThroughput = new ProvisionedThroughput
        {
            ReadCapacityUnits = 15,
            WriteCapacityUnits = 15
        },
        KeySchema = new List&amp;lt;KeySchemaElement&amp;gt;
        {
            new KeySchemaElement
            {
                AttributeName="City",
                KeyType="HASH"
            },
            new KeySchemaElement
            {
                AttributeName="Date",
                KeyType="Range"
            }
        }
    };
    var response = await client.CreateTableAsync(request);
    return response.TableDescription;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use the method above to create several tables (and also wait to ensure the table I need to populate first has been created):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;await CreateTable(sourceTableName);
await CreateTable(destinationTableNameSlow);
await CreateTable(destinationTableNameFast);

var describeTableRequest = new DescribeTableRequest
{
    TableName = sourceTableName
};

DescribeTableResponse describeTableResponse;
do
{
    System.Threading.Thread.Sleep(1000);
    describeTableResponse = await client.DescribeTableAsync(describeTableRequest);
}
while (describeTableResponse.Table.TableStatus != TableStatus.ACTIVE);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I populate the source table with some data about temperatures:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (var i = 0; i &amp;lt;= 100; i++)
{
    var putItemRequest = new PutItemRequest
    {
        TableName = sourceTableName,
        Item = new Dictionary&amp;lt;string, AttributeValue&amp;gt;()
        {
            {"City", new AttributeValue{S=cities[(new Random()).Next(cities.Length)]  } },
            {"Date", new AttributeValue{S=GetRandom2020Date()  } },
            {"Highest", new AttributeValue{N=(new Random()).Next(20,30).ToString()  } },
            {"Lowest", new AttributeValue{N=(new Random()).Next(1,10).ToString()  } }
        }
    };
    await client.PutItemAsync(putItemRequest);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the most interesting part starts. First, I call a method to copy the data slowly. I use Scan and PutItem API calls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private static async Task CopySlowly()
{
    Stopwatch sw = new Stopwatch();
    sw.Start();
    var request = new ScanRequest
    {
        TableName = sourceTableName
    };

    var result = await client.ScanAsync(request, default);
    foreach (var item in result.Items)
    {
        var putItemRequest = new PutItemRequest
        {
            TableName = destinationTableNameSlow,
            Item = item
        };

        await client.PutItemAsync(putItemRequest, default);
    }
    sw.Stop();
    Console.Write($"Copy slow - {sw.ElapsedMilliseconds} milliseconds elapsed");
    Console.ReadLine();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the demo table only has 100 items, I’m not using ExclusiveStartKey/LastEvaluatedKey with the Scan operation; those are definitely necessary for large tables as Scan only gets maximum of 1MB of data.&lt;/p&gt;

&lt;p&gt;I then call another method to copy data using Parallel Scans. I specify how many parallel worker threads I want to create by using totalSegments variable. In this case it was set to 3, but you can probably have as many as you like):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private static void CopyFast()
{
    Stopwatch sw = new Stopwatch();            
    sw.Start();
    Task[] tasks = new Task[totalSegments];
    for (int segment = 0; segment &amp;lt; totalSegments; segment++)
    {
        int tmpSegment = segment;
        tasks[segment] = Task.Run(() =&amp;gt; ScanSegment(tmpSegment));
    }

    Task.WaitAll(tasks);
    sw.Stop();

    Console.WriteLine($"Copy fast - {sw.ElapsedMilliseconds} milliseconds elapsed");
    Console.ReadLine();
}
private static async Task ScanSegment(int tmpSegment)
{
    var request = new ScanRequest
    {
        TableName = sourceTableName,
        Segment = tmpSegment,
        TotalSegments = totalSegments,
    };

    var result = await client.ScanAsync(request);

    for (var i = 0; i &amp;lt; result.Items.Count; i += 25)
    {
        var items = result.Items.Skip(i).Take(25).ToArray();
        var req = new BatchWriteItemRequest
        {
            RequestItems = new Dictionary&amp;lt;string, List&amp;lt;WriteRequest&amp;gt;&amp;gt;
            {
                {
                    destinationTableNameFast,
                    items.Select(i =&amp;gt; new WriteRequest(new PutRequest(i))).ToList()
                }
            }
        };

        await client.BatchWriteItemAsync(req);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While simple Scan accesses one partition at a time, when using Parallel Scans several worker threads are created, and each of them scans a certain segment of the table. BatchWriteItem operation allows you to create a PutItem request for up to 25 items at a time.&lt;/p&gt;

&lt;p&gt;As a result, the difference in copying speed is noticeable:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NCrm2W6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lzu18lffb5vf8qnb8rj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NCrm2W6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lzu18lffb5vf8qnb8rj.jpg" alt="Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another point to mention is that this task has been helpful in preparation for the AWS Developer Associate exam which I took (and passed!) in February 2021 – there were a couple of questions about Parallel Scans and BatchWriteItem in practice tests, and I was very happy that I had come across this scenario at work and knew the correct answers straightaway!&lt;/p&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>dynamodb</category>
      <category>awssdk</category>
      <category>csharp</category>
    </item>
    <item>
      <title>whats the worst program you can make for squaring a number.</title>
      <author>Rishit Khandelwal</author>
      <pubDate>Sat, 07 Aug 2021 04:48:24 +0000</pubDate>
      <link>https://dev.to/rishitkhandelwal/whats-the-worst-program-you-can-make-for-squaring-a-number-3186</link>
      <guid>https://dev.to/rishitkhandelwal/whats-the-worst-program-you-can-make-for-squaring-a-number-3186</guid>
      <description>&lt;p&gt;Try making a ultimate slow program to square a number, or share a program you have made previously.&lt;br&gt;
The slower the better.&lt;br&gt;
But each iteration should do something, dont loop for ever and then print the square like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, now comment your slow program in the comments ;)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Join orbits community now: &lt;a href="https://discord.gg/9hB4VJcw97"&gt;https://discord.gg/9hB4VJcw97&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>theworsethebetter</category>
      <category>slow</category>
      <category>programming</category>
    </item>
    <item>
      <title>How Building A Full Stack Application Helped me gained Industry Level Experience.</title>
      <author>Altaf Shaikh</author>
      <pubDate>Sat, 07 Aug 2021 04:36:51 +0000</pubDate>
      <link>https://dev.to/ialtafshaikh/how-building-a-full-stack-application-helped-me-gained-industry-level-experience-3fgl</link>
      <guid>https://dev.to/ialtafshaikh/how-building-a-full-stack-application-helped-me-gained-industry-level-experience-3fgl</guid>
      <description>&lt;p&gt;Hello Folks👋,&lt;/p&gt;

&lt;p&gt;I Recently got Graduated🎓 in 2020, yep in the Pandemic. We all hit very hard by this Corona Pandemic and we all got stuck at home for very long. We all realize the Importance of Socializing, Fitness (Physically as well Mentally), Diet of course.&lt;/p&gt;

&lt;p&gt;The Motive of writing ✍️ this article is to share the knowledge and skills I developed So Far during this Pandemic, which was a very great opportunity for me as well as for all of you to Use this time to become more productive like never before, tell me your story in the comment section, I will love to hear from you. Moving on When I was in the Final Semester of my college which generally runs between &lt;strong&gt;Nov 2019&lt;/strong&gt; To** June 2020**. I Got placed in the Tech Company from College Campus and that was my biggest achievement so far after getting rejected from Interviews and Aptitude Rounds.&lt;/p&gt;

&lt;p&gt;So after that, I had nothing to do except my college Curriculum, and deep inside my mind I always wanted to do something like a startup, following my passion, or something out of the box. But I nor Find my passion nor I got any idea to start the Startup.&lt;/p&gt;

&lt;p&gt;"One thing About me: So far from my 2nd semester to my 7th Semester, I Choose Python as my primary language in my sem 4 and I continue to use it to explore the Web Fundamentals, and From that, I developed strong technical skills in me, but there is always a scope for improvement"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ldsWurOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627114984148/0Xv7DYLAQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ldsWurOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627114984148/0Xv7DYLAQ.png" alt="no-exp-meme.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Especially in India, We all have heard that our Computer Science and IT Engineering graduates don't have the right skills set and are not fit for the Job. And This taught was always in my mind and we have to do something to stand out from the crowd and become the best in our field. &lt;/p&gt;

&lt;p&gt;But the question was How?? How we are going to get the right industry skills without really working on it. As our Curriculum is mostly theory Based so students have to put extra effort to work on their skills. &lt;/p&gt;

&lt;p&gt;But there is one more problem that most students are willing to put effort into building their skills but they don't have the right guidance/mentorship. Because you can't learn something if you don't know what to learn and for self-learner, they have to put a lot of effort in research and after lots of trial and error they understand and figure out whats will be good for them, but not everyone can put so much of time and efforts, right?? &lt;/p&gt;

&lt;p&gt;Things are not clear when you are starting, you don't know what is right or what is wrong the only way to know is to try it out.&lt;/p&gt;

&lt;p&gt;With all that said, We all know that we are living in the age of Google, what is not available on the internet, everything is available and that too for &lt;strong&gt;free&lt;/strong&gt;. &lt;em&gt;I repeat, For free&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jQZP3jho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627115189638/jzi7z8FsP.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jQZP3jho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627115189638/jzi7z8FsP.jpeg" alt="elon-musk-everything-is-free.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You don't believe, right!! See this Website &lt;a href="https://teachmebro.com"&gt;Teach Me Bro&lt;/a&gt;. I build this with a cost of Just Rs 95 that too with GST, As I wanted &lt;code&gt;.com&lt;/code&gt; domain else that too I could get it for &lt;code&gt;free&lt;/code&gt;. Spectacular right !!&lt;/p&gt;

&lt;p&gt;If you still think, you have an Idea and you wanted to showcase that to the world but you don't have enough money to build the Website or Mobile App well, then I am sorry to say that you have not explored the internet very well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thank you so much if you are still reading the Post. Trust me your time will worth spending here. Let move ahead with ado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teachmebro"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.teachmebro.com"&gt;TeachMeBro&lt;/a&gt; 🧑‍💻
&lt;/h2&gt;

&lt;p&gt;With a mindset to get highly skilled at Web Development Skills, I thought to build a Blogging Platform where I will share my Knowledge and expose to the technologies to my juniors in their early stages with proper guidance &amp;amp; direction. Initially, my Only aim was this but later With Pandemic gave me to open up my wings more, lets discuss them later in the post.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=1CTSqc8XNsc"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NaabrGPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/1CTSqc8XNsc/0.jpg" alt="IMAGE ALT TEXT HERE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But Hold on!! You were thinking there are a lot of platforms available to do blogging, why you are re-inventing the wheel and not reusing the existing Websites like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Blogger&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dev.to&lt;/strong&gt; (I was not aware of such a site early)&lt;/li&gt;
&lt;li&gt;*&lt;em&gt;Hashnode *&lt;/em&gt;(I was not aware of such a site early)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But My Aim was to hone my Developing and Programming skills and I wanted to explore how these things are made and How one I can build the same.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I wanted to become an expert in Django Framework for that I need to explore the framework in-depth&lt;/li&gt;
&lt;li&gt;I wanted to Get the Whole Idea of Developing a web application locally and with Continuous Integration and Continuous Deployment how I can seamlessly push code to production.&lt;/li&gt;
&lt;li&gt;Wanted to Learn How to Rank The Website on google, how to optimized web pages for SEO&lt;/li&gt;
&lt;li&gt;How to Architect and Design the Web App to Serve the Clients.&lt;/li&gt;
&lt;li&gt;To Design Frontend UI to understand the Frontend Technologies better&lt;/li&gt;
&lt;li&gt;To Get the 360 View of the application development, which will help me to become a better developer and problem solver, and System Designer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that's why I Decide to Build things from scratch to gain the fundamentals knowledge of web development not only theoretically but to experience it practically in a real-world scenario before working formally in any company. And Trust Me this helped he a lot in my JOB training, It made my foundation strong and I was able to Grasp thing quickly and this helps me to understand web fundamentals better and made me dive deep into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-i-achieve-all-this"&gt;
  &lt;/a&gt;
  How did I Achieve All this?🤔
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#i-used-github-education-pack-to-build-the-teachmebro-project"&gt;
  &lt;/a&gt;
  I Used ** &lt;a href="https://education.github.com/pack"&gt;Github Education Pack&lt;/a&gt; ** to build the TeachMeBro Project
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What is Github Education Pack ?&lt;/strong&gt; 👀&lt;/p&gt;

&lt;p&gt;Github Education Pack is the most significant set of free tools and services brought to you by &lt;strong&gt;GitHub&lt;/strong&gt; and its partners across the globe to the student at &lt;strong&gt;zero cost&lt;/strong&gt;. From &lt;strong&gt;coding boot camps&lt;/strong&gt;, &lt;strong&gt;logging service&lt;/strong&gt;, &lt;strong&gt;code checkers&lt;/strong&gt;, &lt;strong&gt;online IDEs&lt;/strong&gt;, &lt;strong&gt;mass email&lt;/strong&gt; service -- everything is available to students at no cost. Yes, you heard that right. Any student who is 13 or above years of age and enrolled in a school or college (institution) can get this. Sounds awesome right? Read on!&lt;/p&gt;

&lt;p&gt;You can get a free domain with &lt;strong&gt;SSL&lt;/strong&gt; enabled and host your &lt;code&gt;websites/apps&lt;/code&gt; on the servers provided by &lt;strong&gt;AWS&lt;/strong&gt;, &lt;strong&gt;Azure&lt;/strong&gt;, or &lt;strong&gt;DigitalOcean&lt;/strong&gt;. You can also launch your great application on the cloud using Bitnami. You can use Visual Studio from Microsoft for programming and host your servers using Windows Server.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-get-it"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to get it?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Age: You need to be at least 13 years of age.&lt;/li&gt;
&lt;li&gt;  Email address: College-issued email address to verify your academic status.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you don't have access to a college email address, you can still verify yourself as a student by uploading a picture of your college id card, report card, and issued a certificate.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-apply"&gt;
  &lt;/a&gt;
  How to apply 🚀
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt; Register for an account on &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; if not already registered.&lt;/li&gt;
&lt;li&gt; If you have already registered for an account previously just add your institution-issued email address in the &lt;a href="https://github.com/settings/emails"&gt;Email settings&lt;/a&gt; section of your account.&lt;/li&gt;
&lt;li&gt; Go to &lt;a href="https://education.github.com/pack"&gt;the Education Pack&lt;/a&gt; Section and log in with your GitHub account.&lt;/li&gt;
&lt;li&gt; Click on Get My pack and fill in all the details as required about your usage of GitHub and your school/college details&lt;/li&gt;
&lt;li&gt; Click on Submit My Application and wait for approval from the Github team. Approval duration is generally around 2-3 weeks.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#what-are-the-benefits-of-the-github-education-pack"&gt;
  &lt;/a&gt;
  What are the Benefits of the Github Education Pack? 🤑
&lt;/h4&gt;

&lt;p&gt;Github Education Pack provides a variety of benefits from its partnerships with software companies across the globe. The pack offers almost &lt;strong&gt;&amp;gt;$200k&lt;/strong&gt; worth of products and licenses for free to students. They are listed below:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;strong&gt;DataCamp:&lt;/strong&gt; learn from the world’s top data scientists&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MongoDB:&lt;/strong&gt;  $200 in MongoDB Atlas Credits, plus access to MongoDB Compass and MongoDB University including free certification.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Better Code Hub&lt;/strong&gt;: Online source code analysis service which allows you to check your code with 10 software development guidelines and get immediate reviews and required improvements&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Canva:&lt;/strong&gt; With Canva, anyone can create professional-looking graphics and designs. Featuring thousands of templates and an easy-to-use editor. Free for 1 year.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;ConfigCat:&lt;/strong&gt; A feature flag and configuration management service where you can push releases to users without deploying new code. It is best suited for alpha-beta testing or soft launches.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Cryptolens:&lt;/strong&gt; A cloud-based software licensing platform&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Gitpod:&lt;/strong&gt; It provides an automated and fast online IDE for GitHub&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Frontend Masters:&lt;/strong&gt; In-depth JavaScript, Node.js, and front-end engineering courses&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Educative:&lt;/strong&gt; Level up on trending coding skills at your own pace with interactive, text-based courses.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Icons8:&lt;/strong&gt; Design resources including icons, UI illustrations, photos, and more&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;LogDNA:&lt;/strong&gt; A log management platform having seamless integration with your platform and providing live monitoring and log tailing.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Name.com:&lt;/strong&gt; A domain name registrar and web host providing one free domain to students with Privacy Protection and SSL certificate&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Next.tech:&lt;/strong&gt; Browser-based computing environments having no annoying IDE setup or building from prerequisite software&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Phrase:&lt;/strong&gt; A cloud-based localization service for translation APIs and enabling localization in your apps&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;PushBots:&lt;/strong&gt; Scalable push notification system for mobile applications&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;SQL Smash:&lt;/strong&gt; A better productivity plugin for SQL Server Management Studio&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;.TECH:&lt;/strong&gt; It provides domains for your tech startup, business, event, community, or publication. Best suited for tech-based companies, providing them with a unique TLD suited for their purpose.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;One Month:&lt;/strong&gt; Learn HTML, CSS, JavaScript, and Python in just 30 days!&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Termius:&lt;/strong&gt; A cross-platform SSH client for desktop(Win, Linux, and macOS and mobile(iOS and Android).&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;TransloadIt&lt;/strong&gt;: A file uploading and processing service to convert files from any type to any required format, be it images, videos, audios or text/docs.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Bootstrap Studio:&lt;/strong&gt; A desktop app for creating responsive websites using the Bootstrap framework&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Microsoft Azure:&lt;/strong&gt; A set of cloud services by Microsoft to help you build, manage, and deploy applications by giving free credit to students to leverage the power of the cloud to run their development workloads&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;PomoDone:&lt;/strong&gt; A Pomodoro time-tracking application to eliminate distraction, sharpen focus, and prevent burnout during your work-intensive hours using the Pomodoro Technique.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;SymfonyCasts:&lt;/strong&gt; Symfony and PHP video tutorials and code challenges&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Algolia:&lt;/strong&gt; A hosted search API that provides support for front-end and back-end frameworks and libraries&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;AWS Educate Program:&lt;/strong&gt; A reliable, scalable, and inexpensive cloud computing service brought to you by Amazon Web Services plus free training, and collaboration resources&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Datadog:&lt;/strong&gt; cloud-based infrastructure monitoring&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;DigitalOcean:&lt;/strong&gt; Simple cloud hosting built for developers with virtual private servers starting from as low as $5/month.Also has support for Kubernetes clusters.&lt;/li&gt;
&lt;li&gt;  Flatiron School: Web coding Bootcamp for launching developers&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Heroku:&lt;/strong&gt; A flexible, easy-to-use platform to deploy, run, and manage your apps with one-click deployment options for any framework plus integration with famous repository hosting services.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;LambdaTest:&lt;/strong&gt; An automated, live, and interactive cross-browser testing on 2,000+ real browsers and operating systems&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Jetbrains:&lt;/strong&gt; Student Licenses of professional desktop IDEs such as IntelliJ IDEA, &lt;a href="https://hackr.io/blog/python-ide#Pycharm"&gt;PyCharm&lt;/a&gt;, and more.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Namecheap:&lt;/strong&gt; Affordable domain registration, hosting, and management&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Sendgrid:&lt;/strong&gt; The world's largest cloud-based email delivery platform to attach to your applications&lt;/li&gt;
&lt;li&gt; ** Stripe:** A web and mobile payment APIs, built for developers&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Thinkful:&lt;/strong&gt; courseware and mentoring to launch your career as a developer&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Travis CI:&lt;/strong&gt; a continuous integration platform for open source and private projects&lt;/li&gt;
&lt;li&gt;And Many More!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start your developer journey by exploring the pack here: &lt;a href="https://education.github.com/pack"&gt;https://education.github.com/pack&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-long-will-it-take-to-get-my-application-reviewed"&gt;
  &lt;/a&gt;
  How long will it take to get my application reviewed?
&lt;/h4&gt;

&lt;p&gt;The Github team manually reviews every request so that only genuine applicants get their packs. This process takes time, that's why it might be long before you get a response. If you have a college email which is already whitelisted by them, you can get it instantly.&lt;/p&gt;

&lt;p&gt;If you have queries regarding their process or problem redeeming any benefits, you can contact them on their support email.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub Education Pack Will give you everything you need to build a scalable application with the best standards.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-things-i-used-from-this-pack"&gt;
  &lt;/a&gt;
  What things I used From this pack ✨
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Heroku&lt;/strong&gt; - I used Heroku to host my application and the pack includes a Hobby Dyno which is enough to handle application load.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Godaddy:&lt;/strong&gt; I used Godaddy to purchase the &lt;code&gt;.com&lt;/code&gt; domain as in the pack no tool was offering a &lt;code&gt;.com&lt;/code&gt; domain and which is fine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;NameCheap&lt;/strong&gt; - provides free domain&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DataCamp&lt;/strong&gt; - to learn Shell Scripting and other courses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Canva&lt;/strong&gt; - I manage the Instagram page where I share tech posts, so for creating posts I used Canva&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bootstrap Studio&lt;/strong&gt; - I learned this tool but never used it as I prefer to code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And Other tools which provide learning content.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#how-i-applied-seo-to-the-website"&gt;
  &lt;/a&gt;
  How I Applied SEO to the Website 🔍
&lt;/h3&gt;

&lt;p&gt;Applying the best Search Engine Optimization (SEO) strategy was difficult with a lack of knowledge. I used the following sites and random searches on google to get things done.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://moz.com/learn/seo"&gt;Moz SEO Learning&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://learndigital.withgoogle.com/digitalgarage/course/digital-marketing"&gt;Digital Marketing Course By Google
&lt;/a&gt; - I didn't complete the whole course&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Free Tools I used for SEO Analysis:&lt;/strong&gt; 🔥&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.seoptimer.com/"&gt;SEO Optimizer&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://neilpatel.com/seo-analyzer/"&gt;Neil Patel&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://seositecheckup.com/"&gt;SEO Site Check&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LZPdx0RK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628307945973/CTvlVow6o.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZPdx0RK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628307945973/CTvlVow6o.jpeg" alt="teachmebro seo ranks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡TIP: I think the best way to learn and apply SEO skills is to use the above tools and see the SEO report and from there you will know exactly whats needs to be done to fix the SEO of your Website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#my-learnings"&gt;
  &lt;/a&gt;
  My Learnings 🧠
&lt;/h2&gt;

&lt;p&gt;Got Experienced in building &lt;em&gt;responsive websites&lt;/em&gt;, &lt;em&gt;Ranking web pages&lt;/em&gt;, &lt;em&gt;SEO&lt;/em&gt;, &lt;em&gt;Domain Ranking&lt;/em&gt;, &lt;em&gt;User Authentication&lt;/em&gt;, &lt;em&gt;Hosting the App with CI, CD process&lt;/em&gt;, &lt;em&gt;Monitoring the Web app&lt;/em&gt;, &lt;em&gt;Maintaining the App In Production&lt;/em&gt;, &lt;em&gt;used Google Analytics&lt;/em&gt;, &lt;em&gt;Adsense&lt;/em&gt;, &lt;em&gt;Disqus&lt;/em&gt; &amp;amp; I learned to &lt;em&gt;optimize static files&lt;/em&gt; for better user experience and also this project helped me to understand the core of &lt;em&gt;CMS&lt;/em&gt; (Content Management System) system. Libraries used &lt;strong&gt;CK-Editor&lt;/strong&gt;, &lt;strong&gt;Prism&lt;/strong&gt;, &lt;strong&gt;Data Tables&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Also, I trained Students on Web Fundamentals by giving Internships under the community which I formed during the lockdown 🔒. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways🏆
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can take up any project and target the skills you want to build/improve&lt;/li&gt;
&lt;li&gt;Googling is an Art. Asking the right set of questions will get you closer to what you want.&lt;/li&gt;
&lt;li&gt;You can learn anything you want to learn, just use the Internet wisely.&lt;/li&gt;
&lt;li&gt;Keep Learning and Keep Exploring.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thanks-to-github"&gt;
  &lt;/a&gt;
  Thanks to Github💯
&lt;/h2&gt;

&lt;p&gt;I would like to thanks Github for providing free access to the best developer tools in one place so we can learn by doing and get hands-on experience with real-world tools&lt;/p&gt;

&lt;p&gt;Github Education Pack helped me a lot in building the skills that I wanted to. And I hope with this blog you got aware of such opportunity. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>django</category>
    </item>
    <item>
      <title>5 FREE Illustration Resources</title>
      <author>Balaji</author>
      <pubDate>Sat, 07 Aug 2021 04:34:35 +0000</pubDate>
      <link>https://dev.to/babzbalaji/5-free-illustration-resources-56jl</link>
      <guid>https://dev.to/babzbalaji/5-free-illustration-resources-56jl</guid>
      <description>&lt;p&gt;I discover one new website it contains lot of resources for developers.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://www.tamizhtechie.com/NewsList/developerzone"&gt;https://www.tamizhtechie.com/NewsList/developerzone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please explore and get your free resources website today and share with your friends also.&lt;/p&gt;

&lt;p&gt;Thank you lot&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Why can't we solve accessibility with a one line script tag?</title>
      <author>Claire Lipskey</author>
      <pubDate>Sat, 07 Aug 2021 04:29:38 +0000</pubDate>
      <link>https://dev.to/clairebaire/why-can-t-we-solve-accessibility-with-a-one-line-script-tag-508f</link>
      <guid>https://dev.to/clairebaire/why-can-t-we-solve-accessibility-with-a-one-line-script-tag-508f</guid>
      <description>&lt;p&gt;This is a good question. There are some companies that'd like to beg to differ (such as AccessiBe, which is rubbish). This post is not for them. It's for you. They know what they're doing (and not doing).&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRYqhUu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1416615737318428674/mePgiQF-_normal.jpg" alt="claire profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        claire
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @tackjhompson
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      accessiBe? more like accessiWannaBe.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      02:33 AM - 01 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1421660430217490433" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1421660430217490433" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1421660430217490433" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#to-start-the-web-is-generally-accessible-by-default"&gt;
  &lt;/a&gt;
  To start: the web is (generally) accessible by default.
&lt;/h2&gt;

&lt;p&gt;We break it. Me, you, companies, capitalism, you name it - that's what breaks the web from being accessible.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags with an &lt;code&gt;onClick&lt;/code&gt; event when the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element is right there, modals that don't trap focus, and other examples are rampant throughout the Internet.&lt;/p&gt;

&lt;p&gt;Let's think about this from the angle of how your code is interpreted by the browser and accessibility software:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write some HTML.&lt;/li&gt;
&lt;li&gt;Load that HTML into a browser.&lt;/li&gt;
&lt;li&gt;The browser interprets that HTML, and creates an accessibility tree out of it (among rendering it, etc)&lt;/li&gt;
&lt;li&gt;The browser exposes an API that accessibility technology accesses, and a browser interprets the HTML as if it was written to &lt;em&gt;standards&lt;/em&gt;.

&lt;ul&gt;
&lt;li&gt;If this HTML is not up to spec, such as being used improperly (looking at a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an &lt;code&gt;onClick&lt;/code&gt; event, for example), the browser cannot infer what exactly that is for.&lt;/li&gt;
&lt;li&gt;This affects the accessibility technology, as it can only do with what the browser provides.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we use web technologies improperly, do we expect a browser to somehow perform heuristics to get what we mean? After all, programming is &lt;em&gt;literally&lt;/em&gt; telling a computer what to do in a language it understands. If we do not tell it what to do in a way it understands, it will &lt;em&gt;generally&lt;/em&gt; take the safest path.&lt;/p&gt;

&lt;p&gt;An example of this is correcting for when a closing HTML tag is missing. In older browser days, the standard allowed for certain tags to omit a closing tag and that was &lt;em&gt;valid&lt;/em&gt; HTML. That's not the case anymore (except for certain exceptions, like &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;!).&lt;/p&gt;

&lt;p&gt;Take this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;span&amp;gt;Hello!
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In any modern browser, the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; above will be automatically closed in the DOM if you inspect it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jv82ySa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3mpksmvclqrdb8dgfs0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jv82ySa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3mpksmvclqrdb8dgfs0.png" alt="Screenshot from Firefox's Inspector showing the DOM with a span that has a closing span tag, yet the source does not have that closing tag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the source above, there's not even an HTML tag, HEAD tag, or BODY tag, yet Firefox assumes it anyway. The browser can help us in many ways, but it cannot get our intent out of our badly formed code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sometimes-the-standards-arent-all-we-need"&gt;
  &lt;/a&gt;
  Sometimes, the standards aren't all we need
&lt;/h2&gt;

&lt;p&gt;In other instances, we can correctly use all HTML tags and still not make an accessible interface. This is where the nuance comes into play. For example, a modal. By definition, a modal is simply a dialog over top other elements. The user experience dictates that this is treated as a separate "document", and there's no standard way to do this. Modals in general break the way the web was created. A page is a "document", yet a modal is a "document within a document."&lt;/p&gt;

&lt;p&gt;If a document is to really behave like a document, then it must be the sole document "in focus." With modals, we generally add a "focus trap" to make sure that users cannot get out of it unwillingly. A bolt-on script will not know this is what you intended.&lt;/p&gt;

&lt;p&gt;There are some instances where we &lt;em&gt;need&lt;/em&gt; JavaScript in order to make the web accessible. Stephanie Eckles &lt;a href="https://www.smashingmagazine.com/2021/06/css-javascript-requirements-accessible-components/"&gt;wrote a really good Smashing Magazine article&lt;/a&gt; that expands on this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-someones-javascript-know-this-nuance"&gt;
  &lt;/a&gt;
  How does someone's JavaScript know this nuance?
&lt;/h2&gt;

&lt;p&gt;It doesn't. It can't. It won't. And users that need accessible interfaces and experts in the field have said &lt;a href="https://overlayfactsheet.com/"&gt;time&lt;/a&gt; and &lt;a href="https://nfb.org/about-us/press-room/national-convention-sponsorship-statement-regarding-accessibe"&gt;time&lt;/a&gt; &lt;a href="https://twitter.com/HabenGirma/status/1390051536819023873?s=20"&gt;again&lt;/a&gt; that &lt;a href="https://adrianroselli.com/2020/06/accessibe-will-get-you-sued.html"&gt;it&lt;/a&gt; &lt;a href="https://twitter.com/toddlibby/status/1421396502052839429?s=20"&gt;doesn't&lt;/a&gt; &lt;a href="https://www.nbcnews.com/tech/innovation/blind-people-advocates-slam-company-claiming-make-websites-ada-compliant-n1266720"&gt;work&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-resort-to-bolton-fixes"&gt;
  &lt;/a&gt;
  Don't resort to bolt-on fixes
&lt;/h2&gt;

&lt;p&gt;AccessiBe isn't the first company to do this, but it's making big promises and &lt;a href="https://adrianroselli.com/2020/06/accessibe-will-get-you-sued.html#Update06"&gt;being slimy in the process&lt;/a&gt;. There are &lt;a href="https://overlayfactsheet.com/#statement-from-sponsors-and-signatories-to-this-fact-sheet"&gt;others named&lt;/a&gt; in the Overlay Fact Sheet - they should all be avoided.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessibility is not a bolt-on.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
