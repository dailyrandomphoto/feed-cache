<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Data Engineer Roadmap 🗺</title>
      <author>Bobby Iliev</author>
      <pubDate>Tue, 19 Oct 2021 12:26:09 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/the-data-engineer-roadmap-4o30</link>
      <guid>https://dev.to/bobbyiliev/the-data-engineer-roadmap-4o30</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This has been inspired by the &lt;a href="https://dev.to/ender_minyard/full-stack-developer-s-roadmap-2k12"&gt;Full Stack Developer's Roadmap&lt;/a&gt; post written by &lt;a class="mentioned-user" href="https://dev.to/ender_minyard"&gt;@ender_minyard&lt;/a&gt;
 🙌&lt;/p&gt;

&lt;p&gt;With the ever growing data volumes and demands, the data engineering career has been one of the fastest growing jobs for the past few years.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href="https://insights.stackoverflow.com/survey/2021"&gt;2021 Stack Overflow survey&lt;/a&gt;, data engineers are one of the top 5 highest paid professionals right after SREs and DevOps engineers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vOSRzFgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/svaZqLl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOSRzFgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/svaZqLl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are looking to become a data engineer, here are some resources for data engineering that you can save for later.&lt;/p&gt;

&lt;p&gt;Table Of Contents&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;💻 Fundamentals&lt;/li&gt;
&lt;li&gt;👩‍💻 Programming basics&lt;/li&gt;
&lt;li&gt;🧪 Testing&lt;/li&gt;
&lt;li&gt;📊 Database Fundamentals&lt;/li&gt;
&lt;li&gt;🏠 Data warehouses&lt;/li&gt;
&lt;li&gt;📦 Object storage&lt;/li&gt;
&lt;li&gt;⚡ Data processing&lt;/li&gt;
&lt;li&gt;📩 Messaging&lt;/li&gt;
&lt;li&gt;💽 Cluster computing&lt;/li&gt;
&lt;li&gt;⏲ Workflow Scheduling&lt;/li&gt;
&lt;li&gt;📺 Monitoring data pipelines&lt;/li&gt;
&lt;li&gt;👨‍💻 Infrastructure as Code&lt;/li&gt;
&lt;li&gt;🛫 CI/CD&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#fundamentals"&gt;
  &lt;/a&gt;
  💻 Fundamentals
&lt;/h1&gt;

&lt;p&gt;Having a solid understanding of the Linux operating system could be a must in many IT related roles. You are going to benefit a lot if you know the basics of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href=""&gt;Basic Terminal Usage&lt;/a&gt;&lt;a href="https://devdojo.com/course/linux-command-line-basics"&gt;https://devdojo.com/course/linux-command-line-basics&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ur9lAPcbMhs&amp;amp;list=PLY7SzAmnEqp78tsHh1kK0gOx_f-uwQZAT"&gt;Shell Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UpdhourKi3c&amp;amp;list=PLY7SzAmnEqp7P6KHmBKBVNIjZkXMKh_fn"&gt;Git and GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-networking-terminology-interfaces-and-protocols"&gt;Networking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#programming-basics"&gt;
  &lt;/a&gt;
  👩‍💻 Programming basics
&lt;/h1&gt;

&lt;p&gt;As with any IT related role it is essential to have fundamental knowledge of programming in general. The programming language itself does not matter that much, but you need to have good understanding of programming paradigms and best practices. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7WiJGTPuVeU"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorial_series/how-to-code-in-go"&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3bVIFVpGPvc&amp;amp;list=PL_UnIDIwT95Oq0ZwgZ1MCkKH2mvsJ11pW&amp;amp;ab_channel=devdojo"&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  🧪 Testing
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=flpmSXVTqBI&amp;amp;ab_channel=freeCodeCamp.org"&gt;Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Functional testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#database-fundamentals"&gt;
  &lt;/a&gt;
  📊 Database Fundamentals
&lt;/h1&gt;

&lt;p&gt;Having a solid understanding of SQL, data normalization and ACID transactions is a must for all data engineers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;SQL basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ibm.com/cloud/blog/olap-vs-oltp"&gt;OLTP vs OLAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/11707879/difference-between-scaling-horizontally-and-vertically-for-databases"&gt;Horizontal vs vertical scaling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#relational-databases"&gt;
  &lt;/a&gt;
  Relational Databases
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/a-basic-mysql-tutorial"&gt;MySQL / MariaDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04"&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nonrelational-databases"&gt;
  &lt;/a&gt;
  Non-relational databases
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Document: &lt;a href="https://devdojo.com/bo-iliev/introduction-to-mongodb-and-how-to-use-it"&gt;MongoDB&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-elasticsearch-on-ubuntu-18-04"&gt;Elasticsearch&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Wide column: &lt;a href="https://cassandra.apache.org/_/index.html"&gt;Apache Cassandra&lt;/a&gt;, &lt;a href="https://hbase.apache.org/"&gt;Apache HBase&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Graph: &lt;a href="https://neo4j.com/"&gt;Neo4j&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Key-value: &lt;a href="https://www.digitalocean.com/community/books/how-to-manage-a-redis-database-ebook"&gt;Redis&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-memcached-on-ubuntu-20-04"&gt;Memcached&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#data-warehouses"&gt;
  &lt;/a&gt;
  🏠 Data warehouses
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.snowflake.com/"&gt;Snowflake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prestodb.io/"&gt;Presto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hive.apache.org/"&gt;Apache Hive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#object-storage"&gt;
  &lt;/a&gt;
  📦 Object storage
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/s3/"&gt;AWS S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/products/spaces/"&gt;DigitalOcean Spaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/storage"&gt;Google Cloud Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#data-processing"&gt;
  &lt;/a&gt;
  ⚡ Data processing
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#batch"&gt;
  &lt;/a&gt;
  Batch
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pig.apache.org/"&gt;Apache pig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arrow.apache.org/"&gt;Apache Arrow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hybrid"&gt;
  &lt;/a&gt;
  Hybrid
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spark.apache.org/"&gt;Apache Spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beam.apache.org/"&gt;Apache Beam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#streaming"&gt;
  &lt;/a&gt;
  Streaming
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt; - The Streaming Database for Real-time Analytics&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://storm.apache.org/"&gt;Apache Storm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#messaging"&gt;
  &lt;/a&gt;
  📩 Messaging
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://activemq.apache.org/"&gt;Apache ActiveMQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#cluster-computing"&gt;
  &lt;/a&gt;
  💽 Cluster computing
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://hadoop.apache.org/"&gt;Apache Hadoop&lt;/a&gt; and &lt;a href="https://hadoop.apache.org/docs/r1.2.1/hdfs_design.html"&gt;HDFS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ibm.com/topics/mapreduce"&gt;MapReduce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#%E2%8F%B2-workflow-scheduling"&gt;
  &lt;/a&gt;
  ⏲ Workflow Scheduling
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://airflow.apache.org/"&gt;Apache Airflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oozie.apache.org/"&gt;Apache Oozie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#monitoring-data-pipelines"&gt;
  &lt;/a&gt;
  📺 Monitoring data pipelines
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-prometheus-on-ubuntu-16-04"&gt;Prometheus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.datadoghq.com/"&gt;Datadog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#infrastructure-as-code"&gt;
  &lt;/a&gt;
  👨‍💻 Infrastructure as Code
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Containers: &lt;a href="https://devdojo.com/bobbyiliev/the-missing-docker-crash-course-for-developers"&gt;Docker&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Orchestration: &lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-kubernetes"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-cluster-of-docker-containers-with-docker-swarm-and-digitalocean-on-ubuntu-16-04"&gt;Docker Swarm&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Provisioning: &lt;a href="https://www.digitalocean.com/community/tutorial_series/how-to-manage-infrastructure-with-terraform"&gt;Terraform&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Automation: &lt;a href="https://www.digitalocean.com/community/books/how-to-manage-remote-servers-with-ansible-ebook"&gt;Ansible&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#cicd"&gt;
  &lt;/a&gt;
  🛫 CI/CD
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04"&gt;Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This was inspired by the Data Engineer Roadmap open source repository here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/datastacktv/data-engineer-roadmap"&gt;https://github.com/datastacktv/data-engineer-roadmap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cnXIakxd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/datastacktv/data-engineer-roadmap/raw/master/img/roadmap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cnXIakxd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/datastacktv/data-engineer-roadmap/raw/master/img/roadmap.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to build upon the roadmap and provide a list of resources for each topic.&lt;/p&gt;

&lt;p&gt;Let me know if I've missed anything! Hope you find this useful and make sure to keep learning 🙌&lt;/p&gt;

&lt;p&gt;You can follow me on Twitter at: &lt;a href="https://twitter.com/bobbyiliev_"&gt;@bobbyiliev_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>programming</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>The Only Bash Scripting Cheat Sheet That You Will Ever Need</title>
      <author>Bobby Iliev</author>
      <pubDate>Tue, 19 Oct 2021 12:17:52 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/the-only-bash-scripting-cheat-sheet-that-you-will-ever-need-55c7</link>
      <guid>https://dev.to/bobbyiliev/the-only-bash-scripting-cheat-sheet-that-you-will-ever-need-55c7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;No matter if you are a DevOps/SysOps engineer, developer, or just a Linux enthusiast, you can use Bash scripts to combine different Linux commands and automate boring and repetitive daily tasks, so that you can focus on more productive and fun things.&lt;/p&gt;

&lt;p&gt;Here you can find the completed Bash Scripting cheat sheet 👇&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bash-script-header-shebang"&gt;
  &lt;/a&gt;
  Bash Script Header (Shebang)
&lt;/h1&gt;

&lt;p&gt;Option 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Option 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash
name="DevDojo"
echo "Hi there $name"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#user-input"&gt;
  &lt;/a&gt;
  User Input
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

echo "What is your name?"
read name

echo "Hi there $name"
echo "Welcome to DevDojo!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h1&gt;

&lt;p&gt;To do that in bash you need to add the # symbol at the beginning of the line. Comments will never be rendered on the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# This is a comment and will not be rendered on the screen
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#arguments"&gt;
  &lt;/a&gt;
  Arguments
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

echo "Argument one is $1"
echo "Argument two is $2"
echo "Argument three is $3"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the file and pass 3 arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bash ./arguments.sh dog cat bird
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my_array=("value 1" "value 2" "value 3" "value 4")

# Access a single element, this would output: value 2
echo ${my_array[1]}

# This would return the last element: value 4
echo ${my_array[-1]}

# This would output the total number of elements in the array, in our case it is 4:
echo ${my_array[@]}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conditional-expressions"&gt;
  &lt;/a&gt;
  Conditional Expressions
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#file-expressions"&gt;
  &lt;/a&gt;
  File expressions
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## True if file exists.
[[ -a ${file} ]]

## True if file exists and is a block special file.
[[ -b ${file} ]]

## True if file exists and is a character special file.
[[ -c ${file} ]]

## True if file exists and is a directory.
[[ -d ${file} ]]

## True if file exists.
[[ -e ${file} ]]

## True if file exists and is a regular file.
[[ -f ${file} ]]

## True if file exists and is a symbolic link.
[[ -h ${file} ]]

## True if file exists and is readable.
[[ -r ${file} ]]

## True if file exists and has a size greater than zero.
[[ -s ${file} ]]

## True if file exists and is writable.
[[ -w ${file} ]]

## True if file exists and is executable.
[[ -x ${file} ]]

## True if file exists and is a symbolic link.
[[ -L ${file} ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#string-expressions"&gt;
  &lt;/a&gt;
  String expressions
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# True if the shell variable varname is set (has been assigned a value).
[[ -v ${varname} ]]

# True if the length of the string is zero.
[[ -z ${string} ]]

# True if the length of the string is non-zero.
[[ -n ${string} ]]

# True if the strings are equal. = should be used with the test command for POSIX conformance. When used with the [[ command, this performs pattern matching as described above (Compound Commands)
[[ ${string1} == ${string2} ]]

# True if the strings are not equal.
[[ ${string1} != ${string2} ]]

# True if string1 sorts before string2 lexicographically.
[[ ${string1} &amp;lt; ${string2} ]]

# True if string1 sorts after string2 lexicographically.
[[ ${string1} &amp;gt; ${string2} ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arithmetic-operators"&gt;
  &lt;/a&gt;
  Arithmetic operators
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Returns true if the numbers are equal
[[ ${arg1} -eq ${arg2} ]]

# Returns true if the numbers are not equal
[[ ${arg1} -ne ${arg2} ]]

# Returns true if arg1 is less than arg2
[[ ${arg1} -lt ${arg2} ]]

# Returns true if arg1 is less than or equal arg2
[[ ${arg1} -le ${arg2} ]]

# Returns true if arg1 is greater than arg2
[[ ${arg1} -gt ${arg2} ]]

# Returns true if arg1 is greater than or equal arg2
[[ ${arg1} -ge ${arg2} ]]

# As with other programming languages you can use AND &amp;amp; OR conditions:
[[ test_case_1 ]] &amp;amp;&amp;amp; [[ test_case_2 ]] # And
[[ test_case_1 ]] || [[ test_case_2 ]] # Or
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conditionals"&gt;
  &lt;/a&gt;
  Conditionals
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

# Bash if statement example

read -p "What is your name? " name

if [[ -z ${name} ]]
then
    echo "Please enter your name!"
else
    echo "Hi there ${name}"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#for-loops"&gt;
  &lt;/a&gt;
  For loops
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

users="devdojo, bobby, tony"

for user in ${users}
do
    echo "${user}"
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#while-loops"&gt;
  &lt;/a&gt;
  While loops
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

counter=1
while [[ $counter -le 10 ]]
do
    echo $counter
    ((counter++))
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#until-loops"&gt;
  &lt;/a&gt;
  Until Loops
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

count=1
until [ $count -gt 10 ]
do
    echo $count
    ((count++))
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function function_name() {
    your_commands
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

function hello(){
    echo "Hello World Function!"
}

hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;For a more in-depth explanations check out this online guide here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/guide/bash/bash-conditional-expressions"&gt;Bash Scripting Hands-on Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about Bash Scripting check out this free eBook here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-bash-scripting"&gt;💡 Introduction to Bash Scripting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you prefer video content, you could take a look at this mini video crash course here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLY7SzAmnEqp78tsHh1kK0gOx_f-uwQZAT"&gt;Introduction to Bash Scripting Mini Video Crash Course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can follow me on Twitter at: &lt;a href="https://twitter.com/bobbyiliev_"&gt;@bobbyiliev_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>100daysofcode</category>
      <category>devops</category>
    </item>
    <item>
      <title>Day 11 of 100 Days of Code &amp; Scrum: Coding, Writing, and Physical Therapy</title>
      <author>Rammina</author>
      <pubDate>Tue, 19 Oct 2021 12:12:43 +0000</pubDate>
      <link>https://dev.to/rammina/day-11-of-100-days-of-code-scrum-coding-writing-and-physical-therapy-51o2</link>
      <guid>https://dev.to/rammina/day-11-of-100-days-of-code-scrum-coding-writing-and-physical-therapy-51o2</guid>
      <description>&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@bruno_nascimento?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Bruno Nascimento&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/exercise?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Greetings, everyone!&lt;/p&gt;

&lt;p&gt;It's Tuesday, and it's unfortunate that I won't be able to be as productive today because of my weekly physical therapy session. That said, I shall try my best to fulfill the minimum requirements of the challenge!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I finished the draft of the introduction of my Scrum Guide for beginners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;wrote about how the members of a Scrum Team function individually as well as their interactions with the others (still missing the Scrum Master section).&lt;/li&gt;
&lt;li&gt;read about traits that make an individual suitable for each role in a Scrum Team.&lt;/li&gt;
&lt;li&gt;looked into how businesses misuse Agile and Scrum in their operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;review concepts I've learned last week.&lt;/li&gt;
&lt;li&gt;look deeper into how GraphQL differs from REST API, and which scenarios one should be used over the other.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U064q701--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fb9iv4qjptfw1wgg8sp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U064q701--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fb9iv4qjptfw1wgg8sp.jpg" alt="difficult roads lead to beautiful destinations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@helloimnik?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Hello I'm Nik&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Have a good day everyone! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.howtographql.com/"&gt;The Fullstack Tutorial for GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.apollographql.com/docs/"&gt;Apollo Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/chingu/a-short-introduction-to-the-scrum-methodology-7a23431b9f17"&gt;A Short Introduction to the Scrum Framework by Jim Medlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Getting started with Appwrite's Apple SDK and UIKit</title>
      <author>Jake Barnby</author>
      <pubDate>Tue, 19 Oct 2021 12:10:29 +0000</pubDate>
      <link>https://dev.to/appwrite/getting-started-with-appwrites-apple-sdk-and-uikit-4bjd</link>
      <guid>https://dev.to/appwrite/getting-started-with-appwrites-apple-sdk-and-uikit-4bjd</guid>
      <description>&lt;p&gt;One of the major highlights of Appwrite 0.11 is the official support for iOS, macOS, tvOS and watchOS. We've also released a brand-new Apple SDK to go alongside it! 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YGblQZNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5gk906j5ngsah46w3px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGblQZNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5gk906j5ngsah46w3px.png" alt="Appwrite &amp;amp; Swift"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll learn to set up Appwrite's Apple SDK, interact with Appwrite's Accounts API and also learn to set up OAuth Logins in your App. Let's get started!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We'll use UIKit in this tutorial, if you're using &lt;a href="https://developer.apple.com/xcode/swiftui/"&gt;SwiftUI&lt;/a&gt;, check out &lt;a href="https://dev.to/appwrite/getting-started-with-appwrites-apple-sdk-and-swiftui-131h"&gt;this tutorial&lt;/a&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  📝 Prerequisites
&lt;/h2&gt;

&lt;p&gt;At this stage, we assume that you already have an Appwrite instance up and running. If you do not have Appwrite setup yet, you can follow the super easy installation &lt;strong&gt;step&lt;/strong&gt; over at &lt;a href="https://appwrite.io/docs/installation"&gt;appwrite.io&lt;/a&gt;. It's not a typo. There really is only 1 step!&lt;/p&gt;

&lt;p&gt;You should have also set up an OAuth provider with Appwrite to be able to follow the OAuth section of this tutorial. You can learn to set up OAuth providers in Appwrite with &lt;a href="https://dev.to/appwrite/30daysofappwrite-oauth-providers-3jf6"&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-app-project"&gt;
  &lt;/a&gt;
  🛠️ Create a new App Project
&lt;/h2&gt;

&lt;p&gt;Create a new &lt;strong&gt;iOS &amp;gt; App&lt;/strong&gt; in Xcode, selecting &lt;strong&gt;Storyboard&lt;/strong&gt; for &lt;strong&gt;Interface&lt;/strong&gt; and &lt;strong&gt;UIKit App Delegate&lt;/strong&gt; for &lt;strong&gt;Life Cycle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fvATk18R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms8klbqnyhfsxqrqbp8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fvATk18R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms8klbqnyhfsxqrqbp8a.png" alt="Create Project"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;With the app created, now is also a good time to add our iOS, macOS, watchOS or tvOS app as a platform in the Appwrite Console. Head over to your project file and find your &lt;strong&gt;Bundle Identifier&lt;/strong&gt;. It should look something like &lt;code&gt;io.appwrite.Appwrite-iOS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In your Appwrite console, click on &lt;strong&gt;Add Platform&lt;/strong&gt; and select a &lt;strong&gt;New Apple App&lt;/strong&gt;, then one of the iOS, macOS, watchOS or tvOS tabs. Give your app a name, add the bundle identifier and click &lt;strong&gt;Register&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once this is complete, it's time to head back to our Xcode project add our dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-appwrites-apple-sdk"&gt;
  &lt;/a&gt;
  👷 Setup Appwrite's Apple SDK
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#using-xcode"&gt;
  &lt;/a&gt;
  Using Xcode
&lt;/h3&gt;

&lt;p&gt;The Appwrite Apple SDK is available via Swift Package Manager. In order to use the Appwrite Apple SDK from &lt;strong&gt;Xcode&lt;/strong&gt;, select File &amp;gt; Swift Packages &amp;gt; &lt;strong&gt;Add Package Dependency&lt;/strong&gt;. In the dialog that appears, enter the Appwrite Apple SDK &lt;a href="https://github.com/appwrite/sdk-for-apple"&gt;package URL&lt;/a&gt; and click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the repository information is loaded, add your version rules and click &lt;strong&gt;Next&lt;/strong&gt; again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q4KeCU-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ymhv1va2x99ithkpxxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4KeCU-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ymhv1va2x99ithkpxxb.png" alt="Set Package Version"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the final screen, make sure &lt;code&gt;Appwrite&lt;/code&gt; is selected to add to your target as a library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D5klm8I1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plu4hizc1o3bxd1p5j16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5klm8I1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plu4hizc1o3bxd1p5j16.png" alt="Link To Target"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-swift-package-manager"&gt;
  &lt;/a&gt;
  Using Swift Package Manager
&lt;/h3&gt;

&lt;p&gt;Add the package to your &lt;code&gt;Package.swift&lt;/code&gt; dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;    &lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/appwrite/sdk-for-apple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add it to your target:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;    &lt;span class="nv"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"[YourAppTarget]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Appwrite"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sdk-for-apple"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build your project and if there are no errors, we're ready to proceed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-viewcontroller"&gt;
  &lt;/a&gt;
  🏗️ Create the ViewController
&lt;/h2&gt;

&lt;p&gt;Create a new file &lt;code&gt;ViewController.swift&lt;/code&gt; and add the following. This defines our controller for our storyboard and sets up our button click listeners that will call the &lt;code&gt;ViewModel&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Appwrite&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;NIO&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;UIKit&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;@IBOutlet&lt;/span&gt; &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITextView&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="kd"&gt;@IBOutlet&lt;/span&gt; &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="kd"&gt;@IBOutlet&lt;/span&gt; &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;loginButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="kd"&gt;@IBOutlet&lt;/span&gt; &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;logOutButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="kd"&gt;@IBOutlet&lt;/span&gt; &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;getUserButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="kd"&gt;@IBOutlet&lt;/span&gt; &lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;loginWithFacebook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://localhost/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"613b18dabf74a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setSelfSigned&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;lazy&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;picker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ImagePicker&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;

    &lt;span class="kd"&gt;required&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;?(&lt;/span&gt;&lt;span class="nv"&gt;coder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSCoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;coder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"tester@appwrite.io"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"tester@appwrite.io"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;session&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;loginWithFacebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// To be added later.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;logOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deleteSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sessionId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"current"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;success&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;describing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our ViewController has 4 state functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;register - click handler for the Signup Button&lt;/li&gt;
&lt;li&gt;login - click handler for the Login Button&lt;/li&gt;
&lt;li&gt;logout - click handler for the Logout Button&lt;/li&gt;
&lt;li&gt;getUser - click handler for the Get User Button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should now be able to run your app and create users, login, logout and get information about the currently logged-in user!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-oauth-support"&gt;
  &lt;/a&gt;
  🔐 Adding OAuth Support
&lt;/h2&gt;

&lt;p&gt;You would have noticed that we have a &lt;strong&gt;Login With Facebook&lt;/strong&gt; button in our UI, but it doesn't do anything yet; let's now add Facebook OAuth to our app!&lt;/p&gt;

&lt;p&gt;The first step is to add a callback URL scheme to our &lt;code&gt;Info.plist&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLTypes&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleTypeRole&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Editor&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLName&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;io.appwrite&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLSchemes&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;appwrite-callback-[PROJECT-ID]&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you replace the Project ID in &lt;code&gt;appwrite-callback-[PROJECT-ID]&lt;/code&gt; with your own.&lt;/p&gt;

&lt;p&gt;Next we need to add a hook to save cookies when our app is opened by its callback URL. To do this, add the following function to your &lt;code&gt;SceneDelegate.swift&lt;/code&gt;. If you have already defined this function, you can just add the contents below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIScene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;openURLContexts&lt;/span&gt; &lt;span class="kt"&gt;URLContexts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;UIOpenURLContext&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;URLContexts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;absoluteString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"appwrite-callback"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kt"&gt;WebAuthComponent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;handleIncomingCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last step is to invoke the SDK function &lt;code&gt;createOAuth2Session&lt;/code&gt; from &lt;code&gt;AccountViewController.swift&lt;/code&gt; from our existing button's action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;loginWithFacebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createOAuth2Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"facebook"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"https://demo.appwrite.io/auth/oauth2/success"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"https://demo.appwrite.io/auth/oauth2/failure"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
                &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

                &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Re-run your app and you should now be able to trigger your Facebook OAuth Flow! With that, you now know how to interact with Appwrite's Accounts API in your iOS, macOS, tvOS and watchOS apps!&lt;/p&gt;

&lt;p&gt;We've built a complete app that interacts with all of Appwrite's APIs, which you can find over at our &lt;a href="https://github.com/appwrite/playground-for-apple-uikit"&gt;Github Repo&lt;/a&gt;. If you'd like to learn more about Appwrite or how Appwrite works under the hood, we've just curated all the resources for you during &lt;a href="https://30days.appwrite.io/"&gt;30 Days of Appwrite&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-credits"&gt;
  &lt;/a&gt;
  ✨️ Credits
&lt;/h2&gt;

&lt;p&gt;Hope you enjoyed this article! We love contributions and encourage you to take a look at our &lt;a href="https://github.com/appwrite/appwrite/issues"&gt;open issues&lt;/a&gt; and &lt;a href="https://github.com/appwrite/rfc/pulls"&gt;ongoing RFCs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you get stuck anywhere, feel free to reach out to us on our &lt;a href="https://appwrite.io/discord"&gt;friendly support channels&lt;/a&gt; run by humans 👩‍💻.&lt;/p&gt;

&lt;p&gt;Here are some handy links for more information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite/blob/master/CONTRIBUTING.md"&gt;Appwrite Contribution Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ios</category>
      <category>swift</category>
      <category>tutorial</category>
      <category>news</category>
    </item>
    <item>
      <title>Business logic in Rails with operators</title>
      <author>Petr Hlavicka</author>
      <pubDate>Tue, 19 Oct 2021 11:43:17 +0000</pubDate>
      <link>https://dev.to/citronak/business-logic-in-rails-with-operators-3hnl</link>
      <guid>https://dev.to/citronak/business-logic-in-rails-with-operators-3hnl</guid>
      <description>&lt;p&gt;Having a thousand lines long controllers and/or models is not the right way to have sustainable applications or developers' sanity. Let's look at my solution for business logic in the Rails app. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Spoiler alert: yes, I will use PORO... &lt;a href="https://petr.codes/blog/rails/fun-with-enums-and-poro/"&gt;again&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;Why should you not have such long controllers/models (or even views)? There are a lot of reasons. From worse sustainability, readability, to worse testability. But mainly, they all affect &lt;a href="https://cult.honeypot.io/developer-happiness-index"&gt;the developer's happiness&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I can gladly recommend &lt;a href="https://sustainable-rails.com/"&gt;Sustainable Web Development with Ruby on Rails&lt;/a&gt; from &lt;a href="https://twitter.com/davetron5000"&gt;David Bryant Copeland&lt;/a&gt; where he did a great job explaining it all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-did-i-want-from-the-solution"&gt;
  &lt;/a&gt;
  What did I want from the solution?
&lt;/h2&gt;

&lt;p&gt;I can’t say I was not influenced by other solutions. For example, I used &lt;a href="https://trailblazer.to/"&gt;Trailblazer&lt;/a&gt; before. But none of what I read about or used was the one I would like.&lt;/p&gt;

&lt;p&gt;When I read a solution from &lt;a href="https://nts.strzibny.name/business-logic-in-rails-with-contexts/"&gt;Josef Strzibny&lt;/a&gt;, I realized that I should write down my approach to get some feedback.&lt;/p&gt;

&lt;p&gt;Here is what I wanted to achieve:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;nothing complex&lt;/li&gt;
&lt;li&gt;naming easy as possible&lt;/li&gt;
&lt;li&gt;simple file structure&lt;/li&gt;
&lt;li&gt;OOP and its benefits (even for results)&lt;/li&gt;
&lt;li&gt;easy testability&lt;/li&gt;
&lt;li&gt;in general - as few later decisions as possible&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;I will demonstrate the solution on a simple &lt;code&gt;Invoice&lt;/code&gt; model with a corresponding &lt;code&gt;InvoicesController&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#naming-and-structure"&gt;
  &lt;/a&gt;
  Naming and structure
&lt;/h3&gt;

&lt;p&gt;The first thing is the naming and the corresponding file structure. I chose the &lt;code&gt;Operator&lt;/code&gt; suffix. In our case, it will be &lt;code&gt;InvoiceOperator&lt;/code&gt; inside the &lt;code&gt;app/operators&lt;/code&gt; folder. &lt;/p&gt;

&lt;p&gt;The suffix makes everything easier - the developer will always know what to use for any model, it is just a simple &lt;code&gt;&amp;lt;ModelName&amp;gt;Operator&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Naming is hard, especially for non-native speakers. If you find a better name, let me know!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, we have the class name, but what about its methods? It will be, mainly but not only, used in controllers. As Rails controllers are already breaking the Single File Responsibility principle, I will not hesitate to continue with that to have things easier.&lt;/p&gt;

&lt;p&gt;To make it even easier, let's use the classic RESTful names for methods. For the &lt;code&gt;create&lt;/code&gt; action in the controller, it will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/operators/invoice_operator.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoiceOperator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/invoices_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoicesController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;InvoiceOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;invoice_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, every model will have its operator and in every operator, we will know what methods should be used in each action. Everything is easily predictable in most cases.&lt;/p&gt;

&lt;p&gt;Except... the &lt;code&gt;new&lt;/code&gt; action in a controller. Having &lt;code&gt;InvoiceOperator.new.new&lt;/code&gt; does not look cool to me. Luckily for most cases, we don't need it and we can use the simple &lt;code&gt;Invoice.new&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we will need to apply complex logic (and thus use the operator), we can use a &lt;code&gt;prepare&lt;/code&gt; method instead of the &lt;code&gt;new&lt;/code&gt;. It is not perfect to the previous statement, but the naming makes sense to me.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#result-object"&gt;
  &lt;/a&gt;
  Result object
&lt;/h3&gt;

&lt;p&gt;Using the result object is a common strategy. The base concept is the same for every operator, so we won’t repeat it in every operator. Let's create a &lt;code&gt;BaseOperator&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;This will also help us not to think about the name of the method with our object (in our case the invoice). It will always be the &lt;code&gt;result.record&lt;/code&gt; and not eg. &lt;code&gt;result.invoice&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/operators/base_operator.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseOperator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;new_record&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_record&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;NotImplementedError&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;
    &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:meta&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
      &lt;span class="vi"&gt;@record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;
      &lt;span class="vi"&gt;@meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;success?&lt;/span&gt;
      &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="vi"&gt;@state&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And use it for our &lt;code&gt;InvoiceOperator&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/operators/invoice_operator.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoiceOperator&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;BaseOperator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="vi"&gt;@record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;assign_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# do your business&lt;/span&gt;

    &lt;span class="no"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;state: &lt;/span&gt;&lt;span class="vi"&gt;@record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="vi"&gt;@record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="vi"&gt;@record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;assign_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# do your business&lt;/span&gt;

    &lt;span class="no"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;state: &lt;/span&gt;&lt;span class="vi"&gt;@record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="vi"&gt;@record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_record&lt;/span&gt;
    &lt;span class="no"&gt;Invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;BaseOperator&lt;/code&gt; also introduced the &lt;code&gt;initialize&lt;/code&gt; method. That will help us to use the operator in two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with a new record: eg. &lt;code&gt;InvoiceOperator.new.create(params: invoice_params)&lt;/code&gt; where it will use &lt;code&gt;Invoice.new&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;with the existing record: eg. &lt;code&gt;InvoiceOperator.new(record: Invoice.find(params[:id])).update(params: invoice_params)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;Result&lt;/code&gt; object uses a &lt;code&gt;state&lt;/code&gt; variable. I like this way more than using two objects (one for success and one for failure). It is also much simpler for testing. &lt;/p&gt;

&lt;p&gt;The private method &lt;code&gt;new_record&lt;/code&gt; can be also used for setting the right "blank" object (eg. with some defaults). &lt;/p&gt;

&lt;p&gt;And now, the example usage in the controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/invoices_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoicesController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;InvoiceOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;invoice_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success?&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Created!"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;invoice: &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;status: :unprocessable_entity&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;InvoiceOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="no"&gt;Invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;invoice_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success?&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Updated!"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;invoice: &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;status: :unprocessable_entity&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#custom-actions-in-controllers"&gt;
  &lt;/a&gt;
  Custom actions in controllers
&lt;/h3&gt;

&lt;p&gt;If you are using custom actions in controllers, you can continue to have the same method name in the operator.&lt;/p&gt;

&lt;p&gt;If you don't and you are using only RESTful actions, you can end up with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Invoices&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DuplicatesController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
      &lt;span class="n"&gt;original_invoice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;InvoiceOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="n"&gt;original_invoice&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;duplicate&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success?&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Duplicated!"&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;redirect_back&lt;/span&gt; &lt;span class="ss"&gt;fallback_location: &lt;/span&gt;&lt;span class="n"&gt;original_invoice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;allow_other_host: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the action &lt;code&gt;create&lt;/code&gt; does not correspond with the operator's &lt;code&gt;duplicate&lt;/code&gt; method, but at least, the controller name is related to it. That should help with a decision on what name should be used.&lt;/p&gt;

&lt;p&gt;Other possible solution could be to use a new operator (eg. &lt;code&gt;InvoiceDuplicateOperator&lt;/code&gt;) that would inherit from &lt;code&gt;InvoiceOperator&lt;/code&gt; and has the right &lt;code&gt;create&lt;/code&gt; action.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;I mentioned testing several times. Here is a simplified example for testing the operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/operators/invoice_operator_spec.rb&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;InvoiceOperator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :operator&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:invoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:company&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:company&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;described_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"create"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s2"&gt;"company_id"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"date_from"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"2021-01-01"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"date_to"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"2021-01-31"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"due_at"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"2021-01-16"&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"creates a record"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_success&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;persisted?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_truthy&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"update"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:invoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:invoice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;paid_at: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s2"&gt;"paid_at"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"2021-01-18"&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"updates a record"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_success&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;paid_at&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;not_to&lt;/span&gt; &lt;span class="n"&gt;be_nil&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is a simplified spec for the &lt;code&gt;create&lt;/code&gt; action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/requests/invoices_spec.rb&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"Invoices"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;signed_in: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:current_user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:invoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:invoice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;date_from: &lt;/span&gt;&lt;span class="s2"&gt;"2021-01-01"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;date_to: &lt;/span&gt;&lt;span class="s2"&gt;"2021-01-31"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"create"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;InvoiceOperator&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive_message_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"BaseOperator::Result"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;success?: &lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;record: &lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;invoices_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;invoice: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="s2"&gt;"Just Invoice"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;"with successful result"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_http_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:found&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;"without successful result"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_http_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:unprocessable_entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This solution was not battle-tested in a large Rails application for a long period of time. But I think it is a simple, readable, predictable and extendable solution. &lt;/p&gt;

&lt;p&gt;It solved a lot of what I wanted from it. I am already using it in one application and I, obviously, like it.&lt;/p&gt;

&lt;p&gt;I would really welcome any feedback and I hope we can together find an even better solution.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>logic</category>
      <category>poro</category>
    </item>
    <item>
      <title>JavaScript Let - How to declare block-scoped values?</title>
      <author>hrishikesh1990</author>
      <pubDate>Tue, 19 Oct 2021 11:32:00 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/javascript-let-how-to-declare-block-scoped-values-2inc</link>
      <guid>https://dev.to/hrishikesh1990/javascript-let-how-to-declare-block-scoped-values-2inc</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how to declare block-scoped values using JavaScript let. We also look at how the let keyword is different from the others.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-javascript-startswith"&gt;
  &lt;/a&gt;
  Table of Contents - JavaScript startsWith():
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#javascript-let"&gt;JavaScript let&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-and-explanation"&gt;Code and Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#redeclaring-variables"&gt;Redeclaring variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#javascript-let"&gt;
  &lt;/a&gt;
  JavaScript let:
&lt;/h2&gt;

&lt;p&gt;Until ES5, JavaScript variables had either global or local scope. Only after ES6 was block scope introduced in JavaScript. Scope denotes which variables we have access to in our program.&lt;/p&gt;

&lt;p&gt;You may have come across functional scope variables, these variables are only accessible inside a function. You could receive an error in case you tried to print it outside the function. Apart from these, there are global variables. These variables can be accessed anywhere in the program and are declared using the var keyword.&lt;/p&gt;

&lt;p&gt;Similarly, variables that are block-scoped are only accessible inside a particular block of code. These variables are declared using JavaScript let and these blocks are enclosed within { } brackets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h2&gt;

&lt;p&gt;Let us look at a code snippet explaining the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Output: 1&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Output: 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Output: 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code snippet, we initially declared a variable ‘num’ using the var keyword. We printed the value and the output was 1&lt;br&gt;
We printed the value and the output was 1&lt;br&gt;
We later open a block and use the let keyword to declare the value as 2. Now the value of ‘num’ inside the block is 2&lt;br&gt;
Lastly, we print the variable after the block is closed, here the variable takes the values set using the var keyword&lt;br&gt;
The above steps are an example of how the let method can be used.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#redeclaring-variables"&gt;
  &lt;/a&gt;
  Redeclaring variables:
&lt;/h2&gt;

&lt;p&gt;While using the JavaScript let, the variable cannot be redeclared within the same block. Attempting to do so would raise an error as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Error: Identifier 'num' has already been declared&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a common problem while using a switch case, this can be solved by using new blocks for each case. However, this is not a problem while using the var keyword. The below code snippet should give an idea of the case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As aforementioned, a similar syntax can be used while using the let method in switch cases as the variable has to be redeclared.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts:
&lt;/h2&gt;

&lt;p&gt;In this article, although we discuss in detail about the JavaScript let methods we have not explained in detail about scope. I would recommend you spend some quality reading about the various types of scopes and their uses.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Lambda Expressions in Java</title>
      <author>Nitish-op</author>
      <pubDate>Tue, 19 Oct 2021 11:13:47 +0000</pubDate>
      <link>https://dev.to/nitish_op/lambda-expressions-in-java-2687</link>
      <guid>https://dev.to/nitish_op/lambda-expressions-in-java-2687</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Lambda expressions are similar to methods, but they are anonymous methods (methods without names) used to implement a method defined by a functional interface and they can be implemented right in the body of a method. A lambda expression is a short block of code which takes in parameters and returns a value so they implement the only abstract function and therefore implement functional interfaces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;

&lt;p&gt;(parameters) -&amp;gt; { code block }&lt;/p&gt;

&lt;p&gt;The left side specifies the parameters required by the expression, which could also be empty if no parameters are required.&lt;/p&gt;

&lt;p&gt;The right side is the lambda body which specifies the actions of the lambda expression. The body of a lambda expression can contain zero, one or more statements.&lt;/p&gt;

&lt;p&gt;When there is a single statement curly brackets are not mandatory and the return type of the anonymous function is the same as that of the body expression.&lt;/p&gt;

&lt;p&gt;When there are more than one statements, then these must be enclosed in curly brackets (a code block) and the return type of the anonymous function is the same as the type of the value returned within the code block, or void if nothing is returned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-lambda-expressions"&gt;
  &lt;/a&gt;
  Using Lambda Expressions
&lt;/h2&gt;

&lt;p&gt;1.Example: No Parameter&lt;/p&gt;

&lt;p&gt;interface Trigger{&lt;br&gt;&lt;br&gt;
    public String display();&lt;br&gt;&lt;br&gt;
}&lt;br&gt;&lt;br&gt;
public class LambdaExpressionExample3{&lt;br&gt;&lt;br&gt;
public static void main(String[] args) {&lt;br&gt;&lt;br&gt;
    Trigger s=()-&amp;gt;{ return "Lambda function is used";};&lt;br&gt;&lt;br&gt;
    System.out.println(s.display());&lt;br&gt;&lt;br&gt;
}&lt;br&gt;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;2.Example: Single Parameter(can also be with multiple parameter)&lt;br&gt;
interface NumericTest {&lt;br&gt;
    boolean computeTest(int n); &lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;public static void main(String args[]) {&lt;br&gt;
    NumericTest Even = (n) -&amp;gt; (n % 2) == 0;&lt;br&gt;
    NumericTest Negative = (n) -&amp;gt; (n &amp;lt; 0); &lt;br&gt;
        System.out.println(Even.computeTest(10));&lt;br&gt;
        System.out.println(Negative.computeTest(-9));&lt;br&gt;
}&lt;br&gt;
3.Lambda expressions as arguments&lt;br&gt;
interface MyString {&lt;br&gt;
    String myStringFunction(String str);&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;public static String reverseofStr(MyString reverse, String str){&lt;br&gt;
  return reverse.myStringFunction(str);&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;public static void main (String args[]) {&lt;br&gt;
    // lambda to reverse string&lt;br&gt;
    MyString reverse = (str) -&amp;gt; {&lt;br&gt;
        String result = ""; &lt;br&gt;
        for(int i = str.length()-1; i &amp;gt;= 0; i--)&lt;br&gt;
            result += str.charAt(i);&lt;br&gt;&lt;br&gt;
        return result;&lt;br&gt;
    };&lt;br&gt;
    System.out.println(reverseofStr(reverse, "Lambda example")); &lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;lambda expressions are added in Java 8 to provide functionalities such as&lt;br&gt;
Enable to treat functionality as a method argument, or code as data.&lt;/p&gt;

&lt;p&gt;A function that can be created without belonging to any class.&lt;/p&gt;

&lt;p&gt;A lambda expression can be passed around as if it was an object and executed on demand.&lt;/p&gt;

&lt;p&gt;so it saves a lot of code. In case of lambda expression, we don't need to define the method again for providing the implementation.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Create nice Readmes for your open source projects ✨</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Tue, 19 Oct 2021 11:10:31 +0000</pubDate>
      <link>https://dev.to/byteslash/create-nice-readmes-for-your-open-source-projects-3c8m</link>
      <guid>https://dev.to/byteslash/create-nice-readmes-for-your-open-source-projects-3c8m</guid>
      <description>&lt;p&gt;Creating good Readmes for your open source project is very important to get some popularity, stars, forks, and contributors. So today we are going to look at 2 ways to create beautiful Readmes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-readmemdgenerator"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/kefranabg/readme-md-generator"&gt;1. Readme-md-generator&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This CLI tool generates a great looking in a few minutes. To use this tool run-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx readme-md-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After running this command, it will ask you a bunch of questions for adding in the readme. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DunJRuVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634631785207/xTIl0Tdl6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DunJRuVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634631785207/xTIl0Tdl6.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
After you have answered all the questions it will create a README.md file for you that looks like this-&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Now you can edit and tweak it as per your need. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#quick-hack"&gt;
  &lt;/a&gt;
  Quick hack
&lt;/h4&gt;

&lt;p&gt;If you want to preview the readme directly hit ctrl + shift + V and it will show you a live preview.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W3c31kt2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634631985171/kyEEEGF87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W3c31kt2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634631985171/kyEEEGF87.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-readmeso"&gt;
  &lt;/a&gt;
  2.  &lt;a href="https://readme.so/"&gt;Readme.so&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you want to build a more customized Readme, then this is a great tool built by @&lt;a href="https://dev.to@katherinecodes"&gt;Katherine Peterson&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fsaw9ZOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634632855581/5CoDKpy2B.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fsaw9ZOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634632855581/5CoDKpy2B.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By just clicking some buttons and editing some text, I got a nice readme like this-&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;I hope you could make some nice Readmes for your open source projects with these amazing tools.&lt;/p&gt;

&lt;p&gt;What tools do you use for making your Readme? Let me know in the comments 👇&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kefranabg/readme-md-generator"&gt;Readme MD generator&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://readme.so/"&gt;Readme.so&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;All socials&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Catchy dev taglines you probably don't know</title>
      <author>·ſ</author>
      <pubDate>Tue, 19 Oct 2021 11:08:30 +0000</pubDate>
      <link>https://dev.to/jmau111/catchy-dev-taglines-you-probably-dont-know-302f</link>
      <guid>https://dev.to/jmau111/catchy-dev-taglines-you-probably-dont-know-302f</guid>
      <description>&lt;p&gt;There are many &lt;a href="https://dev.to/jmau111/acronyms-you-might-not-know-ccl"&gt;acronyms&lt;/a&gt; and catchy taglines you probably don't know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;While some practices may appear creative, you might find others trivial. Besides, some could have disappeared in 2021. Popularity doesn't matter here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#think-outside-the-box"&gt;
  &lt;/a&gt;
  Think Outside the Box
&lt;/h2&gt;

&lt;p&gt;This tagline is a timeless message that invites you to think differently. Apple helped in popularising it even more with its famous advertising slogan "Think different."&lt;/p&gt;

&lt;p&gt;It means the opportunities are left for those who keep looking, don't give up, and think outside the stranglehold of society that everybody knows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-motherfucker"&gt;
  &lt;/a&gt;
  Programming, Motherfucker
&lt;/h2&gt;

&lt;p&gt;Programming, Motherfucker rejects XP, Scrum, Kanban, Waterfall, and "anything that is getting in the way of.... Programming". It's a radical approach that wants to destroy classic software development methodologies, claiming they don't work at all and even humiliate programmers.&lt;/p&gt;

&lt;p&gt;The manifesto has been signed by &lt;a href="http://zedshaw.com/"&gt;Zed A. Shaw&lt;/a&gt; on &lt;a href="http://programming-motherfucker.com/"&gt;programming-motherfucker.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In practice, it can lead developers to introduce breaking changes regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eat-your-own-dog-food"&gt;
  &lt;/a&gt;
  Eat your own dog food
&lt;/h2&gt;

&lt;p&gt;You might be seduced by "Programming, Motherfucker" and other approaches, but don't forget to experience them first hand.&lt;/p&gt;

&lt;p&gt;This principle is not limited to software dev and is also known as &lt;strong&gt;Dogfooding&lt;/strong&gt;. Roughly speaking, it means the employees use the company's products. Marketers and advertisers often have similar approaches.&lt;/p&gt;

&lt;p&gt;The main goals are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prove the company's confidence in its own products&lt;/li&gt;
&lt;li&gt;Improve the overall quality&lt;/li&gt;
&lt;li&gt;Enhance the user's experience&lt;/li&gt;
&lt;li&gt;Speed up iterations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#big-design-up-front"&gt;
  &lt;/a&gt;
  Big Design Up Front
&lt;/h2&gt;

&lt;p&gt;It means don't rush the implementation. Don't start with code. By taking more time to think about things, you can save lots of dev issues and dead ends.&lt;/p&gt;

&lt;p&gt;It's a bit counterintuitive, especially for beginners, as you might want to prove you can translate any idea into code, but even in the best-case-scenario, the feature might fail because you didn't involve the right people at the earliest stages, making the couple hours you've spent on your POC (proof of concept) pretty useless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-least-astonishment"&gt;
  &lt;/a&gt;
  The Least Astonishment
&lt;/h2&gt;

&lt;p&gt;Please keep it simple when you code. You'd rather use intuitive structures and algorithms than hacks and &lt;em&gt;clever&lt;/em&gt; syntaxes.&lt;/p&gt;

&lt;p&gt;The naming conventions can be pretty decisive in this perspective. If you create a class that handles Payments, then don't name it "Subscription."&lt;/p&gt;

&lt;p&gt;Be careful, though, with too generic names, as it might be challenging to use for other developers as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#premature-optimization-is-the-worst"&gt;
  &lt;/a&gt;
  Premature Optimization is the worst
&lt;/h2&gt;

&lt;p&gt;Do you want your code to be perfect? Well, don't make it a general rule. While optimization will be necessary for the successive iterations, doing it at the very beginning is a terrible mistake. &lt;/p&gt;

&lt;p&gt;It would require much effort and time, while the first cycles usually include lots of modifications. You could even introduce nasty regressions with premature optimization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-law-of-demeter-lod"&gt;
  &lt;/a&gt;
  The Law of Demeter (LoD)
&lt;/h2&gt;

&lt;p&gt;The LoD is the principle of least knowledge:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each unit should have limited knowledge about other units: only units "closely" related to the current unit.&lt;/li&gt;
&lt;li&gt;Each unit should only talk to its friends; don't talk to strangers.&lt;/li&gt;
&lt;li&gt;Only talk to your immediate friends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Law_of_Demeter"&gt;Source: Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In other words, the idea is to decouple classes and entities and reduce connections between them. Projects that follow this principle may have lots of relatively small modules and packages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-twelvefactor-app"&gt;
  &lt;/a&gt;
  The Twelve-factor app
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://12factor.net/"&gt;12factor.net&lt;/a&gt; is a list of modern principles for software-as-a-service apps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Codebase: One codebase tracked in revision control, many deploys&lt;/li&gt;
&lt;li&gt;Dependencies: Explicitly declare and isolate dependencies&lt;/li&gt;
&lt;li&gt;Config: Store config in the environment&lt;/li&gt;
&lt;li&gt;Backing services: Treat backing services as attached resources&lt;/li&gt;
&lt;li&gt;Build, release, run: Strictly separate build and run stages&lt;/li&gt;
&lt;li&gt;Processes: Execute the app as one or more stateless processes&lt;/li&gt;
&lt;li&gt;Port binding: Export services via port binding&lt;/li&gt;
&lt;li&gt;Concurrency: Scale out via the process model&lt;/li&gt;
&lt;li&gt;Disposability: Maximize robustness with fast startup and graceful shutdown&lt;/li&gt;
&lt;li&gt;Dev/prod parity: Keep development, staging, and production as similar as possible&lt;/li&gt;
&lt;li&gt;Logs: Treat logs as event streams&lt;/li&gt;
&lt;li&gt;Admin processes: Run admin/management tasks as one-off processes&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-pareto-principle-80-20"&gt;
  &lt;/a&gt;
  The Pareto principle (80% - 20%)
&lt;/h2&gt;

&lt;p&gt;Only 20% of features are essential to 80% of the users. Reciprocally, teams usually spend 80% of their time on 20% of the application.&lt;/p&gt;

&lt;p&gt;Theoretically, with this approach, 80% of the application could be developed, with only 20% of the time allowed in the best scenario.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reward-the-player"&gt;
  &lt;/a&gt;
  Reward The Player
&lt;/h2&gt;

&lt;p&gt;It's a game design principle that highlights positive reinforcement. It's not uncommon to see the same approach in software development, as platforms can use scores and badges to improve the users' motivation.&lt;/p&gt;

&lt;p&gt;The technique is known as &lt;strong&gt;gamification&lt;/strong&gt;. Apps offer unique capabilities that unlock pretty cool features to the most involved users, just like it's done in video games.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully, you learned some principles here. The idea with those approaches is to find the right balance.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@sortino?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Joshua Sortino&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/unknown?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>software</category>
      <category>principles</category>
    </item>
    <item>
      <title>Some Best Practices On Building An Integration</title>
      <author>Andrew McIntosh</author>
      <pubDate>Tue, 19 Oct 2021 10:57:35 +0000</pubDate>
      <link>https://dev.to/amcintosh/some-best-practices-on-building-an-integration-1gbb</link>
      <guid>https://dev.to/amcintosh/some-best-practices-on-building-an-integration-1gbb</guid>
      <description>&lt;p&gt;Hi, I’m Andrew McIntosh. I’m a software engineer at FreshBooks. I’ve moved around development teams a couple of times, but right now I’m working on our API and Integrations team, trying to make things better for developers looking to build API integrations. If that’s you, or you want that to be you, here are five bits of advice on how you can build an (or build a better) API integration:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get To Know The API&lt;/li&gt;
&lt;li&gt;Use Libraries, Tools, and SDKs&lt;/li&gt;
&lt;li&gt;Limit The Scope of Requests&lt;/li&gt;
&lt;li&gt;Properly Handle Errors&lt;/li&gt;
&lt;li&gt;Do More Asynchronous Work&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#get-to-know-the-api"&gt;
  &lt;/a&gt;
  Get To Know The API
&lt;/h2&gt;

&lt;p&gt;This might seem obvious, &lt;strong&gt;but read the docs of whatever API you’re working with&lt;/strong&gt;. This is really the starting point on figuring out how you can do the thing you want to do. Reading through, you might even find a better way to do something than you initially thought. A good API is intuitive and predictable, but even good APIs can have odd, unexpected behaviour in places. Look at examples too as they can really help in cases where the documentation is dated or sparse. &lt;/p&gt;

&lt;p&gt;Keeping API documentation up to date is not always easy, so if you find some place where it’s wrong, someone will be very happy if you report it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-libraries-tools-and-sdks"&gt;
  &lt;/a&gt;
  Use Libraries, Tools, and SDKs
&lt;/h2&gt;

&lt;p&gt;A company with an API wants it to be used, so often they invest time and effort into making things that will make your life using it easier (like this!). &lt;strong&gt;Take advantage of the work they did for you and consider using libraries or SDKs they’ve provided&lt;/strong&gt;. If a company doesn’t have an SDK, or if what they have doesn’t fit your language or framework of choice, take a look for a 3rd-party solution (often API docs will list a bunch of these in addition to company-build ones).&lt;/p&gt;

&lt;p&gt;Using an SDK or library isn’t generally required, but there are advantages to not having to reinvent the wheel. Many of the topics I’m going to cover next might already be handled by a well-built SDK! Often SDK developers know the API quite well (especially if they’re employees of the company) and they can often simplify, clarify, or even paper over those oddities or inconsistencies I mentioned in documentation.&lt;/p&gt;

&lt;p&gt;For example, for historical reasons a lot of the oldest accounting endpoints in FreshBooks’ API return dates in North American Eastern Time (US/Eastern aka EST/EDT, time zones are complicated), while all newer endpoints to return dates in UTC (we’re moving everything to UTC, but it takes time). If you’re using one of our SDKs, we hide that from you and return all the dates in UTC. We’ve done the work so YOU don’t have to figure out which is which!&lt;/p&gt;

&lt;p&gt;Just like documentation, if you find a bug or missing feature in a tool, the owner would love your feedback, and if it’s open source and you’re keen, you could even try to fix it yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limit-the-scope-of-requests"&gt;
  &lt;/a&gt;
  Limit The Scope of Requests
&lt;/h2&gt;

&lt;p&gt;For your own benefit, as well as the API owner’s you want to &lt;strong&gt;fetch data in an efficient way&lt;/strong&gt;. This means not grabbing data that you don’t care about and will just throw away, as well as not fetching too much data at once and then having memory or performance issues trying to process it that can spill over into slow responsiveness for your users.&lt;/p&gt;

&lt;p&gt;This means that you should look at how an API handles filters (to limit returned records to only those you care about), pagination (fetch records in smaller batches so you can handle them in chunks), sorting (so those batches come in an order that works for you), and maybe even what fields are included in the response (so the record itself isn’t filled with data you don’t need). Here is FreshBooks’ &lt;a href="https://www.freshbooks.com/api/parameters"&gt;Search, Paging and Includes documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, one integration I was debugging would sync invoices from another service to a particular client. It would check to see if that existed before creating it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matchingClients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;freshbooksClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accountId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matchingClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matchingClients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;currClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;organization&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;clientOrganization&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it was sometimes creating duplicate clients. This was because FreshBooks defaults to returning 30 records at a time with the newest ones first. This worked fine when it first created the client, but as customers used the app and made more clients, the client to sync with got bumped off of the first 30 results and was no longer found. In addition to that, the code was fetching as many clients as it could, and then filtered them in memory. It either needed a filter or pagination (or both).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clientSearchQueryBuilder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SearchQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Organization_like&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientOrganization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matchingClients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;freshBooksApi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fbAccountId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matchingClients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matchingClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matchingClients&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let the API do that work!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#properly-handle-errors"&gt;
  &lt;/a&gt;
  Properly Handle Errors
&lt;/h2&gt;

&lt;p&gt;There’s a lot to proper error handling, so let's look at things in pieces.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#api-errors"&gt;
  &lt;/a&gt;
  API Errors
&lt;/h4&gt;

&lt;p&gt;A lot of API docs will have information on error codes, states, messages. You don’t want your integration to break unexpectedly, so you should look to handle these. Logging response messages is really helpful when building an application to understand business rules or validation failures. When you’re up and running in production, it’s equally important to help you know why something might be failing. For example, a good API won’t just give you a &lt;code&gt;422 Unprocessable Entity&lt;/code&gt;, but might return a message like &lt;code&gt;422 - At least one field among first_name, last_name, email or organization is required&lt;/code&gt; (a &lt;a href="https://www.freshbooks.com/api/clients"&gt;FreshBooks client&lt;/a&gt; validation error message)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The API isn’t your code, and you don’t control what comes out. This is a black box, and it’s helpful to follow defensive coding practices.&lt;/strong&gt; You should check http response codes, wrap your calls in try/catches, etc.. Don’t assume that a response you get has an object or resource data structure as a failure may return an error data structure instead, so you should be prepared to parse or otherwise handle either. If a REST APIs backend service is down, a company’s API gateway might not even return you JSON but instead give you an HTML error page that your JSON-expecting code will just fail to parse. In short, don’t assume that the response will always come in the form you expect, and ensure you handle cases when it doesn’t.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#timeouts-and-connection-exceptions"&gt;
  &lt;/a&gt;
  Timeouts and Connection Exceptions
&lt;/h4&gt;

&lt;p&gt;The API you're using isn’t perfect. It could be slow or offline. In these cases, your integration could run into issues if all the processors or workers are stuck waiting on the API. &lt;strong&gt;For this reason, you should configure timeouts on your calls.&lt;/strong&gt; HTTP clients have easily set timeouts but often they are not enabled by default. Again, a good SDK will have some sane defaults for you (we &lt;a href="https://github.com/freshbooks/freshbooks-python-sdk/blob/release/0.8.0/freshbooks/client.py#L51"&gt;default to 30 seconds but let you easily override&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In general there are connect timeouts (how long you wait to establish a connection), and read timeouts (how long you wait for the response). Some clients let you set them together or individually, but you’ll want to set both to protect from an unresponsive server (connect), or a really slow response (read). &lt;/p&gt;

&lt;p&gt;Figuring out exactly what the timeout values should be is very dependent on your integration and the API you’re using, but even setting them to something high (15-30 seconds) can save you a lot of pain.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rate-limits"&gt;
  &lt;/a&gt;
  Rate Limits
&lt;/h4&gt;

&lt;p&gt;Most APIs will limit traffic to prevent a bad actor from hindering other integration’s performance or degrading the entire system. You should build your integration to respect and accommodate these limits. Running up against them constantly doesn’t do you any good, as your work won’t get done faster, and could result in your integration being banned. &lt;/p&gt;

&lt;p&gt;As mentioned above, it’s best to build your integration with efficient calls in mind. Reducing the number of calls you need to make means you’re less likely to hit call limits. &lt;br&gt;
Another good practice is to properly handle rate limit errors (generally HTTP 429 errors), and then rather than retry right away, wait for a bit before making the next call. If the next call is still limited, wait even longer. This is called an exponential backoff, and again, most HTTP libraries will have a way to enable this and many SDKs will have implemented this (our SDKs do it &lt;a href="https://github.com/freshbooks/freshbooks-python-sdk/blob/release/0.8.0/freshbooks/api/resource.py#L34-L42"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/freshbooks/freshbooks-nodejs-sdk/blob/%40freshbooks/api%402.0.1/packages/api/src/APIClient.ts#L115-L119"&gt;here&lt;/a&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-more-asynchronous-work"&gt;
  &lt;/a&gt;
  Do More Asynchronous Work
&lt;/h2&gt;

&lt;p&gt;If your integration is handling a lot of data via an API, you should consider &lt;strong&gt;moving as much work to asynchronous tasks as possible&lt;/strong&gt;. In this way you can not block your users, manage and throttle your work loads, and easily retry failures. The above advice on handling rate limits gets a lot easier if your processing code isn’t blocking user actions while retrying. It also lets you throttle the calls in whatever queue system you’re using. &lt;/p&gt;

&lt;p&gt;Look into &lt;a href="https://aws.amazon.com/sqs/"&gt;Amazon’s SQS&lt;/a&gt;, &lt;a href="https://cloud.google.com/tasks/docs/creating-queues"&gt;Google’s Cloud Tasks queues&lt;/a&gt;, Python’s &lt;a href="https://docs.celeryproject.org/en/stable/getting-started/introduction.html"&gt;celery&lt;/a&gt; and something like &lt;a href="https://www.cloudamqp.com/"&gt;CloudAMQP&lt;/a&gt;, or &lt;a href="https://github.com/OptimalBits/bull"&gt;Bull&lt;/a&gt; with Redis. There are a lot of options out there.&lt;/p&gt;

&lt;p&gt;Another good idea is to use webhooks if the API supports them (&lt;a href="https://www.freshbooks.com/api/webhooks"&gt;FreshBooks does&lt;/a&gt;). This allows you to register to receive messages when an event happens. Rather than polling an API every 5 minutes to see if a new resource has been created, you can tell the API to send you a message when that happens. This can save you a lot of calls and overhead. &lt;/p&gt;

&lt;p&gt;Going back to that old integration I was debugging, it would sync invoices with FreshBooks every 20 minutes, but the process involved gathering up all the invoices it hadn’t pushed and looping through them. However, the process was driven by a synchronous HTTP call that would timeout after just a couple minutes, killing the process. It could take days to move everything over. Calling the process more often would only help a little as there were only so many calls the service could handle at one time and these long-running calls could block workers from handling user interaction with the app. We redesigned the whole sync process of the integration so that everything was done in small asynchronous tasks. On first signup we had an async task that would fetch each invoice (paginated), and put a message on the queue to process that invoice. The invoice processing tasks could thus be retried, scaled up, or throttled as needed. We also utilized webhooks for real-time updates. Each event received would just create another invoice process task. Instead of days, things could be processed in seconds, minutes, or perhaps hours for very large workloads. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#go-out-and-build"&gt;
  &lt;/a&gt;
  Go Out And Build
&lt;/h2&gt;

&lt;p&gt;Well, I hope that gives you a few ideas on building a robust integration. If you know the API you’re using and the tools available, keep your calls efficient, handle the unexpected gracefully, and keep your time consuming processing away from the user’s actions, you’re on a great path to succeed. If you have any questions, please reach out to me, and if you have anything related to FreshBooks’ API you can email &lt;a href="mailto:newapi@freshbooks.com"&gt;newapi@freshbooks.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>freshbooks</category>
      <category>sdk</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Animal Feed Enzymes Market Growth Factors, and Regional Outlook To 2027</title>
      <author>Snehal Prabhavale</author>
      <pubDate>Tue, 19 Oct 2021 10:14:55 +0000</pubDate>
      <link>https://dev.to/snehalprabhava1/animal-feed-enzymes-market-growth-factors-and-regional-outlook-to-2027-215i</link>
      <guid>https://dev.to/snehalprabhava1/animal-feed-enzymes-market-growth-factors-and-regional-outlook-to-2027-215i</guid>
      <description>&lt;p&gt;Animal Feed Enzymes Market size is projected to reach USD 1732.4 Million by 2027 from an estimated USD 1243.2 Million in 2021, &lt;/p&gt;

&lt;p&gt;Global Animal Feed Enzymes Market Report provides a deep insight into the market 2021, covering all its essential aspects. This spans from an economics outline of the planet market to the minute little details of the trade performance, recent trends, key market drivers and challenges, Porter’s five forces analysis, SWOT analysis, price chain analysis, etc. The report provides the user with insights into the manufacturing price, staple prices, supply chain analysis, etc. The analysis report contains a comprehensive analysis of the market opportunities, import/export details, key makers, market dynamics, and key regions.&lt;/p&gt;

&lt;p&gt;Enzymes square measure proteins that aids within the breakdown, and absorption of present components like fiber and phytate in numerous feed ingredients. thanks to the excessive use of artificial and inorganic fertilizers, the crops square measure losing their nutritionary qualities and a few harmful by-products square measure fashioned once they're eaten by the placental mammal. thanks to the continued crisis, placental mammal keepers face economic challenges due to that the placental mammal is fed with incompetent fodder. Moreover, this fodder contains harmful components that hinder the digestion method of the placental mammal thus to compensate bound necessary enzymes square measure used that aids the placental mammal stomach upset and this could facilitate the animal feed market to flourish throughout the forecast amount. The cellulase protein helps within the digestion of the polyose carbohydrate and breakdowns the fiber, glucan’s acts on non-starch polysaccharides and breaks down the fiber. Proteases act on the supermolecule parts and facilitate within the degradation of the proteins into amino acids that square measure the essential building blocks for placental mammal. The chop-chop growing placental mammal sector and also the decrease within the productivity of competent fodder square measure expected to administer a lift to the arena.&lt;/p&gt;

&lt;p&gt;Request for a sample copy of this Animal Feed Enzymes research report @&lt;/p&gt;

&lt;p&gt;&lt;a href="https://introspectivemarketresearch.com/request/15889"&gt;https://introspectivemarketresearch.com/request/15889&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Top Key Players Mentioned:&lt;/p&gt;

&lt;p&gt;Enzyme Innovation (US),BASF SE(Germany),Bioresource International Inc. (US),Eukaryotic Biologicals Pvt Ltd (India),Nutrex BE (Central Florida),AB Enzymes GmbH (Germany),Koninklijke DSM (Netherlands),DuPont (US),Chr. Hansen Holding a/s (Denmark),Novozymes (Denmark),Aum enzymes (India),Caprienzymes (India),Others&lt;/p&gt;

&lt;p&gt;Following regions are highlighted in this the Animal Feed Enzymes Market report:&lt;/p&gt;

&lt;p&gt;North America&lt;br&gt;
Asia Pacific&lt;br&gt;
Europe&lt;br&gt;
Middle East &amp;amp; Africa&lt;br&gt;
Latin America&lt;/p&gt;

&lt;p&gt;The Analysts have distributed the Animal Feed Enzymes Market across different geographies such as North America, Latin America, Asia Pacific, Africa and India for detailed market study. The financial aspects of the business are also carefully studied, referring to several attributes such as price, profit margin and sales by region for the forecast period 2021-2027.&lt;/p&gt;

&lt;p&gt;In market segmentation by Product the Animal Feed Enzymes Market report covers:&lt;/p&gt;

&lt;p&gt;Cellulase,Proteases,Phytases,Alpha-Amylase,Carbohydrase,Non-Starch Polysaccharides,And Others&lt;/p&gt;

&lt;p&gt;Inquire Before purchasing the report of Animal Feed Enzymes Market:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://introspectivemarketresearch.com/inquiry/15889"&gt;https://introspectivemarketresearch.com/inquiry/15889&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The analysis Report on Animal Feed Enzymes Market provides an in-depth summary of the demand and consumption of assorted products/services associated with the expansion dynamics of the market throughout the forecast amount 2021-2027. In-depth market estimates of the assorted opportunities within the section square measure expressed. Volume and revenue, Insights and analysis on the Animal Feed Enzymes Market span multiple pages. These square measures coated in numerous sections, together with drivers and constraints, challenges and opportunities, regional segmentation and chance assessment, end-use/applicability forecast analysis, and competitive landscape assessment.&lt;/p&gt;

&lt;p&gt;In market segmentation by Livestock, the Animal Feed Enzymes Market report covers:&lt;/p&gt;

&lt;p&gt;Swine,Poultry,Aquaculture,Sheep's,Goats,Others&lt;/p&gt;

&lt;p&gt;The Animal Feed Enzymes market report has been ready through intensive primary and secondary analysis. Key analysis enclosed interviews, surveys, and observations of trade celebrities. additionally, to mergers and acquisitions, partnerships and agreements, and activities inside the trade, the report additionally includes segments of competitive analysis supported ventures, manufacturer analysis, and development, product launches, or product enhancements.&lt;/p&gt;

&lt;p&gt;Get Discount on Full Report of the Animal Feed Enzymes Market @:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://introspectivemarketresearch.com/discount/15889"&gt;https://introspectivemarketresearch.com/discount/15889&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Key Benefits of reports:&lt;/p&gt;

&lt;p&gt;Information about key drivers, restraints, and opportunities and their impact analysis on the global Animal Feed Enzymes market size is provided in the report.&lt;br&gt;
Porter’s five forces analysis illustrates the potency of the buyers and suppliers operating in the Animal Feed Enzymes industry.&lt;br&gt;
The quantitative analysis of the market for the period 2021–2027 is provided to determine the Animal Feed Enzymes market potential.&lt;br&gt;
Read More Reports:&lt;/p&gt;

&lt;p&gt;Smart Cameras Market by Solution, Services, Application, and Region - Global Forecast to 2027&lt;/p&gt;

&lt;p&gt;Global Remote Car Stater Market analysis by Size, Growth, By Segmentation, By application&lt;/p&gt;

&lt;p&gt;New Research Study on Global Electronic Alarm Clock Market&lt;/p&gt;

&lt;p&gt;Introspective Market Research provides discounts on every report. We can offer Customization of the reports as per your requirements in affordable prices. Get in touch with our sales team, who will guarantee you a report that suits your needs.&lt;/p&gt;

&lt;p&gt;About Us:&lt;/p&gt;

&lt;p&gt;Introspective Market Research (introspectivemarketresearch.com) is a visionary research consulting firm dedicated to assist our clients grow and have a successful impact on the market. Our team at IMR is ready to assist our clients flourish their business by offering strategies to gain success and monopoly in their respective fields. We are a global market research company, specialized in using big data and advanced analytics to show the bigger picture of the market trends. We help our clients to think differently and build better tomorrow for all of us. We are a technology-driven research company, we analyze extremely large sets of data to discover deeper insights and provide conclusive consulting. We not only provide intelligence solutions, but we help our clients in how they can achieve their goals.&lt;/p&gt;

&lt;p&gt;Contact Us:&lt;/p&gt;

&lt;p&gt;Mike Cooper&lt;/p&gt;

&lt;p&gt;Business Development Manager&lt;/p&gt;

&lt;p&gt;3001 S King Drive, Chicago, Illinois,&lt;/p&gt;

&lt;p&gt;U.S. A 60616&lt;/p&gt;

&lt;p&gt;Contact No: USA: +1 (773)-382-1047 / IND: +91-81-8009-6367&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>news</category>
    </item>
    <item>
      <title>Virtual Visits: How to enable Remote Doctor Appointment App Development</title>
      <author>Idea2App</author>
      <pubDate>Tue, 19 Oct 2021 10:10:46 +0000</pubDate>
      <link>https://dev.to/idea_2app_dev/virtual-visits-how-to-enable-remote-doctor-appointment-app-development-21ki</link>
      <guid>https://dev.to/idea_2app_dev/virtual-visits-how-to-enable-remote-doctor-appointment-app-development-21ki</guid>
      <description>&lt;p&gt;In today's virtual world, people are becoming more and more accustomed to experiencing things virtually. In the era of artificial intelligence and AI, how can healthcare be far behind?&lt;br&gt;
Virtual healthcare, which uses technology to create virtual interactions between patients and doctors, has gained a lot of traction in recent years. It is helping patients connect to doctors from the comfort of their homes without physically visiting them while offering them a healthcare experience as close to real as it gets.&lt;/p&gt;

&lt;p&gt;Healthcare apps have been on the rise. According to Statista, the global healthcare app market is expected to reach $582 billion by 2023, and healthcare apps will be downloaded close to 2 billion times by 2022. These apps allow patients to book appointments, consult with doctors, get prescriptions, and even order medicines. The rise of virtual healthcare has drastically changed how the healthcare industry operates. It is helping patients connect with doctors from the comfort of their homes without physically visiting them while offering them a healthcare experience as close to real as it gets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Online Doctor Appointment App Development:-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The doctor's appointment booking app is helpful as it saves you from the hassle of having to visit a doctor's office, parking your car, waiting in a queue, and paying hefty charges. All you need to do is download the app, fill in your details, and select the day, time and doctor. All you have to pay is nominal charges. The best thing about the app is that you can choose from different types of doctors – regular, pediatric, emergency, and specialist. Moreover, you can pick the doctor at your convenience.&lt;/p&gt;

&lt;p&gt;Virtual healthcare, which uses technology to create virtual interactions between patients and doctors, has gained a lot of traction in recent years. It is helping patients connect to doctors from the comfort of their homes without physically visiting them while offering them a healthcare experience as close to real as it gets. Healthcare apps have been on the rise. These apps allow patients to book appointments, consult with doctors, get prescriptions, and even order medicines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Introduction to Telemedicine:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Virtual medical care, telemedicine, e-medicine, and telehealth are terms referring to electronic health care technology. In general, the term telehealth refers to telecommunications technologies to deliver health care services at a distance via interactive audio and video transmissions.&lt;/p&gt;

&lt;p&gt;Telemedicine uses telecommunications technologies to deliver health care services at a distance via interactive audio and video transmissions. Telemedicine combines traditional health care practices with telecommunications technologies. Health care providers transmit health and medical data through the telephone, radio, Internet, or satellite connections.&lt;/p&gt;

&lt;p&gt;Virtual care is the delivery of health care services via electronic means. Virtual care refers to the delivery of health care through telecommunications technologies but does not include delivering health care services via interactive audio and video transmissions. Virtual care may include online checkups, online consultations, online prescriptions, online physician visits, virtual clinics, online health advice, and so on. Doctors and patients also communicate with each other through emails, text messages, online chats, video conferences, etc.&lt;/p&gt;

&lt;p&gt;Telehealth improves access to health care services and reduces the geographic barriers that limit individual health care. Telehealth not only increases the number of health care providers but also improves the health care quality.&lt;/p&gt;

&lt;p&gt;Telehealth education can improve the health and well-being of people around the world. Some telehealth education programs include online tutorials, online training, online lectures, distance learning, online seminars, online classes, etc. Telehealth education is the future of medical education.&lt;br&gt;
Telehealth also helps in distance learning. Distance learning is the traditional method of teaching in which the teacher is teaching students who are not physically present in class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Are Virtual Visits the Need of the Hour?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since the COVID 19 outbreak, however, many medical practitioners have set up virtual clinics where patients can see a doctor over the Internet. That approach may make sense for common problems like colds or the flu, where the doctor can usually tell the patient what to do and send them home. But the virtual clinic approach is inappropriate for more serious conditions like heart disease, cancer, or stroke. In those cases, the doctor has to be sure of the diagnosis, and the most common way of doing that is by seeing the patient face to face.&lt;/p&gt;

&lt;p&gt;Virtual clinics are still useful in some situations. When you have an extremely rare disease, for example, a virtual clinic may be the only way you can find a doctor who treats it. But for most conditions, going online is unlikely to provide enough additional information to allow the doctor to diagnose and prescribe the proper treatment. When a patient is admitted to a hospital, his doctor arrives and takes him for a physical. The doctor examines him, takes his pulse, listens to his heart, and then prescribes treatment. The patient encounters a nurse who takes his temperature, listens to his breathing, and swabbing his nose on the way out. The patient then goes to a pharmacy, where a technician, who usually is not a doctor, takes his blood pressure. After processing, the patient gets a prescription for medicine and leaves. Moreover, the patient's medical records are reviewed by a doctor.&lt;/p&gt;

&lt;p&gt;Now, suppose that telemedicine is gradually replacing face-to-face consultations. The doctors will ask questions to their patients on their Smartphone. The doctor will prescribe medicine, and the patient will get the medicine delivered to his home. The doctor's staff can do this review. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Patients Get Special Attention&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most doctors are convinced that they have two patients: the ones they see and the ones they don't. They spend almost all of their time with the one they see; the other waits impatiently on the front porch.&lt;/p&gt;

&lt;p&gt;But doctors' waiting rooms are too small. Half the time, the patients sitting on the couch don't even look at the doctor. Meanwhile, the patients have a lot to tell them. Instead of being intimidated and intimidated, they'd rather talk to their doctor. Doctors who learn how to listen can cure more diseases. The problem is that doctors don't know how to listen. If you want to learn how to listen, it helps to know what to listen for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.idea2app.dev/medicine-delivery-app-development.html"&gt;Appointment App Development&lt;/a&gt;:-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You could argue that it makes no difference: video appointments are still appointments, so the patient can reschedule or cancel them or just not show up.&lt;/p&gt;

&lt;p&gt;But suppose the patient has trouble cancelling. Suppose the patient has trouble showing up. Suppose the patient has trouble understanding what the doctor is saying. Suppose the patient has trouble getting an appointment. When a medical consultation becomes dependent on technology, the patient loses control. Without control, the patient loses information. Without information, the patient loses power. Even the best system will be less good for the patient than a real appointment, which is already better than no appointment. It's the difference between a doctor making a recommendation and a patient weighing the pros and cons of treatment. Virtual medical consultations reduce the doctor-patient relationship to a transactional one: the doctor reviews the information you have provided and recommends the best treatment for you.&lt;/p&gt;

&lt;p&gt;Most consultants have a website, and, if you are lucky, you'll find reviews left by other people. But these are not reliable: ordinary customers do not have much to say about the consultants they consult, and consultants are not always eager to advertise their failings. So, for example, if you look up "Dr. Bernard" on Psychology Today, you get 133 pages of notes about his prescriptions but no mention of his rudeness. A better place to look for reviews is Yelp. There are almost 120 reviews of Dr Bernard, and they are all quite bad. The doctor is rude, practices medicine without qualifications, swears, and is worst of all, he is French.&lt;/p&gt;

&lt;p&gt;But Yelp's reviews are neither reliable nor complete. Because Yelp is a website, it only asks its users to review doctors they have worked with. This is helpful because if every user left a review for every doctor they had ever visited, Yelp would become unusable. But it is quite misleading: if a user is unhappy, they may never contact the doctor again, and Yelp never gets to hear about that. Worse, reviewers on Yelp can lie. Yelp cannot tell if a review is genuine or even whether two different reviewers are the same person. Reviews can be even more misleading than they seem. For example, Yelp has a button that allows reviewers to report fake reviews, but it does not tell whether the report is genuine. So a reviewer can report a fake review, and Yelp can punish the faker, but Yelp can never tell whether the faker was telling the truth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.idea2app.dev/medicine-delivery-app-development.html"&gt;Doctor appointment app development&lt;/a&gt;:- &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A doctor's app, which patients and doctors own, is gaining traction. It's a disruptive technology. But in terms of revenue, it's still a small market.  The health care industry, which accounts for 17 per cent of the U.S. economy, generated $3.9 trillion in 2015. And of that, $1.6 trillion was spent on pharmaceuticals. The app lets patients and providers instantly set up video consultations or transfer video from Skype, Google Hangouts or Face time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do you have any allergies or would like to seek medical advice on a general matter? Are you afraid of going out during Corona virus season? There is no need to be concerned because telemedicine platforms will keep you covered and remotely provide doctor coverage for all illnesses. All you have to do is schedule an appointment with a doctor and show up at the scheduled time. This way, you can live a healthy life and avoid becoming exposed to any virus infections that are circulating.&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>react</category>
    </item>
  </channel>
</rss>
