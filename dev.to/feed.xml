<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How create Glitch Effect 🤖 Pure CSS</title>
      <author>Roden</author>
      <pubDate>Fri, 20 Aug 2021 17:56:07 +0000</pubDate>
      <link>https://dev.to/kerthin/how-create-pure-css-glitch-effect-530p</link>
      <guid>https://dev.to/kerthin/how-create-pure-css-glitch-effect-530p</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Today I would like to talk about how to make a Glitch effect using CSS. To do this, I will use one of the most popular options. This is when we use &lt;code&gt;pseudo-elements&lt;/code&gt; to create &lt;code&gt;copies&lt;/code&gt; of the main element.&lt;/p&gt;

&lt;h1&gt;Demo&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/RodenKerthin/embed/bmrbJW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;HTML&lt;/h1&gt;

&lt;p&gt;In the HTML section, we need to create just 1 tag, inside which you should write the text, and also duplicate it in the &lt;code&gt;data-text&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like that:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;glitch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Glitch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Glitch&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can specify any tag. It is not necessary to use text tags.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQxcyV3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dffcyd5hxixnjxzbc3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQxcyV3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dffcyd5hxixnjxzbc3w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;CSS&lt;/h1&gt;

&lt;p&gt;We need to take into account that the &lt;code&gt;pseudo-elements&lt;/code&gt; of our text should be located approximately at the same &lt;code&gt;position&lt;/code&gt; as the &lt;code&gt;main text&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, for &lt;code&gt;pseudo-elements&lt;/code&gt;, we need to specify the &lt;code&gt;position&lt;/code&gt; property with the value &lt;code&gt;absolute&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;glitch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our text and its copies are on top of each other.&lt;/p&gt;

&lt;p&gt;Before we continue creating the Glitch effect, it would be nice to add styles to our text to make it look more beautiful.&lt;/p&gt;

&lt;p&gt;To do this, I will make our &lt;code&gt;sans-serif&lt;/code&gt; font, the font size is &lt;code&gt;larger&lt;/code&gt;, we create &lt;code&gt;shadows&lt;/code&gt; and a &lt;code&gt;linear gradient&lt;/code&gt; that completely &lt;code&gt;copies&lt;/code&gt; our text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;glitch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sans&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;repeating&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;005792&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;005792&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fff&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fff&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PHjScgaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x019i2uhfa2vxr3j2g9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PHjScgaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x019i2uhfa2vxr3j2g9w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Changing pseudo-elements&lt;/h3&gt;

&lt;p&gt;Now we need to shift each of our pseudo-elements in different directions. This is necessary in order to create the effect of shifting the text, as it happens during glitches.&lt;/p&gt;

&lt;p&gt;To do this, we need to &lt;code&gt;move&lt;/code&gt; each pseudo-element in the opposite direction from &lt;code&gt;each other&lt;/code&gt; by a couple of &lt;code&gt;pixels&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I decided to make the color of the pseudo-elements shadows the same as the main one, but you can make them different, in order to achieve the effect of a broken TV using &lt;code&gt;black&lt;/code&gt; and &lt;code&gt;blue&lt;/code&gt; colors.&lt;/p&gt;

&lt;h3&gt;Clip&lt;/h3&gt;

&lt;p&gt;Next, we need to use the clip property.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The clip property defines the area of the positioned element in which its contents will be displayed. Anything that doesn't fit in this area will be cut off and become invisible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rTpMkAmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owlgh73z21ifex7v9kjb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTpMkAmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owlgh73z21ifex7v9kjb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use this property to alternately display the &lt;code&gt;cropped parts&lt;/code&gt; of our pseudo elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;clip: rect(Y1, X1, Y2, X2);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The values are the distance from the edge of the element to the clipping area.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;clip: rect(&lt;code&gt;top&lt;/code&gt;/&lt;code&gt;right&lt;/code&gt;/&lt;code&gt;bottom&lt;/code&gt;/&lt;code&gt;left&lt;/code&gt;);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, in order to &lt;code&gt;completely crop&lt;/code&gt; our pseudo-elements, we set an indent of &lt;code&gt;900 pixels&lt;/code&gt; on the right side. (You can use any value depending on the size of your element)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$secondaryColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$primaryColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is very important that the background property of pseudo-elements is exactly the same as that of the background, so that they merge and there are no problems with the display.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o65xbm6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz0wfmknvx3e87nm3rgi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o65xbm6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz0wfmknvx3e87nm3rgi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Clip Animation&lt;/h3&gt;

&lt;p&gt;In order to qualitatively animate our elements, we need to create a step-by-step animation, where we will change the &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;third&lt;/code&gt; values in the &lt;code&gt;clip&lt;/code&gt; property, so that our pseudo-elements are displayed only in parts during the animation from top to bottom.&lt;/p&gt;

&lt;p&gt;In this case, the &lt;code&gt;second&lt;/code&gt; and &lt;code&gt;fourth&lt;/code&gt; values of the &lt;code&gt;clip&lt;/code&gt; property must be unchanged.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;$i&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt; &lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;))}{&lt;/span&gt;
            &lt;span class="na"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Personally, I use a &lt;code&gt;20-step&lt;/code&gt; animation, but you can specify any number of steps, since the animation is still &lt;code&gt;random&lt;/code&gt; and generates changes in the values of the &lt;code&gt;clip&lt;/code&gt; property itself. The more steps you specify, the &lt;code&gt;faster&lt;/code&gt; the animation will be.&lt;/p&gt;

&lt;p&gt;And now we just need to attach our animation to our two pseudo-elements. You also need to specify a different animation playback time for each pseudo-element. To achieve a more chaotic glitch animation effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's all.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/RodenKerthin/embed/bmrbJW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Well, that's it. This was a very simple and very popular way to create a glitch effect on pure CSS. Thank you very much for your time on my post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't switch.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n47fwcZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xTiQyohZdXceENvkcM/giphy.gif%3Fcid%3D790b76118a5d78e9e679d4656834dea41a593b3e721efb63%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n47fwcZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xTiQyohZdXceENvkcM/giphy.gif%3Fcid%3D790b76118a5d78e9e679d4656834dea41a593b3e721efb63%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>How to write a VERY HIGH quality post on DEV [13 top tips + a bonus 🤯!]</title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 20 Aug 2021 17:12:59 +0000</pubDate>
      <link>https://dev.to/inhuofficial/how-to-write-the-highest-quality-posts-on-dev-13-top-tips-cj6</link>
      <guid>https://dev.to/inhuofficial/how-to-write-the-highest-quality-posts-on-dev-13-top-tips-cj6</guid>
      <description>&lt;p&gt;There is a great article on writing high quality posts currently on the feed. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eC-1q7yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N11CuWa7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/550094/828a9054-da2d-4120-8949-7556f6715364.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/how-to-write-a-high-quality-post-on-dev-3me0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to write a high quality post on DEV&lt;/h2&gt;
      &lt;h3&gt;Ella Ang (she/her/elle) for The DEV Team ・ Aug 20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#howtodevto&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;It is great and I would suggest going to give that a read. (as you can probably tell, I am being mischievous and stealing post titles from people...again!)&lt;/p&gt;

&lt;p&gt;Following on from that post, I am going to expand on a few things and introduce a few more tips for writing high quality posts on DEV (and elsewhere).&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;in addition&lt;/strong&gt; to the post by &lt;a class="mentioned-user" href="https://dev.to/ellativity"&gt;@ellativity&lt;/a&gt;
, not a replacement for it!&lt;/p&gt;

&lt;p&gt;The tips in this article are ones I wish someone had given me when I first started writing. Oh and there are a few tips in here that will make you much faster at creating articles too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-use-headings-properly"&gt;1. Use Headings properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-create-a-document-outline"&gt;2. Create a document outline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-use-my-editor-if-you-dont-know-markdown"&gt;3. Use my editor if you don't know markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-fill-in-the-blanks-and-make-sure-to-link-to-any-references"&gt;4. Fill in the blanks and make sure to link to any references.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-run-your-article-through-the-hemmingway-app"&gt;5. Run your article through the Hemmingway App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-mind-your-language"&gt;6. Mind your language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-explain-abbreviations-and-acronyms"&gt;7. Explain abbreviations and acronyms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-image-alt-text-a-top-tip"&gt;8. Image alt text, a top tip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9-create-a-contents-section-if-needed"&gt;9. Create a contents section if needed.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10-a-good-cover-image-is-important"&gt;10. A good cover image is important&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#11-refine-your-opening-paragraph"&gt;11. Refine your opening paragraph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12-have-a-promotion-strategy-if-you-want-more-engagement"&gt;12. Have a promotion strategy if you want more engagement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13-pay-attention-to-comments-and-reply"&gt;13. Pay attention to comments (and reply!)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bonus-tip-publish-your-article-on-your-own-site-first-if-you-have-one"&gt;Bonus Tip: Publish your article on your own site first (if you have one)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-use-headings-properly"&gt;
  &lt;/a&gt;
  1. Use Headings properly
&lt;/h2&gt;

&lt;p&gt;Headings help break your article up and make it easier to digest. &lt;/p&gt;

&lt;p&gt;They also help people who use a screen reader orientate themselves in your article.&lt;/p&gt;

&lt;p&gt;There are a couple of things to note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;headings should start at level 2 on DEV (as your article title is level 1).&lt;/li&gt;
&lt;li&gt;You should not skip heading levels (see below)&lt;/li&gt;
&lt;li&gt;When writing your document outline start with the main headings, it will help you organise your thoughts and make writing easier.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1a-headings-example-this-article"&gt;
  &lt;/a&gt;
  1a. Headings example (this article)
&lt;/h3&gt;

&lt;p&gt;In Markdown the number of &lt;code&gt;#&lt;/code&gt;s correspond to the heading level.&lt;/p&gt;

&lt;p&gt;As such you will see the following structure only uses levels 2 and 3 (more on that after this example).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## 1. Use Headings Properly
### 1a. Headings example (how meta!)

## 2. Create a document outline
### 2a. Headings First
### 2b. Bullet points and curly braces
### 2c. Images list

## 3. Use my editor if you don't know markdown

## 4. Fill in the blanks and make sure to link to any references.
### 4a. Sentence Length
### 4b. Use follow on words / phrases (transitions)

## 5. Run your article through the Hemingway App
### 5a. Use Grammarly or similar


## 6. Mind your language
### 6a. Swearing (I should listen to this)
### 6b. Inclusive language

## 7. Explain abbreviations and acronyms
### 7a. Brackets method
### 7b. Glossary method

## 8. Image alt text, a top tip

## 9. Create a contents section

## 10. A good cover image is important
### 10a. Create your own

## 11. Refine your opening paragraph
### 11a. Also check your closing paragraphs

## 12. Have a promotion strategy if you want more engagement

## 13. Pay attention to comments (and reply!)
### 13a. Fix problems!

## Bonus Tip: Publish your article on your own site first (if you have one)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice how the structure is quite "flat". I only use level 2 and level 3 headings. This tends to be better for web based articles.&lt;/p&gt;

&lt;p&gt;If you find yourself getting to level 5 headings you should just check you aren't over-nesting information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-create-a-document-outline"&gt;
  &lt;/a&gt;
  2. Create a document outline
&lt;/h2&gt;

&lt;p&gt;This will save you a lot of time and also help your document "flow" nicely.&lt;/p&gt;

&lt;p&gt;A document outline is like a framework for the article, once you have it right all you need to do is follow your own structure and fill in the blanks.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2a-headings-first"&gt;
  &lt;/a&gt;
  2a. Headings First
&lt;/h3&gt;

&lt;p&gt;The easiest way to structure your document is to write down all of the headings first (or at least the top level headings - &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;s).&lt;/p&gt;

&lt;p&gt;This lets you put the sections in the right / logical order and also highlights areas where you may need some more research etc. before you start writing.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2b-bullet-points-and-curly-braces"&gt;
  &lt;/a&gt;
  2b. Bullet points and curly braces
&lt;/h3&gt;

&lt;p&gt;After you have your document headings outlined the next step is to detail what is going to go in each section.&lt;/p&gt;

&lt;p&gt;I have a useful method for you here!&lt;/p&gt;

&lt;p&gt;For each section I do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2-5 bullet points on what needs to be said in that section.&lt;/li&gt;
&lt;li&gt;add curly braces around any thoughts that pop into my head such as referencing sources, images / screen shots to include / create etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then once I have added bullet points and square brackets to all the sections I can just do CTRL + F and search for &lt;code&gt;{&lt;/code&gt; to quickly see what research I need to do / references I need to get together / screen shots / images I need.&lt;/p&gt;

&lt;p&gt;When you come to write your article leave these bullet points and curly braces in until you have dealt with them to make sure you don't miss anything!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2c-images-list"&gt;
  &lt;/a&gt;
  2c. Images list
&lt;/h3&gt;

&lt;p&gt;One final thing to note is that I keep my images list separate. &lt;/p&gt;

&lt;p&gt;That way I can just search for images all at one time rather than writing a bit, find an image, write some more, find another image. &lt;/p&gt;

&lt;p&gt;By not task switching / context switching often you will work more quickly.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-use-my-editor-if-you-dont-know-markdown"&gt;
  &lt;/a&gt;
  3. Use my editor if you don't know markdown
&lt;/h2&gt;

&lt;p&gt;New to writing in Markdown? It can be hard work.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://dev.to/p/editor_guide"&gt;DEV editor guide&lt;/a&gt; is useful, but it does take a while to learn everything.&lt;/p&gt;

&lt;p&gt;Don't worry though, I created a bookmarklet that gives you a WYSIWYG!&lt;/p&gt;

&lt;p&gt;It is only partially complete, but it has most of the features you need to make writing articles easy!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dECv5ZLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9w5mpc1w--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63sd35me1ncjdosgs9rj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dECv5ZLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9w5mpc1w--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63sd35me1ncjdosgs9rj.gif" alt="demo of formatting text with bold, italic, underlined and with a strikethrough"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#check-out-the-editor-here"&gt;
  &lt;/a&gt;
  Check out the editor here:
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/dev-to-markdown-editor-part-deux-massive-improvements-hack-2-continued-5mp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 new features, 51.3 new bugs added 😋, the DEV.TO 👩‍💻👨‍💻 editor [PART DEUX!]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Apr 7 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-fill-in-the-blanks-and-make-sure-to-link-to-any-references"&gt;
  &lt;/a&gt;
  4. Fill in the blanks and make sure to link to any references.
&lt;/h2&gt;

&lt;p&gt;By now you should have all of your headings planned out, a few bullet points under each heading, a list of research items and a list of images to find.&lt;/p&gt;

&lt;p&gt;Do your research first, that may alter your headings etc. &lt;/p&gt;

&lt;p&gt;Once you have all your research together it is time to start writing!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4a-sentence-and-paragraph-length"&gt;
  &lt;/a&gt;
  4a. Sentence and Paragraph Length
&lt;/h3&gt;

&lt;p&gt;You write differently on the internet to how you would in a book or in an English class.&lt;/p&gt;

&lt;p&gt;You should stick to very short paragraphs (1 to 3 sentences).&lt;/p&gt;

&lt;p&gt;Additionally you should try to keep your sentences short. &lt;/p&gt;

&lt;p&gt;Many people using DEV will not have English as a first language. Shorter sentences make your content easier to understand.&lt;/p&gt;

&lt;p&gt;Short sentences are also easier to follow for people with dyslexia etc.&lt;/p&gt;

&lt;p&gt;Finally due to screen sizes, short sentences and paragraphs are much more manageable on a mobile screen so you don't get massive walls of text!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4b-use-follow-on-words-phrases-transitions"&gt;
  &lt;/a&gt;
  4b. Use follow on words / phrases (transitions)
&lt;/h3&gt;

&lt;p&gt;Transitional words / phrases allow a reader to know that a paragraph / sentence is a continuation of a previous one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example&lt;/strong&gt; I just used the phrase "for example" to indicate that this sentence builds upon the previous one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In addition&lt;/strong&gt; to providing a nice flow to the document it helps with comprehension of your text (especially as we are splitting it into very short paragraphs so the association between sentences is not as clear).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-run-your-article-through-the-hemmingway-app"&gt;
  &lt;/a&gt;
  5. Run your article through the Hemmingway App
&lt;/h2&gt;

&lt;p&gt;Did you know that 1 in 5 people have the reading age expected of a 12 year old (in the UK, Germany and the USA at least...I am sure other Countries are the same).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hemingwayapp.com/"&gt;The Hemmingway App / Editor&lt;/a&gt; is a great tool to help make your text easier to understand. &lt;/p&gt;

&lt;p&gt;It highlights long sentences, passive voice etc. This helps with the points raised in section 4.&lt;/p&gt;

&lt;p&gt;In addition to this, be conscious of the complexity of the words / vocabulary you use.&lt;/p&gt;

&lt;p&gt;You do not need to use big words to make yourself sound smart. If you can simplify your language it means that more people will be able to enjoy and understand what you have to say!&lt;/p&gt;

&lt;p&gt;The Hemmingway editor will give your article a "grade" based on complexity. You are aiming for grade 7 or below ideally. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Due to sentence length and careful word choices, this article is only grade 3!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5a-use-grammarly-or-similar"&gt;
  &lt;/a&gt;
  5a. Use Grammarly or similar
&lt;/h3&gt;

&lt;p&gt;I need to do this one as my grammar is awful!&lt;/p&gt;

&lt;p&gt;Using a service such as &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt; will help make your article easier to read as well.&lt;/p&gt;

&lt;p&gt;This is especially useful if English is a second or third language and you choose to write in English, due to how weird and wonderful English Grammar is! &lt;/p&gt;

&lt;p&gt;If I was to write an article in German (which would be impressive given the 7 German words I know), I would look to find a similar service for writing in German.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-mind-your-language"&gt;
  &lt;/a&gt;
  6. Mind your language
&lt;/h2&gt;

&lt;p&gt;I am glad this isn't a case of "the person who is without sin can cast the first stone". 🤣&lt;/p&gt;

&lt;p&gt;I don't follow my own advice here when it comes to swearing. &lt;/p&gt;

&lt;p&gt;But there are things to be &lt;strong&gt;conscious of&lt;/strong&gt;, but no fixed rules as such. As I have said before &lt;a href="https://dev.to/inhuofficial/comment/1gfan"&gt;context is key&lt;/a&gt; to knowing what is appropriate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6a-swearing-i-should-listen-to-this"&gt;
  &lt;/a&gt;
  6a. Swearing (I should listen to this)
&lt;/h3&gt;

&lt;p&gt;Ah, who am I kidding, I f***ing love a good swear every now and then.&lt;/p&gt;

&lt;p&gt;But bear in mind that if you are going to use swearing in an article, you should put a warning at or near the start for the people who are offended by swear words. Make sure not to swear before that warning!&lt;/p&gt;

&lt;p&gt;Oh and don't do what I did...I screenshotted an offensive site I had built for the cover image of the article...and forgot to censor the swear words 🤦‍♂️! &lt;/p&gt;

&lt;p&gt;You should also bear in mind that DEV will not promote any articles with swear words in the titles on social media.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you are not offended by swearing...&lt;a href="https://ultimatemotherfuckingwebsite.com/"&gt;here is the highly offensive website in question&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6b-inclusive-language"&gt;
  &lt;/a&gt;
  6b. Inclusive language
&lt;/h3&gt;

&lt;p&gt;I am not going to lecture you on ableist language (as I know it is &lt;a href="https://dev.to/inhuofficial/comment/1gfan"&gt;such a difficult thing to get right (link to comment I made)&lt;/a&gt;), gendered language etc. &lt;/p&gt;

&lt;p&gt;Just bear it in mind. Use "they" &lt;strong&gt;where you can&lt;/strong&gt; instead of "he" and "she" (or mix it up throughout your article and try and keep it balanced).&lt;/p&gt;

&lt;p&gt;Use language that is acceptable in your culture for describing people with disabilities (and read up what is generally considered acceptable so you minimise the chance of people being offended).&lt;/p&gt;

&lt;p&gt;Don't use racial slurs, obviously! &lt;/p&gt;

&lt;p&gt;Oh and probably steer clear of politics unless you can take the heat! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-explain-abbreviations-and-acronyms"&gt;
  &lt;/a&gt;
  7. Explain abbreviations and acronyms
&lt;/h2&gt;

&lt;p&gt;Do not assume that people know what acronyms and abbreviations mean.&lt;/p&gt;

&lt;p&gt;People from various backgrounds and various stages in their careers from various disciplines will read your article.&lt;/p&gt;

&lt;p&gt;If you are going on about SSR then you need to explain what it is as there are &lt;a href="https://en.wikipedia.org/wiki/SSR"&gt;loads of possibilities for what SSR stands for&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Here are two ways you can explain abbreviations and acronyms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7a-brackets-method"&gt;
  &lt;/a&gt;
  7a. Brackets method
&lt;/h3&gt;

&lt;p&gt;When you first use an acronym or abbreviation write out the full phrase and then put the shortened version in brackets.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article we will be using JavaScript (JS) to create a Single Page Application (SPA).&lt;/p&gt;

&lt;p&gt;Our SPA will consist of three pages and all routing will be handled by JS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notice how I only add the full phrase once. After that you can use the abbreviation for the rest of the article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7b-glossary-method"&gt;
  &lt;/a&gt;
  7b. Glossary method
&lt;/h3&gt;

&lt;p&gt;If something needs a bit more explanation (or you don't want to slow the pace of your article if there are a lot of abbreviations in quick succession), then a glossary is a great solution.&lt;/p&gt;

&lt;p&gt;You add a section to the end of your document "Glossary".&lt;/p&gt;

&lt;p&gt;You then have a list of terms followed by their explanations (we can use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl"&gt;&lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt; element (and &lt;code&gt;&amp;lt;dt&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;dd&amp;gt;&lt;/code&gt;)&lt;/a&gt; for this. &lt;/p&gt;

&lt;p&gt;You need to then create a hyperlink that points to those terms in the glossary section.&lt;/p&gt;

&lt;p&gt;Here is an example for doing this in markdown:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;In this article we discuss [HTML](#def-html), [CSS](#def-css) and [JS](#def-js).

## First Heading etc.

[...all of your article content...]

## Glossary
&lt;span class="nt"&gt;&amp;lt;dl&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"def-html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;Short for Hyper Text Markup Language. It is a programming language 😉&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;dt&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"def-css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CSS&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;Short for Cascading Style Sheets, used to make stuff pretty&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;dt&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"def-js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;JS&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;Short for JavaScript, it was written in 10 days.&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice how I prefix the IDs with &lt;code&gt;def-&lt;/code&gt;, this is just to reduce the chance of collisions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#8-image-alt-text-a-top-tip"&gt;
  &lt;/a&gt;
  8. Image alt text, a top tip
&lt;/h2&gt;

&lt;p&gt;When writing alt text on images the aim is to provide information that is relevant &lt;strong&gt;in context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That is why it is impossible to just have generic alt text for an image and use it everywhere.&lt;/p&gt;

&lt;p&gt;One way to write good alt text is to imagine you are reading your articles to someone over the phone.&lt;/p&gt;

&lt;p&gt;When you get to the image, what information is important so they get an idea of what the image is about, and what it adds to the article.&lt;/p&gt;

&lt;p&gt;That is what your alt text should be.&lt;/p&gt;

&lt;p&gt;Oh and also, you don't need "image of"...people already know it is an image.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#9-create-a-contents-section-if-needed"&gt;
  &lt;/a&gt;
  9. Create a contents section if needed.
&lt;/h2&gt;

&lt;p&gt;Right now you should have a beautifully written article, using inclusive language and with great alt text (and possibly a glossary!).&lt;/p&gt;

&lt;p&gt;Once you are happy with the article, create a contents section!&lt;/p&gt;

&lt;p&gt;Now this is assuming your article is over 1000-1500 words in length (which a high quality article is likely to be).&lt;/p&gt;

&lt;p&gt;You do it last because as you write the article the order of sections and headings may change.&lt;/p&gt;

&lt;p&gt;I would advise only adding your &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;s to the contents to keep it from getting cluttered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I am working on adding an auto contents creator to the WYSIWYG I mentioned earlier&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#10-a-good-cover-image-is-important"&gt;
  &lt;/a&gt;
  10. A good cover image is important
&lt;/h2&gt;

&lt;p&gt;The cover image shows on social media and if you article happens to end up at the top of the home feed.&lt;/p&gt;

&lt;p&gt;It is also the first thing people see when they open your article.&lt;/p&gt;

&lt;p&gt;Make sure the image is engaging and relevant (or branded...)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#10a-create-your-own"&gt;
  &lt;/a&gt;
  10a. Create your own
&lt;/h3&gt;

&lt;p&gt;If you write regularly you may want to create a branded template for article covers. &lt;/p&gt;

&lt;p&gt;This saves time and also lets people start to recognise your branding and know to look out for your articles.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#11-refine-your-opening-paragraph"&gt;
  &lt;/a&gt;
  11. Refine your opening paragraph
&lt;/h2&gt;

&lt;p&gt;Right nearly ready to launch!&lt;/p&gt;

&lt;p&gt;Now we do some selfish stuff! We need to optimise our opening paragraph for SEO and engagement.&lt;/p&gt;

&lt;p&gt;Now that you have written the article, what will people learn, is there anything fun in the article that would grab people's attention etc?&lt;/p&gt;

&lt;p&gt;Also think about SEO. The first 100-200 words in an article are very important for SEO. &lt;/p&gt;

&lt;p&gt;Think about key terms, semantically relevant / similar terms etc. &lt;/p&gt;

&lt;p&gt;Obviously this is secondary to creating an engaging opening paragraph as read time is important!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#11a-also-check-your-closing-paragraphs"&gt;
  &lt;/a&gt;
  11a. Also check your closing paragraphs
&lt;/h3&gt;

&lt;p&gt;Same thing here. &lt;/p&gt;

&lt;p&gt;People tend to read the beginning and the end of an article more than any other parts. Yes, I am sorry to break it to you, people probably won't read your whole article (which is why we putting headings in!).&lt;/p&gt;

&lt;p&gt;So make sure your closing couple of paragraphs are engaging as well and, if you want people to do something (visit a site, leave a comment, follow you on social media etc.) then make sure you say that prominently.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#12-have-a-promotion-strategy-if-you-want-more-engagement"&gt;
  &lt;/a&gt;
  12. Have a promotion strategy if you want more engagement
&lt;/h2&gt;

&lt;p&gt;I wish I wasn't just starting to do this myself.&lt;/p&gt;

&lt;p&gt;Content will get some natural traction on DEV and it may even get shared on social media by a couple of people.&lt;/p&gt;

&lt;p&gt;But you need to be in control of your own destiny and not leave it up to others!&lt;/p&gt;

&lt;p&gt;Build a following on social media and then make sure that you queue posts on the various social media channels to send out when you publish your article.&lt;/p&gt;

&lt;p&gt;It is a case of "the rich get richer" on DEV. If you article gets a lot of likes early on then more people are likely to click into it.&lt;/p&gt;

&lt;p&gt;If you get enough likes your article will then sit near the top of the "week" tab, where it will get more likes and views. &lt;/p&gt;

&lt;p&gt;All of this increased your chances of a share on social media...which adds more likes etc.&lt;/p&gt;

&lt;p&gt;So if you can give your article a boost when you first publish it then you are far more likely for it to do well.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#13-pay-attention-to-comments-and-reply"&gt;
  &lt;/a&gt;
  13. Pay attention to comments (and reply!)
&lt;/h2&gt;

&lt;p&gt;Engaging with people who take the time to leave comments on your article (other than "thanks for this" type comments) is important.&lt;/p&gt;

&lt;p&gt;It is how you get people to follow you and more importantly the comments are where you pick up loads of hints and tips.&lt;/p&gt;

&lt;p&gt;Oh and for the love of all that is mighty please &lt;strong&gt;please&lt;/strong&gt;....&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#13a-fix-problems"&gt;
  &lt;/a&gt;
  13a. Fix problems!
&lt;/h3&gt;

&lt;p&gt;If somebody pops up in your comments section telling you there are problems with your article and how to fix them then &lt;strong&gt;fix them&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is no excuse, it takes 2 minutes to make a couple of edits.&lt;/p&gt;

&lt;p&gt;Also, don't say "yeah I will fix it and then do nothing about it"...such as &lt;a href="https://dev.to/inhuofficial/comment/1h5j9"&gt;in this article where I left a comment with a couple of fixes&lt;/a&gt; (yes I am calling people out on this now, there is no excuse for leaving mistakes in articles and misinforming people!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-tip-publish-your-article-on-your-own-site-first-if-you-have-one"&gt;
  &lt;/a&gt;
  Bonus Tip: Publish your article on your own site first (if you have one)
&lt;/h2&gt;

&lt;p&gt;Just a general Search Engine Optimisation (SEO) tip and only relevant if you have your own site (I &lt;strong&gt;still&lt;/strong&gt; haven't got mine up and running yet!). &lt;/p&gt;

&lt;p&gt;Publish articles on your own site a few days before you publish on DEV and other platforms. Even though canonical URLs are meant to make sure you get the link juice etc. it isn't perfect. &lt;/p&gt;

&lt;p&gt;If you launch on your own site first and wait for Google to index the page then you are far more likely to get your own site appearing in Google search results. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully those 13+1 points are useful to you.&lt;/p&gt;

&lt;p&gt;If anything isn't clear please let me know in the comments.&lt;/p&gt;

&lt;p&gt;Oh and above all, you should &lt;/p&gt;



&lt;p&gt;&lt;a href="https://twitter.com/intent/follow?screen_name=inhuofficial"&gt;&lt;strong&gt;follow me on Twitter&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;I am about to ramp up my content game on the bird app, you need to follow just for the dad jokes!&lt;/p&gt;

&lt;p&gt;Oh and one last thing, &lt;strong&gt;if you are wondering why this article has 13 points + a bonus&lt;/strong&gt;, then these two articles will make sure you are in on the joke!&lt;/p&gt;

&lt;p&gt;Oh and these articles have some great examples of what &lt;strong&gt;not&lt;/strong&gt; to do if you want to produce high quality content. Enjoy (silly posts)!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/13-amazing-tips-for-writing-listicles-5eja" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;13+ 🤩 amazing 🤩 tips for writing ✅ listicles ✅ [don't be mad that you didn't know them before!]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Jun 19 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/13-more-amazing-tips-for-writing-listicles-2hl5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;13++ More 🤯 Amazing 😍Tips for writing listicles [that will 🧨 blow people away]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Jun 21 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>a11y</category>
      <category>writing</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Concurrency Patterns in Go</title>
      <author>Karan Kumar </author>
      <pubDate>Fri, 20 Aug 2021 17:05:36 +0000</pubDate>
      <link>https://dev.to/karankumarshreds/concurrency-patterns-in-go-3jfc</link>
      <guid>https://dev.to/karankumarshreds/concurrency-patterns-in-go-3jfc</guid>
      <description>&lt;p&gt;Before we even begin to understand what "concurrency" is in Go, we need to make sure we understand that &lt;strong&gt;concurrency is not parallelism&lt;/strong&gt;. Parallelism is means parallel execution of processes where as &lt;strong&gt;concurrency&lt;/strong&gt; is about design. With concurrency you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design your program as a collection of independent processes.&lt;/li&gt;
&lt;li&gt;Design these processes to &lt;em&gt;eventually&lt;/em&gt; run in parallel.&lt;/li&gt;
&lt;li&gt;Design your code so that the outcome is always the same.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do not worry if you don't understand the above explanation, we will take a deep dive into concurrency patterns in this blog with real examples. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-can-we-achieve-with-concurrency"&gt;
  &lt;/a&gt;
  What can we achieve with Concurrency?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;We can have multiple groups of code(workers) running &lt;em&gt;independent tasks&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;We can eliminate &lt;em&gt;race conditions&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;We can eliminate &lt;em&gt;deadlocks&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The more &lt;em&gt;workers&lt;/em&gt; we have, the &lt;em&gt;faster&lt;/em&gt; the execution is.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#goroutines"&gt;
  &lt;/a&gt;
  Goroutines
&lt;/h2&gt;

&lt;p&gt;To understand concurrency, we must understand what Goroutines are. A Goroutine is a function or a method which executes independently and simultaneously in connection with any other Goroutines present in your program. &lt;br&gt;
So we could also say, &lt;em&gt;every concurrently running process in Go language is known as a Goroutine&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://xyz.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;//  👆 makes this method a GoRoutine&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The link %v is up"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Code explanation:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main function invokes the makeHttpCall() function with a keyword &lt;code&gt;go&lt;/code&gt; in front of it. This makes this function run on in a Goroutine. You can consider a Goroutine like a light weighted thread. The cost of creating Goroutines is &lt;strong&gt;very small&lt;/strong&gt; as compared to a thread.&lt;/p&gt;

&lt;p&gt;The main function also has its own routine which we do not have to define, known as &lt;strong&gt;main Goroutine&lt;/strong&gt;. All the other Goroutines are working under the main Goroutine. If the main Goroutine is terminated, all the other Goroutines present in the program are also terminated. &lt;/p&gt;

&lt;p&gt;Where are we going with this?&lt;/p&gt;

&lt;p&gt;Let us say we want to fetch data from multiple links without using Goroutines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// creating a slice of links &lt;/span&gt;
    &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"http://abc.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://pqr.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://xyz.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// fetching data from each link&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The link %v is up"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Code explanation:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This code will iterate over the &lt;code&gt;slice&lt;/code&gt; of links and &lt;code&gt;sequentially&lt;/code&gt; make http calls on each of the links. In case on of the links takes &lt;code&gt;x seconds&lt;/code&gt; to retrieve the response, the other main go routine will block for &lt;code&gt;x seconds&lt;/code&gt; before it sends the next request.&lt;/p&gt;

&lt;p&gt;We can easily make use of &lt;code&gt;Goroutines&lt;/code&gt; to fix this. Let us see the code and then we will discuss how it helps us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// creating a slice of links &lt;/span&gt;
    &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"http://abc.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://pqr.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://xyz.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// fetching data from each link&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// 👈&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The link %v is up"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Code explanation: &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We made use of the same &lt;code&gt;go&lt;/code&gt; keyword we discuss earlier to run the &lt;code&gt;makeHttpCall&lt;/code&gt; function in its own Goroutine. Now the main Goroutine will not wait for the request to be resolve, rather it will keep on iterating and creating separate Goroutine for each invocation of &lt;code&gt;makeHttpCall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's the catch!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We might think that this solves the issue, right? But it doesn't. The output of this function would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👆 Absolutely nothing. Why is that? &lt;strong&gt;#[1]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is because, the main go routine (tied to the main function by default) creates the Goroutine for each &lt;code&gt;makeHttpCall&lt;/code&gt; function invocation. Once the iteration is completed, the main function continues to run and reaches the end. It doesn't wait for the other Goroutines to finish.&lt;br&gt;
Remember, we discussed a few minutes ago "If the main Goroutine is terminated, all the other Goroutines present in the program are also terminated". This is exactly what happened. So how do we solve it?&lt;/p&gt;

&lt;p&gt;To solve this, we need a way to communicate between these Goroutines and the main Goroutine. And to communicate between multiple Goroutines, we make use of something called &lt;strong&gt;channels&lt;/strong&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#channels"&gt;
  &lt;/a&gt;
  Channels
&lt;/h2&gt;

&lt;p&gt;Go provides a mechanism called a channel that is used to share data between goroutines. Channels act as a pipe between the goroutines and provide a mechanism that guarantees a &lt;code&gt;synchronous&lt;/code&gt; exchange.&lt;/p&gt;

&lt;p&gt;There are two types of channels: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Unbuffered channels (which we will be using for the example)&lt;/li&gt;
&lt;li&gt;Buffered channels&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Unbuffered&lt;/strong&gt; channels are used to perform &lt;code&gt;synchronous&lt;/code&gt; communication within the goroutines. These provide a guarantee that an exchange of the data is performed at the instant it is sent.&lt;/p&gt;

&lt;p&gt;In go we &lt;code&gt;declare&lt;/code&gt; the channels and we also must specify the &lt;code&gt;data-type&lt;/code&gt; at the time of the channel declaration. The &lt;code&gt;data-type&lt;/code&gt; is the type of the data that will be shared through the channel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;myChannel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means, this channel can be used to only share the data of type &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Buffered&lt;/strong&gt; channels are used to perform &lt;code&gt;asynchronous&lt;/code&gt; communication within the goroutines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;myBufferedChannel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#buffered-channels-you-may-skip-this-section"&gt;
  &lt;/a&gt;
  Buffered channels (you may skip this section)
&lt;/h3&gt;

&lt;p&gt;In the buffered channels there is a capacity to hold &lt;code&gt;one or more values&lt;/code&gt; before they're received. The sending and receiving is not performed synchronously and immediately. &lt;/p&gt;

&lt;p&gt;The blocking cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;receive&lt;/strong&gt; will block when there is no value in the channel to receive.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;send&lt;/strong&gt; will block when there is no &lt;code&gt;available buffer&lt;/code&gt; to place the value being sent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"io/ioutil"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"sync"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// initializing a WaitGroup&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitGroup&lt;/span&gt;

    &lt;span class="c"&gt;// adding 3 counts/buffer to the WaitGroup&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Start Goroutines"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;responseSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://www.golangprograms.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;responseSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://stackoverflow.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;responseSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://coderwall.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// wait for goroutines to finish&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Terminating the main program"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// just prints the response size of the body returned&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;responseSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitGroup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// schedule the Done() call when the goroutine is finished&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Step1: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Step2: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Step3: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output for the above program would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Start Goroutines
Step1:  https://coderwall.com
Step1:  https://www.golangprograms.com
Step1:  https://stackoverflow.com     
Step2:  https://stackoverflow.com
Step2:  https://www.golangprograms.com
Step3:  31857
Step3:  207321
Step2:  https://coderwall.com
Step3:  189752
Terminating the main program
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is quite intuitive how it worked. For the people who did not understand this, three different goroutines were spun up and the main program, waited (using wait group) for the all the goroutines to finish before terminating the program.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#back-to-the-main-topic"&gt;
  &lt;/a&gt;
  Back to the main topic 🎉
&lt;/h2&gt;

&lt;p&gt;We learned about channels and how they act as pipes to communicate data within the goroutines. Let us continue with the issue at hand &lt;strong&gt;#[1]&lt;/strong&gt;, that is the how to stop code to from terminating before goroutines are finished executing and get access to which link is down or not. &lt;/p&gt;

&lt;p&gt;So in this code, we will make use of channels and communicate the main goroutine (running by default in the main function) and the goroutine spun up during the helper function invocation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// creating a channel to share string type data&lt;/span&gt;
    &lt;span class="n"&gt;myChanel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// creating a slice of links &lt;/span&gt;
    &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"http://abc.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://pqr.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"http://xyz.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// fetching data from each link&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myChanel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// listening for three messages coming from the chanel&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Link %v is up &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;myChanel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;makeHttpCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myChanel&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// sending the link name to the chanel 👈&lt;/span&gt;
        &lt;span class="n"&gt;myChanel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the above program is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Link http://abc.com is up
Link http://xyz.com is up
Link http://pqr.com is up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Code explanation: &lt;/p&gt;

&lt;p&gt;So here, we listened (3 times) for the message to receive (synchronously) from the goroutines &lt;code&gt;from the channel&lt;/code&gt;.&lt;br&gt;
In other words, the main function's goroutine waited for the chanel to receive a message, printed out the print statement, and then went on to receive the next message from  the channel and repeated itself three times. &lt;/p&gt;

&lt;p&gt;That's all there is to know the &lt;strong&gt;basics&lt;/strong&gt; of goroutines and concurrency patterns. There is a lot more to learn. So, in the future blogs, we will take a deep dive on how everything is being handled behind the scenes. Until then, peace ✌&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>distributedsystems</category>
      <category>webassembly</category>
      <category>go</category>
    </item>
    <item>
      <title>7 things you should know about CYBERSECURITY for 2022</title>
      <author>Dotnetsafer</author>
      <pubDate>Fri, 20 Aug 2021 16:54:57 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/7-things-you-should-know-about-cybersecurity-for-2022-4pe7</link>
      <guid>https://dev.to/dotnetsafer/7-things-you-should-know-about-cybersecurity-for-2022-4pe7</guid>
      <description>&lt;p&gt;Every time everything is being digitalized more and more, many companies and &lt;strong&gt;SMEs&lt;/strong&gt; choose to redefine and adapt their business model to adapt to the changes that have occurred in the habits and customs of both consumers; &lt;strong&gt;B2C&lt;/strong&gt; (Business to client), as well as from other companies; &lt;strong&gt;B2B&lt;/strong&gt; (Bussiness to Bussiness).&lt;/p&gt;

&lt;p&gt;The digitization of a company &lt;strong&gt;allows&lt;/strong&gt; them to be much closer to their client, find new business opportunities and improve productivity.&lt;/p&gt;

&lt;p&gt;But not everything is so good, the increase in the digitization of companies also implies an &lt;strong&gt;increase in cyberattacks&lt;/strong&gt;, which can make companies lose millions, even lead them to bankruptcy.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-much-are-the-costs-of-cybercrime"&gt;
  &lt;/a&gt;
  How much are the costs of cybercrime?
&lt;/h2&gt;

&lt;p&gt;The costs related to cybercrime in the world will reach &lt;strong&gt;6 trillion dollars&lt;/strong&gt; this year, a figure that slightly exceeds the size of the GDP of Japan, the third largest global economy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X1CwMvWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AVbMvlHQJocdMOSUCfDqGOA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X1CwMvWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AVbMvlHQJocdMOSUCfDqGOA.png" alt="cybersecurity"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-the-probability-of-suffering-a-cyber-attack"&gt;
  &lt;/a&gt;
  What is the probability of suffering a cyber attack?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;39%&lt;/strong&gt; of companies (4 out of 10) confirm having suffered cybersecurity breaches or attacks in the last 12 months (it has dropped from &lt;strong&gt;46% in 2020&lt;/strong&gt;). These attacks were highest in medium-sized companies (50 to 249 employees) and closely matched with large companies (250 employees or more): &lt;strong&gt;65% and 64%&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YW_vzj5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AfDFwMX1Cmjp4eF8p1kRNvA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YW_vzj5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AfDFwMX1Cmjp4eF8p1kRNvA.png" alt="cybersecurity"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-the-cybersecurity-budget-of-a-company"&gt;
  &lt;/a&gt;
  What is the cybersecurity budget of a company?
&lt;/h2&gt;

&lt;p&gt;Gartner expects enterprise IT security budgets to &lt;strong&gt;rise by 50% this year&lt;/strong&gt;. Given the risk of theft of corporate information, which, according to the latest Accenture diagnosis, is the most expensive component of cyberattacks, which cause disbursements of &lt;strong&gt;5.9 million dollars&lt;/strong&gt; per affected company per year, also on average.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DqpMtvJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A3IrzJ_47Z1M6rsLdmHtoEQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DqpMtvJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A3IrzJ_47Z1M6rsLdmHtoEQ.png" alt="cybersecurity"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-much-does-a-company-spend-on-cybersecurity"&gt;
  &lt;/a&gt;
  How much does a company spend on cybersecurity?
&lt;/h2&gt;

&lt;p&gt;50% of large companies, with more than 10,000 employees, as explained by the Ponemon Institute, allocate &lt;strong&gt;1 million dollars&lt;/strong&gt; or more in security expenses, and &lt;strong&gt;43%&lt;/strong&gt;, more than &lt;strong&gt;250,000 dollars.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KtMdOxzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AvV2uLL0sZPoqEIq7nXPW_g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KtMdOxzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AvV2uLL0sZPoqEIq7nXPW_g.png" alt="cybersecurity"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-much-is-the-loss-caused-by-a-cyberattack-on-a-company"&gt;
  &lt;/a&gt;
  How much is the loss caused by a cyberattack on a company?
&lt;/h2&gt;

&lt;p&gt;It is estimated that the loss of data caused by computer attacks causes damages worth between &lt;strong&gt;2,000&lt;/strong&gt; and &lt;strong&gt;50,000&lt;/strong&gt; dollars for small and medium-sized corporations, according to the Incibe. In contrast, losses for large firms amount to &lt;strong&gt;3.6 million dollars&lt;/strong&gt;, according to &lt;strong&gt;IBM.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WVFBa3uW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AZSqrI5Vq8T_mdHMq-2ZKOQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WVFBa3uW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AZSqrI5Vq8T_mdHMq-2ZKOQ.png" alt="cybersecurity"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-the-worldwide-loss-of-companies-due-to-cyberattacks"&gt;
  &lt;/a&gt;
  What is the worldwide loss of companies due to cyberattacks?
&lt;/h2&gt;

&lt;p&gt;At the international level, economic losses from cyberattacks in 2020 exceeded &lt;strong&gt;million dollars&lt;/strong&gt;. Undoubtedly, a figure that reveals the magnitude of the consequences caused by these incidents and the urgent need for companies and public administrations to be well prepared in this matter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SUxFpg_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AaR8exB5omaYGAK-MBcTPGA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SUxFpg_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AaR8exB5omaYGAK-MBcTPGA.png" alt="cybersecurity"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-long-does-it-take-for-a-business-to-recover-from-a-cyber-attack"&gt;
  &lt;/a&gt;
  How long does it take for a business to recover from a cyber attack?
&lt;/h2&gt;

&lt;p&gt;Everything would depend on the size of the company, the amount invested in cybersecurity per year, the type of attack and the affected part. But it is estimated that it causes &lt;strong&gt;50 days&lt;/strong&gt; of repair time in malware actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxxgKcOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ARlDa_lUaLwztFx-gmV5NYg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxxgKcOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ARlDa_lUaLwztFx-gmV5NYg.png" alt="cybersecurity"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-is-cybersecurity-important-for-a-company"&gt;
  &lt;/a&gt;
  Why is Cybersecurity important for a company?
&lt;/h2&gt;

&lt;p&gt;Cybersecurity is important because it protects all categories of data from theft and damage. This includes sensitive data, personally identifiable information &lt;strong&gt;(PII)&lt;/strong&gt;, protected health information &lt;strong&gt;(PHI)&lt;/strong&gt;, personal information, intellectual property, data, and governmental and industry information systems.&lt;/p&gt;

&lt;p&gt;Without a cybersecurity program, your organization &lt;strong&gt;cannot defend itself&lt;/strong&gt; against data breach campaigns, making it an irresistible target for cybercriminals.&lt;/p&gt;

&lt;p&gt;Both inherent risk and residual risk is increasing, driven by global connectivity and usage of cloud services, like &lt;strong&gt;Amazon Web Services&lt;/strong&gt;, to store sensitive data and personal information. Widespread poor configuration of cloud services paired with increasingly sophisticated cybercriminals means the risk that your organization suffers from a successful cyber attack or data breach is on the rise.&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>security</category>
      <category>dotnet</category>
      <category>technology</category>
    </item>
    <item>
      <title>How Unicode helps to ruin your software</title>
      <author>Catherine Galkina</author>
      <pubDate>Fri, 20 Aug 2021 16:47:49 +0000</pubDate>
      <link>https://dev.to/typeable/how-unicode-helps-to-ruin-your-software-246j</link>
      <guid>https://dev.to/typeable/how-unicode-helps-to-ruin-your-software-246j</guid>
      <description>&lt;p&gt;Author: Ville Tirronen&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yLFAt89q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/unicode/unicode_en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLFAt89q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/unicode/unicode_en.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-unicode-erases-most-of-our-assumptions-on-how-strings-actually-work"&gt;
  &lt;/a&gt;
  How Unicode erases most of our assumptions on How Strings Actually Work
&lt;/h2&gt;

&lt;p&gt;We programmers mostly fly by the seat of our pants when it comes to writing simple stuff. For simple things, we have a strong set of assumptions instead of specific knowledge of how things work. These are assumptions, such as knowing that if &lt;code&gt;b = a + 1&lt;/code&gt;, then &lt;code&gt;b&lt;/code&gt; is greater than &lt;code&gt;a&lt;/code&gt; or that if we &lt;code&gt;malloc&lt;/code&gt; some buffer, we now have the requested amount of memory we can write on. We don't go and look at the specifications for each and everything small thing we do.&lt;/p&gt;

&lt;p&gt;We do this because checking everything would slow us down. But, if we did check, we'd find out that we're usually wrong in our assumptions. There are numeric overflows and then &lt;code&gt;a + 1&lt;/code&gt; might be a lot less than &lt;code&gt;a&lt;/code&gt;. Sometimes &lt;code&gt;malloc&lt;/code&gt; will give us a &lt;code&gt;null&lt;/code&gt; instead of a buffer and were hosed.&lt;/p&gt;

&lt;p&gt;We usually have to be bitten by these issues before we update our assumptions even a little bit. And even then, we usually correct them in broad strokes. After having a nasty overflow bug, we might correct our assumptions on integers  to "&lt;code&gt;a + 1&lt;/code&gt; is greater than &lt;code&gt;a&lt;/code&gt; unless there's a chance that &lt;code&gt;a&lt;/code&gt; is a very big number". And we work based on that instead of having any precise rules how overflows work in our minds.&lt;/p&gt;

&lt;p&gt;Adjusted assumptions are called experience. They make you faster and correct more often.  However, we might relocate some stuff, like proper handling of &lt;code&gt;malloc&lt;/code&gt;,  entirely from our internal category of 'easy stuff' to our internal category of 'complex stuff'. And then we might actually go and look up how it works.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about-strings"&gt;
  &lt;/a&gt;
  About Strings
&lt;/h1&gt;

&lt;p&gt;For beginners, Strings are the archetypal example of 'easy stuff'. Most likely, we learned letters and numbers as children and they feel very familiar to us. Secondly, when learning to program most of us have done lot's of programming exercises using Strings, because they are about the only interesting pre-built data type in most languages. We feel quite confident how Strings work when programming with them.  Thirdly, we might have a good number of assumptions related to functioning of some simple character set, like ASCII or ISO-8859-1. Either because we're that old, or because our teachers were that old. Those were character sets of the simpler times!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DuucR4x3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/5/5b/UNIVAC_1050-II.jpg/1280px-UNIVAC_1050-II.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DuucR4x3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/5/5b/UNIVAC_1050-II.jpg/1280px-UNIVAC_1050-II.jpg" alt="Univac 1050-II, 1964, first computer using ASCII (wikipedia)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Origin:&lt;a href="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5b/UNIVAC_1050-II.jpg/1280px-UNIVAC_1050-II.jpg"&gt;https://upload.wikimedia.org/wikipedia/commons/thumb/5/5b/UNIVAC_1050-II.jpg/1280px-UNIVAC_1050-II.jpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, in the real, Strings are a very complicated thing. Contrast them to, for example, your usual, found in any language, &lt;code&gt;Int&lt;/code&gt;. We know and understand the representation (64 bits, two's complement) ^[Or we can spend 15 minutes in Wikipedia to learn it] and we understand its semantics (behaves like a number, except if too large or too small). For Strings, we &lt;em&gt;used&lt;/em&gt; to know the representation (one byte per character, check the ASCII table for what character it is), but we almost never know the semantics. Our String could contain our customers name. It could contain a number, bit of JSON or even an SQL statement.&lt;/p&gt;

&lt;p&gt;Strings are the ultimate &lt;code&gt;Any&lt;/code&gt;-type and chances are that if there is no ready made representation for some item in a program, it will be stored and operated as a String. Regardless of whether you have dynamic or static types, this throws all type safety to the wind. And, to compound, many of the things we use Strings for are bloody dangerous, like SQL or HTML. And for that reason, SQL injections and cross site scripting lead the vulnerability top lists year after year.&lt;/p&gt;

&lt;p&gt;But, at least we understand how Strings work, as you know, Strings? We know how to concatenate, change case and so on, right?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#unicode"&gt;
  &lt;/a&gt;
  Unicode
&lt;/h1&gt;

&lt;p&gt;Understanding Strings is lot harder now than it was in around year 2000. We have been transitioning to Unicode for few decades now and its already been few years since I've heard anyone complain why their characters aren't displayed right. ^[Printing them is another matter. I hope that it will be solved in 22th century]&lt;/p&gt;

&lt;p&gt;While being otherwise awesome, Unicode effectively erases most of our 'useful' assumptions on how Strings actually work, but we haven't been very verbal on that happening. And unfortunately, many of us are probably still working with outdated assumptions on how Strings work. And, to make it worse, many of us no longer understand the memory representation of Strings either. ^[Admittedly, I don't, really]&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#broken-assumptions"&gt;
  &lt;/a&gt;
  Broken assumptions
&lt;/h1&gt;

&lt;p&gt;Next, lets go through some of my old assumptions that I needed to throw out with ISO-8859-1 character set.  Surely, this is not an exhaustive list, but hopefully it is enough to kick the (Unicode) Strings out of your mental compartment of 'simple things'.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-character-is-representable-by-single-byte"&gt;
  &lt;/a&gt;
  A character is representable by single byte
&lt;/h2&gt;

&lt;p&gt;In the olden days of ASCII, each character fitted it seven bytes, making it easy to size buffers and scan memory. With Unicode this is an terrible assumption. Let's walk through one arbitrary example to show why.&lt;/p&gt;

&lt;p&gt;At some point, Wordpress devs were fighting to stop SQL-injections from happening.  The one example issue they were trying to fix was someone adding unwanted single quotes in the user input and messing their database with it.&lt;br&gt;
Something like this imaginary example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select 1 from accounts 
where user = '%s' 
    and password = '%s'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;↓↓ (User supplies "whocares' or true -- " as password)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select 1 from accounts 
where user = 'Avery' 
    and password = 'whocares' or true -- '
-- And now everyone can log in as Avery!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the simplest imaginable way to solve this is to properly encode the single quote in the user input. ^[But, that is simple in imagination only. Don't.] That is, each single quote &lt;code&gt;'&lt;/code&gt; must be encoded as &lt;code&gt;\'&lt;/code&gt;, or backslash-single-quote.&lt;/p&gt;

&lt;p&gt;PHP devs then wrote &lt;code&gt;addslashes&lt;/code&gt; function and everything was well for a while. The only problem was that they did the escaping byte by byte and not character by character. The devs were also blind to the problem as they only worked with single byte Unicode characters (mostly old ASCII). Then, someone figured out that if you fed the system a String like &lt;code&gt;"뼧 or true -- "&lt;/code&gt; you'd get the SQL injection again.&lt;/p&gt;

&lt;p&gt;To understand why lets look up how these characters are represented in Unicode:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;code&lt;/th&gt;
&lt;th&gt;character&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0xbf27&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;뼧&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0xbf5c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;뽜&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0x27&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0x5c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;What the &lt;code&gt;addslashes&lt;/code&gt; actually did was to replace all the value &lt;code&gt;27&lt;/code&gt; -bytes with bytes &lt;code&gt;5c 27&lt;/code&gt;. So,  &lt;code&gt;"뼧 or true -- "&lt;/code&gt; turned into &lt;code&gt;"뽜' or true -- "&lt;/code&gt; and again, there were injections.&lt;/p&gt;

&lt;p&gt;It is not hard to imagine other similar disasters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-lengths-are-somewhat-stable"&gt;
  &lt;/a&gt;
  String lengths are somewhat stable
&lt;/h2&gt;

&lt;p&gt;In ASCII, the many of the common String processing operations were invariant regards to the length of the Strings. This is not so with Unicode. And though this property is probably relevant only if you're manually allocating buffers, or trying to size up graphics, let's look at few cases where String lengths change unexpectedly.&lt;/p&gt;

&lt;p&gt;Firstly, to pick a common String operation as an example, does &lt;code&gt;length(x) = length(toUpper(x))&lt;/code&gt; hold for Unicode &lt;code&gt;x&lt;/code&gt;?  No, since Unicode has, among other things, ligature characters such as &lt;code&gt;ﬁ&lt;/code&gt;, which expand 2 fold to &lt;code&gt;FI&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Second example concerns normalization. Since there are multiple code points for the same character, Unicode forces you to do normalization so that two users don't, for example, end up with identical screen names. One would guess that normalization, or the process of picking up a canonical representation for some set of characters would not affect the number of normalized characters, but it indeed does: single character &lt;code&gt;ﷺ&lt;/code&gt; expands 18 fold into &lt;code&gt;صلى الله عليه وسلم&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, it is probably better not to assume anything about lengths of Strings after any operation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upper-and-lowercase-are-somehow-linked"&gt;
  &lt;/a&gt;
  Upper and lowercase are somehow linked
&lt;/h2&gt;

&lt;p&gt;We, who lived with variants of ASCII tend make lot of use of upper and lower casing operations. Besides of them now being able to change the lengths of the Strings, there are some additional sharp edges. Most importantly, the old assumption that upper and lower case letters are in unique correspondence is lost.&lt;/p&gt;

&lt;p&gt;With Unicode, converting string to uppercase can lose more information than just what case the characters were in. For example if you lowercase the Kelvin symbol &lt;code&gt;K&lt;/code&gt;, you get an ordinary lowercase &lt;code&gt;k&lt;/code&gt; back, with no way of converting it back. This has surprisingly lot of relevance when doing case insensitive comparisons, since &lt;code&gt;toLower('K') == toLower('k')&lt;/code&gt; but &lt;code&gt;toUpper('K') != toUpper('k')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJsYKYnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Upper_case_and_lower_case_types.jpg/800px-Upper_case_and_lower_case_types.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJsYKYnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Upper_case_and_lower_case_types.jpg/800px-Upper_case_and_lower_case_types.jpg" alt="Reason for calling them upper and lower case letters: Uppercase ones go to the 'upper case'. (wikipedia)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Origin: &lt;a href="https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Upper_case_and_lower_case_types.jpg/800px-Upper_case_and_lower_case_types.jpg"&gt;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Upper_case_and_lower_case_types.jpg/800px-Upper_case_and_lower_case_types.jpg&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#space-is-0x20"&gt;
  &lt;/a&gt;
  Space is 0x20
&lt;/h2&gt;

&lt;p&gt;This assumption is still true. The byte 0x20 represents space in Unicode. But so do U+2000, U+2001, U+2002 and many others, including a zero width space character U+FEFF.  Whitespace is special. We can't allow screen names like "TheAlex" and "TheAlex " at the same time because HTML will not show that whitespace and other users couldn't tell the difference. So we must remove leading and trailing whitespace before processing.&lt;/p&gt;

&lt;p&gt;And now, Unicode makes it possible to screw up royally here. All it takes is one spot in the code where someone forgets about multitude of whitespace and we end up with unnormalized data in our database. And things start to go fail here and there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#characters-look-different"&gt;
  &lt;/a&gt;
  Characters look different
&lt;/h2&gt;

&lt;p&gt;Unlike ASCII, Unicode has multiple code points for the same character and multiple characters that look nearly, or completely, identical without being the same character. As a concrete example, paste &lt;code&gt;"tyрeablе" == "typeable"&lt;/code&gt; to your favourite REPL. ^[repl.it is handy if you have none at the hand]&lt;/p&gt;

&lt;p&gt;Got &lt;code&gt;False&lt;/code&gt;? That is because the p is not a p but a Russian character for 'er' sound. &lt;/p&gt;

&lt;p&gt;As to why this is a problem, let's take this bit of our database schema as an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"uniq_address" UNIQUE CONSTRAINT, btree (country, city, address)
"uniq_name" UNIQUE CONSTRAINT, btree (name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I would posit that in Unicode era, these constraints make no sense at all.&lt;br&gt;
Being user input the user is free to mimic whatever address or name they want. This allows the user to attempt all kinds of heists by, say having same screen name as someone else. Also, things like addresses don't stay&lt;br&gt;
digital. Sooner or later, it's going to be read or printed and then the difference, which the database was keen to notice, will be gone. Is there anything analog in your process that could be exploited by pretending to be an another user?&lt;/p&gt;

&lt;p&gt;This problem certainly preceded Unicode, especially in some character sets like ISO-8859-5, but Unicode makes this much worse and more widely applicable. Getting down to it, you can't assume almost anything about how the string is going to l̷o̵o̷k̵ ̶l̴i̴k̵e̷.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text-goes-from-left-to-right"&gt;
  &lt;/a&gt;
  Text goes from left to right
&lt;/h2&gt;

&lt;p&gt;Quickly, what happens if I'd paste this to my terminal?&lt;/p&gt;

&lt;p&gt;‮rm -rf your_home_directory # dlrow olleh ohce&lt;/p&gt;

&lt;p&gt;I dare you to try yourself. You can use any reasonable dumb thing to paste this in instead of your terminal if you care about your home directory.&lt;/p&gt;

&lt;p&gt;Some languages are not written from left to right, and to accommodate them, Unicode has these 'flip the direction of writing' -codes. The actual text is the same even though it is written from right to left, so your terminal probably would try to wipe your files if you had tried my example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u66hX8o9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/8/82/003151_Al-Imran_UrduScript.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u66hX8o9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/8/82/003151_Al-Imran_UrduScript.jpg" alt="Urdu script, which is written from right to left (check the last line) (wikipedia)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Origin: &lt;a href="https://upload.wikimedia.org/wikipedia/commons/8/82/003151_Al-Imran_UrduScript.jpg"&gt;https://upload.wikimedia.org/wikipedia/commons/8/82/003151_Al-Imran_UrduScript.jpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides messing with my colleagues on Teams with this, this bidirectional writing has been used for quite a many hoaxes, the longtime favourite being flipping long URLs backwards so they look innocent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strings-have-the-same-decoding"&gt;
  &lt;/a&gt;
  Strings have the same decoding
&lt;/h2&gt;

&lt;p&gt;One of the things we happily assumed with ASCII (and variants) was that the decoding was trivial and unlikely to go wrong. Some of my University colleagues can read ASCII fluently from hex dumps! This meant that the only problem when transmitting data as Strings was to correctly parse the contents of the String.&lt;/p&gt;

&lt;p&gt;Unicode, being a multibyte encoding adds another step. You must first parse the String, before you can get started on the content.&lt;/p&gt;

&lt;p&gt;Now, parsing is one of the problem areas that is known to cause security issues. One of the key problems is that the same String may get parsed differently in one program than in another. A good contemporary example of this is having and html sanitizer (thing that stops XSS) speak bit different dialect of HTML than the browser that the user is using. If these bits disagree on the interpretation of some String, the sanitizer might judge it to be free of scripts and other malicious items, while the browser could interpret things slightly differently and start executing bits of the input as scripts. ^[Using the same channel for control and content must be worth more than the billion dollar mistake of including null in programming languages!]&lt;/p&gt;

&lt;p&gt;Now this is exacerbated by Unicode, since not all Unicode parsers agree on all sets of bytes. Mostly, it is the illegal Unicode sequences that get handled differently. For example "e3 80 22" is an invalid Unicode sequence and one Unicode parser might judge it to be one illegal character while another could be more lax and interpret it as three: &lt;code&gt;ã&lt;/code&gt;, &lt;code&gt;\x80&lt;/code&gt; and &lt;code&gt;"&lt;/code&gt;. Now, to put this into web context, the last of the three could be a problem since&lt;br&gt;
it would allow XSS through attribute values.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concluding-thoughts"&gt;
  &lt;/a&gt;
  Concluding thoughts
&lt;/h1&gt;

&lt;p&gt;As a software engineer, Unicode puts a lot of complexity on my table and much of that I really wouldn't need. The individual gotchas listed above are not so hard to handle by themselves, but the effect their presence has on the whole system can be significant. Now you need to decide what kind of strings you allow in your system, you need figure out how to properly normalize them, how to eliminate homoglyphs and strip and trim whitespace. &lt;/p&gt;

&lt;p&gt;The problem with this is that all such things must happen uniformly. If you normalize a String in a certain way in one bit of your program and some other bit does it differently, you have an inconsistency, or a security issue at the worst. You also have to take this into account, because, well mistakes happen and try to record precisely what has been done to each String so you can take that into account when using them.&lt;/p&gt;

&lt;p&gt;And, unfortunately, no, you cannot just 'fix your strings' at every use point. Some string operations are only safe to do once or you lose information or worse. You need to know and track the semantics of Strings to know what steps you need, and what steps you can't take in the context you are working on.&lt;/p&gt;

</description>
      <category>unicode</category>
      <category>ascii</category>
      <category>programming</category>
      <category>security</category>
    </item>
    <item>
      <title>Pin Match JS</title>
      <author>Al Siam</author>
      <pubDate>Fri, 20 Aug 2021 16:29:06 +0000</pubDate>
      <link>https://dev.to/alsiamworld/pin-match-js-3m2k</link>
      <guid>https://dev.to/alsiamworld/pin-match-js-3m2k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-10-"&gt;
  &lt;/a&gt;
  100daysofcode [ day -10 ]
&lt;/h1&gt;

&lt;p&gt;Today I did a pin match. You can create a pin and if it matches, it will show you success otherwise it will show you an error.&lt;/p&gt;

&lt;p&gt;live Site: &lt;a href="https://100daysofcode-day10-alsiam.netlify.app/"&gt;https://100daysofcode-day10-alsiam.netlify.app/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0xrYnz6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cbr9yso3dxoqx8dl1ic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0xrYnz6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cbr9yso3dxoqx8dl1ic.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#devcommunity-bootstrap-webdevelopment"&gt;
  &lt;/a&gt;
  DEVCommunity #bootstrap  #webdevelopment
&lt;/h1&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Portfolio Website Design with HTML &amp; JavaScript</title>
      <author>Aniket</author>
      <pubDate>Fri, 20 Aug 2021 16:25:32 +0000</pubDate>
      <link>https://dev.to/anikets_1801/portfolio-website-design-with-html-javascript-4la2</link>
      <guid>https://dev.to/anikets_1801/portfolio-website-design-with-html-javascript-4la2</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wx_DrSUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ob603gt1toly2thm2kfv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wx_DrSUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ob603gt1toly2thm2kfv.png" alt="Portfolio Landing Page by Code Savvy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Dear Developers, In this post we'll create a Portfolio Page design using HTML, CSS &amp;amp; Some of the Powerful JavaScript Animations from GSAP Library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow the Below Given link to watch full tutorial along with me :&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;&lt;a href="https://youtu.be/uNPola_h_Oo"&gt;Click to watch&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to skip the tutorial and want to grab the &lt;strong&gt;source code&lt;/strong&gt;, follow below given &lt;strong&gt;Repo link&lt;/strong&gt; : &lt;br&gt;
&lt;a href="https://github.com/ananikets18/Portfolio-Landing-Page-Design-HTML-CSS-Javascript-GSAP"&gt;Repository Link&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%E2%8F%B1-outline"&gt;
  &lt;/a&gt;
  ⏱ Outline
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;0:00 - Intro&lt;/li&gt;
&lt;li&gt;0:34 - Structure&lt;/li&gt;
&lt;li&gt;4:21 - Setting CSS&lt;/li&gt;
&lt;li&gt;4:48 - Wrapper&lt;/li&gt;
&lt;li&gt;5:05 - Left Menu&lt;/li&gt;
&lt;li&gt;5:20 - Logo&lt;/li&gt;
&lt;li&gt;6:04 - Social Icons&lt;/li&gt;
&lt;li&gt;7:34 - Nav&lt;/li&gt;
&lt;li&gt;8:58 - Large Text&lt;/li&gt;
&lt;li&gt;9:36 - Red Box&lt;/li&gt;
&lt;li&gt;10:27 - See Photos&lt;/li&gt;
&lt;li&gt;11:01 - Desc Content&lt;/li&gt;
&lt;li&gt;13:08 - Slide&lt;/li&gt;
&lt;li&gt;13:30 - Overlay&lt;/li&gt;
&lt;li&gt;14:26 - Navbar Links JS&lt;/li&gt;
&lt;li&gt;15:11 - TweenMax (GSAP) Animations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👍 Thanks for watching!&lt;/p&gt;

&lt;p&gt;Happy Coding :)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Time Management for Programmers</title>
      <author>Alec</author>
      <pubDate>Fri, 20 Aug 2021 16:12:58 +0000</pubDate>
      <link>https://dev.to/alecbsherman/time-management-for-programmers-ge3</link>
      <guid>https://dev.to/alecbsherman/time-management-for-programmers-ge3</guid>
      <description>&lt;p&gt;You have too much work and it's impossible to get it all done in 40, 60 or even 80 hours per week.&lt;/p&gt;

&lt;p&gt;This is often the case for successful, talented software developers.  Your time is valuable so how do you schedule your time to increase your productivity?&lt;/p&gt;

&lt;p&gt;This article is not about coding tips like writing macros and using coding standards.  I have a &lt;a href="https://youtu.be/3mlWO01OWIo"&gt;Coding Standards&lt;/a&gt; video about that.  This is about prioritizing tasks and optimizing how you schedule your time.&lt;/p&gt;

&lt;p&gt;This article is also available in video form:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nMZA7Emr5z4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-step-make-a-list"&gt;
  &lt;/a&gt;
  First Step - Make a List
&lt;/h2&gt;

&lt;p&gt;Write down all your current tasks.   You're not writing a functional or technical here.  Just one-liner descriptions of each to-do item.  If the item doesn't need to be done this week it should not even be on the list.  If you're worried you'll forget it, then put it in a separate list for "To Do Later" but have that in a separate document.  The whole process of making your list and prioritizing it should not take more than 20 minutes.  If the task list is really long it could take up to an hour but then you'll be in a much better place for the whole week.&lt;/p&gt;

&lt;p&gt;Once you have your full list (and you'll be adding to this during the day), then you want to move the tasks into three categories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tasks where people are waiting on me before they can continue&lt;/li&gt;
&lt;li&gt;Tasks you can delegate&lt;/li&gt;
&lt;li&gt;Everything else&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In most cases you want to take care of the first two categories first.  That way other people can be productive and working on the project while you are being productive.  &lt;/p&gt;

&lt;p&gt;If you are part of a team and other staff cannot do their job until you finish yours... this really should be your top priority.  You don't want to finish a month-long task and then the company has to wait another 2 weeks for someone to do their part because they couldn't start until you delivered a module.  Work on the module they need first so they can be productive while you finish your other tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tasks-you-can-delegate"&gt;
  &lt;/a&gt;
  Tasks You Can Delegate
&lt;/h2&gt;

&lt;p&gt;These can be little easy things that are tedious and time consuming.  Like updating the company Wiki regarding the project you are working on.  Creating test data sets.  Writing an API integration.  Or tasks that just make your life easier - like setting up a development server, setting up the social media accounts which will later be needed once the project is completed.  Picking the icons and graphics to be used by the user interface.&lt;/p&gt;

&lt;p&gt;Do you have a technical problem that you can submit to a forum or to the company providing an API you are working on?  Don't let your OCD lure you into wasting hours because you don't want to let this puzzle get the best of you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you are not overloaded with work you should reach-out to some high-level techs you know and offer your services.  Offer to create test data, provide unit testing, write the user documentation, or build the OOP API integration they need.  Even choosing all the icons to use for the app can save them an hour or two.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quit-unnecessary-tasks"&gt;
  &lt;/a&gt;
  Quit Unnecessary Tasks
&lt;/h2&gt;

&lt;p&gt;One way to be more productive is to stop wasting time on things you can avoid.&lt;/p&gt;

&lt;p&gt;Notify your manager that you are overloaded and in order to meet deadlines you will need to reduce the number of mandatory meetings you go to.&lt;/p&gt;

&lt;p&gt;In your personal life, order groceries online and let them deliver.  This can save you hours every week.  I could go on but basically if you are overloaded with work also look to see if there are non-work activities that are taking up a lot of your time which you can delegate, quit or find alternatives to.  If you are earning good money consider hiring someone to do these tasks.  Don't waste your time mowing the lawn when you can hire someone to do that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-to-prioritize-everything-else"&gt;
  &lt;/a&gt;
  Now to Prioritize Everything Else
&lt;/h2&gt;

&lt;p&gt;Now to sub-categorize the remaining tasks based on &lt;strong&gt;Mental Acuity Requirement&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;complex&lt;/li&gt;
&lt;li&gt;easy&lt;/li&gt;
&lt;li&gt;no challenge&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#complex-tasks"&gt;
  &lt;/a&gt;
  Complex Tasks
&lt;/h3&gt;

&lt;p&gt;These include programming and anything else that you find mentally challenging.  When coding even a single character could cause a crash or problem that takes literally hours to debug; put a colon in where there should be a semi-colon and you have a big problem in most languages.  Coding is not the only "complex" task.  If you make a bad design decision it could have a long-term negative impact on the project so database design and similar activities should be in the  "Complex" category.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-tasks"&gt;
  &lt;/a&gt;
  Easy Tasks
&lt;/h3&gt;

&lt;p&gt;What is easy for one person may be complex for others.  Like designing and creating SQL table definitions.  The relational DB design regarding how it will integrate with the rest of the database may be complex, but the creating of the SQL scripts to make the tables after the conceptual design is outlined may be "Easy".   Similar with writing functionals or help documentation.  Generally things you have done hundreds of times before and a single-character being off won't crash the program should be considered &lt;strong&gt;Easy&lt;/strong&gt; tasks for you.&lt;/p&gt;

&lt;p&gt;Put the ones that are time-sensitive as highest priority for this category.  For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Registering for an API&lt;/li&gt;
&lt;li&gt;Registering for a developer account from Apple&lt;/li&gt;
&lt;li&gt;Applying to join a group or anything that has an application process&lt;/li&gt;
&lt;li&gt;Submitting a bug to a third-party tool you use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do these things first so you can be productive while waiting for responses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-challenge-tasks"&gt;
  &lt;/a&gt;
  No Challenge Tasks
&lt;/h3&gt;

&lt;p&gt;These tasks must be done and sometimes are very time-consuming but just aren't mentally challenging.  Like picking icons for your user interface and navigation.  Or creating test data.  Do not squander your best mental acuity hours working on these menial tasks!&lt;/p&gt;

&lt;p&gt;Now hopefully you can delegate some of these tasks to someone else.  &lt;/p&gt;

&lt;p&gt;If not then postpone them to end of day when you are not at your best.  Sometimes these can even be done as multi-tasking projects.  For example this week I was on an obligatory 4 hour Zoom meeting where my interaction was only required 20% of the time.  During the other 80% of the time I multi-tasked and created new thumbnails for YouTube videos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-zone"&gt;
  &lt;/a&gt;
  In The Zone
&lt;/h2&gt;

&lt;p&gt;Most people do not take into consideration that every human has peak and off-peak times for their mental acuity.  Figure out when you are at your brightest during the day.  When you can get "in the zone" and really focus.&lt;/p&gt;

&lt;p&gt;As an example, when a programmer is "in the zone" they can accomplish a task in 10 minutes.  That same task can easily take 40 minutes if distracted, they make a typo, or they didn't think far enough ahead to realize a design flaw.  If that happens 3 times in a day, then what could have been completed in 30 minutes now took 2 hours.  Your goal is to get "in the zone" and do the most complex tasks during that time.&lt;/p&gt;

&lt;p&gt;When you really want to focus and get "in the zone" remove all distractions.  No email, put your phone in airplane mode, close your door or have some visual indicator to let people know not to bother you.  Only work on the Complex tasks while you are in the zone.  Don't squander these peak productivity times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;With all this in mind, you should schedule your complex mental tasks for when you are at your peak mental ability each day.  Schedule your tasks in the Easy Mental Tasks category for the rest of the day.  Don't schedule the "No Mental Requirement" tasks at all.  These tasks you do when eating lunch, multi-tasking during a Zoom meeting, or on your laptop while unwinding and watching Netflix.&lt;/p&gt;

&lt;p&gt;Also, if you want to increase productivity do not multi-task while working on complex or even "easy" mental tasks.  You may think it doesn't have a big impact on your effectiveness but having a video on in the background is going to slow you down.  Put on music instead.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>timemanagement</category>
      <category>programming</category>
    </item>
    <item>
      <title>Those “Pesky” Pull Requests are Totally Worth It </title>
      <author>Nick Hodges</author>
      <pubDate>Fri, 20 Aug 2021 16:01:45 +0000</pubDate>
      <link>https://dev.to/linearb/those-pesky-pull-requests-are-totally-worth-it-578b</link>
      <guid>https://dev.to/linearb/those-pesky-pull-requests-are-totally-worth-it-578b</guid>
      <description>&lt;p&gt;Pretty much everyone does code reviews. They’ve been around a long time. I remember back in my Borland days when the Chief Scientist would come in every morning and review all the code that had been checked into the Subversion(!) repository the previous day and send emails out to folks whose code wasn’t up to snuff. That’s old school.&lt;/p&gt;

&lt;p&gt;Slightly less old school? Saving all the check-ins up until Friday for the Dev Leads and/or Dev Managers to review and approve. Both of these techniques leave a lot to be desired — the main thing being a complete lack of interaction between the developer, the code, and the reviewer.&lt;/p&gt;

&lt;p&gt;Code Reviews have a number of purposes. Probably the most important one is preserving the quality and integrity of the code in the repository. Even the two old-school ways above do that.&lt;/p&gt;

&lt;p&gt;But almost as important is the learning opportunity that code reviews can provide. If the only feedback a developer gets from a code review is mistakes in formatting or other trivial things like that, then nobody learns and gets better. The old school ways above provide for few opportunities for a developer to increase their skills. To provide learning opportunities, code reviews evolved into meetings where everyone looked at the code written that week and commented on it, criticized it, or otherwise ran it through the gauntlet. This did provide a learning opportunity for developers, but it took more time, as it was 100% synchronous and required all code to wait for the next scheduled meeting to be reviewed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KEWxG9sW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AlkPeY9sJ_As_KZfE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KEWxG9sW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AlkPeY9sJ_As_KZfE.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, almost no one is doing these old-school code reviews anymore. All the cool kids are doing pull requests. (Some folks call them “merge requests.”) Pull requests have a number of advantages over the previously mentioned methods, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Being done completely asynchronously, but in public for all to see.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No one needs to wait to review the code — it can happen almost immediately after a pull request is issued.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A history of all the comments stays with the code in a repository. This allows a developer to come back to the code a year later and see all the thought that went into writing it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pull Requests can be tracked, monitored, and measured. &lt;a href="https://linearb.io/blog/three-git-pull-request-review-strategies/"&gt;A whole lot of good things can come out of that &lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#should-you-do-code-reviews-at-all"&gt;
  &lt;/a&gt;
  Should you do code reviews at all?
&lt;/h2&gt;

&lt;p&gt;Interestingly, some say no, you shouldn’t.&lt;/p&gt;

&lt;p&gt;Not only is Jessica Kerr a great speaker and a good Twitter follow, but she also has some interesting ideas about code reviews in her article of March 27 entitled “Those pesky pull request reviews .” In fact, she doesn’t like pull requests, and argues that you should sidestep them by just working on a given task as a team, so that everyone sees everything as the work gets done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--99NnCfk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AEBaePGd857-v63hu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--99NnCfk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AEBaePGd857-v63hu.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;She believes that pull requests work great for open source projects where a “team” is really a set of individuals coordinating work together. For true development teams, she believes that if a team all works together on a single task, everyone learns and understands the code, and thus there is no task switching between coding and doing pull requests because the pull requests are unnecessary.&lt;/p&gt;

&lt;p&gt;Jessica’s idea is radical — basically going beyond Pair Programming and moving into mob programming. Mob programming is the idea of having whole teams work together on projects in serial rather than individually in parallel. Mob programming can eliminate the need for pull requests by causing all of the communication and learning to take place during the coding phase, without any review.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-a-fan"&gt;
  &lt;/a&gt;
  Not a Fan
&lt;/h2&gt;

&lt;p&gt;I’m having a hard time agreeing with her idea for a couple of reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The transaction costs are too high. It seems to me that having four people work on a project together makes for many communication channels, increases the likelihood of interruptions, and reduces the amount of code that will actually get written. It’s sort of a “Too many cooks spoil the broth” notion.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It doesn’t capture the discussions and history that will remain long after the code is committed. One of the most important and powerful benefits of pull requests is the learning that can take place during and even long after code has been reviewed and deployed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally — not all projects are conducive to multiple team members working together. Some are small and multiple people working together would be overkill. Some are esoteric and require the focus of one person. Some will match the team and can be worked on together. There’s no one size fits all solution for all projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, not doing pull requests pretty much eliminates all the benefits of metrics systems like &lt;a href="https://linearb.io/"&gt;LinearB &lt;/a&gt;. Tracking the progress of pull requests and code reviews through the pipeline is a critical process for knowing how your team is performing. Without that, you can't measure things and if you can’t measure things, you can’t improve.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As part of a discussion about code reviews, Rob Kraft, one of the Development Leaders in our vibrant Dev Interrupted Discord Server (&lt;a href="https://discord.gg/wHvgytX9P7"&gt;you should join&lt;/a&gt;!) made the following comment that I agree with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1rTPmF3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AKLA7-yvVpEIAmygh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1rTPmF3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AKLA7-yvVpEIAmygh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think that what Jessica needs is a good look at LinearB. 🙂&lt;/p&gt;

&lt;p&gt;Let me address some of her more specific objections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;“&lt;strong&gt;Let’s face it: nobody wants to review pull requests.&lt;/strong&gt;” Well, I don’t think that is true. We here at LinearB see customers every day that are doing pull requests efficiently and effectively. Sure, pull requests can be hard and nobody wants to do them if you aren’t correctly incenting the team to create pull requests that are easy to review. No one likes a huge pull request. But through monitoring metrics like Pull Request Size, you can encourage your team to create small, easy-to-review pull requests. And voila! People don’t hate pull requests anymore.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“&lt;strong&gt;They’re a social interaction minefield!&lt;/strong&gt;” People complain that code reviews can cause strife on a team. Well, so can conversations during Mob Programming. I’m not sure that I see a distinction. And if doing a code review causes strife, then you have a cultural problem that no development methodology is going to solve.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“&lt;strong&gt;We could blame the people. We could nag them more. We could even automate the nagging!&lt;/strong&gt;” Well, if code reviews are small, concise, and easy to do, “automating the nagging” via our &lt;a href="https://linearb.io/blog/workerb-developer-automation/"&gt;WorkerB product&lt;/a&gt; is usually more than enough to get the ball rolling and keep it rolling. Notifications and tracking of any reviews that do happen to languish keep things moving as well. LinearB customers have seen drastic improvements in code pipeline productivity as a result of this so-called “nagging”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“&lt;strong&gt;Maybe instead of trying to work a bit more together, we could work together.”&lt;/strong&gt; Well sure, but if you do that, checking in code without a process of pull requests and code reviews, well, then you aren’t getting all the benefits listed above, nor those of a metrics tool that can show you what your &lt;a href="https://linearb.io/blog/cycle-time-measuring-and-improving-team-process/"&gt;Cycle Time&lt;/a&gt; is doing. And I don’t believe that mob programming will prevent the cultural problems that can arise from code reviews. People will be people whether in a mob programming environment or in an asynchronous code review process.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom Line
&lt;/h2&gt;

&lt;p&gt;Okay — so what rubber is hitting the road here?&lt;/p&gt;

&lt;p&gt;If pull requests and code reviews are hard and people don’t want to do them, then you are doing them wrong. So the trick is to make them easy to do.&lt;/p&gt;

&lt;p&gt;We here at LinearB see many, many customers improve their Cycle Time and their overall software development process by using and tracking pull requests. By combining metrics tracking around pull requests with tools like &lt;a href="https://linearb.io/developer-automation/"&gt;WorkerB&lt;/a&gt;, many, many development organizations have seen smaller pull requests, better reviews, shorter Cycle Times, and an overall sense that things are really humming.&lt;/p&gt;

&lt;p&gt;Monitoring things like the size of pull requests, when pull requests are assigned, picked up, and commented on, as well as monitoring the depth of reviews that take place all create an environment of small, discrete, easy to review pull requests.&lt;/p&gt;

&lt;p&gt;And of course, if you want to find out more about what our customers already know, you can &lt;a href="https://linearb.io/demo/"&gt;book a free demo of LinearB &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end, while her ideas are intriguing and thought-provoking, I can’t say I agree with Jessica’s argument. There doesn’t seem to be any good reason not to do pull requests with code reviews.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Jessica’s blog post &lt;a href="https://jessitron.com/2021/03/27/those-pesky-pull-request-reviews/"&gt;can be read on her Jessitron blog&lt;/a&gt;&lt;/em&gt; and you can follow her on Twitter at &lt;a href="https://twitter.com/jessitron"&gt;@jessitron&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you haven't already heard, Dev Interrupted is hosting &lt;strong&gt;INTERACT&lt;/strong&gt;: The interactive, community-driven, digital conference that takes place September 30th. Designed by engineering leaders, for engineering leaders, INTERACT will feature 10 speakers, 100s of engineers and engineering leaders, and is totally free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h1&gt;




&lt;p&gt;If you haven’t already joined the best developer discord out there, WYD?&lt;/p&gt;

&lt;p&gt;Look, I know we talk about it a lot but we love our developer discord community. With over 1500 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No salespeople allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gBWLfe0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AxR_ViPMd2T8ljTzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBWLfe0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AxR_ViPMd2T8ljTzt.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/pesky-pull-request-totally-worth-it/"&gt;https://devinterrupted.com&lt;/a&gt; on June 30, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>codereview</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>What is HTML - HyperText Markup Language?</title>
      <author>Srijan</author>
      <pubDate>Fri, 20 Aug 2021 16:01:44 +0000</pubDate>
      <link>https://dev.to/codingvarsity/what-is-html-hypertext-markup-language-4ogf</link>
      <guid>https://dev.to/codingvarsity/what-is-html-hypertext-markup-language-4ogf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GuVapap8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codingvarsity.com/_next/image%3Furl%3D%252Fimages%252Fcover-image.png%26w%3D640%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GuVapap8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codingvarsity.com/_next/image%3Furl%3D%252Fimages%252Fcover-image.png%26w%3D640%26q%3D75" alt="coding varsity cover image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTML stands for &lt;strong&gt;Hypertext Markup Language&lt;/strong&gt;. The browser uses it to structure content on a web page. HTML also describes the basic layout of a web page. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hypertext"&gt;
  &lt;/a&gt;
  What is HyperText?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;HyperTexts&lt;/strong&gt; are texts that link a page to another page on the same website or another site. By default, links are underlined and have blue text color. &lt;/p&gt;

&lt;p&gt;&lt;a href="#"&gt;I am a HyperText&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-is-a-markup-language"&gt;
  &lt;/a&gt;
  HTML is a Markup Language
&lt;/h2&gt;

&lt;p&gt;HTML is not a programming language but a markup language. HTML uses tags as markup to annotate different types of content in a web page. For example, HTML has the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag for an image, and for a paragraph, it has a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; I am a paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/media/codingvarsity-logo.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"coding varsity logo"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#html-tags"&gt;
  &lt;/a&gt;
  HTML Tags
&lt;/h2&gt;

&lt;p&gt;HTML Tags give special meaning (semantics) to the text they enclose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
  I am the most significant heading
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  I am a paragraph
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  I contain whole HTML Document 
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;All HTML Tags are case insensitive. You can write them as you like &lt;code&gt;&amp;lt;TITLE&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; or even &lt;code&gt;&amp;lt;Title&amp;gt;&lt;/code&gt;. All versions are correct. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#html-document"&gt;
  &lt;/a&gt;
  HTML Document
&lt;/h2&gt;

&lt;p&gt;Let’s go through a simple HTML document and learn about few tags that we can use to create a web page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;I am a title&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;I am a heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I am a paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;”/media/codingvarsity.jpg”&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;”codingvarsity&lt;/span&gt; &lt;span class="na"&gt;logo&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ltdoctype-htmlgt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; is the required preamble in all HTML documents. Its purpose is to tell the browser to render the document in the latest version of HTML.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-lthtmlgt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag is the container for all HTML elements and is the root of an HTML document. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ltheadgt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag contains meta-information about the web page. These pieces of information are not displayed on the screen but are used by the browsers and search engines to understand the content of the document. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-lttitlegt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag is used to add the title of the document. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ltbodygt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag contains the main content of the document and is displayed in the browser window. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-lth1gt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag is used to add the most significant heading in the document. A web page should contain only one &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ltpgt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag is used to add a paragraph in the document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ltimggt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag is used to embed an image in the document. &lt;/p&gt;

&lt;p&gt;We will learn about every tag in more detail in another article. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTML stands for HyperText Markup Language.&lt;/li&gt;
&lt;li&gt;Hypertexts are texts that one web page to another web page. &lt;/li&gt;
&lt;li&gt;HTML tags give special meaning to the text they enclose. For example, to create a paragraph we use the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag. &lt;/li&gt;
&lt;li&gt;All HTML tags are case insensitive. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; is required in all HTML documents to instruct the browser to render the document in the latest version of HTML. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>GuardianForge Planning &amp; Discovery</title>
      <author>Brian Morrison II</author>
      <pubDate>Fri, 20 Aug 2021 15:56:58 +0000</pubDate>
      <link>https://dev.to/brianmmdev/guardianforge-planning-discovery-33dd</link>
      <guid>https://dev.to/brianmmdev/guardianforge-planning-discovery-33dd</guid>
      <description>&lt;p&gt;Today I'm going to write about something quite different than anything I've done yet. Most of my articles to date have been very specific tutorials on how to accomplish something in a given language or framework. Today I'm going more conceptual and I'll explain my thought process behind how I built a web app from start to finish. This article specifically will cover a lot of the brainstorming, discovery, and project planning, whereas the others will cover specific features and how they were implemented.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-guardianforge"&gt;
  &lt;/a&gt;
  Introducing GuardianForge
&lt;/h2&gt;

&lt;p&gt;Over the last few months, I've been building a web app called GuardianForge, which acts as something of a social media for players of the game Destiny 2. It allows users to create snapshots of their current equipment in the game and share with other players. The equipment you have on your character in the game affects how the game plays, and can make activities either harder or easier depending on how you setup your loadout.&lt;/p&gt;

&lt;p&gt;Build crafting in Destiny seems to be on the rise, and one thing I personally do before going into high level activities is ask around to find the best items to have equipped. A lot of Destiny content creators also produce build video for these activities which describe the items you should have equipped. Here is a small sample of one of my favorite creators Castle explaining a build in the game and how it works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5hI00BZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/MTvZu1q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5hI00BZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://imgur.com/MTvZu1q.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video: &lt;a href="https://youtu.be/KV1lVBPg4oA"&gt;https://youtu.be/KV1lVBPg4oA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem is there are so many combinations I often cant remember much of the equipment they suggest, so one day I thought &lt;em&gt;"Wouldn't it be nice if there was a convenient way to share an entire loadout using just a link?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And that thought was the beginning of GuardianForge.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GuardianForge is still a work in progress, but the basic gist is;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find a players character &amp;amp; view the loadout.&lt;/li&gt;
&lt;li&gt;Create a build snapshot containing all the equipment, along with optional notes.&lt;/li&gt;
&lt;li&gt;Share the unique link for that build to...anyone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--twLCvC0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/85ccc0aa-07a2-40e5-90a0-619cb58f8914" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--twLCvC0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/85ccc0aa-07a2-40e5-90a0-619cb58f8914" alt="https://cdn.brianmorrison.me/media/2021/85ccc0aa-07a2-40e5-90a0-619cb58f8914"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://guardianforge.net/build/226dee1e-6b03-4074-8de9-576f60443e7e"&gt;https://guardianforge.net/build/226dee1e-6b03-4074-8de9-576f60443e7e&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exploring-the-destiny-api"&gt;
  &lt;/a&gt;
  Exploring The Destiny API
&lt;/h2&gt;

&lt;p&gt;Before I even start writing any code or planning infrastructure, I always explore APIs to see if my idea is even possible with what's provided. Bungie has a decently documented API located at &lt;a href="https://bungie-net.github.io/multi/index.html"&gt;https://bungie-net.github.io/multi/index.html&lt;/a&gt; so that's where I started. In order to access it, I first needed to register an application in their developer portal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qc70s6zD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/3bd7727b-4b47-4f92-a686-794dcafcf9f1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qc70s6zD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/3bd7727b-4b47-4f92-a686-794dcafcf9f1" alt="https://cdn.brianmorrison.me/media/2021/3bd7727b-4b47-4f92-a686-794dcafcf9f1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aYHRQp8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/f33a2ed2-075e-46c0-ab84-0bd74904ffe5" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYHRQp8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/f33a2ed2-075e-46c0-ab84-0bd74904ffe5" alt="https://cdn.brianmorrison.me/media/2021/f33a2ed2-075e-46c0-ab84-0bd74904ffe5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the API call that seemed to give me some of the data I wanted is the GET Character API. There were a few pieces of info I needed first, the &lt;code&gt;membershipId&lt;/code&gt; and &lt;code&gt;membershipType&lt;/code&gt;. After doing some digging, I found that I was able to find this info on the GET User API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B5AC3aJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/044ed22f-f00d-47c2-86ae-5377cd307cf5" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B5AC3aJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/044ed22f-f00d-47c2-86ae-5377cd307cf5" alt="https://cdn.brianmorrison.me/media/2021/044ed22f-f00d-47c2-86ae-5377cd307cf5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before I could call GET User, I needed the unique ID for that user in Bungie's system. I traced that back to the GET SearchUsers call, which let me search by username.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GG707l5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/ff413e05-e945-4473-9392-2ad57a9e0284" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GG707l5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/ff413e05-e945-4473-9392-2ad57a9e0284" alt="https://cdn.brianmorrison.me/media/2021/ff413e05-e945-4473-9392-2ad57a9e0284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect, now back to the GET Character API. Bungie's API uses a query parameter called components that lets you request only the info you need from that specific call. Unfortunately I didn't know what each of these components returned (and although it was documented, it still didn't mean much to me at the time).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exploring-how-other-apps-work"&gt;
  &lt;/a&gt;
  Exploring How Other Apps Work
&lt;/h2&gt;

&lt;p&gt;Its about here that I started exploring other third party Destiny apps to see how they did it. So I reviewed one of these app's network requests using the Chrome dev tools' Network tab. The numbers at the end all look weird, but that's because they are URL Encoded (meaning they are changed to be more compatible with URLs). You can swap the &lt;code&gt;%2C&lt;/code&gt; with a &lt;code&gt;,&lt;/code&gt; and it looks more like &lt;code&gt;100,101,103...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WiNV641o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/6aa38cd9-bf29-4dc7-8df2-695e5a485478" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WiNV641o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/6aa38cd9-bf29-4dc7-8df2-695e5a485478" alt="https://cdn.brianmorrison.me/media/2021/6aa38cd9-bf29-4dc7-8df2-695e5a485478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I can match up those numbers with the API documentation to figure out what each really does.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLdnChAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/b9f69932-ce1d-4b76-9da7-462e7383ef91" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLdnChAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/b9f69932-ce1d-4b76-9da7-462e7383ef91" alt="https://cdn.brianmorrison.me/media/2021/b9f69932-ce1d-4b76-9da7-462e7383ef91"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now Ive got a list of components that I needed to request. Requesting it resulted in a rather large response and a whole lot of data that meant very little to me. I had no idea how to decipher it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OSEatYFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/56607ee3-20c1-4b8f-9788-f8909b978d54" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSEatYFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/56607ee3-20c1-4b8f-9788-f8909b978d54" alt="https://cdn.brianmorrison.me/media/2021/56607ee3-20c1-4b8f-9788-f8909b978d54"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-destiny-manifest"&gt;
  &lt;/a&gt;
  The Destiny Manifest
&lt;/h2&gt;

&lt;p&gt;Now Ive used third party Destiny apps for a number of years and I've always heard about the "Manifest" that is downloaded whenever you use one of these apps. I saw there was a call to GET Manifest in the API docs, so I ran that call to see what came back. To my surprise, it was a bunch of URLs along with some other metadata.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TDcz0gas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/6c6cc55c-542f-49b7-aab8-528026731473" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TDcz0gas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/6c6cc55c-542f-49b7-aab8-528026731473" alt="https://cdn.brianmorrison.me/media/2021/6c6cc55c-542f-49b7-aab8-528026731473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Attempting to grab one of these URLs resulted in a key/value JSON file. The keys in this dataset actually correspond to some of the data in the GET Character response. The Manifest is essentially a database with a massive amount of info on everything in the game. &lt;/p&gt;

&lt;p&gt;Now these files can be rather large (one of the largest I use is about 60MB) and attempting to view them in the browser or VS Code resulted in a crash every time. Its just too much data to render in those apps. So I did a bit of digging and discovered &lt;a href="https://dadroit.com/"&gt;Dadroit JSON Viewer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NDzxZk9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/537b09d3-cf1f-4f24-a5ad-c7607fb030ed" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NDzxZk9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/537b09d3-cf1f-4f24-a5ad-c7607fb030ed" alt="https://cdn.brianmorrison.me/media/2021/537b09d3-cf1f-4f24-a5ad-c7607fb030ed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using Dadroit, I was able to search the entire manifest for the various &lt;code&gt;hash&lt;/code&gt; values to figure out in which manifest file, and where, the info I needed was. If there was info I didn't have a hash for, I also leveraged some of the text found in game to discover the location of that info.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OrLSXmqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/f2404f44-4f9f-4440-9da5-1377bb17d909" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OrLSXmqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/f2404f44-4f9f-4440-9da5-1377bb17d909" alt="https://cdn.brianmorrison.me/media/2021/f2404f44-4f9f-4440-9da5-1377bb17d909"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MzZ8rxgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/b2ed11b5-558c-4722-a29d-7c40d914ae5d" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MzZ8rxgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/b2ed11b5-558c-4722-a29d-7c40d914ae5d" alt="https://cdn.brianmorrison.me/media/2021/b2ed11b5-558c-4722-a29d-7c40d914ae5d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So after many hours of tracing data around the manifest, I realized that I could totally build an app that does what I needed it to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure-planning"&gt;
  &lt;/a&gt;
  Infrastructure Planning
&lt;/h2&gt;

&lt;p&gt;Now my original goal with this project was to build something on AWS using as many services as I can to make this thing fly. I generally use these projects as opportunities to do something new, and this was no exception.&lt;/p&gt;

&lt;p&gt;So whenever I approach a new app, I split it all up into three categories;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Front end: Where will the user get access to the app?&lt;/li&gt;
&lt;li&gt;Back end: Where will I make API requests to?&lt;/li&gt;
&lt;li&gt;Storage: Where will all the data be stored?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also break out the things I want to user to do;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search for Destiny users &amp;amp; select any of their characters&lt;/li&gt;
&lt;li&gt;Create a build, adding notes and other meta info&lt;/li&gt;
&lt;li&gt;View &amp;amp; share builds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here is ultimately how the project was broken up:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--19X0-d1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/22b5c266-5172-436b-ad11-5787ffc2cd2f" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--19X0-d1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/22b5c266-5172-436b-ad11-5787ffc2cd2f" alt="https://cdn.brianmorrison.me/media/2021/22b5c266-5172-436b-ad11-5787ffc2cd2f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When first hits &lt;a href="http://guardianforge.net"&gt;guardianforge.net&lt;/a&gt;, they will access a CloudFront CDN instance which returns the Vue application to the user. &lt;/li&gt;
&lt;li&gt;The built Vue app is stored in an S3 bucket, where CloudFront Accesses it.&lt;/li&gt;
&lt;li&gt;Requests to the API go to API Gateway.&lt;/li&gt;
&lt;li&gt;API Gateway forwards those requests to a Lightsail VM, where the main API code is running.&lt;/li&gt;
&lt;li&gt;The API accesses relevant data from a DynamoDB table.&lt;/li&gt;
&lt;li&gt;When a build page is loaded, the Vue app will request the raw JSON file from a separate S3 bucket directly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Read on for more info on how each of these components work and how they are used in GuardianForge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pAB2_D4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/5d6f700d-bc25-4f99-8184-3770e4b149bf" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pAB2_D4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/5d6f700d-bc25-4f99-8184-3770e4b149bf" alt="https://cdn.brianmorrison.me/media/2021/5d6f700d-bc25-4f99-8184-3770e4b149bf"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamodb"&gt;
  &lt;/a&gt;
  DynamoDB
&lt;/h3&gt;

&lt;p&gt;DynamoDB is a NoSQL solution in AWS. I wanted to use GuardianForge as an opportunity to get practice modelling a schema for Dynamo. The main idea was to use Dynamo as more of an index than a full database. I would store build summaries as stubs of the real data. This reduces the amount of data stored in Dynamo, which reduces cost on both storage and egress (data leaving AWS) charges. &lt;/p&gt;

&lt;p&gt;Dynamo is VERY fast if the schema is designed properly. I'll be covering my schema design process in a later entry in this series.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ugmmbGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/bf81b727-aaf7-4b5a-b5c8-49a536534571" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ugmmbGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/bf81b727-aaf7-4b5a-b5c8-49a536534571" alt="https://cdn.brianmorrison.me/media/2021/bf81b727-aaf7-4b5a-b5c8-49a536534571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#s3"&gt;
  &lt;/a&gt;
  S3
&lt;/h3&gt;

&lt;p&gt;I decided to use AWS S3, which is their solution for storing unstructured data (think like files &amp;amp; folders). I'm using it for two functions. &lt;/p&gt;

&lt;p&gt;The first is storing the front end Vue.js application files. S3 has static web hosting feature on its own, but in order to use my own domain name, I ended up connecting to it via a CloudFront CDN Instance (more on that in a moment).&lt;/p&gt;

&lt;p&gt;The second is the actual build data. Each build has a corresponding JSON file that's stored in S3 that contains all of the necessary build data to render it in the Vue app. Now why wouldn't I just store this in Dynamo? Well from a cost perspective, Dynamo generally charges more for storage and less for transmitting data, whereas S3 is the opposite. &lt;/p&gt;

&lt;p&gt;In general, the actual build files will not be hit too frequently (unless one gets really popular), so Id rather pay less for storing this data. In either case, I could put them behind the same CDN as the application files to increase performance and decrease actual hits to the file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xqQjPflO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/9f42ca3e-c8f6-4321-b23e-3db04df125cf" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xqQjPflO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/9f42ca3e-c8f6-4321-b23e-3db04df125cf" alt="https://cdn.brianmorrison.me/media/2021/9f42ca3e-c8f6-4321-b23e-3db04df125cf"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloudfront-cdn"&gt;
  &lt;/a&gt;
  CloudFront CDN
&lt;/h3&gt;

&lt;p&gt;Now in the previous section, I mentioned putting the app files behind CloudFront CDN. A CDN is a service that distributes static pages to various endpoints throughout the world. This results in decreased latency when a user hits those pages.&lt;/p&gt;

&lt;p&gt;Using the combination of CloudFront &amp;amp; S3, I can not only optimize performance for my users, but also add my own domain name &amp;amp; acquire a free SSL certificate using Amazon Certificate Manager (ACM). &lt;/p&gt;

&lt;p&gt;I can also setup some pretty fancy routing rules, which I end up doing when implementing social opengraph meta info. More on that in a later entry.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7b3eEWjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/75eda23c-44f3-4d29-8110-a41b9f70a13c" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7b3eEWjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/75eda23c-44f3-4d29-8110-a41b9f70a13c" alt="https://cdn.brianmorrison.me/media/2021/75eda23c-44f3-4d29-8110-a41b9f70a13c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lightsail"&gt;
  &lt;/a&gt;
  Lightsail
&lt;/h3&gt;

&lt;p&gt;Lightsail was one of those new services I wanted to try out. From my understanding, it lets you setup databases, servers, and containers at a fixed price in AWS. I'd worked with EC2, which is the server platform in AWS, so this was quote similar. &lt;/p&gt;

&lt;p&gt;Essentially I just had a Linux server that would run the API written in Go. Go was also another thing I wanted out of this project. I hadn't built a real world project with Go up 'til this point. When a Go app is compiled, it produces a native executable binary that can run on the same platform it was built on. So I ended up writing a Systemd Unit file to manage &amp;amp; run the service when the server starts. This was also something I hadn't done before, so it was a neat learning experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UEaUW1fJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/4a17d5f6-a227-4071-8b2c-7383961b0072" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UEaUW1fJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/4a17d5f6-a227-4071-8b2c-7383961b0072" alt="https://cdn.brianmorrison.me/media/2021/4a17d5f6-a227-4071-8b2c-7383961b0072"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-gateway"&gt;
  &lt;/a&gt;
  API Gateway
&lt;/h3&gt;

&lt;p&gt;Now API Gateway was a pretty late addition to my infrastructure. The main reason (and its not a good one) was to add SSL to my API. This was admittedly just a band-aid instead of a permanent solution. I wanted to buy myself some time to figure out how I wanted to secure the API properly.&lt;/p&gt;

&lt;p&gt;API Gateway acts as an API management platform in AWS. So you get one URL and you can route requests to other URLs or services within AWS. I actually decided to leave API Gateway in the diagram because it becomes much more important later on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-storage-project-management-amp-continuous-deployment"&gt;
  &lt;/a&gt;
  Code Storage, Project Management &amp;amp; Continuous Deployment
&lt;/h2&gt;

&lt;p&gt;The final pieces of this puzzle are less about the infrastructure and more about managing things. While the obvious thought would be GitHub, I've been a huge fan of Azure DevOps for years. Name aside, it actually has very little to do with Azure. &lt;/p&gt;

&lt;p&gt;Ultimately this is personal preference. I like the UI in Azure DevOps, the more advanced project management tools, and the better ability to create pipelines for deploying and managing builds. &lt;/p&gt;

&lt;p&gt;Azure DevOps has built in support for sprints &amp;amp; breaking down work items into features or epics if needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fcMUtEeo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/7f552c6d-968a-4256-9bf4-da015d981815" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fcMUtEeo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/7f552c6d-968a-4256-9bf4-da015d981815" alt="https://cdn.brianmorrison.me/media/2021/7f552c6d-968a-4256-9bf4-da015d981815"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mdzXldd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/f9fb5baa-61ff-49f6-ac41-301276637911" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mdzXldd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/f9fb5baa-61ff-49f6-ac41-301276637911" alt="https://cdn.brianmorrison.me/media/2021/f9fb5baa-61ff-49f6-ac41-301276637911"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if I want to somehow link a commit to a work item, all I have to do is include the task number in the commit message and I can trace my comments to whatever tasks I have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mCNhoD6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/a22e86ee-bade-47d7-81e6-bf5810f6566e" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mCNhoD6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/a22e86ee-bade-47d7-81e6-bf5810f6566e" alt="https://cdn.brianmorrison.me/media/2021/a22e86ee-bade-47d7-81e6-bf5810f6566e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FLMsENW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/c59c8933-3e86-4626-a51a-e333437f4e00" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLMsENW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/c59c8933-3e86-4626-a51a-e333437f4e00" alt="https://cdn.brianmorrison.me/media/2021/c59c8933-3e86-4626-a51a-e333437f4e00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally I can control my builds/deployments using their Pipelines feature. Pipelines is essentially a glorified task runner. I can pick from predefined step templates, or just write my own scripts to run at certain parts of the process (which I generally lean towards).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMV7cg-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/c4099414-d58a-46ac-972c-d18a100d0f09" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMV7cg-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/c4099414-d58a-46ac-972c-d18a100d0f09" alt="https://cdn.brianmorrison.me/media/2021/c4099414-d58a-46ac-972c-d18a100d0f09"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gr7HAvyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/c1435ec0-6bc2-4d77-a7f3-a07a5a59ada2" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gr7HAvyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.brianmorrison.me/media/2021/c1435ec0-6bc2-4d77-a7f3-a07a5a59ada2" alt="https://cdn.brianmorrison.me/media/2021/c1435ec0-6bc2-4d77-a7f3-a07a5a59ada2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looking-ahead"&gt;
  &lt;/a&gt;
  Looking Ahead
&lt;/h2&gt;

&lt;p&gt;Working on GuardianForge has helped me learn a bunch of interesting little tidbits that I didn't know before. I plan to identify some of the features of GuardianForge and create articles &amp;amp; videos on them, as well as overcoming some issues, in the near future. Happy coding!&lt;/p&gt;

</description>
      <category>go</category>
      <category>aws</category>
      <category>fullstack</category>
    </item>
    <item>
      <title>I18n and React, a simple and easy solution</title>
      <author>John B</author>
      <pubDate>Fri, 20 Aug 2021 15:40:53 +0000</pubDate>
      <link>https://dev.to/johnb8005/i18n-and-react-a-simple-and-easy-solution-3403</link>
      <guid>https://dev.to/johnb8005/i18n-and-react-a-simple-and-easy-solution-3403</guid>
      <description>&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@nexys/react-i18n"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NY4B5u2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://badge.fury.io/js/%2540nexys%252Freact-i18n.svg" alt="package"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Internationalization can be a headache and is oftentimes heavy; both in terms of code size and overhead.&lt;/p&gt;

&lt;p&gt;With this in mind, I wrote a very simple, lightweight package for react (7.1kB minified, no dependencies).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unconventional-features"&gt;
  &lt;/a&gt;
  Unconventional features:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#backend-independent"&gt;
  &lt;/a&gt;
  Backend independent
&lt;/h3&gt;

&lt;p&gt;It can be linked to any backend. I assume here that the list of translations is stored somewhere on the internet (typically served from the backend). &lt;/p&gt;

&lt;p&gt;Once loaded, the list of translations is stored in the local storage so that the application can be reloaded quickly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#untranslated-strings"&gt;
  &lt;/a&gt;
  Untranslated strings
&lt;/h3&gt;

&lt;p&gt;I have always found it hard to know which strings were translated and which were not. With this package, we store all the untranslated strings in an array in the local storage, so that you can see at anytime all the missing strings - all you need to do is browse through the application. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;n&lt;/code&gt; languages&lt;/li&gt;
&lt;li&gt;string interpolation&lt;/li&gt;
&lt;li&gt;typescript&lt;/li&gt;
&lt;li&gt;0 dependencies&lt;/li&gt;
&lt;li&gt;Built with react in mind, but can be used with any JS framework.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#get-it"&gt;
  &lt;/a&gt;
  Get it!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/nexys-system/react-i18n"&gt;https://github.com/nexys-system/react-i18n&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;NPM:  &lt;a href="https://www.npmjs.com/package/@nexys/react-i18n"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NY4B5u2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://badge.fury.io/js/%2540nexys%252Freact-i18n.svg" alt="package"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>i18n</category>
      <category>typescript</category>
      <category>package</category>
      <category>frontend</category>
    </item>
  </channel>
</rss>
