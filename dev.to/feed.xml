<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Easy understanding of functions in python</title>
      <author>enosemi</author>
      <pubDate>Thu, 30 Dec 2021 13:11:42 +0000</pubDate>
      <link>https://dev.to/enosemi/easy-understanding-of-functions-in-python-1508</link>
      <guid>https://dev.to/enosemi/easy-understanding-of-functions-in-python-1508</guid>
      <description>&lt;p&gt;We should all understand a function is a block of organized reusable code for performing single or related action. Python has many built-in functions that we have probably used e.g &lt;code&gt;print()&lt;/code&gt;,&lt;code&gt;input()&lt;/code&gt;, etc. But there are also user-defined functions which allows you to create a block of code to perform your bidding at any time it is called.&lt;/p&gt;

&lt;p&gt;Now let's look at the python function syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
def functionname(parameters):
   '''block of code'''
   pass

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is as simple as that, next is explaining the use of each keywords in the syntax.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;def&lt;/code&gt; keyword is also know as  define is the first keyword that a function should begin with.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Parameters&lt;/code&gt; or &lt;code&gt;arguments&lt;/code&gt; are placed within the parentheses and we use them inside our function body&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The code block begins after a colon and is usually indented&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's put this into practice and write a function that takes the sum of two numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def sum(num1, num2):
      '''this function adds two numbers'''
      Return num1 + num2

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code shows the function name &lt;code&gt;sum&lt;/code&gt; that has two parameters for calculating the sum of two numbers&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-call-a-function"&gt;
  &lt;/a&gt;
  How to call a function
&lt;/h2&gt;

&lt;p&gt;In the previous code we wrote our function wasn't called so if we execute the command it will return nothing. To call a function we just type the function name and the desired parameters.&lt;br&gt;
 Let's try another example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Def sum(a , b):
    #this function add two numbers
    Return num1 + num2
#now call the function
sum(2,5)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-define-a-functionuserdefined-functions"&gt;
  &lt;/a&gt;
  How To Define A Function(User-Defined Functions).
&lt;/h2&gt;

&lt;p&gt;The four steps to defining a function in Python are the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the keyword def to declare the function and follow this up with the function name.&lt;/li&gt;
&lt;li&gt;Add parameters to the function: they should be within the parentheses of the function. End your line with a colon.&lt;/li&gt;
&lt;li&gt;Add statements that the functions should execute.&lt;/li&gt;
&lt;li&gt;End your function with a return statement if the function should output something. Without the return statement, your function will return an object None.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally I want us to know we have two types of functions in python which are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Built-in functions that were developed with the language e.g min()&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;user-defined functions that are created by the users to solve their problem.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>All About Arrow Functions</title>
      <author>Aravind Sanjeev</author>
      <pubDate>Thu, 30 Dec 2021 12:52:11 +0000</pubDate>
      <link>https://dev.to/aravsanj/all-about-arrow-functions-8eo</link>
      <guid>https://dev.to/aravsanj/all-about-arrow-functions-8eo</guid>
      <description>&lt;p&gt;Arrow functions are an alternative to regular functions in JavaScript. They have short and simple syntax. But they weren't designed just to have a shorter and simpler way to write functions. In this post, we will deep dive in to the logic and reasoning for introducting arrow functions in JavaScript. We'll also walk through examples on the way. Buckle up!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions-in-javascript"&gt;
  &lt;/a&gt;
  Functions in JavaScript
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.humaneer.org/blog/everything-you-need-to-know-about-js-functions"&gt;Functions in JavaScript&lt;/a&gt; are created using the &lt;code&gt;function&lt;/code&gt; keyword. You can also assign a function definition to a variable to create a function expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// function declaration&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// function expression&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arrow functions are function expressions but they don't use &lt;code&gt;function&lt;/code&gt; keyword. Instead, they have the fat arrow syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arrow function&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way of creating functions comes with much simpler syntax. But more importantly, there is also a difference in how the scope gets implemented.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scope"&gt;
  &lt;/a&gt;
  Scope
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.humaneer.org/blog/JavaScript-scope-an-easy-explanation"&gt;Scope&lt;/a&gt; of a variable determines where the variable can be used. A variable declared in global scope can be used everywhere compared to a variable declared in function scope, which can be only used inside the function.&lt;/p&gt;

&lt;p&gt;If you think vice-versa, a function has to be declared in the right scope to access the right variable. A function declared in global scope cannot access a variable declared inside an object.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions-and-scope"&gt;
  &lt;/a&gt;
  Functions and scope
&lt;/h3&gt;

&lt;p&gt;Regular functions in JavaScript defines its own scope depending on their invocation. The following function will be in global scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;globalFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;globalFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Window&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, this one will be in object scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference is that one was invoked as a normal function while the other was invoked as a method. This becomes a problem when you have a situation like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Window&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have a function &lt;code&gt;hello&lt;/code&gt; that is invoked inside a &lt;code&gt;method&lt;/code&gt;. However, since the function &lt;code&gt;hello&lt;/code&gt; was invoked normally, it ends up in global context. This becomes an issue when we have to use variables defined inside the object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My name is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// My name is undefined&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the function &lt;code&gt;hello&lt;/code&gt; has global scope, &lt;code&gt;this&lt;/code&gt; represents &lt;code&gt;Window&lt;/code&gt; object. So the value of &lt;code&gt;name&lt;/code&gt; is undefined.&lt;/p&gt;

&lt;p&gt;To overcome this, we can use solutions like &lt;code&gt;bind()&lt;/code&gt; (or arrow functions, which will discuss in a while).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My name is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bindedHello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;bindedHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// My name is Mike&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the uninitiated, &lt;code&gt;bind()&lt;/code&gt; method is used to bind a function to a scope. In the above case, we binded function &lt;code&gt;hello&lt;/code&gt; to scope of &lt;code&gt;obj&lt;/code&gt; which is the value of &lt;code&gt;this&lt;/code&gt;. Now the &lt;code&gt;bindedHello()&lt;/code&gt; is being executed inside the &lt;code&gt;obj&lt;/code&gt; scope. So variable &lt;code&gt;name&lt;/code&gt; has value Mike.&lt;/p&gt;

&lt;p&gt;This might look like a straight-forward solution, but as the code gets complex, it becomes immensely difficult to predict the value of &lt;code&gt;this&lt;/code&gt;. There will also be a swarm of confusion on which method is appropriate - bind, call, or apply. There is also a reduced performance associated with the &lt;code&gt;bind()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;In the end, these are all work arounds to an obvious solution - &lt;em&gt;lexical scoping&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lexical-scope"&gt;
  &lt;/a&gt;
  Lexical scope
&lt;/h3&gt;

&lt;p&gt;Lexical scoping is simply inheriting the scope of your parent along with your own scope. In the above case, if the function &lt;code&gt;hello&lt;/code&gt; had lexical scoping, it would have object scope instead of window scope. So, the big deal about arrow functions is that it comes with lexical scoping.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My name is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// My name is Mike&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So arrow functions cannot change the value of &lt;code&gt;this&lt;/code&gt; depending on how they're invoked. It inherits scope of its parent. In the above case, function &lt;code&gt;hello&lt;/code&gt; inherited scope from &lt;code&gt;meth&lt;/code&gt;. Since &lt;code&gt;meth&lt;/code&gt; has object scope as it was invoked as a method, so will function &lt;code&gt;hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On the flip side, you cannot use arrow functions as methods for the same reason.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Window&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since arrow functions does not have the ability to define its own &lt;code&gt;this&lt;/code&gt;, it doesn't matter whether it was invoked as a method in the above case. It will always inherit the scope of parent. The parent here is &lt;code&gt;obj&lt;/code&gt; which is in window scope.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h2&gt;

&lt;p&gt;Now that we learned the big deal about arrow functions is that it comes with lexical scoping, let's dig a little deeper.&lt;/p&gt;

&lt;p&gt;Arrow functions have deliberate limitations,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It cannot have binding to &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;super&lt;/code&gt; (due to lexical scoping)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt;, and &lt;code&gt;apply&lt;/code&gt; methods doesn't work as intended as they cannot establish a new scope&lt;/li&gt;
&lt;li&gt;Cannot be used as constructors. Constructors use the &lt;code&gt;new&lt;/code&gt; keyword to create new instances. It is not possible to create a new instance of an arrow function when you cannot actually change the scope.&lt;/li&gt;
&lt;li&gt;Host of other related limitations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-arrow-functions"&gt;
  &lt;/a&gt;
  When to use arrow functions?
&lt;/h3&gt;

&lt;p&gt;Arrow functions are very limited in nature but there are instances where this limitation can be a gift. We already saw that we can use arrow functions inside a method without loosing scope. So here are few instances where you should be using arrow functions instead of regular ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. When it offers simpler syntax&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// regular function&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// arrow function&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above case, there is no need to go for the longer, less-readble syntax when you can just get away with the arrow function. Note that unlike regular function declaration, arrow functions does not have &lt;a href="https://www.humaneer.org/blog/javascript-hoisting-eloquently-explained"&gt;hoisting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Inside array methods&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doubled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [2, 4, 6, 9, 10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using arrow functions inside array methods make our lives far easier. The code typically remains in a single line maximizing readability.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Which Python Framework is fastest?  </title>
      <author>Dhruv Rajkotia</author>
      <pubDate>Thu, 30 Dec 2021 12:29:26 +0000</pubDate>
      <link>https://dev.to/dhruv_rajkotia/which-python-framework-is-fastest-2fgo</link>
      <guid>https://dev.to/dhruv_rajkotia/which-python-framework-is-fastest-2fgo</guid>
      <description>&lt;p&gt;Now a days, we have seen an usage of the web development is increased a lot &amp;amp; along with that Python language is became the world's 2nd most popular programming language based on it's usage. Python has grown to become one of the most popular server-side languages on the Internet. According to W3Techs, it is used by more high-traffic sites than ColdFusion, PHP, ASP.NET And Java. Even Tech giants like Google, Facebook, Netflix, Microsoft all have started using the Python as a server side language for their applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qzxWxV9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrgmm2gmhpflcu62g1hs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qzxWxV9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrgmm2gmhpflcu62g1hs.gif" alt="Image description" width="500" height="320"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Today, there is a wide variety of Python frameworks that make creating web applications much easier. These frameworks bring together the modules and packages that allow you to build applications quickly, without the need to take care of involved details, like sockets and protocols, all in one place. &lt;/p&gt;

&lt;p&gt;Top Python Frameworks&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;FastAPI&lt;/li&gt;
&lt;li&gt;CherryPy&lt;/li&gt;
&lt;li&gt;Bottle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To know more Python frameworks visit &lt;a href="https://www.upgrad.com/blog/top-python-framework-for-web-development/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now our questions arise, which python framework is fastest among all the python frameworks. Based on the &lt;a href="https://www.techempower.com/benchmarks/#section=test&amp;amp;runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&amp;amp;hw=ph&amp;amp;test=query&amp;amp;l=v2qiv3-db&amp;amp;a=2"&gt;Techempower&lt;/a&gt; listing, Fastest Python Framework is "&lt;strong&gt;FastAPI&lt;/strong&gt;". &lt;/p&gt;

&lt;p&gt;FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.&lt;/p&gt;

&lt;p&gt;The key features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fast: Very high performance, on par with NodeJS and Go. One of the fastest Python frameworks available.&lt;/li&gt;
&lt;li&gt;Fast to code: Increase the speed to develop features by about 200% to 300%. *&lt;/li&gt;
&lt;li&gt;Fewer bugs: Reduce about 40% of human (developer) induced errors. *&lt;/li&gt;
&lt;li&gt;Intuitive: Great editor support. Completion everywhere. Less time debugging.&lt;/li&gt;
&lt;li&gt;Easy: Designed to be easy to use and learn. Less time reading docs.&lt;/li&gt;
&lt;li&gt;Short: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.&lt;/li&gt;
&lt;li&gt;Robust: Get production-ready code. With automatic interactive documentation.&lt;/li&gt;
&lt;li&gt;Standards-based: Based on (and fully compatible with) the open standards for APIs: OpenAPI (previously known as Swagger) and JSON Schema.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check the full documentation &lt;a href="https://fastapi.tiangolo.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I do recommend to check the documentation and use this framework for one of your microservice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;br&gt;
As there are so many Python frameworks available in the market, we first need to identify which framework we should use to build our web applications. So we need to identify which Python framework is best, easy and fast. Python FastAPI is one of the fastest and come up with so many good features which reduce the development efforts. So I would highly recommend to use this framework for one of your next web services. Hope you liked it. Have a Great Day. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rfvbxqJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh594ku9d2j4ua1ls3nu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfvbxqJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh594ku9d2j4ua1ls3nu.gif" alt="Image description" width="380" height="304"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Will automated cloud optimization replace your DevOps job?</title>
      <author>CAST AI</author>
      <pubDate>Thu, 30 Dec 2021 12:20:53 +0000</pubDate>
      <link>https://dev.to/castai/will-automated-cloud-optimization-replace-your-devops-job-2h8m</link>
      <guid>https://dev.to/castai/will-automated-cloud-optimization-replace-your-devops-job-2h8m</guid>
      <description>&lt;p&gt;Everything about automation sounds tempting. Apart from the fact that it would be doing the tasks that now take a good chunk of your day? Let’s see if automation can really put your DevOps, cloud engineer, or solutions architect job at risk anytime soon.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Replacing human folly for algorithmic efficiency means faster and better service and a perfect cheeseburger every time. So what can you expect when automated solutions start making decisions about your cloud infrastructure?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, with the tasks it can do, automation certainly buys you time to do more interesting things than micromanaging your cloud infrastructure.&lt;/p&gt;

&lt;p&gt;I wrote a guide to help you understand the impact of automation on your job:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#therearenotnearlyenoughqualifiedengineers"&gt;There are not nearly enough qualified engineers in the world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#thepathtoautomationisunavoidableintech"&gt;The path to automation is unavoidable in tech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cloudcomputinghasalreadyreducedjobs"&gt;Cloud computing has already reduced quite a few jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#butwhataboutdevops"&gt;But what about DevOps?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cloudautomationisntgoingtoreplaceyourjob"&gt;Cloud automation isn’t going to replace your job - it’s going to transform it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whatcanyouexpectfromautomatedcloudcostoptimization"&gt;What can you expect from automated cloud cost optimization?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#heresanexampleofhowautomatecloudoptimizationworks"&gt;Here’s an example of how automated cloud optimization works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dontspendtimemicromanagingyourinfrastructure"&gt;Don’t spend time micromanaging your infrastructure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="therearenotnearlyenoughqualifiedengineers"&gt;There are not nearly enough qualified engineers in the world&lt;/h2&gt;

&lt;p&gt;Just look at the job market for DevOps and cloud engineers.&lt;/p&gt;

&lt;p&gt;There are some &lt;a href="https://www.replacedbyrobot.info/5054/devops-engineer"&gt;794k DevOps engineers&lt;/a&gt; on the US market. According to the &lt;a href="https://devopsinstitute.com/upskilling-2020/"&gt;Upskilling 2020: Enterprise DevOps Skills Report&lt;/a&gt;, finding skilled DevOps experts and retaining them are two top challenges today. HR managers are ready to participate in a round of Squid Game just to get you on board.&lt;/p&gt;

&lt;p&gt;And the requirements in this area are only going to grow because merely building a smooth CI/CD pipeline is no longer enough. Also because engineers are tasked with ever more repetitive tasks to do.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Even if automation managed to reduce some of these tasks, it’s nowhere near enough to solve the skill shortage in the field. Realistically, it could help you transition from doing the job of three people (as it happens now) to a process that is more sustainable.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;One site based on the research from The University of Oxford gives DevOps engineers a meek &lt;a href="https://www.replacedbyrobot.info/5054/devops-engineer"&gt;4.2% chance of getting replaced by automation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="thepathtoautomationisunavoidableintech"&gt;The path to automation is unavoidable in tech&lt;/h2&gt;

&lt;p&gt;Writing code is also getting automated. And this approach is already fostered by industry leaders like GitHub’s CEO Chris Wanstrath who expects that in the future, &lt;a href="http://www.businessinsider.com/github-ceo-wanstrath-says-automation-will-replace-software-coding-2017-10"&gt;coding will be fully automated&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then there’s Will Iverson, the CEO of Dev9, who uses automation to power a process he calls “Continuous Development” where small teams write code and AI does the&lt;a href="https://www.forbes.com/sites/julianmitchell/2016/07/11/robots-replacing-developers-this-startup-uses-artificial-intelligence-to-build-smart-software/#7bfe82df324c"&gt; automated testing and deployment&lt;/a&gt;. This speeds up the delivery rate and minimizes labor costs.&lt;/p&gt;

&lt;h2 id="cloudcomputinghasalreadyreducedjobs"&gt;Cloud computing has already reduced quite a few jobs&lt;/h2&gt;

&lt;p&gt;If your business uses the cloud infrastructure of AWS, you sure need to dedicate time to managing it properly. So, you hire software engineers and give this job to them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what if you never turned to AWS and its wonderland of managed services? &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You’d have to build a cloud platform on your own - and hire way more engineers to take care of your infrastructure’s integrity, security, scalability, and more. AWS solved this problem for you. And then automated its solutions with managed services. &lt;/p&gt;

&lt;p&gt;So, companies that use public cloud services no longer need to have an army of experts in data center, virtualization, storage, or database administrator teams.&lt;/p&gt;

&lt;h2 id="butwhataboutdevops"&gt;But what about DevOps?&lt;/h2&gt;

&lt;p&gt;DevOps is all about enabling teams to release often and reduce bottlenecks. This is impossible without automated build or testing. &lt;/p&gt;

&lt;p&gt;Automation has been the fundamental pillar of DevOps since its inception. And it works.&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://puppet.com/resources/report/2021-state-of-devops-report"&gt;2021 State of DevOps Report&lt;/a&gt;, an overwhelming majority (97%) of companies that are advanced in their DevOps journey agreed that automation improves the quality of their work. &lt;/p&gt;

&lt;p&gt;But then some criticize DevOps as a justification for the “&lt;a href="https://www.techerati.com/features-hub/opinions/devops-automation-jobs-digital-transformation/"&gt;firing of a lot of people&lt;/a&gt;”. This opinion gained traction because of the general interest in how automation impacts jobs outside of IT and society as a whole.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In case you’re wondering about that, the &lt;a href="https://www.weforum.org/agenda/2020/10/dont-fear-ai-it-will-lead-to-long-term-job-growth/"&gt;World Economic Forum&lt;/a&gt; estimates that by 2025, technology will bring about at least 12 million more jobs than it wipes out. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You need someone who can align this development culture with all the other processes happening in the business. And develop cloud-native solutions. And make sure that key customer services actually get better thanks to all that automation and orchestration.&lt;/p&gt;

&lt;p&gt;All of the above is hours of thinking that automation won’t replace. But it will buy you more time to do it.&lt;/p&gt;

&lt;h2 id="cloudautomationisntgoingtoreplaceyourjob"&gt;Cloud automation isn’t going to replace your job - it’s going to transform it&lt;/h2&gt;

&lt;p&gt;If you’ve ever been in charge of managing your cloud spend, you probably know how much time and effort goes into it. &lt;/p&gt;

&lt;p&gt;Here’s a &lt;strong&gt;typical cost optimization sequence&lt;/strong&gt; most of our clients followed &lt;strong&gt;before starting to use automation&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Take a snapshot of your cloud costs at a specific point in time.&lt;/li&gt;
&lt;li&gt;Allocate costs to teams or departments to understand where they come from.&lt;/li&gt;
&lt;li&gt;Identify usage and growth patterns to clarify which of the costs make sense and which ones are good candidates for optimization.&lt;/li&gt;
&lt;li&gt;Examine your infrastructure in-depth to check whether you could eliminate any of your costs (like abandoned projects, shadow IT projects, or unused instances that were left running).&lt;/li&gt;
&lt;li&gt;Examine the virtual machines and other resources used by your teams to check for overprovisioning or underutilization.&lt;/li&gt;
&lt;li&gt;Come up with an optimization plan and reach out to the engineering team for buy-in and confirmation. &lt;/li&gt;
&lt;li&gt;Also, do your best to convince engineers that costs are just as important as performance when it comes to cloud resources.&lt;/li&gt;
&lt;li&gt;Once everything is approved, implement the infrastructure changes.&lt;/li&gt;
&lt;li&gt;Now it’s time to think about the future. Analyze your requirements and start planning how you’re going to get extra capacity or remove resources you’ll no longer need.&lt;/li&gt;
&lt;li&gt;Take a look at your cloud provider’s offer to learn about their pricing, forecast your costs, reserve capacity upfront, or negotiate volume discounts with the vendor.&lt;/li&gt;
&lt;li&gt;Establish rules for teams to follow to use the discounted resources you bought to the fullest.&lt;/li&gt;
&lt;li&gt;And then hope that your cloud bill is as high as you expect it to be at the end of the month!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;It’s clear that allocating, understanding, analyzing, and forecasting cloud costs takes a lot of time. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And it’s not something you do once a month. To achieve reasonable savings manually, you need to constantly apply infrastructure changes, spin up new resources, and many other things that allow building a cost-efficient infrastructure that responds to the current demand.&lt;/p&gt;

&lt;p&gt;An automated cloud optimization solution takes all of these tasks off your plate:&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iIiwqUU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/12/CMKT-12-1080x1080-Cloud-Native.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIiwqUU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/12/CMKT-12-1080x1080-Cloud-Native.png" alt="automated cloud cost optimization" width="880" height="978"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="whatcanyouexpectfromautomatedcloudcostoptimization"&gt;What can you expect from automated cloud cost optimization?&lt;/h2&gt;

&lt;p&gt;Typically, an automated solution will take care of these tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selecting the most cost-efficient instance types and sizes to match the demand of your applications,&lt;/li&gt;
&lt;li&gt;Autoscaling cloud resources to handle spikes and drops in demand,&lt;/li&gt;
&lt;li&gt;Removing resources that aren’t being used to cut costs,&lt;/li&gt;
&lt;li&gt;Automating Spot instance usage by handling potential interruptions gracefully,&lt;/li&gt;
&lt;li&gt;Helping you to avoid costs in other areas - automating storage and backups, security, and various changes to configurations and settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Most importantly, automation means that all of these changes are applied in real time. This is how you master cloud cost optimization which is a point-in-time exercise.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All of this gets done without adding any repetitive tasks. The solution keeps an eye on your application and the available resources 24/7 to identify new savings opportunities and scale things up or down instantly.&lt;/p&gt;

&lt;h2 id="heresanexampleofhowautomatecloudoptimizationworks"&gt;Here’s an example of how automated cloud optimization works&lt;/h2&gt;

&lt;p&gt;Our team was running our application on a mix of AWS On-demand and Spot instances. We used CAST AI to analyze our setup and find the most cost-effective Spot instance alternatives. We needed a machine with 8 CPUs and 16 GB.&lt;/p&gt;

&lt;p&gt;The platform opted for an instance called INF1. But wait, isn’t that the incredibly expensive supercomputer with a powerful ML-specialized GPU?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why did CAST AI pick it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Everything was clear once we checked the pricing. As it turned out, at that time INF1 happened to be cheaper than the general-purpose virtual machines we used. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If an engineer had to pick this manually, they would have never guessed to look for an instance in this category. &lt;/strong&gt;Automation gives a helping hand in finding this hidden gem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dPD8b4X_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/4JyY0MkyqcKJh3FyySgrggZnxzd8MMT6PeFGQzoVEqO2zK1BBOYWaXb-45XD279nbGNhdQK3_u5GC6RY9n7rQOYYFm1akYc2J5UoDMfPCvg-tT8QeyvFdFqSYcWC8_M1CG9hFQqX" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dPD8b4X_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/4JyY0MkyqcKJh3FyySgrggZnxzd8MMT6PeFGQzoVEqO2zK1BBOYWaXb-45XD279nbGNhdQK3_u5GC6RY9n7rQOYYFm1akYc2J5UoDMfPCvg-tT8QeyvFdFqSYcWC8_M1CG9hFQqX" alt="" width="880" height="101"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="dontspendtimemicromanagingyourinfrastructure"&gt;Don’t spend time micromanaging your infrastructure&lt;/h2&gt;

&lt;p&gt;Manual cloud cost optimization methods like cost monitoring and reporting steal your time away from doing more interesting stuff.&lt;/p&gt;

&lt;p&gt;Automated cloud optimization is here to transform your job into one free from the burden of doing repetitive tasks you don’t enjoy.&lt;/p&gt;

&lt;p&gt;See what resources automation could manage for you by trying out CAST AI. It’s free to start and brings results fast.&lt;/p&gt;



</description>
      <category>cloud</category>
      <category>devops</category>
      <category>kubernetes</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>Striver's SDE Sheet Journey - #9 Merge two sorted Arrays</title>
      <author>sachin26</author>
      <pubDate>Thu, 30 Dec 2021 12:09:01 +0000</pubDate>
      <link>https://dev.to/sachin26/strivers-sde-sheet-journey-9-merge-two-sorted-arrays-1di7</link>
      <guid>https://dev.to/sachin26/strivers-sde-sheet-journey-9-merge-two-sorted-arrays-1di7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Problem Statement&lt;/u&gt; :-&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;You are given two integer arrays nums1 and nums2, sorted in &lt;strong&gt;non-decreasing&lt;/strong&gt; order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Merge nums1 and nums2 into a single array sorted in non-decreasing order.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explanation :&lt;/strong&gt; &lt;em&gt;The arrays we are merging are [1,2,3] and [2,5,6].&lt;br&gt;
The result of the merge is [1,&lt;u&gt;2&lt;/u&gt;,2,3,&lt;u&gt;5&lt;/u&gt;,&lt;u&gt;6&lt;/u&gt;] with the underlined elements coming from nums1&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution-1"&gt;
  &lt;/a&gt;
  &lt;u&gt;Solution 1&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;sort the &lt;code&gt;num1&lt;/code&gt; array by swapping num2 array elements, while swapping keep sorting num2, then add all num2 elements to num1  array.&lt;/p&gt;

&lt;p&gt;lets understand this approach step by step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-1&lt;/strong&gt; Initialise two varible &lt;code&gt;pointer1 = 0&lt;/code&gt; &amp;amp; &lt;code&gt;pointer2 = 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-2&lt;/strong&gt; if &lt;code&gt;n == 0&lt;/code&gt; , then return.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-3&lt;/strong&gt; run a loop from &lt;code&gt;i=1&lt;/code&gt; to &lt;code&gt;m&lt;/code&gt;,then&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if  &lt;code&gt;num1[pointer1] &amp;gt; num2[pointer2]&lt;/code&gt;,then&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; swap(num1[pointer1],num2[pointer2]).&lt;br&gt;
 &lt;strong&gt;2.&lt;/strong&gt; sort the &lt;code&gt;num2&lt;/code&gt; array.&lt;br&gt;
 &lt;strong&gt;3.&lt;/strong&gt; increment &lt;code&gt;pointer1&lt;/code&gt;++&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;else increment &lt;code&gt;pointer1&lt;/code&gt;++&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;step-4&lt;/strong&gt; again run a loop from i=1 to n,then&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;code&gt;num1[pointer1] = num2[pointer2]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; increment the &lt;code&gt;pointer2&lt;/code&gt;++.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;step-5&lt;/strong&gt; end.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Java&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;nums1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;nums2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pointer1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pointer2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pointer1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nums2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pointer2&lt;/span&gt;&lt;span class="o"&gt;]){&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pointer1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;nums1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pointer1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pointer2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;nums2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pointer2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;pointer1&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;pointer1&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;

        &lt;span class="o"&gt;}&lt;/span&gt;


            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
                &lt;span class="n"&gt;nums1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pointer1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pointer2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;pointer1&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
                &lt;span class="n"&gt;pointer2&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#solution-2"&gt;
  &lt;/a&gt;
  &lt;u&gt;Solution 2&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;by reverse sorting, this problem can be solved in linear time complexity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-1&lt;/strong&gt; initialise variables &lt;code&gt;i=m-1&lt;/code&gt;, &lt;code&gt;j=n-1&lt;/code&gt;, &lt;code&gt;arr1Len=nums1.length-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-2&lt;/strong&gt; run a loop if &lt;code&gt;i&amp;gt;=0 and j&amp;gt;=0&lt;/code&gt;, then&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if nums1[i] &amp;gt; nums2[j], then&lt;br&gt;
update the value from the last index.&lt;br&gt;
      &lt;code&gt;nums1[arr1Len] = nums[i];&lt;/code&gt;&lt;br&gt;
&lt;code&gt;i--&lt;/code&gt;&lt;br&gt;
&lt;code&gt;arr1Len--&lt;/code&gt;&lt;br&gt;
else&lt;br&gt;
&lt;code&gt;nums1[arr1Len] = nums[j]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;j--&lt;/code&gt;&lt;br&gt;
&lt;code&gt;arr1Len--&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;srep-3&lt;/strong&gt; run a loop if j &amp;gt;=0, then&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;nums1[arr1Len] = nums[j]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;arr1Len--&lt;/code&gt;&lt;br&gt;
&lt;code&gt;j--&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;step-4&lt;/strong&gt; end.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Java&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;nums1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;nums2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;arr1Len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nums1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nums2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]){&lt;/span&gt;
                &lt;span class="n"&gt;nums1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arr1Len&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
                &lt;span class="n"&gt;arr1Len&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;nums1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arr1Len&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
                &lt;span class="n"&gt;arr1Len&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;nums1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arr1Len&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
            &lt;span class="n"&gt;arr1Len&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Time Complexity :&lt;/strong&gt; &lt;strong&gt;O(m+n)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Space Complexity :&lt;/strong&gt; &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. if you find something wrong, let me know in the comment section.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>dsa</category>
    </item>
    <item>
      <title>TCP/IP Overview</title>
      <author>Katerina Braide</author>
      <pubDate>Thu, 30 Dec 2021 11:36:39 +0000</pubDate>
      <link>https://dev.to/braide/tcpip-overview-58hg</link>
      <guid>https://dev.to/braide/tcpip-overview-58hg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tcpip-model"&gt;
  &lt;/a&gt;
  TCP/IP model
&lt;/h2&gt;

&lt;p&gt;Transmission Control Protocol and Internet Protocol (TCP/IP) is a network model using current internet architecture to standardize computer networking, just like the Open System Interconnection (OSI) model. OSI is widely referenced but TCP/IP is a more recommended model. The main idea of TCP/IP is to allow an application on a computer to send data packets or communicate to another application running on a different computer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#layers-of-tcpip"&gt;
  &lt;/a&gt;
  Layers of TCP/IP
&lt;/h2&gt;

&lt;p&gt;4 Application layer&lt;br&gt;
3 Transport layer&lt;br&gt;
2 Internet layer&lt;br&gt;
1 Data link and physical layer&lt;/p&gt;

&lt;p&gt;These are the original layers numbered from the bottom up just like the OSI model. However the layers have been updated to:&lt;/p&gt;

&lt;p&gt;5 Application layer&lt;br&gt;
4 Transport layer&lt;br&gt;
3 Network layer&lt;br&gt;
2 Data link layer&lt;br&gt;
1 Physical layer&lt;/p&gt;

&lt;p&gt;One splitted layer and one renamed layer. The application, presentation and session layers of the OSI model are compressed to form just the application layer for the TCP/IP model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Layer 5/Application:&lt;/strong&gt; This is mainly used for data representation and application interface. Here we have application protocols such as Hypertext Transfer Protocol (HTTP), File Transfer Protocol (FTP) and Simple Mail Transfer Protocol (SMTP).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Layer 4/Transport:&lt;/strong&gt; This s a process to process communication with the use of port addresses (source and destination) to identify services or applications. The two most common transport protocols are Transmission Control Protocol (TCP) and User Data-gram Protocol (UDP).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Layer 3/Network:&lt;/strong&gt; This is a node to node communication with the help of IP address to identify devices on a network, routers operate on this layer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Layer 2/Data link:&lt;/strong&gt; This contains Ethernet and switches. Ethernet also has source and destination addresses but they’re physical addresses, that means they are burned addresses from the company that can’t be changed by user. This layer also helps with flow control and error control.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Layer 1/Physical:&lt;/strong&gt; This is every device that we can felt and touched, like network interface cards and cables. Physical layer takes bits and produces a signal to carry them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-layers-work"&gt;
  &lt;/a&gt;
  How the layers work.
&lt;/h2&gt;

&lt;p&gt;As we send data, each layer will add it’s own bit of information, this is the encapsulation process, where the physical layer transmits the data over to the receiving device, the receiving device then starts to decapsulate the data.&lt;br&gt;
Staring from the application layer which is simply the data, it is passed down to the next layer where the transport information is added, an example could be a TCP header, the data has now been transformed into a segment by breaking the data into pieces, then it moves to the network layer where the IP header is added, causing the segment to become a packet, then moves to the data link layer, Here it’s given a header and a trailer, The header contains mainly the source and destination MAC address and the trailer contains some error checking information to make sure the receiver receives the data correctly, and our packet has been made a frame. Lastly the physical layer, the data is then physically transmitted, thereby completing the encapsulation process.&lt;br&gt;
The encapsulation process has been completed once the data has been transmitted to the receiving computer. To start the decapsulation process, It will check the destination MAC address for that frame and if the frame is correct it will process further to checks the IP information of the packets, again if the packet is correct it will process further to the transport information where it is read and the application data is sent to the receiving application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-some-protocols-work-efficiently-well-with-the-tcpip-model"&gt;
  &lt;/a&gt;
  How the some protocols work efficiently well with the TCP/IP model:
&lt;/h2&gt;

&lt;p&gt;Application protocol HTTP shows how web browsers can get contents of a web page from a web server, HTTP has the functionality to ask for contents of web pages by enabling the web browser to request files from the server and giving the server a way to return the contents of those files with the help of uniform resource locators (URL) or universal resource identifiers (URI). This HTTP header includes the request to get a file, the request typically contains the name of the file.&lt;/p&gt;

&lt;p&gt;Transport protocol TCP is widely know for it’s feature of error recovery, it’s works as the error recovery service provided to application layer. TCP/IP needs a mechanism to guarantee successful delivery of data across a network. the TCP header shows a sequence number (SEQ) with each message the network has a problem and fails to deliver the TCP message called a segment with example sequence number7, message7 was lost, that realization by TCP logic causes TCP to send a TCP segment back to the server asking to resend message7. &lt;/p&gt;

&lt;p&gt;Network protocol IP provides several features most importantly addressing and routing. Routers are networking devices that connect the parts of the TCP/IP network together for the purpose of routing IP packets to the correct destination. Routers receive IP packets on various physical interfaces, make decisions based on the IP address included with the packet and then physically forward the packet out to other network interfaces. The TCP/IP network layer using the IP protocol provides a service of forwarding IP packets from one device to another. Sending data back and forth to IP addresses is called IP routing.&lt;/p&gt;

&lt;p&gt;Data link layer and physical layers define the protocols and hardware required to deliver data across some physical network. The physical layer defines the electrical signals that flow over the cables, rules and conventions exist when sending data over the cable however those rules exist in the data link layer, when a host or router’s IP process chooses to send an IP packet to another router or host, the host or router then uses data link layer details to send that packet to the next host/router.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;TCP/IP  is very modular, this makes it easy to add additional protocols and hardware when they are developed. TCP/IP was produced to make sure that data is reliable on the Internet because with ARPANET everything was very sensitive. This model shows a grand overview of how systems on a network behaves. It helps make everything user-friendly, It also avoids repeating work already done by  some other standards body or vendor consortium by simply referring to standards or protocols created by those groups.&lt;br&gt;
Layer 7, 6 and 5 of the OSI model are grouped in to produce PDU for the transport layer of the TCP/IP model called data. The PDU is mostly in the form of binary. PDU is the data that is broken into segments. We segment our data for security and multiplexing.&lt;/p&gt;

</description>
      <category>model</category>
      <category>network</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Git Command Cheat Sheet </title>
      <author>anitaparmar26</author>
      <pubDate>Thu, 30 Dec 2021 11:34:07 +0000</pubDate>
      <link>https://dev.to/anitaparmar26/git-command-cheat-sheet-31ec</link>
      <guid>https://dev.to/anitaparmar26/git-command-cheat-sheet-31ec</guid>
      <description>&lt;p&gt;Hello Dev,&lt;/p&gt;

&lt;p&gt;We all know about &lt;strong&gt;&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;&lt;/strong&gt; but I want to share little bit about that, In daily base where I am using, it is basic cheat sheet need to all developers.&lt;/p&gt;

&lt;p&gt;Lots of code conflict had been when we were working in a team to completed project. That time we decided to have one cheat sheet on our office wall above desk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git Clone:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://name-of-the-repository-link
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Git New branch, list, deleting:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch 
git branch or git branch --list
git branch -d 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Git Checkout:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout (branch name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Git Status Command for:&lt;/strong&gt;&lt;br&gt;
like current branch, commit, push or pull, files staged, unstaged or untracked, files created, modified or deleted&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Git Add:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add 
git add -A (for everything)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Git Commit:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "commit message
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Git Push: for upload local repo content&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push 
git push --set-upstream 
git push -u origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Git Pull: for git fetch from local repo which will merge branch&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Git Merge: for merge branch to another&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout (branch name)
git fetch
git merge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for reading.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>github</category>
    </item>
    <item>
      <title>Next.js latest version – What’s New in Next.JS 12?</title>
      <author>Linearloop Private Limited</author>
      <pubDate>Thu, 30 Dec 2021 11:25:55 +0000</pubDate>
      <link>https://dev.to/linearloop/nextjs-latest-version-whats-new-in-nextjs-12-4ad4</link>
      <guid>https://dev.to/linearloop/nextjs-latest-version-whats-new-in-nextjs-12-4ad4</guid>
      <description>&lt;p&gt;The biggest release Next.js Conf is now here. If you are looking to know about Next.js latest version, we have brought the information exclusively. Also, capture what is new in Next.js 12 and keep yourself ahead of your competitors.&lt;/p&gt;

&lt;p&gt;This new version has brought exclusive features that ease the development process by maintaining the quality as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These features include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Rust Compiler:&lt;/strong&gt; Offers 3 times faster Refresh along with 5 times faster builds.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Middleware:&lt;/strong&gt; The beta version Middleware enables developers to write code over configuration.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Support for React 18:&lt;/strong&gt; Next.js 12 supports the &lt;a href="https://www.linearloop.io/blog/whats-new-in-react-18/"&gt;new features of React 18&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AVIF Support&lt;/strong&gt;: Next.js 12 is preferable for 20% small images.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bot-aware ISR Fallback:&lt;/strong&gt; The dynamic features of Next.js includes SEO optimization for web crawlers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Support for Native ES Module:&lt;/strong&gt; Here you will get an aligned standard module system.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;URL Imports:&lt;/strong&gt; The alpha version allows you to import packages from any anonymous URL and you are not required to install them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;React Server Components:&lt;/strong&gt; You will get all the react server components with SSR streaming as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#rust-compiler-is-introduced-for-faster-builds-and-quick-refresh"&gt;
  &lt;/a&gt;
  Rust Compiler is introduced for faster builds and quick refresh
&lt;/h2&gt;

&lt;p&gt;As we know technologies are upgraded to make an application more appealing, productive, and interactive. Hence, Next.js 12 has incorporated the Rust compiler that makes executions by leveraging the benefits of native compilation.  &lt;/p&gt;

&lt;p&gt;The Rust compiler of Next.js 12 is developed on SWC. For those who are unaware of SWC, it is an open-source for the next generation of fast tooling. With this combination, Next.js delivers 3 times faster refresh and 5 times faster build.&lt;/p&gt;

&lt;p&gt;Being a developer, this is the most attractive feature because it makes the process of development sorted, effortless, and result-oriented.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-other-attractive-features-of-this-dynamic-release-are"&gt;
  &lt;/a&gt;
  Some other attractive features of this dynamic release are:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Improved speed for bigger databases: The Next.js team has validated the Rust compiler against some largest codebases across the world. In this practical implementation, improved speed is monitored.&lt;/li&gt;
&lt;li&gt;Improvised performance: The current release of Next.js that is Next.js 12 now delivers Fast Refresh timing in the console for both the parties (client &amp;amp; server). Further, it also includes the number of files and modules compiled.&lt;/li&gt;
&lt;li&gt;Improvements in Webpack: Next.js 12 has brought improvisations to the webpack as well. Further, it makes the on-demand entries more reliable by maintaining the Fast Refresh.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#replacement-of-babel-with-swc"&gt;
  &lt;/a&gt;
  Replacement of Babel with SWC
&lt;/h4&gt;

&lt;p&gt;As stated, earlier Next.js 12 has utilized the features of Rust-based complier SWC in place of Babel in order to execute JavaScript or TypeScript. Moreover, with the version, the developers get full support for the applications having custom Babel configuration.&lt;/p&gt;

&lt;p&gt;So, no need to worry about the compilation because Next.JS 12 comes with complete compatibility.&lt;/p&gt;

&lt;p&gt;Additionally, the by default transformations like tree-shaking of getStaticProps / getStaticPaths / getServerSideProps and styled-jsx is now shifted to Rust. &lt;/p&gt;

&lt;p&gt;The amazing thing about Next.js 12, it offers quick implementation of SWC for an application developed using Babel configuration. It means, no matter even if the application is developed using Babel, the new version automatically compiles JavaScript or Typescript through SWC.&lt;/p&gt;

&lt;p&gt;Also, the compilation is done as per the same method of Next.js 11. The concept has sorted the compatibility issues from one version to another.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#replacement-of-terser-with-swc"&gt;
  &lt;/a&gt;
  Replacement of Terser with SWC
&lt;/h4&gt;

&lt;p&gt;To minify the JavaScript with 7 times faster execution, developers can select SWC over Terser. The required flag in next.config.js is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// next.config.js

module.exports = {
  swcMinify: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#middleware-introduction"&gt;
  &lt;/a&gt;
  Middleware Introduction
&lt;/h2&gt;

&lt;p&gt;With Middleware, the developer becomes able to use code over configuration. As Next.js has introduced Middleware, hence here you will get the flexibility to run the code prior to the completion of the request.&lt;/p&gt;

&lt;p&gt;Further, the modification can be made by, redirecting, rewriting, adding headers, or even streaming HTML based on the response from the user.&lt;/p&gt;

&lt;p&gt;Middleware is useful for the features that contain logic. These features are like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Bot protection&lt;/li&gt;
&lt;li&gt;Redirects and rewrites&lt;/li&gt;
&lt;li&gt;Handling unsupported browsers&lt;/li&gt;
&lt;li&gt;Feature flags and A/B tests&lt;/li&gt;
&lt;li&gt;Server-side analytics&lt;/li&gt;
&lt;li&gt;Advanced i18n routing requirements&lt;/li&gt;
&lt;li&gt;Logging and many more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, Middleware follows defined runtime and it supports APIs like fetch. Also, it works exceptionally well by using the next start. Further, it efficiently works for Edge platforms such as Vercel that uses Edge functions.&lt;/p&gt;

&lt;p&gt;If you are looking to use Middleware in Next.JS, follow the given code after creating a file pages/_middleware.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// pages/_middleware.js

export function middleware(req, ev) {
  return new Response('Hello, world!')
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#improved-styledjsx-css-parsing"&gt;
  &lt;/a&gt;
  Improved Styled-jsx CSS parsing
&lt;/h3&gt;

&lt;p&gt;The implementation of the new CSS parser is made by following the old one. As we know, the parser executes the styled-jsx Babel transform. The handling of CSS is now easy in Next.js 12.&lt;/p&gt;

&lt;p&gt;It also reflects an error for invalid CSS that is not the case in the older version, and it reflected unexpected behavior. The improved version throws all the errors during development only. Also, only styled-jsx is affected by the change.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#improvements-with-react-18"&gt;
  &lt;/a&gt;
  Improvements with React 18
&lt;/h4&gt;

&lt;p&gt;As we have mentioned in our blog “&lt;a href="https://www.linearloop.io/blog/whats-new-in-react-18/"&gt;the new features of React 18&lt;/a&gt;”, that this version will come up with the features of Automatic Batching, APIs such as “startTransition”, Suspense, etc., so the Next.js team is closely working with the team of Facebook’s React 18 to make it compatible with all the &lt;a href="https://www.linearloop.io/blog/whats-new-in-react-18/"&gt;new updates of React 18&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#no-further-support-for-webpack-4"&gt;
  &lt;/a&gt;
  No further support for Webpack 4
&lt;/h4&gt;

&lt;p&gt;Developers engaged with Webpack 5, do not need to go through this. The section is useful for those who are working using Webpack 4. &lt;/p&gt;

&lt;p&gt;Being a Next.js developer, you must know, Next.js works using webpack 5 for all the compilations in the version Next.js 11. Hence in the new upgraded version Next.js 12, there is no support available for webpack 4.&lt;/p&gt;

&lt;p&gt;If your project is developed with webpack 4, now you will get an error there. So, we recommend revising the code accordingly and avoiding unnecessary errors.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#support-for-es-modules"&gt;
  &lt;/a&gt;
  Support for ES Modules
&lt;/h4&gt;

&lt;p&gt;Next.js 12 has support for ES modules that addons a standardized and professional module system to JavaScript. All major browsers including Node.js support it.&lt;/p&gt;

&lt;p&gt;The concept offers a better user experience because it pushes the web ecosystem by enabling Java script bundles and smaller size packages both. Further, their support is available for developers, when the JavaScript ecosystem changes from common JS to ES module.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#support-for-url-imports"&gt;
  &lt;/a&gt;
  Support for URL imports
&lt;/h4&gt;

&lt;p&gt;With the implementation of Next.js 12, developers are free to ES modules from any URL, without having any separate build or installation process. Through this feature, the technical team gets the flexibility to use any package straight from the URL.&lt;/p&gt;

&lt;p&gt;As a result, Next.js 12 executes HTTP(S) remotely same as local dependencies.&lt;/p&gt;

&lt;p&gt;To use the feature, follow the code by allowing URL prefixes in next.config.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// next.config.js
module.exports = {
  experimental: {
    concurrentFeatures: true
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#botaware-isr-fallback"&gt;
  &lt;/a&gt;
  Bot-Aware ISR Fallback
&lt;/h4&gt;

&lt;p&gt;Web Crawler or search bots in Next.js 12 automatically server-render the ISR pages by using the code “fallback: true”. Further, it also maintains the older behavior of the fallback state to non-crawler agents.&lt;/p&gt;

&lt;p&gt;Because of this, crawlers are prevented from indexing loading states.&lt;/p&gt;

&lt;p&gt;Smaller Images through AVIF&lt;br&gt;
With the new update of Next.js, now there is no need to wait for the images that take longer than the expected time to optimize. As compared to WebP, here you will have 20% smaller images that further ease the optimization process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-other-improvisations-of-nextjs-12"&gt;
  &lt;/a&gt;
  Some other improvisations of Next.js 12:
&lt;/h4&gt;

&lt;p&gt;The addition of pages like /_app.js or pages/_document.js to the application will replace the built-in version automatically even without the need for a reboot of the Next.js CLI.&lt;br&gt;
Setting a custom tsconfig.json path is now supported by Next.js 12.&lt;/p&gt;

&lt;p&gt;Using the shared worker pool, the static pages can be checked.&lt;br&gt;
The concept uses WebSocket connection in place of EventSource connection.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#botaware-isr-fallback"&gt;
  &lt;/a&gt;
  Bot-Aware ISR Fallback
&lt;/h4&gt;

&lt;p&gt;Web Crawler or search bots in Next.js 12 automatically server-render the ISR pages by using the code “fallback: true”. Further, it also maintains the older behavior of the fallback state to non-crawler agents.&lt;/p&gt;

&lt;p&gt;Because of this, crawlers are prevented from indexing loading states.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h5&gt;

&lt;p&gt;So, guys, these are the changes done in the new version of Next.js. Further, Linearloop is one of the recognized &lt;strong&gt;&lt;a href="https://www.linearloop.io/"&gt;Next.js companies in India and the USA&lt;/a&gt;&lt;/strong&gt;, and hence we make sure to keep spreading awareness about the technology upgrade.&lt;/p&gt;

&lt;p&gt;The announcement is made a few hours ago only, and we are here with all the details. If you need any kind of assistance, feel free to get in touch. Our team will explain in the best possible way.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Power Full Generator You Must Try</title>
      <author>Kamran Ahmad</author>
      <pubDate>Thu, 30 Dec 2021 11:20:37 +0000</pubDate>
      <link>https://dev.to/officialkamran/power-full-generator-you-must-try-8c0</link>
      <guid>https://dev.to/officialkamran/power-full-generator-you-must-try-8c0</guid>
      <description>&lt;p&gt;GetWaves &lt;br&gt;
 A free SVG wave generator created by z creative labs. Choose a curve, adjust, complexity, randomize!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ag3AZplp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88gpoirf22p3m9bvnoug.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ag3AZplp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88gpoirf22p3m9bvnoug.jpg" alt="Image description" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://getwaves.io/"&gt;getwaves.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blob Maker&lt;br&gt;
  Blobmaker is a free generative design tool made by z creative labs, to help you quick create random. unique, and organic-looking SVG shapes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aX7JjMey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v14m0f4i8pixklrcsn9q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aX7JjMey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v14m0f4i8pixklrcsn9q.jpg" alt="Image description" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.blobmaker.app/"&gt;blobmaker.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tridiv&lt;br&gt;
Tridiv is web-based editor for creating 3D shape in CSS on easy way &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jwekyaes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm57340q8tt0hfcdglpa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jwekyaes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm57340q8tt0hfcdglpa.jpg" alt="Image description" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://tridiv.com/"&gt;tridiv.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing more thing you can do buy me a coffee👋👇&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/kamranah"&gt;Buymeacoffee&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Flow control, short-circuit expressions and functional programming in JavaScript</title>
      <author>Osman Cea</author>
      <pubDate>Thu, 30 Dec 2021 11:19:58 +0000</pubDate>
      <link>https://dev.to/daslaf/flow-control-short-circuit-expressions-and-functional-programming-in-javascript-31ln</link>
      <guid>https://dev.to/daslaf/flow-control-short-circuit-expressions-and-functional-programming-in-javascript-31ln</guid>
      <description>&lt;p&gt;A couple of days ago while doing code review I saw a snippet like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;someCondition&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;someCondition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You don't need to know what &lt;code&gt;React.useEffect&lt;/code&gt; does or anything, I just want to focus on the body of the callback function.&lt;/p&gt;

&lt;p&gt;I suggested my colleague to use an &lt;code&gt;if&lt;/code&gt; statement instead of the short-circuit expression. When asked why it was preferable to use an &lt;code&gt;if&lt;/code&gt; instead, I didn't have a reasonable answer. It just &lt;em&gt;felt better&lt;/em&gt; to me.&lt;/p&gt;

&lt;p&gt;But &lt;em&gt;feeling better&lt;/em&gt; is not an acceptable reason, specially because it is highly subjective. What &lt;em&gt;feels better&lt;/em&gt; to me won't necessarily &lt;em&gt;feel better&lt;/em&gt; for the rest of the team.&lt;/p&gt;

&lt;p&gt;So I just did what any other person would do: I obsessed about it (😅), trying to rationalize why &lt;em&gt;it felt better&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This article just describes my reasoning around this topic. Like it or not, that's completely up to you. I'm not suggesting this as a "best practice" or anything else.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;One thing I learned from watching Rich Hickey's talks is to always start with a definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In computer science, an &lt;a href="https://en.wikipedia.org/wiki/Expression_%28computer_science%29"&gt;expression&lt;/a&gt; is a syntactic entity in a programming language that may be evaluated to determine its value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's a bunch of expressions in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;42&lt;/span&gt;                              &lt;span class="c1"&gt;// 42 &lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;                           &lt;span class="c1"&gt;// 'foo'&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt;                           &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;          &lt;span class="c1"&gt;// ??&lt;/span&gt;
&lt;span class="nx"&gt;nums&lt;/span&gt;                            &lt;span class="c1"&gt;// [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Values in JavaScript evaluate to themselves, and variables &lt;em&gt;holding&lt;/em&gt; values evaluate to whatever they &lt;em&gt;hold&lt;/em&gt;. Notice the fourth line in the snippet above: in JavaScript assignments are also expressions. What do you think the expression &lt;code&gt;const nums = [1, 2, 3]&lt;/code&gt; evaluates to?&lt;/p&gt;

&lt;p&gt;Well, it evaluates to &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In other programming languages (like Python) a variable assignment is not an expression, but a statement. Here's the definition for statement:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In computer programming, a &lt;a href="https://en.wikipedia.org/wiki/Statement_(computer_science)"&gt;statement&lt;/a&gt; is a syntactic unit of an imperative programming language that expresses some action to be carried out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The important word here is &lt;strong&gt;action&lt;/strong&gt;. Keep that in mind for now.&lt;/p&gt;

&lt;p&gt;Here's a bunch of statements in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/*...*/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/*...*/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/*...*/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ignoring the fact that assignment is an expression (a useless expression, if I do say so myself) it would be reasonable to think that &lt;em&gt;expressions&lt;/em&gt; are to &lt;strong&gt;values&lt;/strong&gt; as &lt;em&gt;statements&lt;/em&gt; are to &lt;strong&gt;actions&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shortcircuit-evaluation"&gt;
  &lt;/a&gt;
  Short-circuit evaluation
&lt;/h2&gt;

&lt;p&gt;More definitions, yey:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation"&gt;Short-circuit evaluation&lt;/a&gt;, minimal evaluation, or McCarthy evaluation (after John McCarthy) is the semantics of some Boolean operators in some programming languages in which the second argument is executed or evaluated only if the first argument does not suffice to determine the value of the expression.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;                 &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the previous snippet of code, the right-hand side expression of the OR operator is not evaluated since the first argument is enough to determine the value of the whole expression.&lt;/p&gt;

&lt;p&gt;It's kinda weird to think about it like this using literals, since literals evaluate to themselves. We'll write this differently so it's easier to reason about:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;aCondition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;anotherCondition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="nx"&gt;aCondition&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;anotherCondition&lt;/span&gt;   &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since &lt;code&gt;aCondition&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, there's no need for looking up the value of &lt;code&gt;anotherCondition&lt;/code&gt;, whatever that is.&lt;/p&gt;

&lt;p&gt;Let's try with another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bayum!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bodoque&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;           &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run this code, you'll notice &lt;code&gt;'Bayum!'&lt;/code&gt; is not logged to the console, since the left-hand side of the &lt;code&gt;||&lt;/code&gt; operator is already &lt;code&gt;true&lt;/code&gt;, which is good!&lt;/p&gt;

&lt;p&gt;But what's the deal with this?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#side-effects-functional-programming-amp-haskell"&gt;
  &lt;/a&gt;
  Side effects, functional programming &amp;amp; Haskell
&lt;/h2&gt;

&lt;p&gt;We'll take a brief detour and continue with, guess what, another definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Haskell_(programming_language)"&gt;Haskell&lt;/a&gt; is a general-purpose, statically typed, purely functional programming language with type inference and lazy evaluation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's write a little function with Haskell that prints &lt;code&gt;"42"&lt;/code&gt; to the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;doSomething&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;"42"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;ghci&lt;/code&gt;, which is the Glasgow Haskell Compiler interactive environment (think of a REPL), we can check the type of our &lt;code&gt;doSomething&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prelude&amp;gt; doSomething = putStrLn "42"
Prelude&amp;gt; :t doSomething 
doSomething :: IO ()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;doSomething&lt;/code&gt; is a function that takes no arguments and its return type is &lt;code&gt;IO ()&lt;/code&gt;, or &lt;code&gt;IO&lt;/code&gt; of unit (an empty set of parentheses is called unit and it's &lt;em&gt;similar&lt;/em&gt; to &lt;code&gt;void&lt;/code&gt; in JavaScript). In Haskell all functions with side effects have a return type of &lt;code&gt;IO&lt;/code&gt; of something. Pure functions can't call effectful functions. If you want to have a side effect, the return type should always be &lt;code&gt;IO&lt;/code&gt; of something.&lt;/p&gt;

&lt;p&gt;Although not mandatory, we can explicitly write type annotations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;doSomething&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;doSomething&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;"42"&lt;/span&gt;

&lt;span class="c1"&gt;-- Here's another function that takes two Ints &lt;/span&gt;
&lt;span class="c1"&gt;-- and returns another Int, just for contrast&lt;/span&gt;
&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; 
&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright, detour is over, enough Haskell, let's get back on track.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shortcircuit-expressions-and-flow-control"&gt;
  &lt;/a&gt;
  Short-circuit expressions and flow control
&lt;/h2&gt;

&lt;p&gt;A function invocation can always be replaced by its return value if it depends only in its inputs. Another way to phrase it, is that a function invocation can only be replaced by its return value if the function has no side effects.&lt;/p&gt;

&lt;p&gt;This property is called referential transparency. Referentially transparent functions are also known as pure functions.&lt;/p&gt;

&lt;p&gt;When doing functional programming, our goal is to maximize the surface area of code that's written with pure functions: they are easier to test and easier to reason about. So for most of your functions in a program, you're going to be interested in their return values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;whatIsThis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someCondition&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we're not interested about the result of &lt;code&gt;doSomething&lt;/code&gt;, then it's probably worthless to store the value of the expression into &lt;code&gt;whatIsThis&lt;/code&gt;, but the expression will still have a value, whether it is used or not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;someCondition&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;// `false` when `someCondition` is `false`&lt;/span&gt;
                                 &lt;span class="c1"&gt;// `undefined` when `someCondition` is `true`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we don't care about the value of the expression, then &lt;code&gt;doSomething&lt;/code&gt; is most likely an effectful function. But JavaScript is no Haskell so there's no way to tell if &lt;code&gt;doSomething&lt;/code&gt; is effectful or not without looking at its implementation. And even then, it wouldn't be necessarily something straightforward to figure out.&lt;/p&gt;

&lt;p&gt;I think this is why I prefer to use an &lt;code&gt;if&lt;/code&gt; statement instead of a short-circuit expression for flow control in effectful functions: for me it makes it completely unambiguous that we don't care about the return value, hence it's a side effect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-what-about-effectful-functions-that-do-return-something"&gt;
  &lt;/a&gt;
  But what about effectful functions that DO return something?
&lt;/h2&gt;

&lt;p&gt;We don't have a compiler like GHC to enforce purity in our functions, but we can still follow a similar convention that only effectful functions can call other effectful functions. Haskell does this using monads.&lt;/p&gt;

&lt;p&gt;Instead of writing an explanation about this topic, let me point you to this really straightforward video that makes a wonderful job:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/C2w45qRc3aU"&gt;https://youtu.be/C2w45qRc3aU&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>functional</category>
    </item>
    <item>
      <title>I am a Digital Marketing Head</title>
      <author>Bella Smith</author>
      <pubDate>Thu, 30 Dec 2021 11:19:37 +0000</pubDate>
      <link>https://dev.to/belladesk2021/i-am-a-digital-marketing-head-4kk9</link>
      <guid>https://dev.to/belladesk2021/i-am-a-digital-marketing-head-4kk9</guid>
      <description>&lt;p&gt;I am a Digital Marketing Head. I am also SEO consultant at &lt;strong&gt;&lt;a href="https://sheknowsfinance.com/"&gt;Sheknowsfinance&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Basic concepts of JSX and Virtual DOM every React JS developer should know</title>
      <author>sisrafilss</author>
      <pubDate>Thu, 30 Dec 2021 11:08:03 +0000</pubDate>
      <link>https://dev.to/sisrafilss/basic-concepts-of-jsx-and-virtual-dom-every-react-js-developer-should-know-cb0</link>
      <guid>https://dev.to/sisrafilss/basic-concepts-of-jsx-and-virtual-dom-every-react-js-developer-should-know-cb0</guid>
      <description>&lt;p&gt;JSX and Virtual DOM are the two main concepts of React JS that powered React JS to reach its unique stage. Today we will discuss these two concepts in brief.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jsx"&gt;
  &lt;/a&gt;
  What is JSX?
&lt;/h2&gt;

&lt;p&gt;JSX is an acronym of JavaScript XML. JSX is nothing but a syntactic sugar of creating React Element. It allows us to write HTML-like syntax in JavaScript function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-jsx"&gt;
  &lt;/a&gt;
  Why JSX?
&lt;/h2&gt;

&lt;p&gt;Before going into detail about why JSX is used, let’s take a look at how HTML renders by the browsers.&lt;/p&gt;

&lt;p&gt;We all know that browsers can only understand HTML code. But how does the browser run the HTML code under the hood and display the amazing pages? Basically, when the browser renders the HTML code, it passes them through HTML parser and creates an object-like structure called DOM tree (DOM stands for Document Object Model). The next step of rendering is Attachment. In the attachment phase, all the style rules are attached with DOM tree and sent to the Render tree. Finally, Render tree pains the element on the screen, and we can see them.&lt;/p&gt;

&lt;p&gt;When browser converts the HTML to DOM tree, it used a document method called createElemet() for every HTML element. For example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const root = document.getElementById("root");
const h2 = document.createElement("h2");
h2.innerText = "Hello, world!";
root.appendChild(h2);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, first, we have created an HTML element using document.createElement() method. The browser does the same for every HTML element on the page while parsing a page. When browser’s HTML parser finds any HTML element, it converts it to DOM element using document.createElement method. So, HTML is nothing but a syntactic sugar of createElement method, which allows us to create elements simply and concisely.&lt;/p&gt;

&lt;p&gt;Similarly, React JS has a virtual DOM. It needs to create React Elements for its virtual DOM. We can create react elements using React.createElement method. But it is tedious to create multiple or nested elements by calling the React.createElement method again and again. JSX made a developer’s life easy and simple by enabling us to create react elements using simple HTML-like syntax. See the following examples -&lt;/p&gt;

&lt;p&gt;To display hello h2 (wrapped in h2) and hello h3 (wrapped in h3) on the web page under root div using React.createElement we have to write -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const root = document.getElementById("root");

// Only using React.createElement
const element =  React.createElement('div', null, [
   React.createElement("h2", null, "Hello h2"),
   React.createElement("h3", null, "Hello h3"),
]);

ReactDOM.render(element, root);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we can do the same using JSX like the following -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const root = document.getElementById("root");

// Using JSX
const element = &amp;lt;div&amp;gt;
   &amp;lt;h2&amp;gt;Hello h2&amp;lt;/h2&amp;gt;
   &amp;lt;h3&amp;gt;Hello h3&amp;lt;/h3&amp;gt;
&amp;lt;/div&amp;gt;

ReactDOM.render(element, root);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#virtual-dom-and-diffing-algorithm"&gt;
  &lt;/a&gt;
  Virtual DOM and Diffing algorithm
&lt;/h2&gt;

&lt;p&gt;We have discussed the browser DOM in short in the JSX section. React JS stands on an idea of something similar to browser DOM called virtual DOM. Virtual DOM is a mirror copy of browser DOM. When we run a react app in the browser, React JS creates a copy of the browser DOM and holds it in the memory.&lt;/p&gt;

&lt;p&gt;The reason React creates a virtual DOM is to identify any change of state on the DOM elements and update it to the UI quickly and efficiently.&lt;br&gt;
When we change any element in the browser DOM, it needs to re-render the whole DOM tree. Modern single-page applications can have hundreds of thousands of states. Sometimes, it is costly to detect any state change and update the UI accordingly. React brought a revolution in this case of handling vast amounts of state very quickly and efficiently.&lt;/p&gt;

&lt;p&gt;How actually React JS handle this using virtual DOM? Well, let me explain.&lt;/p&gt;

&lt;p&gt;As I have mentioned earlier, React creates a virtual representation of browser DOM when the application renders for the first time on the browser. If any of the elements or states change in the page, react create another copy of the previous virtual DOM without re-rendering the browser DOM and compare the changes between the previous virtual DOM and newly created virtual DOM using diffing algorithm. React made it very efficient and quick to find out the difference between them because there is no UI painting involved there. After identifying the difference, React only update the differents part of the browser DOM without re-rendering the whole page.&lt;/p&gt;

&lt;p&gt;Though React is not the best solution for all use cases, it performs better compared with vanilla JS or using jQuery, where needs to deal with a massive number of states like SPA because of its virtual DOM concepts. So we should keep a clear-cut concept of React virtual DOM as a React JS developer.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>jsx</category>
      <category>dom</category>
    </item>
  </channel>
</rss>
