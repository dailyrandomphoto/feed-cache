<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My productivity setup ( VS Code )</title>
      <author>Ratul</author>
      <pubDate>Sun, 21 Feb 2021 06:49:24 +0000</pubDate>
      <link>https://dev.to/ratuloss/my-productivity-setup-vs-code-4o9d</link>
      <guid>https://dev.to/ratuloss/my-productivity-setup-vs-code-4o9d</guid>
      <description>&lt;p&gt;In this post I am gonna show you my personal vs code setup! Which makes me more productive. And gives me inspiration to do more coding. I will show you how turn this boring one, -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---rs6ZLKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23lxj0cvky7inro6kcbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---rs6ZLKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23lxj0cvky7inro6kcbe.png" alt="Ratul"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To this cool one-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DRHwA9fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehkumc2fu47l1g58ggny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DRHwA9fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehkumc2fu47l1g58ggny.png" alt="Ratul"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I will also provide you a list of useful VS code extentions which will make you life more easier as a developer. So if you are interested, continue reading...&lt;/p&gt;



&lt;h1&gt;Theme&lt;/h1&gt;

&lt;p&gt;When it comes about theme every people has a different choice. But I personally prefer to use - "&lt;a href="https://marketplace.visualstudio.com/items?itemName=kohlbachjan.the-best-theme"&gt;The best theme&lt;/a&gt;". Yes if you take my opinion this is the best theme. Which give a elegant look to my VS code. It's pretty similar to one dark pro. But this one is a little bit lighter than one dark pro. Which attracts me so much.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DRHwA9fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehkumc2fu47l1g58ggny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DRHwA9fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehkumc2fu47l1g58ggny.png" alt="Ratul"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;Font&lt;/h1&gt;

&lt;p&gt;I use &lt;a href="https://fonts.google.com/specimen/Fira+Code?category=Monospace&amp;amp;preview.text_type=custom&amp;amp;query=fira+code"&gt;Fira Code&lt;/a&gt; as the default font of my editor. Which looks pretty fine. It gives a nice look to my editor. And fira code 400 medium is recommended with the Best theme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Jry1QKM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ot3188wellfe8a915x2t.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Jry1QKM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ot3188wellfe8a915x2t.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;Icons&lt;/h1&gt;

&lt;p&gt;For icons I use &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Material Icon Theme&lt;/a&gt; Which makes my icons simple and elegant looking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gfzs-eSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtqkypj5msdh5alpirxr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gfzs-eSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtqkypj5msdh5alpirxr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;Useful Extentions&lt;/h1&gt;

&lt;h2&gt;1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Prettier is a really really useful extention. It formats your unformatted code once you save your file. So install it. And after installation, go to settings, and search - "Format on save" Then check the settings if it is marked. Then add some code in your settings.json&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"esbenp.prettier-vscode"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;2. &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Auto Rename Tag&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This extention saves my time a lot When I am working with React, Html and XML. It renames the closing tag automatically when you try to rename the opening tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p89ESydS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yeotfrpwmtlfhqyk9jd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p89ESydS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yeotfrpwmtlfhqyk9jd.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;ES7 React/Redux/GraphQL/React-Native snippets&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This extention saves a lot of time when I am working with react and react-native. It helps me to prevent writing all the boilerplate codes. Like when I type - 'rafce' if generates all the codes for a react functional component.&lt;/p&gt;

&lt;h2&gt;4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This extention is so useful when you are working with html, css and js projects. It auto reloads the browser page once you save any file in your project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EARocjDz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eox2rwmik8y2yy93dzr1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EARocjDz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eox2rwmik8y2yy93dzr1.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Bracket Pair Colorizer&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This extention is so much useful. It highlights the occurance of the opening and closing brackets. And it generates different colors of brackets. Which helps me have a more better and fast understanding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B2DCoF60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aa5gbvnvfim3bbv2kun7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2DCoF60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aa5gbvnvfim3bbv2kun7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;So that was my vs code setup. I enjoy working a lot with this setup. Let me know what is your productivity setup! in the discussions.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Project 49 of 100 - Search with Autocomplete</title>
      <author>James Hubert</author>
      <pubDate>Sun, 21 Feb 2021 06:20:38 +0000</pubDate>
      <link>https://dev.to/jwhubert91/project-49-of-100-search-with-autocomplete-5g5f</link>
      <guid>https://dev.to/jwhubert91/project-49-of-100-search-with-autocomplete-5g5f</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey! I'm on a mission to make 100 React.js projects ending March 31st. Please follow my dev.to profile or my &lt;a href="https://www.twitter.com/jwhubert91"&gt;twitter&lt;/a&gt; for updates and feel free to reach out if you have questions. Thanks for your support!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Link to the deployed project: &lt;a href="https://100-react-projects-day-49-autocomplete.netlify.app/"&gt;Link&lt;/a&gt;&lt;br&gt;
Link to the repo: &lt;a href="https://github.com/jwhubert91/100daysofreact/tree/master/day-49-autocomplete-start-wars"&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I wanted to create an autocomplete component in React because I haven't implemented search in React before much less autocomplete. I'm actually curious how other people implement this from scratch because with the Star Wars API it's fairly easy. They have their own search feature that returns an array of JSON results and the number of Star Wars characters any search is going to return is necessarily small. What if your database has 100,000 possible results? I suppose you could put a numeric limit on the results in most databases.&lt;/p&gt;

&lt;p&gt;For the basic search component I adapted &lt;a href="https://dev.to/sage911/how-to-write-a-search-component-with-suggestions-in-react-d20"&gt;this Dev.to blog post&lt;/a&gt; into a functional component. Rather than use their API, I decided to use &lt;a href="https://swapi.dev/"&gt;a Star Wars character search API&lt;/a&gt; that is open and doesn't require a signup that exposes my email.&lt;/p&gt;

&lt;p&gt;The structure of the website is simple. It uses an &lt;code&gt;App&lt;/code&gt; component and a &lt;code&gt;Search&lt;/code&gt; component, where the important logic happens. It uses three pieces of state- &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;searchResults&lt;/code&gt; and &lt;code&gt;selectedCharacter&lt;/code&gt; which are all set to empty at initialization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const [query,setQuery] = useState('');
  const [searchResults,setSearchResults] = useState([]);
  const [selectedCharacter,setSelectedCharacter] = useState(null);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the return statement we create a form with a text input for the search feature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
    &amp;lt;form className='search-form-container'&amp;gt;
      &amp;lt;input 
        placeholder='Search for...'
        onChange={handleInputChange}
        value={query}
      /&amp;gt;
    &amp;lt;/form&amp;gt;
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As the user searches we initiate the API call to the Star Wars API using their search URL query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const searchURL = 'https://swapi.dev/api/people/?search=';

const getInfo = () =&amp;gt; {
    console.log('Getting info from API...')
    fetch(searchURL+query)
      .then(res =&amp;gt; res.json())
      .then(data =&amp;gt; setSearchResults(data.results))
      .catch(e =&amp;gt; {
        console.log({error: e});
    });
}

const handleInputChange = (e) =&amp;gt; {
    setQuery(e.target.value)
    if (query &amp;amp;&amp;amp; query.length &amp;gt; 0) {
      getInfo();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If results are returned from the API, we populate a &lt;code&gt;ul&lt;/code&gt; element beneath the search box with results. I usually use the standard map method and create a &lt;code&gt;key&lt;/code&gt; prop for the returned JSX children but I wanted to implement this a new way- with the &lt;code&gt;React.Children.toArray()&lt;/code&gt; method. This way, you don't have to create your own key prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const results = React.Children.toArray(
    searchResults.map((item,idx) =&amp;gt; (
      &amp;lt;li className='result-item' id={idx} onClick={handleQueryResultClick}&amp;gt;{item.name}&amp;lt;/li&amp;gt;
    ))
)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That looks like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0d-tJQwy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1rz0c3k8iku1x2gc8ap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0d-tJQwy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1rz0c3k8iku1x2gc8ap.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the user selects one of these &lt;code&gt;li&lt;/code&gt; elements, the index of that element from the original array of results stored in &lt;code&gt;searchResults&lt;/code&gt; will match up with the id of the &lt;code&gt;li&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleQueryResultClick = (e) =&amp;gt; {
    const searchResultId = e.target.id;
    setSelectedCharacter(searchResults[searchResultId]);
    setQuery([]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We then populate select data from that character's search into a div below the search box and clear the query state to remove the &lt;/p&gt;
&lt;ul&gt; element of search results. I did this with a ternary.

&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
        {selectedCharacter ? (
          &amp;lt;div className='character-display-container'&amp;gt;
            &amp;lt;p&amp;gt;&amp;lt;span className='character-info-title'&amp;gt;name:&amp;lt;/span&amp;gt; {selectedCharacter.name}&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;&amp;lt;span className='character-info-title'&amp;gt;height:&amp;lt;/span&amp;gt; {selectedCharacter.height}&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;&amp;lt;span className='character-info-title'&amp;gt;mass:&amp;lt;/span&amp;gt; {selectedCharacter.mass}&amp;lt;/p&amp;gt;
          &amp;lt;/div&amp;gt;
        ) : (
          &amp;lt;p className='no-results-prompt'&amp;gt;There are no results. Try typing something into the search bar above.&amp;lt;/p&amp;gt;
        )}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;That's it! It was easier than I expected, largely because the API is so easy to use. I highly encourage you to try it.&lt;/p&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Dark Mode using CSS variables</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 21 Feb 2021 05:53:03 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/dark-mode-using-css-variables-1m3</link>
      <guid>https://dev.to/ruppysuppy/dark-mode-using-css-variables-1m3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-dark-mode" class="anchor"&gt;
  &lt;/a&gt;
  What is Dark Mode?
&lt;/h1&gt;

&lt;p&gt;Dark mode, also called Light-on-dark color scheme, is a color scheme that uses light-colored text, icons, and graphical user interface elements on a dark background and is often discussed in terms of computer user interface design and web design.&lt;/p&gt;

&lt;p&gt;The idea behind dark mode is that it reduces the light emitted by device screens while maintaining the minimum color contrast ratios required for readability.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-the-advantages-of-dark-mode" class="anchor"&gt;
  &lt;/a&gt;
  What are the advantages of Dark Mode?
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Can use less energy on the using device&lt;/li&gt;
&lt;li&gt;Can potentially reduce eye strain and dry eyes in low-light conditions&lt;/li&gt;
&lt;li&gt;Less &lt;code&gt;blue light&lt;/code&gt; emitted from your phone – which can keep you awake if you use your device before heading to bed&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#how-to-implement-dark-mode-in-your-website" class="anchor"&gt;
  &lt;/a&gt;
  How to implement dark mode in your website?
&lt;/h1&gt;

&lt;p&gt;Lets start with a html skeleton and a button and a linked stylesheet and script&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Dark Mode&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"toggleBtn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Toggle Dark Mode
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now let's address the main issue. First we will be adding the css variables for the colors (lets call them &lt;code&gt;primary&lt;/code&gt; and &lt;code&gt;background&lt;/code&gt;) and override the required color(s) in the dark mode&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#4240b4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dddddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.dark&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#222222&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--background&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;So from the javascript, we only need to toggle the class list of the body of the html document&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#toggleBtn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;toggleBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#demo" class="anchor"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/eYBEogP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#project-using-this-implementation" class="anchor"&gt;
  &lt;/a&gt;
  Project using this Implementation
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Smartsapp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Web-app: &lt;a href="https://smartsapp-ba40f.firebaseapp.com/"&gt;https://smartsapp-ba40f.firebaseapp.com&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ruppysuppy"&gt;
        ruppysuppy
      &lt;/a&gt; / &lt;a href="https://github.com/ruppysuppy/SmartsApp"&gt;
        SmartsApp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      💬📱 An End to End Encrypted Cross Platform messenger app.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Smartsapp&lt;/h1&gt;
&lt;div&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ruppysuppy/SmartsApp/master/./readme_img/logo.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ns_GzKXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ruppysuppy/SmartsApp/master/./readme_img/logo.svg"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;A fully &lt;strong&gt;cross-platform messenger&lt;/strong&gt; app with &lt;strong&gt;End to End Encryption (E2EE)&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
Demo&lt;/h2&gt;

&lt;div&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ruppysuppy/SmartsApp/master/./readme_img/demo.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WyjN1v8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/ruppysuppy/SmartsApp/master/./readme_img/demo.gif"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The features shown in the demo is not exhaustive. Only the core features are showcased in the demo.&lt;/p&gt;

&lt;h2&gt;
Platforms Supported&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Desktop:&lt;/strong&gt; Windows, Linux, MacOS&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mobile:&lt;/strong&gt; Android, iOS&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Website:&lt;/strong&gt; Any device with a browser&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
Back-end Setup&lt;/h2&gt;

&lt;p&gt;The back-end of the app is handled by &lt;code&gt;Firebase&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
Basic Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to firebase console and create a new project with the name &lt;code&gt;Smartsapp&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Enable &lt;code&gt;Google Analylitics&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
App Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create an &lt;code&gt;App&lt;/code&gt; for the project from the overview page&lt;/li&gt;
&lt;li&gt;Copy and paste the configurations in the required location (given in the readme of the respective apps)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
Auth Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to the project &lt;code&gt;Authentication&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Sign-in method&lt;/code&gt; tab&lt;/li&gt;
&lt;li&gt;Enable &lt;code&gt;Email/Password&lt;/code&gt; and &lt;code&gt;Google&lt;/code&gt; sign in&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
Firestore Setup&lt;/h3&gt;


&lt;ol&gt;
&lt;li&gt;Go to the project &lt;code&gt;Firestore&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;Create firestore provisions for the project (choose the server nearest to your location)&lt;/li&gt;
&lt;li&gt;Go to the &lt;code&gt;Rules&lt;/code&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ruppysuppy/SmartsApp"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h1&gt;
  &lt;a href="#thanks-for-reading" class="anchor"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Reach out to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.web.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>ux</category>
      <category>darkmode</category>
    </item>
    <item>
      <title>Replacing FastAPI with Rust: Part 5 - Rocket 0.5</title>
      <author>Dylan Anthony</author>
      <pubDate>Sat, 20 Feb 2021 23:57:48 +0000</pubDate>
      <link>https://dev.to/dbanty/replacing-fastapi-with-rust-part-5-rocket-0-5-3kb3</link>
      <guid>https://dev.to/dbanty/replacing-fastapi-with-rust-part-5-rocket-0-5-3kb3</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Cover image created by me using &lt;a href="https://www.rustacean.net"&gt;Ferris the Crab&lt;/a&gt;, &lt;a href="https://www.rust-lang.org/policies/media-guide"&gt;the Rust logo&lt;/a&gt;, and &lt;a href="https://github.com/tiangolo/fastapi"&gt;the FastAPI logo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;In the &lt;a href="https://dylananthony.com/posts/fastapi-rust-4-a-solution"&gt;previous post&lt;/a&gt;, I decided that Rocket is the best candidate to replace FastAPI with two big caveats:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It &lt;em&gt;requires&lt;/em&gt; nightly Rust, and therefore &lt;a href="https://doc.rust-lang.org/stable/book/appendix-07-nightly-rust.html#unstable-features"&gt;unstable features&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It is not async, and therefore not compatible with my favorite option for handling SQL: &lt;a href="https://crates.io/crates/sqlx"&gt;SQLx&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both of these issues are fixed on the &lt;code&gt;master&lt;/code&gt; branch of the Rocket repository, which will become Rocket 0.5 once released. However, hosting a Rocket application on AWS Lambda requires a crate called &lt;code&gt;rocket_lamb&lt;/code&gt; which will need to be updated for Rocket 0.5 before it will work.&lt;/p&gt;

&lt;p&gt;In this post, I walk through my experience updating &lt;code&gt;rocket_lamb&lt;/code&gt; to support the latest development version of Rocket in an effort to prepare it for the inevitable 0.5 Rocket release. The highlights are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;My general purpose process for refactoring in Rust&lt;/li&gt;
&lt;li&gt;How to solve async lifetime issues using &lt;code&gt;Arc&lt;/code&gt; and &lt;code&gt;Mutex&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Some thoughts on testing methodology&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#step-1-just-try-it" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Just Try It!
&lt;/h2&gt;

&lt;p&gt;One of the nicest things about Rust's strict compiler is that you can generally refactor by following the errors. If you also have good test coverage in your project, you can be even more confident! So far in my Rust journey, I’ve been able to follow this process in every significant refactor:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Just do the thing you’re trying to achieve.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;cargo check&lt;/code&gt;, fix errors, rinse, and repeat.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;cargo test&lt;/code&gt;, fix failures, rinse, and repeat.&lt;/li&gt;
&lt;li&gt;It just works!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So in this case, step 1 is to replace Rocket 0.4 with the current development version using a Git dependency and replace all the &lt;code&gt;lambda_&lt;/code&gt; crates with the equivalent &lt;code&gt;lamedh_&lt;/code&gt; crates. This all happened &lt;a href="https://github.com/dbanty/rocket-lamb/commit/2d4fe5102dcc23898941f9c8bb2374e831f6d5eb"&gt;in this commit&lt;/a&gt; if you’d like to follow along. Here’s a summary:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-10-replace-the-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Step 1.0: Replace the Dependencies
&lt;/h3&gt;

&lt;p&gt;In addition to the changes mentioned above, I had to change out the &lt;code&gt;http&lt;/code&gt; version based on some &lt;code&gt;cargo check&lt;/code&gt; complaints. I also needed to add &lt;code&gt;aws_lambda_events&lt;/code&gt;, &lt;code&gt;tokio&lt;/code&gt;, and &lt;code&gt;parking_lot&lt;/code&gt; for some code changes that come later. All in all, here are the changes:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#before" class="anchor"&gt;
  &lt;/a&gt;
  Before
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;rocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.4.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;default-features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="py"&gt;lambda_runtime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.2.1"&lt;/span&gt;
&lt;span class="py"&gt;lambda_http&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1.1"&lt;/span&gt;
&lt;span class="py"&gt;http&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1"&lt;/span&gt;
&lt;span class="py"&gt;failure&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1.5"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#after" class="anchor"&gt;
  &lt;/a&gt;
  After
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;rocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;git&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/SergioBenitez/Rocket"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;branch&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"master"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;default-features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="py"&gt;lamedh_runtime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.3.0"&lt;/span&gt;
&lt;span class="py"&gt;lamedh_http&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.3.0"&lt;/span&gt;
&lt;span class="py"&gt;http&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.2.3"&lt;/span&gt;
&lt;span class="py"&gt;failure&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1.5"&lt;/span&gt;
&lt;span class="py"&gt;aws_lambda_events&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.4.0"&lt;/span&gt;
&lt;span class="py"&gt;tokio&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1"&lt;/span&gt;
&lt;span class="py"&gt;parking_lot&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.11.1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Cargo (or maybe it’s &lt;code&gt;rustc&lt;/code&gt; under the hood?) can provide pretty helpful error messages in this process, though sometimes you have to know what to look for. I always recommend reading the &lt;em&gt;entire&lt;/em&gt; output of Rust compiler errors. In other languages (notably Python) I’m used to looking at stack traces where I’ve gotten good at ignoring most of the content since it’s not relevant to the problem I’m solving. A ton of care is taken in designing Rust compiler messages, so all of the information is likely to be relevant. In the case of &lt;code&gt;http&lt;/code&gt; being on the wrong version, the error was something like &lt;code&gt;expected struct http::Method, found struct lamedh_http::http::Method&lt;/code&gt; however there is a note which says “perhaps two different versions of crate &lt;code&gt;http&lt;/code&gt; are being used?” informing you of exactly the problem!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-11-update-the-imports" class="anchor"&gt;
  &lt;/a&gt;
  Step 1.1: Update the Imports
&lt;/h3&gt;

&lt;p&gt;If you’re replacing one package with another, the next step after updating your &lt;code&gt;Cargo.toml&lt;/code&gt; is to update all the &lt;code&gt;use&lt;/code&gt; statements. Going from &lt;code&gt;lambda_&lt;/code&gt; to &lt;code&gt;lamedh_&lt;/code&gt; was &lt;em&gt;mostly&lt;/em&gt; straight forward, just replace one crate with the equivalent. There were a couple notable exceptions though:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Instead of using a &lt;code&gt;lambda!&lt;/code&gt; macro to start things up, you want to use the &lt;code&gt;lamedh_runtime::run&lt;/code&gt; function, which takes the result of the &lt;code&gt;lamedh_http::handler&lt;/code&gt; function. I prefer explicit function invocations anyway over macros when it doesn’t make a huge difference to readability (that’s foreshadowing).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;lambda_http&lt;/code&gt; was re-exporting &lt;code&gt;aws_lambda_events::encodings::Body&lt;/code&gt; but &lt;code&gt;lamedh_http&lt;/code&gt; does not, so that had to be imported separately.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-12-update-the-code" class="anchor"&gt;
  &lt;/a&gt;
  Step 1.2: Update the Code
&lt;/h3&gt;

&lt;p&gt;There were some API differences both in the new &lt;code&gt;rocket&lt;/code&gt; version and in the &lt;code&gt;lamedh_&lt;/code&gt; conversion that had to be handled here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;rocket::local&lt;/code&gt; was split into &lt;code&gt;rocket::local::blocking&lt;/code&gt; and &lt;code&gt;rocket::local::asynchronous&lt;/code&gt; so you can choose how you handle things. I picked &lt;code&gt;blocking&lt;/code&gt; for now just to minimize the up front changes. I go back and update it to &lt;code&gt;asynchronous&lt;/code&gt; later.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Handler&lt;/code&gt; trait from &lt;code&gt;lamedh&lt;/code&gt; switches the &lt;code&gt;run&lt;/code&gt; function for one called &lt;code&gt;call&lt;/code&gt; and requires an associated &lt;code&gt;Fut&lt;/code&gt; type.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;RequestContext&lt;/code&gt; from &lt;code&gt;lamedh&lt;/code&gt; has been completely reorganized and supports the newer API Gateway v2 requests. At this point, being new to the code base, I wasn’t entirely sure what the &lt;code&gt;base_path&lt;/code&gt; method of &lt;code&gt;RequestExt&lt;/code&gt; was doing, so I just commented out most of the logic.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#step-2-check-and-check-and-check" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Check and Check and Check
&lt;/h2&gt;

&lt;p&gt;I’ve now entered the stage where I’m repeatedly running &lt;code&gt;cargo check&lt;/code&gt; and fixing the errors I’ve found. I quickly came to a similar issue to the one I faced when implementing my own &lt;code&gt;Handler&lt;/code&gt; for &lt;code&gt;actix-web&lt;/code&gt;. Passing data to the &lt;code&gt;Future&lt;/code&gt; doing the actual handling requires some hoop-jumping. The code changes for Step 2 can be found &lt;a href="https://github.com/dbanty/rocket-lamb/commit/6a995b1b977675736fa32d96e1094ba3fcc05098"&gt;in this commit&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-21-solving-async-references" class="anchor"&gt;
  &lt;/a&gt;
  Step 2.1: Solving Async References
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Fut&lt;/code&gt; associated type on &lt;code&gt;Handler&lt;/code&gt; requires that any lifetimes be &lt;code&gt;’static&lt;/code&gt;, presumably so the &lt;code&gt;Future&lt;/code&gt; can live longer than the &lt;code&gt;Handler&lt;/code&gt; that spawned it (though I’m not sure why you’d want this). In any event, the &lt;code&gt;Handler&lt;/code&gt; code I inherited from the existing &lt;code&gt;rocket_lamb&lt;/code&gt; crate was passing &lt;code&gt;&amp;amp;mut self&lt;/code&gt; to the now-asynchronous code which left me a bunch of errors saying something about needing &lt;code&gt;’static&lt;/code&gt; lifetimes.&lt;/p&gt;

&lt;p&gt;At this point I was thoroughly lost, if I needed to pass data to something, and some trait outside of my control was requiring it to be &lt;code&gt;'static&lt;/code&gt;, then I couldn’t pass references right? I didn’t want to clone all the data for every request, as doing so would be very inefficient. Even if I wanted to do that, some of the data I needed to pass was not &lt;code&gt;Clone&lt;/code&gt;. I decided to go out on a limb and ask for help. Asking questions in open source projects is always nerve-wracking, as some of the responders can be quite hostile. However, one of the contributors to the &lt;code&gt;lamedh_&lt;/code&gt; crates quickly dispelled my fears by coming through with a friendly answer!&lt;/p&gt;

&lt;p&gt;I had heard of, though never used, &lt;code&gt;std::sync::Arc&lt;/code&gt; before. I’m not really qualified to explain how this works, but I’ll do my best to convey &lt;em&gt;my&lt;/em&gt; understanding. &lt;code&gt;std::rc::Rc&lt;/code&gt; effectively lets you have shared, read-only ownership of an object. If you do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"blah"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then you effectively end up with two different owned values &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt; which can be dereferenced to read data as if it were &lt;code&gt;original&lt;/code&gt; (note that creating &lt;code&gt;first&lt;/code&gt; took ownership of &lt;code&gt;original&lt;/code&gt; so you can’t access that one anymore). Because the values are owned, you’re not passing references, and therefore don’t have to worry about lifetimes!&lt;/p&gt;

&lt;p&gt;This isn’t magic, &lt;code&gt;Rc&lt;/code&gt; stands for “reference counting” which is a common way of handling memory in more dynamic languages (e.g. Python). Behind the scenes, Rust is keeping track of how many times &lt;code&gt;Rc::clone&lt;/code&gt; has been used for a given piece of data and once they’re &lt;em&gt;all&lt;/em&gt; dropped, it will free the memory. So even if &lt;code&gt;Handler&lt;/code&gt; goes out of scope and gets dropped with a &lt;code&gt;Future&lt;/code&gt; still on the loose, the data it was given is still perfectly valid!&lt;/p&gt;

&lt;p&gt;“Wait a second, you said you were using &lt;code&gt;Arc&lt;/code&gt; though?!” Yep! &lt;code&gt;Arc&lt;/code&gt; is just the version of &lt;code&gt;Rc&lt;/code&gt; that is &lt;code&gt;Send&lt;/code&gt;, meaning it is safe in threaded contexts. Because we’re using Tokio and Tokio can use threads to execute &lt;code&gt;Future&lt;/code&gt;s, everything has to be &lt;code&gt;Send&lt;/code&gt; and therefore we use &lt;code&gt;Arc&lt;/code&gt;! And thus the problem of sharing data in Tokio futures is solved!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-21-being-less-selfish" class="anchor"&gt;
  &lt;/a&gt;
  Step 2.1: Being Less Selfish
&lt;/h3&gt;

&lt;p&gt;In order to aid me with &lt;code&gt;Arc&lt;/code&gt;ing the codebase, I pulled out most of the methods on &lt;code&gt;RocketHandler&lt;/code&gt; into functions which took just the data they needed rather than the whole &lt;code&gt;self&lt;/code&gt;. This made it &lt;em&gt;way&lt;/em&gt; easier to reason about the code and make faster, more confident modifications. I prefer this style anyway because it makes it clear when you &lt;em&gt;call&lt;/em&gt; something exactly what that something is taking. An object-oriented “method” style hides whether something is just reading data, or mutating it, or outright consuming it until you jump to definition. Why not take full advantage of how explicit Rust is? Here's an example to illustrate my point:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Method style&lt;/span&gt;
&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="nf"&gt;.ensure_client_ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// Function style&lt;/span&gt;
&lt;span class="nf"&gt;ensure_client_ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="py"&gt;.client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="py"&gt;.config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's more verbose, but now I can clearly see that I need to &lt;code&gt;Arc&lt;/code&gt; the handler's config attribute to share it in this manner and that the &lt;code&gt;handler.client&lt;/code&gt; needs to be mutable, so I need some way to deal with that. Also, I'm not sure how I would go about &lt;code&gt;Arc&lt;/code&gt;ing the entire &lt;code&gt;RocketHandler&lt;/code&gt; anyway to pass it through to methods in a thread-safe manner, so I had to pick functional style whether I wanted to or not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-22-disabling-a-feature" class="anchor"&gt;
  &lt;/a&gt;
  Step 2.2: Disabling a Feature
&lt;/h3&gt;

&lt;p&gt;That &lt;code&gt;ensure_client_ready&lt;/code&gt; function from before required mutability and was fairly dense code related to what I disabled in step 1.2.3. So for now, I just removed this feature as well, figuring I’d come back to it once I understood the code better.&lt;/p&gt;

&lt;p&gt;And with that, &lt;code&gt;cargo check&lt;/code&gt; passed! Next it was on to &lt;code&gt;cargo test&lt;/code&gt; , which of course couldn’t even complete the compilation step to start with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-testing" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Testing
&lt;/h2&gt;

&lt;p&gt;Automated tests in your project are primarily important for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If some hooligan comes along trying to refactor your entire project to work with different libraries, they can have some confidence of knowing they didn’t break anything once they’re done.&lt;/li&gt;
&lt;li&gt;Tests serve as documentation that is often far more specific than is worth putting in comments. If you properly cover all the behavior of your code and do so with relatively readable tests, then a contributor can read the tests to discover what the code is supposed to be doing.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-31-async-tests" class="anchor"&gt;
  &lt;/a&gt;
  Step 3.1: Async Tests
&lt;/h3&gt;

&lt;p&gt;Now that most of the code required async, the tests had to know how to handle async as well! Tokio provides a convenient &lt;code&gt;#[tokio::test]&lt;/code&gt; macro to replace the normal &lt;code&gt;#[test]&lt;/code&gt; with in order to allow your test functions to be &lt;code&gt;async&lt;/code&gt;. This, along with replacing some imports, was done by another contributor who’d been following my progress and wanted to help out! Isn’t the open source community amazing when people work together? You can see their work &lt;a href="https://github.com/dbanty/rocket-lamb/commit/6a995b1b977675736fa32d96e1094ba3fcc05098"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Building on top of what they had, I did a bit more work to finish getting the tests to compile which mostly involved switching to the &lt;code&gt;asynchronous&lt;/code&gt; Rocket client and to stable Rust (!!!). You can see those changes &lt;a href="https://github.com/dbanty/rocket-lamb/commit/3f5ece7a610921f834323cc0e1461406eaa18f91"&gt;in this commit&lt;/a&gt;. I also had to make the doctests work with async which basically just involved wrapping any async code in the doc comments with &lt;code&gt;tokio_test::block_on()&lt;/code&gt; &lt;a href="https://github.com/dbanty/rocket-lamb/blob/92d3049fd9fdc9ec66866655b310cf51cac1fe05/src/builder.rs#L46"&gt;like this&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-32-making-tests-less-dry" class="anchor"&gt;
  &lt;/a&gt;
  Step 3.2: Making Tests Less DRY
&lt;/h3&gt;

&lt;p&gt;DRY is an acronym for a mantra that is often preached in software development: “Don’t Repeat Yourself”. This advice &lt;em&gt;can&lt;/em&gt; be beneficial, but only when not taken at face value. Personally I prefer my code like I prefer my food: MOIST. That is, “Maintain One Indisputable Source (of) Truth” (yes that is a &lt;a href="https://en.wikipedia.org/wiki/Backronym"&gt;backcronym&lt;/a&gt;, no I’m not sorry). The main reason to not repeat code is that it’s easy for multiple sources to get out of sync and thereby cause bugs. One should not remove duplicated code simply because it’s duplicated, but rather to keep the implementation in sync.&lt;/p&gt;

&lt;p&gt;DRY becomes particularly painful when applied to tests. If tests are to serve as documentation for your code, someone must be able to easily understand what a test is doing. Using a macro to effectively &lt;a href="https://docs.pytest.org/en/stable/parametrize.html#parametrizing-fixtures-and-test-functions"&gt;parametrize&lt;/a&gt; a test means that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It’s not immediately clear where a test is defined when it fails to run or compile using &lt;code&gt;cargo test&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You have to read macro code to figure out what the test is doing, which is always more difficult than reading Rust code directly.&lt;/li&gt;
&lt;li&gt;Failures/panics can be particularly hard to debug when they come from inside generated code.&lt;/li&gt;
&lt;li&gt;Most tooling just doesn’t work as well. For example, using CLion, I cannot easily click to run a single test which is generated in a macro like I can with normal functions. I also can’t jump to definition of code defined within the macro.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of that was to say that &lt;code&gt;rocket_lamb&lt;/code&gt; had a file full of test cases, each of which was defined with a macro (presumably to reduce duplication) which were failing and hard to debug. Rather than continue to guess as to the problem, I rewrote the tests using standard Rust code instead of a macro, keeping some shared setup in a separate function so that if we change the way the &lt;code&gt;RocketHandler&lt;/code&gt; is built, for instance, there is a single location which defines that.&lt;/p&gt;

&lt;p&gt;Refactoring into standard Rust code also made it completely obvious what the features I had removed were trying to do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-33-mutation-and-arcs" class="anchor"&gt;
  &lt;/a&gt;
  Step 3.3: Mutation and Arcs
&lt;/h3&gt;

&lt;p&gt;As I had mentioned earlier, there were two related pieces of code that I had removed to skip while implementing the basic async conversion. The first piece was pulling information out of the raw lambda request. The second piece was mutating some shared data in order to modify the rocket &lt;code&gt;Client&lt;/code&gt; before using it. Reading the failing tests gave me the last bit of context I needed to reimplement these features.&lt;/p&gt;

&lt;p&gt;API Gateway is the service often used to route requests to Lambda functions, and it allows you to modify the paths of these requests either to add a fixed base path (e.g. /v2/) or a stage (e.g. /QA/). The application will likely not be aware of these changes, since they’re probably specific to the deployment. There are a few approaches I see to solve this problem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Have a feature flag or something and compile the full path into the application at build time. This has the huge downside of not being able to promote a /canary/ instance to prod, for example, without rebuilding.&lt;/li&gt;
&lt;li&gt;Erase any base path or stage before giving the request to the application. So a request with the path &lt;code&gt;/canary/v2/hello&lt;/code&gt; might just surface as &lt;code&gt;/hello&lt;/code&gt; to Rocket. This will work, but it means any response headers from Rocket won’t include the same path that the client attempted to reach, which could cause problems.&lt;/li&gt;
&lt;li&gt;Update the Rocket application to use the full paths at runtime. Specifically, delay building the &lt;code&gt;Client&lt;/code&gt; which does request handling until after you receive the first request. From that request you can determine any base path and stage and rewrite the Rocket routes on the fly before generating a client. &lt;em&gt;This&lt;/em&gt; is what that feature was doing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So if we want to maintain this feature (which seems like a good idea because presumably people are using it), we have to be able to mutate some shared state in an asynchronous context. You’ll remember, however, that our shared data is now behind an &lt;code&gt;Arc&lt;/code&gt; and that &lt;code&gt;Arc&lt;/code&gt; only provides read access to consumers. So how do we mutate it? Well there are a few solutions provided in the standard library, but I went with &lt;code&gt;Mutex&lt;/code&gt; from a crate called &lt;code&gt;parking_lot&lt;/code&gt; which is just a bit easier to use than the one in &lt;code&gt;std&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I went back to a similar pattern that &lt;code&gt;rocket_lamb&lt;/code&gt; had originally. It was using an enum that looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;LazyClient&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Placeholder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;Uninitialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Rocket&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nf"&gt;Ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;LazyClient&lt;/code&gt; was shared directly with the handler code (safe because it wasn’t async). It was set to &lt;code&gt;Uninitialized&lt;/code&gt; with the original Rocket instance at startup. Upon receiving the first request, the handling code would use &lt;code&gt;mem::replace&lt;/code&gt; to get the owned Rocket and leave a &lt;code&gt;Placeholder&lt;/code&gt; in its place (again, safe because the code was blocking, so nothing will reach this same code once it became &lt;code&gt;Placeholder&lt;/code&gt;). Finally, it updated all the routes in the &lt;code&gt;Rocket&lt;/code&gt; instance with any base path or stage before transforming that &lt;code&gt;Rocket&lt;/code&gt; into a &lt;code&gt;Client&lt;/code&gt; and setting the state to &lt;code&gt;Ready&lt;/code&gt;. Future requests would simply see that it’s already &lt;code&gt;Ready&lt;/code&gt; and use the &lt;code&gt;Client&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because anything which is threaded is naturally harder to deal with safely, I had to make a bunch of changes here. This is my first real foray into dealing with these sorts of problems, so if you have suggestions for improvements let me know! My enum looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;LazyClient&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;Uninitialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rocket&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nf"&gt;Ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And I passed it to the handling &lt;code&gt;Future&lt;/code&gt; as an &lt;code&gt;Arc&amp;lt;Mutex&amp;lt;LazyClient&amp;gt;&amp;gt;&lt;/code&gt;. This way it’s safe to pass into the future without lifetime issues (because of the &lt;code&gt;Arc&lt;/code&gt; thing mentioned before) and safe to mutate because of the &lt;code&gt;Mutex&lt;/code&gt;. The only other difference is that I use an &lt;code&gt;Option&amp;lt;Rocket&amp;gt;&lt;/code&gt; so I can &lt;code&gt;.take()&lt;/code&gt; the owned &lt;code&gt;Rocket&lt;/code&gt; instead of using &lt;code&gt;mem::replace&lt;/code&gt; with another enum type (mostly because I had a lot of trouble getting this to work with the &lt;code&gt;Mutex&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The obvious problem I see with my new code is it will have significantly more overhead than the old version due to all the indirection and the hard lock. Hopefully it’s not slow enough to matter much, and hopefully someone with more experience can tune it up a bit. All of the changes required to get this feature working again (including test refactors) can be found &lt;a href="https://github.com/dbanty/rocket-lamb/commit/47671b79b102402ebcf82c715dcd866079a741f4"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That’s it! &lt;a href="https://github.com/dbanty/rocket-lamb/tree/rocket-0.5"&gt;My fork of rocket_lamb&lt;/a&gt; now works with the development version of &lt;code&gt;rocket&lt;/code&gt; and the latest &lt;code&gt;tokio&lt;/code&gt;. I was even able to get &lt;a href="https://github.com/dbanty/rust-fastapi-experiments/tree/rocket-0.5"&gt;my rocket experiment&lt;/a&gt; working with the latest &lt;code&gt;rocket&lt;/code&gt; by combining my fork with &lt;a href="https://github.com/dbanty/okapi/tree/async2"&gt;a fork of okapi which has been updated&lt;/a&gt;. So what’s next? Well now that everything has been updated, in theory my endpoints can be async, which means I should finally be able to use &lt;a href="https://crates.io/crates/sqlx"&gt;SQLx&lt;/a&gt; with this project!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Want to be notified when the next part of this series is released? Watch releases in &lt;a href="https://github.com/dbanty/dylananthony.com"&gt;the GitHub repo&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have an idea or request for a future blog topic? Drop it in the GitHub discussions under &lt;a href="https://github.com/dbanty/dylananthony.com/discussions/categories/ideas"&gt;ideas&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>rust</category>
      <category>webdev</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Make Your Tmux Status Bar 100% Better With Bash
</title>
      <author>brandon_wallace</author>
      <pubDate>Sat, 20 Feb 2021 23:02:33 +0000</pubDate>
      <link>https://dev.to/brandonwallace/make-your-tmux-status-bar-100-better-with-bash-2fne</link>
      <guid>https://dev.to/brandonwallace/make-your-tmux-status-bar-100-better-with-bash-2fne</guid>
      <description>&lt;p&gt;Did you know that you can easily have a Bash script display information on the Tmux status bar? Because of that the possibilities are almost endless. You can display all sorts of valuable information such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hostname&lt;/li&gt;
&lt;li&gt;IP address&lt;/li&gt;
&lt;li&gt;Netmask&lt;/li&gt;
&lt;li&gt;Gateway&lt;/li&gt;
&lt;li&gt;Memory usage&lt;/li&gt;
&lt;li&gt;Memory total&lt;/li&gt;
&lt;li&gt;CPU temperature&lt;/li&gt;
&lt;li&gt;System load&lt;/li&gt;
&lt;li&gt;Battery meter&lt;/li&gt;
&lt;li&gt;VPN status&lt;/li&gt;
&lt;li&gt;Time&lt;/li&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;li&gt;Weather report&lt;/li&gt;
&lt;li&gt;Git status&lt;/li&gt;
&lt;li&gt;Whatever is important to you&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will show you how to create a modular Bash script to display useful information in the status bar. There are a lot of plug-ins you could install for Tmux but engineering things yourself is a lot of fun. I will create a separate function for each status bar item to make the script modular, that way we will only call the functions that we need.&lt;/p&gt;

&lt;p&gt;Here is the default status bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4R6g0T8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/9Q9fM9YJ/tmux-default-status-bar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4R6g0T8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/9Q9fM9YJ/tmux-default-status-bar.png" alt="tmux-default-status-bar.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the status bar customized.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wS1yYRCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/0QPGZPN1/tmux-status-bar-improved.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wS1yYRCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/0QPGZPN1/tmux-status-bar-improved.png" alt="tmux-status-bar-improved.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirments" class="anchor"&gt;
  &lt;/a&gt;
  Requirments
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;lm-sensors&lt;/li&gt;
&lt;li&gt;bc&lt;/li&gt;
&lt;li&gt;acpi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check your Tmux version. I am using version 2.8.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tmux &lt;span class="nt"&gt;-V&lt;/span&gt;
tmux 2.8
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you do not have a .tmux.conf create one in your home directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .tmux.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the .tmux.conf make sure you have the following lines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Status bar&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; status on
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; status-interval 1
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; status-justify centre &lt;span class="c"&gt;# Careful! It is spelled centre not center.&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; status-style &lt;span class="nb"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;white,bg&lt;span class="o"&gt;=&lt;/span&gt;black

&lt;span class="c"&gt;# Status Bar Left side&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; status-left-length 50
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; status-left-style default
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; status-left &lt;span class="s2"&gt;"#h #( ~/.tmux/left_status.sh )"&lt;/span&gt;

&lt;span class="c"&gt;# Status Bar Right side&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; status-right-length 40
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; status-right-style default
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; status-right &lt;span class="s2"&gt;"#( ~/.tmux/right_status.sh )"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Make a hidden folder in your home directory to save your Bash scripts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; .tmux
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Make two Bash scripts, one for the left side, one for the right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; ~/.tmux/right_status.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; ~/.tmux/left_status.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The scripts are currently not executable ( rw-r--r-- ).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lF&lt;/span&gt; ~/.tmux/&lt;span class="k"&gt;*&lt;/span&gt;.sh
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 bw bw    0 Feb 19 18:44 /home/bw/.tmux/right_status.sh
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 bw bw    0 Feb 19 18:44 /home/bw/.tmux/left_status.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Make the scripts executable so they will run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x ~/.tmux/right_status.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x ~/.tmux/left_status.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The scripts are now executable ( rwxr-xr-x ).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lF&lt;/span&gt; ~/.tmux/&lt;span class="k"&gt;*&lt;/span&gt;.sh
&lt;span class="nt"&gt;-rwxr-xr-x&lt;/span&gt; 1 bw bw    0 Feb 19 18:44 /home/bw/.tmux/right_status.sh&lt;span class="k"&gt;*&lt;/span&gt;
&lt;span class="nt"&gt;-rwxr-xr-x&lt;/span&gt; 1 bw bw    0 Feb 19 18:44 /home/bw/.tmux/left_status.sh&lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#left-side" class="anchor"&gt;
  &lt;/a&gt;
  Left Side
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2V4zrBx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/mrfZvrMJ/tmux-status-left-side.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2V4zrBx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/mrfZvrMJ/tmux-status-left-side.png" alt="tmux-status-left-side.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First edit the left_status.sh script. Add the following content. The ip_address function displays the IP address and netmask.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ vim ~/.tmux/left_status.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;


&lt;span class="k"&gt;function &lt;/span&gt;ip_address&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;# Create an empty array.&lt;/span&gt;
    &lt;span class="nv"&gt;interface_arr&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;

    &lt;span class="c"&gt;# Loop through the available interfaces.&lt;/span&gt;
    &lt;span class="k"&gt;for &lt;/span&gt;i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-1&lt;/span&gt; /sys/class/net/&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

        &lt;span class="c"&gt;# Add every interface to the array except for the loopback device.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'lo'&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then

            &lt;/span&gt;interface_arr+&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;fi

    done&lt;/span&gt;

    &lt;span class="c"&gt;# Loop through the array of interfaces. Check to see which interface is up.&lt;/span&gt;
    &lt;span class="k"&gt;for &lt;/span&gt;j &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;interface_arr&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do

        if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /sys/class/net/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/operstate&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"up"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then

            &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

        &lt;span class="k"&gt;else

            &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;

        &lt;span class="k"&gt;fi

    done

    if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$iface&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;

        &lt;span class="c"&gt;# Print the ip address of the interface.&lt;/span&gt;
        &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;" %s  "&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;ip addr show &lt;span class="nv"&gt;$iface&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/inet /{print $2}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; 

    &lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Underneath the IP address function add the CPU function. You must install lm-sensors for this to work. Run these two commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;lm-sensors

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;sensors-detect
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run the sensors command to see the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Celcius&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;sensors
acpitz-acpi-0
Adapter: ACPI interface
temp1:        +27.8°C  &lt;span class="o"&gt;(&lt;/span&gt;crit &lt;span class="o"&gt;=&lt;/span&gt; +105.0°C&lt;span class="o"&gt;)&lt;/span&gt;
temp2:        +29.8°C  &lt;span class="o"&gt;(&lt;/span&gt;crit &lt;span class="o"&gt;=&lt;/span&gt; +105.0°C&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Fahrenheit&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;sensors &lt;span class="nt"&gt;-f&lt;/span&gt;
acpitz-acpi-0
Adapter: ACPI interface
temp1:        +82.0°F  &lt;span class="o"&gt;(&lt;/span&gt;crit &lt;span class="o"&gt;=&lt;/span&gt; +221.0°F&lt;span class="o"&gt;)&lt;/span&gt;
temp2:        +85.6°F  &lt;span class="o"&gt;(&lt;/span&gt;crit &lt;span class="o"&gt;=&lt;/span&gt; +221.0°F&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Add the cpu_temperature function below the ip_address function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;cpu_temperature&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;# Display the temperature of CPU core 0 and core 1.&lt;/span&gt;
    sensors &lt;span class="nt"&gt;-f&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/Core 0/{printf $3" "}/Core 1/{printf $3" "}'&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To see the memory usage we will add a memory_usage function. We need the bc command to calculate the percentage of memory used. &lt;/p&gt;

&lt;p&gt;Install bc command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;bc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Add the memory_usage function to the script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;memory_usage&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;which bc&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;

        &lt;span class="c"&gt;# Display used, total, and percentage of memory using the free command.&lt;/span&gt;
        &lt;span class="nb"&gt;read &lt;/span&gt;used total &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;free &lt;span class="nt"&gt;-m&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/Mem/{printf $2" "$3}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# Calculate the percentage of memory used with bc.&lt;/span&gt;
        &lt;span class="nv"&gt;percent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;bc &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"100 * &lt;/span&gt;&lt;span class="nv"&gt;$total&lt;/span&gt;&lt;span class="s2"&gt; / &lt;/span&gt;&lt;span class="nv"&gt;$used&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# Feed the variables into awk and print the values with formating.&lt;/span&gt;
        &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$used&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$total&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$percent&lt;/span&gt; &lt;span class="s1"&gt;'BEGIN {printf "%sMi/%sMi %.1f%", t, u, p}'&lt;/span&gt;

    &lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The next function will display if the VPN is up by checking for the tun0 interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;vpn_connection&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;# Check for tun0 interface.&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; /sys/class/net/tun0 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s "&lt;/span&gt; &lt;span class="s1"&gt;'VPN*'&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To complete the left_status.sh script we will use a main function to call the other functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;# Comment out any function you do not need. &lt;/span&gt;
    ip_address
    cpu_temperature
    memory_usage
    vpn_connection

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Calling the main function which will call the other functions.&lt;/span&gt;
main
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#right-side" class="anchor"&gt;
  &lt;/a&gt;
  Right Side
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ce63pQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/qMNkgKxW/tmux-status-right-side.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ce63pQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/qMNkgKxW/tmux-status-right-side.png" alt="tmux-status-right-side.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let’s configure the right side.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ vim ~/.tmux/right_status.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The battery meter function displays the level of the battery and changes color depending on the battery level. &lt;br&gt;
We need the acpi program for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;acpi
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run acpi to see the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;acpi
Battery 0: Unknown, 96%
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Add the battery_meter function to the Bash script. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ vim ~/.tmux/right_status.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;battery_meter&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;which acpi&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then

        if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /sys/class/power_supply/AC/online&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 1 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then

            &lt;/span&gt;&lt;span class="nv"&gt;charging&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'+'&lt;/span&gt; 

        &lt;span class="k"&gt;else

            &lt;/span&gt;&lt;span class="nv"&gt;charging&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt;

        &lt;span class="k"&gt;fi&lt;/span&gt;

        &lt;span class="c"&gt;# Check for existence of a battery.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-x&lt;/span&gt; /sys/class/power_supply/BAT0 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then

            &lt;/span&gt;&lt;span class="nv"&gt;batt0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;acpi &lt;span class="nt"&gt;-b&lt;/span&gt; 2&amp;gt; /dev/null | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/Battery 0/{print $4}'&lt;/span&gt; | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;-f1&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$batt0&lt;/span&gt; &lt;span class="k"&gt;in

                &lt;/span&gt;100%|9[0-9]%|8[0-9]%|7[5-9]%&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;fgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'#[fg=brightgrey]'&lt;/span&gt; 
                    &lt;span class="p"&gt;;;&lt;/span&gt;

                7[0-4]%|6[0-9]%|5[0-9]%&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;fgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'#[fg=brightgreen]'&lt;/span&gt; 
                    &lt;span class="p"&gt;;;&lt;/span&gt;

                4[0-9]%|3[0-9]%|2[5-9]%&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;fgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'#[fg=brightyellow]'&lt;/span&gt; 
                    &lt;span class="p"&gt;;;&lt;/span&gt;

                2[0-4]%|1[0-9]%|[0-9]%&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;fgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'#[fg=brightred]'&lt;/span&gt;
                    &lt;span class="p"&gt;;;&lt;/span&gt;
            &lt;span class="k"&gt;esac&lt;/span&gt;

            &lt;span class="c"&gt;# Display the percentage of charge the battery has.&lt;/span&gt;
            &lt;span class="nb"&gt;printf&lt;/span&gt;  “%s ” &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;fgcolor&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;charging&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;batt0&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;fgdefault&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

        &lt;span class="k"&gt;fi
    fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The next function will add to the script is to get the load average using the uptime command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;load_average&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s "&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;uptime&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt;: &lt;span class="s1"&gt;'{printf $NF}'&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To see the time, date, and timezone add the date_time function to the Bash script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;date_time&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s "&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; +&lt;span class="s1"&gt;'%Y-%m-%d %H:%M:%S %Z'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The last function is the main function which calls the other functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    battery_meter
    load_average
    date_time

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Calling the main function which will call the other functions.&lt;/span&gt;
main
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complete-script" class="anchor"&gt;
  &lt;/a&gt;
  Complete Script
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;$ cat ~/.tmux/left_status.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;


&lt;span class="k"&gt;function &lt;/span&gt;ip_address&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;# Create an empty array.&lt;/span&gt;
    &lt;span class="nv"&gt;interface_arr&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;

    &lt;span class="c"&gt;# Loop through the available interfaces.&lt;/span&gt;
    &lt;span class="k"&gt;for &lt;/span&gt;i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-1&lt;/span&gt; /sys/class/net/&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

        &lt;span class="c"&gt;# Add every interface to the array except for the loopback device.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'lo'&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then

            &lt;/span&gt;interface_arr+&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;fi

    done&lt;/span&gt;

    &lt;span class="c"&gt;# Loop through the array of interfaces. Check to see which interface is up.&lt;/span&gt;
    &lt;span class="k"&gt;for &lt;/span&gt;j &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;interface_arr&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do

        if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /sys/class/net/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/operstate&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"up"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then

            &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

        &lt;span class="k"&gt;else

            &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;

        &lt;span class="k"&gt;fi

    done

    if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$iface&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;

        &lt;span class="c"&gt;# Print the ip address of the interface.&lt;/span&gt;
        &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;" %s  "&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;ip addr show &lt;span class="nv"&gt;$iface&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/inet /{print $2}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; 

    &lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;cpu_temperature&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;# Display the temperature of CPU core 0 and core 1.&lt;/span&gt;
    sensors &lt;span class="nt"&gt;-f&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/Core 0/{printf $3" "}/Core 1/{printf $3" "}'&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;memory_usage&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;which bc&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;

        &lt;span class="c"&gt;# Display used, total, and percentage of memory using the free command.&lt;/span&gt;
        &lt;span class="nb"&gt;read &lt;/span&gt;used total &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;free &lt;span class="nt"&gt;-m&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/Mem/{printf $2" "$3}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# Calculate the percentage of memory used with bc.&lt;/span&gt;
        &lt;span class="nv"&gt;percent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;bc &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"100 * &lt;/span&gt;&lt;span class="nv"&gt;$total&lt;/span&gt;&lt;span class="s2"&gt; / &lt;/span&gt;&lt;span class="nv"&gt;$used&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# Feed the variables into awk and print the values with formating.&lt;/span&gt;
        &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$used&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$total&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$percent&lt;/span&gt; &lt;span class="s1"&gt;'BEGIN {printf "%sMi/%sMi %.1f%", t, u, p}'&lt;/span&gt;

    &lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;vpn_connection&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;# Check for tun0 interface.&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; /sys/class/net/tun0 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s "&lt;/span&gt; &lt;span class="s1"&gt;'VPN*'&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;# Comment out any function you do not need. &lt;/span&gt;
    ip_address
    cpu_temperature
    memory_usage
    vpn_connection

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Calling the main function which will call the other functions.&lt;/span&gt;
main
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;$ cat ~/.tmux/right_status.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;battery_meter&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;which acpi&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then

        if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /sys/class/power_supply/AC/online&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 1 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then

            &lt;/span&gt;&lt;span class="nv"&gt;charging&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'+'&lt;/span&gt; 

        &lt;span class="k"&gt;else

            &lt;/span&gt;&lt;span class="nv"&gt;charging&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt;

        &lt;span class="k"&gt;fi&lt;/span&gt;

        &lt;span class="c"&gt;# Check for existence of a battery.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-x&lt;/span&gt; /sys/class/power_supply/BAT0 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then

            &lt;/span&gt;&lt;span class="nv"&gt;batt0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;acpi &lt;span class="nt"&gt;-b&lt;/span&gt; 2&amp;gt; /dev/null | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/Battery 0/{print $4}'&lt;/span&gt; | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;-f1&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$batt0&lt;/span&gt; &lt;span class="k"&gt;in

                &lt;/span&gt;100%|9[0-9]%|8[0-9]%|7[5-9]%&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;fgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'#[fg=brightgrey]'&lt;/span&gt; 
                    &lt;span class="p"&gt;;;&lt;/span&gt;

                7[0-4]%|6[0-9]%|5[0-9]%&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;fgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'#[fg=brightgreen]'&lt;/span&gt; 
                    &lt;span class="p"&gt;;;&lt;/span&gt;

                4[0-9]%|3[0-9]%|2[5-9]%&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;fgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'#[fg=brightyellow]'&lt;/span&gt; 
                    &lt;span class="p"&gt;;;&lt;/span&gt;

                2[0-4]%|1[0-9]%|[0-9]%&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;fgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'#[fg=brightred]'&lt;/span&gt;
                    &lt;span class="p"&gt;;;&lt;/span&gt;
            &lt;span class="k"&gt;esac&lt;/span&gt;

            &lt;span class="c"&gt;# Display the percentage of charge the battery has.&lt;/span&gt;
            &lt;span class="nb"&gt;printf&lt;/span&gt;  “%s ” &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;fgcolor&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;charging&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;batt0&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;fgdefault&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

        &lt;span class="k"&gt;fi
    fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;load_average&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s "&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;uptime&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt;: &lt;span class="s1"&gt;'{printf $NF}'&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;date_time&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s "&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; +&lt;span class="s1"&gt;'%Y-%m-%d %H:%M:%S %Z'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    battery_meter
    load_average
    date_time

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Calling the main function which will call the other functions.&lt;/span&gt;
main
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Feel free to leave comment, questions, and suggestions.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>bash</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 Tips for Learning to Code in Your Thirties</title>
      <author>Taryn McMillan</author>
      <pubDate>Sat, 20 Feb 2021 22:38:53 +0000</pubDate>
      <link>https://dev.to/tarynmcmillan/5-tips-for-learning-to-code-in-your-thirties-38p3</link>
      <guid>https://dev.to/tarynmcmillan/5-tips-for-learning-to-code-in-your-thirties-38p3</guid>
      <description>&lt;p&gt;I’ve dabbled in coding since I was a teenager, but never took it seriously until last year when the pandemic hit. As a stay-at-home mom with a History degree I questioned whether I had the necessary background to become a developer. I knew I didn’t have tons of time each day to study, and I also knew I didn't want to spend a lot of money on an expensive boot camp (if I could avoid it).&lt;/p&gt;

&lt;p&gt;Teaching yourself to code in your thirties can be really intimidating. Here are five strategies I use to make the experience easier.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#forget-your-age" class="anchor"&gt;
  &lt;/a&gt;
  Forget your age
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vMRPRmlZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613155824361/wfQd3d9S4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vMRPRmlZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613155824361/wfQd3d9S4.png" alt="undraw_career_progress_ivdb.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m a member of several different discord and social media groups for programmers and the question “Am I too old for this?” gets asked on a regular basis. The answer from other group members is always a resounding no. I’ve seen experienced developers come out of the woodwork to tell their inspiring stories of how they came to the field later in life. Their message is that age is not really a factor, as long as you’re willing to put in the work to learn. &lt;/p&gt;

&lt;p&gt;Don’t let you age distract you from learning. The only way you can become competitive (no matter how old you are) is through dedication and commitment.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#make-a-list-of-resources" class="anchor"&gt;
  &lt;/a&gt;
  Make a list of resources
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DjZqS6yp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613155867785/xD77exhA2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DjZqS6yp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613155867785/xD77exhA2.png" alt="undraw_book_lover_mkck.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Call me naive, but I was absolutely blown away when I discovered how many free (or very affordable) options there were for learning code online. I’d suggest making a list of resources as you come across them. To get you started, here are some of the sites I’ve used in my own learning;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.sololearn.com/"&gt;SoloLearn&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.codecademy.com/"&gt;Codeacademy&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.toLink"&gt;Udemy&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.w3schools.com/"&gt;W3Schools&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://learn.unity.com/"&gt;Unity Learn&lt;/a&gt;  (specific to game development but also useful for C# documentation)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There will be times in your learning journey when you feel overwhelmed and aren’t sure where to turn next. Having a list of tried-and-true websites and tutorials makes this decision easier. If you need to pivot to another coding language, you’ll already have a library of familiar resources to choose from.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#write-down-daily-goals-as-well-as-longerterm-ones" class="anchor"&gt;
  &lt;/a&gt;
  Write down daily goals, as well as longer-term ones
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nmX4bOpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613155924119/4l7MKNVKu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nmX4bOpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613155924119/4l7MKNVKu.png" alt="undraw_checking_boxes_2ibd.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the biggest mistakes I first made as a coding student was to only focus on my long-term goals. I knew I wanted to  &lt;a href="https://mystic-mill-games.itch.io/no-crooks-on-christmas"&gt;publish a game on Itch.io&lt;/a&gt; . I knew I wanted to build a console app with C# in Visual Studio. I knew I wanted to finish as many modules as I could on freeCodeCamp. &lt;/p&gt;

&lt;p&gt;But those longer term goals only got me so far. I needed to break them down into smaller, achievable steps that I could do on a daily basis. Trying to take on too much early in your coding journey is a sure path to failure. Stick with bite-sized, manageable tasks and bit by bit, they’ll add up to a lot. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#connect-with-the-tech-community" class="anchor"&gt;
  &lt;/a&gt;
  Connect with the tech community
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHrrPiWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613155964982/5VYyeHMMo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHrrPiWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613155964982/5VYyeHMMo.png" alt="undraw_Messaging_re_pgx8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a big introvert so this was a hard one for me at first, but I’m now conversing with other coding students on a daily basis. I didn’t realize at first how friendly and collaborative the community was. It blew my mind that you could upload some code to Github or Stack Overflow and have others comment on it and improve it. But I’ve realized over time that this is one of the best ways to learn. &lt;/p&gt;

&lt;p&gt;Don’t be shy about not knowing things or asking questions. In this field, the learning never ends and even the most experienced developers I know still consider themselves students.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#take-risks" class="anchor"&gt;
  &lt;/a&gt;
  Take risks
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Jl799oC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613156058384/OJ275sH5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Jl799oC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613156058384/OJ275sH5e.png" alt="undraw_finish_line_katerina_limpitsouni_xy20.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wouldn’t be where I am in my journey today if I didn’t take risks. I took a risk pouring weeks into my first published game, feeling like I was going in circles at times. But I see now that the skills I was learning working on that project were totally worth it. &lt;/p&gt;

&lt;p&gt;When everyone you know is going one way, it can be hard to go another way. Then again, there are a lot of people in their thirties going through a career transition. So while it seems sometimes that you are the only one taking risks in your professional life, remember that you are in good company.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-takeaway-dont-give-up" class="anchor"&gt;
  &lt;/a&gt;
  The takeaway: Don’t give up!
&lt;/h1&gt;

&lt;p&gt;I’m not one for cheesy quotes, but I really like this one from C.S. Lewis:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are never too old to set another goal or to dream a new dream.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No matter where you are in your coding journey-- beginner, intermediate, expert-- I hope you keep setting goals and dreaming dreams. The world will be richer for it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGArY7Nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613156188159/-jv7h4F7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGArY7Nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613156188159/-jv7h4F7f.png" alt="undraw_dreamer_gxxi.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>womenintech</category>
      <category>career</category>
      <category>learning</category>
    </item>
    <item>
      <title>Grid vs. Flexbox</title>
      <author>NadaYousry</author>
      <pubDate>Sat, 20 Feb 2021 21:52:37 +0000</pubDate>
      <link>https://dev.to/nadayousry/grid-vs-flexbox-3fbh</link>
      <guid>https://dev.to/nadayousry/grid-vs-flexbox-3fbh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h2&gt;

&lt;p&gt;as we know that now a day how flex and grid become very important to design our layout before that was very messy to make our layout appear as we want by making position, float ... etc.&lt;br&gt;
now grid and flex makes it too easy &lt;br&gt;
flex and grid sharing the same common features which makes it so confusing when to use flex and when to use grid and what is the difference between them.&lt;br&gt;
so in this article, we will explain what is the difference between these two properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#differences" class="anchor"&gt;
  &lt;/a&gt;
  Differences:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1- the main important difference is that: we use flex in a one-dimensional layout (row or column) while grid using in two-dimensional layout (rows and columns)&lt;/strong&gt;&lt;br&gt;
For example :&lt;br&gt;
&lt;strong&gt;Flex:&lt;/strong&gt;&lt;br&gt;
HTML:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xx54jImP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8ls5qo7z4t3cerm1w6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xx54jImP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8ls5qo7z4t3cerm1w6w.png" alt="flex-html"&gt;&lt;/a&gt; &lt;br&gt;
CSS:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hKzbW1gW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4v3bwtq12h4q2y2q3sq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKzbW1gW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4v3bwtq12h4q2y2q3sq.png" alt="flex-css"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pr_HUZiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g128gwg7y8f7ex24q4zn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pr_HUZiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g128gwg7y8f7ex24q4zn.PNG" alt="flex-output"&gt;&lt;/a&gt; &lt;br&gt;
here in this example, we can see that flex has 2 rows but no actually its just one row but elements exceed 100% from parent width so it breaks into one another line this case only happening when we add (flex-wrap: wrap;) to the parent element &lt;br&gt;
&lt;strong&gt;Grid:&lt;/strong&gt;&lt;br&gt;
HTML:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--downnDDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8q70qjhg3csp9obckwm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--downnDDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8q70qjhg3csp9obckwm.png" alt="grid-html"&gt;&lt;/a&gt;&lt;br&gt;
CSS:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4pIvwNvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ic9w1vkzkz2p2p3k00c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pIvwNvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ic9w1vkzkz2p2p3k00c.png" alt="grid-csspng"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onKIda69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai066b8evcya6a65dhqz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onKIda69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai066b8evcya6a65dhqz.PNG" alt="grid-outout"&gt;&lt;/a&gt;&lt;br&gt;
here in the grid example  what we have actually two columns and two rows so that is a two-dimensional layout &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2-Grid is mostly defined on the parent element while flexbox most of the layout happens on the children:&lt;/strong&gt;&lt;br&gt;
For example :&lt;br&gt;
&lt;strong&gt;Flex:&lt;/strong&gt;&lt;br&gt;
HTML:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g5MZVaIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lbhw92gozsqw6nor5zmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g5MZVaIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lbhw92gozsqw6nor5zmb.png" alt="flex-html"&gt;&lt;/a&gt;&lt;br&gt;
CSS:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rnD2boEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sim0intoyohz5nw3ua06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rnD2boEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sim0intoyohz5nw3ua06.png" alt="flex-css"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vR6SHJe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aot0a8ey0zaylerr58ua.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vR6SHJe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aot0a8ey0zaylerr58ua.PNG" alt="flex-output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grid:&lt;/strong&gt;&lt;br&gt;
HTML:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZTsJRol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czamzzta7nj75uck090o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZTsJRol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czamzzta7nj75uck090o.png" alt="grid-html"&gt;&lt;/a&gt;&lt;br&gt;
CSS:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EbR6QGg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8k7ffyflu8qwfn17bmft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EbR6QGg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8k7ffyflu8qwfn17bmft.png" alt="grid-css"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nKqzzLaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvcx6cd2yby9f39dkm19.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nKqzzLaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvcx6cd2yby9f39dkm19.PNG" alt="grid-output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3- Flexbox works from the content out while Grid works from the layout in:&lt;/strong&gt;&lt;br&gt;
Flexbox works from the content out. An ideal use case for flexbox is when you have a set of items and want to space them out evenly in a container. You let the size of the content decide how much individual space each item takes up. If the items wrap onto a new line, they will work out their spacing based on their size and the available space on that line.&lt;br&gt;
When you use CSS Grid Layout you create a layout and then you place items into it, or you allow the auto-placement rules to place the items into the grid cells according to that strict grid. It is possible to create tracks that respond to the size of the content, however, they will also change the entire track.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4-Flexbox can push things away while that is not happening in Grid:&lt;/strong&gt;&lt;br&gt;
It’s a unique feature of flexbox that you can, for example, put margin-right: auto; on an element and, if there is room, that element will push everything else as far away as it can go. while grid item if it had margin-right: auto; it can't push other items away.&lt;br&gt;
For example :&lt;br&gt;
HTML:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7s-I8aG---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2b0a7mc6oa9pn6j6xqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7s-I8aG---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2b0a7mc6oa9pn6j6xqa.png" alt="flex-html"&gt;&lt;/a&gt;&lt;br&gt;
CSS:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ooZgUCN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxy9gb3gjzf2nskvpekn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ooZgUCN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxy9gb3gjzf2nskvpekn.png" alt="flex-css"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2-lMk-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fw2zr8b8uqleqm7ik3sr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2-lMk-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fw2zr8b8uqleqm7ik3sr.PNG" alt="flex-output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/quick-whats-the-difference-between-flexbox-and-grid/"&gt;https://css-tricks.com/quick-whats-the-difference-between-flexbox-and-grid/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout"&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RSIclWvNTdQ"&gt;https://www.youtube.com/watch?v=RSIclWvNTdQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.webdesignerdepot.com/2018/09/grid-vs-flexbox-which-should-you-choose/"&gt;https://www.webdesignerdepot.com/2018/09/grid-vs-flexbox-which-should-you-choose/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/flexbox-vs-css-grid/"&gt;https://blog.logrocket.com/flexbox-vs-css-grid/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>Don’t comment your code</title>
      <author>Nada Elokaily</author>
      <pubDate>Sat, 20 Feb 2021 21:04:10 +0000</pubDate>
      <link>https://dev.to/nadaelokaily/don-t-comment-your-code-5e9h</link>
      <guid>https://dev.to/nadaelokaily/don-t-comment-your-code-5e9h</guid>
      <description>&lt;h1&gt;
  &lt;a href="#your-first-developer-instinct-is-to-disagree-but-hear-me-out" class="anchor"&gt;
  &lt;/a&gt;
  Your First Developer Instinct Is To Disagree But Hear Me Out.
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;I'm not saying comments are all bad. If used properly comments are very powerful but they aren't the answer to your mess, they might make another mess.&lt;/strong&gt; &lt;br&gt;
A code could brilliantly solve a critical problem using a &lt;em&gt;well-crafted algorithm&lt;/em&gt;, utilizing a &lt;em&gt;famous design pattern&lt;/em&gt; or exploiting from a &lt;em&gt;revolutionary feature of a programming language&lt;/em&gt;, while depending on providing comments each step of the way and yet be a &lt;em&gt;mystery&lt;/em&gt; to the team of developers maintaining it. &lt;strong&gt;Why?!&lt;/strong&gt;&lt;br&gt;
Some developers tend to focus more on writing time-wasting comments than on refactoring the code itself. &lt;strong&gt;Here are some comments your team is better off without:&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#redundant-comments" class="anchor"&gt;
  &lt;/a&gt;
  Redundant Comments
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Comments should be &lt;strong&gt;adding value&lt;/strong&gt; or &lt;strong&gt;describing an original logic&lt;/strong&gt;,&lt;/em&gt; not translating syntax. if the code was well written it won’t need this extra comment to narrate each line’s job.&lt;/p&gt;

&lt;p&gt;You can clearly see here that the comment is so uncalled for especially with all the descriptive naming.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; // The processor delay for this component.
 protected int processorDelay = -1;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#misleading-comments" class="anchor"&gt;
  &lt;/a&gt;
  Misleading Comments
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The road to &lt;strong&gt;hell&lt;/strong&gt; is paved with &lt;strong&gt;good intentions&lt;/strong&gt;.&lt;/em&gt; The author can put an inaccurate comment for all the right reasons, yet that would cost a poor programmer an expensive debugging session.&lt;/p&gt;

&lt;p&gt;For example the method here does not return when &lt;code&gt;this.closed&lt;/code&gt; becomes &lt;code&gt;true&lt;/code&gt;. It only returns if &lt;code&gt;this.closed&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;; otherwise, it waits for a blind time-out and then throws an exception if it is still not closed. The difference is astounding!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Returns when this.closed is true. Throws an exception on timeout is reached.
public synchronized void waitForClose(final long timeoutMillis) throws Exception
{
    if(!closed){
        wait(timeoutMillis);
        if(!closed)
            throw new Exception("MockResponseSender could not be closed");
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mandated-comments" class="anchor"&gt;
  &lt;/a&gt;
  Mandated Comments
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Some &lt;strong&gt;mandatory&lt;/strong&gt; comments might &lt;strong&gt;not&lt;/strong&gt; be that &lt;strong&gt;useful&lt;/strong&gt; afterall.&lt;/em&gt; Comments should not be just clutter.&lt;/p&gt;

&lt;p&gt;javadocs here are &lt;em&gt;just clutter.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
 * @param title The title of the CD
 * @param author The author of the CD
 */
 public void addCD(String title, String author) {
     CD cd = new CD();
     cd.title = title;
     cd.author = author;
     cdList.add(cd);
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#noise-comments" class="anchor"&gt;
  &lt;/a&gt;
  Noise Comments
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Comments should provide &lt;strong&gt;new information&lt;/strong&gt; otherwise they are just noise that we learn to ignore.&lt;/em&gt; If you ignore a comment it means that it shouldn’t have been there in the first place.&lt;/p&gt;

&lt;p&gt;Not only did this author write an unnecessary comment but he also forgot to add the catch body and left a mumbling comment with no context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;try
{
     // Continue normal flow
     doSomething();
}
catch(Exception e1)
{
     // Give me a break!
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#function-or-variable-substitution-comments" class="anchor"&gt;
  &lt;/a&gt;
  Function or variable substitution comments
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A &lt;strong&gt;complex code&lt;/strong&gt; line doesn't need a comment,&lt;/em&gt; what it needs is to be &lt;strong&gt;refactored&lt;/strong&gt; or broken to smaller components.&lt;/p&gt;

&lt;p&gt;check this rephrasing, Amazing right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// does the module from the global list &amp;lt;mod&amp;gt; depend on the
// subsystem we are part of?
if (smodule.getDependSubsystems().contains(subSysMod.getSubSystem())) { }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Rephrasing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ArrayList moduleDependees = smodule.getDependSubsystems();
String ourSubSystem = subSysMod.getSubSystem();
if (moduleDependees.contains(ourSubSystem)) { }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#position-marker-comments" class="anchor"&gt;
  &lt;/a&gt;
  Position Marker Comments
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Marking a &lt;strong&gt;particular position&lt;/strong&gt; with a comment is &lt;strong&gt;rarely useful&lt;/strong&gt;;&lt;/em&gt; it makes sense to gather certain functions together beneath a banner But I don't see how useful that is for each function, in general they actually may be &lt;em&gt;just clutter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Admit it you did this ;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Actions //////////////////////////////////
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#attribution-comments" class="anchor"&gt;
  &lt;/a&gt;
  Attribution Comments
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;There is no need to &lt;strong&gt;pollute&lt;/strong&gt; the code with little &lt;strong&gt;bylines&lt;/strong&gt;.&lt;/em&gt; There are so many source control tools that are very good at remembering who added what, when&lt;/p&gt;

&lt;p&gt;Git blame is after all of us, I feel so exposed..&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MCYfQiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rkh7vhkvd5nr1dpdkro.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MCYfQiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rkh7vhkvd5nr1dpdkro.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#commentedout-code" class="anchor"&gt;
  &lt;/a&gt;
  Commented-out Code
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Commented out sections &lt;strong&gt;aren't too important to delete&lt;/strong&gt;&lt;/em&gt;, Actually most source code control systems remember the code for us. We don’t need to be hoarding useless pieces of inactive code anymore.&lt;/p&gt;

&lt;p&gt;Remember the first time you found out you're clingy?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;InputStreamResponse response = new InputStreamResponse();
response.setBody(formatter.getResultStream(), formatter.getByteCount());
// InputStream resultsStream = formatter.getResultStream();
// StreamReader reader = new StreamReader(resultsStream);
// response.setContent(reader.read(formatter.getByteCount()));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#nonlocal-comments" class="anchor"&gt;
  &lt;/a&gt;
  Non-local Comments
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Comments should describe the code it &lt;strong&gt;appears near to&lt;/strong&gt;.&lt;/em&gt; There should be an obvious connection between the code and the comments.&lt;/p&gt;

&lt;p&gt;Don’t offer irrelevant or system wide information in the context of a local comment. The place for Interesting historical discussions or irrelevant descriptions of details is not comments.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h5&gt;

&lt;p&gt;This article is based on &lt;strong&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/strong&gt; by &lt;strong&gt;Robert C. Martin&lt;/strong&gt;, the book is highly recommended to read, such an amazing book that will add a lot to you.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>computerscience</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Top 20 useful k8s tools</title>
      <author>Javid Mougamadou</author>
      <pubDate>Sat, 20 Feb 2021 20:32:38 +0000</pubDate>
      <link>https://dev.to/javidjms/top-20-useful-k8s-tools-53g3</link>
      <guid>https://dev.to/javidjms/top-20-useful-k8s-tools-53g3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#monitoring" class="anchor"&gt;
  &lt;/a&gt;
  Monitoring
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#k9s" class="anchor"&gt;
  &lt;/a&gt;
  k9s
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e-jl4hdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XoAIWqZi--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://ordina-jworks.github.io/img/2020-08-06-kubernetes-clients-comparison/k9s-deploy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e-jl4hdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XoAIWqZi--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://ordina-jworks.github.io/img/2020-08-06-kubernetes-clients-comparison/k9s-deploy.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;K9s is a terminal based UI to interact with your Kubernetes clusters. The aim of this project is to make it easier to navigate, observe and manage your deployed applications in the wild. K9s continually watches Kubernetes for changes and offers subsequent commands to interact with your observed resources.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/derailed/k9s"&gt;https://github.com/derailed/k9s&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#popeye" class="anchor"&gt;
  &lt;/a&gt;
  popeye
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eSE91uIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://popeyecli.io/assets/d_score.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eSE91uIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://popeyecli.io/assets/d_score.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Popeye is a utility that scans live Kubernetes cluster and reports potential issues with deployed resources and configurations. It sanitizes your cluster based on what's deployed and not what's sitting on disk.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/derailed/popeye"&gt;https://github.com/derailed/popeye&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#package-manager" class="anchor"&gt;
  &lt;/a&gt;
  Package manager
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#krew" class="anchor"&gt;
  &lt;/a&gt;
  krew
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--akg9H6VU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--odqrpDY9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wasvpydkrxa7l0mch9lh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--akg9H6VU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--odqrpDY9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wasvpydkrxa7l0mch9lh.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Krew is a tool that makes it easy to use kubectl plugins. Krew helps you discover plugins, install and manage them on your machine. It is similar to tools like apt, dnf or brew. Today, over 100 kubectl plugins are available on Krew.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/kubernetes-sigs/krew"&gt;https://github.com/kubernetes-sigs/krew&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plugins" class="anchor"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#kubectx-kubens" class="anchor"&gt;
  &lt;/a&gt;
  kubectx + kubens
&lt;/h3&gt;

&lt;p&gt;kubectx helps you switch between clusters back and forth:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAypF5o0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/ahmetb/kubectx/raw/master/img/kubectx-demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAypF5o0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/ahmetb/kubectx/raw/master/img/kubectx-demo.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;kubens helps you switch between Kubernetes namespaces smoothly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wYgC1Ry6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/ahmetb/kubectx/raw/master/img/kubens-demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wYgC1Ry6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/ahmetb/kubectx/raw/master/img/kubens-demo.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/ahmetb/kubectx"&gt;https://github.com/ahmetb/kubectx&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kubespy" class="anchor"&gt;
  &lt;/a&gt;
  kubespy
&lt;/h3&gt;

&lt;p&gt;kubespy is a small tool that makes it easy to observe how Kubernetes resources change in real time, derived from the work we did to make Kubernetes deployments predictable in Pulumi's CLI. Run kubespy at any point in time, and it will watch and report information about a Kubernetes resource continuously until you kill it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_gzeiVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/pulumi/kubespy/raw/master/images/trace-deployment/trace-deployment-rollout.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_gzeiVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/pulumi/kubespy/raw/master/images/trace-deployment/trace-deployment-rollout.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/pulumi/kubespy"&gt;https://github.com/pulumi/kubespy&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kubescore" class="anchor"&gt;
  &lt;/a&gt;
  kube-score
&lt;/h3&gt;

&lt;p&gt;kube-score is a tool that performs static code analysis of your Kubernetes object definitions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5LzJT6eP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/47952/63225706-5b90fe80-c1d3-11e9-8b9d-fad7e723afad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5LzJT6eP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/47952/63225706-5b90fe80-c1d3-11e9-8b9d-fad7e723afad.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/zegl/kube-score"&gt;https://github.com/zegl/kube-score&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kubectldoctor" class="anchor"&gt;
  &lt;/a&gt;
  kubectl-doctor
&lt;/h3&gt;

&lt;p&gt;This plugin is inspired from brew doctor :) It will scan your currently targeted k8s cluster to see if there are anomalies or useful action points that it can report back to you.&lt;/p&gt;

&lt;p&gt;This plugin does not change any state or configuration, it merely just scans and gathers information than reports back anomalies in yaml format.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NArbXMtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/emirozer/kubectl-doctor/raw/master/docs/example.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NArbXMtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/emirozer/kubectl-doctor/raw/master/docs/example.svg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/emirozer/kubectl-doctor"&gt;https://github.com/emirozer/kubectl-doctor&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ktunnel" class="anchor"&gt;
  &lt;/a&gt;
  ktunnel
&lt;/h3&gt;

&lt;p&gt;Ktunnel is a CLI tool that establishes a reverse tunnel between a kubernetes cluster and your local machine. It lets you expose your machine as a service in the cluster or expose it to a specific deployment&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JzrfEqOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/omrikiei/ktunnel/raw/master/docs/ktunnel%2520diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JzrfEqOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/omrikiei/ktunnel/raw/master/docs/ktunnel%2520diagram.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/omrikiei/ktunnel"&gt;https://github.com/omrikiei/ktunnel&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kubectltree" class="anchor"&gt;
  &lt;/a&gt;
  kubectl-tree
&lt;/h3&gt;

&lt;p&gt;A kubectl plugin to explore ownership relationships between Kubernetes objects through ownersReferences on them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F17K1ypQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ahmetb/kubectl-tree/raw/master/assets/example-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F17K1ypQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ahmetb/kubectl-tree/raw/master/assets/example-1.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/ahmetb/kubectl-tree"&gt;https://github.com/ahmetb/kubectl-tree&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debuglogs" class="anchor"&gt;
  &lt;/a&gt;
  Debug/Logs
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#kubetail" class="anchor"&gt;
  &lt;/a&gt;
  kubetail
&lt;/h3&gt;

&lt;p&gt;Bash script that enables you to aggregate (tail/follow) logs from multiple pods into one stream. This is the same as running "kubectl logs -f " but for multiple pods.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jVGDC6gq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1165/1%2A00AWV7qSU7UJfv8UUANk8Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jVGDC6gq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1165/1%2A00AWV7qSU7UJfv8UUANk8Q.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/johanhaleby/kubetail"&gt;https://github.com/johanhaleby/kubetail&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kubectldebug" class="anchor"&gt;
  &lt;/a&gt;
  kubectl-debug
&lt;/h3&gt;

&lt;p&gt;kubectl-debug is an out-of-tree solution for troubleshooting running pods, which allows you to run a new container in running pods for debugging purpose.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tgqniWjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/aylei/kubectl-debug/raw/master/docs/kube-debug.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tgqniWjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/aylei/kubectl-debug/raw/master/docs/kube-debug.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/aylei/kubectl-debug"&gt;https://github.com/aylei/kubectl-debug&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stern" class="anchor"&gt;
  &lt;/a&gt;
  stern
&lt;/h3&gt;

&lt;p&gt;Stern allows you to tail multiple pods on Kubernetes and multiple containers within the pod. Each result is color coded for quicker debugging&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/wercker/stern"&gt;https://github.com/wercker/stern&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alerting" class="anchor"&gt;
  &lt;/a&gt;
  Alerting
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#botkube" class="anchor"&gt;
  &lt;/a&gt;
  Botkube
&lt;/h3&gt;

&lt;p&gt;BotKube integration with Slack, Mattermost or Microsoft Teams helps you monitor your Kubernetes cluster, debug critical deployments and gives recommendations for standard practices by running checks on the Kubernetes resources. You can also ask BotKube to execute kubectl commands on k8s cluster which helps debugging an application or cluster&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UnykGmoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Atwkrzfm--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://www.botkube.io/images/monitor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UnykGmoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Atwkrzfm--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://www.botkube.io/images/monitor.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/infracloudio/botkube"&gt;https://github.com/infracloudio/botkube&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validation" class="anchor"&gt;
  &lt;/a&gt;
  Validation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#polaris" class="anchor"&gt;
  &lt;/a&gt;
  Polaris
&lt;/h3&gt;

&lt;p&gt;Fairwinds' Polaris keeps your clusters sailing smoothly. It runs a variety of checks to ensure that Kubernetes pods and controllers are configured using best practices, helping you avoid problems in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/db9e726621b892d323318dc5d820e12e4b27302674f8c391c45411c3417b8a2a/68747470733a2f2f706f6c617269732e646f63732e6661697277696e64732e636f6d2f696d672f64617368626f6172642d73637265656e73686f742e706e67" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/db9e726621b892d323318dc5d820e12e4b27302674f8c391c45411c3417b8a2a/68747470733a2f2f706f6c617269732e646f63732e6661697277696e64732e636f6d2f696d672f64617368626f6172642d73637265656e73686f742e706e67" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/FairwindsOps/polaris"&gt;https://github.com/FairwindsOps/polaris&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#goldilocks" class="anchor"&gt;
  &lt;/a&gt;
  goldilocks
&lt;/h3&gt;

&lt;p&gt;Goldilocks is a utility that can help you identify a starting point for resource requests and limits.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6-qcg3pW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/FairwindsOps/goldilocks/raw/master/img/screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6-qcg3pW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/FairwindsOps/goldilocks/raw/master/img/screenshot.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/FairwindsOps/goldilocks"&gt;https://github.com/FairwindsOps/goldilocks&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helm" class="anchor"&gt;
  &lt;/a&gt;
  Helm
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#reckoner" class="anchor"&gt;
  &lt;/a&gt;
  reckoner
&lt;/h3&gt;

&lt;p&gt;Command line helper for helm. This utility adds to the functionality of Helm in multiple ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creates a declarative syntax to manage multiple releases in one place&lt;/li&gt;
&lt;li&gt;Allows installation of charts from a git commit/branch/release&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# course.yml&lt;/span&gt;
&lt;span class="na"&gt;charts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;nginx-ingress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ingress-controllers&lt;/span&gt;
    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1.15.1&lt;/span&gt;
    &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;controller.ingressClass&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;my-ingress-class-name"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Link : &lt;a href="https://github.com/FairwindsOps/reckoner"&gt;https://github.com/FairwindsOps/reckoner&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#helmfile" class="anchor"&gt;
  &lt;/a&gt;
  helmfile
&lt;/h3&gt;

&lt;p&gt;Deploy Kubernetes Helm Charts with helmfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;releases&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom-norbac-ubuntu&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus&lt;/span&gt;
  &lt;span class="na"&gt;chart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable/prometheus&lt;/span&gt;
  &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rbac.create&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helmfile apply
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Link : &lt;a href="https://github.com/roboll/helmfile"&gt;https://github.com/roboll/helmfile&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ship" class="anchor"&gt;
  &lt;/a&gt;
  Ship
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#kubevela" class="anchor"&gt;
  &lt;/a&gt;
  kubevela
&lt;/h3&gt;

&lt;p&gt;KubeVela is a platform engine to enable designing and shipping applications with minimal effort.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vela up &lt;span class="nt"&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/oam-dev/kubevela/master/docs/examples/vela.yaml
Parsing vela.yaml ...
Loading templates ...

Rendering configs &lt;span class="k"&gt;for &lt;/span&gt;service &lt;span class="o"&gt;(&lt;/span&gt;testsvc&lt;span class="o"&gt;)&lt;/span&gt;...
Writing deploy config to &lt;span class="o"&gt;(&lt;/span&gt;.vela/deploy.yaml&lt;span class="o"&gt;)&lt;/span&gt;

Applying deploy configs ...
Checking &lt;span class="k"&gt;if &lt;/span&gt;app has been deployed...
App has not been deployed, creating a new deployment...
✅ App has been deployed 🚀🚀🚀
    Port forward: vela port-forward first-vela-app
             SSH: vela &lt;span class="nb"&gt;exec &lt;/span&gt;first-vela-app
         Logging: vela logs first-vela-app
      App status: vela status first-vela-app
  Service status: vela status first-vela-app &lt;span class="nt"&gt;--svc&lt;/span&gt; testsvc

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Link : &lt;a href="https://github.com/oam-dev/kubevela"&gt;https://github.com/oam-dev/kubevela&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helm-secrets" class="anchor"&gt;
  &lt;/a&gt;
  Helm secrets
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#sealedsecrets" class="anchor"&gt;
  &lt;/a&gt;
  sealed-secrets
&lt;/h3&gt;

&lt;p&gt;In order to store secrets safely in a public or private Git repository, you can use Bitnami's sealed-secrets controller and encrypt your Kubernetes Secrets into SealedSecrets. The sealed secrets can be decrypted only by the controller running in your cluster and nobody else can obtain the original secret, even if they have access to the Git repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfPTUQVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://engineering.bitnami.com/images/sealed-secrets/life-of-a-64c71420.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfPTUQVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://engineering.bitnami.com/images/sealed-secrets/life-of-a-64c71420.png" alt="Image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create a json/yaml-encoded Secret somehow:&lt;/span&gt;
&lt;span class="c"&gt;# (note use of `--dry-run` - this is just a local file!)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; bar | kubectl create secret generic mysecret &lt;span class="nt"&gt;--dry-run&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;client &lt;span class="nt"&gt;--from-file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/stdin &lt;span class="nt"&gt;-o&lt;/span&gt; json &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;mysecret.json

&lt;span class="c"&gt;# This is the important bit:&lt;/span&gt;
&lt;span class="c"&gt;# (note default format is json!)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubeseal &amp;lt;mysecret.json &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;mysealedsecret.json

&lt;span class="c"&gt;# mysealedsecret.json is safe to upload to github, post to twitter,&lt;/span&gt;
&lt;span class="c"&gt;# etc.  Eventually:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl create &lt;span class="nt"&gt;-f&lt;/span&gt; mysealedsecret.json

&lt;span class="c"&gt;# Profit!&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get secret mysecret
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Link : &lt;a href="https://github.com/bitnami-labs/sealed-secrets"&gt;https://github.com/bitnami-labs/sealed-secrets&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kubernetesexternalsecrets" class="anchor"&gt;
  &lt;/a&gt;
  kubernetes-external-secrets
&lt;/h3&gt;

&lt;p&gt;The External Secrets Kubernetes operator reads information from a third party service like AWS Secrets Manager and automatically injects the values as Kubernetes Secrets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FFmDjS4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/5144/1%2AvSIjxbhbtnGPDiDgSZBbkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FFmDjS4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/5144/1%2AvSIjxbhbtnGPDiDgSZBbkg.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://github.com/external-secrets/external-secrets"&gt;https://github.com/external-secrets/external-secrets&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>devops</category>
    </item>
    <item>
      <title>Handling Unix Kill Signals in Rust</title>
      <author>Tal</author>
      <pubDate>Sat, 20 Feb 2021 20:27:39 +0000</pubDate>
      <link>https://dev.to/talzvon/handling-unix-kill-signals-in-rust-55g6</link>
      <guid>https://dev.to/talzvon/handling-unix-kill-signals-in-rust-55g6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Like many of you, I am a software developer. For the past few years, I've been working with Python, both at work, and writing small hobby projects at home.&lt;/p&gt;

&lt;p&gt;One of the most common things I do with Python is write Linux services/daemons. A linux daemon is a program, in our case written in Python, that runs in a loop, usually by SystemD, and only exits when it receives a kill signal.&lt;/p&gt;

&lt;p&gt;A few months ago, I decided to teach myself Rust, and after reading the &lt;a href="https://doc.rust-lang.org/book/title-page.html"&gt;Rust book&lt;/a&gt; (which I highly recommend), and watching lots of youtube videos, I tried to write a Rust Linux daemon.&lt;/p&gt;

&lt;p&gt;Part of the process was figuring out how to handle kill signals in Rust, which is very different than how it is handled in Python. I expected this to be relatively easy, but found it to be rather difficult. In this article, we're going to take a look at the &lt;code&gt;signal_hook&lt;/code&gt; crate, and the different ways Rust allows us to react to a kill signal. Hopefully, my experience will help ease the journey for some of you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linux-kill-signals" class="anchor"&gt;
  &lt;/a&gt;
  Linux Kill Signals
&lt;/h2&gt;

&lt;p&gt;The 2 most common kill signals in Linux are SIGINT, which gets sent to your program when you run the program manually, and hit Ctrl+C in your terminal, or SIGTERM, which SystemD sends to your program when you run &lt;code&gt;systemctl stop my_program&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unlike Python, which throws an ugly traceback when it receives an unhandled kill signal, Rust quietly exits. If your Rust program does not need to do anything special when it terminates, you can probably get away with not doing any kill signal handling at all, but if you need to do any kind of cleanup, you'll likely need to catch these kill signals, and do your cleanup before exiting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crate-options" class="anchor"&gt;
  &lt;/a&gt;
  Crate Options
&lt;/h2&gt;

&lt;p&gt;Unlike Python, Rust doesn't have built-in kill signal handling. You'll need to use an external crate to add this functionality. There are 2 main crates that allow you to handle kill signals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.rs/ctrlc/3.1.7/ctrlc/"&gt;ctrlc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.rs/signal-hook/0.3.4/signal_hook/"&gt;signal_hook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;ctrlc&lt;/code&gt; crate is fairly easy to use, but only supports a limited number of kill signals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SIGINT&lt;/li&gt;
&lt;li&gt;SIGTERM (&lt;a href="https://docs.rs/ctrlc/3.1.7/ctrlc/#handling-sigterm"&gt;requires enabling the termination feature&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, I'll be taking a look at the &lt;code&gt;signal_hook&lt;/code&gt; crate. Once we break down the &lt;code&gt;signal_hook&lt;/code&gt; crate, the &lt;code&gt;ctrlc&lt;/code&gt; crate becomes easy to understand and use as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signal-hook" class="anchor"&gt;
  &lt;/a&gt;
  Signal Hook
&lt;/h2&gt;

&lt;p&gt;This may change, but as of now, the crate documentation has 2 examples on the front page - one that is &lt;a href="https://docs.rs/signal-hook/0.3.4/signal_hook/index.html#using-a-flag-to-terminate-a-loop-based-application"&gt;very simple&lt;/a&gt;, which we will take a closer look at below, and one that is &lt;a href="https://docs.rs/signal-hook/0.3.4/signal_hook/index.html#a-complex-signal-handling-with-a-background-thread"&gt;overly complex&lt;/a&gt;, which uses features that are unlikely to be commonly needed, and &lt;a href="https://github.com/vorner/signal-hook/issues/93"&gt;won't compile without enabling extra features&lt;/a&gt;. We'll slowly work our way from the simple example, to a more complex one that resembles the one in the documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cargotoml" class="anchor"&gt;
  &lt;/a&gt;
  Cargo.toml
&lt;/h2&gt;

&lt;p&gt;The first thing you'll want to do is add this to the dependencies section of your Cargo.toml file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="py"&gt;signal-hook&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.3.4"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While this will work for ALL of our examples, if you want to compile the &lt;a href="https://docs.rs/signal-hook/0.3.4/signal_hook/index.html#a-complex-signal-handling-with-a-background-thread"&gt;complex&lt;/a&gt; example from the documentation, you'll want your toml file to say this instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;signal-hook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.3.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;["extended-siginfo"]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#simple-example" class="anchor"&gt;
  &lt;/a&gt;
  Simple Example
&lt;/h2&gt;

&lt;p&gt;This is a slightly modified version of the simple example from the documentation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;AtomicBool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ordering&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Declare bool, setting it to false&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;AtomicBool&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c"&gt;// Ask signal_hook to set the term variable to true&lt;/span&gt;
    &lt;span class="c"&gt;// when the program receives a SIGTERM kill signal&lt;/span&gt;
    &lt;span class="nn"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Do work until the term variable becomes true&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="nf"&gt;.load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Ordering&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Relaxed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Doing work..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_secs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Since our loop is basically an infinite loop,&lt;/span&gt;
    &lt;span class="c"&gt;// that only ends when we receive SIGTERM, if&lt;/span&gt;
    &lt;span class="c"&gt;// we got here, it's because the loop exited after&lt;/span&gt;
    &lt;span class="c"&gt;// receiving SIGTERM&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received SIGTERM kill signal. Exiting..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets have a look at the different parts. First, we have this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;AtomicBool&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This line creates a special boolean variable that can be used safely from different threads. It can be set in one thread, by the &lt;code&gt;signal_hook&lt;/code&gt; crate, and checked in your main thread.&lt;/p&gt;

&lt;p&gt;Next, we have this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nn"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This tells &lt;code&gt;signal_hook&lt;/code&gt; that we would like to register the SIGTERM kill signal to be monitored, and when we receive this kill signal, to have the &lt;code&gt;term&lt;/code&gt; boolean set to true.&lt;/p&gt;

&lt;p&gt;Lastly, we have the main loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="nf"&gt;.load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Ordering&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Relaxed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The way we check if the special boolean we are using is true or false is slightly different than how we check regular booleans. We use the &lt;code&gt;.load()&lt;/code&gt; method on it. Because the loop starts out false, and we are waiting for it to turn true, and &lt;code&gt;while&lt;/code&gt; loops only run while something is true, we use &lt;code&gt;!&lt;/code&gt; here. All we are saying is that we want the loop to run until the boolean turns true.&lt;/p&gt;

&lt;p&gt;To test this program, compile it, run it, and after a few seconds, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;killall &lt;span class="nt"&gt;-SIGTERM&lt;/span&gt; my_program
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;where &lt;code&gt;my_program&lt;/code&gt; is the name of your program. That's the name you gave it when you ran &lt;code&gt;crate new my_program&lt;/code&gt;. It's also the name of your binary under &lt;code&gt;target/debug/&lt;/code&gt; of your project. This will send your program a SIGTERM signal, causing the boolean to get set to true, and the loop to exit. Simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#double-sigint" class="anchor"&gt;
  &lt;/a&gt;
  Double SIGINT
&lt;/h2&gt;

&lt;p&gt;This is a slightly more complex example. Here, if the user hits Ctrl+C (sending our program the SIGINT kill signal), our program will begin to clean up and try to exit. If the user hits Ctrl+C again, possibly because our cleanup procedure locked up, our program will terminate immediately.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;AtomicBool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ordering&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// This is just a collection of ints that represent kill signals.&lt;/span&gt;
&lt;span class="c"&gt;// More specifically, they are the common kill signals used to&lt;/span&gt;
&lt;span class="c"&gt;// terminate a program&lt;/span&gt;
&lt;span class="c"&gt;// You can do println!("{:?}", TERM_SIGNALS) to see them&lt;/span&gt;
&lt;span class="c"&gt;// They are just SIGINT(2), SIGTERM(15) and SIGQUIT(3)&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TERM_SIGNALS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// Module that sets boolean flags when kill signal is received&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// A special boolean that can be used across threads&lt;/span&gt;
    &lt;span class="c"&gt;// It will be passed to flag::register, which will&lt;/span&gt;
    &lt;span class="c"&gt;// set it to true the first time a kill signal is received&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;term_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;AtomicBool&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c"&gt;// Register all kill signals&lt;/span&gt;
    &lt;span class="c"&gt;// Note: You COULD specify other, specific kill signals here&lt;/span&gt;
    &lt;span class="c"&gt;// rather than the 3 in TERM_SIGNALS. You just need a vector&lt;/span&gt;
    &lt;span class="c"&gt;// of constants from signal_hook::consts::signal&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;TERM_SIGNALS&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// When terminated by a second term signal, exit with exit code 1.&lt;/span&gt;
        &lt;span class="c"&gt;// This will do nothing the first time (because term_now is false).&lt;/span&gt;
        &lt;span class="nn"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;register_conditional_shutdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;term_now&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c"&gt;// But this will "arm" the above for the second time, by setting it to true.&lt;/span&gt;
        &lt;span class="c"&gt;// The order of registering these is important, if you put this one first, it will&lt;/span&gt;
        &lt;span class="c"&gt;// first arm and then terminate ‒ all in the first round.&lt;/span&gt;
        &lt;span class="nn"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;term_now&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Main process that does work until term_now has been set&lt;/span&gt;
    &lt;span class="c"&gt;// to true by flag::register&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;term_now&lt;/span&gt;&lt;span class="nf"&gt;.load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Ordering&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Relaxed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Doing work..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_secs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// If we ended up here, the loop above exited because of a kill signal&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Received kill signal. Wait 10 seconds, or hit Ctrl+C again to exit immediately."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;// This simulates a long cleanup operation&lt;/span&gt;
    &lt;span class="c"&gt;// If you wait this long, the program will exit&lt;/span&gt;
    &lt;span class="c"&gt;// If you hit Ctrl+C again before this is done, flag::register_conditional_shutdown will kill&lt;/span&gt;
    &lt;span class="c"&gt;// the process without waiting for it to finish. This means double Ctrl+C kills the process&lt;/span&gt;
    &lt;span class="c"&gt;// immediately&lt;/span&gt;
    &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_secs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Exited cleanly"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This code is actually very similar to the first example, but with one additional part. Now, the &lt;code&gt;term_now&lt;/code&gt; bool is used for 2 different purposes.&lt;/p&gt;

&lt;p&gt;The first is defined here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;TERM_SIGNALS&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;register_conditional_shutdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;term_now&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nn"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;term_now&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As before, the &lt;code&gt;register&lt;/code&gt; function will set &lt;code&gt;term_now&lt;/code&gt; to true when it receives a kill signal. The new &lt;code&gt;register_conditional_shutdown&lt;/code&gt; on the other hand will kill your program, but only if &lt;code&gt;term_now&lt;/code&gt; is set to true. &lt;/p&gt;

&lt;p&gt;The first time you hit Ctrl+C, &lt;code&gt;register_conditional_shutdown&lt;/code&gt; will do nothing because &lt;code&gt;term_now&lt;/code&gt; will be false, but &lt;code&gt;register&lt;/code&gt; will set &lt;code&gt;term_now&lt;/code&gt; to true. The second time you hit Ctrl+C, &lt;code&gt;register_conditional_shutdown&lt;/code&gt; will terminate the program no matter what else the program might be working on.&lt;/p&gt;

&lt;p&gt;These 2 lines in a &lt;code&gt;for&lt;/code&gt; loop will make the double-Ctrl+C work (terminate your program), but you still need your main code to watch for, and react to a kill signal to shut down your program gracefully. As before, we do this with a &lt;code&gt;while&lt;/code&gt; loop that runs until &lt;code&gt;term_now&lt;/code&gt; becomes true.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complex-example" class="anchor"&gt;
  &lt;/a&gt;
  Complex Example
&lt;/h2&gt;

&lt;p&gt;Building on the previous examples, the following is a slightly more complex example that reacts differently to different kill signals:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;AtomicBool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Ordering&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TERM_SIGNALS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Signals&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// A special boolean that can be used across threads&lt;/span&gt;
    &lt;span class="c"&gt;// The first time a kill signal is received, it will be set to&lt;/span&gt;
    &lt;span class="c"&gt;// true by flag::register&lt;/span&gt;
    &lt;span class="c"&gt;// The second time a kill signal is received, our process will&lt;/span&gt;
    &lt;span class="c"&gt;// be killed by flag::register_conditional_shutdown&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;term_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;AtomicBool&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;TERM_SIGNALS&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// When terminated by a second term signal, exit with exit code 1.&lt;/span&gt;
        &lt;span class="c"&gt;// This will do nothing the first time (because term_now is false).&lt;/span&gt;
        &lt;span class="nn"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;register_conditional_shutdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;term_now&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c"&gt;// But this will "arm" the above for the second time, by setting it to true.&lt;/span&gt;
        &lt;span class="c"&gt;// The order of registering these is important, if you put this one first, it will&lt;/span&gt;
        &lt;span class="c"&gt;// first arm and then terminate ‒ all in the first round.&lt;/span&gt;
        &lt;span class="nn"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;term_now&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Our actual work thread&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;term_now&lt;/span&gt;&lt;span class="nf"&gt;.load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Ordering&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Relaxed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Doing work..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_secs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Thread exiting..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c"&gt;// Create iterator over signals&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Signals&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TERM_SIGNALS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// This loop runs forever, and blocks until a kill signal is received&lt;/span&gt;
    &lt;span class="nv"&gt;'outer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="nf"&gt;.pending&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;SIGINT&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Got SIGINT"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nv"&gt;'outer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;SIGTERM&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Got SIGTERM"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nv"&gt;'outer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;term_sig&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Got {:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;term_sig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nv"&gt;'outer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Wait for thread to exit&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// Cleanup code goes here&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Received kill signal. Wait 10 seconds, or hit Ctrl+C again to exit immediately."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_secs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Exited cleanly"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, a few things are going on that we are already familiar with. Just like before, we create a new bool that &lt;code&gt;signal_hook&lt;/code&gt; will set to true for us when it receives a kill signal.&lt;/p&gt;

&lt;p&gt;We also, once again, use &lt;code&gt;flag::register_conditional_shutdown&lt;/code&gt; to make sure that a second SIGINT will kill our program immediately.&lt;/p&gt;

&lt;p&gt;Something that's new here is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Our actual work thread&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;term_now&lt;/span&gt;&lt;span class="nf"&gt;.load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Ordering&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Relaxed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Doing work..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_secs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Thread exiting..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we are spawning a new worker thread where our actual work will be done, whatever that happens to be, and moving our &lt;code&gt;term_now&lt;/code&gt; variable to this thread, so that the worker thread can monitor the boolean, and know when it's time to exit (when we've received a kill signal).&lt;/p&gt;

&lt;p&gt;The worker thread looks very similar to our previous examples' main thread - it runs an infinite while loop that only exits if the boolean &lt;code&gt;signal_hook&lt;/code&gt; will set for us becomes true. When it does exit, the statements following the while loop will be executed on its way out.&lt;/p&gt;

&lt;p&gt;The next new code in this example is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Signals&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TERM_SIGNALS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will let us use an iterator to iterate over any incoming signals.&lt;/p&gt;

&lt;p&gt;The main example in the &lt;code&gt;signal_hook&lt;/code&gt; documentation uses &lt;code&gt;SignalsInfo&lt;/code&gt; instead. The main difference is that &lt;code&gt;Signals&lt;/code&gt; will simply return the kill signal received, whereas &lt;code&gt;SignalsInfo&lt;/code&gt; returns some additional info about every kill signal.&lt;/p&gt;

&lt;p&gt;As stated above, using &lt;code&gt;Signals&lt;/code&gt; doesn't require anything special, while using &lt;code&gt;SignalsInfo&lt;/code&gt; requires the &lt;code&gt;extended-siginfo&lt;/code&gt; feature to be enabled in your Cargo.toml, so please be aware.&lt;/p&gt;

&lt;p&gt;After that, we have this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="nv"&gt;'outer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="nf"&gt;.pending&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;SIGINT&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Got SIGINT"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nv"&gt;'outer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;SIGTERM&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Got SIGTERM"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nv"&gt;'outer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;term_sig&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Got {:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;term_sig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nv"&gt;'outer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is a loop within a loop. The inner loop iterates over any kill signals in queue, while the outer loop is an infinite loop that keeps checking the queue.&lt;/p&gt;

&lt;p&gt;When we do receive a kill signal, we can match it against the constants found in &lt;code&gt;signal_hook::consts::signal&lt;/code&gt;, like SIGINT and SIGTERM, take action, and break out of both loops.&lt;/p&gt;

&lt;p&gt;In order to easily break out of both loops, we give the outer loop a name, and our break statement tells rust that we want to break out of the loop with the given name, rather than the first enclosing loop.&lt;/p&gt;

&lt;p&gt;After we are out of the loop, we have this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Because the only way to get out of the loop is by receiving a kill signal, and our worker thread will also see this kill signal, we can assume at this point that our thread is terminating, so here, we simply wait for it to return (finish its cleanup).&lt;/p&gt;

&lt;p&gt;Once the thread returns, we can do our own cleanup here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Received kill signal. Wait 10 seconds, or hit Ctrl+C again to exit immediately."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_secs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Exited cleanly"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This can be whatever you need to do before your program exits.&lt;/p&gt;

&lt;p&gt;Because we used &lt;code&gt;flag::register_conditional_shutdown&lt;/code&gt; at the beginning, if this cleanup gets stuck, the user has the option of hitting Ctrl+C again in order to terminate our program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now that we've slowly worked up from a basic example, to a complex example, hopefully you are ready to read, and understand the example in the &lt;code&gt;signal_hook&lt;/code&gt; documentation that uses &lt;code&gt;SignalsInfo&lt;/code&gt;, and a few extra features we haven't covered here.&lt;/p&gt;

&lt;p&gt;It took me a few days to figure this out - I hope with this guide, you'll be able to get going faster.&lt;/p&gt;

&lt;p&gt;If you have any questions, please let me know. I'm still learning Rust, and definitely don't know everything about the &lt;code&gt;signal_hook&lt;/code&gt; crate, but I'll try to answer them as best as I can.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>programming</category>
      <category>linux</category>
    </item>
    <item>
      <title>How to use the rest operator in Javascript</title>
      <author>Arika</author>
      <pubDate>Sat, 20 Feb 2021 19:59:13 +0000</pubDate>
      <link>https://dev.to/test555creator/how-to-use-the-rest-operator-in-javascript-1pbi</link>
      <guid>https://dev.to/test555creator/how-to-use-the-rest-operator-in-javascript-1pbi</guid>
      <description>&lt;p&gt;After explaining the spread operator (you can check all about it in the link below), it's time to demystify the rest (&lt;code&gt;...&lt;/code&gt;) operator. The two look exactly the same but they serve different functions. One thing they have in common, besides the identical syntax, is that they work with iterables like arrays, objects, sets or maps. &lt;/p&gt;

&lt;p&gt;The rest operator collects all remaining elements into an array or into an object. It can be used for destructuring or handling function parameters, especially when their number is unknown.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Object destructuring.&lt;/strong&gt; In the example below we can see destructuring in action. All the properties we didn't want to put into individual variables are now stored into a separate object. We can access the properties of that object using the dot notation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myDoggo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Twister&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Labrador&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;favoriteToy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shoes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;favoriteFood&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;anything goes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;favoriteActivity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sleeping&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;favoriteToy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otherProperties&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myDoggo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints Twister&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;favoriteToy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints shoes&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;otherProperties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// prints {breed: 'Labrador', favoriteFood: 'anything goes', favoriteActivity: 'sleeping' }&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;otherProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// prints Labrador&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can of course do the same thing with an array. We can access the items of the array using the square bracket notation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomWords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;minute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fork&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;share&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;untitled&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randomWords&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints minute&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints delete&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints ['fork', 'share', 'untitled']&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// prints fork&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Function parameters handling&lt;/strong&gt; The rest parameter allows us to represent an indefinite number of arguments as an array. Let's see the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 112&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Maybe you were expecting the result to be &lt;code&gt;257&lt;/code&gt;? The thing is, if we define a function which requires two parameters and we call it with 10 arguments, Javascript won't throw an error but it will use only the first two arguments. With the rest parameter, this changes and our function can now use an unlimited number of arguments. All we need to do is to write something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otherArguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;otherArguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;otherArguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;785&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8966&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// prints 34&lt;/span&gt;
&lt;span class="c1"&gt;// prints 78&lt;/span&gt;
&lt;span class="c1"&gt;// prints 785&lt;/span&gt;
&lt;span class="c1"&gt;// prints 9078&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What happens is that, under the hood, the arguments will be split. Two individual ones and the array which can hold an unlimited number of arguments. Therefore, these two lines of code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;otherArguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;otherArguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;just mean the second element of the `&lt;code&gt;[56, 89, 785, 8966, 0]&lt;/code&gt; array (so 785) and &lt;code&gt;34 + 78 + the third element of the [56, 89, 785, 8966, 0]&lt;/code&gt; array (which is 8966).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo source: James Harrison/ @jstrippa on Unsplash&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Javascript: The four rules of {this}.</title>
      <author>Ali Shirazee</author>
      <pubDate>Sat, 20 Feb 2021 19:54:37 +0000</pubDate>
      <link>https://dev.to/trackmystories/javascript-the-four-rules-of-this-42g0</link>
      <guid>https://dev.to/trackmystories/javascript-the-four-rules-of-this-42g0</guid>
      <description>&lt;p&gt;&lt;em&gt;Firstly, this article is written with reference to a chapter from Kyle Simpson's great book You Don't Know JS: this &amp;amp; Object Prototypes. It is an incredible resource for anyone looking to build a deeper understanding of Javascript.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What rules determine the order of precedence where this points to when a function is executed?&lt;/p&gt;

&lt;p&gt;There are four rules that determine the order of precedence on where this points to during function execution:&lt;/p&gt;

&lt;p&gt;• Default Binding&lt;br&gt;
• Implicit Binding&lt;br&gt;
• Explicit Binding&lt;br&gt;
• Hard Binding&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Default Binding :&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function js(){&lt;br&gt;
 console.log(this.binding);&lt;br&gt;
}&lt;br&gt;
var binding = 'default binding';&lt;br&gt;
js(); // default binding&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Breaking down our snippet above and understanding how our call-site determines where this points to when function js(){...} is executed, firstly, function js(){…} is our call-stack which holds console.log(this.binding); and the call-site for our function is js(); which is located on the last line of the snippet which is the point from which the function is called. furthermore, our variable var binding = 'default binding'; is declared in the global scope.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Implicit Binding:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function properties(){&lt;br&gt;
 console.log(this.binding);&lt;br&gt;
}&lt;br&gt;
var object = {&lt;br&gt;
 binding: 'implicit binding',&lt;br&gt;
 properties: properties&lt;br&gt;
};&lt;br&gt;
object.properties(); // implicit binding&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;If you've worked with apollo resolvers or the react context API this second rule will give some deeper clarity on how they work through javascript.&lt;/p&gt;

&lt;p&gt;breaking down the above snippet, our call-stack is &lt;code&gt;function properties(){...}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which holds our this.binding binding, our call-site is object.properties();.&lt;/p&gt;

&lt;p&gt;however, what differentiates this rule to the default binding is in the manner in which our call-site is declared.&lt;br&gt;
The implicit rule can be determined if our call-site has a context object, &lt;code&gt;function properties(){...};&lt;/code&gt; is declared in the same fashion as our default binding from our first example, however, our call-site references object when calling a function, object.properties();.&lt;/p&gt;

&lt;p&gt;At the point at which &lt;code&gt;properties();&lt;/code&gt; is called it is prefixed with &lt;code&gt;var object = {...}&lt;/code&gt;, which contains the value on execution.&lt;/p&gt;

&lt;p&gt;reference: As Kyle Simpson states in his book You Don't Know JS: this &amp;amp; Object Prototypes :&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"When there is a context object for a function reference, the implicit binding rule says that it's object which should be used for the function call's this binding."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"With implicit binding as we just saw, we had to mutate the object in question to include a reference on itself to the function, and use this property function reference to &lt;code&gt;indirectly(implicitly)&lt;/code&gt; bind this to the object."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Explicit Binding:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function properties(){&lt;br&gt;
 console.log(this.binding);&lt;br&gt;
}&lt;br&gt;
var object = {&lt;br&gt;
 binding : 'explicit binding'&lt;br&gt;
};&lt;br&gt;
properties.call(object); //explicit binding&lt;br&gt;
or&lt;br&gt;
properties.apply(object); //explicit binding&lt;br&gt;
// call or apply produce the same result.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Instead of including an implicit function reference inside &lt;code&gt;var object = {...}&lt;/code&gt; and prefixing it to the call-site, we can explicitly call the function with a built-in utility &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;apply()&lt;/code&gt;, the function &lt;code&gt;properties(){...}&lt;/code&gt; is the call-stack, however, our call-site uses the built-in utility to execute the function explicitly. It is important to note that &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;apply()&lt;/code&gt; result in the same outcome unless additional parameters are passed to them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hard Binding:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function properties(){&lt;br&gt;
 console.log(this.binding);&lt;br&gt;
}&lt;br&gt;
var object = {&lt;br&gt;
 binding: 'hard binding'&lt;br&gt;
};&lt;br&gt;
var hardBindedPropertiesToObject = function(){&lt;br&gt;
 properties.call(object);&lt;br&gt;
}&lt;br&gt;
hardBindedPropertiesToObject(); // hard binding&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With respect to the hard binding snippet above, we create a function &lt;code&gt;var hardBindedPropertiesToObject= function(){//call(object)}&lt;/code&gt; which calls the call-stack with &lt;code&gt;var object = {...}&lt;/code&gt; which points towards this.&lt;/p&gt;

&lt;p&gt;reference: As Kyle Simpson states in his book You Don't Know JS: this &amp;amp; Object Prototypes :&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"This binding is both explicit and strong, so we call it hard binding."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another thing to note is that the hard binding pattern has its own built-in utility &lt;code&gt;Function.prototype.bind()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;consider:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const module = {&lt;br&gt;
 x: 42,&lt;br&gt;
 getX: function() {&lt;br&gt;
 return this.x;&lt;br&gt;
 }&lt;br&gt;
};&lt;br&gt;
const unboundGetX = module.getX;&lt;br&gt;
console.log(unboundGetX()); // The function gets invoked at the global scope&lt;br&gt;
// expected output: undefined&lt;br&gt;
const boundGetX = unboundGetX.bind(module);&lt;br&gt;
console.log(boundGetX());&lt;br&gt;
// expected output: 42&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind"&gt;source MDN developer.mozilla.org states:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To conclude, here are the 4 rules of this , I would highly recommend reading the you dont know js book series by Kyle Simpson. &lt;a href="https://github.com/trackmystories/You-Dont-Know-JS"&gt;His books&lt;/a&gt; cover all the aspects of javascript that can enable any developer to gain proficiency in the language.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
