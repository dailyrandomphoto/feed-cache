<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Parental Control App SPY24</title>
      <author>SPY24.app</author>
      <pubDate>Wed, 20 Oct 2021 02:09:11 +0000</pubDate>
      <link>https://dev.to/keleis_andre/parental-control-app-spy24-4ibm</link>
      <guid>https://dev.to/keleis_andre/parental-control-app-spy24-4ibm</guid>
      <description>&lt;p&gt;Got parental- or employee-surveillance-related epiphanies? Worry no more. SPY24 ™ is an all-in-one parental and employee monitoring app software that will keep you updated on their activities in real-time, all the time!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#spy-spyapp"&gt;
  &lt;/a&gt;
  spy #spyapp
&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>Smartlist - the sophisticated home inventory app</title>
      <author>ManuTheCoder</author>
      <pubDate>Wed, 20 Oct 2021 01:16:40 +0000</pubDate>
      <link>https://dev.to/manuthecoder/smartlist-the-sophisticated-home-inventory-app-mm2</link>
      <guid>https://dev.to/manuthecoder/smartlist-the-sophisticated-home-inventory-app-mm2</guid>
      <description>&lt;p&gt;Check out my latest app, Smartlist!&lt;/p&gt;

&lt;p&gt;Smartlist is a free home inventory app that lets you keep track of what you have in your home, and helps you save money. Access your inventory on any device!&lt;/p&gt;

&lt;p&gt;Key features: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep track of your home's inventory&lt;/li&gt;
&lt;li&gt;Recipe generator&lt;/li&gt;
&lt;li&gt;Shopping List&lt;/li&gt;
&lt;li&gt;Todo List&lt;/li&gt;
&lt;li&gt;Finance Tracker&lt;/li&gt;
&lt;li&gt;Encrypted items, database, tasks, everything!&lt;/li&gt;
&lt;li&gt;Home maintenance tips&lt;/li&gt;
&lt;li&gt;Custom rooms, categories, and more.&lt;/li&gt;
&lt;li&gt;Share items via WhatsApp, Email, or via a shareable link!&lt;/li&gt;
&lt;li&gt;Notes and Document storage&lt;/li&gt;
&lt;li&gt;Smartlist Events

&lt;ul&gt;
&lt;li&gt;Collaborate on events together&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;API integration&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Unlimited items!!!&lt;/strong&gt;*&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Completely free&lt;/strong&gt; - No premium plans!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dorm mode&lt;/strong&gt; - For college students&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://smartlist.ga"&gt;https://smartlist.ga&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to view the source code? &lt;br&gt;
&lt;a href="https://github.com/Smartlist-App/Smartlist"&gt;https://github.com/Smartlist-App/Smartlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❤️ Please star it if you like my code&lt;/p&gt;

&lt;p&gt;If you have any feature requests, please let me know in the comments&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>css</category>
      <category>productivity</category>
    </item>
    <item>
      <title>What is an API?</title>
      <author>Gabrielle Davidson</author>
      <pubDate>Wed, 20 Oct 2021 00:30:11 +0000</pubDate>
      <link>https://dev.to/gabriellend/what-is-an-api-fl5</link>
      <guid>https://dev.to/gabriellend/what-is-an-api-fl5</guid>
      <description>&lt;p&gt;&lt;em&gt;API&lt;/em&gt;, or &lt;em&gt;Application Programming Interface&lt;/em&gt;, is one of the many acronyms thrown around in the programming world. It took me months to grasp the concept, not least because APIs can look very different from each other, depending on what they are trying to accomplish.&lt;/p&gt;

&lt;p&gt;The best, high-level conceptualization I've come up with that encapsulates them all is that &lt;strong&gt;APIs are a simplified way to interact with complex information&lt;/strong&gt;. That still sounds kind of vague. Let's look at some examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#real-world-example"&gt;
  &lt;/a&gt;
  Real world example
&lt;/h2&gt;

&lt;p&gt;The picture in the header of this article shows an old radio. We can actually think of this radio, with its three dials, as an API for transforming radio waves into sound and having some control over them.&lt;/p&gt;

&lt;p&gt;We don't have a way to directly access radio waves without a radio. Nor would we probably want to, that's a lot of complex information to handle. So, someone devised this simple &lt;em&gt;interface&lt;/em&gt; that gives us the ability to switch between different frequencies, control the volume, and turn the radio off and on.&lt;/p&gt;

&lt;p&gt;There is a lot more you could do with radio waves that has nothing to do with listening to music, but we don't need to be bogged down with all that stuff. The radio API just gives us what we need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-example"&gt;
  &lt;/a&gt;
  Programming example
&lt;/h2&gt;

&lt;p&gt;Similarly, in the programming world, we frequently want to easily incorporate data from other complex sources to make our projects more dynamic and useful.&lt;/p&gt;

&lt;p&gt;Let's say I'm making a weather app. How do I get the weather data to display on my home screen? Do I have to collect and maintain it all myself? Lucky for me, someone else has already done that and created an &lt;em&gt;API&lt;/em&gt; that allows me to access and use that data. It doesn't have physical dials but there are instructions on how to use it and it only gives me what I need, not the hoards of information that come with monitoring the weather, just like the radio.&lt;/p&gt;

&lt;p&gt;This is great news! Not only do I not have to collect my own data, I also don't have to spend an inordinate amount of time sifting through someone else's data. This saves me a lot of time.&lt;/p&gt;

&lt;p&gt;It also allows the creator of the API to let other people use some of their data while keeping some private. This might be like how Pinterest provides an API for your website to use its icon to save something to a board without having to give you all of its user or proprietary information. You get to give your users the ability to harness the power of Pinterest and Pinterest gets to reach more people. It's a win-win for everyone!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-wonderful-world-of-apis"&gt;
  &lt;/a&gt;
  The wonderful world of APIs
&lt;/h2&gt;

&lt;p&gt;APIs are everywhere and there are all kinds. There is a &lt;a href="http://swapi.py4e.com/"&gt;Star Wars API&lt;/a&gt; and a &lt;a href="http://numbersapi.com/#42"&gt;number facts API&lt;/a&gt;. Large companies like &lt;a href="https://rapidapi.com/collection/facebook-apis"&gt;Facebook&lt;/a&gt; have APIs. Here is a &lt;a href="https://public-apis.xyz/"&gt;collection&lt;/a&gt; of a bunch of other APIs. Whatever you're looking for, there is probably an API for it. Once you use a few you realize that they all operate pretty much the same way, with maybe a few idiosyncrasies. You'll need to understand http requests and asynchronous javascript in order to fully work with APIs but hopefully this gives you a better understanding of what they even &lt;em&gt;are&lt;/em&gt;. And once you get used to them, they are a lot of fun!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Utilizando Alias para produtividade no terminal</title>
      <author>Marcelo Michels</author>
      <pubDate>Wed, 20 Oct 2021 00:12:47 +0000</pubDate>
      <link>https://dev.to/marcelomichels/utilizando-alias-para-produtividade-15in</link>
      <guid>https://dev.to/marcelomichels/utilizando-alias-para-produtividade-15in</guid>
      <description>&lt;p&gt;Utilizar o terminal faz parte do dia a dia de todo programador, muitas vezes o uso desse terminal é para realizar ou executar quase sempre os mesmos comandos, alguns deles podem ser mais simples ou mais complexos. Desta forma, o quão bom seria possuirmos atalhos para esses comandos? Vamos ver abaixo como criar-los. &lt;/p&gt;

&lt;p&gt;OBS: Todo esse post foi testado apenas no linux e macOS, não sei como é o funcionamento de algo parecido no windows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alias"&gt;
  &lt;/a&gt;
  Alias
&lt;/h2&gt;

&lt;p&gt;O comando &lt;em&gt;alias&lt;/em&gt; (&lt;em&gt;apelido&lt;/em&gt; em português, eu particularmente também chamo de atalhos), permite definirmos um apelido para um determinado comando.   &lt;/p&gt;

&lt;p&gt;Podemos definir esse apelido dentro do arquivo &lt;code&gt;.profile&lt;/code&gt; (dependendo do seu sitema operacional pode ser &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.zshrc&lt;/code&gt; ou algum similar) no diretório raiz de um usuário.  &lt;/p&gt;

&lt;p&gt;No meu caso vou editar o arquivo &lt;code&gt;.zshrc&lt;/code&gt; e adicionar no final dele a linha abaixo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ola&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"echo 'Isso foi impresso utilizando alias'"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após editar e salvar o arquivo, no terminal digite o comando abaixo para que ele considere as ultimas alterações realizadas no arquivo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depois disso podemos testar se o apelido vai funcionar, então digite apenas &lt;code&gt;ola&lt;/code&gt; no terminal para ver o que acontece, no meu caso o resultado foi o mostrado abaixo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mm@MacBook-Pro-de-Marcelo ~ % ola
Isso foi impresso utilizando alias
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pronto, já vimos na prática como criar um apelido para um determinado comando, mas agora vamos utilizar esses atalhos para coisas mais interessantes e uteis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atalhos-git"&gt;
  &lt;/a&gt;
  Atalhos git
&lt;/h2&gt;

&lt;p&gt;Os atalhos que mais utilizo no meu terminal são do git, vou deixar abaixo todos eles, sendo que cada pessoa pode modificar os atalhos conforme o seu gosto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git status"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gita&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git add --all"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git commit -m"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitac&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gita &amp;amp;&amp;amp; gitc"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitamend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gita &amp;amp;&amp;amp; git commit --amend &amp;amp;&amp;amp; git push -f"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git push"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitacp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gitac &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;push&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; gitp"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git fetch --all"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitfp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gitf &amp;amp;&amp;amp; git pull"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git log --pretty=format:'%C(yellow)%cr %C(cyan)%H %C(green)%an %C(blue)%d %C(white)%s'"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitche&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git checkout"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitchemaster&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git checkout master"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitchedevelop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git checkout develop"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitchenew&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git checkout -b"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git merge"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitdelbranchlocal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git branch -d"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitdelbranchremote&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git push origin --delete"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git branch -a"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gittag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git tag"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gittagpush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git push origin --tags"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isso também ajuda para quando esquecemos de algum comando não precisar pesquisar por ele em outros lugares.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atalhos-npm"&gt;
  &lt;/a&gt;
  Atalhos npm
&lt;/h2&gt;

&lt;p&gt;Outra ferramenta que utilizo bastante é o npm, desta forma também tenho uma série de atalhos para ele.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"npm run"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nrd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"npm run dev"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nrt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"nr test"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nrcopen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"brave-browser coverage/lcov-report/index.html"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nrc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"npm run test:coverage"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nrco&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"nrc &amp;amp;&amp;amp; nrcopen"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;covo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"nrco"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nrb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"nr build"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"npm start"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ni&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"npm install"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"npm uninstall"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;npmrmi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"rm -rf node_modules &amp;amp;&amp;amp; rm -f package-lock.json &amp;amp;&amp;amp; npm i"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#atalhos-ssh"&gt;
  &lt;/a&gt;
  Atalhos ssh
&lt;/h2&gt;

&lt;p&gt;Sempre que preciso conectar em uma maquina ou servidor por ssh, preciso lembrar ou buscar qual o IP da maquina em algum outro lugar. Então também resolvi esse problema utilizando uma outra sessão de atalhos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sshProjetoHomolog&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ssh homologUser@192.168.1.100"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sshProjetoProd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ssh prodUser@192.168.1.101"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sshGitlab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ssh gitlabUser@192.168.1.102"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#atalhos-vs-code-e-docker"&gt;
  &lt;/a&gt;
  Atalhos VS Code e Docker
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;cdProjeto&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cd ~/developer/projeto"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;cdProjetoDocker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjeto &amp;amp;&amp;amp; cd scripts/docker"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;cdProjetoFront&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjeto &amp;amp;&amp;amp; cd projeto-frontend"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;cdProjetoServer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjeto &amp;amp;&amp;amp; cd projeto-server"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;cdProjetoWorker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjeto &amp;amp;&amp;amp; cd projeto-worker"&lt;/span&gt;

&lt;span class="c"&gt;# Abre no vscode o projeto&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoOpen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjeto &amp;amp;&amp;amp; code projeto.code-workspace"&lt;/span&gt;

&lt;span class="c"&gt;# Build total ou parcial &lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoBuild&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjetoDocker &amp;amp;&amp;amp; docker-compose -f docker-compose.local.yml build --no-cache"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoBuildServer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"projetoBuild projeto-server"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoBuildWorker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"projetoBuild projeto-worker"&lt;/span&gt;

&lt;span class="c"&gt;# Execução total ou parcial&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoRun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjetoDocker &amp;amp;&amp;amp; docker-compose -f docker-compose.local.yml up"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoRunServer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"projetoRun projeto-server"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoRunWorker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"projetoRun projeto-worker"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoRunFront&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjetoFront &amp;amp;&amp;amp; ns"&lt;/span&gt;

&lt;span class="c"&gt;# Build and Run&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoBuildAndRun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjetoDocker &amp;amp;&amp;amp; projetoBuild &amp;amp;&amp;amp; projetoRun"&lt;/span&gt;

&lt;span class="c"&gt;# stop&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoStop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjetoDocker &amp;amp;&amp;amp; docker-compose -f docker-compose.local.yml down"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;compare a enorme diferença entre digitar todos os comandos na mão&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/developer/projeto/scripts/docker
docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; docker-compose.local.yml build &lt;span class="nt"&gt;--no-cache&lt;/span&gt;
&lt;span class="c"&gt;# Esperar a build terminar&lt;/span&gt;
docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; docker-compose.local.yml up

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Substiindo todos os comandos acima por um atalho:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;projetoBuildAndRun
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As vezes o tempo de espera é o maior vilão, pois enquando gera a build vc vai pro navegador ou pra caixa de e-mails e quando volta terminal esta ocioso esperando pelo próximo comando.  &lt;/p&gt;

&lt;p&gt;Pode bater o enter e ir fazer um café e quando voltar tudo vai estar OK, sem perca de tempo com terminal ocioso na espera pelo próximo comando.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dica-extra"&gt;
  &lt;/a&gt;
  Dica extra
&lt;/h2&gt;

&lt;p&gt;Eu mantenho um repositório privado no meu github com alguns comandos de setup e instação, para quando eu formatar minha maquina possa buscar esses comandos e scripts de uma forma bem rápida. Também passei a adicionar dentro desse repositório um arquivo que contem todos os meus alias, desta forma eu apenas importo o arquivo &lt;code&gt;.myCustomAlias&lt;/code&gt; de dentro do meu repositório lá no arquivo &lt;code&gt;.zshrc&lt;/code&gt;, para fazer essa importação basta adicionar a linha abaixo no arquivo &lt;code&gt;.profile&lt;/code&gt; ou &lt;code&gt;.zshrc&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/path-to-my-repo/.myCustomAlias
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Espero que tenha ajudado e inspirado vocês a criarem seus próprios atalhos, apelidos, aliases (como preferirem chamar).&lt;/p&gt;

</description>
      <category>ptbr</category>
      <category>braziliandevs</category>
      <category>productivity</category>
      <category>terminal</category>
    </item>
    <item>
      <title>Creating Data Structures with Array.reduce()</title>
      <author>Garrick Crouch</author>
      <pubDate>Wed, 20 Oct 2021 00:05:06 +0000</pubDate>
      <link>https://dev.to/localpathcomp/creating-data-structures-with-arrayreduce-13f</link>
      <guid>https://dev.to/localpathcomp/creating-data-structures-with-arrayreduce-13f</guid>
      <description>&lt;p&gt;I recently saw an older youtube video on using array.reduce to build data structures on the fly in ways that you may find surprising or unintuitive. Normally we always think of reduce when it comes to doing math on array elements or something similar, and while that is a great use case, lets explore some of the more unique ways leverage this array method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-object-from-an-array"&gt;
  &lt;/a&gt;
  Create An Object From An Array
&lt;/h3&gt;

&lt;p&gt;To do this you could use any old loop, but lets say you need to build an object of objects, with the properties equal to one of the objects property values, eg.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this is the data we have...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New Post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jeff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-05-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Newer Post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sabrina&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-05-02&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Newest Post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-05-02&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fourth Post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-03-02&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fifth Post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sabrina&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-08-09&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// this is the structure we want...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;jeff&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-05-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;sabrina&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;mike&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically we want build an object containing author objects that each contain an array of any posts they've written. A map won't do because we don't really want to return an array of course (contrived on purpose for the example) and we would like to easily aggregate them into the appropriate arrays keyed by the name. Also the specification says we should rename the &lt;code&gt;date&lt;/code&gt; to &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So how could we reduce this array to the data structure specified in a functional way and it make sense to the reader of our code?&lt;/p&gt;

&lt;p&gt;Remember that array.reduce will return any value you want it to...aha...so we want to return an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This above is the function we'll use. Notice the initialValue argument. That'll set the stage for our returned value.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-reduce"&gt;
  &lt;/a&gt;
  Let's Reduce
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our basic setup. We'll pass &lt;code&gt;acc&lt;/code&gt; or the accumulated value and the &lt;code&gt;curr&lt;/code&gt; or current array element into the callback, returning an expression, which is an object literal. Our default value you may notice is an empty object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
    &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()]?.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]),&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our workhorse above. We'll step through each stage of working with the data. It's done in a functional way meaning we're copying data, never overwriting it.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#first-we-spread-the-value-of-raw-acc-endraw-into-the-object-that-were-returning"&gt;
  &lt;/a&gt;
  First, we spread the value of &lt;code&gt;acc&lt;/code&gt; into the object that we're returning
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// more stuffs&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#second-well-use-the-computed-value-to-set-our-property-name-of-an-author"&gt;
  &lt;/a&gt;
  Second, we'll use the computed value to set our property name of an author
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// more stuffs&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way it ensures we're preserving any objects that don't match the computed property name in the carry. We use the toLowerCase bc the spec says it wants lowercase author names as the object property.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#third-well-set-and-spread-on-the-posts-property-of-a-computed-name-author-object"&gt;
  &lt;/a&gt;
  Third, we'll set and spread on the posts property of a computed name author object
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
    &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="c1"&gt;// we'll use a short circuit since the posts property won't e &lt;/span&gt;
     &lt;span class="c1"&gt;// exist on the first of any given author, just spread an &lt;/span&gt;
     &lt;span class="c1"&gt;// empty array&lt;/span&gt;
      &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()]?.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]),&lt;/span&gt;
     &lt;span class="c1"&gt;// add our object with the specified data mapping&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#success"&gt;
  &lt;/a&gt;
  Success
&lt;/h5&gt;

&lt;p&gt;If we serialize the result and pretty print it we'd get....&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jeff"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"New Post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-05-01"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sabrina"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Newer Post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-05-02"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Fifth Post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-08-09"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"mike"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Newest Post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-05-02"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Fourth Post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-03-02"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please leave me any thoughts on optimization or better ways to accomplish the given task. The primary focus of this is to get people thinking about array.reduce in interesting ways but I always enjoy learning new or better ways to do stuff.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>React Typescript conditional rendering using objects</title>
      <author>Ahmedammarr</author>
      <pubDate>Tue, 19 Oct 2021 23:34:10 +0000</pubDate>
      <link>https://dev.to/ahmeddammarr/react-typescript-conditional-rendering-using-objects-156l</link>
      <guid>https://dev.to/ahmeddammarr/react-typescript-conditional-rendering-using-objects-156l</guid>
      <description>&lt;p&gt;Lately, I've been looking for a better way to write clean conditional rendering code instead of ternary and &amp;amp;&amp;amp; operators and even if statements, because sometimes they can be confusing and I found that I can write the same functionality with objects, it makes the code more readable. let's see how we can write a well-typed object to render a component based on the parent component state and props&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Products&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;&lt;span class="nx"&gt;ProductsStateEnum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;ReactElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_ProductsState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProductsState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ProductsState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;ProductsStateEnum&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;ReactElement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Loader&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;    &lt;span class="na"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Badge&lt;/span&gt; &lt;span class="nx"&gt;bg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;danger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Somethig&lt;/span&gt; &lt;span class="nx"&gt;Went&lt;/span&gt; &lt;span class="nx"&gt;Wrong&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Badge&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ProductCard&lt;/span&gt;
              &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row p-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ProductsState&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_ProductsState&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We notice here that we didn't write any if statement or any operator, based on the state the component will render the React component with key that's equal to the &lt;strong&gt;_ProductsState&lt;/strong&gt;,  tell me if you know another way to write readable conditional rendering options!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Moving Material Dialog Lifecycle Into NgRx Effects</title>
      <author>Chandler Baskins</author>
      <pubDate>Tue, 19 Oct 2021 23:02:37 +0000</pubDate>
      <link>https://dev.to/this-is-angular/moving-material-dialog-lifecycle-into-ngrx-effects-5d99</link>
      <guid>https://dev.to/this-is-angular/moving-material-dialog-lifecycle-into-ngrx-effects-5d99</guid>
      <description>&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@jxb511?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;John Bakator&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/effects?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ngrx-effects"&gt;
  &lt;/a&gt;
  NgRx Effects
&lt;/h2&gt;

&lt;p&gt;Effects are a powerful model for handling side effects in your application. Commonly this means when you are making a HTTP request in a NgRx powered application you will use an effect to handle the communication with the service but they can do so much more than that. And frankly this is what I usually used them for until I read &lt;a href="https://timdeschryver.dev/blog/start-using-ngrx-effects-for-this#handling-the-flow-of-a-angular-material-dialog"&gt;https://timdeschryver.dev/blog/start-using-ngrx-effects-for-this#handling-the-flow-of-a-angular-material-dialog&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;I became intrigued by the idea of offloading some component material dialog code into the effect and started viewing the life cycle as a series of events and using the effect to talk to other effects. This can keep components more simple and pure where they use selectors to read data and dispatch actions in response to events. When components are pure and simple this makes them easier test and easier to change when future requirements are different. This was a motivator for me to start looking down this path but first I wanted to make sure to follow some common best practices and make sure that I wasn't creating an anti-pattern.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-effects-best-practices"&gt;
  &lt;/a&gt;
  Some Effects Best Practices
&lt;/h2&gt;

&lt;p&gt;This isn't an exhaustive list but rather some tidbits of gold I capture from the worlds most interesting man, Mike Ryan from the NgRx Core Team from this episode of The Angular Show &lt;a href="https://open.spotify.com/episode/6YSwV2WqiZddt2F16jTQ1M?si=_BqOD8fVRYyIOEZuEdV3ug&amp;amp;dl_branch=1"&gt;https://open.spotify.com/episode/6YSwV2WqiZddt2F16jTQ1M?si=_BqOD8fVRYyIOEZuEdV3ug&amp;amp;dl_branch=1&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Effects should be the only thing that calls your HTTP Services&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This one is straight forward and makes alot of sense. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use the right Higher Order Mapping Operator and if you don't know use concatMap&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a good one. But I would also point out that you may not need one if your not returning inner Observables and beware of backpressure.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need store information in your effect use concatLatestFrom&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This one is probably one of the most important. The &lt;code&gt;concatLatestFrom&lt;/code&gt; operator handles store selectors (Observables) in a more intelligent way. It will only subscribe to them when your effect is processing it's action (lazy). The &lt;code&gt;withLatestFrom&lt;/code&gt; operator will always subscribe to the selector forcing the selector to stay hot and compute even if your not in that part of the app. This operator is almost a drop in replacement and a easy performance gain. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Break up big effects by creating multiple smaller ones that listen to the same action&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The actions stream which effects subscribe to multi casts its values, the &lt;code&gt;ofType&lt;/code&gt; operator helps us decide which one we are interested in for this effect. So with that being said make many small operators that handle one side effect.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Effects talk to other Effects via Actions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not really a best practice but its good to know. NgRx is all about indirection and Actions are the communication mechanism that drives communication through the indirection. This is also how Effects talk to Reducers. Important to note that Reducers don't talk but only listen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-material-dialog-lifecycle"&gt;
  &lt;/a&gt;
  Common Material Dialog Lifecycle
&lt;/h2&gt;

&lt;p&gt;Now that we have a good understanding of effects lets look at a common material dialog life-cycle. &lt;/p&gt;

&lt;p&gt;To interact with Material Dialogs you'll need to inject it into the host(?) component. With that service comes methods for interacting with the dialog such as opening it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//app.component.ts&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`...`&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MatDialog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; 
    &lt;span class="c1"&gt;//click handler when we wanna open the dialog&lt;/span&gt;
    &lt;span class="nx"&gt;openDialog&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;configData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;//whatever we wanna give our dialog&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dialogRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;configData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;dialogRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;afterClosed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doSomethingWithData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//dialog-component.component.ts&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`...`&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DialogComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;dialogRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MatDialogRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DialogOverviewExampleDialog&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MAT_DIALOG_DATA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DialogData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this is a pretty contrived example but it illustrates simply what the life-cycle is usually like with a dialog. Breaking it down we inject the service for Mat Dialog. Then we have a click handler method that handles the button click and opens the dialog with data we want to give the dialog component. In the Dialog Component we inject a reference to the opened dialog and inject a Token that carries the data that we passed the dialog. Then when the user wants to save we close the dialog and give it some data. &lt;/p&gt;

&lt;p&gt;Back in the host component when we call open that returns the dialog reference of the opened dialog. This reference has a after closed method on it that returns an observable that carries the data that we gave it when we called close on the dialog reference in the Dialog Component. With this data we do whatever we want usually somewhere downstream making a HTTP call that posts the data back to the server. &lt;/p&gt;

&lt;p&gt;Now this is a contrived example but it can be a bit confusing. In the &lt;code&gt;openDialog&lt;/code&gt; method on the component we do more than just open the dialog. We handle the whole life-cycle of the dialog and handle the end result which is getting data back from the dialog and then doing something with. This can make testing this component and this method a little more complicated than it could be.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KxVAm8Vh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lh7l0naq5h9uzi5dobqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KxVAm8Vh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lh7l0naq5h9uzi5dobqg.png" alt="Traditional Material Dialog life-cycle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#viewing-the-life-cycle-as-a-series-of-events-to-be-handled-by-effects"&gt;
  &lt;/a&gt;
  Viewing the Life Cycle as a series of events to be handled by Effects.
&lt;/h2&gt;

&lt;p&gt;Now that we know our prerequisites its time to get into the point of this post. We know the life-cycle of a dialog which is open ⇒ interaction(save or cancel) ⇒ dialog close so lets model these life-cycles with the appropriate actions first&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//dialog.actions.ts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dialogOpened&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Home Page] Dialog Opened&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dialogSaved&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Home Page] Dialog Saved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;DataToSave&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dialogClosed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Home Page] Dialog Closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;DataToClose&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Definitely don't type your stuff as any if you can avoid it. Although I couldn't find a way to type components and the data could look different depending on your situation&lt;/p&gt;

&lt;p&gt;Next we create our effects that are listening for these actions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//dialog.effects.ts&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DialogEffects&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Actions&lt;/span&gt;&lt;span class="p"&gt;){}&lt;/span&gt;

    &lt;span class="nx"&gt;saveDataSuccess$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DataActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SaveDataSuccess&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;DialogActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogClosed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nx"&gt;dialogOpened$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogOpened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;),{&lt;/span&gt;&lt;span class="na"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;dialogSaved$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogSaved&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;DataActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SaveData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nx"&gt;dialogClosed$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogClosed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;snackBarActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;savedSuccessfully&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two important things of note here. The first is the &lt;code&gt;{dispatch:false}&lt;/code&gt; on the &lt;code&gt;dialogOpened$&lt;/code&gt; effect. We use this to tell NgRx that we are not going to have any actions coming out from this effect. If we didn't use this we would end up in a infinite loop with a warm computer and a crashed browser. Second notice that I have an effect that is listening for the Success action that would have been dispatched upon completion of a successful HTTP request. We use this to dispatch the &lt;code&gt;dialogClose&lt;/code&gt; action because we don't wanna close our dialog until the data has been saved or at all if there is an error. &lt;/p&gt;

&lt;p&gt;Finally in our components its as simple as dispatching the appropriate actions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//app.component.ts&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`...`&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; 
    &lt;span class="c1"&gt;//click handler when we wanna open the dialog&lt;/span&gt;
    &lt;span class="nx"&gt;openDialog&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogOpened&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//dialog-component.component.ts&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`...`&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DialogComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MAT_DIALOG_DATA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DialogData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogSaved&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1QBqEJv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3bxzrqu959ebbku4ss7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1QBqEJv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3bxzrqu959ebbku4ss7.png" alt="Dialog life-cycle with effects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-is-now-a-bit-easier"&gt;
  &lt;/a&gt;
  Testing is now a bit easier
&lt;/h2&gt;

&lt;p&gt;Now that we have offloaded some code from our components to our effects testing is a bit easier. We've been able to remove some dependencies from our component so we don't have to mock them in the tests anymore and to unit test these methods we simply assert that the dispatch action was called with what we expect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DialogComponent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DialogComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ComponentFixture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DialogComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MockStore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configureTestingModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ReactiveFormsModule&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DialogComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MAT_DIALOG_DATA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;useValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;provideMockStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;compileComponents&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fixture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MockStore&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detectChanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should dispatch save action with form data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storeSpy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dispatch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeSpy&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogSaved&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expectedData&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again this is a contrived example but I hope it can demonstrate how offloading code from our components makes them more easier to test. When we make our components more easier to test we make the barrier to entry lower for testing. Asserting the dispatch method was called with the appropriate action could be the only thing for this method anything else needs to be handled by the effects unit test. Here is what our effect test could look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DialogEffects&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;actions$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Action&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configureTestingModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;provideMockActions&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dialogSaved$&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should dispatch action to save data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;actions$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogSaved&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
            &lt;span class="nx"&gt;dialogSaved$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DataActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saveData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To close I like Tim find writing the life-cycle of a mat dialog a lot easier when its moved to the effect model. With the  compos-ability of effects you can easily build complex features. This offloads some logic into our effect model keeping our components lean and simple and easy to test.&lt;/p&gt;

</description>
      <category>angular</category>
    </item>
    <item>
      <title>CSS (Cascading Style Sheet)</title>
      <author>BeautyJames</author>
      <pubDate>Tue, 19 Oct 2021 22:37:15 +0000</pubDate>
      <link>https://dev.to/beautyjames/css-cascading-style-sheet-28o3</link>
      <guid>https://dev.to/beautyjames/css-cascading-style-sheet-28o3</guid>
      <description>&lt;p&gt;Hi everyone, it’s me again, Beauty James. In my previous articles, I discussed frontend and its languages. So today, I’ll be talking about CSS, another Frontend language. As we move further, we will discuss the following;&lt;br&gt;
o   What is CSS?&lt;br&gt;
o   Types of CSS&lt;br&gt;
o   Effect of Priority on CSS&lt;br&gt;
o   CSS Frameworks&lt;br&gt;
o   What is CSS used for?&lt;br&gt;
What is CSS?&lt;br&gt;
CSS ( Cascading Style Sheet) is a frontend language used to describe the presentation of web pages including background colors, font sizes and layouts. The basic function of CSS is to design the view for html, but it can also be used to display html in various types of devices such as printers and different types of screen sizes.&lt;br&gt;
Types of CSS&lt;br&gt;
There are generally three types of CSS which are stated below;&lt;br&gt;
o   Inline CSS: This is used to style a specific html element and add a style attribute to each html tag without using selectors. It is used whenever the users requirements are very small, as it will only affect a single element. Inline CSS in html is useful in web development, although managing a website may be difficult if the developer chooses to use only inline CSS.&lt;br&gt;
Pros of inline CSS&lt;br&gt;
 It allows the creation of CSS rules on html pages.&lt;br&gt;
 Different documents cannot be created and uploaded.&lt;br&gt;
Cons of inline CSS&lt;br&gt;
 Page size and download time of web pages could be affected because it styles multiple elements simultaneously.&lt;br&gt;
 It must be specified on every html tag which makes the code quite large and complex and is very time consuming, making it one of the least best options for programmers.&lt;/p&gt;

&lt;p&gt;o   Internal CSS: This is an effective way to style single pages because it has style tag in the head section of the html document. Internal CSS is used when the user wants the style to be used in the complete html body because it performs action on the entire html body. &lt;br&gt;
Pros of Internal CSS&lt;br&gt;
 Internal CSS cannot upload multiple files when the user adds the code with html page.&lt;br&gt;
Cons of Internal CSS&lt;br&gt;
 Adding documents in html will reduce the page size and loading time of the web page.&lt;/p&gt;

&lt;p&gt;o   External CSS: In external CSS, the web pages are linked to an external CSS file created by a text editor. It is used whenever users have many html attributes. There are basically two methods for creating CSS file; The first, is to write the CSS code in Notepad and save it as .css file while the second is to directly add the style sheet in your Solution Explorer and direct visual studio to use it on your html page.&lt;br&gt;
Pros of External CSS&lt;br&gt;
 Files are smaller in size and have a cleaner structure.&lt;br&gt;
 In external CSS, the same .css file is used for multiple web pages.&lt;br&gt;
Cons of external CSS&lt;br&gt;
 Uploading many CSS files can prolong the download time of a website.&lt;br&gt;
 The external CSS has to be loaded first before the pages can be delivered directly.&lt;br&gt;
Effects of Priority on CSS&lt;br&gt;
Bear in mind that when looking at the properties of CSS, the order of priority is very necessary. Inline CSS has greater priority compared to the internal and external types. Internal comes next, and then the external CSS which has least priority. In other words, Inline&amp;gt;Internal&amp;gt;External. The following are the effects of priority on the different types of CSS:&lt;br&gt;
 Any styles defined in the internal and external style sheets are overridden by Inline styles since it has the greatest priority.&lt;br&gt;
 Internal CSS will override the styles in the external style sheet because it stands second in place in the priority list.&lt;br&gt;
 External style sheet are applied for html tags if there are no styles defined either in Inline or internal style sheets.&lt;br&gt;
CSS Frameworks&lt;br&gt;
CSS Frameworks are tools used by web developers to make their job easier. It gives developers the option to use predefined codes instead of creating new ones from scratch and helps maintain synergy across websites and web pages, saving you the time and energy of trying to remember your specifications for each element. Frameworks are also very helpful when creating themes for use in more than one project.&lt;br&gt;
Though frameworks make jobs easier for web developers, it also has its downsides to it. For example, for every new kind of design you want to implement, you would have to learn a new framework thereby, restricting the flow and designs of developers. It is also a little ambiguous for beginners, as a result, only senior developers find them intriguing to use. &lt;br&gt;
There are 2 main examples of CSS Frameworks (Bootstrap and Foundation) used by frontend developers which will be discussed below;&lt;br&gt;
Bootstrap:&lt;br&gt;
Bootstrap was the first framework that made it possible for responsive deign to be carried out on smaller screens. The design automatically adjusts for different screens, all you need to do is to include the relevant Bootstrap classes.&lt;br&gt;
Pros of Bootstrap&lt;br&gt;
o   Pre-built items and community support will always be available in numerous amounts due to the fact that the number of website layouts, themes, UI components and admin panels built using Bootstrap is  amazing.&lt;br&gt;
o   Less cross browser bugs.&lt;br&gt;
o   Light weight and customizable&lt;br&gt;
o   UI components like navigation fps, cards, buttons, badges, modals, and lots more are offered by Bootstrap.&lt;br&gt;
o   Free and professional templates&lt;br&gt;
o   CSS is backed by Twitter making it easier to gain trust from enterprise customers.&lt;br&gt;
o   It offers a great grid system&lt;br&gt;
Cons of Bootstrap&lt;br&gt;
o   Everything built with Bootstrap looks very much alike, so heavy customization is needed while creating a design.&lt;br&gt;
o   Styles on bootstrap are verbose, leading to a lot of output in html which is not needed.&lt;br&gt;
o   Files created by Bootstrap can be huge in size thereby slowing down things for the user quite heavily as well as draining battery.&lt;/p&gt;

&lt;p&gt;Foundation:  Foundation is a framework that makes it easier to design apps, emails and responsive websites that looks amazing on devices. It provides its users with JavaScript, html, CSS that can be built upon.&lt;br&gt;
Pros of foundation&lt;br&gt;
o   It is customizable and the website doesn’t look familiar to other websites created by foundation.&lt;br&gt;
o   It is a modular collection of tools with command line interface that aims at solving any kind of frontend problems.&lt;br&gt;
o   Training courses and professional consulting are offered for large customers as a form of support.&lt;br&gt;
Cons of Foundation &lt;br&gt;
o   Due to  how complex foundation is, it often takes time for beginners to learn and use it. &lt;br&gt;
o   It has less community support compared to Bootstrap.&lt;br&gt;
o   It offers less supports for QA sites and troubleshooting issues.&lt;/p&gt;

&lt;p&gt;UI kit: UI kit is a lightweight modular framework that allows you import only the  features you need, creating fast and powerful web interfaces. It is mostly chosen by users because it offers minimalistic but elegant designs with clean cuts.&lt;br&gt;
Pros of UI kit&lt;br&gt;
o   There are ready-to-use themes available in the official website.&lt;br&gt;
o   UI kit can be easily customized and extended to fit the need of the designer.&lt;br&gt;
o   The code is pretty clean and follows well defined conventions.&lt;br&gt;
Cons of UI kit&lt;br&gt;
o   Classes of UI kit are often complex making it complicated to read and obtain desired results.&lt;br&gt;
o   Bug fixes are often slow and selective.&lt;br&gt;
o   UI kit is not very popular and as a result, it is difficult for users to find learning resources.&lt;br&gt;
o   Components and styles are predetermined, making it difficult to stun end users with uniqueness or a specific look.&lt;/p&gt;

&lt;p&gt;Skeleton: Skeleton is at times not even considered a CSS framework.  It is boilerplate, and was designed for small projects that requires a little bit more than layouts and positioning.&lt;br&gt;
Pros of skeleton&lt;br&gt;
o   It is a very simple framework and as a result, is very easy for beginners to learn.&lt;br&gt;
o   It suits Devices with smaller resolutions &lt;br&gt;
o   Clean and beautiful codes&lt;br&gt;
o   It is very good for carrying out small projects&lt;br&gt;
Cons of skeleton&lt;br&gt;
o   It takes longer to develop compared to other CSS frameworks.&lt;br&gt;
o   It is not suited for easy prototyping.&lt;br&gt;
o   The templates are limited and offers only one demo at a time.&lt;/p&gt;

&lt;p&gt;Milligram: Milligram is a framework that allows its users to change the design however they want. It is under 2kb in size and was designed for speed and productivity.&lt;br&gt;
Pros of milligram&lt;br&gt;
o   Users can start with a clean slate when creating interfaces, improving performance and productivity.&lt;br&gt;
o   Milligram doesn’t come with any default styles so users don’t have to reset or override properties when customizing.&lt;br&gt;
o   It is very easy to learn and set up, so it is very convenient for beginners.&lt;br&gt;
Cons of milligram&lt;br&gt;
o   Milligram has a small community so finding support won’t be as easy as other popular frameworks.&lt;br&gt;
o   It doesn’t possess pre-made or template-like features so it is only convenient for users who want to apply a specific design.&lt;/p&gt;

&lt;p&gt;Materialize: This is a modern and responsive frontend framework designed by Google that is based on material design and aimed at  making its users productive as fast as possible. Materialize consists of only a few components and classes to learn as well as customization options.&lt;br&gt;
Pros of materialize&lt;br&gt;
o   This framework has mobile-like components which is used to create progressive web applications.&lt;br&gt;
o   It makes use of material designs which make developers creations easy to use.&lt;br&gt;
o   It makes use of animation which provides visual feedback to users, making it easier for developers to work with.&lt;br&gt;
Cons of Materialize&lt;br&gt;
o   Due to its strict design language, it is only good with users that are working with material design.&lt;br&gt;
o   Materialize CSS is not flexible enough to use in some situations  because it only uses google components.&lt;br&gt;
o   It is a very large framework, making it difficult for others to have and use it.&lt;br&gt;
o   The materialize community has no cooperate support.&lt;br&gt;
Bulma: Bulma is highly praised for its simple syntax and minimalistic yet aesthetic design. It comes with a small but very reliable and passionate community. Bulma for most users, has the most readable classes and is definitely easy to learn.&lt;br&gt;
Pros of Bulma&lt;br&gt;
o   Bulma comes with naming conventions which are easy to use and remember.&lt;br&gt;
o   Its default settings are so good that even if you don’t change them, you’ll end up with a clean and modern design for your webpage.&lt;br&gt;
o   Its default properties could be easily customized using SASS.&lt;br&gt;
o   It doesn’t include JavaScript features.&lt;br&gt;
Cons of Bulma&lt;br&gt;
o   Bulmas style is quite distinct and as a result we could end up with very similar-looking websites.&lt;br&gt;
o   Since the framework is fairly new, it has a small community.&lt;br&gt;
o   To alter the properties of the framework, the user will have to find that specific code and modify it by themselves.&lt;br&gt;
Pure: Pure is a set of small, responsive modules created by Yahoo that you can use in every web project. It makes creating columns a lot more flexible.&lt;br&gt;
Pros of Pure:&lt;br&gt;
o   Unlike most CSS frameworks, pure has a large community because it is supported by Yahoo.&lt;br&gt;
o   The framework is tiny and only takes up to 3.7kb (compressed) when all modules are used.&lt;br&gt;
o   It consists of pre-made, responsive components that are made for the modern web.&lt;br&gt;
o   Its reusable and responsive modules can be added to any web projects.&lt;br&gt;
Cons of Pure&lt;br&gt;
o   Pure is not convenient for less experienced developers as they need to create their own designs to make use of the framework.&lt;br&gt;
o   It has restrictions for choosing the templates and design patterns of the web design.&lt;/p&gt;

&lt;p&gt;Semantic UI: Semantic UI is a development framework that helps create beautiful, responsive design using human friendly html. It has nice looking layouts by default and up to 3000 different kinds of themes. Although it possesses features such as concise html, intuitive JavaScript and simplified debugging, it has one of the steepest learning curves and very strict conventions.&lt;br&gt;
Pros of semantic UI&lt;br&gt;
o   It makes use of semantic class name for its styling, making it easier for beginners to understand.&lt;br&gt;
o   Many users are satisfied with its futuristic and beautiful design.&lt;br&gt;
o   Its documentation is well written and easy to use.&lt;br&gt;
o   It has various UI components you may need for almost every project you will embark on.&lt;br&gt;
Cons of semantic UI&lt;br&gt;
o   Due to its extremely large file size, it is better to use specific modules and components.&lt;br&gt;
o   It is difficult for developers who are not familiar with JavaScript.&lt;br&gt;
o   It contains a lot of UI inaccuracies and has small number of classes.&lt;/p&gt;

&lt;p&gt;Tailwind CSS: Adam Wathan, the creator of tailwind often shared his thoughts on how utility-based CSS was always superior to semantic CSS but it wasn’t till 2019 that developers started to embrace his idea and adopting them into their codes. Tailwind never encourages its users to use the same design twice even if the features for each design is similar. If you are bored of your current CSS frameworks and you need a completely new approach to your work, Tailwind is definitely the new and radical framework you could always opt out to.&lt;br&gt;
Pros of Tailwind&lt;br&gt;
o   Developers do not have to override existing styles since it doesn’t come with pre-designed components.&lt;br&gt;
o   It allows developers to reuse their own custom components throughout their projects.&lt;br&gt;
o   It is a responsive and mobile friendly framework with rare bugs and breaks.&lt;br&gt;
o   It also offers thousands of built-in classes that do not require you to create designs from scratch.&lt;br&gt;
o   It is one of the fastest frameworks when it comes to styling html.&lt;br&gt;
Cons of Tailwind&lt;br&gt;
o   Due to the built-in classes, tailwind often takes time to learn.&lt;br&gt;
o   It lacks significant styling component and as a result, developers have to spend time implementing these features manually.&lt;br&gt;
o   Tailwind has a steep learning curve, making it not the best choice for developers.&lt;/p&gt;

&lt;p&gt;Tachyons: Tachyon is a fast loading, highly readable and lightweight framework. It achieves its super easy design system by keeping all of its codes in the html file through the use of single utility classes. It helps users understand  their project design patterns and promotes reusability through out their projects.&lt;br&gt;
Pros of Tachyons&lt;br&gt;
o   This framework allows users to create reusable properties to build diverse and flexible components.&lt;br&gt;
o   It includes many pre-made components too.&lt;br&gt;
o   It defines classes identically for each break point.&lt;br&gt;
Cons of Tachyons&lt;br&gt;
o   Tachyon is not as popular as most CSS frameworks and as a result, has a small community, making it harder for developers to find tutorials and materials on it.&lt;br&gt;
o   Some developers find it boring to use in the long run since it is said to be feature complete (new features are barely added).&lt;br&gt;
Uses of CSS&lt;br&gt;
Most web developers use CSS for one or all of the following reasons:&lt;br&gt;
 CSS is generally used for defining the style of webpages.&lt;br&gt;
 It makes it possible to control the presentation of html documents.&lt;br&gt;
 CSS helps define the loom and formatting of a document written in a markup language.&lt;br&gt;
 It makes it possible to change an entire website by just changing a single file.&lt;br&gt;
 It makes the maintenance of a website easier by providing a flexible look to the website that can be altered in a convenient way.&lt;br&gt;
 Through CSS, flash files and animations are created directly. &lt;br&gt;
  CSS frameworks can be used to develop online web-based application or community. &lt;br&gt;
 Social media based platforms inter-relate with CSS frameworks which makes updating the user interphase easier.&lt;br&gt;
CONCLUSION&lt;br&gt;
Although there are other types of framework languages used  by developers, each language has its own purpose and helps developers differently. From this article, I hope readers are able to understand what CSS is about and how it can be used for web development. Readers should bear in mind that;&lt;br&gt;
• CSS is independent of HTML and can be used with any XML based markup language.&lt;br&gt;
• CSS frameworks with more features and pre-made components are better suited for beginners while those that offer styling are often more convenient for experienced developers.&lt;br&gt;
• When using external CSS, a link to the CSS root file has to be mentioned in the html source file.&lt;br&gt;
• CSS is not exactly a programming language because it only determines the structure and style of a webpage. They do not contain any instruction like other programming languages.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Post to Dev.to &amp; Medium through API</title>
      <author>skino</author>
      <pubDate>Tue, 19 Oct 2021 22:35:41 +0000</pubDate>
      <link>https://dev.to/skino2020/post-to-devto-medium-through-api-4778</link>
      <guid>https://dev.to/skino2020/post-to-devto-medium-through-api-4778</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Over the past year i have started to enjoy Blogging and hopefully soon Vlogging, but one thing has driven me crazy whilst trying to drive more traffic to my site and twitter page was copying and pasting my posts to Hashnode, Medium and Dev.to..... enough was enough, time to setup the API posting&lt;/p&gt;

&lt;p&gt;First of all i need to say thank you to someone and also acknowledge where i found some help in order to get the Dev.to API working with my Laravel application.&lt;/p&gt;

&lt;p&gt;So first of all thanks to &lt;a href="https://twitter.com/tommountain_"&gt;Tom&lt;/a&gt;, a work colleague of mine who is only just starting to look at tech Twitter but is an absolute genius of web development!, Tom helps me daily without being judgemental and can build absolutely anything with Laravel!, hes a top bloke and you can all expect amazing things from him!&lt;/p&gt;

&lt;p&gt;The second person i want to give credit to is &lt;a href="https://dev.to/codybontecou"&gt;Cody Bontecou&lt;/a&gt; for writing the article i came across for posting to Dev.To via API, although it didn't give me the how, it definitely gave me the where to find the info to post to Dev.to via API.&lt;/p&gt;

&lt;p&gt;So without wasting anymore time lets get into how to post to Dev.to from a Laravel Application at the click of a button!.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devto"&gt;
  &lt;/a&gt;
  DEV.TO
&lt;/h3&gt;

&lt;p&gt;I've had two twitter accounts over the years... one that got hacked by someone who was pretending to be a very attractive Japanese woman looking for a "wealthy white man" to settle down with and my latest one. When i joined the "Tech Twitter" scene all i wanted to do was help people and learn from people... and a few of my first followers introduced me to &lt;a href="https://dev.towww,dev,to"&gt;Dev.to&lt;/a&gt;... i have since discovered Hashnode and Medium but Dev.to was "there for me" at the beginning so i'll be covering that first!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Lets get started!
&lt;/h3&gt;

&lt;p&gt;So first of all, Lets get our API keys from Dev.to go to at &lt;a href="https://dev.to/settings/account"&gt;https://dev.to/settings/account&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKvAcjBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/7o40HY8LkhlR7vZjaghqqaPqZ9NlKLzXX7HVwJgY.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKvAcjBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/7o40HY8LkhlR7vZjaghqqaPqZ9NlKLzXX7HVwJgY.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and scroll down to &lt;strong&gt;DEV Community API Keys&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zlXGOj3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/ZkF5d7NIq7BXZR7ucbQPS3lGTcG7RqdU4fHaGqOi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zlXGOj3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/ZkF5d7NIq7BXZR7ucbQPS3lGTcG7RqdU4fHaGqOi.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will need this soon.&lt;/p&gt;

&lt;p&gt;Now i could go through the testing stage of this API using the Insomnia app but i'm going straight into the Laravel bit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#livewire-component"&gt;
  &lt;/a&gt;
  Livewire Component
&lt;/h3&gt;

&lt;p&gt;I'm using Livewire as i want to be able to add some more components to the admin page i'm setting up.&lt;/p&gt;

&lt;p&gt;so open up your terminal and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan livewire:make SocialPosts

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(I'm calling it SocialPost.php as we will expand to use Hashnode and Medium in the same controller)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This will make you a view and a controller.... in this tutorial we are going to look at the Controller more than the view... you can do what ever you want with the view, but the Controller follows a pretty solid process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-view-component"&gt;
  &lt;/a&gt;
  The View component...
&lt;/h3&gt;

&lt;p&gt;as previously stated this consists of two parts... a view and a Livewire controller. so in my Example i want to see the posts on my website that i can post to Dev.to....&lt;/p&gt;

&lt;p&gt;I'm using the amazing &lt;a href="https://github.com/themsaid/wink"&gt;Laravel Wink&lt;/a&gt; so i want to use that to grab my latest 3 posts and display them on my "admin page"&lt;/p&gt;

&lt;p&gt;the Livewire controller comes with a function as standard which is called render... this is the first function hit when the &lt;code&gt;&amp;lt;livewire:dev-to-posts/&amp;gt;&lt;/code&gt; is called, and the information displayed is based on the content of the "render" function.&lt;/p&gt;

&lt;p&gt;so here is the view i get when i log into my admin screen on my blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_WA9yakC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/XPcu5ZTDW4nziHFygLm7JotXLg7t4AHxSBy8B3we.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_WA9yakC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/XPcu5ZTDW4nziHFygLm7JotXLg7t4AHxSBy8B3we.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and the controller function to do this is incredibly simple and looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function render()
{
    $latestPost = WinkPost::with("tags")
        -&amp;gt;live()
        -&amp;gt;orderBy("publish_date", "DESC")
        -&amp;gt;simplePaginate(3);
    return view('livewire.dev-to-posts', [
        "posts" =&amp;gt; $latestPost,
    ]);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what's this function doing?&lt;/p&gt;

&lt;p&gt;Well quite simply its looking for all WinkPost with Tags that are live (Published) and orders it by the latest post first and then paginates it by 3 posts.&lt;/p&gt;

&lt;p&gt;It the returns the view with the &lt;code&gt;$posts&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;The front end is just as simple... We simply &lt;a class="mentioned-user" href="https://dev.to/foreach"&gt;@foreach&lt;/a&gt;
 through the posts passed through to the blade and display the posts to the admin, the Blade code is as follows &lt;em&gt;(i have removed the classes as they are all custom tailwind classes and would be irrelevant to this tutorial). Also i know the Anchor Tags don't have anything on them yet, were going to update that shortly.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@foreach($posts as $post)
    &amp;lt;section class="mb-2 mt-2"&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div class="flex flex-wrap"&amp;gt;
                &amp;lt;div class="w-full lg:w-3/4"&amp;gt;
                    &amp;lt;div class="relative flex flex-col h-full lg:p-6 "&amp;gt;
                        &amp;lt;h3&amp;gt;
                            {{ $post-&amp;gt;title }}
                        &amp;lt;/h3&amp;gt;
                        &amp;lt;div class="flex flex-row"&amp;gt;
                            &amp;lt;p class="pb-6 text-white text-justify"&amp;gt;{{ $post-&amp;gt;excerpt }}&amp;lt;/p&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;div class="flex flex-row"&amp;gt;
                            &amp;lt;p class="pb-6 text-fuchsia-400 text-justify"&amp;gt;{{ implode(', ', $post-&amp;gt;tags-&amp;gt;map-&amp;gt;name-&amp;gt;toArray()) }}&amp;lt;/p&amp;gt;
                        &amp;lt;/div&amp;gt;

                        &amp;lt;div class="flex flex-wrap items-center mt-4 "&amp;gt;
                                &amp;lt;a href="#" &amp;gt;
                                    ﻿Post to Dev.tp&amp;lt;/a&amp;gt;
                                &amp;lt;a href="#" &amp;gt;
                                    Post to Medium&amp;lt;/a&amp;gt;
                                &amp;lt;a href="#" &amp;gt;
                                    Post to Hashnode&amp;lt;/a&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;

                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/section&amp;gt;
    @endforeach

    &amp;lt;div class="mx-auto mb-8"&amp;gt;{{ $posts-&amp;gt;links() }}&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#whats-being-passed-through"&gt;
  &lt;/a&gt;
  Whats being passed through?
&lt;/h3&gt;

&lt;p&gt;So lets dd the $post variable in the view to see what were actually getting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;({{ dd(posts) }})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AIjPYpcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/XzFYfXq6sFnFTP0nyKCp4kojDvDOer9G7PaubFx6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AIjPYpcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/XzFYfXq6sFnFTP0nyKCp4kojDvDOer9G7PaubFx6.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the DD is bringing back a collection of post arrays which include all of the info required to display, excerpts, Cover image and Title ETC. We need to foreach through them in order to get the individual information, as a completely un-styled example you can do the following in your blade;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@foreach($posts as $post)
    {{ $post-&amp;gt;title }}
    {{ $post-&amp;gt;excerpt }}
    {{ $post-&amp;gt;slug }}
    {{ implode(', ', $post-&amp;gt;tags-&amp;gt;map-&amp;gt;name-&amp;gt;toArray()) }}
@endforeach

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If i DD the above $post variables inside the foreach i get the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"Elementary OS - Dev Environment Setup"

"So every now and then i see something that catches my eye. Recently that seems to be Linux Distributions, over the last few months i have changed my distribution's a few times to try and find one i'm comfortable with. I moved from my iMac (getting a bit sluggish) to Ubuntu originally and it worked but i didn't "enjoy it", i then tried Manjaro, then Pop!_OS and then finally thought id have a go with Elementary OS. ◀"

"valet-linux-elementary-os"

"Linux, PHP, MySQL"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: I'm using&lt;/em&gt; &lt;a href="https://github.com/themsaid/wink"&gt;&lt;em&gt;Laravel Wink&lt;/em&gt; &lt;/a&gt;&lt;em&gt;by&lt;/em&gt; &lt;a href="https://github.com/themsaid"&gt;&lt;em&gt;Mohamed Said&lt;/em&gt;&lt;/a&gt; &lt;em&gt;and its brilliant, it takes out the stress of building the blog functionality yourself (although that is quite fun to do also :P)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-buttons"&gt;
  &lt;/a&gt;
  The buttons
&lt;/h3&gt;

&lt;p&gt;For the buttons we are going to "Livewire them up" to make it easier to call a Public function from our Livewire controller which also means we don't need the Routes in the web.php file.&lt;/p&gt;

&lt;p&gt;So i want the Post to DEV.TO button to call a function and post to DEV.TO, so i'll name the button now and make my controller function to match it next, Also from the previous DD we saw that the slug was available in the $post variable which were going to use to pass the slug/id through to the Livewire Function when we click "Post to DEV.TO"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button wire:click="postToDevTo('{{ $post-&amp;gt;slug }}')"
        class="inline-flex items-center px-6 py-3 text-base font-semibold md:mb-2 lg:mb-0"&amp;gt;
    Post to DEV.TO
&amp;lt;/button&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lets-make-a-service"&gt;
  &lt;/a&gt;
  Lets make a service...
&lt;/h3&gt;

&lt;p&gt;i decided i didn't want to add the API key directly to my Controller and decided to add it as a Config Item.. so how do we do this? simple.. open up the services.php from the &lt;code&gt;config/services.php&lt;/code&gt; and add the following lines&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'devto' =&amp;gt; [
    'api-key' =&amp;gt; env('DEV_TO_API_KEY'),
],

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then in your .env file add the following line to the bottom:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DEV_TO_API_KEY="yourDev.TO API key from earlier"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;that's your Config item set up!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-lets-build-our-function"&gt;
  &lt;/a&gt;
  Next, Lets build our function!
&lt;/h3&gt;

&lt;p&gt;The three Functions we will eventually build will be fairly similar across the board, with the exception of the Hashnode API which uses GraphQL and requires a bit of work to be used with Guzzle.&lt;/p&gt;

&lt;p&gt;So to start with when we made the button with the wire:click we past the $post-&amp;gt;slug to the function which means we can just call $slag inside our SocialPosts.php like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function postToDevTo($slug)
{
  // Code will go here
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the function and the slug we can start building everything up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$post      = WinkPost::whereSlug($slug)-&amp;gt;firstOrFail();
$postImg   = "https://www.raspada-blog.co.uk" . $post-&amp;gt;featured_image;
$converter = new HtmlConverter();
$converter-&amp;gt;getConfig()-&amp;gt;setOption('strip_tags', true);
$postBody = $post-&amp;gt;body;
$stringsReplaced = sanitizeBody($postBody);
$markdown = $converter-&amp;gt;convert($stringsReplaced);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So whats happening?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;$post&lt;/code&gt; is grabbing all information about the post using the &lt;code&gt;$slug&lt;/code&gt; as its reference.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$postImg&lt;/code&gt; is building up the URL for the image, so when we pass it over to Dev.to it displays correctly.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$converter&lt;/code&gt; - Im using this as when i build my site i set Wink to use Rich text instead of markdown which is HTML in the DB and i need Markdown for all 3 other blogging platforms. You can checkout the converter i used here if you need it: &lt;a href="https://github.com/thephpleague/html-to-markdown"&gt;https://github.com/thephpleague/html-to-markdown&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$converter-&amp;gt;getConfig()-&amp;gt;setOption(&lt;/code&gt;&lt;code&gt;'strip_tags'&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;true&lt;/code&gt;&lt;code&gt;);&lt;/code&gt; is just telling the Converter to strip out any standard tags.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$postBody = $post-&amp;gt;body&lt;/code&gt; is just making it a sing array instead of a key pair as I'll be passing it to my helper next.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$stringReplaced&lt;/code&gt; is going to be the variable for my sanitizeBody Helper (I'll add the contents of my helper below.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$markdown&lt;/code&gt; is used to turn the HTML code left into Markdown with the converter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the weird things i learnt when trying to work with the converter and the Rich Text editor was, the converter didn't always strip the tags out. This meant i needed to do a SHED load if str_replace (17 in total)... and this just looked a bit horrible in my controller, so i added it to my helpers.php file, if you want to use my helper the code is below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (!function_exists('sanitizeText')) {
    function sanitizeBody($postBody)
    {
        $html1    = str_replace("src=\"/storage/wink", 'src="https://www.raspada-blog.co.uk/storage/wink', $postBody);
        $html2    = str_replace('&amp;lt;pre class="ql-syntax" spellcheck="false"&amp;gt;', ' ', $html1);
        $html3    = str_replace('&amp;lt;span class="hljs-keyword"&amp;gt;', '', $html2);
        $html4    = str_replace('&amp;lt;span class="hljs-string"&amp;gt;', '', $html3);
        $html5    = str_replace('&amp;lt;span class="hljs-meta"&amp;gt;', '', $html4);
        $html6    = str_replace('&amp;lt;span class="hljs-title"&amp;gt;', '', $html5);
        $html7    = str_replace('&amp;lt;/span&amp;gt;', '', $html6);
        $html8    = str_replace('', ' ', $html7);
        $html9    = str_replace('&amp;lt;span class="hljs-class"&amp;gt;', '', $html8);
        $html10   = str_replace('&amp;lt;span class="hljs-function"&amp;gt;', '', $html9);
        $html11   = str_replace('&amp;lt;span class="hljs-params"&amp;gt;', '', $html10);
        $html12   = str_replace('&amp;lt;span class="hljs-number"&amp;gt;', '', $html11);
        $html13   = str_replace('&amp;lt;span class="hljs-attr"&amp;gt;', '', $html12);
        $html14   = str_replace('&amp;lt;span class="hljs-attribute"&amp;gt;', '', $html13);
        $html15   = str_replace('&amp;lt;span class="hljs-built_in"&amp;gt;', '', $html14);
        $html16   = str_replace('&amp;lt;span class="hljs-variable"&amp;gt;', '', $html15);
        $html17   = str_replace('&amp;lt;span class="hljs-comment"&amp;gt;', '', $html16);
        return $html17;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Gross isn't it! But it makes my controller look neater.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-onto-the-api"&gt;
  &lt;/a&gt;
  Now onto the API
&lt;/h3&gt;

&lt;p&gt;Were going to be using GuzzleHttp to send our post across to Dev.to. This is probably the most difficulty i had in posting to dev.to with the API because i didn't know how to use Guzzle... but essentially its split into two parts...the header with the API key and content type and then the main JSON payload.&lt;/p&gt;

&lt;p&gt;The payload itself was pretty simple to work with as soon as you understand how Guzzle/http uses json.&lt;/p&gt;

&lt;p&gt;you need to specify the client with the headers and then the response with some sections in it, Mainly telling guzzle its JSON.... i missed this out when trying to do it originally. but reading through the Guzzle Docs i got there in the end.&lt;/p&gt;

&lt;p&gt;The standard parts required to post to Dev.To are &lt;strong&gt;Title, Published, body_markdown, main_image&lt;/strong&gt; and &lt;strong&gt;Tags,&lt;/strong&gt; and in Laravel when you put it all together you get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$client   = (new \GuzzleHttp\Client([
    'headers' =&amp;gt; [
        "api-key"      =&amp;gt; config('services.devto.api-key'),
        "Content-Type" =&amp;gt; "application/json"
    ]
]));
$response = $client-&amp;gt;post('https://dev.to/api/articles',
    ['json' =&amp;gt;
         ["article" =&amp;gt;
              [
                  "title"         =&amp;gt; $post-&amp;gt;title,
                  "published"     =&amp;gt; true,
                  "body_markdown" =&amp;gt; $markdown,
                  "main_image"    =&amp;gt; $postUrl,
                  "tags"          =&amp;gt; [implode(', ', $post-&amp;gt;tags-&amp;gt;map-&amp;gt;name-&amp;gt;toArray())]
              ]
         ]
    ]
);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you look at the request above, you can see the API Config item we setup earlier.&lt;/p&gt;

&lt;p&gt;Now put it all together and you get&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function postToDevTo($slug)
{
    $post      = WinkPost::whereSlug($slug)-&amp;gt;firstOrFail();
    $postImg   = "https://www.raspada-blog.co.uk" . $post-&amp;gt;featured_image;
    $converter = new HtmlConverter();
    $converter-&amp;gt;getConfig()-&amp;gt;setOption('strip_tags', true);
    $postBody = $post-&amp;gt;body;
    $stringsReplaced = sanitizeBody($postBody);
    $markdown = $converter-&amp;gt;convert($stringsReplaced);

    $client   = (new \GuzzleHttp\Client([
        'headers' =&amp;gt; [
            "api-key"      =&amp;gt; config('services.devto.api-key'),
            "Content-Type" =&amp;gt; "application/json"
        ]
    ]));
    $response = $client-&amp;gt;post('https://dev.to/api/articles',
        ['json' =&amp;gt;
             ["article" =&amp;gt;
                  [
                      "title"         =&amp;gt; $post-&amp;gt;title,
                      "published"     =&amp;gt; true,
                      "body_markdown" =&amp;gt; $markdown,
                      "main_image"    =&amp;gt; $postImg,
                      "tags"          =&amp;gt; [implode(', ', $post-&amp;gt;tags-&amp;gt;map-&amp;gt;name-&amp;gt;toArray())]
                  ]
             ]
        ]
    );
    toastr()-&amp;gt;success('Success, Posted to Dev.to');
    return redirect()-&amp;gt;to('/admin');
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when you click the button for "Post to DevTo" it will hit the function we have built and send the post across.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#medium-api"&gt;
  &lt;/a&gt;
  Medium API
&lt;/h3&gt;

&lt;p&gt;The initial setup of the Function is exactly the same as the devto one the only difference is you need to get your Author ID from an API call first. I use Insomnia client to test with usually as its easy to use, you can use whichever client suits your needs.&lt;/p&gt;

&lt;p&gt;With your client you need to make a GET Request from the &lt;strong&gt;&lt;a href="https://api.medium.com/v1/me"&gt;https://api.medium.com/v1/me&lt;/a&gt;&lt;/strong&gt; endpoint with a few extra bits. Using Insomnia as my example i add a Header of Content-Type with a value of application/json (see screenshot)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fjnX2JeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/H3Qhzd9oqdr80ENnLudKLmr1VwQsEgVa0WrEWDNK.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjnX2JeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/H3Qhzd9oqdr80ENnLudKLmr1VwQsEgVa0WrEWDNK.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now before we move on to the Bearer Tap be need to go grab our access token from Mediums website. Simply login to you account, Click on your avatar top right and select settings from the drop-down. Once the page loads, scroll down to the integration token section and generate your token.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rhGUXMwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/ttOPYnpBNIV1v0Xc3ceiyIWKX0MyS5HCbvg5JMCW.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rhGUXMwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/ttOPYnpBNIV1v0Xc3ceiyIWKX0MyS5HCbvg5JMCW.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the generated token as we will need that in a second.&lt;/p&gt;

&lt;p&gt;Back in Insomnia Click on the "Auth" tab and it will display a drop-down for you. From this list, Select Bearer. All you need to do here is paste the long integration token from Mediums website into the TOKEN field and then press send.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "data": {
    "id": "THIS-IS-YOUR-AUTHOR-ID",
    "username": "itmike2018",
    "name": "Mike Jones",
    "url": "https://medium.com/@itmike2018",
    "imageUrl": "https://cdn-images-1.medium.com/fit/c/400/400/0*KG_bikEM6ojnAGif"
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the only thing we need from this is the id which is what we will use in the next stage of posting to Medium.&lt;/p&gt;

&lt;p&gt;For the sake of Time i'm going to post the entire function for Medium here as i think you'll get the idea from what we discussed previously.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function postToMedium($slug)
{
    $post      = WinkPost::whereSlug($slug)-&amp;gt;firstOrFail();
    $converter = new HtmlConverter();
    $converter-&amp;gt;getConfig()-&amp;gt;setOption('strip_tags', true);
    $postBody = $post-&amp;gt;body;
    $stringsReplaced = sanitizeBody($postBody);
    $markdown = $converter-&amp;gt;convert($stringsReplaced);

    $client   = (new \GuzzleHttp\Client([
        'headers' =&amp;gt; [
            "Authorization" =&amp;gt; 'Bearer ' . config('services.medium.bearer'),
            "Content-Type"  =&amp;gt; "application/json"
        ]
    ]));
    $response = $client-&amp;gt;post('https://api.medium.com/v1/users/THIS-IS-YOUR-AUTHOR-ID/posts',
        ['json' =&amp;gt;
             [
                 "title"         =&amp;gt; $post-&amp;gt;title,
                 "contentFormat" =&amp;gt; 'markdown',
                 "content"       =&amp;gt; $markdown,
                 "tags"          =&amp;gt; [implode(', ', $post-&amp;gt;tags-&amp;gt;map-&amp;gt;name-&amp;gt;toArray())
                 ]
             ]
        ]
    );
    toastr()-&amp;gt;success('Success, Posted to medium!');
    return redirect()-&amp;gt;to('/admin');
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to submit your post to medium you need to make a POST request to &lt;strong&gt;&lt;a href="https://api.medium.com/v1/users/YOUR-AUTHOUR-ID/posts"&gt;https://api.medium.com/v1/users/YOUR-AUTHOUR-ID/posts&lt;/a&gt;&lt;/strong&gt; changing out the &lt;strong&gt;YOUR-AUTHOUR-ID&lt;/strong&gt; with the ID we got earlier on.&lt;/p&gt;

&lt;p&gt;And that's it! as you can see i added the bearer token to a config item also to make things look a little neater.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h3&gt;

&lt;p&gt;I am going to be writing one up for Hashnode but I'm still ironing out a kink with the Tags submissions, The rest of the submission works perfectly... just not the tags. Also there may be cleaner ways to make these Functions but im still on my learning Journey.&lt;/p&gt;

&lt;p&gt;if you found this post useful please consider following me on twitter &lt;a href="https://twitter.com/skino2020"&gt;@skino2020&lt;/a&gt; and if you found it really helpful consider buying me a coffee &lt;a href="https://www.buymeacoffee.com/skino2020"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravelwink</category>
    </item>
    <item>
      <title>Web App Security, Understanding the Meaning of the BFF Pattern</title>
      <author>Dalibor Kundrat</author>
      <pubDate>Tue, 19 Oct 2021 22:21:51 +0000</pubDate>
      <link>https://dev.to/damikun/web-app-security-understanding-the-meaning-of-the-bff-pattern-i85</link>
      <guid>https://dev.to/damikun/web-app-security-understanding-the-meaning-of-the-bff-pattern-i85</guid>
      <description>&lt;h2&gt;
  &lt;a href="#identity-and-security-overview"&gt;
  &lt;/a&gt;
  Identity and security overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AolgqVvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zknv6hfa2v5xsciokx09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AolgqVvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zknv6hfa2v5xsciokx09.png" alt="Identity server with BFF flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When it comes to security. There is a lot of guidance and also advice and commentary on why you should or should not use each approach. It's hard to understand all the different options and security issues they have.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;You also have different clients (mobile/web/app) and each has different security requirements for managing, storing and processing data in the form of tokens, cookies or sessions.&lt;/p&gt;

&lt;p&gt;At the end, your app may scale and not all options can be deployed as multiple instance nodes without additional changes to the app and infrastructure.&lt;/p&gt;

&lt;p&gt;This means that you really need to make decisions at the beginning and ask questions like: &lt;em&gt;What are your customers?&lt;/em&gt; and &lt;em&gt;What are your requirements?&lt;/em&gt; and &lt;em&gt;What can be added to the system in the future?&lt;/em&gt; and &lt;em&gt;How is it possible to deal with the chosen approach?&lt;/em&gt; etc. etc..&lt;/p&gt;

&lt;p&gt;This article is part of &lt;a href="https://github.com/damikun/trouble-training"&gt;opensource training&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication-vs-authorization"&gt;
  &lt;/a&gt;
  Authentication vs Authorization
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Authentication&lt;/code&gt; - process of verifying who a user is (identity).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Authorization&lt;/code&gt; - process of checking what a user has access to (checking permissions to access a particular resource).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tokens-vs-cookie-and-sessions"&gt;
  &lt;/a&gt;
  Tokens vs Cookie and Sessions
&lt;/h3&gt;

&lt;p&gt;Tokens, cookies and sessions can be interpreted as resources or tools used by various protocols/standards/patterns (OAuth, OpenID, BFF) to perform identity-related tasks.&lt;/p&gt;

&lt;p&gt;It is important to understand the basics as they end up being used in combination with the environment, clients used and security level.&lt;/p&gt;

&lt;p&gt;In the end, you can wrap the JWT token in a cookie and use it with session data for 'authorization' and 'authentication'.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cookies"&gt;
  &lt;/a&gt;
  Cookies
&lt;/h4&gt;

&lt;p&gt;Cookies can be understood as small blocks of data created by the server that are written once in the response and automatically resent with each subsequent request from the web browser until their lifetime expires.&lt;/p&gt;

&lt;p&gt;They can be used for authentication/authorization or tracking and marketing purposes. And much more...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;IndentityServer cookies example:&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MZ0rOeij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhat3oci7tks5ordi7i3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MZ0rOeij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhat3oci7tks5ordi7i3.png" alt="IdnetityServer Cookies in web browsers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are 3 main properties of cookies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;HttpOnly&lt;/code&gt; - An http-only cookie cannot be accessed by client-side APIs, such as JavaScript. The browser will not allow you to access this cookie from the front-end code.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Secure&lt;/code&gt; A secure cookie can only be transferred over an encrypted HTTPS connection.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SameSite&lt;/code&gt; 3 option values &lt;code&gt;Strict&lt;/code&gt;, &lt;code&gt;Lax&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; - this tells the browser which domain and address the cookie can be sent to.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#what-is-origin"&gt;
  &lt;/a&gt;
  What is origin?
&lt;/h5&gt;

&lt;p&gt;The origin is usually ip and port or domain name and subdomain name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This are different origins since subdomain are different
https://developer.mozilla.org
https://mozilla.org

// This are also different origins since port number is different
https://localhost:5001
https://localhost:7001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#another-cookie-definitions"&gt;
  &lt;/a&gt;
  Another cookie definitions:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Session cookies&lt;/code&gt; - Created only for the browser session (in memory) and deleted/lost after closing.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Third-party cookies&lt;/code&gt; - Usually the domain attribute of a cookies matches the domain displayed in the address bar of the web browser. as &lt;code&gt;first-party cookies&lt;/code&gt;. The &lt;code&gt;third-party cookies&lt;/code&gt; does not match the current domain and is used as &lt;code&gt;tracking cookies&lt;/code&gt; to track user activity.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#sessions"&gt;
  &lt;/a&gt;
  Sessions
&lt;/h4&gt;

&lt;p&gt;Session is used to temporarily store information on the server for use across multiple pages of the site. It is usually associated with a cookie that is used to identify the session stored on the server, but does not contain any data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4uN_zA0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nr4bir7bzcydmixnjnkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4uN_zA0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nr4bir7bzcydmixnjnkg.png" alt="Session diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tokens"&gt;
  &lt;/a&gt;
  Tokens
&lt;/h4&gt;

&lt;p&gt;Tokens are data elements that allow application systems to perform the authorization and authentication process. They are usually encoded as base64 strings.&lt;/p&gt;

&lt;p&gt;There are several types of tokens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;access token&lt;/code&gt; - Includes user claims and signs them with a secret. It uses JWT tokens.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;refresh token&lt;/code&gt; - Used to &lt;em&gt;"refresh "&lt;/em&gt; and get a new 'access token' after its lifetime expires.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;id token&lt;/code&gt; - JSON encoded data about user profile information&lt;/li&gt;
&lt;li&gt;etc, etc...&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#jwt-tokens"&gt;
  &lt;/a&gt;
  JWT Tokens
&lt;/h5&gt;

&lt;p&gt;JSON Web Token is an open standard that defines how information can be securely transferred between parties as a JSON object. &lt;/p&gt;

&lt;p&gt;They are used for &lt;code&gt;authorization&lt;/code&gt; and &lt;code&gt;information exchange&lt;/code&gt; as they provide a security proof that the information wrapped in them is valid and written by a trusted source.&lt;/p&gt;

&lt;p&gt;You can easily write arbitrary data to tokens, sign that data, and then have clients use it to access server resources. The server can verify that the token was signed and is still valid.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic JWT token flow example:&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dHi1xf1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uu0tv3bu64xqub2zytn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dHi1xf1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uu0tv3bu64xqub2zytn.png" alt="Auth diagram JWT token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JWT content:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ob425mPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1vjb0fshk9j5p4t428g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ob425mPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1vjb0fshk9j5p4t428g.png" alt="JWT token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JWT consist of 3 parts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Header&lt;/code&gt; - Contains information such as the type of token (JWT) and the signing algorithm used, e.g. HMAC SHA256 or RSA.&lt;/p&gt;


&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"alg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"HS256"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"typ"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"JWT"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Payload&lt;/code&gt; - Securly signed data (claims)&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"sub"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1234567890"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"John Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Signature&lt;/code&gt; - Encrypted header, the encrypted payload, a secret and signed by an algorithm specified in the header.&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;HMACSHA256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="nx"&gt;base64UrlEncode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="nx"&gt;base64UrlEncode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="nx"&gt;secret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;More additional info about JWT tokens can be found at: &lt;a href="https://jwt.io/introduction"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;The most commonly used token for authorizing access to APIs is the &lt;code&gt;Bearer&lt;/code&gt; token.&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#identity-protocols"&gt;
  &lt;/a&gt;
  Identity protocols
&lt;/h3&gt;

&lt;p&gt;There are several protocols/specifications available to manage your identity or authorization process.&lt;/p&gt;

&lt;p&gt;This was necessary to standardize authentication and authorization between services and clients. So we can use different global identity/authentication providers like Facebook, Google (external/internal) and also standardize the way the process is implemented.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZJGt85u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34dq7t1svckqhucckvxv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZJGt85u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34dq7t1svckqhucckvxv.jpg" alt="Oauth and OpenId logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This demo focuses on the most commonly used protocols &lt;code&gt;OAuth&lt;/code&gt; and &lt;code&gt;OpenID Connect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Both protocols use a JWT token by default to encrypt and sign sensitive data, or to verify that the request was sent from a trusted source. It is also possible to use cookies on the front end and let the back end do the session and token authorization for you.&lt;/p&gt;

&lt;p&gt;You can also watch and learn from various talks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=996OiexHze0"&gt;OAuth 2.0 and OpenID Connect - [Nate Barbettini]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GyCL8AJUhww"&gt;Introduction to OAuth 2.0 and OpenID Connect - [Philippe De Ryck]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#oauth"&gt;
  &lt;/a&gt;
  OAuth
&lt;/h4&gt;

&lt;p&gt;Primarily used to authorize an app's access to a specific resource. This is done without having to share your password with external sites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNFc0FwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nbibr408u3tok6cl3xc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNFc0FwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nbibr408u3tok6cl3xc.png" alt="Oauth slack grant prompt example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have ever signed in to a new app and agreed to access your contacts, calendar, etc., you have used &lt;em&gt;OAuth 2.0&lt;/em&gt;. This protocol does not provide any information about the user's endpoint, just a token to access certain resources. You can read more about &lt;a href="https://auth0.com/docs/authorization/protocols/protocol-oauth2"&gt;OAuth at this document&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mojdgR13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jjkx0h704xxqzqvcrht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mojdgR13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jjkx0h704xxqzqvcrht.png" alt="Oauth is authorization not authentication"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OAuth generally provides clients with &lt;em&gt;"secure delegated access "&lt;/em&gt; to certain resources. Imagine you are a Google user and an app wants to access your calendar data. This can be an example of a flow:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;OAuth&lt;/code&gt; flow example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yqS69jcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zul81j4tw6id68xu4gb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yqS69jcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zul81j4tw6id68xu4gb.png" alt="Oauth flow explain"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, an application like Slack, Jira, etc. only gets permission to access a specific resource (e.g. the calendar), but not the user itself, so profile data like username and email are not transferred and remain protected.&lt;/p&gt;

&lt;p&gt;If you want to learn more about OAuth, you can watch the following presentations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/GyCL8AJUhww?t=655"&gt;Introduction to OAuth 2.0 Flow - [Philippe De Ryck]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#token-exchange-flows"&gt;
  &lt;/a&gt;
  Token exchange flows
&lt;/h5&gt;

&lt;p&gt;There are several ways in which &lt;code&gt;grant&lt;/code&gt; can be substituted. The choice depends on what kind of client is requesting access and how much that client is trusted.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authorization code flow&lt;/li&gt;
&lt;li&gt;Flow of authorization code with PKCE&lt;/li&gt;
&lt;li&gt;Implicit Flow&lt;/li&gt;
&lt;li&gt;Client credentials flow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQ9tBjlI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8reo62cmv0vnuhddz5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQ9tBjlI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8reo62cmv0vnuhddz5v.png" alt="Oauth grant flow choice"&gt;&lt;/a&gt; Image from &lt;a href="//developer.okta.com"&gt;Okta&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#openid-connect"&gt;
  &lt;/a&gt;
  OpenID Connect
&lt;/h4&gt;

&lt;p&gt;OpenID is a protocol for decentralized authentication&lt;/p&gt;

&lt;p&gt;A login used by multiple internal/external applications. If you used your Google or Facebook etc. to log in to an external web or app, then you used &lt;em&gt;&lt;code&gt;OpenID Connect&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;OpenID Connect is based on &lt;em&gt;OAuth 2.0.&lt;/em&gt; (OAuth is the underlying protocol and OpenId is the identity layer built on top of it) and also uses a JWT token called &lt;code&gt;id_token&lt;/code&gt; which encapsulates identity claims in JSON format. For more information about OpenId, see &lt;a href="https://openid.net/connect/"&gt;under this specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;id_token&lt;/code&gt; example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"iss"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://server.example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"sub"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"248289761001"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"aud"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"s6BhdRkqt3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"nonce"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"n-0S6_WzA2Mj"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"exp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1311281970&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"iat"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1311280970&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Dalibor Kundrat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"given_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Dalibor"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"family_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Kundrat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"gender"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"male"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"birthdate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0000-10-31"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"d.kundrat@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"picture"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://example.com/somepicture_of_dalibor.jpg"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;code&gt;OpenId&lt;/code&gt; flow example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7xH5UMf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vike727dcdowbuftytyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7xH5UMf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vike727dcdowbuftytyr.png" alt="OpenId Flow"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;There are several flows that can be used with &lt;code&gt;OpenId&lt;/code&gt;. You can read more about them &lt;a href="https://darutk.medium.com/diagrams-of-all-the-openid-connect-flows-6968e3990660"&gt;under this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;OpenId&lt;/code&gt; server by specification provides multiple endpoints to interact with.&lt;/p&gt;

&lt;p&gt;The URLs of all endpoints can be explored using the &lt;strong&gt;global discovery endpoint&lt;/strong&gt;. Often referred to as &lt;em&gt;disco&lt;/em&gt;. It is available under the path: &lt;code&gt;/.well-known/openid-configuration&lt;/code&gt; and returns JSON &lt;em&gt;OpenID Connect&lt;/em&gt; metadata related to the specified authorization server.&lt;/p&gt;

&lt;p&gt;Example &lt;em&gt;disco&lt;/em&gt; response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"issuer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"jwks_uri"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/.well-known/openid-configuration/jwks"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"authorization_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/authorize"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"token_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"userinfo_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/userinfo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"end_session_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/endsession"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"check_session_iframe"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/checksession"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"revocation_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/revocation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"introspection_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/introspect"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"device_authorization_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/deviceauthorization"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"frontchannel_logout_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"frontchannel_logout_session_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"backchannel_logout_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"backchannel_logout_session_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"scopes_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"profile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"openid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"role"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"offline_access"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//etc..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"claims_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"family_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"profile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;etc..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"grant_types_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"authorization_code"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"client_credentials"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"refresh_token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//etc..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"response_types_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"code"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"id_token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"id_token token"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//etc..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"response_modes_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"form_post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"query"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"fragment"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"token_endpoint_auth_methods_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"client_secret_basic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"client_secret_post"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"id_token_signing_alg_values_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"RS256"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"subject_types_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"public"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"code_challenge_methods_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"plain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"S256"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"request_parameter_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"request_object_signing_alg_values_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"RS256"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"RS384"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//etc..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"authorization_response_iss_parameter_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Main OpenId endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/authorization_endpoint&lt;/code&gt; - interacting with the resource owner and obtaining an authorization permission.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/token_endpoint&lt;/code&gt; - Obtain an access and/or ID token by presenting an authorization permission (code) or refresh token&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/revocation_endpoint&lt;/code&gt; - Revoke an access or refresh token.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/end_session_endpoint&lt;/code&gt; - Ends the session associated with the specified ID token.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/userinfo_endpoint&lt;/code&gt; - Provides information about the authenticated end user.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;⠀&lt;br&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; All of these values in the discovery endpoint refer to the current server configuration. You can adjust or  enable/disable certain options in your code during idnetityserver configuration.&lt;br&gt;
⠀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#backend-for-frontend-pattern-bff"&gt;
  &lt;/a&gt;
  Backend for Frontend pattern (BFF)
&lt;/h3&gt;

&lt;p&gt;BBF is a backend used by a particular front-end application.&lt;/p&gt;

&lt;p&gt;Since endpoint APIs may have multiple clients with different requests, BFF can provide a client-specific backend mediator and act as a proxy that forwards and merges multiple requests to different service APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vAxUNLcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcxzmd5seiiwadqtvjwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vAxUNLcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcxzmd5seiiwadqtvjwg.png" alt="Backend for frontend - BFF example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⠀&lt;br&gt;
Ok, we have cookies, tokens, and sessions. We use them for various authentication/authorization protocols (OpenId, OAuth, etc.) &lt;strong&gt;and what the hack BFF is good for.&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Answer is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security reasons&lt;/li&gt;
&lt;li&gt;Architecture reasons 
⠀&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#security-reasons"&gt;
  &lt;/a&gt;
  Security reasons
&lt;/h4&gt;

&lt;p&gt;In recent years, it was common to implement OpenID Connect for SPAs in Javascript (React, Angular, Vue...), and this is no longer recommended:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using access tokens in the browser has more security risks than using secure cookies.&lt;/li&gt;
&lt;li&gt;A SPA is a public client and cannot keep a secret, as such a secret would be part of the JavaScript and could be accessible to anyone inspecting the source code.&lt;/li&gt;
&lt;li&gt;Recent browser changes to prevent tracking may result in 'third-party cookies' being dropped.&lt;/li&gt;
&lt;li&gt;It is not possible to store something securely in the browser for a long period of time, as it can be stolen by various attacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Due to the above issues, the best security recommendation for SPA is to &lt;strong&gt;avoid storing tokens in the browser&lt;/strong&gt; and create a lightweight backend to help with this process, called Backend for Frontend pattern (BFF).&lt;/p&gt;

&lt;p&gt;This way, you can still use &lt;code&gt;acces_tokens&lt;/code&gt; to authorize access to all your APIs, but clients can use cookies or tokens, for example, depending on the type (browser, mobile device), as required for security reasons.&lt;/p&gt;

&lt;p&gt;BFF can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;statefull&lt;/code&gt; - stores tokens in memory and uses a session to manage them.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;stateless&lt;/code&gt; - stores the tokens in encrypted HTTP-only, same-page cookies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#architectural-reasons"&gt;
  &lt;/a&gt;
  Architectural reasons
&lt;/h4&gt;

&lt;p&gt;When you design your application, you have several options on how to access APIs from clients (web/mobile/external).&lt;/p&gt;

&lt;p&gt;1) A single API gateway that provides a single API for all clients &lt;br&gt;
2) A single API gateway that provides an API for each type of client &lt;br&gt;
3) A per-client API gateway that provides an API to each client. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#bff-vs-api-gateway"&gt;
  &lt;/a&gt;
  BFF vs API gateway
&lt;/h5&gt;

&lt;p&gt;While an &lt;code&gt;API Gateway&lt;/code&gt; &lt;strong&gt;is a single entry point&lt;/strong&gt; into to the system for all clients, a &lt;code&gt;BFF&lt;/code&gt; is only responsible for a &lt;strong&gt;single type of client&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zzu6hUpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0cohsd854uh4lrx6aye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zzu6hUpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0cohsd854uh4lrx6aye.png" alt="Backend for frontend vs API gateway"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bbf-cookies-termination-and-token-isolation"&gt;
  &lt;/a&gt;
  BBF cookies termination and token isolation
&lt;/h4&gt;

&lt;p&gt;As mentioned in the text, the most important thing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid storing tokens in the browser. (&lt;strong&gt;No tokens in the browser&lt;/strong&gt; policy).&lt;/li&gt;
&lt;li&gt;Store tokens on the server side and use encrypted/signed HTTP-only cookies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recommended BFF pattern to secure SPA frontends:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtZ7Tojr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vfy6lp88thttytod09h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtZ7Tojr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vfy6lp88thttytod09h.png" alt="Backend for frontend  (BFF) cookie and tokens flow + proxy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using this, all communication from the SPA frontend to the authorization server now passes through the BFF and tokens do not reach the SPA.&lt;/li&gt;
&lt;li&gt;The BFF now issues session cookies. These are part of the request to APIs and are exchanged for an access token at the proxy level.&lt;/li&gt;
&lt;li&gt;Client-side cookies are terminated by the BFF proxy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository
&lt;/h2&gt;

&lt;p&gt;You can find the full source code of the app, including identity, distributed logging, tracing and monitoring, in the open source Github repo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/damikun/trouble-training"&gt;https://github.com/damikun/trouble-training&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>security</category>
      <category>architecture</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Difference Between A Website And A Web Application</title>
      <author>Cess</author>
      <pubDate>Tue, 19 Oct 2021 22:20:08 +0000</pubDate>
      <link>https://dev.to/cesscode/difference-between-a-website-and-a-web-application-4ccl</link>
      <guid>https://dev.to/cesscode/difference-between-a-website-and-a-web-application-4ccl</guid>
      <description>&lt;p&gt;Hello everyone! 💙&lt;/p&gt;

&lt;p&gt;In this article I will write about the difference between a website and a web application (web app). &lt;/p&gt;

&lt;p&gt;How can you tell the key differences between a website and a web app ? since both the website and the web app are almost similar to each other as both are accessible from your web browsers.&lt;/p&gt;

&lt;p&gt;let's get started 💃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-website"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is a Website?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A website is a page or collection of pages on the World Wide Web (www) that contains specific information which was all provided by one person or entity and traces back to a common Uniform Resource Locator (URL). &lt;/p&gt;

&lt;p&gt;Examples of websites are:&lt;/p&gt;

&lt;p&gt;• &lt;a href="http://www.goggle.com"&gt;www.goggle.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• &lt;a href="http://www.cnn.com"&gt;www.cnn.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• &lt;a href="http://www.msn.com"&gt;www.msn.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A website can be accessed on different range of devices such as desktops, laptops and smartphones. &lt;/p&gt;

&lt;p&gt;Website is hosted on a single or multiple web server. It is accessible via a network like the Internet or a private local area network via IP address.&lt;/p&gt;

&lt;p&gt;Websites are dedicated to a particular topic such as &lt;strong&gt;gaming&lt;/strong&gt;, &lt;strong&gt;education,&lt;/strong&gt; &lt;strong&gt;sports&lt;/strong&gt; and &lt;strong&gt;dating websites&lt;/strong&gt; or a variety of purposes such as &lt;strong&gt;Blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main elements of a website are Hypertext Markup Language (HTML), Cascading Style Sheets (CSS) and JavaScript&lt;/p&gt;

&lt;p&gt;The first page you see when you open a website is called a &lt;strong&gt;Home page or a 'start page' or 'index page'.&lt;/strong&gt; before the site’s sub pages eg the &lt;strong&gt;about page.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I know you are wondering if every first page you open when visiting a website is the homepage? no is not, is also possible for you to begin from a different page other than the home page when you visit a website in cases when you click on a blog article to read &lt;/p&gt;

&lt;p&gt;The homepage are connected to websites sub pages by &lt;strong&gt;hyperlinks&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A hyperlink&lt;/strong&gt; is an element in an HTML document that links to either another portion of the document or to another document altogether. On webpages, hyperlinks are usually colored purple or blue and are sometimes underlined. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-a-website"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features Of a Website&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;• &lt;strong&gt;Quality Web Contents:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Quality web Content is the most important element of any website. Contents on a website should be clear and relevant to the needs of your users. &lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Easy to Use:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A good website must be easy to use. Having a website that's easy to navigate will make it easier for users to find what they are searching for on the website. A website with a frustrating user experience makes it difficult for visitors to find the content that they’re searching for and the user might end up leaving that website for a website with a better user experience&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Accessible to all users:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;A user-friendly website should be accessible to everyone including the blind, disabled or the elderly.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Fast load times:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Websites should be able to load within 4-6 seconds for good usability. If your website takes more than 4-6 seconds to load, it is probably too slow and will result to visitors visiting other websites&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Responsiveness:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your website must carry a responsive design so it is optimized for both mobile and desktop devices. A good website should look great on  all types of smartphones, tablets, desktops and laptops.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-a-website"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Benefits Of a Website?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;• &lt;strong&gt;Showcase your products and services to wider audience:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Websites are accessible by anyone with a good connection from anywhere in the world even in remote locations so by getting a website it makes it possible for anyone in the world to find and patronize your business. A website can help you gain customers outside the geographic reach of your marketing efforts and can also help you increase your customer base by selling online if you have products that can easily be sold online.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Around-The-Clock Availability:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Owning a Website provides your customers with around-the-clock availability in terms of access to your products. Customers can see what products or services you sell , your prices, your location at any time of the day via visiting your website.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Establish Trust and Credibility:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Without a website people may doubt the legitimacy of your business, Question if your business is real or not. Having a website is a great opportunity to make a good impression and will also provide the information they are looking for and also give your business credibility.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-web-application"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is a web application?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A web application is a computer program that utilizes web browsers and web technologies to perform tasks over the internet. Demand for web apps is increasing because they do not require download all you need to do is access the web app through a web browser such as goggle chrome. &lt;/p&gt;

&lt;p&gt;Web applications are websites with functionality and interactive elements. web applications like Gmail, Facebook, YouTube, Twitter, etc. are all dynamic, and built for user engagement.&lt;/p&gt;

&lt;p&gt;The Main element of web Apps are: HTML, CSS, and JavaScript; additionally programming languages such as Ruby and PHP&lt;/p&gt;

&lt;p&gt;Web applications can be designed for a wide variety of users and can be used by anyone; from an organization to an individual for numerous reasons.&lt;/p&gt;

&lt;p&gt;Examples of  commonly used Web applications are Gmail, photoshop, YouTube, online calculators, e-commerce shops.&lt;/p&gt;

&lt;p&gt;The above mentioned examples  have a web application that you can access via a link and a mobile application that you can download from stores.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-a-web-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Benefits Of a  Web App&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;• Web apps don’t need to be installed because they are internet enabled apps that can be used on the web browser: web apps allows you to showcase your products and services without asking users to install the app on their phones.&lt;/p&gt;

&lt;p&gt;• Not limited: Web apps are not limited to only few browsers because any browser can support opening the web app. They can be accessed through multiple web browsers regardless of the operating system. &lt;/p&gt;

&lt;p&gt;• Web applications are always up to date because updates are applied centrally. No need to remind users to update their applications.&lt;/p&gt;

&lt;p&gt;• Web applications don’t require approval from the mobile app store to function.&lt;/p&gt;

&lt;p&gt;• All users can access the same version so it eliminates any compatibility issues&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-a-web-application"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features Of a Web Application&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Web apps are cloud based and scalable: &lt;/p&gt;

&lt;p&gt;web apps such as goggle, twitter, facebook and instagram are &lt;br&gt;
cloud optimized and scalable. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scalability is the idea of a system in which every application &lt;br&gt;
   or piece of infrastructure can be expanded to handle increased &lt;br&gt;
   load. &lt;/p&gt;

&lt;p&gt;You can serve more customers from an application given the same &lt;br&gt;
   hardware, further reducing the need to invest in servers and &lt;br&gt;
   hosting infrastructure.  Having a scalable web application &lt;br&gt;
   ensures that your web app can scale up to handle loads such as &lt;br&gt;
   increase in traffic from web visitors and not crash. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security: People don’t feel comfortable when sharing personal informations so It is essential to have a secure authentication for your web app, secure authentications  such as password encryptions, using ssl encryptions to secure credit card transactions, data transfer and logins, asking the user security questions when the user resets her password is a must. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;web apps such as E-commerce sites are targets for hackers due to immense value of the information that goes through them, such as credit card numbers. It is vital that you protect yourself and your customers. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Speed: The data processing of your web app should take place easily and without affecting the loading speed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compatible Across Platforms:  All web apps should be able to work across any platform.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#differences-between-a-website-and-a-web-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;DIFFERENCES BETWEEN A WEBSITE AND A WEB APP&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;USER INTERACTION&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A website provides visual &amp;amp; text content which user can view and read, but not affect it 's functioning.&lt;/p&gt;

&lt;p&gt;In a web application, the user cannot only read the page content but can also manipulate the data on the page. example of a web application interactivity is an online banking application that performs transactions based on a customer’s input. Another example is the E-commerce online stores like Amazon that allows visitors to search through the catalog and buy the items they are searching for. &lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
&lt;strong&gt;CREATED FOR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A website mostly consists of static content which means that a website is publicly accessible to all the web visitors.&lt;/p&gt;

&lt;p&gt;A web application is designed for interaction with the end user.  This means that you need the required credentials to be able to access any data on the web application&lt;/p&gt;

&lt;p&gt;3.&lt;br&gt;
&lt;strong&gt;AUTHENTICATION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt; is the security process that allows users to verify their identities in order to gain access to their personal accounts on a website.  User accounts must be secured to prevent unauthorized access and leakage of sensitive data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt; is not obligatory for informational websites like blogs for example. The user may ask to register to get regular updates or access additional informations that are not available for unregistered web visitors.  For example, reading articles online from a blog or a news website doesn't require registration but if you want to leave comments on the blog post or the news website, you will have to login to leave comments.&lt;/p&gt;

&lt;p&gt;Web applications need authentication, as they offer a much larger scope of options than websites. When you register to facebook or twitter or any of the social media platforms, you create an account and get a unique identification number. The system warns you if your login and password are weak. If you leave them unchanged, hackers may reach your account and steal your information, as well as irritate other users with junk emails under your name.&lt;/p&gt;

&lt;p&gt;4.&lt;br&gt;
&lt;strong&gt;DEPLOYMENT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;for websites, you just need to update the HTML code to carry out small changes on the website, it never requires a full re-compilation and deployment. &lt;/p&gt;

&lt;p&gt;All changes for web application require the entire project to be re-compiled and deployed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CONCLUSION&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Now that you have a clearer understanding of the differences between websites and web applications, it will be easier for you to understand which online solution suits your business needs when choosing between a website and a web app.&lt;/p&gt;

&lt;p&gt;If you want your web page to display mostly some information choose a website. If you need interaction with users and additional functionality, such as the ability to make transactions online choose a web app.&lt;/p&gt;

&lt;p&gt;If you have any questions about the differences between a website and a web application, you can leave them in the comments section below and I'll be happy to answer every single one.&lt;/p&gt;

&lt;p&gt;That's all for today! 😁 You reached the end of the article 😍&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>discuss</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The "new" Nullpointer Exception in Java 17</title>
      <author>Hrn Svncハルン Харун Севиндж</author>
      <pubDate>Tue, 19 Oct 2021 20:54:09 +0000</pubDate>
      <link>https://dev.to/harsvnc/the-new-nullpointer-exception-in-java-17-4bcb</link>
      <guid>https://dev.to/harsvnc/the-new-nullpointer-exception-in-java-17-4bcb</guid>
      <description>&lt;p&gt;As a java developer everyone should know the &lt;strong&gt;Nullpointer Exception&lt;/strong&gt; or NPE. It is that one thing, you always should try to prevent from happening. In some cases it means that you need to debug your code to find the little mistake that happened. &lt;br&gt;
The NPE is a runtime exception which is thrown when your code wants to use an object or an object reference that has a null value. That can be if simply no value is assigned or a object is without reference.&lt;/p&gt;

&lt;p&gt;Before the newest version of the openJdk (version 17) the common Nullpointer Exception looked something like this in your stack-trace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java.lang.NullPointerException: null
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Probably theres much more on you stack-trace going on but this is it.&lt;br&gt;
As you can see it does not indicate where or why your npe occurred.&lt;/p&gt;

&lt;p&gt;Help is on the way!&lt;br&gt;
Watch how Java 17 Handles this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Exception in thread "main" java.lang.NullPointerException:
Cannot assign field "i" because "a" is null
at Prog.main(Prog.java:5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example the exception pinpoints out &lt;strong&gt;where&lt;/strong&gt; and &lt;strong&gt;what&lt;/strong&gt; our null object reference is.&lt;/p&gt;

&lt;p&gt;Just that simple! &lt;/p&gt;

&lt;p&gt;As all of my posts this was also written on my &lt;a href="https://www.harun-sevinc.com"&gt;private blog&lt;/a&gt; where i try to write useful posts for developers.&lt;/p&gt;

&lt;p&gt;Or just follow me on &lt;a href="https://twitter.com/harsvnc"&gt;twitter&lt;/a&gt; or dm me &lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>java</category>
      <category>news</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
