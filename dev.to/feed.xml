<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Congrats on an Inspiring Hacktoberfest 2021 üéÉ </title>
      <author>Christina Gorton</author>
      <pubDate>Mon, 01 Nov 2021 19:51:22 +0000</pubDate>
      <link>https://dev.to/devteam/congrats-on-an-inspiring-hacktoberfest-2021-3e14</link>
      <guid>https://dev.to/devteam/congrats-on-an-inspiring-hacktoberfest-2021-3e14</guid>
      <description>&lt;p&gt;Another fantastic Hacktoberfest is in the books! We hope everyone who participated learned something about open source, global collaboration, and themselves in the process. &lt;em&gt;Scroll to the &lt;strong&gt;Hacktoberfest on DEV&lt;/strong&gt; section for important info about getting your Hacktoberfest participation profile badge.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thank you to &lt;a href="https://dev.to/digitalocean"&gt;DigitalOcean&lt;/a&gt; for hosting Hacktoberfest for another year in a row and making the event as inclusive as possible ‚ù§Ô∏è  &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-impact-of-open-source"&gt;
  &lt;/a&gt;
  The Impact of Open Source
&lt;/h3&gt;

&lt;p&gt;The health of open source software is tremendously important ‚Äî not only to the tech community but in the wider world as well. A well-functioning OSS ecosystem means greater neutrality, accessibility, and collaboration within the most powerful software system on earth. Sustaining this health depends on the hard work and participation of contributors and maintainers alike. Isn't it incredible that all of us can participate in this process? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hacktoberfest-on-dev-stories-and-badges"&gt;
  &lt;/a&gt;
  Hacktoberfest on DEV: Stories and Badges
&lt;/h3&gt;

&lt;p&gt;Throughout the month, we encouraged all participants to document their journeys right here on DEV. I encourage you to &lt;a href="https://dev.to/t/hacktoberfest"&gt;browse the stories&lt;/a&gt; people shared about their Hacktoberfest experiences when you get the chance. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-will-also-be-awarding-limitededition-dev-profile-badges-to-all-registered-hacktoberfest-participants-who-completed-the-challenge-you-were-sent-instructions-in-an-email-via-digitalocean-following-registration-but-heres-a-refresher"&gt;
  &lt;/a&gt;
  We will also be awarding limited-edition DEV profile badges to all registered Hacktoberfest participants who completed the challenge. You were sent instructions in an email via DigitalOcean following registration, but here's a refresher...
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Add &lt;a href="https://shop.dev.to/products/dev-hacktoberfest-badge?variant=39635848101997"&gt;this item&lt;/a&gt; to your cart in the DEV Shop.&lt;/li&gt;
&lt;li&gt;At checkout, click, &lt;code&gt;Add a discount code or a gift card&lt;/code&gt; under "Order Summary" and enter the coupon code included in your email from DigitalOcean. &lt;/li&gt;
&lt;li&gt;In a few days, the DEV team will be awarding badges. Thanks for your patience!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Important: November 30, 2021 is the deadline to request your badge. We will not be awarding any other badges following that date.&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-to-our-contributors"&gt;
  &lt;/a&gt;
  Thank You to Our Contributors
&lt;/h3&gt;

&lt;p&gt;This year during Hacktoberfest, the Forem repository saw &lt;strong&gt;49 pull requests merged&lt;/strong&gt;! This is a huge accomplishment on all sides üå± &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-huge-thank-you-to-our-second-round-of-contributors-to-the-forem-codebase"&gt;
  &lt;/a&gt;
  A huge thank you to our second round of contributors to the Forem codebase:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;General Bugs&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15000"&gt;Fix hamburger menu scrolling&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/takmar"&gt;takmar&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15132"&gt;Add Article post_commit when user_id changes with specs&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/lsparlin"&gt;lsparlin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15206"&gt;Edit tweet intent URL&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/thomasbnt"&gt;thomasbnt&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15218"&gt;Removed extra space in code of conduct&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/supzi-del"&gt;supzi-del&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Internationalization&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://github.com/forem/forem/pull/15154"&gt;locales/views/editor - added FR translation&lt;/a&gt;&lt;/strong&gt; by &lt;a href="https://github.com/KrystalJean"&gt;KrystalJean&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I18n PRs by &lt;a href="https://github.com/yheuhtozr"&gt;yheuhtozr&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15019"&gt;views/collections i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15056"&gt;views/notifications i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15020"&gt;views/podcasts, views/podcast_episodes i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15070"&gt;article editor and manager i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15060"&gt;views/liquids i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15068"&gt;views/moderations i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15021"&gt;views/badges etc i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15039"&gt;views/tags etc i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15041"&gt;views/reading_list_items i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15042"&gt;I18nize organizations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15078"&gt;I18nize users (non-settings) &amp;amp; logo designer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15097"&gt;I18nize articles &amp;amp; social_previews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15038"&gt;views/feedback_messages i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15040"&gt;views/listings etc i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15059"&gt;views/comments i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15058"&gt;actions and reactions i18n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/15154"&gt;locales/views/editor - added FR translation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;We also gave some shoutouts to our _first&lt;/em&gt; round of Forem contributors in &lt;a href="https://dev.to/devteam/hacktoberfest-check-in-forem-contributor-spotlight-4l6j"&gt;this post&lt;/a&gt; a few weeks back. Check it out!_&lt;/p&gt;




&lt;p&gt;A very happy Hacktoberfest 2021 to one and all üéâ Thank you for letting us follow along as you submitted PRs, shared your stories, and provided guidance as a maintainer, etc. Until next year üéÉ &lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>meta</category>
      <category>digitalocean</category>
    </item>
    <item>
      <title>Post title</title>
      <author>Abdelrahman Bayoumi</author>
      <pubDate>Mon, 01 Nov 2021 19:44:39 +0000</pubDate>
      <link>https://dev.to/abdelrahmanbayoumi/post-title-52m</link>
      <guid>https://dev.to/abdelrahmanbayoumi/post-title-52m</guid>
      <description>&lt;p&gt;Hello world üåç&lt;br&gt;
Test&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Developer Tools secrets that shouldn't be secrets</title>
      <author>Christian Heilmann</author>
      <pubDate>Mon, 01 Nov 2021 19:05:18 +0000</pubDate>
      <link>https://dev.to/codepo8/developer-tools-secrets-that-shouldnt-be-secrets-361g</link>
      <guid>https://dev.to/codepo8/developer-tools-secrets-that-shouldnt-be-secrets-361g</guid>
      <description>&lt;p&gt;This is a talk that I've given at &lt;a href="https://cityjsconf.org/"&gt;CityJS&lt;/a&gt; this September. I am a principal product manager for developer tools in Microsoft Edge and these are things I encountered during working on the tools, documenting them and going through user feedback.&lt;/p&gt;

&lt;p&gt;You can watch the &lt;a href="https://www.youtube.com/watch?v=q_qzHzIVxw4"&gt;recording of the talk on Youtube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/q_qzHzIVxw4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's a write-up  of all the things I covered:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-console-is-much-more-than-raw-log-endraw-"&gt;
  &lt;/a&gt;
  1. Console is much more than &lt;code&gt;log()&lt;/code&gt;!
&lt;/h2&gt;

&lt;p&gt;There is no doubt that, besides the Elements tool, Console is the most used part of the browser developer tools. Specificially, people love to debug by putting a &lt;code&gt;console.log()&lt;/code&gt; in their code to learn what's going on. There are a few problems with that, and there are better ways to debug scripts, but as this is what people do, let's talk how to make that experience better. &lt;/p&gt;

&lt;p&gt;The first problem is log messages that aren't removed when a product goes live clogging up the Console. Finding the information you're looking for becomes daunting and the best way to work with that is to learn about the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/console-filters"&gt;console filtering options available to you&lt;/a&gt;. Using these you can filter the reporting of the console to the things you care about and block out a lot of the noise.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BsFa_w1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utwq8xf2ljnkup3bun62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsFa_w1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utwq8xf2ljnkup3bun62.png" alt="Filtering options in the console tool" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-that-youre-logging"&gt;
  &lt;/a&gt;
  What is that you're logging?
&lt;/h3&gt;

&lt;p&gt;The next problem with using &lt;code&gt;console.log()&lt;/code&gt; is that we seem to only log values and forget to add where they come from. For example, when you use the following code, you get a list of numbers, but you don't know what is what.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The easiest way to work around that issue is to wrap the things you want to log in curly braces. The console then logs both the name and the value of what you want to know about.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U7BJjc2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r0hktj867rc7hzb0ams.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U7BJjc2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r0hktj867rc7hzb0ams.png" alt="Using curly braces around variables in log messages logs their name and their value" width="770" height="827"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-to-your-console-vocabulary"&gt;
  &lt;/a&gt;
  Adding to your console vocabulary
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QpKuBkjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/moyxuiaxxsn7umk8jzsu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QpKuBkjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/moyxuiaxxsn7umk8jzsu.png" alt="Examples of warn, info and error messages and how they are displayed in the console" width="707" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition to &lt;code&gt;console.log()&lt;/code&gt; you have a &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/console-log"&gt;lot more methods you can use&lt;/a&gt;. For example, &lt;code&gt;console.warn()&lt;/code&gt; logs a warning, &lt;code&gt;console.info()&lt;/code&gt; an informational message, and &lt;code&gt;console.error()&lt;/code&gt; an error message. This not only results in slighty different displays in the console, but it also gives your messages a different log level, which means it is easier to filter for them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#errors-and-assertions-in-console"&gt;
  &lt;/a&gt;
  Errors and assertions in Console
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SPP7L2l9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmgjxudfdrpdzk71erd1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SPP7L2l9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmgjxudfdrpdzk71erd1.png" alt="The error method of console shows an error, and assert is a shortcut for an if statement with a console.log inside" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Displaying an error in the console is different to throwing an error, but it still is a good idea to show the severity of an issue to the person maintaining or debugging the product. Another interesting method is &lt;code&gt;console.assert()&lt;/code&gt;, which only logs a message when a certain condition is met. Often you find yourself writing an &lt;code&gt;if&lt;/code&gt; statement with a &lt;code&gt;console.log()&lt;/code&gt; inside. Using &lt;code&gt;assert()&lt;/code&gt; makes that one redundant and you have one less thing to worry about when cleaning up your debugging code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tracing-where-something-came-from"&gt;
  &lt;/a&gt;
  Tracing where something came from
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qRGzVTH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/096sdyztvubc28oi8ror.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRGzVTH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/096sdyztvubc28oi8ror.png" alt="Example of using console.trace() to track back where a call came from" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Often you find yourself adding a &lt;code&gt;console.log('called')&lt;/code&gt; or similar to test if a certain functionality is even triggered. Once you have that the next thing you normally want to find out what called that method. That's what &lt;code&gt;console.trace()&lt;/code&gt; is for, as it doesn't only tell you that something was called, but also where the call came from. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grouping-console-messages"&gt;
  &lt;/a&gt;
  Grouping console messages
&lt;/h3&gt;

&lt;p&gt;If you have a lot to log, you can use &lt;code&gt;console.group('name')&lt;/code&gt; and &lt;code&gt;console.groupEnd('name')&lt;/code&gt; to wrap the messages in collapsible and expandable messages in the Console. You can even define if the groups should be expanded or collapsed by default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s0phSiV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rqdcx42f92cxozm3tr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s0phSiV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rqdcx42f92cxozm3tr9.png" alt="An example of defining groups in the console" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#displaying-and-filtering-lots-of-information-in-the-console-as-tables"&gt;
  &lt;/a&gt;
  Displaying and filtering lots of information in the console as tables
&lt;/h3&gt;

&lt;p&gt;If you want to display a lot of of information as a log, it can become daunting to read the information. The &lt;code&gt;console.table()&lt;/code&gt; method displays array-like data as a table in the console, and you can filter what you want to display by giving it an array of the properties you want to see. &lt;/p&gt;

&lt;p&gt;For example, you can use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;elms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:is(h1,p,script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to get all H1, paragraph and script elements from the document and  to display this information as a table. As the different elements have a boatload of attributes and properties, the resulting table is pretty unreadable. &lt;/p&gt;

&lt;p&gt;If you filter down to what you are interested in by using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elms&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodeName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;innerText&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offsetHeight&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you get a table with only these properties and their values. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qbM83cjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83x63c2nsiihbgv4kyt3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qbM83cjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83x63c2nsiihbgv4kyt3.png" alt="Code example using console.table() and its filtering options" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The table structure is maintained when you copy and paste this information, which makes it a wonderful tool to get data into Excel or Word, for example. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blinging-it-up-raw-endraw-and-raw-endraw-"&gt;
  &lt;/a&gt;
  Blinging it up: &lt;code&gt;$()&lt;/code&gt; and &lt;code&gt;$$()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The Console comes with a lot of convenience methods you can use called the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/utilities"&gt;Console Utilities&lt;/a&gt;. Two very useful ones are &lt;code&gt;$()&lt;/code&gt; and &lt;code&gt;$$()&lt;/code&gt; which are replacements for &lt;code&gt;document.querySelector()&lt;/code&gt; and &lt;code&gt;document.querySelectorAll()&lt;/code&gt; respectively. These not only return the nodeList you expect, but also cast the results to arrays, which means you can use &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; on the results directly. The following code would grab all the links of the current document and return an Array with objects that contain only the &lt;code&gt;href&lt;/code&gt; and &lt;code&gt;innerText&lt;/code&gt; properties of each link as &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJkF518j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww5h1yqyk378lzcdmob2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJkF518j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww5h1yqyk378lzcdmob2.png" alt="An example how the $$ function returns a collection of HTML elements that you can filter like any other array" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-can-log-without-source-access-live-expressions-and-logpoints"&gt;
  &lt;/a&gt;
  2. You can log without source access - live expressions and logpoints
&lt;/h2&gt;

&lt;p&gt;The normal way to add a &lt;code&gt;console.log()&lt;/code&gt; is to put it inside your code at the place you want to get the information. But you can also get insights into code you can't access and change. &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/live-expressions"&gt;Live expressions&lt;/a&gt; are a great way to log information without changing your code. They are also incredible to log values that change constantly without flooding the console and thus slowing down your product. You can see the difference in the following screencast:&lt;/p&gt;



&lt;p&gt;Logpoints are a special kind of breakpoint. You can right-click any line in a JavaScript in the Sources tool of the Developer Tools and set a logpoint. You get asked to provide an expression you'd like to log and will get its value in the console when the line of code is executed. This means you can technically inject a &lt;code&gt;console.log()&lt;/code&gt; anywhere on the web. I &lt;a href="https://christianheilmann.com/2021/08/24/using-console-log-on-any-website-logpoints-let-you-do-that/"&gt;wrote about logpoints&lt;/a&gt; back in August and you can see a demo in the following screencast:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-you-can-log-outside-the-browser-vs-code-debugger"&gt;
  &lt;/a&gt;
  3. You can log outside the browser - VS Code debugger
&lt;/h2&gt;

&lt;p&gt;When you start a debugging session in Visual Studio Code, you can spawn a browser instance and the Debug Console becomes the Console you are used to from the browser developer tools. I blogged about this in July in detail, so you can &lt;a href="https://christianheilmann.com/2021/07/30/using-console-log-debugging-in-visual-studio-code/"&gt;read up there how to do that&lt;/a&gt;. There is also more in the &lt;a href="https://docs.microsoft.com/microsoft-edge/visual-studio-code/microsoft-edge-devtools-extension#browser-debugging-with-microsoft-edge-devtools-integration-in-visual-studio-code"&gt;official documentation&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQgQPgvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8i8p8oy2gqhlc4tjm30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQgQPgvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8i8p8oy2gqhlc4tjm30.png" alt="Using the JavaScript debugger in VS Code" width="848" height="1031"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also watch this one minute video of me showing the functionality:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/00MNtSzasSQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-you-can-inject-code-into-any-site-snippets-and-overrides"&gt;
  &lt;/a&gt;
  4. You can inject code into any site - snippets and overrides.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/javascript/snippets"&gt;Snippets&lt;/a&gt; are a way in Developer Tools to run a script against the current web site. You can use the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/utilities"&gt;Console Utilities&lt;/a&gt; in these scripts and it is a great way to write and store complex DOM manipulation scripts you normally execute in the Console. You can run your scripts in the window context of the current document either from the snippets editor or from the command menu. In the latter case, start your command with an &lt;code&gt;!&lt;/code&gt; and type the name of the snippet you want to run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/javascript/overrides"&gt;Overrides&lt;/a&gt; allow you to store local copies of remote scripts and override them when the page loads. This is great if you have, for example, a slow build process for your whole application and you want to try something out. It is also a great tool to replace annoying scripts from third party web sites without having to use a browser extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-you-can-inspect-and-debug-much-more-than-you-know"&gt;
  &lt;/a&gt;
  5. You can inspect and debug much more than you know!
&lt;/h2&gt;

&lt;p&gt;You may know the Chromium developer tools from browsers like Google Chrome, Brave or Microsoft Edge, but they are available in a lot more environments. Any app that's based on Electron can have them enabled and you can use the Tools to peek under the hood and see how the product was done. This works, for example, in GitHub Desktop, Visual Studio Code, or you can even debug the Developer Tools of the browser using Developer Tools! &lt;/p&gt;

&lt;p&gt;If you inspect the Developer Tools, you will see that they are written in HTML, CSS and TypeScript. It is an exciting environment to use these technologies, as you you know the rendering engine your code will run in - something you never know on the web. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4fyY1b4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6jx25fkji9j6t2rqhjd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fyY1b4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6jx25fkji9j6t2rqhjd.png" alt="Inspecting the Chromium Developer tools with another instance of the developer tools" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The embeddable nature of the tools also allowed us to offer you a way to use them outside the browser. The &lt;a href="https://aka.ms/devtools-for-code"&gt;Microsoft Edge Tools for Visual Studio Code&lt;/a&gt; extension brings the tools to Visual Studio Code. That way you can use the visual debugging tools right next to your code editor and you don't need to jump between the two all the time. This also ties in with the "Console in Visual Studio Code" trick mentioned earlier. When you start a debugging session and you click the Developer Tools icon, the tools will open or - the first time - you will be prompted to install the extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sg22NatC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdw9j12i0lvi1r2p5k4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sg22NatC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdw9j12i0lvi1r2p5k4j.png" alt="Inspect button in the debug bar of Visual Studio Code" width="760" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIroHd9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9ykxy5fbkks0kim5odw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIroHd9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9ykxy5fbkks0kim5odw.png" alt="Microsoft Edge Developer tools open in an instance of Visual Studio Code" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-some-dirty-secrets"&gt;
  &lt;/a&gt;
  6. Some dirty secrets‚Ä¶
&lt;/h2&gt;

&lt;p&gt;Working intimately with developer tools and getting feedback and usage information taught me a few dirty secrets. The first one is that whilst we are all super excited about all the amazing features of developer tools, users only use a very small percentage of them. Many things heralded as the best thing since sliced bread in presentations and video tutorials are hardly every opened, let alone used. I thought this was about a lack of documentation and we spent a massive amount of time to update the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/"&gt;DevTools documentation&lt;/a&gt; to ensure everything in them is described and explained, but that wasn't it. Documentation is something people seem to go to as a last resort when they are stuck and Google/Stack Overflow/Social channels didn't yield any results. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developer-tools-have-become-complex-and-are-overwhelming-a-few-ideas-how-to-fix-that"&gt;
  &lt;/a&gt;
  Developer tools have become complex and are overwhelming - a few ideas how to fix that
&lt;/h3&gt;

&lt;p&gt;It might be that the plain fact is that the Developer Tools of browsers grew organically over the years and can be incredibly overwhelming to look at. And that bothers me and I think we should do better. Here's my mantra when it comes to tools for developers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Developer tools should not expect people to be experts but turn them into experts over time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We're working on a few ideas to make that easier, and you will soon see those in Microsoft Edge. One idea we had is a "Focus Mode". Instead of showing you all the tools and tabs we sorted the tools into different use cases, like "Elements/CSS debugging", "Sources/JavaScript Debugging" or "Network inspection". We then show only the relevant tools and hide all the ones that may be confusing or in the way. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ss2-kkPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nrayh4qevkx72toglpz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ss2-kkPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nrayh4qevkx72toglpz.png" alt="Developer tools in focus mode, showing only what's needed in the current context" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another feature we are working on are "informational overlays". You get a help button that allows you to turn on overlays for the developer tools, explaining what each of the tools is, how to use it and providing links to the documentation. We hope that this would make it easier for people to learn about more features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k7jRAfgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v35fjaeur3wfbw0ew5lu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k7jRAfgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v35fjaeur3wfbw0ew5lu.png" alt="Overlays explaining what a certain tool is" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-is-still-a-disconnect-between-authoring-code-and-debugging-the-outcome"&gt;
  &lt;/a&gt;
  There is still a disconnect between authoring code and debugging the outcome
&lt;/h3&gt;

&lt;p&gt;Whilst it is amazing what tools provide us these days there is still a disconnect between authoring and debugging. Most of the time we write our code, create the app and then go to the browser to see what doesn't work. We then use the browser developer tools to tweak and fix these issues. And then comes the big issue we still need to fix: how do you get the changes you created using the browser developer tools back into your code? Most of the time, the answer is "copy and paste or try to remember what needs changing". &lt;/p&gt;

&lt;p&gt;We're currently working on two ways to make this easier. One is to replace the in-devtools editor with Visual Studio Code when it is available and to change files on the hard drive as you use the browser developer tools. The other is part of the VS Code extension and changes the source code in the editor as you use the developer tools but still gives you the final say in changing the file on disk. I &lt;a href="https://blogs.windows.com/msedgedev/2021/10/21/improved-authoring-debugging-devtools-visual-studio-code/"&gt;described the problem and the possible solutions on the Edge blog&lt;/a&gt; or you can watch the following two screencasts to see them in action.&lt;/p&gt;

&lt;p&gt;CSS Mirroring in Visual Studio Code:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sFfnTygHWoI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;What if‚Ä¶ Visual Studio Code became the editor of in-browser Developer Tools?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/77qEmDlFtzg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-youre-the-audience-and-the-clients-of-developer-tools"&gt;
  &lt;/a&gt;
  7. You‚Äôre the audience and the clients of Developer Tools!
&lt;/h2&gt;

&lt;p&gt;As a developer, you are the main audience for Developer Tools. We are open to your feedback and many of the recent changes to the tools are direct results from demands from outside developers. We try to make this as easy as possible by providing in-context ways to contact us directly. For example, the Visual Studio Code extension has prominent links and buttons for you to report issues and request features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MoUWrGUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rn2tycjmtkt2j4fqvk1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MoUWrGUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rn2tycjmtkt2j4fqvk1.png" alt="Screenshot of the in-context links provided in the VS Code extension to demand new features, file bugs and learn abour experiments" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/microsoft/vscode-edge-devtools%20is%20also%20on%20GitHub"&gt;source code of the extension&lt;/a&gt; and you can &lt;a href="https://github.com/microsoft/vscode-edge-devtools/issues"&gt;file issues&lt;/a&gt; there.&lt;/p&gt;

&lt;p&gt;The in-browser developer tools also have a direct button to give us feedback. To make it easier for you to provide actionable feedback, the button includes a lot of automatic information. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qM8Qe7KY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1c92bkpsewevhdm55hjs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qM8Qe7KY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1c92bkpsewevhdm55hjs.png" alt="The feedback tool built into the browser developer tools of Microsoft Edge" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It records automatically what URL the issue happened on, takes a screenshot to include and offers to send diagnostic data. We also ask for you to provide an email in case we need more information and you can add attachments and info how to recreate the issue. We check this feedback daily, and a lot of great inventions and bug fixes came from that source.&lt;/p&gt;

</description>
      <category>developertools</category>
      <category>browsers</category>
      <category>webdev</category>
      <category>vscode</category>
    </item>
    <item>
      <title>I made an app to enjoy HalloweenüéÉü¶áüï∏</title>
      <author>Yuiko Ito</author>
      <pubDate>Mon, 01 Nov 2021 19:00:22 +0000</pubDate>
      <link>https://dev.to/yuikoito/i-made-an-app-to-enjoy-halloween-oif</link>
      <guid>https://dev.to/yuikoito/i-made-an-app-to-enjoy-halloween-oif</guid>
      <description>&lt;p&gt;Hey guys,&lt;/p&gt;

&lt;p&gt;It was &lt;strong&gt;Halloween&lt;/strong&gt; day, but in this self-restraint mode, it's hard to go out and enjoy dressing up in costumes.&lt;br&gt;
So I made an app that lets you enjoy Halloween online!&lt;/p&gt;

&lt;p&gt;Halloween has already passed, but you can even enjoy this app!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gyazo.com/fe4f1b710173805406e395bf961f85eb"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mMPzLf1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gyazo.com/fe4f1b710173805406e395bf961f85eb.gif" alt="Image from Gyazo" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;a href="https://ohmyface.ai/"&gt;https://ohmyface.ai/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;The usage is as shown in the following slide.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MTIme8rD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m8ey77jxm3vutccup77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MTIme8rD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m8ey77jxm3vutccup77.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, when you visit to &lt;a href="https://ohmyface.ai/"&gt;https://ohmyface.ai/&lt;/a&gt;, you can choose a favorite style from this week's popularity ranking or the overall ranking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8BFoTsnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfdzu0p33vwyecu38acq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8BFoTsnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfdzu0p33vwyecu38acq.png" alt="Image description" width="880" height="561"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This ranking is based on the number of styles converted, and is updated daily at 9pm (JTC).&lt;/p&gt;

&lt;p&gt;Once you have selected a style, all you have to do is just upload the image you want!&lt;br&gt;
The loading process will run automatically and the image will be converted.&lt;/p&gt;

&lt;p&gt;Don't worry, the uploaded images are not retained by the server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#composition"&gt;
  &lt;/a&gt;
  Composition
&lt;/h2&gt;

&lt;p&gt;The configuration is as follows.&lt;/p&gt;

&lt;p&gt;Backend...python&lt;br&gt;
Infrastructure...AWS (API gateway, Lambda, dynamo DB, s3)&lt;br&gt;
Frontend...Next.js + TypeScript + Chakra UI&lt;/p&gt;

&lt;p&gt;In order to develop the ranking, I created an API to post which style the image was converted in, along with a timestamp, then store the data in dynamo.&lt;/p&gt;

&lt;p&gt;In order to aggregate the data, I create a Lambda function that returns the style data sorted by the number of conversions, and save the results in another table in dynamo.&lt;br&gt;
That Lambda function is run once a day by EventBridge.&lt;/p&gt;

&lt;p&gt;Then, I also created an API to access the dynamo table where the aggregate results are stored and retrieve the data, and call it from the client side to display the ranking order.&lt;/p&gt;

&lt;p&gt;For the frontend, I used the usual Next.js + TypeScript, but this time I used &lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt; for the first time.&lt;br&gt;
It was very easy to use, and I'll use again for sure!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;Halloween is over, but I think it's an app that can be enjoyed even after Halloween, so I'd be happy if you could play it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contact"&gt;
  &lt;/a&gt;
  Contact
&lt;/h2&gt;

&lt;p&gt;Please send me a message if you need.&lt;/p&gt;

&lt;p&gt;&lt;a href="mailto:yuiko.dev@gmail.com"&gt;yuiko.dev@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/yui_active"&gt;https://twitter.com/yui_active&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>typescript</category>
      <category>aws</category>
    </item>
    <item>
      <title>Using Font Ligatures in VS Code</title>
      <author>Sam Wronski</author>
      <pubDate>Mon, 01 Nov 2021 18:36:40 +0000</pubDate>
      <link>https://dev.to/worldofzero/using-font-ligatures-in-vs-code-4lpb</link>
      <guid>https://dev.to/worldofzero/using-font-ligatures-in-vs-code-4lpb</guid>
      <description>&lt;p&gt;Font ligatures combine multiple characters into a single unique character. Some fonts provide ligatures specifically for software development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nX7DzKhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l3iggkf8snkk158mm0fm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nX7DzKhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l3iggkf8snkk158mm0fm.png" alt="Font Ligatures in VS Code infographic" width="880" height="749"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some free fonts that support ligatures are:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Font&lt;/th&gt;
&lt;th&gt;Reference&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cascadia Code&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/microsoft/cascadia-code"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fira Code&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/tonsky/FiraCode"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JetBrains Mono&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.jetbrains.com/lp/mono/"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Iosevka&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/be5invis/Iosevka"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hasklig&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/i-tu/Hasklig"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Monoid&lt;/td&gt;
&lt;td&gt;&lt;a href="https://larsenwork.com/monoid/"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Victor Mono&lt;/td&gt;
&lt;td&gt;&lt;a href="https://rubjo.github.io/victor-mono/"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;To enable font ligatures in Visual Studio Code you will need to edit the &lt;code&gt;settings.json&lt;/code&gt; file. To do this open the VS Code settings (File -&amp;gt; Preferences -&amp;gt; Settings) select the Text Editor group and Font settings. Replace the name of the font with the font you would like to use. For example if you would like to use Cascadia Code then replace the font with &lt;code&gt;Cascadia Code&lt;/code&gt;. You may include fallback fonts that will be used if the first font is not available. &lt;code&gt;Cascadia Code, Fira Code&lt;/code&gt; will prioritize Cascadia Code but use Fira Code if Cascadia Code isn't available on the current machine.&lt;/p&gt;

&lt;p&gt;Once you've configured the font you'll need to explicitly enable ligatures. This is a separate option and requires you to modify the &lt;code&gt;settings.json&lt;/code&gt; file directly. You will need to add the &lt;code&gt;"editor.fontLigatures"&lt;/code&gt; setting to your &lt;code&gt;settings.json&lt;/code&gt; settings file. Once this is done your settings should include two lines that look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.fontFamily"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*** Your ligature enabled font ***"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.fontLigatures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"your other settings"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've made these changes you should be ready to start taking advantage of ligatures in your code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Different fonts may support a different set of ligatures.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Do you own a domain name without a purpose? Let me give you a project for it!</title>
      <author>InHuOfficial</author>
      <pubDate>Mon, 01 Nov 2021 18:28:39 +0000</pubDate>
      <link>https://dev.to/inhuofficial/do-you-own-a-domain-name-without-a-purpose-let-me-give-you-a-project-for-it-5kn</link>
      <guid>https://dev.to/inhuofficial/do-you-own-a-domain-name-without-a-purpose-let-me-give-you-a-project-for-it-5kn</guid>
      <description>&lt;p&gt;In a rush? Head down to the comments and share a domain name you own without a purpose, I (and hopefully some others) will give you a fun side project idea for it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-those-not-in-a-rush"&gt;
  &lt;/a&gt;
  For those not in a rush!
&lt;/h2&gt;

&lt;p&gt;I own quite a few domain names. I recently wrote about my emoji domain &lt;a href="https://dev.to/inhuofficial/i-own-to-2lkc"&gt;üë©‚Äçüíªüë®‚Äçüíª.to&lt;/a&gt;, I also &lt;a href="https://dev.to/inhuofficial/i-own-a-tiny-piece-of-internet-history-plus-a-little-puzzle-to-keep-you-busy-this-weekend-559"&gt;own a domain name purely for the fact it sits on the million dollar homepage&lt;/a&gt; and is a part of internet history! &lt;/p&gt;

&lt;p&gt;I even bought a domain name a few years ago that I still think could be great for a codepen competitor - &lt;strong&gt;codersplayground.co.uk&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Oh and don't forget &lt;a href="https://ultimatemotherfuckingwebsite.com"&gt;ultimatemot*******kingwebsite.com (&lt;b&gt;Warning, do not click this link if swearing offends you&lt;/b&gt;)&lt;/a&gt;, which is probably the naughtiest domain I own and actually use!&lt;/p&gt;

&lt;p&gt;Today, for the first time in a while, I bought a domain name that not only fit a big side project beautifully, but would also work for loads of different use cases.&lt;/p&gt;

&lt;p&gt;It is probably the "best" (best when talking about commercial viability and an obvious use case) I have bought. In fact, I am that amazed it wasn't taken it prompted this whole article!&lt;/p&gt;

&lt;p&gt;The domain is:&lt;/p&gt;





&lt;center&gt;&lt;a href="https://a2z.dev"&gt;a2z.dev&lt;/a&gt;&lt;/center&gt;



&lt;p&gt;I will be writing loads about that domain as it will feature heavily in my content creation strategy over the next year, but it had me thinking about all the domains I have bought over the years that maybe weren't as great! &lt;/p&gt;

&lt;p&gt;Then I realised I can't be the only one with random domains (or really good domains that you are surprised weren't taken) sat idle and needing a purpose!&lt;/p&gt;

&lt;p&gt;So that leads me to the question:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-many-of-you-have-random-domains-with-no-purpose"&gt;
  &lt;/a&gt;
  How many of you have random domains with no purpose?
&lt;/h2&gt;

&lt;p&gt;As I said I have several domains that are good (and some not so good ones!), but have no purpose at the moment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And I certainly can't be the only one.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So put your unused domain name into the comments below and I will come up with a fun project and possibly a serious project as well that you could build around that domain name!&lt;/p&gt;

&lt;p&gt;I want to see who has a) the best domain name (can you beat a2z.dev?) and b) the silliest domain name.&lt;/p&gt;

&lt;p&gt;Hopefully a bit of fun coming up with ideas for how to use a domain name will turn into a silly side project, that then turns into something beautiful and massive, and we can all say that it started here and we helped make it happen! üòÅ&lt;/p&gt;






&lt;center&gt;&lt;strong&gt;Add your domain name(s) below that you want a project for and I (and hopefully others) will come up with a killer idea!&lt;/strong&gt;&lt;/center&gt; 




</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>webdev</category>
      <category>startup</category>
    </item>
    <item>
      <title>Variable Hoisiting in javascript</title>
      <author>Babi-B</author>
      <pubDate>Mon, 01 Nov 2021 18:17:48 +0000</pubDate>
      <link>https://dev.to/babib/variable-hoisiting-in-javascript-m8</link>
      <guid>https://dev.to/babib/variable-hoisiting-in-javascript-m8</guid>
      <description>&lt;p&gt;Hey! So today I was reviewing some of the basic syntax of javascript and I came across javascript hoisting. It completely surprised. I have used javascript before (mostly ES6 for variable declaration) but never came across hoisting (ü§î maybe I did but don't remember).&lt;/p&gt;

&lt;p&gt;For anyone wondering hoisting in js is a default behavior where all variable declarations(those declared using the &lt;em&gt;var&lt;/em&gt; keyword) are moved to the top of the scope before code execution&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EIWU-VlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu0bnw7onsmefcijndja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EIWU-VlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu0bnw7onsmefcijndja.png" alt="variable hoisting illustration" width="317" height="147"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the advantage of this is that you can use a variable even before declaring it and you can declare it where ever you wish(within its given scope).&lt;/p&gt;

&lt;p&gt;However with ES6 (&lt;em&gt;let&lt;/em&gt; and &lt;em&gt;const&lt;/em&gt;) this is prevented that is a variable must be declared before used.&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>todayisearched</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is React #day31</title>
      <author>Al Siam</author>
      <pubDate>Mon, 01 Nov 2021 18:04:07 +0000</pubDate>
      <link>https://dev.to/alsiamworld/what-is-react-day31-40ch</link>
      <guid>https://dev.to/alsiamworld/what-is-react-day31-40ch</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day31"&gt;
  &lt;/a&gt;
  100daysofcode #day31
&lt;/h1&gt;

&lt;p&gt;What Is React?&lt;br&gt;
=&amp;gt; React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called ‚Äúcomponents‚Äù.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#devcommunity"&gt;
  &lt;/a&gt;
  DEVcommunity
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#programming-react-javascript"&gt;
  &lt;/a&gt;
  programming #react #javascript
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhlLTYdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq8dpkqzegguw0lt15va.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhlLTYdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq8dpkqzegguw0lt15va.png" alt="Image description" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How a single JSON file could become your entire code base</title>
      <author>F√°bio M Jr</author>
      <pubDate>Mon, 01 Nov 2021 18:03:56 +0000</pubDate>
      <link>https://dev.to/zelcion/how-a-single-json-file-could-become-your-entire-code-base-356j</link>
      <guid>https://dev.to/zelcion/how-a-single-json-file-could-become-your-entire-code-base-356j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;Well, it is no news for us that developing software is expensive, and takes A LOT of time and effort, after all, we're talking about code, &lt;strong&gt;good code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It is that kind of code which solves a problem, and it does so while being elegant and readable... But doing that is hard, and here is where we touch the surface of a difficult problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good code is really expensive, and inaccessible for most people and companies.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not only bad/faulty code often fails to solve the problem it should, it also becomes the own problem. I bet you once had to understand the incredibly messy class system of a legacy code base, just because you were tasked to fix a "simple" bug.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-theory"&gt;
  &lt;/a&gt;
  My theory
&lt;/h3&gt;

&lt;p&gt;I have a fun personal theory, that all ever created about code can be somewhat traced back to the code accessibility problem, with the sole purpose of making it bit by bit a little easier.&lt;/p&gt;

&lt;p&gt;People started using C so they do not need to move bytes manually so often. On the web, the rise of JQuery led to more and more complex and capable websites, which was a thing only to dream about. Then came Java, C#, ReactJS, tools like Docker, and uncountable others goodies to make our life better.&lt;/p&gt;

&lt;p&gt;However, &lt;strong&gt;the "writing good code" problem still persists&lt;/strong&gt;, though adapted to the current scenarios.&lt;/p&gt;

&lt;p&gt;Honestly, I don't think this problem has a definitive solution. As our society and technology gets more capable and complex, so does our problems; but I do think we can do better to make software more accessible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-code-accessible-and-cheaper"&gt;
  &lt;/a&gt;
  Making code Accessible and Cheaper
&lt;/h2&gt;

&lt;p&gt;Now, what if such "good code" could be written only once, and all of us could freely use that code for our own purposes? What if we can chain multiple good codes together, while not needing to write boilerplate code for that?&lt;/p&gt;

&lt;p&gt;Perhaps, even better, &lt;strong&gt;we could be writing only the absolutely necessary code for our use case&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here's where that JSON comes in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-as-data"&gt;
  &lt;/a&gt;
  Code as Data
&lt;/h3&gt;

&lt;p&gt;Before we begin, for "code as data" to exist, tho following must be true:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If It is possible to represent any code as a piece of information, it is possible to organize it to compose features and functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Luckily for us, data can represent anything.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Don't believe me? Try giving this a read:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"variables"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"highestAllowedNumber"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"procedureName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"if"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"boolean"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"procedureName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"higherThan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"functionInput1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"targetValue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"highestAllowedNumber"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"then"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"procedureName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stdOut"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"too high!"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"else"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"procedureName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stdOut"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"you're fine."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the user input is higher than 3, we will get a message: "Too high!"&lt;/p&gt;

&lt;p&gt;Now, perhaps you're asking yourself, what is the difference from this to regular code?&lt;/p&gt;

&lt;p&gt;At first glance not too much, however, &lt;strong&gt;in practice they are fundamentally different&lt;/strong&gt;. You cannot execute this data, but you can parse it into code (good code too!), then execute it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-as-code"&gt;
  &lt;/a&gt;
  Data as Code
&lt;/h3&gt;

&lt;p&gt;If we think about it, a good part of programming is converting information of a business process into a language the computer can more readily work with.&lt;/p&gt;

&lt;p&gt;Try making this simple exercise. Get that data from the last section and write it in JavaScript, then C#, then C++.&lt;/p&gt;

&lt;p&gt;After completing it, I think you can somewhat visualize that we can tell a computer make this conversion for us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-and-you-making-code-accessible"&gt;
  &lt;/a&gt;
  Data and You Making Code Accessible
&lt;/h3&gt;

&lt;p&gt;Oversimplifying for the sake of comprehension, let's say you've written the best, unrivaled, &lt;code&gt;if statement&lt;/code&gt; there is, and it could be represented by the same data structure we saw above.&lt;/p&gt;

&lt;p&gt;If we manage to get data which correctly represents our intentions, it can become the best code we have, while not even thinking about its implementation at all. For best results, make it &lt;strong&gt;open source&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-a-single-json-file-could-become-your-entire-code-base"&gt;
  &lt;/a&gt;
  How a single JSON file could become your entire code base
&lt;/h2&gt;

&lt;p&gt;Right now, I bet the title is not that far from reality, comparing what it initially seemed to be for you. Well, actually, such thing already exists, and here's a &lt;a href="https://github.com/mapikit/pet-store"&gt;WIP example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This was made possible by using &lt;a href="https://mapikit.github.io/meta-system-docs/"&gt;Meta-System&lt;/a&gt;, an open source software in which I had the pleasure of working on. It makes software accessible, while also providing you a way to contribute to such accessibility.&lt;/p&gt;

&lt;p&gt;Check the &lt;a href="https://github.com/mapikit/meta-system"&gt;Repository&lt;/a&gt;, and join the &lt;a href="https://discord.gg/ndGsnbTW7V"&gt;discord&lt;/a&gt;, where we talk about making the world of software more welcoming and less challenging.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>productivity</category>
      <category>opensource</category>
    </item>
    <item>
      <title>React state management: Context API vs Recoil üéØ</title>
      <author>Tuomo Kankaanp√§√§</author>
      <pubDate>Mon, 01 Nov 2021 17:49:08 +0000</pubDate>
      <link>https://dev.to/tumee/react-state-management-context-api-vs-recoil-30mb</link>
      <guid>https://dev.to/tumee/react-state-management-context-api-vs-recoil-30mb</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://www.tuomokankaanpaa.com/newsletter"&gt;my newsletter&lt;/a&gt; last week. I publish previous week's newsletter here on the blog. If you want to read these as soon as they are published, &lt;a href="https://www.tuomokankaanpaa.com/newsletter"&gt;sign up&lt;/a&gt; for the newsletter!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ahoy,&lt;/p&gt;

&lt;p&gt;For the past week I have been diving more into React state management. Especially I have learned more about Recoil and the Context API. I also published a new video on the Youtube channel listing some of my favourite Github repos for developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-context-api-vs-recoil"&gt;
  &lt;/a&gt;
  React Context API vs Recoil
&lt;/h2&gt;

&lt;p&gt;I found myself needing some sort of state management for a small React application. I have previously worked with Redux, but in this case I felt like it would just be overkill to use Redux and I would be better off with something a bit lighter.&lt;/p&gt;

&lt;p&gt;So even though there is bunch of different state management options available when it comes to React applications, I decided to test the &lt;a href="https://reactjs.org/docs/context.html"&gt;Context API&lt;/a&gt; and &lt;a href="https://github.com/facebookexperimental/Recoil"&gt;Recoil&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was able to create a working "Redux-like" solution using the Context API based on &lt;a href="https://kentcdodds.com/blog/how-to-use-react-context-effectively"&gt;this&lt;/a&gt; blog post by Kent C Dodds. It worked well but it still had some boilerplate code that could probably be avoided. So it was Recoil's turn.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5E8L5y8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7s59m01p2dj2i6lf2t1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5E8L5y8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7s59m01p2dj2i6lf2t1.png" alt="Recoil"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recoil turned out to be super handy and easy to understand. The learning curve was super shallow and I was able to get the hang of it pretty quickly.&lt;/p&gt;

&lt;p&gt;With Recoil it was easy to create a new piece of state and then just use it across the application. I'm not going to go any deeper right now on how Recoil works. Let me know if you would like to see Recoil demo or tutorial video and I shall do that.&lt;/p&gt;

&lt;p&gt;The downside with Recoil is that it is still "an experimental set of utilities for state management with React.". So using it in production might be a bit sketchy.&lt;/p&gt;

&lt;p&gt;I tried to find out if Recoil has some kind of roadmap or information on when they are planning on lifting the experimental status, but with no luck. So I guess time will tell when that is happening.&lt;/p&gt;

&lt;p&gt;At first I was a bit sceptical about Recoil, thinking that it might just be "another state management library" but I am happy to be proven wrong.&lt;/p&gt;

&lt;p&gt;Regardless of Recoil's experimental status, I am definitely going to keep using Recoil on smaller apps in the future. Given that it is developed by Facebook, it has over 14k stars on Github and bunch of contributors and users, chances are it is not going anywhere and it will keep getting better over time.&lt;/p&gt;

&lt;p&gt;I would love to hear your experiences on state management with React apps, what are you using and why? You can &lt;a href="https://www.twitter.com/tumee"&gt;tweet&lt;/a&gt; your answer to me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-github-repos-for-web-developers"&gt;
  &lt;/a&gt;
  Top Github repos for Web developers
&lt;/h2&gt;

&lt;p&gt;As usual, I published one video on the &lt;a href="https://www.youtube.com/tuomokankaanpaa"&gt;Youtube channel&lt;/a&gt; this week.&lt;/p&gt;

&lt;p&gt;There are bunch of different repos that I use and that have helped me over the time. So in this video I share 7 amazing repositories that will help you as a developer!&lt;/p&gt;

&lt;p&gt;You can watch the video below. If you are not yet subscribed to the Youtube channel you can do it from &lt;a href="https://www.youtube.com/channel/UC34UXFLKqdW3cpk5CBu2Siw?sub_confirmation=1"&gt;this link&lt;/a&gt;. By subscribing you get notified on all the latest videos and it is a great way to show your support for me!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UAzWXI_tJyg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That's it for this week!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br&gt;
Tuomo&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Environments in software development</title>
      <author>Mehammed Teshome</author>
      <pubDate>Mon, 01 Nov 2021 17:13:14 +0000</pubDate>
      <link>https://dev.to/checoslbches/environments-in-software-development-b3e</link>
      <guid>https://dev.to/checoslbches/environments-in-software-development-b3e</guid>
      <description>&lt;p&gt;in software development you will encounter different environments. these are the highlevel view of these different environments.&lt;/p&gt;

&lt;p&gt;Basically there are 3 software environments.these are &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Runtime Environment&lt;/li&gt;
&lt;li&gt;Build Environment&lt;/li&gt;
&lt;li&gt;Development Environment&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;so now we will see them in detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-runtime-environment"&gt;
  &lt;/a&gt;
  1. Runtime environment
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;everything you need to execute a program, but no tool to change it. it act as small operating systems and provide¬†all the functionality**¬†necessary for a¬†program to run. This includes interfaces to physical parts of the hardware, user interactions, and software components.&lt;/li&gt;
&lt;li&gt;it is an environment which supports the execution of a program/process. for a program to execute , it requires runtime environment and it provide your program the services like ( resident memory(RAM), resources such as file, socket and others, environment variables, proper initialization  and proper disposal).&lt;/li&gt;
&lt;li&gt;it's an environment for the program , like the physical environment is for us.&lt;/li&gt;
&lt;li&gt;so programs/process cannot sustain without runtime environment.&lt;/li&gt;
&lt;li&gt;can be a virtual machines&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;in fact, almost all programming languages use one of three kinds of runtime environment, whose essential structure does not depend on the specific details of the target machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These three kind of runtime environmenta are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;fully static environment( example¬†FORTRAN77)&lt;/li&gt;
&lt;li&gt;stack-based environment(C,C++)&lt;/li&gt;
&lt;li&gt;Fully dynamic environment(LISP)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#wellknown-examples-of-runtime-environments"&gt;
  &lt;/a&gt;
  Well-known examples of runtime environments
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;java runtime environment(JRE) for java,&lt;/li&gt;
&lt;li&gt;Common language runtime(CLI) for .NET framework,&lt;/li&gt;
&lt;li&gt;Browser and Nodejs for JavaScript.&lt;/li&gt;
&lt;li&gt;ActionScript Application(ASAP); offer building block for flash developers.&lt;/li&gt;
&lt;li&gt;crystal Space : include a 3D engine and used for game development.&lt;/li&gt;
&lt;li&gt;Cygwin : a runtime environment for Linux applications that allows them to run on other os(windows, mac and others..)&lt;/li&gt;
&lt;li&gt;.Net framework : for windows .NET applications&lt;/li&gt;
&lt;li&gt;WINE : RTE for windows application to run on other operating systems , such as linux and macOS.&lt;/li&gt;
&lt;li&gt;Deno : a runtime environment for js and typescript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-build-environement"&gt;
  &lt;/a&gt;
  2. Build environement
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;everything you need to compile a code .&lt;/li&gt;
&lt;li&gt;it refers to how the application is assembled for deployment.&lt;/li&gt;
&lt;li&gt;deployment may be a library or an executable.&lt;/li&gt;
&lt;li&gt;tools are the compilers, scripting tools, code generators , host servers , build automation , test suits and other source repositories .&lt;/li&gt;
&lt;li&gt;datas are : scripts , libraries , configuration files , language definition's and metadata's.&lt;/li&gt;
&lt;li&gt;simalar to development environment but is more about consistent builds, deployement and testing and less about debugging&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-development-environments"&gt;
  &lt;/a&gt;
  3. Development environments
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A development environment is¬†the collection of processes and tools that are used to develop the source code for a program or software product.&lt;/li&gt;
&lt;li&gt;helps the developers to develop the application or product using a set of processes and programming tools.&lt;/li&gt;
&lt;li&gt;everything you need to write a code , built it and test it.&lt;/li&gt;
&lt;li&gt;examples are code editors like VS code, Eclipse, Netbeans&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are various¬†software development environments¬†that a software has to pass through before it can be used.&lt;/p&gt;

&lt;p&gt;The three common software development environments are:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developmentcoding-environment"&gt;
  &lt;/a&gt;
  Development(coding) environment
&lt;/h3&gt;

&lt;p&gt;In this environment, the developers code and build the application. The coding is done on a local machine, and the access is restricted to the developers themselves. Once the developer(s) are confident about a version, they release it to the beta environment for testing purposes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beta-testing-environment"&gt;
  &lt;/a&gt;
  Beta testing environment
&lt;/h3&gt;

&lt;p&gt;This environment is used to test the application. The software is granted access to a limited number of users who test it for some time. Developers can find out whether the code is working correctly as intended or not. Users also provide feedback regarding the application functionality, bugs, or any other features that can be added to the application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#production-environment"&gt;
  &lt;/a&gt;
  Production environment
&lt;/h3&gt;

&lt;p&gt;This is the final stage where the application is ready to be used publicly. Only the most thoroughly tested code and application version makes it to the production environment stage. The production environment can also act as a platform where the final code is stored until the application URL is made public.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>You (probably) don't need that useState + useEffect</title>
      <author>Don Juan Javier</author>
      <pubDate>Mon, 01 Nov 2021 17:06:17 +0000</pubDate>
      <link>https://dev.to/townofdon/you-probably-dont-need-that-usestate-useeffect-3ijh</link>
      <guid>https://dev.to/townofdon/you-probably-dont-need-that-usestate-useeffect-3ijh</guid>
      <description>&lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; hooks were a godsend for the React community. However, like any tool, these can easily be abused.&lt;/p&gt;

&lt;p&gt;Here's one an example of one misuse I've seen a lot in my tenure as a software dev:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyAwesomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// ---- PROBLEMATIC HOOKS: ----&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;itemsLength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setItemsLength&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;someAsyncApiCall&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// ---- UNNECESSARY USAGE OF HOOKS: ----&lt;/span&gt;
  &lt;span class="c1"&gt;// anytime data changes, update the items &amp;amp; the itemsLength&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setItemsLength&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// ...JSX&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem with the above use case is that we are keeping track of some redundant state, specifically &lt;code&gt;items&lt;/code&gt; and &lt;code&gt;itemsLength&lt;/code&gt;. These pieces of data can instead be &lt;strong&gt;derived&lt;/strong&gt; functionally from &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-better-way"&gt;
  &lt;/a&gt;
  A Better Way:
&lt;/h2&gt;

&lt;p&gt;Any data that can be derived from other data can be abstracted and re-written using pure functions.&lt;/p&gt;

&lt;p&gt;This is actually pretty simple to pull off - here is one example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// I always like to protect against bad/unexpected data&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getItemsLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, our component is simplified to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyAwesomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// DERIVED DATA - no need to keep track using state:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemsLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getItemsLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;someAsyncApiCall&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// ...JSX&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;p&gt;The cool thing about this pattern is that &lt;code&gt;getItems&lt;/code&gt; and &lt;code&gt;getItemsLength&lt;/code&gt; are very easy to write unit tests for, as the output will always be the same for a given input.&lt;/p&gt;

&lt;p&gt;Perhaps the above example was a little contrived, but this is definitely a pattern I have seen in a lot of codebases over the years.&lt;/p&gt;

&lt;p&gt;As apps scale, it's important to reduce complexity wherever we can in order to ward off technical debt.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  tl;dr:
&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; hooks is often unavoidable, but if you can, abstract out any data that can be derived from other data using pure functions. The benefits can have huge payoffs down the road.&lt;/p&gt;

&lt;p&gt;Banner Photo by &lt;a href="https://unsplash.com/@lautaroandreani?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Lautaro Andreani&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/react?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>codequality</category>
    </item>
  </channel>
</rss>
