<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Paxful Clone Script- Know better paxful exchange and its features</title>
      <author>jacksonjones</author>
      <pubDate>Sun, 03 Oct 2021 07:44:11 +0000</pubDate>
      <link>https://dev.to/jacksonjonesl2/paxful-clone-script-know-better-paxful-exchange-and-its-features-4lc</link>
      <guid>https://dev.to/jacksonjonesl2/paxful-clone-script-know-better-paxful-exchange-and-its-features-4lc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-paxful"&gt;
  &lt;/a&gt;
  What is Paxful?
&lt;/h2&gt;

&lt;p&gt;In 2014, Ray Youssef and Artur Schaback founded EasyBitz which was then renamed to Paxful, which gets its name from the Latin word for "peace". They had one goal in mind when they created it: to make Bitcoin easier for everyone from businesses to traders.&lt;/p&gt;

&lt;p&gt;In this article, we are supposed to analyze the process of functioning paxful exchange, &lt;strong&gt;&lt;a href="https://radindev.com/paxful-clone-script/"&gt;paxful clone script&lt;/a&gt;&lt;/strong&gt;, benefits, features, functions, white-label paxful clone script, and how to build exchange like paxful.&lt;br&gt;&lt;br&gt;
As of this writing:&lt;br&gt;
Paxful grew their employee count by 26% last year.&lt;br&gt;
Paxful currently has 1 job openings. Paxful's estimated annual revenue is currently $54.3M per year.&lt;br&gt;
Paxful's estimated revenue per employee is $130,000&lt;br&gt;
A lot of big problems in the world revolve around money, specifically earning it and transporting it. Sending money around the world is not fast or cheap in any way, but Paxful changed that.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6p6Pix3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jkvf44h1ghvdneiwlqv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6p6Pix3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jkvf44h1ghvdneiwlqv.jpeg" alt="paxful exchange statistics"&gt;&lt;/a&gt;&lt;br&gt;
Paxful is the p2p cryptocurrency marketplace where buyers and sellers are connected for business. Having over 300 payment methods available on Paxful creates it unbelievably easy to find proper suggestions.&lt;br&gt;
The p2p system of Paxful removes limits. You can think of your Paxful account as your very own financial passport. Also, you can send money and buy things from halfway around the world. &lt;br&gt;
As is the case with most P2P OTC exchange models, Paxful does not custody the fiat or fiat-like wallets, accounts, or instruments (gift cards, for example) used as counterparty to these trades and instead acts as a supervising authority over peers who use these wallets, accounts, or instruments to trade amongst themselves. As such, Paxful does not need to officially connect to the banking or regulatory infrastructure of many of the countries which it operates in. Because of this model, Paxful is able to onboard financially disconnected citizens of developing countries on a level that non-P2P OTC exchanges like Coinbase simply cannot. As of this writing, Paxful services trades in more than 70 currencies around the world and has made much of its traction in geographic regions that many bigger exchanges have not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-what-is-clone-script"&gt;
  &lt;/a&gt;
  First, what is clone script?
&lt;/h2&gt;

&lt;p&gt;A clone script is a replacement code or architecture of an existing website. The purpose of the website clone script is, it helps the entrepreneurs to start business rapidly with popular and unique features and minimize the startup costs. Actually The Clone scripts are the copy of famous online businesses out there in the world. These scripts can be used by entrepreneurs to start their online business at ease.&lt;br&gt;
Some business owners say clone scripts are not legal. But it isn’t. Because cloning a website doesn’t mean that the clone scripts are made from the exact code of the existing website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-benefits-of-using-clone-script"&gt;
  &lt;/a&gt;
  Features and benefits of using clone script
&lt;/h3&gt;

&lt;p&gt;Scalable and Customizable:&lt;br&gt;
Clone scripts are used in developing the clone app and it is very easy to customize the clone scripts according to the requirement of the project of the client. &lt;br&gt;
Quick Launch:&lt;br&gt;
The clone scripts do not take a long time to run as they are predefined scripts and already written and capable to run quickly.&lt;br&gt;
Low Cost:&lt;br&gt;
the clone scripts are open source so we can get that from the original site of the existing app though we do not have to pay any amount hence results in it being cost-effective.&lt;br&gt;
High Success Rate:&lt;br&gt;
The clone scripts are very powerful and we know that these are already used on someone’s site or used by many others though it is bug-free and attracted by the users across the globe. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-purpose-of-clone-scripts"&gt;
  &lt;/a&gt;
  What’s the purpose of clone scripts?
&lt;/h3&gt;

&lt;p&gt;The ultimate purpose of clone scripts is to help budding entrepreneurs to start their own online business hassle-free. Also eliminate the cost and time of development of the business applications. The entrepreneurs can buy the clone script from any of the service providers and customize them based on their preferences.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJYAnvdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3xji1qdgdngfwkpucl4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJYAnvdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3xji1qdgdngfwkpucl4.png" alt="paxful clone script"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-steps-to-build-website-like-paxful"&gt;
  &lt;/a&gt;
  6 steps to build website like paxful
&lt;/h2&gt;

&lt;p&gt;### Step1: Paxful Business Model&lt;br&gt;
Paxful is one of the most advanced clone scripts that you can use for making a high-end crypto trading platform. Using this powerful solution, it is possible for any entrepreneur to create an exchange as impeccable as Paxful. It has made the cryptocurrency exchange development more valuable for all the parties involved. From the developers to the exchange owners, it is prolific for everyone. paxful clone script works on a very strong architectural design that paves way for some big changes. The replication gets easier only because the platform has allowed you to use its technology. Otherwise, the security aspects are unbeatable and the functionality is also matchless. With this program, it is even possible for you to have a very certain style of trade. It brings a string of plugins and features for the users. To guarantee an honest exchange on the website, smart contracts with escrow are used. To reduce fraud, with other methods of exchange on the site, a system of reviews and reputation ratings has been introduced.&lt;br&gt;
The most incredible thing about Paxful is its versatile payment options. This Exchange offers 300+ payment options under six major categories such as&lt;br&gt;
• Bank Transfer&lt;br&gt;
• Online Wallet&lt;br&gt;
• Itune gift card&lt;br&gt;
• Amazon gift card&lt;br&gt;
• Cash in Person&lt;br&gt;
• Cryptocurrencies&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CLvtiFqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbvcdrjsazbbjc9skmzs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CLvtiFqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbvcdrjsazbbjc9skmzs.png" alt="paxful p2p finance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-key-exchange-features"&gt;
  &lt;/a&gt;
  Step 2. Key Exchange Features
&lt;/h3&gt;

&lt;p&gt;Registration. To create a new Paxful account:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Open a web browser and launch the Paxful webpage&lt;/li&gt;
&lt;li&gt; Click Create account on the top right corner of the main page&lt;/li&gt;
&lt;li&gt; Complete the following fields on the signup form&lt;/li&gt;
&lt;li&gt; Click Create Paxful account&lt;/li&gt;
&lt;li&gt; Complete your captcha verification&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;User profiles.  Your public profile contains a summary of your account and your history on Paxful. Also, you can add an avatar (photo or any image), indicate the phone number, main currency and very briefly tell about yourself. In addition, you can configure notification settings in your profile. &lt;br&gt;
Remember that your public profile is visible to other Paxful users. On your public profile, other Paxful users will be able to view the following information about you:&lt;br&gt;
• Username&lt;br&gt;
• Profile picture&lt;br&gt;
• Verification - information if your email, phone, ID or address are verified, and you were verified as a trusted vendor.&lt;br&gt;
• Reputation - an aggregation of the positive and negative feedback that you have received on Paxful.&lt;br&gt;
• Active offers - offers you created that are currently active.&lt;br&gt;
• Your profile language&lt;br&gt;
• Number of trade partners&lt;br&gt;
• Number of trades&lt;br&gt;
• Trade volume - total BTC you’ve traded on Paxful.&lt;br&gt;
• Number of users who trust you&lt;br&gt;
• Number of users who have blocked you&lt;br&gt;
• Time elapsed since you joined Paxful&lt;br&gt;
• Last time you were online on Paxful&lt;br&gt;
Note: Your public profile will contain all the IDs you have earned on Paxful and will help other users decide if you are a safe trade partner or not.&lt;br&gt;
Verification, Know Your Customer (KYC). Paxful is one of the few crypto marketplaces that enforce KYC verification procedures. Verification is an important part of Paxful. Users who fail to verify their identity can continue to use the exchanger, but a limit on the volume of transactions will be set for them.&lt;br&gt;
Cryptocurrency wallet. The Paxful wallet is useful, protected, and easy to use on all your devices. You can simply manage your funds and top up directly through p2p marketplace, and send or receive Bitcoin, in just a few clicks. Over 3 million people have used the Paxful wallet to send and receive over 40,000 BTC. Its best-in-class security features make it one of the most trusted wallets in the world — so you’ll never have to choose between security and convenience.&lt;br&gt;
Security tools. Cryptocurrency holders and traders are especially vulnerable to cyber-attacks since digital currencies only run electronically. This is why choosing a secure and reliable online Bitcoin wallet is very essential. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose a crypto wallet that fits your needs&lt;/li&gt;
&lt;li&gt;Enable two-factor authentication&lt;/li&gt;
&lt;li&gt;Encrypt your Bitcoin wallet&lt;/li&gt;
&lt;li&gt;Backup your entire wallet regularly&lt;/li&gt;
&lt;li&gt;Utilize the multi-signature feature&lt;/li&gt;
&lt;li&gt;Keep your software updated&lt;/li&gt;
&lt;li&gt;Use different passwords for different accounts&lt;/li&gt;
&lt;li&gt;Never give away your private key&lt;/li&gt;
&lt;li&gt;Don’t click on unknown or suspicious links&lt;/li&gt;
&lt;li&gt;Use a secure Internet connection
Cryptocurrency purchase, sale and exchange. 
Over 350 ways to buy and sell Bitcoin: Select a payment method you like and trade directly with other people!
1.Bank Transfers
2.Exchange for Cash
3.Other Wallet (Send to over 140 online wallets worldwide)
4.Discounted Gift Cards
5.Digital Currencies
6.Goods &amp;amp; Services
Escrow. Escrow in the financial sense means an arrangement where a third party (not the buyer or the seller)  holds funds in safekeeping pending the completion of a promised obligation. And enables users to get guaranteed transactions. It is best if it is open source software so that users can verify the integrity of the smart contract and the absence of errors in the code. 
Reviews and rating system. On the Paxful website, users can distinguish reliable counterparties from unscrupulous or scammers. They can be positive, neutral or negative. You can leave a response instantly after the successful completion of the transaction (or its failure). 
Customer support. &lt;/li&gt;
&lt;li&gt; Customizable dashboard&lt;/li&gt;
&lt;li&gt; The ability to view site statistics (activity, trading volume, etc.)&lt;/li&gt;
&lt;li&gt; View user profiles&lt;/li&gt;
&lt;li&gt; Buy-Sell tab&lt;/li&gt;
&lt;li&gt; General information about the platform&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-3-monetization-of-the-cryptocurrency-exchange"&gt;
  &lt;/a&gt;
  Step 3. Monetization of the cryptocurrency exchange
&lt;/h3&gt;

&lt;p&gt;Publication fee. &lt;br&gt;
Buyer creates an escrow account&lt;br&gt;
One of the two parties, either the Buyer or Seller, will initiate the transaction. This process begins when the user inquires about the offering and creates an account on Crypto Exchange. With an account set up, the two parties can solidify the terms of their agreement.&lt;br&gt;
Advertisements. Advertising promotion fees, posters, contextual advertising and paid links - all this is used on the site and in the Paxful application to increase the profitability of the platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-marketing-strategy"&gt;
  &lt;/a&gt;
  Step 4: Marketing Strategy
&lt;/h3&gt;

&lt;p&gt;The paxful cryptocurrency exchange was launched in 2014 and is a peer-to-peer Bitcoin marketplace, has recently entered India. In the first 21 weeks of 2020, Paxful has recorded a minimum of $1 million in weekly volumes. Since the beginning of May 2020, the weekly traded Bitcoin volumes have grown setting three consecutive all-time highs – with the week ending 17th May recording a total of $1.521 million (ATH).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-development-approaches"&gt;
  &lt;/a&gt;
  Step 5. Development approaches
&lt;/h3&gt;

&lt;p&gt;Template Solution. You can create a crypto exchange like Paxful using ready-made software. You can get it for free, for example, on GitHub, or buy for 300 - 1000 dollars. Free solutions usually have poor functionality and are not well tested for errors and other vulnerabilities. Paxful clones software sold may vary by manufacturer.&lt;br&gt;
Development from scratch. A more complex and expensive option to create a Paxful clone software, but it gives you more control over the development process and allows you to implement unique software solutions. The cost of creating a P2P crypto exchanger from scratch usually varies from 20 to 50 thousand dollars.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-get-the-consultation-from-the-experienced-clone-script-providers"&gt;
  &lt;/a&gt;
  Step 6. Get the consultation from the experienced clone script providers
&lt;/h3&gt;

&lt;p&gt;The script is usually developed by well-experienced and qualified experts. They take care of everything from development, design, testing, and deployment, allowing you to focus on just the customization part. There are many advantages involved with purchasing and deploying a Paxful clone script for your business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-paxful-clone-script"&gt;
  &lt;/a&gt;
  What is Paxful Clone Script?
&lt;/h2&gt;

&lt;p&gt;Paxful clone script is the ready-made website script with a 100% source code by which one can easily build a bitcoin exchange just like Paxful. This script has been encrypted with high standard security features and designed based upon the cybersecurity protocols.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ct4hFwE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu87qezv90hl7aqfzzz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ct4hFwE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu87qezv90hl7aqfzzz8.png" alt="White label Paxful Clone Script"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#white-label-paxful-clone-script"&gt;
  &lt;/a&gt;
  White label Paxful Clone Script
&lt;/h2&gt;

&lt;p&gt;White label Paxful Clone Script is a set of source code that contains all trading functionalities of the Paxful exchange website. White label Paxful clone script allows you to customize the features according to the current digital trend &amp;amp; it allows you to change brand name, logo, theme, design according to your business needs at that moment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-benefits-of-paxful-clone-script-to-start-a-p2p-cryptocurrency-exchange-software"&gt;
  &lt;/a&gt;
  The benefits of Paxful clone script to start a P2P cryptocurrency exchange software
&lt;/h3&gt;

&lt;p&gt;• Ready to launch&lt;br&gt;
• Skip development from scratch&lt;br&gt;
• No technical assistance&lt;br&gt;
• Easy customization&lt;br&gt;
• Save time and money&lt;br&gt;
These are benefits you can get to develop a P2P crypto exchange with Paxful clone script.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Icmy_lJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3scklu11gilnpfjvfvd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Icmy_lJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3scklu11gilnpfjvfvd.png" alt="Paxful Clone App Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paxful-clone-app"&gt;
  &lt;/a&gt;
  Paxful Clone App
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#paxful-clone-app-development"&gt;
  &lt;/a&gt;
  Paxful Clone App Development
&lt;/h3&gt;

&lt;p&gt;Paxful Clone App is the cryptocurrency exchange trading app that contains all the crypto trading features of the Paxful app and also the additional features that help you to develop your own Crypto Exchange App such as Paxful. Ultra-fast transaction permits you trade crypto coins in a matter of seconds with 100+ payment gateway support.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o4w2BvN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsjanjuk4mvrduxg5eqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o4w2BvN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsjanjuk4mvrduxg5eqe.png" alt="comparison between 2 exchanges"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-exchange-is-better-paxful-or-binance"&gt;
  &lt;/a&gt;
  Which exchange is better? Paxful or Binance!
&lt;/h3&gt;

&lt;p&gt;Binance is one of the leading online crypto exchanges offering Bitcoin. Paxful is a crypto trading exchange and digital wallet offering low fees and easy sign-up. Buy and sell an extensive list of leading and emerging crypto coins at Binance. Paxful offers buying and selling of the world's leading cryptocurrencies.&lt;br&gt;
Both the exchanges have a lot of positive aspects but if you are a seller, you should go for Binance due to low fees. On the other hand, a beginner might prefer Paxful because Binance’s website is a bit difficult to navigate.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>webdev</category>
      <category>cryptocurrency</category>
      <category>p2p</category>
    </item>
    <item>
      <title>Clean architecture of Flutter application. Part 2 - Practice</title>
      <author>gandronchik</author>
      <pubDate>Sun, 03 Oct 2021 07:36:09 +0000</pubDate>
      <link>https://dev.to/george_andronchik/clean-architecture-of-flutter-application-part-2-practice-3562</link>
      <guid>https://dev.to/george_andronchik/clean-architecture-of-flutter-application-part-2-practice-3562</guid>
      <description>&lt;p&gt;Hello everyone. In the &lt;a href="https://dev.to/george_andronchik/clean-architecture-of-flutter-application-part-1-theory-3b6p"&gt;previous article&lt;/a&gt;, we spoke about clean architecture concepts. Now it's time to implement them.&lt;/p&gt;

&lt;p&gt;For a good understanding, we are going to develop a simple app. The app receives  info about solar flares and storms from the NASA API and presents it on the view.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-project"&gt;
  &lt;/a&gt;
  Create Project
&lt;/h3&gt;

&lt;p&gt;First of all, you have to install flutter. You may check &lt;a href="https://flutter.dev/docs/get-started/install"&gt;here&lt;/a&gt; the installation process.&lt;/p&gt;

&lt;p&gt;After that let’s create a project. There are few ways to do it. The basic way is to create a project by terminal command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter create sunFlare
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have an example of a project. Let's modify it a bit by removing unwanted code and setting up directories.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lBD4mE5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uofs1zivhrz5s9vhdb39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lBD4mE5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uofs1zivhrz5s9vhdb39.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we’ve created directories for each layer (data, domain, and presentation) and another one for the application layer which will contain application initialization and dependency injections. Also, we’ve created files app.dart (app initialization) and home.dart (main view of application). Code of these files you can see below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;main:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/application/app.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;app:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/presentation/home.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="nd"&gt;@override&lt;/span&gt;
 &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
     &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Flutter Demo'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="nl"&gt;theme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
       &lt;span class="nl"&gt;primarySwatch:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
       &lt;span class="nl"&gt;visualDensity:&lt;/span&gt; &lt;span class="n"&gt;VisualDensity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;adaptivePlatformDensity&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="o"&gt;),&lt;/span&gt;
     &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="n"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
   &lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;home:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Home&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="nd"&gt;@override&lt;/span&gt;
 &lt;span class="n"&gt;_HomeState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_HomeState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_HomeState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="nd"&gt;@override&lt;/span&gt;
 &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first step behind and now it’s time to develop a domain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domain"&gt;
  &lt;/a&gt;
  Domain
&lt;/h3&gt;

&lt;p&gt;As you can understand from the &lt;a href="https://dev.to/george_andronchik/clean-architecture-of-flutter-application-part-1-theory-3b6p"&gt;previous article&lt;/a&gt;, the domain layer is the most important part of the application and it’s the first layer you should design. By the way, if you design a backend system, you just think about what entities (aggregators) should exist in the system and design it. So far as we are designing the client application, we already have some initial data (which we fetch from the backend), so we should take it into consideration when designing our domain entities. However, it doesn’t mean we have to use the same data format as we receive from the backend. Our application has its own business logic, so we have to define entities that participate in this process.&lt;/p&gt;

&lt;p&gt;Now then, here is our domain-level models:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:meta/meta.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeoStorm&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;gstId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;GeoStorm&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
   &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gstId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:meta/meta.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SolarFlare&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;flrID&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;endTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;classType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;sourceLocation&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;SolarFlare&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
   &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flrID&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;endTime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;classType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sourceLocation&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to implement a use case for collecting last solar activities (geo storm and solar flare), so let’s define the model first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:meta/meta.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'solar_flare.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'geo_storm.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SolarActivities&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;SolarFlare&lt;/span&gt; &lt;span class="n"&gt;lastFlare&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;GeoStorm&lt;/span&gt; &lt;span class="n"&gt;lastStorm&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;SolarActivities&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
   &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lastFlare&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lastStorm&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fine. Now we have business-level models. Let’s define protocols for repositories returning these models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:meta/meta.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/entities/geo_storm.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeoStormRepo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GeoStorm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getStorms&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
   &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:meta/meta.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/entities/solar_flare.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SolarFlareRepo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SolarFlare&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getFlares&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
   &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And as I’ve promised here is a use case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/entities/solar_activities.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/repos/geo_storm_repo.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/repos/solar_flare_repo.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SolarActivitiesUseCase&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;GeoStormRepo&lt;/span&gt; &lt;span class="n"&gt;_geoStormRepo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;SolarFlareRepo&lt;/span&gt; &lt;span class="n"&gt;_solarFlareRepo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;SolarActivitiesUseCase&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_geoStormRepo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_solarFlareRepo&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

 &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SolarActivities&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getLastSolarActivities&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;fromDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;subtract&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;days:&lt;/span&gt; &lt;span class="mi"&gt;365&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
   &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;toDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

   &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;storms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_geoStormRepo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getStorms&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;from:&lt;/span&gt; &lt;span class="n"&gt;fromDate&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;to:&lt;/span&gt; &lt;span class="n"&gt;toDate&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;flares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_solarFlareRepo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFlares&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;from:&lt;/span&gt; &lt;span class="n"&gt;fromDate&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;to:&lt;/span&gt; &lt;span class="n"&gt;toDate&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SolarActivities&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;lastFlare:&lt;/span&gt; &lt;span class="n"&gt;flares&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;lastStorm:&lt;/span&gt; &lt;span class="n"&gt;storms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Good. Now let me clarify what we’ve done just now. First of all, we designed the data models we needed for our use case. After that, we found out where to get those models from and defined repository protocols. Finally, we implemented a direct use case, which function is to return the last solar activities. It calls functions of repositories, extracts and collects last solar activities and returns it.&lt;/p&gt;

&lt;p&gt;The tree of domain layer directory should looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--12bzlpL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsqokglh7q7bvo57967k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12bzlpL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsqokglh7q7bvo57967k.png" alt="Domain layer directory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve just implemented the core of our application — the business logic. Now it's time to take care of the data layer.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#data"&gt;
  &lt;/a&gt;
  Data
&lt;/h3&gt;

&lt;p&gt;The first step is quite similar to the first step of the previous section - we are going to design the data models which will be fetched from the network.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/entities/geo_storm.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeoStormDTO&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;gstId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;GeoStormDTO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gstId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'gstID'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
       &lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'startTime'&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt;
       &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'link'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/entities/solar_flare.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SolarFlareDTO&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;flrID&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;endTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;classType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;sourceLocation&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;SolarFlareDTO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flrID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'flrID'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
       &lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'beginTime'&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt;
       &lt;span class="n"&gt;endTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'endTime'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'endTime'&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;classType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'classType'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
       &lt;span class="n"&gt;sourceLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'sourceLocation'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
       &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'link'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DTO means Data Transfer Object. It’s an usual name for transport layer models. The models implement constructors parsing JSON.&lt;/p&gt;

&lt;p&gt;The next code snippet contains the implementation of NasaService, which is responsible for NASA API requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:dio/dio.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/data/entities/geo_storm_dto.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/data/entities/solar_flare_dto.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:intl/intl.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NasaService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://kauai.ccmc.gsfc.nasa.gov'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Dio&lt;/span&gt; &lt;span class="n"&gt;_dio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dio&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
   &lt;span class="n"&gt;BaseOptions&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;baseUrl:&lt;/span&gt; &lt;span class="n"&gt;_BASE_URL&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
 &lt;span class="o"&gt;);&lt;/span&gt;

 &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GeoStormDTO&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getGeoStorms&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_dio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
     &lt;span class="s"&gt;'/DONKI/WS/get/GST'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="nl"&gt;queryParameters:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="s"&gt;'startDate'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DateFormat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'yyyy-MM-dd'&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
       &lt;span class="s"&gt;'endDate'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DateFormat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'yyyy-MM-dd'&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;},&lt;/span&gt;
   &lt;span class="o"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GeoStormDTO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

 &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SolarFlareDTO&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getFlares&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_dio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
     &lt;span class="s"&gt;'/DONKI/WS/get/FLR'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="nl"&gt;queryParameters:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="s"&gt;'startDate'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DateFormat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'yyyy-MM-dd'&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
       &lt;span class="s"&gt;'endDate'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DateFormat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'yyyy-MM-dd'&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;},&lt;/span&gt;
   &lt;span class="o"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
       &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SolarFlareDTO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
       &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The service contains methods calling API and returning DTO objects.&lt;/p&gt;

&lt;p&gt;Now we have to extend our DTO models. We are going to implement mappers from data layer models to domain layer models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/entities/geo_storm.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeoStormDTO&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;gstId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;GeoStormDTO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gstId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'gstID'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
       &lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'startTime'&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt;
       &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'link'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="n"&gt;GeoStormMapper&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;GeoStormDTO&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;GeoStorm&lt;/span&gt; &lt;span class="n"&gt;toModel&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;GeoStorm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;gstId:&lt;/span&gt; &lt;span class="n"&gt;gstId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;startTime:&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/entities/solar_flare.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SolarFlareDTO&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;flrID&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;endTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;classType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;sourceLocation&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;SolarFlareDTO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flrID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'flrID'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
       &lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'beginTime'&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt;
       &lt;span class="n"&gt;endTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
           &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'endTime'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'endTime'&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;classType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'classType'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
       &lt;span class="n"&gt;sourceLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'sourceLocation'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
       &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'link'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="n"&gt;SolarFlareMapper&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;SolarFlareDTO&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;SolarFlare&lt;/span&gt; &lt;span class="n"&gt;toModel&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SolarFlare&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
       &lt;span class="nl"&gt;flrID:&lt;/span&gt; &lt;span class="n"&gt;flrID&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
       &lt;span class="nl"&gt;startTime:&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
       &lt;span class="nl"&gt;classType:&lt;/span&gt; &lt;span class="n"&gt;classType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
       &lt;span class="nl"&gt;sourceLocation:&lt;/span&gt; &lt;span class="n"&gt;sourceLocation&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally it’s time to implement repositories which protocols are in the domain layer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/data/services/nasa_service.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/entities/geo_storm.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/repos/geo_storm_repo.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/data/entities/geo_storm_dto.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeoStormRepoImpl&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GeoStormRepo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;NasaService&lt;/span&gt; &lt;span class="n"&gt;_nasaService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;GeoStormRepoImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_nasaService&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

 &lt;span class="nd"&gt;@override&lt;/span&gt;
 &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GeoStorm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getStorms&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_nasaService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getGeoStorms&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toModel&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/data/services/nasa_service.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/entities/solar_flare.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/repos/solar_flare_repo.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/data/entities/solar_flare_dto.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SolarFlareRepoImpl&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;SolarFlareRepo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;NasaService&lt;/span&gt; &lt;span class="n"&gt;_nasaService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;SolarFlareRepoImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_nasaService&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

 &lt;span class="nd"&gt;@override&lt;/span&gt;
 &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SolarFlare&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getFlares&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_nasaService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFlares&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toModel&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The constructors of repositories accept NasaService. Methods call requests, map DTO models to domain models by mappers we have just realized, and return domain models to the domain layer.&lt;/p&gt;

&lt;p&gt;This is how the Data directory should look like now.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcJwt3JI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjt02akeg2kcpogwo16o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcJwt3JI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjt02akeg2kcpogwo16o.png" alt="Data layer directory"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#user-interface"&gt;
  &lt;/a&gt;
  User Interface
&lt;/h3&gt;

&lt;p&gt;Almost there. Domain and Data are behind, now it’s time for Presentation Layer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am not going to write a lot about presentation layer architectures in this article. There is a range of variants and if you are interested in this topic, please let me know in the comments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As long as we decided to use the MVVM pattern for presentation layer architecture, let’s add dependencies for RX.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter:
 ...
 mobx: any
 flutter_mobx: any
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, we need to add packets to dev dependencies to generate files that allow us to use annotations &lt;code&gt;@observable&lt;/code&gt;, &lt;code&gt;@computed&lt;/code&gt;, &lt;code&gt;@action&lt;/code&gt;. Just a bit of syntax sugar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dev_dependencies:
...
 mobx_codegen: any
 build_runner: any
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We already have the view — Home. Just add the file called home_state.dart nearby. This file will contain viewModel (which in flutter is usually called state for some reason). And add the code to the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:mobx/mobx.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/use_cases/solar_activities_use_case.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/entities/solar_activities.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;part&lt;/span&gt; &lt;span class="s"&gt;'home_state.g.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HomeStateBase&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;_$HomeState&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeStateBase&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Store&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;HomeStateBase&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_useCase&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;getSolarActivities&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;SolarActivitiesUseCase&lt;/span&gt; &lt;span class="n"&gt;_useCase&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="nd"&gt;@observable&lt;/span&gt;
 &lt;span class="n"&gt;SolarActivities&lt;/span&gt; &lt;span class="n"&gt;solarActivities&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="nd"&gt;@observable&lt;/span&gt;
 &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="nd"&gt;@action&lt;/span&gt;
 &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getSolarActivities&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;solarActivities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_useCase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLastSolarActivities&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="n"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing special here. We call our use case in the constructor. Also, we have two observable properties — solarActivities and isLoading. solarActivities is just the model returned by the use case. isLoading shows us if the request is in progress. The view will subscribe to these variables soon.&lt;/p&gt;

&lt;p&gt;To generate class &lt;code&gt;home_state.g.dart&lt;/code&gt; (to use &lt;code&gt;@obsevable&lt;/code&gt; annotations), just call the command in terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter packages pub run build_runner build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s come back to our view — home.dart and update it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter_mobx/flutter_mobx.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/presentation/home_state.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Home&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;HomeState&lt;/span&gt; &lt;span class="n"&gt;homeState&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;homeState&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

 &lt;span class="nd"&gt;@override&lt;/span&gt;
 &lt;span class="n"&gt;_HomeState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_HomeState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_HomeState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;_body&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
     &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;homeState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
           &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;CircularProgressIndicator&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
         &lt;span class="o"&gt;);&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
         &lt;span class="nl"&gt;crossAxisAlignment:&lt;/span&gt; &lt;span class="n"&gt;CrossAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stretch&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
         &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
           &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
               &lt;span class="s"&gt;'Last Solar Flare Date: &lt;/span&gt;&lt;span class="si"&gt;${widget.homeState.solarActivities.lastFlare.startTime}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
           &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
               &lt;span class="s"&gt;'Last Geo Storm Date: &lt;/span&gt;&lt;span class="si"&gt;${widget.homeState.solarActivities.lastStorm.startTime}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
         &lt;span class="o"&gt;],&lt;/span&gt;
       &lt;span class="o"&gt;);&lt;/span&gt;
     &lt;span class="o"&gt;},&lt;/span&gt;
   &lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

 &lt;span class="nd"&gt;@override&lt;/span&gt;
 &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;SafeArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;_body&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;HomeState object in initializator as an argument and extremely simple UI. If isLoading == true, we show an activity indicator. If not, we present data of the last solar activities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application"&gt;
  &lt;/a&gt;
  Application
&lt;/h3&gt;

&lt;p&gt;Finish him! We have everything we need, now it's time to keep it together. The application layer includes dependency injections and initializations. Create directory dependencies in the application directory and add two files there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/repos/geo_storm_repo.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/repos/solar_flare_repo.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/data/repos/geo_storm_repo.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/data/repos/solar_flare_repo.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/data/services/nasa_service.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RepoModule&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;GeoStormRepo&lt;/span&gt; &lt;span class="n"&gt;_geoStormRepo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;SolarFlareRepo&lt;/span&gt; &lt;span class="n"&gt;_solarFlareRepo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;NasaService&lt;/span&gt; &lt;span class="n"&gt;_nasaService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NasaService&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

 &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;GeoStormRepo&lt;/span&gt; &lt;span class="n"&gt;geoStormRepo&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_geoStormRepo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;_geoStormRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GeoStormRepoImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_nasaService&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_geoStormRepo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;SolarFlareRepo&lt;/span&gt; &lt;span class="n"&gt;solarFlareRepo&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_solarFlareRepo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;_solarFlareRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SolarFlareRepoImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_nasaService&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_solarFlareRepo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/domain/use_cases/solar_activities_use_case.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/presentation/home_state.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'repo_module.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeModule&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;HomeState&lt;/span&gt; &lt;span class="n"&gt;homeState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HomeState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SolarActivitiesUseCase&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
       &lt;span class="n"&gt;RepoModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;geoStormRepo&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;RepoModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;solarFlareRepo&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Come back to app.dart and throw &lt;code&gt;HomeModule.homeState()&lt;/code&gt; to Home constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/application/dependencies/home_module.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:sunFlare/presentation/home.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="nd"&gt;@override&lt;/span&gt;
 &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
     &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Flutter Demo'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="nl"&gt;theme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
       &lt;span class="nl"&gt;primarySwatch:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
       &lt;span class="nl"&gt;visualDensity:&lt;/span&gt; &lt;span class="n"&gt;VisualDensity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;adaptivePlatformDensity&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="o"&gt;),&lt;/span&gt;
     &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="n"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;homeState:&lt;/span&gt; &lt;span class="n"&gt;HomeModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;homeState&lt;/span&gt;&lt;span class="o"&gt;()),&lt;/span&gt;
   &lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the application and enjoy the result :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2N3-L5g---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r64o24ritasrzek36fr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2N3-L5g---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r64o24ritasrzek36fr7.png" alt="Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! We’ve got it. Now you understand how to build the clean architecture of the flutter application. In case you don’t understand something, feel free to ask me in the comments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full code example you can find at&lt;/strong&gt; &lt;a href="https://github.com/gandronchik/flutter_clean_arch"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>architecture</category>
      <category>dart</category>
    </item>
    <item>
      <title>Store Image in Sqlite Database</title>
      <author>rrtutors</author>
      <pubDate>Sun, 03 Oct 2021 07:10:16 +0000</pubDate>
      <link>https://dev.to/rrtutors/store-image-in-sqlite-database-4mje</link>
      <guid>https://dev.to/rrtutors/store-image-in-sqlite-database-4mje</guid>
      <description>&lt;p&gt;How to &lt;a href="https://rrtutors.com/tutorials/store-image-in-sqlite-in-android-with-room-database"&gt;store Image in Sqlite&lt;/a&gt; in Android using the Room database&lt;br&gt;
Create Room Database&lt;br&gt;
Pick Image from Gallery&lt;br&gt;
store Image and Contact info in the Sqlite database with Room Database.&lt;br&gt;
Fetch Image from Sqlite Database and display it on Recyclerview&lt;/p&gt;

&lt;p&gt;To store image in sqlite we need to convert image to bytes from the file and then store into sqlite database&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;BitmapFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decodeFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imagePath&lt;/span&gt;
            &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Bitmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CompressFormat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;JPEG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="nl"&gt;imageInByte:&lt;/span&gt; &lt;span class="nc"&gt;ByteArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toByteArray&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

            &lt;span class="nc"&gt;MyDatabase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;!!.&lt;/span&gt;&lt;span class="na"&gt;contactsDAO&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Contact&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;!!,&lt;/span&gt;&lt;span class="n"&gt;imageInByte&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9BIw4PRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/add-contact.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9BIw4PRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/add-contact.png" alt="Image to Sqlite Database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above code first we need to convert image to bitmap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;BitmapFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decodeFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imagePath&lt;/span&gt;
            &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then From the bitmap we need to fetch bytearray&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;val stream = ByteArrayOutputStream()
            image.compress(Bitmap.CompressFormat.JPEG, 100, stream)
            val imageInByte: ByteArray = stream.toByteArray()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we need to insert butearray into database by insert query.&lt;/p&gt;

</description>
      <category>android</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Customizable PDF viewer with self-built PDF.js</title>
      <author>Pacharapol Withayasakpunt</author>
      <pubDate>Sun, 03 Oct 2021 06:53:20 +0000</pubDate>
      <link>https://dev.to/patarapolw/customizable-pdf-viewer-with-self-built-pdf-js-194o</link>
      <guid>https://dev.to/patarapolw/customizable-pdf-viewer-with-self-built-pdf-js-194o</guid>
      <description>&lt;p&gt;At first glances, PDF viewer seems to be as easy as opening a PDF URL in an Iframe; however, not only uncustomizable, but also, if some browsers doesn't support PDF browsing, it could be a problem.&lt;/p&gt;

&lt;p&gt;A solution to this would be &lt;a href="https://github.com/mozilla/pdf.js"&gt;Mozilla's PDF.js&lt;/a&gt;. However, the PDF viewer isn't prebuilt for you in &lt;a href="https://github.com/mozilla/pdfjs-dist"&gt;pdf.js-dist&lt;/a&gt;, only some minimal JavaScript files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-pdfjs-by-yourself"&gt;
  &lt;/a&gt;
  Building PDF.js by yourself
&lt;/h2&gt;

&lt;p&gt;By this way, it will also build the PDF viewer (which is normally used in Mozilla Firefox). You can also customize HTML, CSS and JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init
npm i gulp-cli
git submodule add https://github.com/mozilla/pdf.js.git
&lt;span class="nb"&gt;cd &lt;/span&gt;pdf.js
npm i

&lt;span class="c"&gt;# Edit web/app_options.js (for default PDF); and `web/viewer.html or CSS files (for UI) to your liking&lt;/span&gt;

npx gulp generic
&lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; build/generic ../pdf.js-dist
&lt;span class="nb"&gt;cd&lt;/span&gt; -
npx http-server pdf.js-dist &lt;span class="nt"&gt;-o&lt;/span&gt; /web/viewer.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#i-already-built-it-for-you"&gt;
  &lt;/a&gt;
  I already built it for you
&lt;/h2&gt;

&lt;p&gt;This is here. Just copy the &lt;a href="https://github.com/patarapolw/pdf.js-viewer/tree/main/dist"&gt;&lt;code&gt;/dist&lt;/code&gt;&lt;/a&gt; folder.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/patarapolw"&gt;
        patarapolw
      &lt;/a&gt; / &lt;a href="https://github.com/patarapolw/pdf.js-viewer"&gt;
        pdf.js-viewer
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Example of how to build example viewer of Mozilla's PDF.js
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#my-example-project"&gt;
  &lt;/a&gt;
  My example project
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ly.polv.cc"&gt;This online Lilypond compiler / playground&lt;/a&gt; is made using this, using the endpoint &lt;code&gt;/pdf.js/web/viewer.html?file=&amp;lt;FILEPATH&amp;gt;#pagemode=none&lt;/code&gt;. It's a quick project of mine to compile MIDI and WAV files, and share it.&lt;/p&gt;

</description>
      <category>pdf</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>VIIT : Why use this website layout?</title>
      <author>Rupak Dey</author>
      <pubDate>Sun, 03 Oct 2021 06:36:42 +0000</pubDate>
      <link>https://dev.to/deyrupak/viit-why-use-this-website-layout-pip</link>
      <guid>https://dev.to/deyrupak/viit-why-use-this-website-layout-pip</guid>
      <description>&lt;p&gt;&lt;em&gt;Save for later.&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People scan information and don't read all the content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ofzq2BfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q106147gq2a6eso1svi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ofzq2BfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q106147gq2a6eso1svi.png" alt="map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#so-thats-why-content-type-and-placement-is-important"&gt;
  &lt;/a&gt;
  So that's why content type and placement is important.
&lt;/h5&gt;

&lt;p&gt;&lt;br&gt;Content that appears above the fold is what the user will see first.&lt;/p&gt;

&lt;p&gt;The top of the page should attract users to continue scrolling.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-content-is-faster-to-consume"&gt;
  &lt;/a&gt;
  &lt;em&gt;What content is faster to consume?&lt;/em&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;V&lt;/strong&gt;ideos give more info than still images.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I&lt;/strong&gt;mages are easily scannable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I&lt;/strong&gt;cons are perceived faster than words.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;T&lt;/strong&gt;ext used to give longer information.

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6vSOiBdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twicyrzns26jkfayai2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6vSOiBdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twicyrzns26jkfayai2q.png" alt="layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#are-you-applying-it-to-your-design"&gt;
  &lt;/a&gt;
  &lt;br&gt;Are you applying it to your design?
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;P.S. Want the next post to be something specific? Do let me know in the comments.&lt;/p&gt;

&lt;p&gt;🤘🏻&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Connect with me : &lt;a href="https://github.com/deyRupak"&gt;Github&lt;/a&gt;&lt;br&gt;
Support me : &lt;a href="https://paypal.me/deyrdx?locale.x=en_GB"&gt;Buy me a coffee!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>productivity</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>Docker Cheat Sheet - Docker Networks</title>
      <author>Manoj Kumar Patra</author>
      <pubDate>Sun, 03 Oct 2021 06:30:40 +0000</pubDate>
      <link>https://dev.to/manojpatra1991/docker-cheat-sheet-docker-networks-49k4</link>
      <guid>https://dev.to/manojpatra1991/docker-cheat-sheet-docker-networks-49k4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#get-port-details-for-a-container"&gt;
  &lt;/a&gt;
  Get port details for a container:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container port &amp;lt;container-name&amp;gt;

&lt;span class="c"&gt;# 80/tcp -&amp;gt; 0.0.0.0:80&lt;/span&gt;
&lt;span class="c"&gt;# 80/tcp -&amp;gt; :::80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-ip-for-container"&gt;
  &lt;/a&gt;
  Get IP for container:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container inspect &lt;span class="nt"&gt;--format&lt;/span&gt; &lt;span class="s1"&gt;'{{ .NetworkSettings.IPAddress }}'&lt;/span&gt; webhost
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;--format&lt;/code&gt; - option for formatting the output of commands using &lt;strong&gt;Go templates&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-networking-happens-with-docker-containers"&gt;
  &lt;/a&gt;
  How networking happens with Docker containers?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oqXUh2Zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o238wv2cnsanb4cu4uat.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqXUh2Zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o238wv2cnsanb4cu4uat.jpg" alt="Docker_Network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Virtual networks get created when we publish a container. For example, if we publish container &lt;strong&gt;C1&lt;/strong&gt; with &lt;code&gt;80:80&lt;/code&gt;,&lt;br&gt;
it means any traffic coming in at port 80 on the host will be forwarded to port 80 on container &lt;strong&gt;C1&lt;/strong&gt; via the virtual network. Creating another container &lt;strong&gt;C2&lt;/strong&gt; by default, will be put in the same virtual network, which means, &lt;strong&gt;C1&lt;/strong&gt; and &lt;strong&gt;C2&lt;/strong&gt; can communicate freely via this virtual network.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: A host port can only be linked to one container.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bridge&lt;/strong&gt; or &lt;strong&gt;Docker0&lt;/strong&gt; is the default virtual network mapped to the host IP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#docker-network-cli-commands"&gt;
  &lt;/a&gt;
  Docker Network CLI commands
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#show-all-networks"&gt;
  &lt;/a&gt;
  Show all networks:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker network &lt;span class="nb"&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#inspect-a-network"&gt;
  &lt;/a&gt;
  Inspect a network:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker network inspect &amp;lt;network-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#create-a-virtual-network"&gt;
  &lt;/a&gt;
  Create a virtual network:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker network create &amp;lt;network-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;To use a custom bridge, we can use the &lt;code&gt;--driver&lt;/code&gt; option.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#attach-a-network-to-a-container"&gt;
  &lt;/a&gt;
  Attach a network to a container:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker network connect &amp;lt;network-name&amp;gt; &amp;lt;container-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#detach-a-network-from-a-container"&gt;
  &lt;/a&gt;
  Detach a network from a container:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker network disconnect &amp;lt;network-name&amp;gt; &amp;lt;container-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#connect-to-a-network-while-running-a-container"&gt;
  &lt;/a&gt;
  Connect to a network while running a container:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container run &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; &amp;lt;container-name&amp;gt; &lt;span class="nt"&gt;--network&lt;/span&gt; &amp;lt;network-name&amp;gt; &amp;lt;image&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#default-network-types"&gt;
  &lt;/a&gt;
  Default network types
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bridge&lt;/strong&gt; or &lt;strong&gt;Docker0&lt;/strong&gt; - the default virtual network mapped to the host IP. It allows containers to communicate with each other when running on the same docker host.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;host&lt;/strong&gt; - a special network that attaches the container directly to the host by skipping the virtual network.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;none&lt;/strong&gt; - Only &lt;code&gt;localhost&lt;/code&gt; interface is available in container&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using Docker networks, we can ensure that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;related apps are on the same Docker network&lt;/li&gt;
&lt;li&gt;Their inter-communication is restricted to the virtual network&lt;/li&gt;
&lt;li&gt;Traffics can be forwarded from host to container only if we publish the container with &lt;code&gt;--publish&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#dns"&gt;
  &lt;/a&gt;
  DNS
&lt;/h2&gt;

&lt;p&gt;Containers can communicate with other containers in the same virtual network with host names.&lt;/p&gt;

&lt;p&gt;Docker defaults host name to container's name. However, we can also use aliases.&lt;/p&gt;

&lt;p&gt;To provide network aliases for containers, we can do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; docker container run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--network&lt;/span&gt; &amp;lt;network-name&amp;gt; &lt;span class="nt"&gt;--network-alias&lt;/span&gt; &amp;lt;container-network-alias&amp;gt; &amp;lt;image&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, with this containers in the same virtual network can communicate with each other via aliases.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The flag &lt;code&gt;--rm&lt;/code&gt; makes sure the container is deleted permanently on exit.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>docker</category>
      <category>network</category>
      <category>bash</category>
    </item>
    <item>
      <title>[Part 3] 🌐 Senior Backend Architecture Interview With a Senior Software Engineer</title>
      <author>Better Coding Academy</author>
      <pubDate>Sun, 03 Oct 2021 06:27:50 +0000</pubDate>
      <link>https://dev.to/bettercodingacademy/part-3-senior-backend-architecture-interview-with-a-senior-software-engineer-296f</link>
      <guid>https://dev.to/bettercodingacademy/part-3-senior-backend-architecture-interview-with-a-senior-software-engineer-296f</guid>
      <description>&lt;p&gt;&lt;strong&gt;About Me:&lt;/strong&gt; I've been a professional web developer for just over 10 years now. I'm currently the lead web development instructor at &lt;a href="https://codebetter.com.au"&gt;Better Coding Academy&lt;/a&gt;, and as part of what I do, I post videos on our YouTube channel at &lt;a href="https://www.youtube.com/c/BetterCodingAcademy"&gt;https://www.youtube.com/c/BetterCodingAcademy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Subscribe for awesome web development content!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this video series, I'm interviewed by a senior software engineer from one of Australia's largest software companies. In part 3 of this series, we talk about further fleshing out the model definition, exploring how we can better encode the relationships between entities/models, and whether it would be best to store them as first-class citizens.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/l7K3h1wi5Kg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 Tips to Maximize Productivity Every Developer Must Know</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 03 Oct 2021 05:53:46 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/5-tips-to-maximize-productivity-every-developer-must-know-491e</link>
      <guid>https://dev.to/ruppysuppy/5-tips-to-maximize-productivity-every-developer-must-know-491e</guid>
      <description>&lt;p&gt;&lt;strong&gt;Programming&lt;/strong&gt; can lead to a &lt;em&gt;high paying career&lt;/em&gt;, but in the &lt;strong&gt;tech industry&lt;/strong&gt; you often have to work &lt;em&gt;long hours&lt;/em&gt; and &lt;em&gt;rise up to challenge&lt;/em&gt; and put in the &lt;strong&gt;immense effort required&lt;/strong&gt;. This article will provide you with &lt;strong&gt;actionable steps&lt;/strong&gt; to take your &lt;strong&gt;productivity levels&lt;/strong&gt; from &lt;em&gt;meh&lt;/em&gt; to &lt;em&gt;through the roof&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uFrB5FRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwyqlo6fbqq4upee6iyv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uFrB5FRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwyqlo6fbqq4upee6iyv.gif" alt="Let's Get Started"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tip-1-nail-the-fundamentals"&gt;
  &lt;/a&gt;
  Tip 1: Nail the Fundamentals
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BnM-HLTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ksxz2f6uv643kabpwf7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BnM-HLTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ksxz2f6uv643kabpwf7.gif" alt="Nailing the Fundamentals"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Often beginners &lt;em&gt;skim through the fundamentals&lt;/em&gt;, thinking the &lt;strong&gt;advanced topics&lt;/strong&gt; are where the &lt;em&gt;fun lies&lt;/em&gt;, then &lt;em&gt;give up too soon&lt;/em&gt; saying the &lt;strong&gt;advanced topics&lt;/strong&gt; are &lt;em&gt;way too hard&lt;/em&gt;. Without the &lt;strong&gt;basics&lt;/strong&gt;, of course grasping the &lt;strong&gt;advanced topics&lt;/strong&gt; will seem out of reach.&lt;/p&gt;

&lt;p&gt;So, even if the &lt;strong&gt;fundamentals&lt;/strong&gt; seem &lt;em&gt;boring&lt;/em&gt; or &lt;em&gt;unimportant&lt;/em&gt; at first, they are &lt;em&gt;extremely essential&lt;/em&gt; in your journey. Learning the &lt;strong&gt;fundamentals&lt;/strong&gt; is an &lt;em&gt;initial investment&lt;/em&gt; that will &lt;em&gt;yield great dividends&lt;/em&gt; in the long run, an &lt;em&gt;investment&lt;/em&gt; your future self will thank you for.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tip-2-you-learn-by-doing-not-watching-videos"&gt;
  &lt;/a&gt;
  Tip 2: You Learn by Doing NOT Watching Videos
&lt;/h1&gt;

&lt;p&gt;Developing &lt;strong&gt;practical skills&lt;/strong&gt; is &lt;strong&gt;crucial&lt;/strong&gt; to fly high in a &lt;em&gt;Career in Programming&lt;/em&gt;. I have seen a lot of my friends &lt;em&gt;watching some tutorials&lt;/em&gt; and &lt;strong&gt;thinking&lt;/strong&gt; &lt;em&gt;they have the necessary skills&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theoretical skills&lt;/strong&gt; are &lt;em&gt;completely useless&lt;/em&gt; unless you can convert your &lt;em&gt;thoughts into a properly implemented program&lt;/em&gt;. You learn something by &lt;strong&gt;DOING not STUDYING&lt;/strong&gt;. That's also the exact problem with the &lt;strong&gt;education system&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Students are given answers to memorize, not problems to solve&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another thing to keep in mind is &lt;strong&gt;not to get discouraged easily&lt;/strong&gt;, often if you are taking on &lt;strong&gt;difficult challenges head-on&lt;/strong&gt;, it would definitely take &lt;em&gt;a long time&lt;/em&gt; before you have a &lt;strong&gt;breakthrough&lt;/strong&gt;. For example, just to develop the &lt;strong&gt;algorithm&lt;/strong&gt; to implement &lt;strong&gt;end to end encryption&lt;/strong&gt; (E2EE) for &lt;a href="https://github.com/ruppysuppy/SmartsApp"&gt;&lt;strong&gt;Smartsapp&lt;/strong&gt;&lt;/a&gt; took me 3 months.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tip-3-errors-are-your-friends"&gt;
  &lt;/a&gt;
  Tip 3: Errors are Your Friends
&lt;/h1&gt;

&lt;p&gt;Often when developers, &lt;em&gt;especially beginners&lt;/em&gt;, come across an error, their reaction is somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tj1zjrn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiviizebnvlhwsoxt944.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tj1zjrn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiviizebnvlhwsoxt944.gif" alt="Angry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of losing your mind, if you just go through the &lt;strong&gt;error body&lt;/strong&gt;, often you will find &lt;em&gt;what causes the issue clearly mentioned&lt;/em&gt;, which would help you &lt;em&gt;get rid of errors&lt;/em&gt; &lt;strong&gt;very quickly&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Learning to &lt;strong&gt;debug an application&lt;/strong&gt; is simply the &lt;strong&gt;most important skill&lt;/strong&gt; to master to &lt;em&gt;level up your programming skills&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tip-4-learn-touch-typing"&gt;
  &lt;/a&gt;
  Tip 4: Learn Touch Typing
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Touch Typing&lt;/strong&gt; isn't a &lt;em&gt;mandatory&lt;/em&gt;, but definitely a &lt;em&gt;good skill to have&lt;/em&gt; in your &lt;strong&gt;arsenal&lt;/strong&gt;. It does &lt;strong&gt;significantly improves&lt;/strong&gt; the &lt;em&gt;time you need to type out anything&lt;/em&gt;, and as an &lt;strong&gt;added bonus&lt;/strong&gt;, now you too can &lt;em&gt;look cool in front of friends&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hCAhL0Qq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymworeb8xz6wh8vcj2nl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCAhL0Qq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymworeb8xz6wh8vcj2nl.gif" alt="Fast Typing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tip-5-breaks-are-important"&gt;
  &lt;/a&gt;
  Tip 5: Breaks are Important
&lt;/h1&gt;

&lt;p&gt;After following all these steps, you &lt;strong&gt;must not&lt;/strong&gt; &lt;em&gt;forget to take breaks&lt;/em&gt;. It allows you to &lt;em&gt;recharge&lt;/em&gt; and also &lt;em&gt;come up with new and creative ideas to solve problems&lt;/em&gt;, thus making not just you &lt;strong&gt;programming better&lt;/strong&gt; but &lt;em&gt;your life in general easier&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Also &lt;em&gt;continuously working&lt;/em&gt; isn't great for your &lt;strong&gt;health&lt;/strong&gt; either, giving rise to &lt;em&gt;issues with your eyes&lt;/em&gt; and &lt;em&gt;spine&lt;/em&gt;. So you are &lt;strong&gt;highly encouraged&lt;/strong&gt; to unwind and take a break from time to time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUimQCvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muih2qna23pz7zq5omdb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUimQCvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muih2qna23pz7zq5omdb.gif" alt="Relax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, we went through some tips on how to boost your productivity. Hope it helps you out in your journey. Happing Programming!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;From the upcoming Saturday, I will start releasing Monthly Productivity Blogs. If that sounds interesting, stay tuned on &lt;a href="https://tapajyotibose.medium.com/"&gt;Medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a Digital Nomad in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for weekly new tidbits on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>discuss</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Hacktoberfest for .NET Developers (C# Edition)</title>
      <author>Arafat Tehsin</author>
      <pubDate>Sun, 03 Oct 2021 05:23:11 +0000</pubDate>
      <link>https://dev.to/arafattehsin/hacktoberfest-for-net-developers-c-edition-3bha</link>
      <guid>https://dev.to/arafattehsin/hacktoberfest-for-net-developers-c-edition-3bha</guid>
      <description>&lt;p&gt;Hacktoberfest is celebrated during the month of October when open-source software enthusiasts, beginners, and the developer community participate by contributing to open-source projects. This is its 8th year and since then, it has been growing every year. Thousands of developers, creators and opensource maintainers have been doing a commendable job in educating the beginners, guiding fellow developers or learning from others, on day to day basis. Opensource is truly amazing!&lt;/p&gt;

&lt;p&gt;Although I created &lt;a href="https://github.com/arafattehsin/CognitiveRocket"&gt;CognitiveRocket&lt;/a&gt; repo for the purpose of sharing my demos, slide decks etc. but I still remember submitting my &lt;a href="https://github.com/jamesemann/JamesMann.BotFramework/pull/1"&gt;first ever pull request&lt;/a&gt; on my friend's (&lt;a href="https://twitter.com/jamesemann"&gt;James Mann&lt;/a&gt;) repo which later became &lt;a href="https://www.arafattehsin.com/bot-builder-community-project/"&gt;one of the reasons&lt;/a&gt; to start &lt;a href="https://github.com/BotBuilderCommunity"&gt;Bot Builder Community Project&lt;/a&gt; and to enable all the Microsoft Bot Framework enthusiasts and developers to join hands together to build fantastic tools for everyone. 🛠&lt;/p&gt;

&lt;p&gt;As I recently registered for the Hacktoberfest, I thought to look for the projects of my interest and skillset (&lt;em&gt;as a C# developer&lt;/em&gt;) where I can contribute my time and effort. Hence, I thought to share with you as well, in case you also want to participate in the similar projects.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please note that this list is not exhaustive so it's a high chance that you may find a better project of your interest than something from this list. Just click on the project name and it will directly take you to the appropriate issues (with the exception of first one).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IU2Y6975--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.arafattehsin.com/wp-content/uploads/2021/10/hacktoberfest2021.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IU2Y6975--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.arafattehsin.com/wp-content/uploads/2021/10/hacktoberfest2021.png" alt="Hacktoberfest for .NET 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="-sentimentanalyzer-https-github-com-arafattehsin-sentimentanalyzer-"&gt;&lt;a href="https://github.com/arafattehsin/SentimentAnalyzer"&gt;SentimentAnalyzer&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.arafattehsin.com/sentimentanalyzer-ondevice-machine-learning/"&gt;SentimentAnalyzer&lt;/a&gt; is an on-device (offline) .NET Standard library to find out what customers think of your brand or topic by analyzing raw text for clues about positive or negative sentiment. I created this library 2 years back using ML.NET and I try to keep it updated enough so that it does not break for anyone who is using it. This library can be used by any of your .NET apps be it your bot, mobile, web or even an IoT app.&lt;/p&gt;

&lt;blockquote&gt;As it hit around 10,000 downloads from NuGet package manager, I moved it to a separate project for better maintainability.&lt;/blockquote&gt;

&lt;p&gt;There's already an &lt;a href="https://github.com/arafattehsin/SentimentAnalyzer/issues?q=is%3Aopen+is%3Aissue+label%3A%22up+for+grabs%22"&gt;issue opened&lt;/a&gt; as an enhancement with the appropriate tags, please feel free to contribute.&lt;/p&gt;

&lt;h3 id="-grok-net-https-github-com-marusyk-grok-net-labels-good-20first-20issue-"&gt;&lt;a href="https://github.com/Marusyk/grok.net/labels/good%20first%20issue"&gt;grok.NET&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Cross platform .NET grok implementation as a NuGet package.&lt;/p&gt;

&lt;h3 id="-bot-builder-community-https-github-com-botbuildercommunity-"&gt;&lt;a href="https://github.com/BotBuilderCommunity"&gt;Bot Builder Community&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A collection of repos led by the community, containing extensions, including middleware, dialogs, recognizers and more for the Microsoft Bot Framework SDK.&lt;/p&gt;

&lt;h3 id="-uno-platform-https-github-com-unoplatform-uno-labels-good-20first-20issue-"&gt;&lt;a href="https://github.com/unoplatform/uno/labels/good%20first%20issue"&gt;Uno Platform&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The only platform for building native mobile, desktop and WebAssembly with C#, XAML from a single codebase. Open source and professionally supported.&lt;/p&gt;

&lt;h3 id="-azure-functions-openapi-extensions-https-github-com-azure-azure-functions-openapi-extension-"&gt;&lt;a href="https://github.com/Azure/azure-functions-openapi-extension"&gt;Azure Functions OpenAPI Extensions&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This extension provides an Azure Functions app with Open API capability for better discoverability to consuming parties.&lt;/p&gt;

&lt;h3 id="-dotnet-rosyln-https-github-com-dotnet-roslyn-"&gt;&lt;a href="https://github.com/dotnet/roslyn"&gt;dotnet/Rosyln&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The Roslyn .NET compiler provides C# and Visual Basic languages with rich code analysis APIs.&lt;/p&gt;

&lt;h3 id="-dotnet-maui-https-github-com-dotnet-maui-issues-"&gt;&lt;a href="https://github.com/dotnet/maui/issues"&gt;dotnet/Maui&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;.NET MAUI is the .NET Multi-platform App UI, a framework for building native device applications spanning mobile, tablet, and desktop.&lt;/p&gt;

&lt;h3 id="-dotnet-docs-https-github-com-dotnet-docs-labels-up-for-grabs-"&gt;&lt;a href="https://github.com/dotnet/docs/labels/up-for-grabs"&gt;dotnet/Docs&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The official Microsoft .NET repo that contains documentation. While it's not directly related to your development stack, I think it is still good (and active for Hacktoberfest).&lt;/p&gt;

&lt;h3 id="-mudblazor-https-github-com-mudblazor-mudblazor-issues-q-is-3aissue-is-3aopen-label-3ahacktoberfest-"&gt;&lt;a href="https://github.com/MudBlazor/MudBlazor/issues?q=is%3Aissue+is%3Aopen+label%3Ahacktoberfest"&gt;MudBlazor&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Blazor Component Library based on Material design. The goal is to do more with Blazor, utilizing CSS and keeping Javascript to a bare minimum.&lt;/p&gt;

&lt;h3 id="-materialdesigninxamltoolkit-https-github-com-materialdesigninxaml-materialdesigninxamltoolkit-issues-q-is-3aissue-is-3aopen-label-3ahacktoberfest-"&gt;&lt;a href="https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit/issues?q=is%3Aissue+is%3Aopen+label%3AHacktoberfest"&gt;MaterialDesignInXamlToolkit&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Comprehensive and easy to use Material Design theme and control library for the Windows desktop. Built in with XAML &amp;amp; WPF, for C# &amp;amp; &lt;a href="http://vb.net/"&gt;V&lt;/a&gt;B.NET.&lt;/p&gt;

&lt;h3 id="-silk-net-https-github-com-dotnet-silk-net-issues-q-is-3aissue-is-3aopen-label-3ahacktoberfest-"&gt;&lt;a href="https://github.com/dotnet/Silk.NET/issues?q=is%3Aissue+is%3Aopen+label%3Ahacktoberfest"&gt;Silk.NET&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The high-speed OpenGL, OpenCL, OpenAL, OpenXR, GLFW, SDL, Vulkan, Assimp, and DirectX bindings library your mother warned you about.&lt;/p&gt;

&lt;h3 id="-fluentassertions-https-github-com-fluentassertions-fluentassertions-issues-q-is-3aopen-is-3aissue-label-3a-22good-first-issue-22-"&gt;&lt;a href="https://github.com/fluentassertions/fluentassertions/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22"&gt;FluentAssertions&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A very extensive set of extension methods that allow you to more naturally specify the expected outcome of a TDD or BDD-style unit tests. Targets .NET Framework 4.7, .NET Core 2.1 and 3.0, as well as .NET Standard 2.0 and 2.1. Supports the unit test frameworks MSTest2, NUnit3, XUnit2, MSpec, and NSpec3.&lt;/p&gt;




&lt;p&gt;As I wrote earlier, this is not an exhaustive list, it's just I recently came across and found out that they are willing to accept the contributions and mark them as &lt;code&gt;hacktober-accepted.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you think I should include your repo or something which you have found interesting, please let me know and I will add it to the list.&lt;/p&gt;

&lt;p&gt;Keep hacking.&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>dotnet</category>
      <category>azure</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to make Web application support multiple browser windows</title>
      <author>Michael Lin</author>
      <pubDate>Sun, 03 Oct 2021 04:57:19 +0000</pubDate>
      <link>https://dev.to/unadlib/how-to-make-web-application-support-multiple-browser-windows-28pa</link>
      <guid>https://dev.to/unadlib/how-to-make-web-application-support-multiple-browser-windows-28pa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;When we develop a Single-Page Application, we usually only define its behavior in a single browser window, and even if the same application is opened on multiple browser windows, in most cases it is only synchronized with the local storage, and the state of each application in each window is not synchronized in real time (unless the server synchronizes), they run in isolation and are relatively independent.&lt;/p&gt;

&lt;p&gt;However, this means that more browser windows will generate more and more independent application instances, which may have different UI states and often inevitably have the same network requests or WebSocket connections, which may also mean a bad user experience (as users may have become accustomed to) and excessive usage of server resources.&lt;/p&gt;

&lt;p&gt;So what does it mean to have applications that supports multiple browser windows?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application instance sharing: code sharing, local storage sharing, state sharing, and more&lt;/li&gt;
&lt;li&gt;Lower server resource usage&lt;/li&gt;
&lt;li&gt;Better user consistency experience&lt;/li&gt;
&lt;li&gt;Smoother web applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it's not easy to keep large Web applications running smoothly.&lt;/p&gt;

&lt;p&gt;Web applications are still primarily built in JavaScript, which is a single-threaded programming language, and slow JavaScript code can prevent the browser’s rendering. The good news is that mainstream browsers are gradually supporting more different types of workers, especially Service Workers, which are used to implement PWAs (Progressive Web Apps) that greatly enhance the user experience. And the latest modern browsers also provide Web Worker, Shared Worker. With IE becoming deprecated this year, there is &lt;a href="https://caniuse.com/?search=worker"&gt;good support for these workers&lt;/a&gt;. Currently, only &lt;a href="https://bugs.webkit.org/show_bug.cgi?id=149850"&gt;Safari lacks support for Shared Worker&lt;/a&gt; among modern browsers.&lt;/p&gt;

&lt;p&gt;So what does it mean for Web applications to be "multi-threaded" with Worker?&lt;/p&gt;

&lt;p&gt;"&lt;a href="https://www.smashingmagazine.com/2021/06/web-workers-2021/"&gt;The State Of Web Workers In 2021&lt;/a&gt;" post covers a number of unpredictable performance issues. With these browser workers we will likely be better able to deal with computationally complex and slow-running JS code to keep web applications smooth.&lt;/p&gt;

&lt;p&gt;It's time to rethink why we can't make web applications support multiple browser windows and improve the performance of web applications. New architectural requirements bring new framework requirements, and such applications we call it &lt;strong&gt;&lt;code&gt;Shared Web Apps&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shared-web-apps"&gt;
  &lt;/a&gt;
  Shared Web Apps
&lt;/h2&gt;

&lt;p&gt;Even though we want users to open as few application windows as possible, the fact remains that many users will open the same application in multiple browser windows.&lt;/p&gt;

&lt;p&gt;Shared Web Apps supports running web applications in multiple browser windows.&lt;/p&gt;

&lt;p&gt;It has a unique Server thread to share the Shared Web Apps, whether it's code sharing, local storage sharing, state sharing, and so on. No matter how many browser windows are opened, Shared Web Apps always has only one server app instance for multiple client apps sharing. We all know that DOM operations are expensive. In Shared Web Apps, the client app instance is only responsible for rendering, and except for state sync the client app will become very lightweight and almost all business logic will run in the server app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The client app only renders UI, making better use of the device's multiple cores to ensure that the client app is smooth&lt;/li&gt;
&lt;li&gt;Solve the problems caused by multiple browser windows&lt;/li&gt;
&lt;li&gt;Better separation of concerns&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reactantshare-a-framework-for-building-shared-web-apps"&gt;
  &lt;/a&gt;
  reactant-share - A framework for building Shared Web Apps
&lt;/h2&gt;

&lt;p&gt;To build such Shared Web Apps, &lt;code&gt;reactant-share&lt;/code&gt; was created. reactant-share is based on the &lt;code&gt;reactant&lt;/code&gt; framework and &lt;code&gt;react&lt;/code&gt; library, which supports the following features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dependency injection&lt;/li&gt;
&lt;li&gt;Immutable state management&lt;/li&gt;
&lt;li&gt;View module&lt;/li&gt;
&lt;li&gt;Redux plug-in module&lt;/li&gt;
&lt;li&gt;Test bed for unit testing and integration testing&lt;/li&gt;
&lt;li&gt;Routing module&lt;/li&gt;
&lt;li&gt;Persistence module&lt;/li&gt;
&lt;li&gt;Module dynamics&lt;/li&gt;
&lt;li&gt;Shared web app support multiple browser windows

&lt;ul&gt;
&lt;li&gt;Shared tab&lt;/li&gt;
&lt;li&gt;SharedWorker&lt;/li&gt;
&lt;li&gt;ServiceWorker&lt;/li&gt;
&lt;li&gt;Browser extension&lt;/li&gt;
&lt;li&gt;Detached window&lt;/li&gt;
&lt;li&gt;iframe&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;reactant-share&lt;/code&gt; is very easy to use, you can use it to quickly build a Shared Web Apps. it greatly reduces the complexity of supporting multi-browser window application architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;When reactant-share starts, it creates a server app instance and multiple client app instances (one per browser window) in the browser, but the only instance that is really running in full is the server app instance, which is responsible for almost all of the application's logic, and multiple client app instances simply synchronize state and render. The state model of reactant-share uses immutable state, and reactant is based on Redux, so we trigger state sync from server app to client app via Redux's &lt;code&gt;dispatch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gsELuAUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1veuvfbfx3gf9q0d50pg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gsELuAUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1veuvfbfx3gf9q0d50pg.jpg" alt="workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The user triggers the client app proxy method through DOM events&lt;/li&gt;
&lt;li&gt;This proxy method is executed on the server app.&lt;/li&gt;
&lt;li&gt;The server app state is synchronized back to the client app.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;The overall workflow of the reactant-share is shown in the figure below. Here is an example of a shared-worker type counter app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, we define a counter app module and view module in &lt;code&gt;app.view.tsx&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ViewModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;injectable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;useConnector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reactant-share&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;state&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;action&lt;/span&gt;
  &lt;span class="nx"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppView&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ViewModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useConnector&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;increase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Next, we use &lt;code&gt;createSharedApp()&lt;/code&gt; to create the client app, whose options must contain &lt;code&gt;workerURL&lt;/code&gt;, the worker url that will create a shared worker (if it hasn't been created yet).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reactant-web&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createSharedApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reactant-share&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppView&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./app.view&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;createSharedApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AppView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;share&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SharedWorkerApp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SharedWorker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;workerURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;worker.bundle.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// render only&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Finally, we just create the worker file &lt;code&gt;worker.tsx&lt;/code&gt; and build it as &lt;code&gt;worker.bundle.js&lt;/code&gt; for the &lt;code&gt;workerURL&lt;/code&gt; option.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createSharedApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reactant-share&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppView&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./app.view&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;createSharedApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AppView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;share&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SharedWorkerApp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SharedWorker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// render less&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The specific workflow of &lt;code&gt;increase&lt;/code&gt; looks like this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The user clicks the button in client app.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;spawn(this.counter, "increase", [])&lt;/code&gt; will be executed, which passes the parameters about the proxy execution to the server app.&lt;/li&gt;
&lt;li&gt;The server app will execute &lt;code&gt;this.counter.increase()&lt;/code&gt;, and sync the updated state back to each client apps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;spawn()&lt;/code&gt; in reactant-share is inspired by the &lt;a href="https://en.wikipedia.org/wiki/Actor_model"&gt;actor model&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactantshare-framework"&gt;
  &lt;/a&gt;
  reactant-share Framework
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#multiple-modes"&gt;
  &lt;/a&gt;
  Multiple modes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Shared tab - It is suitable for running in browsers that do not support SharedWorker/ServiceWorker. The server app is an instance with rendering that also runs in a browser window. In multiple browser windows, there is also only one server app, and after it is closed or refreshed, one instance of the other client apps will be converted to a server app.&lt;/li&gt;
&lt;li&gt;s - If there is no &lt;a href="https://caniuse.com/?search=sharedworker"&gt;browser compatibility&lt;/a&gt; requirement, reactant-share is highly recommended to use this mode, and reactant-share also does a graceful degradation, so if the browser does not support SharedWorker then the app will run in Shared-Tab mode.&lt;/li&gt;
&lt;li&gt;ServiceWorker - If Shared Web Apps are intended to be PWA (Progressive Web Apps), then using this mode would be ideal, and it also supports the automatic graceful degradation to Shared-Tab mode.&lt;/li&gt;
&lt;li&gt;Browser extension - The browser extension allows a background thread, the server app of reactant-share can run in this background thread, and the UI can run in the client app.&lt;/li&gt;
&lt;li&gt;Detached window - reactant-share allows sub-applications to run as Detached windows or to be quickly merged into a more complete application.&lt;/li&gt;
&lt;li&gt;iframe - reactant-share allows each child application to run on an iframe.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example repo: &lt;a href="https://github.com/unadlib/reactant/tree/master/examples/reactant-share-sharedworker"&gt;SharedWorker/Detached window/iframe&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-experience"&gt;
  &lt;/a&gt;
  User Experience
&lt;/h3&gt;

&lt;p&gt;Since reactant-share's multiple instances are logic-sharing and state-sharing, when a user opens the same reactant-share application in multiple browser windows, the only instance that is actually running in full is the server app.&lt;/p&gt;

&lt;p&gt;The rendering-only client app will be so smooth that it will almost never freeze due to JS code, and the consistent application state will allow users to switch between multiple browser windows without any worries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development-experience"&gt;
  &lt;/a&gt;
  Development Experience
&lt;/h3&gt;

&lt;p&gt;reactant-share provides CLI and full support for Typescript, as well as support for Shared-Tab, SharedWorker, ServiceWorker and Browser extension, and other different types of runtime modes out of the box. Built-in testbed for module testing, Routing and Persistence modules, and module dynamics support for lazy loading of reactant-share applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#service-discovery-communications"&gt;
  &lt;/a&gt;
  Service Discovery / Communications
&lt;/h3&gt;

&lt;p&gt;Since reactant-share uses &lt;a href="http://github.com/unadlib/data-transport"&gt;data-transport&lt;/a&gt;, reactant-share supports almost all the transports supported by data-transport.The client app and the server app, whichever is loaded first, the client app will wait for the server app to finish starting and get all the initial application state from it.&lt;/p&gt;

&lt;p&gt;Using the actor model in the client app to design spawn(), we can do &lt;code&gt;spawn(counterModule, 'increase', [])&lt;/code&gt; to let the server app proxy the execution of the module method and respond and sync both the state and the result back to the client app.&lt;/p&gt;

&lt;p&gt;But if we need direct communication between the client app and the server app, then we need to use the &lt;code&gt;PortDetector&lt;/code&gt; module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;portDetector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PortDetector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;portDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// result should be `hello, 42`&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;portDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onClient&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#trackingdebugging"&gt;
  &lt;/a&gt;
  Tracking/Debugging
&lt;/h3&gt;

&lt;p&gt;Since reactant-share is based on Redux, it fully supports Redux DevTools, and the immutable time travel that Redux brings will make debugging easy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fault-tolerance-data-consistency"&gt;
  &lt;/a&gt;
  Fault Tolerance / Data Consistency
&lt;/h3&gt;

&lt;p&gt;Since state synchronization after the client app uses &lt;code&gt;spawn()&lt;/code&gt; to get the server app proxy to execute each time may cause it to be out of order in edge cases for various reasons, reactant-share integrates &lt;code&gt;reactant-last-action&lt;/code&gt;, which provides sequence markers to keep If the client app receives a synchronized action that checks for an exception in the sequence, the client app will launch a full state synchronization to correct the action sequence.&lt;/p&gt;

&lt;p&gt;In addition, when the browser does not support the Worker API, reactant-share will perform a graceful degradation (e.g. SharedWorker mode -&amp;gt; Shared-Tab mode -&amp;gt; SPA mode).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#isolation"&gt;
  &lt;/a&gt;
  Isolation
&lt;/h3&gt;

&lt;p&gt;Regardless of modes such as Shared-Tab, SharedWorker or ServiceWorker, each application instance runs in isolation and their basic interactions can only be triggered by &lt;code&gt;spawn()&lt;/code&gt; to synchronize state.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;reactant-share provides CLI, you just need to run &lt;code&gt;npx reactant-cli init shared-worker-example -t shared-worker&lt;/code&gt; to get a project of reactant-share with SharedWorker mode. If you want to change its mode, you just need to change the configuration of &lt;code&gt;createSharedApp()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;createSharedApp({
&lt;/span&gt;  modules: [],
  main: AppView,
  render,
  share: {
    name: 'ReactantExampleApp',
    port: 'client',
&lt;span class="gd"&gt;-   type: 'SharedWorker',
&lt;/span&gt;&lt;span class="gi"&gt;+   type: 'ServiceWorker',
&lt;/span&gt;    workerURL: 'worker.bundle.js',
  },
&lt;span class="err"&gt;}).then((app)&lt;/span&gt; =&amp;gt; {
  app.bootstrap(document.getElementById('app'));
&lt;span class="err"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, we can quickly turn SharedWorker mode into ServiceWorker mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transportperformance"&gt;
  &lt;/a&gt;
  Transport/Performance
&lt;/h3&gt;

&lt;p&gt;Since the client app only renders and receives synchronized state. So the client app keeps running smoothly when the size of each dispatch update state does not exceed 50M. reactant uses &lt;a href="https://immerjs.github.io/immer/patches/"&gt;Immer patch&lt;/a&gt; to update, usually this patch will be very small and reactant also does DEV checking for patch minimization updates. In fact, in most scenarios, the patch will not be that large.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Update state size&lt;/th&gt;
&lt;th&gt;Volume of data&lt;/th&gt;
&lt;th&gt;Deserialization&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;30 Array * 1,000 items&lt;/td&gt;
&lt;td&gt;1.4 M&lt;/td&gt;
&lt;td&gt;14 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30 Array * 1,0000 items&lt;/td&gt;
&lt;td&gt;14 M&lt;/td&gt;
&lt;td&gt;130 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1000 Array * 1,000 items&lt;/td&gt;
&lt;td&gt;46 M&lt;/td&gt;
&lt;td&gt;380 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Notebook: 1 GHz Intel Core M / 8 GB 1600 MHz DDR3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;benchmarking of the reactant-share module with &lt;a href="(https://reactant.js.org/docs/api/reactant-module/modules/_decorators_computed_)"&gt;derived data cache&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Number of modules and states&lt;/th&gt;
&lt;th&gt;Total number of states&lt;/th&gt;
&lt;th&gt;Each state update&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100 modules * 20 states&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;3 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;200 modules * 30 states&lt;/td&gt;
&lt;td&gt;6,000&lt;/td&gt;
&lt;td&gt;9 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300 modules * 100 states&lt;/td&gt;
&lt;td&gt;30,000&lt;/td&gt;
&lt;td&gt;44 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Notebook: 1 GHz Intel Core M / 8 GB 1600 MHz DDR3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, reactant-share still performs well in large projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#complexity"&gt;
  &lt;/a&gt;
  Complexity
&lt;/h3&gt;

&lt;p&gt;Whether it's practicing &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;clean architecture&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design"&gt;DDD&lt;/a&gt;, OOP or even FP, reactant-share has more openness to architect highly complex projects at will. reactant-share provides a few optional features, but the only one that shouldn't be missed is DI. reactant-share's DI is inspired by Angular, and it is very similar to Angular's DI. The complexity of coding that comes with architectural design is often determined by the final specification of the practice, but reactant-share hopes to help with such complex architectural design at the framework level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;For reactant-share applications, the communication between server/client only serializes and deserializes state and parameters, so it is almost impossible to cause framework-level security issues. Of course, enabling https and using&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Subresource_Integrity"&gt;Subresource Integrity&lt;/a&gt; are both necessary for any project that values front-end security, and we should also be concerned about &lt;a href="https://reactjs.org/docs/dom-elements.html#style"&gt;XSS security&lt;/a&gt; in React documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;reactant-share provides &lt;code&gt;testBed()&lt;/code&gt; to facilitate module testing. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;testBed&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For integration testing of server app/client app interactions, reactant-share also provides &lt;code&gt;mockPairTransports()&lt;/code&gt; for mock transport.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mockPairTransports&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;createSharedApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AppView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;share&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SharedWorkerApp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SharedWorker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;transports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;transports&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clientApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// render only&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;createSharedApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AppView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;share&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SharedWorkerApp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SharedWorker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;transports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;transports&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serverApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// render less&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After mocking transport like this, &lt;code&gt;clientApp&lt;/code&gt; and &lt;code&gt;serverApp&lt;/code&gt; can be easily tested for integration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apis"&gt;
  &lt;/a&gt;
  APIs
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@injectable()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use &lt;code&gt;@injectable()&lt;/code&gt; to decorate a module that can be injected and then use the &lt;code&gt;emitDecoratorMetadata&lt;/code&gt; using TypeScript, or &lt;code&gt;@inject()&lt;/code&gt; to inject the dependency.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@state&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;@state&lt;/code&gt; is used to decorate a class property that will create a reducer for Redux.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@action&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It updates the redux state with mutations via the class method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;state&lt;/span&gt;
  &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;action&lt;/span&gt;
  &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ViewModule&lt;/code&gt;/&lt;code&gt;useConnector()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ViewModule&lt;/code&gt; is a view module with a component, which is completely different from React class component. The component of &lt;code&gt;ViewModule&lt;/code&gt; is a function component that is used for the state connection between the module and the UI (using &lt;code&gt;useConnector()&lt;/code&gt;) and for the application view bootstrap.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spawn()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;spawn()&lt;/code&gt; transfers class methods execution from the client app to the server app and synchronizes the state to all client apps. It is inspired by the Actor model, but unlike other actor models, reactant-share's &lt;code&gt;spawn()&lt;/code&gt; does not create new threads.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createSharedApp()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;reactant-share supports multiple modes, and you can use &lt;code&gt;createSharedApp()&lt;/code&gt; to create multiple different Shared Web Apps that interact with each other via transport APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qampa"&gt;
  &lt;/a&gt;
  Q&amp;amp;A
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Can reactant-share completely solve the complexity of the architecture?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although reactant-share tries to reduce some complexity at the framework level, the complexity of large applications does not depend entirely on the framework itself, so even using reactant-share to architect a large project does not completely guarantee that it is absolutely clean, efficient, and maintainable. It involves testing strategy, code specification, CI/CD, development process, module design, and many other point.&lt;/p&gt;

&lt;p&gt;But in terms of module model and shared model, reactant-share already provides as clean a design as possible. If you are interested in &lt;a href="https://github.com/unadlib/reactant/tree/master/packages/reactant-share"&gt;reactant-share&lt;/a&gt;, you can try it quickly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does reactant-share have no cons at all? Are there any limitations to using it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;reactant-share is a framework for building Shared Web Apps. But such a model is not free, and it will face performance issues with data transfer (The high maintenance cost of the SharedArrayBuffer has forced us to abandon it for now as well. In fact this is a problem caused by the fact that JS "multithreading" does not share memory efficiently).&lt;/p&gt;

&lt;p&gt;Although Shared Web Apps lets the client App run in a render-only client thread, it introduces the additional overhead of synchronous state transfer. We must ensure that it is lightweight and efficient enough. While reactant-share does state patch based on Immer, it is always difficult to ensure that each patch is minimally updated.&lt;/p&gt;

&lt;p&gt;reactant-share provides a development option &lt;code&gt;enablePatchesChecker&lt;/code&gt;. In development mode, it is enabled by default. Any mutation operation that is not a valid mutation will be alerted, usually eliminating the alert, and reactant-share will try to keep the update size as minimal as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Front-end frameworks and architectures are always evolving. With full Worker support in modern browsers and an increasing number of multi-core CPU devices, we have reached a mature stage in our exploration of some multi-threaded running Web Apps. We have reasons to believe that the future Web App will be designed with lower complexity and run smoothly with multiple threads. It can fully utilize the user's device resources and give the user a good experience, and the developer does not need to have too many multi-threaded programming burden.&lt;/p&gt;

&lt;p&gt;This is what reactant-share wants to try and work on.&lt;/p&gt;

&lt;p&gt;If you think reactant-share is interesting, feel free to give it a star.&lt;/p&gt;

&lt;p&gt;Repo: &lt;a href="https://github.com/unadlib/reactant"&gt;reactant&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>typescript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>5 Figma plugin for UI/UX developers - part 1</title>
      <author>Tamizh Techie</author>
      <pubDate>Sun, 03 Oct 2021 04:31:29 +0000</pubDate>
      <link>https://dev.to/tamizh_techie/5-figma-plugin-for-ui-ux-developers-part-1-4adc</link>
      <guid>https://dev.to/tamizh_techie/5-figma-plugin-for-ui-ux-developers-part-1-4adc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#color-palettes"&gt;
  &lt;/a&gt;
  Color Palettes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/community/plugin/740832935938649295/Color-Palettes"&gt;https://www.figma.com/community/plugin/740832935938649295/Color-Palettes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autoflow"&gt;
  &lt;/a&gt;
  Autoflow
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/community/plugin/733902567457592893/Autoflow"&gt;https://www.figma.com/community/plugin/733902567457592893/Autoflow&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brands-colors"&gt;
  &lt;/a&gt;
  Brands Colors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/community/plugin/740232388085828578/Brands-Colors"&gt;https://www.figma.com/community/plugin/740232388085828578/Brands-Colors&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unsplash"&gt;
  &lt;/a&gt;
  Unsplash
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/community/plugin/738454987945972471/Unsplash"&gt;https://www.figma.com/community/plugin/738454987945972471/Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#themer"&gt;
  &lt;/a&gt;
  Themer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/community/plugin/731176732337510831"&gt;https://www.figma.com/community/plugin/731176732337510831&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more updates follow us @&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#telegram-httpstmetamizhtechie"&gt;
  &lt;/a&gt;
  Telegram - &lt;a href="https://t.me/tamizhtechie"&gt;https://t.me/tamizhtechie&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#linkedin-httpswwwlinkedincomintamizhtechie"&gt;
  &lt;/a&gt;
  LinkedIn - &lt;a href="https://www.linkedin.com/in/tamizhtechie/"&gt;https://www.linkedin.com/in/tamizhtechie/&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#website-httpswwwtamizhtechiecom"&gt;
  &lt;/a&gt;
  Website - &lt;a href="https://www.tamizhtechie.com/"&gt;https://www.tamizhtechie.com/&lt;/a&gt;
&lt;/h4&gt;

</description>
      <category>ux</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>Scott's Journey on Passing AWS DevOps Engineer Professional Certification</title>
      <author>Scott Hsieh 🇹🇼</author>
      <pubDate>Sun, 03 Oct 2021 04:03:54 +0000</pubDate>
      <link>https://dev.to/fantastichsieh/scott-s-journey-on-passing-aws-devops-engineer-professional-certification-2h79</link>
      <guid>https://dev.to/fantastichsieh/scott-s-journey-on-passing-aws-devops-engineer-professional-certification-2h79</guid>
      <description>&lt;p&gt;&lt;a href="https://www.credly.com/badges/77a4fe7a-00dc-4857-929b-d4ba016da532/public_url"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vREWSMOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mppnecq39zqtnh3c1pi.png" alt="AWS DevOpe Engineer Professional"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#content-table"&gt;
  &lt;/a&gt;
  Content Table
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#prologue"&gt;Prologue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#official-exam-guide"&gt;Official Exame Guide &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#tips-for-real-exam"&gt;Tips for Real Exam&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#compute"&gt;Compute&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#networking-amp-content-delivery"&gt;Networking &amp;amp; Content Delivery &lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#developer-tools"&gt;Developer Tools&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#storage"&gt;Storage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#log"&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#high-availability-fault-tolerance-and-disaster-recover"&gt;High Availability, Fault Tolerance, and Disaster Recover&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#others"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#implementation-suggestions"&gt;Implementation Suggestions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#references"&gt;References&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#prologue"&gt;
  &lt;/a&gt;
  Prologue
&lt;/h1&gt;

&lt;p&gt;After passing the &lt;a href="https://www.credly.com/badges/8fdcfe2c-5f7e-4d08-a420-cd49764b332d/public_url"&gt;AWS DAS&lt;/a&gt; in February this year, I'd been fascinating about how to become a professional lazybones&lt;sup&gt;&lt;a href="#ref3"&gt;[3]&lt;/a&gt;&lt;/sup&gt; in spare time apart from &lt;a href="#ref1"&gt;building custom CDK constructs&lt;/a&gt;, &lt;a href="#ref2"&gt;sharing at the AWS Taiwan UG&lt;/a&gt;, internal sharing in my own company, and recording for an external session. All of sudden, I felt gotta keep moving on towards goals after studying the quintessence of lazybones for a while. So, the journey of pursuing the AWS DevOps Engineer Professional Certification began at that moment.&lt;br&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/mEUmeOiT9MCMo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/mEUmeOiT9MCMo/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#official-exame-guide"&gt;
  &lt;/a&gt;
  Official Exame Guide
&lt;/h1&gt;

&lt;p&gt;Like you will check how many mountain trails you gotta walk through for taking down &lt;a href="#ref4"&gt;the Taipai Grand Trail&lt;/a&gt; and what materials you need to collect so that you could get a &lt;a href="#ref5"&gt;legendary weapon Kudzu&lt;/a&gt; for your ranger in Guild War 2. To get the One Piece of the DOP, you have to evaulaute whether you've had quite some sense what specific enterprise scenarios (cases) are going to show up in this certification and what AWS services you could consider resolving the issues transpired in those cases. From &lt;a href="#ref6"&gt;the website&lt;/a&gt;, you could see:&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Validation on candidates' ability&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement and manage continuous delivery systems and methodologies on AWS&lt;/li&gt;
&lt;li&gt;Implement and automate security controls, governance processes, and compliance validation&lt;/li&gt;
&lt;li&gt;Define and deploy monitoring, metrics, and logging systems on AWS&lt;/li&gt;
&lt;li&gt;Implement systems that are highly available, scalable, and self-healing on the AWS platform&lt;/li&gt;
&lt;li&gt;Design, manage, and maintain tools to automate operational processes
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Recommended knowledge and experience&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Experience developing code in at least one high-level programming language; building highly automated infrastructures; and administering operating systems&lt;/li&gt;
&lt;li&gt;Understanding of modern development and operations processes and methodologies&lt;/li&gt;
&lt;li&gt;Ability to implement and manage continuous delivery systems and methodologies on AWS&lt;/li&gt;
&lt;li&gt;Ability to implement and automate security controls, governance processes, and compliance validation&lt;/li&gt;
&lt;li&gt;Ability to define and deploy monitoring, metrics, and logging systems on AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;a href="#ref7"&gt;the exam guide&lt;/a&gt;, we could see the content expounds more detail into 6 fields that this certification is going to test whether you can respond rapidly towards forementioned enterprise scenarios and understand what AWS services can fulfil the requirements in those cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----------+----------------------------------------------------------+-----+
| Domain 1 | SDLC Automation                                          | 22% |
+----------+----------------------------------------------------------+-----+
| Domain 2 | Configuration Management and Infrastructure as Code      | 19% |
+----------+----------------------------------------------------------+-----+
| Domain 3 | Monitoring and Logging                                   | 15% |
+----------+----------------------------------------------------------+-----+
| Domain 4 | Policies and Standards Automation                        | 10% |
+----------+----------------------------------------------------------+-----+
| Domain 5 | Incident and Event Response                              | 18% |
+----------+----------------------------------------------------------+-----+
| Domain 6 | High Availability, Fault Tolerance, and Disaster Recover | 16% |
+----------+----------------------------------------------------------+-----+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SDLC Automation&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Apply concepts required to automate a CI/CD pipeline&lt;/li&gt;
&lt;li&gt;Determine source control strategies and how to implement them&lt;/li&gt;
&lt;li&gt;Apply concepts required to automate and integrate testing&lt;/li&gt;
&lt;li&gt;Apply concepts required to build and manage artifacts securely&lt;/li&gt;
&lt;li&gt;Determine deployment/delivery strategies (e.g., A/B, Blue/green, Canary, Red/black) and how to
implement them using AWS services&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Configuration Management and Infrastructure as Code&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Determine deployment services based on deployment needs&lt;/li&gt;
&lt;li&gt;Determine application and infrastructure deployment models based on business needs&lt;/li&gt;
&lt;li&gt;Apply security concepts in the automation of resource provisioning&lt;/li&gt;
&lt;li&gt;Determine how to implement lifecycle hooks on a deployment&lt;/li&gt;
&lt;li&gt;Apply concepts required to manage systems using AWS configuration management tools and
services&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Monitoring and Logging&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Determine how to set up the aggregation, storage, and analysis of logs and metrics&lt;/li&gt;
&lt;li&gt;Apply concepts required to automate monitoring and event management of an environment&lt;/li&gt;
&lt;li&gt;Apply concepts required to audit, log, and monitor operating systems, infrastructures, and
applications&lt;/li&gt;
&lt;li&gt;Determine how to implement tagging and other metadata strategies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Policies and Standards Automation&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Apply concepts required to enforce standards for logging, metrics, monitoring, testing, and security&lt;/li&gt;
&lt;li&gt;Determine how to optimize cost through automation&lt;/li&gt;
&lt;li&gt;Apply concepts required to implement governance strategies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Incident and Event Response&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Troubleshoot issues and determine how to restore operations&lt;/li&gt;
&lt;li&gt;Determine how to automate event management and alerting&lt;/li&gt;
&lt;li&gt;Apply concepts required to implement automated healing&lt;/li&gt;
&lt;li&gt;Apply concepts required to set up event-driven automated actions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;High Availability, Fault Tolerance, and Disaster Recovery&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Determine appropriate use of multi-AZ versus multi-Region architectures&lt;/li&gt;
&lt;li&gt;Determine how to implement high availability, scalability, and fault tolerance&lt;/li&gt;
&lt;li&gt;Determine the right services based on business needs (e.g., RTO/RPO, cost)&lt;/li&gt;
&lt;li&gt;Determine how to design and automate disaster recovery strategies&lt;/li&gt;
&lt;li&gt;Evaluate a deployment for points of failure

&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#tips-for-real-exam"&gt;
  &lt;/a&gt;
  Tips for Real Exam
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#compute"&gt;
  &lt;/a&gt;
  Compute
&lt;/h2&gt;

&lt;p&gt;Such as EC2, Elastic Beanstalk, Lambda, ECS, and Fargate, you need to grasp basic understanding of these services. By saying basic understanding, it doesn’t mean reading over related official documentations is enough, but at least you gotta equipped with operation experience of those services via the Web Console. Of course, if you work hard enough, deploying the services by CloudFormation (CFN will be used in the rest of the article) or the CDK can be beneficial both to smashing DOP and your own DevOps experience.  &lt;/p&gt;

&lt;p&gt;EC2 can be utilized to become an AP or API server; From scratch, you probably will grow your system gradually from a single functionality based on requirements. During the time, you might still log in the EC2 where your system, or function aggregation, resides via ssh with a key pair to manage the code snippets that support your system or service. Aside from ssh, is there a safer way to log in? Have you ever operated EC2 Instance Connect and Session Manager in AWS Systems Manager? To log in an EC2 server via two forementioned methods, do you know what steps you need to go through on authorization and configuration so that a user can log in via the services?&lt;/p&gt;

&lt;p&gt;As time passes, you might realize that during some specific time spans, requesting number to your service, or server, is large and your server cannot handle this copious amount of requesting. Do you know in this moment you could consider using Elastic Load Balancing and EC2 AUto Scaling to tackle this kind of issue? About launch templates (LT) and launch configuration (LC), can you explain the difference between the two and what scenarios they are suitable? Is there any connection between Auto Scaling Groups (ASG), and LT and LC? What are EC2 Auto Scaling lifecycle hooks? What states are included in the lifecycle hooks? What events, or states,  are followed after the scale-out and scale-in events? If traffic in the coming future cannot be predicted or depicted, among multiple scaling strategies of Auto Scaling, what option you can consider? After grasping all of the scaling strategies, what are their proper usage scenarios? What phenomena will make auto scaling start to work? Can I trigger auto scaling based on some condition? What conditions can I select? If auto scaling is at the scale-in state, before compute instances are going to be terminated, you want to snapshot the instances or create the AMIs, do you know in what state of the lifecycle hooks allows you to define the forementioned custom actions? Or what if there are running compute instances in an ASG, and for regulation purpose, the instances need to be attached the 2nd network interface for connecting to an independent subnet managed by other business unit, what you can do in the lifecycle hooks in order to achieve the requirements? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o72Br7-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z45fshm30p4u6y67vi41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o72Br7-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z45fshm30p4u6y67vi41.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Introducing Native Support for Predictive Scaling with Amazon EC2 Auto Scaling&lt;sup&gt;&lt;a href="#ref41"&gt;[41]&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In terms of Elastic Load Balancing, can you name all of the load balancers&lt;sup&gt;&lt;a href="#ref9"&gt;[9]&lt;/a&gt;&lt;/sup&gt;? In what aspects there is the difference between Application Load Balancer (ALB) and Network Load Balancer (NLB)? In the OSI model, which kind of OSI level for load balancing do they support respectively? If load balancing is required to be integrated with Lambda, what load balancer should be chose?  &lt;/p&gt;

&lt;p&gt;Do you know what things Elastic Beanstalk as a service can do for you automatically? What are Elastic Beanstalk composed of?   Can environment be categorized? If there are multiple kinds of environments, what specific tasks they are especially good at? What is &lt;code&gt;.ebextensions&lt;/code&gt; for? What can it achieve? Can I modify hardware spec of compute instances via &lt;code&gt;.ebextensions&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KJv63X39--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlxlqwdhuarrr3swx11n.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJv63X39--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlxlqwdhuarrr3swx11n.jpeg" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Model serving in Java with AWS Elastic Beanstalk made easy with Deep Java Library&lt;sup&gt;&lt;a href="#ref28"&gt;[28]&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With micro-service architecture becoming more popular and popular, after assimilating related concepts&lt;sup&gt;&lt;a href="#ref18"&gt;[18]&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;&lt;a href="#ref27"&gt;[27]&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;&lt;a href="#ref43"&gt;[43]&lt;/a&gt;&lt;/sup&gt;, its history&lt;sup&gt;&lt;a href="#ref20"&gt;[20]&lt;/a&gt;&lt;/sup&gt;, and what AWS services can assist you in building micro services&lt;sup&gt;&lt;a href="#ref8"&gt;[8]&lt;/a&gt;&lt;/sup&gt;, you'll enter the world of Lambda, ECS, and Fargate. How many phases are there in terms of AWS Lambda execution environment? What programming languages does it support natively, or directly? If a programming language that isn't supported by AWS is preferred to be executed, what method you could consider to achieve the goal? What are the least permissions for an AWS Lambda function to be executed? If integration with other AWS services via Lambda is required, what needs to be done as wishes? If a web server hosted on an EC2 instance with authentication functionality is intended to be migrated to Lambda as serverless service, what components might be changed compared to the original architecture?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l7aP6d_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j8b4daaauf2nwqhi77u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l7aP6d_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j8b4daaauf2nwqhi77u.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;How to get notified on specific Lambda function error patterns using CloudWatch&lt;sup&gt;&lt;a href="#ref29"&gt;[29]&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ECS is for containers, as a managed service, what components are there in ECS? Like task definition, auto scaling, container agent, etc., you're supposed to distinguish components of ECS. Just follow classic examples on the official documentations for hands-on experience, with explanation in the technical documentations and a fabulous late melt with Hokkaido milk. What is the relationship between ECS and ECR? Do they need each other to work, or they can be combined to work together? Is there any one between the services that can execute other task independently?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPHh9rV6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ustnyvut4ji0adyngyib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPHh9rV6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ustnyvut4ji0adyngyib.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Figure in &lt;a href="https://aws.amazon.com/blogs/apn/how-steamhaus-used-aws-well-architected-to-improve-sperry-rails-artificial-intelligence-system/"&gt;How Steamhaus Used AWS Well-Architected to Improve Sperry Rail’s Artificial Intelligence System&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You still need to manage web servers by deploying your applications or services to ECS, there exists operation cost to some extent. Hence, AWS who captured the customers' need launched AWS Fargate. What differences there are between the ECS container service and AWS Fargate? Why the need of AWS Fargate is getting more and more? When you attempt to figure out carefully, you'll realize what elegant and efficient developing experience is.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aX3LzsIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27ltrqurq8n17h9kl1qw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aX3LzsIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27ltrqurq8n17h9kl1qw.png" alt="Alt Text"&gt;&lt;/a&gt; Figure in &lt;a href="https://aws.amazon.com/blogs/gametech/game-server-hosting-on-aws-fargate/"&gt;Game Server Hosting on AWS Fargate&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#networking-amp-content-delivery"&gt;
  &lt;/a&gt;
  Networking &amp;amp; Content Delivery
&lt;/h2&gt;

&lt;p&gt;On the aspect of VPC, you'll also need some understanding, after all, the services mentioned so far are built upon VPC (except Amazon ECS Anywhere, Amazon EKS Anywhere, and AWS Outposts). Like what public subnets, private subnets, route tables, network ACL, and security group (SG) are. What are ENI, CIDR, Internet Gateway, NAT Gateway, and VPC endpoints, etc.? When grasping ENI at the beginning level, you could schedule some time to go deeply about what is the difference among ENI, ENA, and EFA&lt;sup&gt;&lt;a href="#ref36"&gt;[36]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;About Route53, you're suggested to have sense on how many kinds of DNS records there are, such as A, AAAA, CNAME, Alias records, etc. You gotta at least read through the documentation of routing policies. Geolocation and geo-proximity are all connected to geolocation. What is their difference? What can be achieved via DNS failover? What options can be considered for DNS failover? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-tools"&gt;
  &lt;/a&gt;
  Developer Tools
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Deployment Models&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Now we are about to enter into the scope of deployment models. If you look carefully at Point 5 of the SDLC Automation in domain knowledge of the exam guide, you'll see blue/green, canary&lt;sup&gt;&lt;a href="#ref11"&gt;[11]&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;&lt;a href="#ref38"&gt;[38]&lt;/a&gt;&lt;/sup&gt;, and red/black deployment models. Regarding the blue/green deployment, I personally thought the 2015 speech given by Andy Mui and Vlad Vlasceanu will be a good start&lt;sup&gt;&lt;a href="#ref32"&gt;32&lt;/a&gt;&lt;/sup&gt;. Its content delivered concise and informative information on what possible combinations there are to run through the blue/green deployment on the aspect of EC2 and ECS. Aside from some super helpful comparison, strategies at data level were also suggested, such as when a blue/gree deployment is about to be progressed, if data schema is also going to be changed, what corresponding methods can be implemented?  &lt;/p&gt;

&lt;p&gt;The red/back deployment and blue/green deployment can be regarded as the same deployment model. You could spend some time figuring out their mindset in back and then focus on the blue/green deployment. After all, in &lt;a href="https://www.cncf.io/wp-content/uploads/2020/08/CNCF-Presentation-Template-K8s-Deployment.pdf"&gt;a presentation file titled &lt;em&gt;Deployment Strategies on Kubernetes&lt;/em&gt;&lt;/a&gt; in the CNCF also equals the blue/green deployment and red/black deployment.&lt;/p&gt;

&lt;p&gt;On the aspect of computing, you could see AWS offers numerous selections. How to progress the blue/green deployment for EC2? How about the blue/green deployment via CFN for ECS&lt;sup&gt;&lt;a href="#ref39"&gt;[39]&lt;/a&gt;&lt;/sup&gt;? How to execute a canary deployment for pure Lambda&lt;sup&gt;&lt;a href="#ref33"&gt;[33]&lt;/a&gt;&lt;/sup&gt;? If there is a serverless service combined with Lambda and Amazon API Gateway, a newer version to be deployed is required while visiting the original API should be allowed, what needs to be configured in procedure?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9vuiFH8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvnkb64e956dz61furtm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vuiFH8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvnkb64e956dz61furtm.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Blue/Green Deployments with Amazon Elastic Container Service&lt;sup&gt;&lt;a href="#ref16"&gt;[16]&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CloudFormation and AWS Serverless Applicaiton Model&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
You must manipulate CFN, by sorely viewing technical documentation, you might not be able to have quite solid grasp. In CFN, how do you refer to resources in nested stacks? When infrastructure becomes huge, is there any organizing practice that can be followed in terms of stack building? What are &lt;code&gt;cfn-init&lt;/code&gt;, &lt;code&gt;cfn-signal&lt;/code&gt;, &lt;code&gt;cfn-get-metadata&lt;/code&gt;, and &lt;code&gt;cfn-hup&lt;/code&gt; for? What resources support the &lt;code&gt;UpdatePolicy&lt;/code&gt; attribute? With &lt;code&gt;AWS::AutoScaling::AutoScalingGroup&lt;/code&gt;, what other more specific options are provided for managing ASG via CFN? Do you know that custom resources can invoke Lambda functions and AWS APIs? For example, &lt;a href="https://www.linkedin.com/pulse/cloudformation-lambda-backed-custom-resource-d%C3%ADaz-fern%C3%A1ndez/?articleId=6625782528299139073"&gt;making Lambda functions managed by CFN updatable, which are stored in a S3 bucket where versioning is open&lt;/a&gt;, &lt;a href="https://aws.amazon.com/tw/premiumsupport/knowledge-center/cloudformation-s3-notification-lambda/"&gt;configuring event notification to Lambda on an existing S3 bucket&lt;/a&gt; (right now, CDK already supports this scenario), &lt;a href="https://www.wellarchitectedlabs.com/well-architectedtool/300_labs/300_using_wat_with_cloudformation_and_custom_lambda/5_explore_wareview/"&gt;creating and updating AWS well-architected reviews&lt;/a&gt;,  &lt;a href="https://constructs.dev/packages/cdk-comprehend-s3olap/v/0.0.19?lang=typescript"&gt;making the ARN of a Lambda function deployed by &lt;code&gt;AWS::Serverless::Application&lt;/code&gt; visible to the following S3 Object Lambda deployment&lt;/a&gt;, etc. &lt;code&gt;WaitCondition&lt;/code&gt; in CFN can make signals without accessing the Internet&lt;sup&gt;&lt;a href="#ref30"&gt;[30]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FSH5popG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukeo6ruukv5f9rdu2dff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FSH5popG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukeo6ruukv5f9rdu2dff.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Best practices for organizing larger serverless applications&lt;sup&gt;&lt;a href="#ref12"&gt;12&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CodeCommit, AWS CodeBuild, AWS CodeDeploy, and AWS CodePipeline&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Developers might agree with that git is a popular tool for version control and CodeCommit is a managed service of version control by AWS. To empower developers in a team to execute specific git commands towards a CodeCommit repository, what needs to be set related to permissions? If a Git repository is going to be migrated to CodeCommit, what steps are necessary? If an action in CodePipeline failed, what can be implemented to notify DevOps engineers or related developers? (Not through AWS Chatbot) In a CodePipeline pipeline combined with CodeBuild and CodeDeploy, if the insertion of code testing (function test, unit test, integration test, bra bra) is intended, what you can do to achieve the goal? In a CICD pipeline, what way is feasible to make applications conform to security regulations? How many kinds of events can be listened in CodePipeline? What servcies are used for listening? CodeDeploy can not only assist in deployment for AWS resources but also IDC machines. If we want to deploy to IDC machines via CodeDeploy, what are the prerequisites? How do you build a cross-account CD pipeline? If sensitive information will be accessed in a CICD pipeline, do you know that AWS Systems Manager Parameter Store and AWS Secrets Manager can be adopted pertaining to security concerns? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C3GXVtya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x2htsdazhcuyr2d8udg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C3GXVtya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x2htsdazhcuyr2d8udg.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Figure in &lt;a href="https://aws.amazon.com/tw/blogs/devops/ci-cd-on-amazon-eks-using-aws-codecommit-aws-codepipeline-aws-codebuild-and-fluxcd/"&gt;CI/CD on Amazon EKS using AWS CodeCommit, AWS CodePipeline, AWS CodeBuild, and FluxCD&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h2&gt;

&lt;p&gt;How many storage classes are there in S3? What are the differences among these classes? In what circumstances, you should select Intelligent Tiering? And in what situation One-Zone IA will be more suitable? What configuration you need to deal with so that the storage level of objects will be deleted and transitioned according to some time unit? What is ACL? How many kinds of pre-defined S3 ACLs are there? What is the bucket policy of an S3 bucket for? What is the application possibility on S3 object tags&lt;sup&gt;&lt;a href="#ref14"&gt;[14]&lt;/a&gt;&lt;/sup&gt;?&lt;/p&gt;

&lt;p&gt;Amazon RDS and AWS DynamoDB as the solutions for RDBS and NoSQL respectively, what criteria you might consider when it comes to selecting storage place for your data? NoSQL doesn't mean that there is no relation among data, also, it is not an invention to replace RDBS. About this topic, I suggest you could refer to the one-hour speech&lt;sup&gt;&lt;a href="#ref21"&gt;21&lt;/a&gt;&lt;/sup&gt; given by Rick Houlihan as AWS NoSQL Principal Technologist, you'll have a wonderful trip there.  &lt;/p&gt;

&lt;p&gt;What is the functionality of Amazon Aurora Global Database? What are Amazon DynamoDB Global Tables for? Either Auora or DynamoDB, how to do the Multi-AZ and Multi-region backups? What are GSI and LSI? Regarding RDS, for improving read or write throughput, you probably will consider utilizing Amazon ElastiCache, either Memcached or Redis. To achieve the same result, do you know there is a thing called DAX&lt;sup&gt;&lt;a href="#ref23"&gt;23&lt;/a&gt;&lt;/sup&gt;? If you still have time, go check RCU and WCU. If data in DynamoDB is intended to archive to S3 based on some time frequency, what services can be integrated to achieve this&lt;sup&gt;&lt;a href="#ref40"&gt;[40]&lt;/a&gt;&lt;/sup&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a3tE-9rK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mv9ouira08a8tl1eqf6.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a3tE-9rK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mv9ouira08a8tl1eqf6.jpeg" alt="Alt Text"&gt;&lt;/a&gt; Figure in &lt;a href="https://aws.amazon.com/tw/blogs/database/how-to-increase-performance-while-reducing-costs-by-using-amazon-dynamodb-accelerator-dax-and-aws-lambda/"&gt;Use Amazon DynamoDB Accelerator (DAX) from AWS Lambda to increase performance while reducing costs&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log"&gt;
  &lt;/a&gt;
  Log
&lt;/h2&gt;

&lt;p&gt;What is the major difference between CloudTrail and CloudWatch? To reach real-time processing on CloudWatch logs, what you can do? Is there any difference between CloudWatch Events and EventBridge? For example, if you want to monitor cross-account launch failure on EC2 instances, what you should do? To record topic, timestamp, resource IP in SES to a log group in CloudWatch, what service can be adopted to achieve the goal? If analyzing log data is intended, is there any functionality in CloudWatch that can help me query? Is there any choice on storage location for logs?  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8acR2ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xsz47tbjealxlqcbb2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8acR2ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xsz47tbjealxlqcbb2b.png" alt="Alt Text"&gt;&lt;/a&gt; Figure in &lt;a href="https://aws.amazon.com/tw/blogs/architecture/bbva-architecture-for-large-scale-macie-implementation/"&gt;BBVA: Architecture for Large-Scale Macie Implementation&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#high-availability-fault-tolerance-and-disaster-recover"&gt;
  &lt;/a&gt;
  High Availability, Fault Tolerance, and Disaster Recover
&lt;/h2&gt;

&lt;p&gt;With proper understanding on compute, networking, and storage services, you'll start to digest the concepts of high availability, failover, and disaster recovery (DR). About this field, I recommend &lt;em&gt;Reliability Pillar&lt;/em&gt; in the AWS Well-Architected series. It is a book which organizes the concepts pretty much well. At least you need to know how many levels are defined in terms of disaster recovery. What is the definitions of RTO and RPO? In the real world, the people you're discussing with might not understand what the backup &amp;amp; restore is or what the pilot light is. Yet, by talking with time unit, you still can roughly get what level the disaster recovery being discussed belongs to. &lt;/p&gt;

&lt;p&gt;About exam questions related to this field (DR), you will be in hell if you don't have solid grasp of the forementioned AWS services. You not only learn these services' functionalities, you gotta compare responding time on the aspects of backup and relaunch also. By going through this way, you'll be able to resonate in the content in &lt;em&gt;Reliability Pillar&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Take a brief example, There is a company which has infrastructure in three continents. The base is Europe, and Asia and the United States are extended areas. There are analysts in the three continents. They analyze log data via a web application. The data is stored in DynamoDB of Europe and ECS on Fargate with ALB and auto scaling serves their web application. Now, the analyst in Asia and the United States are complaining about slow response time and the speed of specific analysis is starting killing them. How can you modify the infrastructure architecture and then send the anaysts a sincere Bon-Jovi-have-a-nice-day smile?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tL--pp8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qr3wixzm2ff9d3fvkdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tL--pp8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qr3wixzm2ff9d3fvkdl.png" alt="Alt Text"&gt;&lt;/a&gt; Figure in &lt;a href="https://aws.amazon.com/tw/blogs/architecture/implementing-multi-region-disaster-recovery-using-event-driven-architecture/"&gt;Implementing Multi-Region Disaster Recovery Using Event-Driven Architecture&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others
&lt;/h2&gt;

&lt;p&gt;I suggest you also need some understanding on Amazon ES and AWS Storage Gateway, i.e., what are their functionalities? How the architectures look like? You have to grasp thoses to some extent. AWS OpsWorks can be used to manage instance configuration. What two automation services is it based on? What is the difference among AWS OpsWorks Stacks, AWS OpsWorks for Chef Automate, and AWS OpsWorks for Puppet Enterprise? AWS OpsWorks and AWS Systems Automation can both be taken to execute automation tasks. What is the difference? Amazon Inspector can be helpful on security. What is its difference to Amazon GuardDuty? Except vulnerability assessment on AWS resources according to assessment rules, is there anything else that AWS Inspector can do&lt;sup&gt;&lt;a href="#ref19"&gt;[19]&lt;/a&gt;&lt;/sup&gt;? What does AWS Trusted Advisor do? What is its difference to AWS Config? Apart from that AWS Config rules can work in a single account, if the enablement of AWS Config rules across multiple accounts is required, what needs to be done? If specific actions are intended to be executed automatically after targets are discovered by AWS Config rules, what can be adopted to reach this kind of automation? What is Tag Editor for? What we can do via AWS RAM?  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gW0vyZ4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wyvr2dvkcvtoq4pvk13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gW0vyZ4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wyvr2dvkcvtoq4pvk13.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Improve monitoring of AWS Systems Manager Agent&lt;sup&gt;&lt;a href="#ref26"&gt;[26]&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDG-OqYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f996wd1e9nosx7f5hiwd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDG-OqYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f996wd1e9nosx7f5hiwd.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;How to visualize multi-account Amazon Inspector findings with Amazon Elasticsearch Service&lt;sup&gt;&lt;a href="#ref37"&gt;[37]&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementation-suggestions"&gt;
  &lt;/a&gt;
  Implementation Suggestions
&lt;/h1&gt;

&lt;p&gt;If possible, please get hands-on experience on all the AWS services mentioned above at least via the Web Console. Either they are simple examples (some of them I won't say it's easy, I prefer to take the term of classic to describe) organized by the documentations of AWS services or films on Youtube that were published by passionate developers, all of them are options that you can run through. Like ECS, a beginner example or an auto-scaling example both can be found on the Internet. Furthermore, if time permits, attempt to craft some application examples via CFN or CDK. From the AWS official documentations to &lt;a href="https://github.com/aws-samples"&gt;AWS Samples&lt;/a&gt; to AWS blogs, they all provide CFN templates that you could deploy quickly. Just make your hands dirty, with description on the technical documentations, the ride can reach the final for sure. Lastly, if you still can squeeze somte time by accident, go manipulate CDK to build some applications based on miscellaneous scenarios with any one of the services mentioned above. Following the suggestions, I believe on the road of pursuing DOP, you'll feel safe.  &lt;/p&gt;

&lt;p&gt;As of me, looking to the past, I had experience on the CICD in the IDC and the CICDs with pure AWS solutions. I implemented the latter one with CFN and CDK. I also once built the construct of &lt;a href="https://constructs.dev/packages/cdk-databrew-cicd/v/0.1.36?lang=typescript"&gt;CICD combining AWS Glue DataBrew&lt;/a&gt;. About the compute services, once built them via CFN and CDK also. A project where the front-end and back-end are split. A project with pure back-end. A project for &lt;a href="https://github.com/pahud/cdk-cloudfront-plus"&gt;CloudFront extensions&lt;/a&gt;. For example, like DNS record type that points to an ALB, the application and renewal of ACM certifications, etc. When reading new articles in the AWS blogs, I'll try as much as possible to manipulate their mindset via CFN, if there exist, and then ponder possible variation based on them. It's not that as easy as you might feel when reading through this article, yet it's very similar to leveling up in an online game. From lvl 80 to lvl 81, you just need 36,065,092 exactly that much. It's inescapable.&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In the DOP exam, it's included numerous condensed real scenarios (brief and comprehensive) to test whether you can act properly by given limitations or conditions and tackle the issues. Via grasping the essence of the AWS services and figuring out the solutions built by other developers, you'll be eventually capable of resolving problems swiftly when facing various and diverse of them.  &lt;/p&gt;

&lt;p&gt;About the DOP exam, normally, latest features won't come to you. In computing, such as Lambda container, Amazon ECS Anywhere, Amazon EKS Anywhere, Instance Refresh of EC2 Auto Scaling. In networking, like Amazon Route 53 Resolver DNS Firewall&lt;sup&gt;&lt;a href="#ref25"&gt;[25]&lt;/a&gt;&lt;/sup&gt;; Or like CFN modules&lt;sup&gt;&lt;a href="#ref17"&gt;[17]&lt;/a&gt;&lt;/sup&gt; and CFN registry. DOP usually tests your horizontal level and some will be deep (detail); about the k8s knowledge, you might consider the CKA, CKAD, and CKS created by the CNCF.&lt;/p&gt;

&lt;p&gt;Concerning the SDLC automation, its implementation might differ&lt;sup&gt;&lt;a href="#ref42"&gt;[42]&lt;/a&gt;&lt;/sup&gt; because of industries, enterprise culture, and so on. What DOP tests you mostly focuses on horizontal level and the AWS services. Like unit test, integration test, and static analysis, you won't see in this exam. Regarding their detail, readers can consider joining the &lt;a href="https://www.facebook.com/groups/817976138289434"&gt;DevOps Taiwan&lt;/a&gt; group on Facebook. In addition to annual party, merely watching conversations among DevOps experts may already give you lessons learned. (Of course, not only the forementioned tests will be discussed, trust me, you have a bumper harvest by participating). &lt;/p&gt;

&lt;p&gt;In the end, wanna share I took the exam on the Pearson VUE platform. There will be a proctor who watches you during the exam (shy shy &amp;gt;////&amp;lt;). The available languages are English and Japanese. I chose the English exam and an English proctor, strongly suggest you should bring your personal laptop. Actually, in the guidance of the online exam, it is also suggested that it's better to bring your own laptop. I didn't capture the information and took the company laptop to welcome the exam. And what happened is the anti-virus software in the company laptop didn't give the green light to the VUE online program for exams.&lt;/p&gt;

&lt;p&gt;It took me around one hour to negotiate with the proctor to wait for my colleague (the unit who manages the anti-virus software) coming to take a look but to no avail, the proctor cancelled the exam, and rushed back to my living place to take my personal laptop. The most impressive thing is I purchased the exam at 10:26 AM and chose one which starts at 10:30 AM. (Different proctor in the first exam and second exam). I spent around 2 hours going through 75 questions and checked those which were tagged by me previously in the rest of time. In the last 3 minutes, nothing I could do anymore and submitted my exam. Eventually, I got the ONE PIECE of DOP.&lt;/p&gt;

&lt;p&gt;If anyone who is thinking about taking the exam intends to choose the online way, PLEASE use your personal laptop. Trust me, you'll thank me. If you prefer testing centers, you probably need to evaluate the COVID-19 pandemic situation. By this channel, you also lose the flexibility of going through the exam 4 minutes later right after purchasing. However, you might benefit from the availability of physical little white board. If you'd learned something on taking the DOP exam from this sharing, this article would fulfill its mission. Good luck, fellows!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Day 2 is stasis. Followed by irrelevance. Followed by excruciating, painful decline. Followed by death. And that is why it is always Day 1. — Jeff Bezos&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Contruct Hub, &lt;a href="https://constructs.dev/search?q=scott.hsieh&amp;amp;offset=0"&gt;https://constructs.dev/search?q=scott.hsieh&amp;amp;offset=0&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;AWS User Group Taiwan Online Meetup 2021-07, &lt;a href="https://youtu.be/HG8mQ32m970"&gt;https://youtu.be/HG8mQ32m970&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Genshin and the Revelation Online, along with watching bunches of K-dramas and western TV shows with Patrice. The last drama is Vocie 4.
&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Taipei Grand Trail, &lt;a href="https://gisweb.taipei.gov.tw/release/"&gt;https://gisweb.taipei.gov.tw/release/&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Kudzu, &lt;a href="https://wiki.guildwars2.com/wiki/Kudzu"&gt;https://wiki.guildwars2.com/wiki/Kudzu&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;AWS Certified DevOps Engineer — Professional, &lt;a href="https://aws.amazon.com/certification/certified-devops-engineer-professional/?nc1=h_ls"&gt;https://aws.amazon.com/tw/certification/certified-devops-engineer-professional/&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;DOP exame guide, &lt;a href="https://d1.awsstatic.com/training-and-certification/docs-devops-pro/AWS-Certified-DevOps-Engineer-Professional_Exam-Guide.pdf"&gt;https://d1.awsstatic.com/training-and-certification/docs-devops-pro/AWS-Certified-DevOps-Engineer-Professional_Exam-Guide.pdf&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Amazon Web Services, Inc. or its affiliates., 2017. &lt;em&gt;Running Containerized Microservices on AWS&lt;/em&gt;. [ebook] Available at: &lt;a href="https://d1.awsstatic.com/whitepapers/DevOps/running-containerized-microservices-on-aws.pdf"&gt;https://d1.awsstatic.com/whitepapers/DevOps/running-containerized-microservices-on-aws.pdf&lt;/a&gt; [Accessed 25 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Amazon Web Services, Inc. or its affiliates., 2021. &lt;em&gt;Elastic Load Balancing features&lt;/em&gt;. [online] Amazon Web Services, Inc. Available at: &lt;a href="https://aws.amazon.com/elasticloadbalancing/features/"&gt;https://aws.amazon.com/elasticloadbalancing/features/&lt;/a&gt; [Accessed 7 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Amazon Web Services, Inc. or its affiliates, 2021. &lt;em&gt;Error retries and exponential backoff in AWS&lt;/em&gt;. [online] Docs.aws.amazon.com. Available at: &lt;a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html"&gt;https://docs.aws.amazon.com/general/latest/gr/api-retries.html&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Ball, D. and Fallahi, K., 2020. &lt;em&gt;AWS CodeDeploy now supports linear and canary deployments for Amazon ECS&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/containers/aws-codedeploy-now-supports-linear-and-canary-deployments-for-amazon-ecs/"&gt;https://aws.amazon.com/tw/blogs/containers/aws-codedeploy-now-supports-linear-and-canary-deployments-for-amazon-ecs/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Beswick, J., 2020. &lt;em&gt;Best practices for organizing larger serverless applications&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/compute/best-practices-for-organizing-larger-serverless-applications/"&gt;https://aws.amazon.com/tw/blogs/compute/best-practices-for-organizing-larger-serverless-applications/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Bingöl, S., 2020. &lt;em&gt;Exam Readiness : AWS DevOps Engineer Professional (DOP-C01)&lt;/em&gt;. [online] Medium. Available at: &lt;a href="https://medium.com/aws-certified-user-group-turkey/exam-readiness-aws-devops-engineer-professional-dop-c01-975e22b3f98a"&gt;https://medium.com/aws-certified-user-group-turkey/exam-readiness-aws-devops-engineer-professional-dop-c01-975e22b3f98a&lt;/a&gt; [Accessed 7 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Bhattacharya, S., Benjamin, G. and Natarajan, V., 2021. &lt;em&gt;Simplify your data lifecycle by using object tags with Amazon S3 Lifecycle&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/storage/simplify-your-data-lifecycle-by-using-object-tags-with-amazon-s3-lifecycle/"&gt;https://aws.amazon.com/blogs/storage/simplify-your-data-lifecycle-by-using-object-tags-with-amazon-s3-lifecycle/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Chapman, C., 2020. &lt;em&gt;Creating a secure DevOps pipeline for AWS Service Catalog&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/mt/creating-a-secure-devops-pipeline-for-aws-service-catalog/"&gt;https://aws.amazon.com/blogs/mt/creating-a-secure-devops-pipeline-for-aws-service-catalog/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Cowan, J., Sharma, A. and Dalbhanjan, P., 2017. &lt;em&gt;Blue/Green Deployments with Amazon Elastic Container Service&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/compute/bluegreen-deployments-with-amazon-ecs/"&gt;https://aws.amazon.com/tw/blogs/compute/bluegreen-deployments-with-amazon-ecs/&lt;/a&gt; [Accessed 18 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;DeJong, K., 2020. &lt;em&gt;Introducing AWS CloudFormation modules&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/mt/introducing-aws-cloudformation-modules/"&gt;https://aws.amazon.com/blogs/mt/introducing-aws-cloudformation-modules/&lt;/a&gt; [Accessed 28 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Docker Inc., 2021. &lt;em&gt;Configure logging drivers&lt;/em&gt;. [online] Docker Documentation. Available at: &lt;a href="https://docs.docker.com/config/containers/logging/configure/"&gt;https://docs.docker.com/config/containers/logging/configure/&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Dodge, C. and Quigg, S., 2018. &lt;em&gt;A simpler way to assess the network exposure of EC2 instances: AWS releases new network reachability assessments in Amazon Inspector&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/security/amazon-inspector-assess-network-exposure-ec2-instances-aws-network-reachability-assessments/"&gt;https://aws.amazon.com/blogs/security/amazon-inspector-assess-network-exposure-ec2-instances-aws-network-reachability-assessments/&lt;/a&gt; [Accessed 1 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Hochstein, L., Prytoegrian, Siqueira, D., Basgall, S., Smith, S., Harvey, A. and Berry, C., 2016. &lt;em&gt;Netflix/chaosmonkey: Chaos Monkey is a resiliency tool that helps applications tolerate random instance failures&lt;/em&gt;. [online] GitHub. Available at: &lt;a href="https://github.com/netflix/chaosmonkey"&gt;https://github.com/netflix/chaosmonkey&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Houlihan, R., 2018. &lt;em&gt;Amazon DynamoDB Deep Dive: Advanced Design Patterns for DynamoDB (DAT401)&lt;/em&gt;. [video] Available at: &lt;a href="https://youtu.be/HaEPXoXVf2k"&gt;https://youtu.be/HaEPXoXVf2k&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Jayendra’s Cloud Certification Blog. 2021. &lt;em&gt;AWS Certified DevOps Engineer — Professional (DOP-C01) Exam Learning Path&lt;/em&gt;. [online] Available at: &lt;a href="https://jayendrapatil.com/aws-certified-devops-engineer-professional-exam-learning-path/"&gt;https://jayendrapatil.com/aws-certified-devops-engineer-professional-exam-learning-path/&lt;/a&gt; [Accessed 24 May 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Idziorek, J., 2017. &lt;em&gt;Amazon DynamoDB Accelerator (DAX): A Read-Through/Write-Through Cache for DynamoDB&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/database/amazon-dynamodb-accelerator-dax-a-read-throughwrite-through-cache-for-dynamodb/"&gt;https://aws.amazon.com/blogs/database/amazon-dynamodb-accelerator-dax-a-read-throughwrite-through-cache-for-dynamodb/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Intellipaat, 2019. &lt;em&gt;Puppet Tutorial for Beginners | Puppet Tutorial | Intellipaat&lt;/em&gt;. [video] Available at: &lt;a href="https://www.youtube.com/watch?v=kHD4KQKKP5Y"&gt;https://www.youtube.com/watch?v=kHD4KQKKP5Y&lt;/a&gt; [Accessed 3 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Ismail, M. and Bentzen, M., 2021. &lt;em&gt;Secure your Amazon VPC DNS resolution with Amazon Route 53 Resolver DNS Firewall&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/networking-and-content-delivery/secure-your-amazon-vpc-dns-resolution-with-amazon-route-53-resolver-dns-firewall/"&gt;https://aws.amazon.com/blogs/networking-and-content-delivery/secure-your-amazon-vpc-dns-resolution-with-amazon-route-53-resolver-dns-firewall/&lt;/a&gt; [Accessed 7 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Lempka, R., 2021. &lt;em&gt;Improve monitoring of AWS Systems Manager Agent&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/mt/improve-monitoring-of-aws-systems-manager-agent/"&gt;https://aws.amazon.com/blogs/mt/improve-monitoring-of-aws-systems-manager-agent/&lt;/a&gt; [Accessed 7 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Lewis, J. and Fowler, M., 2014. &lt;em&gt;Microservices&lt;/em&gt;. [online] martinfowler.com. Available at: &lt;a href="https://martinfowler.com/articles/microservices.html"&gt;https://martinfowler.com/articles/microservices.html&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Liu, F., 2021. &lt;em&gt;Model serving in Java with AWS Elastic Beanstalk made easy with Deep Java Library&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/machine-learning/model-serving-in-java-with-aws-elastic-beanstalk-made-easy-with-deep-java-library/"&gt;https://aws.amazon.com/tw/blogs/machine-learning/model-serving-in-java-with-aws-elastic-beanstalk-made-easy-with-deep-java-library/&lt;/a&gt; [Accessed 2 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Malhotra, S. and Mathur, R., 2020. &lt;em&gt;How to get notified on specific Lambda function error patterns using CloudWatch&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/mt/get-notified-specific-lambda-function-error-patterns-using-cloudwatch/"&gt;https://aws.amazon.com/blogs/mt/get-notified-specific-lambda-function-error-patterns-using-cloudwatch/&lt;/a&gt; [Accessed 9 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Meyer, C., 2018. &lt;em&gt;Signaling AWS CloudFormation WaitConditions using AWS PrivateLink&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/mt/signaling-aws-cloudformation-waitconditions-using-aws-privatelink/"&gt;https://aws.amazon.com/blogs/mt/signaling-aws-cloudformation-waitconditions-using-aws-privatelink/&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Miguelez, B. and Chapman, C., 2020. &lt;em&gt;Standardizing CI/CD pipelines for .NET web applications with AWS Service Catalog&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/devops/standardizing-cicd-pipelines-net-web-applications-aws-service-catalog/"&gt;https://aws.amazon.com/tw/blogs/devops/standardizing-cicd-pipelines-net-web-applications-aws-service-catalog/&lt;/a&gt; [Accessed 3 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Mui, A. and Vlasceanu, V., 2015. (DVO401) &lt;em&gt;Deep Dive into Blue/Green Deployments on AWS&lt;/em&gt;. [video] Available at: &lt;a href="https://youtu.be/aX54mhZbN58"&gt;https://youtu.be/aX54mhZbN58&lt;/a&gt; [Accessed 17 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Munns, C., 2017. &lt;em&gt;Implementing Canary Deployments of AWS Lambda Functions with Alias Traffic Shifting&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/compute/implementing-canary-deployments-of-aws-lambda-functions-with-alias-traffic-shifting/"&gt;https://aws.amazon.com/tw/blogs/compute/implementing-canary-deployments-of-aws-lambda-functions-with-alias-traffic-shifting/&lt;/a&gt; [Accessed 5 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Peven, B., 2020. &lt;em&gt;Introducing Instance Refresh for EC2 Auto Scaling&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/compute/introducing-instance-refresh-for-ec2-auto-scaling/"&gt;https://aws.amazon.com/blogs/compute/introducing-instance-refresh-for-ec2-auto-scaling/&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Rakesh Singh, 2021. &lt;em&gt;Blue/Green deployment with AWS Developer tools on Amazon EC2 using Amazon EFS to host application source code&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/devops/blue-green-deployment-with-aws-developer-tools-on-amazon-ec2-using-amazon-efs-to-host-application-source-code/"&gt;https://aws.amazon.com/blogs/devops/blue-green-deployment-with-aws-developer-tools-on-amazon-ec2-using-amazon-efs-to-host-application-source-code/&lt;/a&gt; [Accessed 7 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Rathore, A., 2020. &lt;em&gt;AWS Networking — ENI, ENA &amp;amp; EFA&lt;/em&gt;. [online] Medium. Available at: &lt;a href="https://medium.com/nerd-for-tech/aws-networking-eni-ena-efa-2db316fdbf85"&gt;https://medium.com/nerd-for-tech/aws-networking-eni-ena-efa-2db316fdbf85&lt;/a&gt; [Accessed 6 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Saha, M., 2020. &lt;em&gt;How to visualize multi-account Amazon Inspector findings with Amazon Elasticsearch Service&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/security/how-to-visualize-multi-account-amazon-inspector-findings-with-amazon-elasticsearch-service/"&gt;https://aws.amazon.com/blogs/security/how-to-visualize-multi-account-amazon-inspector-findings-with-amazon-elasticsearch-service/&lt;/a&gt; [Accessed 1 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Sato, D., 2014. &lt;em&gt;bliki: CanaryRelease&lt;/em&gt;. [online] martinfowler.com. Available at: &lt;a href="https://martinfowler.com/bliki/CanaryRelease.html"&gt;https://martinfowler.com/bliki/CanaryRelease.html&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Sharma, A., Cowan, J., Sosiak, Y., Dalbhanjan, P. and Siri, J., 2017. &lt;em&gt;Reference architecture for doing blue green deployments on ECS&lt;/em&gt;. [online] GitHub. Available at: &lt;a href="https://github.com/aws-samples/ecs-blue-green-deployment"&gt;https://github.com/aws-samples/ecs-blue-green-deployment&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Wagner, A., 2017. &lt;em&gt;Automatically Archive Items to S3 Using DynamoDB Time to Live (TTL) with AWS Lambda and Amazon Kinesis Firehose&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/database/automatically-archive-items-to-s3-using-dynamodb-time-to-live-with-aws-lambda-and-amazon-kinesis-firehose/"&gt;https://aws.amazon.com/tw/blogs/database/automatically-archive-items-to-s3-using-dynamodb-time-to-live-with-aws-lambda-and-amazon-kinesis-firehose/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;White, E., Horsfield, S. and Sethi, A., 2021. &lt;em&gt;Introducing Native Support for Predictive Scaling with Amazon EC2 Auto Scaling&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/compute/introducing-native-support-for-predictive-scaling-with-amazon-ec2-auto-scaling/"&gt;https://aws.amazon.com/blogs/compute/introducing-native-support-for-predictive-scaling-with-amazon-ec2-auto-scaling/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Wikipedia, 2021. &lt;em&gt;Conway’s law&lt;/em&gt;. [online] En.wikipedia.org. Available at: &lt;a href="https://en.wikipedia.org/wiki/Conway's_law"&gt;https://en.wikipedia.org/wiki/Conway's_law&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Wiggins, A., 2017. &lt;em&gt;The Twelve-Factor App&lt;/em&gt;. [online] 12factor.net. Available at: &lt;a href="https://12factor.net/"&gt;https://12factor.net/&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>career</category>
      <category>certifications</category>
    </item>
  </channel>
</rss>
