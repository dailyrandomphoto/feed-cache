<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Should you listen to music while you code?</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 06 Sep 2021 14:54:25 +0000</pubDate>
      <link>https://dev.to/codesphere/should-you-listen-to-music-while-you-code-gkj</link>
      <guid>https://dev.to/codesphere/should-you-listen-to-music-while-you-code-gkj</guid>
      <description>&lt;p&gt;Written by Dan Parry. &lt;/p&gt;

&lt;p&gt;Listening to music while coding is a topic I often find myself talking to other developers about and everyone seems to have a different opinion or preference. Some don't like to listen to anything, needing silence to really focus. Others are into 'chill beats' to help them find their flow, and one maniac I know can code to black metal (he's from Finland).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jgd286MN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rymfwaxupit2lvdn9hb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jgd286MN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rymfwaxupit2lvdn9hb.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;It's all subjective! What works for you might not work for another but the reasoning is always the same - it's about finding a state of focus, creating an environment that minimizes outside interference and allows you to fix the problem at hand.&lt;/p&gt;

&lt;p&gt;I am listening to music right now as I write this, just like I do when I write code. For me personally, and I believe many others like me, I find lyricless low-fi beats allow me to tune in and drop out the best. Songs with a lot of lyrics pull my concentration and distract me too easily. That's not to say my peers may not find Bohemian Rhapsody the way to go! What do you like?&lt;/p&gt;

&lt;p&gt;For me, music can shut out the outside world and allow me to get lost in what I am doing, so much so that by the time I look up the music might have stopped already and I hadn't even noticed. But maybe you don't listen to music at all…&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#if-silence-is-gold-why-cant-we-sell%C2%A0it"&gt;
  &lt;/a&gt;
  If silence is gold, why can't we sell it?
&lt;/h3&gt;

&lt;p&gt;There is a strong argument that listening to music can be detrimental to true focus, stating that in order to properly process information the brain needs to analyze and retain instructions.&lt;/p&gt;

&lt;p&gt;When listening to music, the added stress of processing audio data can cause the brain to misinterpret things or make mistakes. Which, I suppose, might explain any grammatical errors you find in my writing today.&lt;/p&gt;

&lt;p&gt;This stance does line up with the global library ethos of "shhh! you're in a library" - people are reading and therefore a noisy environment is not good for them, so shut up or get out. Noise can increase stress levels, adversely affect the prefrontal cortex, and thereby lower productivity!&lt;/p&gt;

&lt;p&gt;The counterpoint to this is of course that putting on headphones boils the myriad of sounds and distractions down to just you and the tune. Studies have shown that listening to music while performing repetitive tasks can increase productivity but again, it really depends on the individual.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yCw8dbHa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq8823c6llw3ih3n9bjz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCw8dbHa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq8823c6llw3ih3n9bjz.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#a-place-for-my%C2%A0head"&gt;
  &lt;/a&gt;
  A place for my head
&lt;/h3&gt;

&lt;p&gt;Music or audio input, in general, can prevent the mind from wandering off and create a space for the mind to reside in.&lt;/p&gt;

&lt;p&gt;I listen to music when I work for example, but I listen to audiobooks when I run - a practice I highly recommend to any runners reading this that haven't tried it. When I am in control of the task and I am required to exercise my mind, non-intrusive music provides me with a space to do that because it removes external distractions without introducing new ones.&lt;/p&gt;

&lt;p&gt;When I need to shut my brain out or otherwise distract it while I do something that it's not really needed for, an audiobook is a perfect babysitter for my short attention span. &lt;/p&gt;

&lt;p&gt;It's all about finding how to harness the potential of your mind. What environment provides the best conditions for you to focus yourself on the task you're completing. Deep focus itself is a fascinating topic and one we will discuss another time because it allows you and coders like you to fully explore an issue or topic at hand.&lt;/p&gt;

&lt;p&gt;You will be surprised at just how negative the effect of moving from one task to another can be if they require different emotional sensibilities to complete. Moving from writing code to writing emails requires an entirely different part of your brain to do and can result in you achieving neither as well as you are really able to.&lt;/p&gt;

&lt;p&gt;Developers that are able to truly focus on the same issue for a long time with no distraction, to deeply focus, are able to find a state of workflow that the rest of us would envy if we could only experience it. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sonic-youth"&gt;
  &lt;/a&gt;
  Sonic youth
&lt;/h3&gt;

&lt;p&gt;Gone are my teen years of MSN messenger and LimeWire when I would listen to obnoxiously loud music while surfing the internet and writing essays for school. It may be that the input of information we are exposed to has grown so much when we are online that the role of music has changed from a distraction to a blocker.&lt;/p&gt;

&lt;p&gt;It is true the genres of music I listen to while I work have changed dramatically in the intervening years. There is no accounting for taste but as I mentioned earlier I write now to non-intrusive instrumental music, but I wrote my dissertation to Metallica.&lt;/p&gt;

&lt;p&gt;There may be a case that my adolescent mind was better at multitasking, but I think the evidence is clear that complicated tasks require a clean backdrop for the mind to be set against, and music (or silence) can provide that. The overwhelming amount of "music to code to" videos on youtube in this style would support this theory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3U9Gqnc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48szvr0y7kg9dg2mlm7c.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3U9Gqnc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48szvr0y7kg9dg2mlm7c.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That being said, I can still code, run, eat or sleep to Tool.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#ok-listen-to%C2%A0this"&gt;
  &lt;/a&gt;
  Ok, listen to this…
&lt;/h3&gt;

&lt;p&gt;I will leave you with a piece of information I have been thinking about ever since I came across it at university over a decade ago…&lt;/p&gt;

&lt;p&gt;A man was placed in an anechoic chamber, a specially constructed room that allows no sound in or out, he reported hearing a high pitched and a low pitch frequency. The low pitch frequency was the blood rushing through his veins and the high pitch frequency was his own nervous system.&lt;/p&gt;

&lt;p&gt;All living things will experience the same and seeing as no electronic device can record true silence without some level of electronic feedback. So it would seem to me that there is no such thing as silence anyway…so you might as well stick a tune on while you're coding.&lt;/p&gt;




&lt;p&gt;What's your favorite music to code to? Do you listen to music at all? Maybe you totally disagree with everything I've said, but that's ok, it's subjective. One man's music is another man's noise, so find your focus!&lt;/p&gt;

&lt;p&gt;Happy coding from your good friends at &lt;a href="https://link.codesphere.com/DC"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
      <category>music</category>
      <category>coding</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Understanding Java packages for the absolute beginner.</title>
      <author>Hopeuche360</author>
      <pubDate>Mon, 06 Sep 2021 14:36:47 +0000</pubDate>
      <link>https://dev.to/onychris/understanding-java-packages-for-the-absolute-beginner-5dik</link>
      <guid>https://dev.to/onychris/understanding-java-packages-for-the-absolute-beginner-5dik</guid>
      <description>&lt;p&gt;What are Java packages?&lt;br&gt;
We all began from somewhere in our journey to learning how to code and software development in general. One characteristic of seasoned developers is not that they can write codes or their thought processes, it is that their foundational knowledge is solid. They know this stuff. So, any beginner Java programmer aspiring to be great should get an excellent grasp of the basics, especially Java Packages.&lt;/p&gt;

&lt;p&gt;When you see the term “package,” don’t think of it as jargon to deceive you. Instead, think of folders and folder structures, because thats what a package is in the most basic form. Java packages are clusters of comparable varieties of categories, interfaces, and sub-packages. It is a mechanism for encapsulating teams of Java packages, classes, sub-packages, and interfaces.&lt;/p&gt;

&lt;p&gt;Types of Java packages&lt;br&gt;
There are essentially two types of Java packages, namely the User-defined packages and the built-in packages.&lt;/p&gt;

&lt;p&gt;Built-in package&lt;br&gt;
The built-in package consists of the many categories that constitute a part of the Java API. A number of the inherent packages are:&lt;/p&gt;

&lt;p&gt;java.lang: Contains language support categories (for example, categories that outline default knowledge varieties, like math).&lt;br&gt;
java.io: Contains categories to support input / output operations.&lt;br&gt;
java.util: Contains utility categories for implementing knowledge structures like a List of collections and dictionaries to support date/time work.&lt;br&gt;
java.applet: Contains categories for making applications programms.&lt;br&gt;
java.awt: Contains categories for implementing elements of graphical user interfaces (for example, buttons, menus, etc.).&lt;br&gt;
java.net: Contains categories that support network operations.&lt;/p&gt;

&lt;p&gt;User-defined packages&lt;br&gt;
As the name suggests, these packages are user-defined. We create a folder whose name should be the same as the name of the package. Next, we create a class inside the folder.&lt;/p&gt;

&lt;p&gt;Package names and directory structure are closely related. For example, if a package name is school.faculty.department, then there are three directories school, faculty, and department. The school package can be thought of as a tier one package, while faculty is a school sub-package and department is a sub-package of faculty.&lt;/p&gt;

&lt;p&gt;Why do we need packages in Java?&lt;br&gt;
Java packages make it easy to find or locate classes and interfaces.&lt;br&gt;
Java packages help to avoid name conflicts. For example, there could be two classes with the name Student in two packages, school.scienceDepartment.Student and school.educationDepartment.Student.&lt;br&gt;
Java packages perform data encapsulation (or data masking).&lt;br&gt;
Java packages provide controlled access. Access designations are protected and have packet-level access control by default. A member declared as guard is accessible by classes of the same package and its subclasses. A member without an access specifier is a default identifier that can only be accessed by classes in the same package.&lt;br&gt;
Java packages reuse classes contained in packages from other programs.&lt;br&gt;
Java packages provide a unique comparison of classes in other packages.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Writing "The Art Of Micro Frontends"</title>
      <author>Florian Rappl</author>
      <pubDate>Mon, 06 Sep 2021 14:07:12 +0000</pubDate>
      <link>https://dev.to/florianrappl/writing-the-art-of-micro-frontends-31ce</link>
      <guid>https://dev.to/florianrappl/writing-the-art-of-micro-frontends-31ce</guid>
      <description>&lt;p&gt;Two months ago my book "The Art of Micro Frontends" was published by Packt. Personally, I had a great time writing the book and working together with the amazing people at Packt, which is why I wanted to share the experience and give a little bit of advice from my point of view.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-NI8spT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1177096872579731458/IHg9ZP0M_normal.jpg" alt="Florian Rappl profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Florian Rappl
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/florianrappl"&gt;@florianrappl&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      So &lt;a href="https://twitter.com/hashtag/happy"&gt;#happy&lt;/a&gt; that my &lt;a href="https://twitter.com/hashtag/book"&gt;#book&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/art"&gt;#art&lt;/a&gt; of &lt;a href="https://twitter.com/hashtag/microfrontends"&gt;#microfrontends&lt;/a&gt; has finally been &lt;a href="https://twitter.com/hashtag/published"&gt;#published&lt;/a&gt;! &lt;a href="https://t.co/AtJfi2eYdh"&gt;packt.live/3wk2fkX&lt;/a&gt; Thanks to the whole team at &lt;a href="https://twitter.com/PacktPub"&gt;@PacktPub&lt;/a&gt; and everyone contributing!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:00 PM - 07 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1412818701691224065" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1412818701691224065" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1412818701691224065" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In short, this is how the book looks like on Amazon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://packt.live/3wk2fkX"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2XGcY5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dby5axqtcwf11mqglngg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-idea"&gt;
  &lt;/a&gt;
  The Idea
&lt;/h2&gt;

&lt;p&gt;The idea of writing a book about micro frontends was born in mid 2019 when &lt;a href="https://github.com/smapiot/piral"&gt;Piral&lt;/a&gt; was born out of &lt;a href="https://smapiot.com/"&gt;smapiot&lt;/a&gt;'s open-source efforts. We've been leading and assisting to micro frontend implementations for a while, and our intention was to put together an (almost) ideal pattern into an open-source framework.&lt;/p&gt;

&lt;p&gt;Even though our framework is primarily targeted at client-side rendering our knowledge in the whole space is something that is worth talking about. Over the years, I was fortunate enough to give talks at numerous conferences and publish dozens of articles on the subject.&lt;/p&gt;

&lt;p&gt;One of the bigger conference where smapiot as a company was asked to present was &lt;a href="https://conferences.oreilly.com/software-architecture/sa-eu-2019.html"&gt;O'Reilly's Software Architecture conference in Berlin&lt;/a&gt;. Here, we got in touch with some of the people at O'Reilly - discussing various opportunities. Ultimately, it became clear that packaging my knowledge into a book may be a task worth doing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-a-publisher"&gt;
  &lt;/a&gt;
  Finding a Publisher
&lt;/h2&gt;

&lt;p&gt;First approached by O'Reilly, but that was no fit as the expectation already deviated from my vision. Also, I heard that Luca may already be in touch with them, so I was not positive that any proposal would make it through their processes. Why should they publish two books on the same subject?&lt;/p&gt;

&lt;p&gt;I was then approached by Manning, but since they already got a (great) book by Michael Geers they have only been interested in something like an online lecture (called "live project"). Here, their idea was to come up with some real life scenario that needs to be implemented by the student. I was actually already convinced that this may be a viable way forward, however, the response to the proposal was then frustrating. Keeping all their requirements in mind they then pretty much went into the opposite direction. For me this was a deal breaker as I value consistency and don't like my time being wasted.&lt;/p&gt;

&lt;p&gt;The third party to approach me was &lt;a href="https://www.packtpub.com/"&gt;Packt&lt;/a&gt;. Here, everything went right from the beginning. It was clear that they are highly interested in publishing a book and that they want it to be published by me - and the way I envision it. Once settled that we are on the same page they requested a detailed outline.&lt;/p&gt;

&lt;p&gt;My advice on this one is to go with a publisher who you believe understands you and the thing you want to write about. If you are not convinced of their intentions or plans for the book then don't do it. Most likely your book will not make you rich. That's fine. But you should be fine with the book and its contents. The book should provide you something you are happy to talk about, use as a reference, and show around. Don't necessarily go with the best offer regarding money. Go with the offer that reflects your idea the best.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-time"&gt;
  &lt;/a&gt;
  The Time
&lt;/h2&gt;

&lt;p&gt;I've started writing the book in November 2020 and finished around May 2021. All in all I'd not recommend spending less time on it. Especially if you want to fine tune some graphics you'll need more - not less - time for writing a book with 200+ pages (the book has even around 300 pages making it even more time consuming to write).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outlining-the-content"&gt;
  &lt;/a&gt;
  Outlining the Content
&lt;/h2&gt;

&lt;p&gt;One of the hardest parts about writing a book is finding the correct structure. In the end, this will determine quite a few things - and will actually make the book more accessible to some readers than to others. I did not want to do experiments here. So I've chosen a structure that starts with some general ideas and motivations, before it covers the available patterns in the most practical way. Finally, after the practical part ends I've chosen to include some case studies and high-level information which may be useful to successfully implement micro frontend projects at larger companies.&lt;/p&gt;

&lt;p&gt;What surprised my from the publisher was that the process of outlining the book was really detailed. It turns out that this is a lot of work. It was not only about finding the right structure, but also explaining it, writing what is actually covered in quite some detail and then even estimating the amount of pages. Especially the last part is tricky.&lt;/p&gt;

&lt;p&gt;How should I estimate the amount of pages if I don't know what examples I'll use or how much space they require? What format is used here? I had to make some assumptions here - like A4 with font size 12pt will be used here for these drafts. I also assumed that things like diagrams and code will take about 20% of the space meaning that every word-only estimate would need a fixed factor of 1.25 to be more realistic.&lt;/p&gt;

&lt;p&gt;My advice on this would be: Take your time here. This may be the most important work and it will happen before the actual work, which may be deceiving. Everything you do here will not only follow you for the rest of writing the book, but also for the book itself. There may be future editions of the book, but they will rarely (i.e., never) deviate from the plan you make here. Make it good. Think about it twice and then one more time.&lt;/p&gt;

&lt;p&gt;One of the things that bothered me in the whole context was that basic things like terminology have not been determined, yet I was already writing a lot of text assuming a standard vocabulary. One of the most basic things was how to refer to micro frontends.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#micro-frontends-and-alternatives"&gt;
  &lt;/a&gt;
  Micro Frontends and Alternatives
&lt;/h2&gt;

&lt;p&gt;If you start a Google search you'll see some variants on the matter: microfrontends, micro-frontends, and micro frontends. Personally, I am a strong believer in microfrontends. If you write "microservice" you also need to settle on "microfrontend". There is no other way. However, if you are a strong believer in the "first one to mention it wins" philosophy then potentially "micro frontend" is the one - this is the name that was chosen by &lt;a href="https://www.thoughtworks.com/de/radar/techniques/micro-frontends"&gt;ThoughtWorks&lt;/a&gt; when it appeared on their tech radar.&lt;/p&gt;

&lt;p&gt;Naturally, there was an initial discussion about what word to use here. While some favored micro-frontends or micro frontends (mostly due to SEO) I was quite convinced that consistency is key - therefore opting into microfrontends. This was then also the chosen name until... well pretty much the last draft. Then it was changed in a mutual agreement due to better alignment with the community (and better search results on Amazon). Today, I still stay strong on my desire regarding consistency here, but I also feel that "MF" is a good acronym. In the end, it does not matter much - as long as everyone knows what's behind that word.&lt;/p&gt;

&lt;p&gt;A much easier discussion was around the title.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-the-title"&gt;
  &lt;/a&gt;
  Choosing the Title
&lt;/h2&gt;

&lt;p&gt;The title of the book should somewhat not only reflect its contents, but also its ambition. It should draw the attention of potential readers. And it should be minimal and to the point. This is not an easy thing to achieve. It may actually be one of the hardest parts in writing. Together with some editors at Packt we brainstormed this a bit and came up with some suggestions. In the end, we settled for a quite conservative, yet bold statement: "The Art of Micro Frontends" essentially tries to be a complete reference for the subject, while staying practical and down to earth.&lt;/p&gt;

&lt;p&gt;My advice on this would be: go with a title you are comfortable with and that would make you happy to have on a book. That the title should (at least up to a certain degree) reflect the contents of the book should be self explanatory here. Don't lie, but still try to sell it (and make you happy).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Overall I had a great experience writing the book. The feedback and suggestions from the Packt team has been great. They are always very welcoming and try to make the best possible product here.&lt;/p&gt;

&lt;p&gt;The only regret that I have is that I did not insist on reviewing the last draft in more detail. I'd have wished to still get on or the other smaller fix or improvement in there, but luckily, these are only minor exceptions and overall I am pretty happy with the outcome.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>writing</category>
      <category>books</category>
      <category>architecture</category>
    </item>
    <item>
      <title>ES6 - A beginners guide - Rest and Spread Operator</title>
      <author>Stefan Wright</author>
      <pubDate>Mon, 06 Sep 2021 13:59:58 +0000</pubDate>
      <link>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-rest-and-spread-operator-2he9</link>
      <guid>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-rest-and-spread-operator-2he9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hey-welcome-back"&gt;
  &lt;/a&gt;
  Hey, Welcome back!
&lt;/h2&gt;

&lt;p&gt;In this article I am going to look into the Rest parameter and Spread operator introduced with ES6. The purpose of these two new entries into the JS specification is to help with condensing the volume of code we write and improve readability. &lt;code&gt;rest&lt;/code&gt; is used as a parameter in a function declaration to condense an indeterminate number of parameters into a single array, whereas &lt;code&gt;spread&lt;/code&gt; is used in the opposite sense in that we can split iterables (arrays/objects/strings) into individual arguments. Let's at these seperately with some code examples shall we?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rest"&gt;
  &lt;/a&gt;
  Rest
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#how-is-raw-rest-endraw-done-in-es5"&gt;
  &lt;/a&gt;
  How is &lt;code&gt;...rest&lt;/code&gt; done in ES5?
&lt;/h3&gt;

&lt;p&gt;Typical in ES5 we were quite restricted in the supply of parameters to a function, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// Returns 3 in a console.log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we needed to handle an indeterminate amount of arguments we could reference the &lt;code&gt;arguments&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;newFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stefan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;coding&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// Returns {0: "Stefan", 1: "is", 2: "coding"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a problem with this approach, the return of the &lt;code&gt;arguments&lt;/code&gt; keyword is ann &lt;code&gt;array-like&lt;/code&gt; object. Unfortunately this means we cannot use array methods such as &lt;code&gt;.filter&lt;/code&gt;, or &lt;code&gt;.map&lt;/code&gt;. Also, if we were to try and combine the &lt;code&gt;arguments&lt;/code&gt; keyword and an ES6 arrow function it would not work because arrow functions do not contain their own &lt;code&gt;arguments&lt;/code&gt; binding, this leads to the introduction of the &lt;code&gt;...rest&lt;/code&gt; implementation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-how-to-use-raw-rest-endraw-in-es6"&gt;
  &lt;/a&gt;
  So... how to use &lt;code&gt;...rest&lt;/code&gt; in ES6
&lt;/h3&gt;

&lt;p&gt;As mention previously &lt;code&gt;...rest&lt;/code&gt; is used when we do not know the number of parameters that we want to handle in a function declaration. This can be used nicely for math type functions (when we utilise some of the Array helpers introduced with ES5, I am going to cover them later in the series), for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Returns 10 in a console.log&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Returns 55 in a console.log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We might already have some parameters that will always be supplied that we want to reference by name if so we can still declare tham as parameters and use &lt;code&gt;...rest&lt;/code&gt; to automatically use the rest of the parameters. For example here is a very simple example where we still want to have &lt;code&gt;num1&lt;/code&gt; and &lt;code&gt;num2&lt;/code&gt; as named parameters and we'll use that for the starting value in our &lt;code&gt;.reduce&lt;/code&gt; helper, but also we can have reference to the rest of the parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Returns 10 in a console.log&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Returns 55 in a console.log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing to note though, &lt;code&gt;...rest&lt;/code&gt; parameters &lt;strong&gt;&lt;em&gt;must&lt;/em&gt;&lt;/strong&gt; appear at the end of the list of parameters. Attempting to place anything after the &lt;code&gt;...rest&lt;/code&gt; parameter will trigger an &lt;code&gt;Uncaught SyntaxError&lt;/code&gt; in your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spread"&gt;
  &lt;/a&gt;
  Spread
&lt;/h2&gt;

&lt;p&gt;So, as I mentioned earlier &lt;code&gt;...spread&lt;/code&gt; is used to split iterables (arrays/objects/strings) into a list of agruments, it can also be used to combine multiple arrays into one single array. Let's take a look:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-es5-way"&gt;
  &lt;/a&gt;
  The ES5 way
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// Concatenate an array&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arr3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Returns [1, 2, 3, 4, 5, 6] in a console.log&lt;/span&gt;

&lt;span class="c1"&gt;// Copying an array&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arr4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Returns [4, 5, 6] in a console.log&lt;/span&gt;
&lt;span class="c1"&gt;// Note: there is a risk when copying an array in this manner, see explanation after this code block&lt;/span&gt;

&lt;span class="c1"&gt;// Expanding an array&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arr5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;expanded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Returns [[1, 2, 3], 4, 5] in a console.log&lt;/span&gt;

&lt;span class="c1"&gt;// String to Array&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stefan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Returns ['s', 't', 'e', 'f', 'a', 'n'] in a console.log&lt;/span&gt;

&lt;span class="c1"&gt;// Math functions&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Returns NaN in a console.log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the "copying" example I noted that that way of work is susceptible to error, the reason for this is that in ES5 when you "copy" an array you are actually copying the reference to it, so if you update your "new" variable, you will actually update both copies of the array. Let me show you an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns [1, 2, 3, 4] in a console.log&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns [1, 2, 3, 4] in a console.log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#so-how-does-es6-raw-spread-endraw-help"&gt;
  &lt;/a&gt;
  So how does ES6 &lt;code&gt;...spread&lt;/code&gt; help?
&lt;/h2&gt;

&lt;p&gt;Using the &lt;code&gt;...spread&lt;/code&gt; operator in ES6 we can create a new list of arguments. This allows us to always treat the new var/let/const as a completely new item. Let's take a look at some of the above examples again in ES6 using &lt;code&gt;...spread&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Concatenate an array&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Returns [1, 2, 3, 4, 5, 6] in a console.log&lt;/span&gt;
&lt;span class="c1"&gt;// Note, the spread operator is ok in an example like this, but it is not recommended in potentially large application as it can cause excessive memory usage and risks of Stack Overflow errors. Using .concat is safer here&lt;/span&gt;

&lt;span class="c1"&gt;// Copying an array&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Returns [4, 5, 6] in a console.log&lt;/span&gt;

&lt;span class="c1"&gt;// Expanding an array&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;expanded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Returns [1, 2, 3, 4, 5] in a console.&lt;/span&gt;

&lt;span class="c1"&gt;// String to Array&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stefan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Returns ['s', 't', 'e', 'f', 'a', 'n'] in a console.log&lt;/span&gt;

&lt;span class="c1"&gt;// Math functions&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Returns 3 in a console.log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how the Math function now returns the value we expected?? Thats because instead of passing an array now (which ES5 would have done) we are passing &lt;code&gt;1, 2, 3&lt;/code&gt; so the function actually compiles like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// ...arr1 outputs 1, 2, 3&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Open source is a valuable development resource. Give it your attention</title>
      <author>Andreas Sommarström</author>
      <pubDate>Mon, 06 Sep 2021 13:34:49 +0000</pubDate>
      <link>https://dev.to/sumstrm/open-source-is-a-valuable-development-resource-give-it-your-attention-4haf</link>
      <guid>https://dev.to/sumstrm/open-source-is-a-valuable-development-resource-give-it-your-attention-4haf</guid>
      <description>&lt;p&gt;&lt;em&gt;Open source software (OSS) gives access to a never-ending amount of external development resources. Developing any application, it is simply more efficient to reuse building blocks from others than having to write everything yourself - a necessity for most organisations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Businesses should see the open source they depend on as a valuable resource - that requires management.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using OSS to build applications allows access to additional developer resources and expertise that wouldn’t otherwise be available. The downside - you have no direct influence over the persons behind the component or their actions. And there is no reason to blindly trust them.&lt;/p&gt;

&lt;p&gt;For internal development resources the norm is to spend time and money hiring the best candidates and continuously invest in their skills and performance. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Businesses need to echo some of that effort spent finding the right in-house talent into safe use of open source - instead of taking it for granted.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-source-in-short"&gt;
  &lt;/a&gt;
  Open source in short
&lt;/h2&gt;

&lt;p&gt;If you’re not working with software development or open source in your day-to-day work, then perhaps the analogy in the title is not self-explanatory. Not to worry, let’s walk through it.&lt;/p&gt;

&lt;p&gt;Today there is no need to start from scratch every time you are to deliver a feature. There are millions of already finished components ready to be used - and they are only a few letters on the keyboard away from being nested in your application and inside your environments.&lt;/p&gt;

&lt;p&gt;What makes something open source is that the source code for all these components is freely available to everyone and anyone, to view, duplicate, work on etc. That means that as long as you adhere to licenses of components, you can use them in your applications to serve your needs.&lt;/p&gt;

&lt;p&gt;And open source software has proven to be an explosive engine for business growth. And it’s everywhere. For ecosystems like JavaScript / npm the figures speak for themselves:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;99% of projects use open source components to some extent.&lt;/li&gt;
&lt;li&gt;An astonishing 70% of all code used to run applications are open source.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_xuQoQQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qn4buqn0xc5fpvpsj7o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_xuQoQQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qn4buqn0xc5fpvpsj7o.png" alt="70% of all code used to run applications are open source"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-massive-upside-whats-the-downside"&gt;
  &lt;/a&gt;
  So massive upside - what’s the downside?
&lt;/h3&gt;

&lt;p&gt;When your application utilize external dependencies you’ll depend on developers who you can exert no direct control over. Without control, how do you know whether the open source components in your codebase are being maintained and adhere to your security guidelines?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Core components of your business are probably relying on components that your dev team has never reviewed or seen the insides of.&lt;/em&gt; &lt;br&gt;
Let that sink in. Eye opening, isn’t it?&lt;/p&gt;

&lt;p&gt;And to be clear, open source is a positive thing. We wholeheartedly support it and use it every day in our own apps. But like most things in life it needs some safeguards to make sure everyone is playing by the rules.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Using a particular open source component extensively?&lt;/strong&gt; Consider supporting it! Sponsor, buy the developers some coffee or spend some development time on improving it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#manage-the-open-source-you-use-by-inserting-control-into-your-supply-chain"&gt;
  &lt;/a&gt;
  Manage the open source you use - by inserting control into your supply chain
&lt;/h2&gt;

&lt;p&gt;Not everyone can be an expert - and fortunately you don’t have to be. Committing to safe use of open source can be as simple as supporting the right process and tools for your organisation. Tooling that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Keeps track of the open source software used&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Identifies for security threats - and keeps potential issues out&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Highlights issues early- for easier and more cost-effective remediation&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://bytesafe.dev/"&gt;Bytesafe&lt;/a&gt; allows you to combine your team’s need for package management of JavaScript open source packages with security. Using Bytesafe, developers can access public open source dependencies or private proprietary components for your applications, securely. Mitigating risks for your business.&lt;/p&gt;

&lt;p&gt;Bytesafe identifies all the components your team is using and keeps track of them for you. Your supply chain is kept secure as part of the firewall where &lt;a href="https://bytesafe.dev/posts/using-quarantine-dependency-firewall/"&gt;threats are automatically quarantined&lt;/a&gt;. And all &lt;a href="https://bytesafe.dev/posts/using-issue-tracking/"&gt;issues are highlighted for you&lt;/a&gt; - accessible to all team members.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>security</category>
      <category>node</category>
      <category>devops</category>
    </item>
    <item>
      <title>When Should I Start Applying for Software Developer Jobs</title>
      <author>Joseph Mania</author>
      <pubDate>Mon, 06 Sep 2021 13:33:20 +0000</pubDate>
      <link>https://dev.to/maniamartial/when-should-i-start-applying-for-software-developer-jobs-1dh1</link>
      <guid>https://dev.to/maniamartial/when-should-i-start-applying-for-software-developer-jobs-1dh1</guid>
      <description>&lt;p&gt;Immediately after learning some slightly deeper concepts. What do you we by deep concepts? Here is the thing. Taking a four-year course or attending an 8-month bootcamp is enough to prepare you for any software development job. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The time you committed&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Mark Zuckerberg will tell you that a good programmer must spend 1000 hours writing codes. Yes, it's true, for you to call yourself an experienced programmer in a certain language or field, then you must have spent much time learning various concepts. Let us be honest, programming is difficult, it requires more time of commitment. &lt;/p&gt;

&lt;p&gt;For a 6-12 month bootcamp, you need like 8 hours per day, please let it be consecutive. For a 4 year course, if you could give 5 hours per day programming and doing research, you are good to solve complex programs. But don't confuse the quality and quantity, lol.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Basic understanding&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A full grasp of the basic concept is the core value of solving ambiguous problems. Please just follow this. If you want to solve complex problems, you must understand their roots. Therefore, if you are into web development, HTML5, CSS3, and JavaScript must be fully revised. Not just once, but frequently. Warning! You don’t need to know the whole of JavaScript, everyone experiences difficulty in this language, even senior engineers.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Framework&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Have you learned any frameworks by this time? If you are a front-end engineer then react, vuejs or angular must be in your toolbox. I don’t mean all of them, but choose one. If you are a backend engineer in the web development field, then nodejs, PHP/Laravel, or Django must be fully grasped. Chose one, for my case I learned Django in three months.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Projects on a resume.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What projects have you handled? It can be a fully optimized site. Make sure you have deployed it live on Netfly or Heroku. Have in mind that Heroku hosts dynamic projects, while netfly hosts static websites. If you are working with java or python, then let your project be on your GitHub account.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Able to read other people's code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Throughout your learning journey, kindly collaborate. Or take other people's code and try to read through it, look at how they write clean codes. Look at their comments, the naming of JavaScript variables, and functions. Be keen. You will realize how people write simple codes that might take you longer to write. But don’t panic, your time will come.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is your Github green?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please! Please! Have a Github account. Then, look at open-source projects and contribute. Have some 50% knowledge of how Github works. Because when you get a job, I am sure you are going to work with a team. This is where you will be getting your feedback on where each of you has reached.&lt;/p&gt;

&lt;p&gt;They will let you know if you are on the right or wrong track. Master the basics before applying for any job. Also, more interaction with GitHub, posting a few projects daily or weekly will make it green. The algorithm will show how consistent and determined you are. No company will give you a job without looking at your Github account.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I can do it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last thing is to believe in what you have learned. Don’t doubt your mind, not even your ability to handle some complex problems. Kindly, don’t rush applying to the big four companies if you are fresh from a local Bootcamp. Unless you join their own Bootcamps. But if you have been on a four-year computer science degree, it's your chance to give it a try.&lt;br&gt;
The big question is simple, do you understand the algorithm? That’s the full technical interview with large tech companies. &lt;br&gt;
Have hope and trust in God. It’s a matter of time and you will be a senior engineer. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to identify and avoid burnout as a software developer</title>
      <author>Luke Babich</author>
      <pubDate>Mon, 06 Sep 2021 13:23:54 +0000</pubDate>
      <link>https://dev.to/lukeinthecloud/how-to-identify-and-avoid-burnout-as-a-software-developer-1e4i</link>
      <guid>https://dev.to/lukeinthecloud/how-to-identify-and-avoid-burnout-as-a-software-developer-1e4i</guid>
      <description>&lt;p&gt;Recently me and some friends have been working on a side project. Since we had been hanging out together a lot more you start to get some insight into how they manage their time, as well as see how they burnout.&lt;/p&gt;

&lt;p&gt;This started to get me thinking that in the current tech space there is this constant need for validation and push towards always learning. However it is not talked about how on top of your regular job these extra learnings, side projects and general life start to add up and contribute to burnout.&lt;/p&gt;

&lt;p&gt;I recently made a video that outlines the issues and how to deal with burnout. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IZVZkVG283A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;However I will also discuss it here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt; &lt;br&gt;
I will focus on one main point within this article and that has to do with how developers (the ones in the frontend space in particular) are swamped with a so much information, tools, frameworks etc.&lt;/p&gt;

&lt;p&gt;This is not a bad thing. However I am sure there are people that have reached a point where they have been reading articles or been in software long enough to see the infamous &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;x framework vs y framework&lt;/strong&gt;, &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Top 10 tools this week&lt;/strong&gt;, &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What you need to know to be a good developer&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once again these are not necessarily bad. I am more focusing on the mindset. The feeling newer developers start to experience when either coming into the industry or just starting. I know I felt it when I first started and that was when half the current tools didn't exist yet. This feeling of a massive amount of learning. &lt;/p&gt;

&lt;p&gt;If I had to list every single tool or framework I have worked with or learnt, either in my free time or work the list would be quite a nice chunky read. The frontend ecosystem is always growing and evolving. However there is always pressure on people to try and learn it all as quick as they can. There is a reason there is a meme behind "Have 3 years of experience in X framework" when it has only been around for a year. This pressure to learn the latest and newest things as fast as possible, causes a ripple effect across the industry.&lt;/p&gt;

&lt;p&gt;What does this result in? New and existing developers feeling pressure to dedicate what little time they have and this can lead to burnout and lifestyle imbalances.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-controversy"&gt;
  &lt;/a&gt;
  The Controversy
&lt;/h2&gt;

&lt;p&gt; &lt;br&gt;
This take might seem somewhat double edged. On one hand its important to grow your skills. However on the other it is also important to not just wither away learning something that may not even be relevant in a few years time. Or rather, just to live a little.&lt;/p&gt;

&lt;p&gt;Some might say that learning is what they enjoy. That is fine and maybe then this article is not something that would really appeal to you. The idea behind this is to identify unhealthy habits that some people have when it comes to learning in their free time, on top of a job, side project and just a general busy schedule.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-the-solution"&gt;
  &lt;/a&gt;
  So what's the solution?
&lt;/h2&gt;

&lt;p&gt; &lt;br&gt;
The solution is not to stop learning. The solution is to schedule your time accordingly. &lt;/p&gt;

&lt;p&gt;As an example I dedicate 30min in the morning and evening (this is more a time to wind down and relax) to reading. During my day job, at lunch I use the gym to stay in shape and ensure I stay healthy.&lt;/p&gt;

&lt;p&gt;After work it becomes a choice, dedicate an hour or two to studies/articles/videos or on my side project. The rest of my time is dedicated to what I enjoy, playing games with my friends or watching some TV.&lt;/p&gt;

&lt;p&gt;By scheduling this time it ensures that I am getting the right amount of sleep and balance. This balance allows not only for me to grow as a developer but also to grow as a person and enjoy the things I want. &lt;/p&gt;

&lt;p&gt;I just want to re-iterate. If what you find as fun is learning and doing little code projects this is 100% fine. The point behind the solution is not to stop coding and doing those things. It is about managing your time in order to ensure that you get sleep/exercise/eat well and stay hydrated. What you do for fun is up to you. However that fun should not make you feel pressured or induce anxiety and stress to do it. That fun time should be the stuff that allows you to unwind and reset mentally in order to avoid a prolonged or new burnout.&lt;/p&gt;

&lt;p&gt;I hope this was helpful to some as I have found this is what works best for me. Feel free to leave any questions and if you did check out that video that is much appreciated as well! &lt;/p&gt;

</description>
      <category>software</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Monitor your Golang application with OpenTelemetry and SigNoz</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Mon, 06 Sep 2021 13:09:14 +0000</pubDate>
      <link>https://dev.to/signoz/monitor-your-golang-application-with-opentelemetry-and-signoz-3fli</link>
      <guid>https://dev.to/signoz/monitor-your-golang-application-with-opentelemetry-and-signoz-3fli</guid>
      <description>&lt;p&gt;OpenTelemetry provides a set of APIs to directly measure the performance and behavior of your software and send this data to observability platforms. Let's learn how to get started with OpenTelemetry for Go applications and visualize that data with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OpenTelemetry is a vendor-agnostic instrumentation library. In this article, let's explore how you can instrument your Go application with OpenTelemetry and get the data reported through SigNoz - an open-source APM and observability tool.&lt;/p&gt;

&lt;p&gt;Steps to get started with OpenTelemetry for Go application&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installing SigNoz&lt;/li&gt;
&lt;li&gt;Installing sample Go application&lt;/li&gt;
&lt;li&gt;Instrumentation with OpenTelemetry and sending data to SigNoz&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installing-signoz"&gt;
  &lt;/a&gt;
  Installing SigNoz
&lt;/h2&gt;

&lt;p&gt;You can get started with SigNoz using just three commands at your terminal if you have Docker installed. You can read about other deployment options from &lt;a href="https://signoz.io/docs/deployment/docker/"&gt;SigNoz documentation&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/SigNoz/signoz.git
cd signoz/deploy/
./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;You will have an option to choose between ClickHouse or Kafka + Druid as a storage option. Trying out SigNoz with ClickHouse database takes less than 1.5GB of memory, and for this tutorial, we will use that option.&lt;/p&gt;

&lt;p&gt;When you are done installing SigNoz, you can access the UI at: &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application list shown in the dashboard is from a sample app called HOT R.O.D that comes bundled with the SigNoz installation package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p7xY4Ub6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my8jrh3z0vkc9c5yi2mb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p7xY4Ub6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my8jrh3z0vkc9c5yi2mb.png" alt="SigNoz dashboard"&gt;&lt;/a&gt;SigNoz dashboard&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-sample-go-application"&gt;
  &lt;/a&gt;
  Installing sample Go application
&lt;/h2&gt;

&lt;p&gt;To see how OpenTelemetry can be used to instrument a Go application, let's see how it works with a sample bookstore app (&lt;a href="https://github.com/SigNoz/sample-golang-app"&gt;GitHub repo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;It is a simple bookstore app with a REST API that provides book data and performs CRUD operations. The app uses Gin framework to build a RESTful API. Gin is a high-performance HTTP web framework written in Golang containing a set of commonly used functionalities like routing, middleware support and rendering.&lt;/p&gt;

&lt;p&gt;OpenTelemetry has specific instrumentation packages to support popular Go packages and use cases.  For example, this app uses the Gin framework for request routing. OpenTelemetry provides instrumentation package named &lt;strong&gt;otelgin&lt;/strong&gt; to instrument the Gin framework which you need to import in your app. You can find the complete list of supported Golang packages &lt;a href="https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/instrumentation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;br&gt;
Verify if you have Golang installed on your machine by running &lt;code&gt;$ go version&lt;/code&gt; on your terminal. If you don't have Golang installed, you can download it &lt;a href="https://golang.org/doc/install"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps to install sample Go application:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone sample Go application repository
From your terminal use the following command to clone sample Go application GitHub repository.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   git clone https://github.com/SigNoz/sample-golang-app.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Update path to sample-golang-app &amp;amp; check if the app is working
Update your terminal path to the sample app directory and check if the app is working or not using the following command:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   cd sample-golang-app
   go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Make sure you have an available port for running your app. If, by default, the go app tries to run on port 8080, you might get an error as SigNoz uses port 8080 for its query service. On your mac terminal, you can set the listening port of your app by using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   export PORT = 8081
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5bv4aTa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oz2jfq4l2kz51z4wcmez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5bv4aTa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oz2jfq4l2kz51z4wcmez.png" alt="Sample Go app"&gt;&lt;/a&gt;/books endpoint of our bookstore app&lt;/p&gt;

&lt;p&gt;Once you ensure that your application is working, exit the server by pressing 'Ctrl + C' on your mac terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instrumentation-with-opentelemetry-and-sending-data-to-signoz"&gt;
  &lt;/a&gt;
  Instrumentation with OpenTelemetry and sending data to SigNoz
&lt;/h2&gt;

&lt;p&gt;The file &lt;code&gt;main.go&lt;/code&gt; has instructions to import all the necessary OpenTelemetry packages in order to instrument the sample app. For this app, we import the following OpenTelemetry packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import (
    "go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin"
    "go.opentelemetry.io/otel"
    "go.opentelemetry.io/otel/exporters/otlp"
    "go.opentelemetry.io/otel/exporters/otlp/otlpgrpc"
    "go.opentelemetry.io/otel/label"

    "go.opentelemetry.io/otel/sdk/resource"
    sdktrace "go.opentelemetry.io/otel/sdk/trace"
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;You need to run the Go app with the necessary environment variables in order to start sending data to SigNoz. Use the following command to run and configure the app to send data to SigNoz:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SERVICE_NAME=goApp INSECURE_MODE=true OTEL_METRICS_EXPORTER=none OTEL_EXPORTER_OTLP_ENDPOINT=&amp;lt;IP of SigNoz backend&amp;gt;:4317 go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Ip of SigNoz&lt;/code&gt; can be replaced with localhost in this case. Hence, the final command becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SERVICE_NAME=goApp INSECURE_MODE=true OTEL_METRICS_EXPORTER=none OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317 go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;And, congratulations! You have instrumented your sample Golang app. Hit the &lt;code&gt;/books&lt;/code&gt; endpoint of the bookstore app at &lt;a href="http://localhost:8081/books"&gt;http://localhost:8081/books&lt;/a&gt;. Refresh it a bunch of times in order to generate load, and wait for 1-2 mins for data to appear on SigNoz dashboard.&lt;/p&gt;

&lt;p&gt;You can now access the SigNoz dashboard at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to monitor your app for performance metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ogpWkixR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zw8wdk1jjstpn511yey8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ogpWkixR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zw8wdk1jjstpn511yey8.png" alt="Sample Go app in the list of applications monitored by SigNoz"&gt;&lt;/a&gt;Sample Golang app appears in the list of application&lt;/p&gt;

&lt;p&gt;If you want to instrument your own Golang application, you can read about it in our &lt;a href="https://signoz.io/docs/instrumentation/golang/#instrumentation-of-a-sample-golang-application"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metrics-and-traces-of-the-go-application"&gt;
  &lt;/a&gt;
  Metrics and Traces of the Go application
&lt;/h2&gt;

&lt;p&gt;SigNoz makes it easy to visualize metrics and traces captured through OpenTelemetry instrumentation.&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box RED metrics charts and visualization. RED metrics stands for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rate of requests&lt;/li&gt;
&lt;li&gt;Error rate of requests&lt;/li&gt;
&lt;li&gt;Duration taken by requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Krt7sg1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/458uyqzezqn35e0ket9q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Krt7sg1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/458uyqzezqn35e0ket9q.png" alt="Sample nodejs app in the applications monitored"&gt;&lt;/a&gt;Measure things like application latency, requests per sec, error percentage and see your top endpoints&lt;/p&gt;

&lt;p&gt;You can then choose a particular timestamp where latency is high to drill down to traces around that timestamp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nNg3XxmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx1o1wnci108ftkxy4al.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nNg3XxmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx1o1wnci108ftkxy4al.png" alt="See traces, and apply powerful filters on trace data"&gt;&lt;/a&gt;View of traces at a particular timestamp&amp;lt;/figcaption&lt;/p&gt;

&lt;p&gt;You can use flamegraphs to exactly identify the issue causing the latency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymHYIBju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qg7wtak5ca4x0pr90wj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymHYIBju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qg7wtak5ca4x0pr90wj.png" alt="Flamegraphs for distributed tracing"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry makes it very convenient to instrument your Go applications and generate telemetry data. You can then use an open-source APM tool like SigNoz to analyze the performance of your app. As SigNoz offers a full-stack observability tool, you don't have to use multiple tools for your monitoring needs.&lt;/p&gt;

&lt;p&gt;You can try out SigNoz by visiting its GitHub repo 👇&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you face any issues while trying out SigNoz, feel free to write to us at: &lt;a href="mailto:support@signoz.io"&gt;support@signoz.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to read more about SigNoz 👇&lt;br&gt;&lt;br&gt;
&lt;a href="https://signoz.io/blog/opentelemetry-spring-boot/"&gt;Monitor your Spring Boot application with OpenTelemetry and SigNoz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>monitoring</category>
      <category>devops</category>
      <category>opentelemetry</category>
    </item>
    <item>
      <title>How to See Which Branch Your Teammate is on in PhpStorm</title>
      <author>Andrew</author>
      <pubDate>Mon, 06 Sep 2021 13:01:40 +0000</pubDate>
      <link>https://dev.to/gitlive/how-to-see-which-branch-your-teammate-is-on-in-phpstorm-1f3k</link>
      <guid>https://dev.to/gitlive/how-to-see-which-branch-your-teammate-is-on-in-phpstorm-1f3k</guid>
      <description>&lt;p&gt;&lt;em&gt;“What branch are you on?”&lt;/em&gt; is often the first question you ask when a teammate says &lt;em&gt;“The tests aren't passing”&lt;/em&gt; or &lt;em&gt;“The build failed”&lt;/em&gt;. Here’s how you can get an answer to that question without even needing to ask.&lt;/p&gt;

&lt;p&gt;In PhpStorm, open up the Team Window by clicking GitLive on the bottom tool window bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wOs_Zlzu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630926853406/aEZhmCiDS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wOs_Zlzu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630926853406/aEZhmCiDS.png" alt="PhpStorm-IDE.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will show a list of your teammates, if they are online (or away) and the issue they are currently working on. Locate the teammate you are interested in and click the arrow on the left-hand side of their avatar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TVn3kdJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629731240886/JbaOB-CYS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TVn3kdJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629731240886/JbaOB-CYS.png" alt="ide window scaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you will see all the repositories they have cloned including the name of their current branch! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bdtbo19P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630506270361/bHUNayHHj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bdtbo19P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630506270361/bHUNayHHj.png" alt="screenshot 3 scaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If an issue has been connected to the branch you’ll see the issue name instead, if that's the case just hover your cursor over the issue name and a tooltip will appear showing you the branch name (and even the commit hash)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p7t5LnoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630506279553/DVzcaTM-n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p7t5LnoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630506279553/DVzcaTM-n.png" alt="screenshot 4 scaaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't have the GitLive extension installed yet? You can &lt;a href="https://plugins.jetbrains.com/plugin/11955-gitlive"&gt;find GitLive here&lt;/a&gt; and, if you need help setting it up, follow the instructions in &lt;a href="https://docs.git.live/docs/installation/"&gt;GitLive docs&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
      <category>git</category>
    </item>
    <item>
      <title>The 10 REST Commandments</title>
      <author>Vedran Cindrić</author>
      <pubDate>Mon, 06 Sep 2021 12:58:05 +0000</pubDate>
      <link>https://dev.to/cindreta/the-10-rest-commandments-13jk</link>
      <guid>https://dev.to/cindreta/the-10-rest-commandments-13jk</guid>
      <description>&lt;p&gt;One of the core things I've been working on for the past 10 years are APIs. Everything from simple APIs that are used by one client to multi device and multi purpose APIs. During those years I've also had the opportunity to work with many third party APIs like Stripe, Twilio and others who are less popular and glamorous 😂. &lt;strong&gt;Almost all of those APIs were REST based and unique in some way.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many reasons why REST is so popular. It's simple to understand, it's flexible, it works on any scale, it has a great community and tools built around it. But besides those I'd also say that a lot of popularity came from the fact that's it's oldest rival, SOAP, is just horrible. If you've ever used or worked with SOAP - you know! The clients were terrible, people did what they wanted with XML, it's bulky, the auth situation was sometimes wacky...Thankfully JSON and REST based APIs won that battle.&lt;/p&gt;

&lt;p&gt;On the other hand there are also newer, more modern players that are trying to take some of that spotlight from REST based APIs. I'm of course talking about GraphQL. GraphQL is also JSON based and shares some of the good traits that REST has like flexibility, performance, scalability...For me personally the &lt;strong&gt;two key downsides of GraphQL&lt;/strong&gt; are that it's built by Facebook and that it shifts the API design process to the client. What I mean by that is that it leaves mobile devs and front end devs in charge of building their own ad hoc APIs and making queries on the database. Don't know about you but I don't think that's the best idea. Don't get me wrong, I love mobile and front end devs, but they might not have a lot of experience with database design, writing queries and building APIs. You probably wouldn't give your back-end dev to design an app, a car mechanic to fix an airplane or a veterinarian to operate on a human person. Could they do it - maybe, possibly. Should they - I don't think so.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In my opinion REST is still king of the jungle and it's not going to be dethroned any time soon.&lt;/strong&gt; The only problem with REST is that at the end of the day it's not a standard nor a protocol. Rather, it's a set of "architectural constraints". What a fancy way of not calling something a standard 🤣 But that right there tickles the imagination of many. They tend to do their own thing or implement those constraints based on their own (miss)understanding. To avoid such misunderstandings I've decided to write down what I think are the Ten REST API Commandments. Follow these and you'll enjoy love from your mobile devs, admiration from other fellow back-end devs and a rockstar status on Twitter 😎.&lt;/p&gt;

&lt;p&gt;So like the song says: Won't you follow me into the jungle?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-be-practical"&gt;
  &lt;/a&gt;
  1. Be Practical
&lt;/h3&gt;

&lt;p&gt;It's really simple. &lt;strong&gt;If you're building a REST API you should accept and respond with JSON.&lt;/strong&gt; Not XML. Not something else. JSON.&lt;/p&gt;

&lt;p&gt;Yes, JSON is not "required" because REST isn't a standard but it's one of those things you just do. Just like you put on clothes everyday, go to sleep each night or drink a shot of rakija everyday. Well maybe not the last part but you get the point 😆 The sooner we get everybody off of XML and on to JSON the better it will be for everyone. In case you're not sure why JSON is better, let me just casually name a few reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  it's easier to use, write and read - literary anyone and you grandma can read it&lt;/li&gt;
&lt;li&gt;  it's faster and consumes less memory space&lt;/li&gt;
&lt;li&gt;  it doesn't need special dependencies or packages to parse it&lt;/li&gt;
&lt;li&gt;  every single meaningful programming language has great support for it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If this still seems abstract I invite you to download a random XML file from the internet and try to parse it. As someone who had to do it way too many times in the 2000s, I can assure you, you will come back crying to JSON. There simply is no reason why you'd use XML instead of JSON in 2021...Yes, if you have a legacy enterprise system then I feel your pain, but even that is changing. More and more of these big and outdated enterprises are updating their internal and external APIs from XML and SOAP to JSON and REST.&lt;/p&gt;

&lt;p&gt;JSON shouldn't just be used on the response side of things but also on the request side. So instead of sending the data using form-data or x-www-form-urlencoded send it as JSON. It's just simpler to read, write, test and manage for everybody.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remember - when in doubt - use JSON&lt;/strong&gt;. Thank you from all us developers in advance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-be-methodical"&gt;
  &lt;/a&gt;
  2. Be Methodical
&lt;/h3&gt;

&lt;p&gt;You wouldn't believe how many times I saw APIs that used only GET methods for everything from storing data to filtering 🤪 As a developer you should always strive to understand the tools you are using so it's important to know how exactly HTTP works if you are developing APIs. Each HTTP method has been designed to be used in certain situations. Let's go through each of them and see when you should use each of them.&lt;/p&gt;

&lt;p&gt;Before we start just a small but fun clarification. When describing HTTP methods people often use words like "safe" and "idempotent". These sound really nice and mystical but it's not that complicated. In plain English, safe means ready only. You can make requests to that endpoint without having to worry about updating, destroying or changing values. Idempotent on the other hand, means that you can make multiple requests to the same endpoint without changing something or getting different results. Generally speaking all safe methods are also idempotent at the same time but not all idempotent methods are safe 🙃. I know it's confusing at first but we'll explain below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
You should use the GET method when you wish to read data. Not store, not update, not change data. Only read the data. The concept is super simple and shouldn't confuse anyone. Now that we know that GET methods should be used ONLY for reading data and that they always return the same data we can say that GET requests are safe and idempotent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
When you make a POST request everyone in the world expects you to usually STORE something. This means you will create a new row in the database, write something somewhere or create something from nothing if you will. You can send data to a POST method using multiple content types: multipart/form-data or x-www-form-urlencoded or raw (application/json, text/plain...etc). When building REST APIs I'd suggest the clients send data as application/json. This way we are keeping it consistent and in the JSON spirit but also sending JSON data allows you to make really complicated requests with ease. Finally POST operations are not safe because they do change things on the server side and they are certainly not idempotent because making two requests to the same endpoint will result in different resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PUT&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
PUT requests are most often used in the context of updating things. It could also be used to create new records but then the idea would be that the client should be the one defining the ID of the new resource. So to make your life easier simply use PUT when you wish to update a resource. PUT is of course not a safe operation because it makes changes on the server side but, and you'll love this, it's an idempotent operation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
This one is self explanatory I'd say. When you wish to delete resources simply use the DELETE method. It's of course not a safe operation but some say it's idempotent and some say it's not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PATCH&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
A patch request is meant to be used to update resources again but unlike PUT it should update only the changed data whereas PUT can and should update the entire resource. It's not safe nor is it idempotent.&lt;/p&gt;

&lt;p&gt;Now that we know the basics, here is what happens in the real world. Most people use GET, POST and some use PUT and DELETE. Rarely do I see PATCH being used. I'd advise you to use all of the HTTP methods available to you because that is why they were designed for. You can literally map any CRUD operation to POST, GET, UPDATE and DELETE. I simply beg of you don't ever use GET to create or update data. Don't.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-be-semantical"&gt;
  &lt;/a&gt;
  3. Be Semantical
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OFFALYas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d224n10qh3hhwu.cloudfront.net/semantical-api.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OFFALYas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d224n10qh3hhwu.cloudfront.net/semantical-api.jpg" alt="Be Semantical"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is probably the only time you'll hear me recommending someone to be semantical. But in this case it's important and it's all about naming things correctly. Oftentimes I've seen API documentation with horrible naming conventions for everything. In my opinion every great REST APi should be easily understandable by your average Joe. Starting from endpoint names to input parameters all the way to the JSON keys.&lt;/p&gt;

&lt;p&gt;So let's start with API endpoints. &lt;strong&gt;The rules here are also quite simple&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  use nouns instead of verbs&lt;/li&gt;
&lt;li&gt;  use plural instead of singular&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason why you should use nouns is because when you are making an HTTP request, as we saw above, you are already using verbs. Each HTTP method (GET, POST, PUT, PATCH) is a verb in the English language. Hence it makes no sense to have double verbs - doesn't it!? If you named an API endpoint as &lt;code&gt;/getUsers&lt;/code&gt; and you were making a GET request to view all the users when you read that, out loud, it sounds funny. &lt;code&gt;GET /getUsers&lt;/code&gt;. Makes no sense.&lt;/p&gt;

&lt;p&gt;Another common theme I kept seeing is the use of singular instead of plural for the endpoint names. That of course couldn't be more wrong. You want your API endpoints to be consistent, simple and logical. If you use plural then for every HTTP method you can use the same URI. If you do &lt;code&gt;GET /users&lt;/code&gt; you are listing all the users and if you do &lt;code&gt;POST /users&lt;/code&gt; you are creating a user. So again, same URI, different HTTP methods (verbs). It gets even cooler if you wish to view the details of a single user - you request &lt;code&gt;GET /users/:id&lt;/code&gt; to fetch the information. So as you can see - it's still the same starting resource name, it just has more depth. If you used singular then &lt;code&gt;GET /user&lt;/code&gt; would mean that you wish to get a single user and you would need more different URIs for other cases. Plural just makes way more sense.&lt;/p&gt;

&lt;p&gt;To recap, let's take a look at a couple of good and bad examples just so we are 100% clear.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt; 👍🏻&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;GET /users&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;POST /users&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;GET /users/23&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;PUT /users/23&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;DELETE /users/23&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;GET /users/23/comments&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bad&lt;/strong&gt; 👎🏻&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;GET /user/23&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;GET /listAllUsers&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;POST /user/create&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;PUT /updateUser/23&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;GET /userComments/23&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think you GET the idea 😀. It's really simple and just by looking and reading the examples above you know which ones sound good and make more sense.&lt;/p&gt;

&lt;p&gt;A few bonus notes regarding endpoint naming: &lt;strong&gt;try to use single words instead of multi words&lt;/strong&gt;. If you really have to use multi words then use hyphens between them. And for the love of the god use all lowercase letters in URIs.&lt;/p&gt;

&lt;p&gt;To wrap up this section, I'd like to quickly go over the naming conventions for JSON keys in the request and response data. There is much debate around this, especially given that there are 3 possible scenarios: camelCase, snake_case and spinal-case. Again nobody can stop you from using any of these, theoretically you wouldn't be wrong. But, &lt;strong&gt;I would recommend using snake_case&lt;/strong&gt;. Why? Stripe uses it. PayPal uses it. Facebook uses it...You get the point. Personally, I find snake_case much easier to read and that is why all of our APIs use snake_case. There have also been studies like this &lt;a href="https://ieeexplore.ieee.org/document/5521745?reload=true&amp;amp;tp=&amp;amp;arnumber=5521745"&gt;one&lt;/a&gt; which gave an advantage to snake_case over camelCase in terms of readability.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-be-secure"&gt;
  &lt;/a&gt;
  4. Be Secure
&lt;/h3&gt;

&lt;p&gt;I will just come out and say it: &lt;strong&gt;if you are not using HTTPs in 2021. then shame on you&lt;/strong&gt;. Your REST API should be running on HTTPs without any questions. Using HTTPs simply provides an element of security that you don't get with HTTP. It saves your users from man-in-the-middle-attacks and encrypts communication between the client and the API. Many other big players like Apple and Google will soon force you to have HTTPs enabled. The best part of it is that nowadays you can get an SSL certificate for free. Using services like AWS and Route 53, the Azure equivalent or a service called Let's encrypt. They all work great, I can personally attest to that. You can always also buy a premium SSL certificate. Whatever you do, just use HTTPs on your next API. You'll thank me later.&lt;/p&gt;

&lt;p&gt;Another thing that saddens me the most is when I see an API isn't using any form of authorization. If you are building an API you simply need to be able to control who has access to it. It's so simple but many people don't do it because they feel like it's too complicated to implement, use and maintain. It really doesn't have to be. You can start out using bearer tokens which can be setup in 2 minutes. They don't even have to be connected to a database if you don't want to. When you're ready you can switch to more complex solutions like JWT or oAuth. There are many reasons why you should have some sort of an auth solution. Starting from the fact that you can control access to the API and how much someone can access. If something goes wrong, like your API gets spammed, hacked or whatnot you can simply shut down the key that was exposed. You can also use the API key to track how the API was integrated, is someone making too many API calls, is the client behaving erratically. Finally you can even use API calls to gather statistical data about your clients, users and API in general.&lt;/p&gt;

&lt;p&gt;My point is - &lt;strong&gt;treat your API the same way you would your house&lt;/strong&gt;. I'm sure you have doors which have keys and you only give those keys to important people. Same should be with your API.&lt;/p&gt;

&lt;p&gt;Another thing you should be wary of is sending super sensitive data over the network. We talked about this and the importance of using SSL so that the communication is encrypted. That would be step number one. Step number two is don't return data that might be sensitive and doesn't get used in the apps or the website. I'm talking about user addresses, phone numbers, SSN or any other form of identification. If you don't use it then don't send it. If you are using this please consider making sure that the person who is accessing that API and getting those responses is the actual person whose data you are returning. It sounds simple, I know, but in reality people do all sorts of crazy things. Mostly because they think "oh nothing will happen, it's a small API, nobody knows about it"...Trust me on this one. People will find out and they will take advantage if you let them. So don't.&lt;/p&gt;

&lt;p&gt;Before we wrap up I'd like to touch on the UUIDs over IDs debate. I was a long time fan of IDs because they are much shorter and faster but the added security and privacy benefit of UUID is more important in my opinion. &lt;strong&gt;UUIDs are much safer&lt;/strong&gt;. You can still have an ID column in your database that is auto incremented and all but when you are exposing models to the APIs try using UUIDs. Short recommendation but could save you a lot of headache.&lt;/p&gt;

&lt;p&gt;Last thing I want to touch upon is general infrastructure security. If you are using AWS or Azure you have an advantage. API gateways give you additional security in terms of firewalls and detection of DDoS attacks. Use them if you can. Anything that will allow you to be able to block a given IP or user is something you should always look for. If you are running on traditional servers with Apache on there here are just two super quick tips on how to save yourselves a few headaches down the line.&lt;/p&gt;

&lt;p&gt;First one is simple: keep your software updated. Apache, PHP, Composer packages, NPM packages...everything. Make sure you are always running on the latest and greatest software.&lt;/p&gt;

&lt;p&gt;Second, &lt;strong&gt;by default Apache sends a response header with every request that literally tells your potential attacker which version of Apache you are running on.&lt;/strong&gt; The header key is called &lt;code&gt;Server&lt;/code&gt; and the default value could be something like: &lt;code&gt;Apache/2.4.1 (Unix)&lt;/code&gt;. What you wanna do here is quickly hide your Apache version.&lt;br&gt;&lt;br&gt;
Simply open: &lt;code&gt;/etc/apache2/conf-enabled/security.conf&lt;/code&gt; and set the &lt;code&gt;ServerTokens&lt;/code&gt; value to &lt;code&gt;Prod&lt;/code&gt;. After that run sudo systemctl restart apache2 and you've just made your server more secure than it was yesterday. Congrats.&lt;/p&gt;

&lt;p&gt;Another quick thing you can do while you have the &lt;code&gt;/etc/apache2/conf-enabled/security.conf&lt;/code&gt; open is turn off &lt;code&gt;ServerSignature&lt;/code&gt;. Just set that to &lt;code&gt;Off&lt;/code&gt; and again you are more secure.&lt;/p&gt;

&lt;p&gt;As a general rule you should have quarterly security meetings where you talk about things like how to improve security, how to be better, how to stay safe. You don't wanna be hacked, DDoSed or something similar. Trust me.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-be-organized"&gt;
  &lt;/a&gt;
  5. Be Organized
&lt;/h3&gt;

&lt;p&gt;What better way to stay organized than to version your API 😀 Now I know you've read about this one many times and thought something along the lines of "Oh my API is too small and it's used by one client so I won't use versioning". I've been one of you. I've done that. I've said that. &lt;strong&gt;Be smarter and use versions on your API. It's the best decision you can make early on.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5t1xRMHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d224n10qh3hhwu.cloudfront.net/organized-api.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5t1xRMHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d224n10qh3hhwu.cloudfront.net/organized-api.jpg" alt="Be Semantical"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The reason why I was always hesitant towards versioning is because in my mind a jump from v1 to v2 on an API level rarely happens. When I say rarely I mean that in the tech universe - so once a year 😁 Knowing that versioning didn't make sense to me. But boy was I wrong. Yes the big jumps don't happen often but if you have a platform or an app that is being used or developed you'll make smaller updates but more often. I'm talking about weekly or monthly updates to models, data types, structures or processes that are risky to someone who doesn't update the app or something else. To do those, if you don't have versioning enabled, you'll be sweating bullets every time you do a GIT commit. Not only do you have to be sure your code won't break anything or anyone but you need to know how a certain app version will behave. Not fun at all trust me.&lt;/p&gt;

&lt;p&gt;Simply choose a versioning scheme that makes the most sense for you and your team. The most common versioning scheme in the software world would be: &lt;em&gt;MAJOR.MINOR.PATCH&lt;/em&gt;. In my opinion the PATCH part is a bit too much but you can use that schema if you want. I typically do &lt;em&gt;v1.1&lt;/em&gt; and then all the way up to &lt;em&gt;v1.9&lt;/em&gt;. So with a major version you are changing the core parts of the API like authentication, core models, processes etc. With minor and patch versions you're generally adding or removing smaller features, messing with the data structure in some way or something similar.&lt;/p&gt;

&lt;p&gt;Another thing that might confuse you is how to actually implement versioning because there are many paths you can take. You could use versioning via: URI paths, request headers, query params or content negotiation. Now each of these has it's pros and cons but I would suggest using URL based versioning. It just makes the most sense and is the most straightforward to understand on so many levels. Everything from making updates, understanding which version is used just from the URL to pointing to the right documentation version. REST APIs are predominantly URI based and I think we should keep up with that tradition and use URI based versioning. Some examples of that include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  api.domain.com/v1/auth/login&lt;/li&gt;
&lt;li&gt;  api.domain.com/v1.2/auth/login&lt;/li&gt;
&lt;li&gt;  api.domain.com/v1.4.5/auth/login&lt;/li&gt;
&lt;li&gt;  api.domain.com/v2/auth/login&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To sum it up. Start using versioning early on and you'll avoid problems later on and be able to scale your API.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-be-consistent"&gt;
  &lt;/a&gt;
  6. Be Consistent
&lt;/h3&gt;

&lt;p&gt;You've probably heard the saying: "Consistency is what transforms average into excellence". Well it's true in life as well as API design believe it or not. One of the qualities of a great API is it's consistency. &lt;strong&gt;First and foremost I am aiming at resource/model consistency and then other areas like naming, URIs, HTTP codes and similar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As we know by now APIs boil down to resources. A resource can be anything from a user, article, book, product...anything. Each resource can have multiple properties, objects or arrays. Resources are structured and based on the data you have in the database or some other business logic. Keeping your resource responses consistent is key to your API success. You can't have your endpoints return wildly different resource structures. As much as that sounds tempting or a way to optimize things you should avoid doing that. A mobile developer implementing your API will follow the structure that you provide like a bible. If you send something different on each endpoint time he or she will have a really bad day and nobody wants that. So try to always send the same resource structure. If you don't have data then send it as an empty value or object or array. Let's talk practical and let's say we have an "article" resource and sometimes that article might have comments - sometimes it might not. Sometimes it makes sense to load the comments - sometimes it doesn't. That is fine but still try to have a consistent response in terms of your structure.&lt;/p&gt;

&lt;p&gt;When you are getting a single article you wanna load the comments as well like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Getting details for article with UUID: 5b8f6db5-7848-490e-95a7-f7146dd2e30c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"article"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Sample title 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Sample description 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://domain.com/image-1,jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"uuid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"eec33d99-e955-408e-a64a-abec3ae052df"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"comments"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Great article"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
                   &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"John Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                   &lt;/span&gt;&lt;span class="nl"&gt;"uuid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"5b8f6db5-7848-490e-95a7-f7146dd2e30c"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Nice one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
                   &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Jane Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                   &lt;/span&gt;&lt;span class="nl"&gt;"uuid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"2ececb69-d208-46c2-b560-531cb716d25d"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But when you are loading a list of articles or you've just created an article and there are no comments you should return the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Article list was a success"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"articles"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Sample title 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Sample description 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="nl"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://domain.com/image-1,jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="nl"&gt;"uuid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"eec33d99-e955-408e-a64a-abec3ae052df"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="nl"&gt;"comments"&lt;/span&gt;&lt;span class="p"&gt;:[]&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Sample title 2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Sample description 2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="nl"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://domain.com/image-2,jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="nl"&gt;"uuid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"b8ee70a8-1128-4670-9368-83953fdf722b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
             &lt;/span&gt;&lt;span class="nl"&gt;"comments"&lt;/span&gt;&lt;span class="p"&gt;:[]&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in case the client is expecting to see a comments array they will still get it but it will simply be empty. That way you are not changing your model and removing objects/arrays.&lt;/p&gt;

&lt;p&gt;You just saved yourself and others a bunch of time just by being consistent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-be-graceful"&gt;
  &lt;/a&gt;
  7. Be Graceful
&lt;/h3&gt;

&lt;p&gt;If you are building APIs it's a given that things will fail. That's fine. That's expected. You shouldn't feel bad if your API has an error or a problem. &lt;strong&gt;What you should feel bad about is if you don't provide the details for it and make sure that your API is smarter than everyone else&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Starting from the top one of the most common things I see developers fail to use is HTTP status codes. In case you didn't know HTTP has status codes for pretty much every scenario imaginable. You just need to know which one to use and send it back to the client. There are over 50 various HTTP response status codes and they all have a unique meaning and should be used in unique scenarios. I won't go through all of them but we will list the most common groups. We've got:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Informational response codes (start with 1xx)&lt;/li&gt;
&lt;li&gt;  Success response codes (start with 2xx)&lt;/li&gt;
&lt;li&gt;  Redirection response codes (start with 3xx)&lt;/li&gt;
&lt;li&gt;  Client error response codes (start with 4xx)&lt;/li&gt;
&lt;li&gt;  Server error response codes (start with 5xx)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So really you have all the status you need. Everything from OK, Unauthorized, Not Found, Internal Server Error to I'm a teapot. Yes, that last one is an actual status. Just proves the guys who made HTTPs were the ultimate jokesters!&lt;/p&gt;

&lt;p&gt;In any case each of those statuses has a meaning. &lt;strong&gt;That meaning is universally accepted and understood&lt;/strong&gt;. So a developer from China and a developer from Germany will both understand that if you send a status of 401 (Unauthorized) what you mean to say is that the client did not send the correct authentication details. Since we respond with the status code of 401 (Unauthorized) everybody understands that is a client error and it needs to be fixed on the client not the API. Again I'm giving you just one example but the idea is that you should use the appropriate HTTP status code in appropriate situations. Using them will help your API be universally understandable, consistent and standard. Even though REST isn't a standard this is one of those standard things you should do 😀&lt;/p&gt;

&lt;p&gt;Once we have the HTTP status codes working for us we need to provide as many details as we can to the clients when things don't work out. We have to do multiple things to make this happen. First we have to be able to predict how our API might fail, what others might do and not do, who won't play by the rules etc...So the first step is to have strong and strict data validation especially before creating content. After you have the data you have to check if the data is valid! This means checking if the IDs actually exist, if the values are what we expect and can store them in the database...Doing all of this and responding with appropriate status codes will make your API a joy to use. So let's say you have an endpoint which accepts a user_id and gets the user profile. If we apply the strategy of predicting what might happen we'd do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Check to see if the request has the user_id param - if not respond with 400 Bad Request&lt;/li&gt;
&lt;li&gt; Check to see the given user_id actually exists in the system - if not respond with 404 (Not Found)&lt;/li&gt;
&lt;li&gt; If the user_id returns a result respond with 200 (OK)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We had multiple fail safes as you can see and in all of them we responded with the correct and understandable response code.&lt;/p&gt;

&lt;p&gt;Finally once we have our response codes setup and we are predicting how the API might fail we simply need to be as expressive as possible. I know it's hard for us developers to be like that but trust me it's one of the best things you can do. When things go wrong our REST API should have a universal error response model. If we have that then client developers can depend on that to provide users with a more in depth explanation of what went wrong. So let's say a user types in an invalid email on their phone. Somehow that gets sent to the API and the API will of course trigger a validation and error and will respond with 400 (Bad Request). Alongside that the API should send a universal error response model that will allow the client to display any and all messages to the end user. So in this case you might return an error message that says: "Invalid email address entered". The client can read that and show it to the user. And again we need to make sure that you can cover any scenario from validation to server errors. To do that it's best if we come up with a universal error model which could be used in any scenario. I propose you use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Invalid data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"The data you entered is not valid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"errors"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"field"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"The email address you provided is not real"&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"field"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"phone_number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"You did not enter a phone number at all"&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The JSON structure for errors is simple. We have a &lt;strong&gt;title&lt;/strong&gt; and &lt;strong&gt;message&lt;/strong&gt; which provide a general direction of what happened. A lot of times developers don't choose to display full error details to the end-user. They might use an alert modal on the iPhone to just display our message or title. But we are also sending an errors array which can house specific errors with a specific message. Providing detailed error messages will help you as well as other developers working on the API to understand what exactly went wrong. Even if you are not displaying them to the end user you will still be able to view them once you make a request or if you use a service like &lt;a href="https://treblle.com/"&gt;Treblle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So remember, make sure you try to predict as many problems as you can&lt;/strong&gt;. Provide plenty of details on why things failed even if nobody is using those details and use the universally understood language of HTTP response codes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-be-smart"&gt;
  &lt;/a&gt;
  8. Be Smart
&lt;/h3&gt;

&lt;p&gt;This one is more philosophical than the other ones but in my opinion is one of the pillars of good REST APIs. &lt;strong&gt;If you think about the role of the API in a modern day platform, service or an app we can say that the API is the brain of the whole operation&lt;/strong&gt;. The reason for that is that every client you might have (iPhone app, Android app, website, IoT device) will talk to the same API. This means our API is the most important part of the whole ecosystem and that our API should be able to handle everything. Gracefully, if I may add.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h0spCQxJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d224n10qh3hhwu.cloudfront.net/smart-api.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h0spCQxJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d224n10qh3hhwu.cloudfront.net/smart-api.jpg" alt="Be Semantical"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing a smart API should do is protect its most valuable asset - the database. This means it should sanitize, clear out and prevent any bad data from entering the database. The way to do that is by making sure you validate everything that was sent from the app to the client and reject anything that doesn't look good. But when we reject things we should also provide clear reasons to the clients so they know why something happened or in this case didn't happen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Any good and smart API will handle complex processes on it's own and not depend on clients to help&lt;/strong&gt;. The simplest example of this would be registering a user in your app. For all the clients that should be one API call where they send the data and they get a user object. But, in the background, the API should handle any and all potential logistics like: register that user on a MailChimp newsletter, store a push token to Firebase, send the user a welcome email and so on...The clients should not be calling multiple API endpoints to those things. If we package everything into one endpoint then you can easily change the flow at any point in time and the clients don't even have to be aware of it. As long as you get the data you need from them the API can always be in full control of the entire business logic and processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make sure that the API is optimized for cross platform solutions&lt;/strong&gt;. When you are dealing with multiple platforms or devices like iPhones, Android phones, computres, TVs and similar, the API should be able to adjust to them. This means that the API should be flexible enough to handle inputs that might be different from all the clients and still continue to enable the clients to do their job. A good example of this would be resizable images. If you have an API that delivers content which has images you probably don't wanna send a 4000x4000px image to a mobile phone but maybe you would to a TV or a website. A smart API would know which client is accessing that endpoint and would return optimized resources on it's own or even allow the client to request specific sizes. There are many more examples of this but you get the idea.&lt;/p&gt;

&lt;p&gt;The less you depend on the client to do things the better. A smart API will always account for the clients imperfections and correct them if possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-be-lean"&gt;
  &lt;/a&gt;
  9. Be Lean
&lt;/h3&gt;

&lt;p&gt;What is a good API if not fast and optimized!? Your API should not be the pain point of the entire ecosystem. It's as simple as that. There are many things you can do to make sure you deliver performance and scalability a good API should have. Let's look at some of them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Being fast and optimized starts on a database level&lt;/strong&gt;. Whenever I hear someone say their API is slow 9 out of 10 times it has something to do with the database. Either bad database design, complicated queries, slow infrastructure or even the lack of caching. You should always optimize your database structure, queries, indexes and everything else that interacts with your database. Once you have that handled the next thing to focus on is making sure you are delivering cached data whenever possible. Caching database queries will literally reduce your load time by 100% sometimes. So if you have an API endpoint that shows users their profile or something like that I am sure it won't change every 5 minutes. Be smart, cache the data. Your users and the clients calling that API will love it.&lt;/p&gt;

&lt;p&gt;Another performance impactor is the sheer amount of data you send down to the clients via the API. Make sure your resources and models are returning only the data the clients need and not the entire shabang. If you are returning a collection of items maybe you don't need the full model details and relationships - everytime. If that will speed things up then go for it but always try to stay consistent with the models returned in the responses. This means that if you are not loading relationships, return an empty array, if you are not loading counts return 0 and so on. Consistency is key when building great REST APIs.&lt;/p&gt;

&lt;p&gt;Another pretty simple thing you can do to reduce the response size and increase performance is to enable compression. The most popular one being Gzip compression. On Apache it comes enabled by default with a module called &lt;code&gt;mod_deflate&lt;/code&gt;. When enabled you can usually see a response header of &lt;code&gt;Accept-Encoding&lt;/code&gt; set to something like &lt;code&gt;gzip, compress&lt;/code&gt;. Even though it's enabled by default you still need to "apply" it to your API response. To do that we have to add some rules to our default Apache configuration. So let's actually open the configuration file like so: &lt;code&gt;sudo nano /etc/apache2/conf-available/000-default.conf&lt;/code&gt; and add this thing of beauty: &lt;a href="https://gist.github.com/cindreta/57db9a11ef0ad88f96ba2da59f64bb7e"&gt;https://gist.github.com/cindreta/57db9a11ef0ad88f96ba2da59f64bb7e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That tells Apache to apply Gzip compression on various mime types like application/javascript, application/json and others. Once we save this we simply need to restart Apache by typing in sudo systemctl restart apache2 and we are done. Your API responses are now 50-75% smaller than they were. How easy was that?!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-be-considerate"&gt;
  &lt;/a&gt;
  10. Be Considerate
&lt;/h3&gt;

&lt;p&gt;I'll be short with this last piece because we’ve gone overboard with the REST (never gets old 😀) but I don't wanna downplay its importance. For us back-end developers the process of developing an API is pretty lonely. It’s mostly you, a bunch of code and your favorite testing tool. You might think the job is done when you write that last line of code and make a merger into the production branch. But it's not. For many others the journey is just starting.&lt;/p&gt;

&lt;p&gt;There are many people that will only start doing their job after you have completed yours. In order for them to even be able to do a good job you need to prepare your API in many ways. You have to make sure it’s working, it’s very well documented and more importantly you have to be ready to provide integration support. No matter how good you write the documentation there will always be questions, doubts and problems during the integration process and beyond.&lt;/p&gt;

&lt;p&gt;Put yourself in the shoes of others and try to make their job easier. Build a good API, follow the rules we defined here, write great documentation and be there for everyone else.&lt;/p&gt;

&lt;p&gt;Consider using tools that can help you with many of the challanges of building, shipping and running an API. One of those tools is, you guessed it, &lt;a href="https://treblle.com/"&gt;Treblle&lt;/a&gt;. Just by adding Treblle to your API you'll get auto generated documentation with OpenAPI Spec suppoert. Then you get real time monitoring and logging so you can see what others are doing and better help them. Finally you'll even get a quality core of your API based on these same rules. Of course, we've designed it with the entire team in mind. Because we know seeing is believing here is a video on how we can help:&lt;/p&gt;

&lt;p&gt;---&lt;/p&gt;

&lt;p&gt;Hopefully I've been able to simplify and explain some of the usual doubts and concerns you might have when building REST APIs. Again, I have to note, REST is not a standard so nobody can tell you you are doing it wrong. But just consider this: daily, as developers, we look for patterns to make our code better, prettier, more efficient so why not do the same with APIs. If we started following some patterns we'd all enjoy a much more healthier and prettier ecosystem.&lt;/p&gt;

&lt;p&gt;Finally, I'd like to finish off by quoting a great man who has been like an uncle to all of us - Ben Parker. He once wisely said: "&lt;strong&gt;With great power comes great responsibility&lt;/strong&gt;". That could not be more true when we talk about REST APIs.&lt;/p&gt;

&lt;p&gt;PS. If you like these articles say hello on my &lt;a href="https://twitter.com/cindreta"&gt;Twitter&lt;/a&gt; or follow me on &lt;a href="https://www.linkedin.com/in/vedrancindric/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webpack</category>
      <category>tutorial</category>
      <category>api</category>
    </item>
    <item>
      <title>How to write Clean and Modular Code 🤩👨‍💻</title>
      <author>Pratik Raghuvanshi</author>
      <pubDate>Mon, 06 Sep 2021 12:57:46 +0000</pubDate>
      <link>https://dev.to/prxtikk/how-to-write-clean-and-modular-code-1d87</link>
      <guid>https://dev.to/prxtikk/how-to-write-clean-and-modular-code-1d87</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” – Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had not said these lines, so no &lt;strong&gt;offense&lt;/strong&gt;. 😶 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terminologies"&gt;
  &lt;/a&gt;
  Terminologies
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Clean code&lt;/strong&gt; : Code that is readable, simple, and concise. Clean production-quality code is crucial for collaboration and maintainability in software development.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Modular code&lt;/strong&gt; : Code that is logically broken up into functions and modules. Modular production-quality code that makes your code more organized, efficient, and reusable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Module&lt;/strong&gt; : A file. Modules allow code to be reused by encapsulating them into files that can be imported into other files.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XCeQH9bT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1i9yfofdjt6glw87e6s5.jpg" alt="Modular Code"&gt; 
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#writing-clean-code"&gt;
  &lt;/a&gt;
  Writing clean code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#use-meaningful-names"&gt;
  &lt;/a&gt;
  Use Meaningful Names.
&lt;/h3&gt;

&lt;p&gt;• &lt;strong&gt;Be descriptive and imply type&lt;/strong&gt; : For booleans, we can prefix with &lt;code&gt;is_&lt;/code&gt; or &lt;code&gt;has_&lt;/code&gt; to make it clear it is a condition. We can also use parts of speech to imply types, like using verbs for functions and nouns for variables.&lt;br&gt;
• &lt;strong&gt;Be consistent but clearly differentiate&lt;/strong&gt; : &lt;code&gt;age_list&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; is easier to differentiate than &lt;code&gt;ages&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;.&lt;br&gt;
• &lt;strong&gt;Avoid abbreviations and single letters&lt;/strong&gt; : We can determine when to make these exceptions based on the audience of our code and if it is counters and common math variables.&lt;br&gt;
• &lt;strong&gt;Long names aren't the same as descriptive names&lt;/strong&gt; : We should be descriptive, but only with relevant information. For example, good function names describe what they do well without including details about implementation or highly specific uses.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#use-whitespace-properly"&gt;
  &lt;/a&gt;
  Use Whitespace Properly.
&lt;/h3&gt;

&lt;p&gt;• &lt;strong&gt;Organize your code with consistent indentation&lt;/strong&gt; : the standard is to use four spaces for each indent. We can make this a default in your text editor.&lt;br&gt;
• Separate sections with blank lines to keep our code well organized and readable.&lt;br&gt;
• If you are coding in &lt;strong&gt;python&lt;/strong&gt;, try to limit your lines to around 79 characters, which is the guideline given in the PEP 8 style guide. In many good text editors, there is a setting to display a subtle line that indicates where the 79 character limit is.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#for-example-"&gt;
  &lt;/a&gt;
  For Example :
&lt;/h3&gt;

&lt;p&gt;Imagine we are writing a program that executes a number of tasks and categorizes each task based on its execution time. Below is a small snippet of this program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t = end_time - start  # compute execution time
c = category(t)  # get category of task
print('Task Duration: {} seconds, Category: {}'.format(t, c)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How we can make this code look cleaner?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following naming changes could make this code cleaner.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rename the variable &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;start_time&lt;/code&gt; to make it consistent with &lt;code&gt;end_time&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Rename the variable &lt;code&gt;t&lt;/code&gt; to &lt;code&gt;execution_time&lt;/code&gt; to make it more descriptive.&lt;/li&gt;
&lt;li&gt;Rename the function &lt;code&gt;category&lt;/code&gt; to &lt;code&gt;categorize_task&lt;/code&gt; to match the part of speech.&lt;/li&gt;
&lt;li&gt;Rename the variable &lt;code&gt;c&lt;/code&gt; to &lt;code&gt;category&lt;/code&gt; to make it more descriptive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the changes the code will look like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;execution_time = end_time - start_time
category = categorize_task(execution_time)
print('Task Duration: {} seconds, Category: {}'.format(execution_time, category)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#writing-modular-code"&gt;
  &lt;/a&gt;
  Writing Modular Code
&lt;/h2&gt;

&lt;p&gt;Follow the tips below to write modular code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tip : DRY (Don't Repeat Yourself)&lt;/strong&gt;&lt;br&gt;
Don't repeat yourself! Modularization allows us to reuse parts of our code. Generalize and consolidate repeated code in functions or loops. &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tip : Abstract out logic to improve readability&lt;/strong&gt;&lt;br&gt;
Abstracting out code into a function not only makes it less repetitive, but also improves readability with descriptive function names. Although our code can become more readable when we abstract out logic into functions, it is possible to over-engineer this and have way too many modules, so we can use our own judgement. &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tip : Minimize the number of entities (functions, classes, modules, etc.)&lt;/strong&gt;&lt;br&gt;
There are trade-offs to having function calls instead of inline logic. If we have broken up your code into an unnecessary amount of functions and modules, we will have to jump around everywhere if we want to view the implementation details for something that may be too small to be worth it. Creating more modules doesn't necessarily result in effective modularization. &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tip : Functions should do one thing&lt;/strong&gt;&lt;br&gt;
Each function we write should be focused on doing one thing. If a function is doing multiple things, it becomes more difficult to generalize and reuse. Generally, if there's an "and" in your function name, consider refactoring. &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tip : Arbitrary variable names can be more effective in certain functions&lt;/strong&gt;&lt;br&gt;
Arbitrary variable names in general functions can actually make the code more readable. &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tip : Try to use fewer than three arguments per function&lt;/strong&gt;&lt;br&gt;
Try to use no more than three arguments when possible. This is not a hard rule and there are times when it is more appropriate to use many parameters. But in many cases, it's more effective to use fewer arguments. Remember we are modularizing to simplify our code and make it more efficient. If our function has a lot of parameters, we may want to rethink how we are splitting this up.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#for-example-"&gt;
  &lt;/a&gt;
  For Example :
&lt;/h3&gt;

&lt;p&gt;We have a list of &lt;strong&gt;Test Scores&lt;/strong&gt; that we curve in three different ways. Assume that we are an educator who gave out a test that was too difficult or gave a question that was a little unfair (like our college examiners do sometimes). So we decide to figure out a way to boost out student’s scores.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;s = [88, 92, 79, 93, 85]
print(sum(s)/len(s))

s1 = []
for x in s:
    s1.append(x + 5)

print(sum(s1)/len(s1))

s2 = []
for x in s:
    s2.append(x + 10)

print(sum(s2)/len(s2))

s3 = []
for x in s:
    s3.append(x ** 0.5 * 10)

print(sum(s3)/len(s3))

# difficult to understand and pretty repetitive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the first two methods, we add a flat curve of 5 points to each scores and 10 points to each score respectively. In third method we applied a square root curve, where we find the square root of each score and multiply it by 10.&lt;/p&gt;

&lt;p&gt;Right now, its &lt;strong&gt;difficult to understand&lt;/strong&gt; what this code is for and looks pretty &lt;strong&gt;repetitive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now by following the tips we can modify the code as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import math
import numpy as np

def flat_curve(arr, n):
    return [i + n for i in arr]

def square_root_curve(arr):
    return [math.sqrt(i) * 10 for i in arr]

test_scores = [88, 92, 79, 93, 85]
curved_5 = flat_curve(test_scores, 5)
curved_10 = flat_curve(test_scores, 10)
curved_sqrt = square_root_curve(test_scores)

for score_list in test_scores, curved_5, curved_10, curved_sqrt:
    print(np.mean(score_list))

# clean and modular
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an example of &lt;strong&gt;clean&lt;/strong&gt; and &lt;strong&gt;modular code&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KB-XyRr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elds6rv3g3q3ff4j40kj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KB-XyRr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elds6rv3g3q3ff4j40kj.gif" alt="gif"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Follow these tips to write clean and modular code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use Meaningful Names&lt;/li&gt;
&lt;li&gt;Use Whitespace Properly&lt;/li&gt;
&lt;li&gt;DRY (Don't Repeat Yourself)&lt;/li&gt;
&lt;li&gt;Abstract out logic to improve readability&lt;/li&gt;
&lt;li&gt;Minimize the number of entities (functions, classes, modules, etc.)&lt;/li&gt;
&lt;li&gt;Functions should do one thing&lt;/li&gt;
&lt;li&gt;Arbitrary variable names can be more effective in certain functions&lt;/li&gt;
&lt;li&gt;Try to use fewer than three arguments per function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;Feel free to give any suggestions. :-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-can-connect-with-me-on"&gt;
  &lt;/a&gt;
  You can connect with me on
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Prxtikk"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/prxtikk/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>codequality</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Forest Admin is now fully compatible with TypeScript</title>
      <author>SteveB</author>
      <pubDate>Mon, 06 Sep 2021 12:50:12 +0000</pubDate>
      <link>https://dev.to/forestadmin/forest-admin-is-now-fully-compatible-with-typescript-4225</link>
      <guid>https://dev.to/forestadmin/forest-admin-is-now-fully-compatible-with-typescript-4225</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uRdeA0QO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/waeaqg687dmm4ub06yjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRdeA0QO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/waeaqg687dmm4ub06yjv.png" alt="FA-article-typscript@2x-3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At Forest Admin, we strive to provide the best internal tool experience for every user, and also the best development experience for those who set it up.&lt;/p&gt;

&lt;p&gt;Lately, we have realized that many of our users have been developing their own products using TypeScript, and some of them have worked on translating their generated project from JavaScript to TypeScript. At first glance, it was just a matter of using the same technology across projects. However, when our team has looked a little bit closer to the TypeScript ecosystem, we have realized that this technology has several advantages we could make use of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-biggest-advantages-of-typescript"&gt;
  &lt;/a&gt;
  What are the biggest advantages of TypeScript?
&lt;/h2&gt;

&lt;p&gt;In a nutshell, &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; is a superset, type-oriented language based on JavaScript. This article doesn't aim to be an introduction to TypeScript, and we recommend the &lt;a href="https://www.typescriptlang.org/"&gt;Typescriptlang.org&lt;/a&gt; website to learn more about it. Instead, we have gathered some of the advantages of using TypeScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tighter integration with your editor, with relevant suggestions, code completion and more tools.&lt;/li&gt;
&lt;li&gt;Static type checking allowing early error catching and type inference due to strong type approach of coding.&lt;/li&gt;
&lt;li&gt;Scalability. Yes, compared to JavaScript, TypeScript is verbose, but this improves the readability in general and homogenize the code your team develops. This translates into performance and less technical debt.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That being said, we decided to become members of the TypeScript community, and we created our own &lt;a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html"&gt;Types definition&lt;/a&gt; directly in our JavaScript package (forest-express-sequelize and forest-express-mongoose).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-it-mean-for-you-as-a-javascript-developer"&gt;
  &lt;/a&gt;
  What does it mean for you as a JavaScript developer?
&lt;/h2&gt;

&lt;p&gt;Modern editors are smart enough to fetch the Types definition of the packages you are using. Types clearly indicate what the package exports, and what do the exported code looks like. In other words, it describes the package and tells the developer what to use, and how to use it.&lt;/p&gt;

&lt;p&gt;If you still want to code using JavaScript, you can benefit from Types without doing anything because even in JavaScript, you will be proposed suggestions for everything related to Forest with a clear overview about how to code stuff. Let's take a &lt;a href="https://docs.forestadmin.com/documentation/reference-guide/fields/create-and-manage-smart-fields"&gt;smart field&lt;/a&gt; as an example. Without the Types, you would create a smart field using the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3YscKHrn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zouwrybdynd9slyjwf18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3YscKHrn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zouwrybdynd9slyjwf18.png" alt="smart-field-no-code-completion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, nothing is proposed here by your editor. That's because you are using JavaScript and it's too difficult for your editor to do it.&lt;/p&gt;

&lt;p&gt;Now, with the Types included in our packages, here is what your editor will propose:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QUlGpvEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3fvuawtnm92q8f51z4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QUlGpvEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3fvuawtnm92q8f51z4w.png" alt="smart-field-code-completion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How about that? Everything related to the context you are working with is proposed. In this case, we have strongly typed our smart field configuration system and each attribute allowed by Forest Admin to configure a smart field is at your disposal. There is no need to reach the documentation. In addition, please note that the editor clearly shows the type of what is proposed (and thus, the value you can use).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-it-mean-for-you-as-a-typescript-developer"&gt;
  &lt;/a&gt;
  What does it mean for you as a TypeScript developer?
&lt;/h2&gt;

&lt;p&gt;First of all, everything explained in the previous section for JavaScript developers does matter for you as well. But not only. Having a concrete Types definition allows you to code directly using TypeScript in a project we generated for you with the &lt;a href="https://docs.forestadmin.com/documentation/reference-guide/how-it-works/developing-on-forest-admin/forest-cli-commands"&gt;Forest CLI&lt;/a&gt;, or within your own application where you integrated Forest Admin.&lt;/p&gt;

&lt;p&gt;Wondering where to start? We've got you covered. If you want to start developing your admin panel using TypeScript, we developed a &lt;a href="https://docs.forestadmin.com/woodshop/how-tos/translate-your-project-into-typescript"&gt;dedicated guide in our documentation&lt;/a&gt; to help you migrating from JavaScript to TypeScript step by step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;By integrating Types we wanted to ease the development of your admin panel, and make your developers' coding experience better. They clarify how our tool looks like while coding, and help you with some suggestions and code completion.&lt;/p&gt;

&lt;p&gt;We are also now fully compatible with TypeScript. It means you can make a further step by coding your internal tool and work on your Forest Admin integration directly using TypeScript with scalability, velocity, strength, and robustness in mind.&lt;/p&gt;

&lt;p&gt;Are you ready? &lt;a href="https://app.forestadmin.com/signup"&gt;Try Forest Admin for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>adminpanel</category>
      <category>internaltools</category>
    </item>
  </channel>
</rss>
