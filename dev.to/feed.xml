<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Add AutoMapper to .Net 6 </title>
      <author>Mohamad Lawand</author>
      <pubDate>Fri, 10 Dec 2021 08:24:12 +0000</pubDate>
      <link>https://dev.to/moe23/add-automapper-to-net-6-3fdn</link>
      <guid>https://dev.to/moe23/add-automapper-to-net-6-3fdn</guid>
      <description>&lt;p&gt;In this article we will be adding AutoMapper to our AspNetCore 6 application. &lt;/p&gt;

&lt;p&gt;You can watch the full video on Youtube &lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jmHKWdMzihY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The first thing we need to do is add the packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet add package AutoMapper &lt;span class="nt"&gt;--version&lt;/span&gt; 10.1.1
dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection &lt;span class="nt"&gt;--version&lt;/span&gt; 8.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is adding the AutoMapper to our DI container, inside the program.cs we need to add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAutoMapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AppDomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentDomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetAssemblies&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now its time to create our AutoMapper profiles, so on the root directory of our application we need to create a folder called Profiles, inside the Profiles folder we will create a new class called UserProfile ("We can call the class anything we want, but per convention we need to name the class based on the entity we want to map as well add the word profile to it"). &lt;/p&gt;

&lt;p&gt;We are going to map the below entity ("User") to the a Dto ("UserDto")&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Phone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;DateOfBirth&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Country&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;MobileNumber&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Sex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserDto&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Phone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;DateOfBirth&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Country&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now inside the UserProfile class we need to add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserProfile&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UserProfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;CreateMap&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UserDto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToDateTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateOfBirth&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateOfBirth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Phone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Phone&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The UserProfile class MUST inherit from Profile class in order for AutoMapper to recognise it.&lt;/p&gt;

&lt;p&gt;Inside the constructor we define the mapping between the Entity and the Dto. &lt;/p&gt;

&lt;p&gt;Once we complete our profile mapping its now to utilise our new map in our controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ControllerBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IUnitOfWork&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// define the mapper&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IMapper&lt;/span&gt; &lt;span class="n"&gt;_mapper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// initialise the dependencies with constructor initialisation&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UsersController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;IMapper&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;IUnitOfWork&lt;/span&gt; &lt;span class="n"&gt;unitOfWork&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;   
        &lt;span class="n"&gt;_mapper&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;_unitOfWork&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unitOfWork&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;HttpPost&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;AddUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserDto&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// utilise the mapping :)&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;_mappedUser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_mapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_mappedUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CompleteAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UserDto&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;CreatedAtRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GetUser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_mappedUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// return a 201&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So basically we need to initialise the mapper with constructor initialisation.&lt;/p&gt;

&lt;p&gt;Then we need to utilise as follow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;_mappedUser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_mapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;AutoMapper is a powerful tool to keep in our toolset while developing any .Net applications.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>automapper</category>
      <category>csharp</category>
      <category>aspnetcore</category>
    </item>
    <item>
      <title> রিয়েক্ট রাউটার ডম v6 - Changes &amp; Updates</title>
      <author>Shakil Ahmed Atik</author>
      <pubDate>Fri, 10 Dec 2021 08:20:57 +0000</pubDate>
      <link>https://dev.to/shakilahmedatik/riyyektt-raauttaar-ddm-v6-changes-updates-2jbc</link>
      <guid>https://dev.to/shakilahmedatik/riyyektt-raauttaar-ddm-v6-changes-updates-2jbc</guid>
      <description>&lt;p&gt;সম্প্রতি React Router Dom তাদের ভার্সন আপডেট করে ভার্সন ৬ রিলিজ করেছে। এই ভার্সনে বেশ কিছু ব্রেকিং চেঞ্জ এবং আপডেট এসেছে যেগুলো পূর্ববর্তী ভার্সন গুলো থেকে বেশ ভিন্ন এবং নতুন। আজকের এই ব্লগে React Router Dom ভার্সন ৬ এর সকল ব্রেকিং চেঞ্জ এবং নিউ ফিচার গুলো সম্পর্কে উদাহরন সহ বিস্তারিত আলোচনা করা হবে।&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E0%A6%95%E0%A6%BF%E0%A6%AD%E0%A6%BE%E0%A6%AC%E0%A7%87-%E0%A6%87%E0%A6%A8%E0%A7%8D%E0%A6%B8%E0%A6%9F%E0%A6%B2-%E0%A6%95%E0%A6%B0%E0%A6%AC%E0%A7%8B"&gt;
  &lt;/a&gt;
  কিভাবে ইন্সটল করবো?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Npm: npm install react-router@next react-router-dom@next&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Yarn: yarn add react-router@next react-router-dom@next&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-switch-%E0%A6%8F%E0%A6%B0-%E0%A6%AA%E0%A6%B0%E0%A6%BF%E0%A6%AC%E0%A6%B0%E0%A7%8D%E0%A6%A4%E0%A7%87-routes-%E0%A6%8F%E0%A6%B8%E0%A7%87%E0%A6%9B%E0%A7%87"&gt;
  &lt;/a&gt;
  1. Switch এর পরিবর্তে Routes এসেছে
&lt;/h2&gt;

&lt;p&gt;React Router Dom ভার্সন ৬ এ  রিমুভ করে এর পরিবর্তে  আনা হয়েছে। এটিতে  এর প্রায় সব বৈশিষ্ট্য থাকার পাশাপাশি বেশ কিছু এক্সটা ফিচার রয়েছে।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;উদাহরনঃ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;React Router v5&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserRouter, Switch, Route } from 'react-router-dom';
const App = () =&amp;gt; {
  return (
    &amp;lt;BrowserRouter&amp;gt;
      &amp;lt;Switch&amp;gt;
        &amp;lt;Route exact path="/" component={Home} /&amp;gt;
        &amp;lt;Route path="/dashboard" component={Dashboard} /&amp;gt;
      &amp;lt;/Switch&amp;gt;
    &amp;lt;/BrowserRouter&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;u&gt;React Router v6&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserRouter, Routes, Route } from 'react-router-dom';
const App = () =&amp;gt; {
  return (
    &amp;lt;BrowserRouter&amp;gt;
      &amp;lt;Routes&amp;gt;
        &amp;lt;Route path="/" element={&amp;lt;Home /&amp;gt;} /&amp;gt;
        &amp;lt;Route path="dashboard" element={&amp;lt;Dashboard/&amp;gt;} /&amp;gt;
      &amp;lt;/Routes&amp;gt;
    &amp;lt;/BrowserRouter&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ভার্সন ৬ এ ভার্সন ৫ এর মতন আর component কে প্রপ্স বা চিল্ড্রেন আঁকারে পাঠানো লাগেনা। element প্রপ এর ভেতর jsx ফরমেটে component কে পাঠাতে হয়।&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-component-%E0%A6%8F%E0%A6%B0-%E0%A6%AC%E0%A6%A6%E0%A6%B2%E0%A7%87-%E0%A6%8F%E0%A6%B8%E0%A7%87%E0%A6%9B%E0%A7%87-element-%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A6%AA"&gt;
  &lt;/a&gt;
  2. component এর বদলে এসেছে element প্রপ
&lt;/h2&gt;

&lt;p&gt;আপনি যদি উপরের উদাহরণে লক্ষ্য করেন, ভার্সন ৬ এ  আমরা component এর পরিবর্তে element ব্যবহার করছি। এটি অনেক হেল্পফুল একটা ফিচার, এখন আমরা সরাসরি element e  প্রপস পাঠাতে পারি।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;উদাহরনঃ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;React Router v5&lt;/strong&gt;&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route exact path="/" component={Home} /&amp;gt;
&amp;lt;Route path="/dashboard" render={routeProps =&amp;gt; (
    &amp;lt;Dashboard isAdmin={true} /&amp;gt;
  )}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;u&gt;React Router v6&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route path="/" element={&amp;lt;Home /&amp;gt;} /&amp;gt;
&amp;lt;Route path="dashboard" element={&amp;lt;Dashboard isAdmin={true} /&amp;gt;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-exact-%E0%A6%8F%E0%A6%AC%E0%A6%82-strict-%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A6%AA-%E0%A6%97%E0%A6%BE%E0%A7%9F%E0%A7%87%E0%A6%AC%E0%A7%81%E0%A6%B2-%E0%A6%B9%E0%A6%BE%E0%A6%93%E0%A7%9F%E0%A6%BE"&gt;
  &lt;/a&gt;
  3. Exact এবং strict প্রপ গায়েবুল হাওয়া
&lt;/h2&gt;

&lt;p&gt;ভার্সন ৬ এ সবগুলো রাউট exactly ম্যাচ করে বাই ডিফল্ট তাই extact এবং strict প্রপের প্রয়োজন নেই।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;উদাহরনঃ&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;React Router v5&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route exact path="/" component={Home} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;u&gt;React Router v6&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route path="/" element={&amp;lt;Home /&amp;gt;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-relative-paths-%E0%A6%8F%E0%A6%AC%E0%A6%82-links"&gt;
  &lt;/a&gt;
  4.  Relative paths এবং links
&lt;/h2&gt;

&lt;p&gt;ভার্সন ৬ এ, paths এবং link দূটোই তাদের পেরেন্টে রাউটের সাথে রিলেটিভ। তাই এখন আমাদের রিলেটিভ পাথের প্রয়োজন হলে আমরা  “/” ব্যবহার করা ছাড়াই সেটা করতে পারি।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;উদাহরনঃ&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;React Router v5&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route exact path="/" component={Home} /&amp;gt;
&amp;lt;Route path="/dashboard" component={Dashboard} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;u&gt;React Router v6&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route path="/" element={&amp;lt;Home /&amp;gt;} /&amp;gt;
&amp;lt;Route path="dashboard" element={&amp;lt;Dashboard /&amp;gt;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-nested-routes-%E0%A6%8F%E0%A6%96%E0%A6%A8-%E0%A6%86%E0%A6%B0%E0%A7%8B-%E0%A6%B8%E0%A6%B9%E0%A6%9C"&gt;
  &lt;/a&gt;
  5. Nested Routes এখন আরো সহজ
&lt;/h2&gt;

&lt;p&gt;রেগুলার রিয়েক্ট এলিমেন্টের মতন এখন শুধু চাইল্ড রাউট গুলোকে পেরেন্ট রাউট দিয়ে র‍্যাপ করে দিলেই হয়ে যাবে নেস্টেড রাউট।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;উদাহরনঃ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;React Router v5&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route exact path="/" component={Home} /&amp;gt;
&amp;lt;Route path="/users" component={Users} /&amp;gt;
// ....
users.js
import { useRouteMatch } from 'react-router-dom';
const Users = () =&amp;gt; {
  const { path } = useRouteMatch();
return (
    &amp;lt;div&amp;gt;
      &amp;lt;Switch&amp;gt;
        &amp;lt;Route path={`${path}/:id`} component={UserInfo} /&amp;gt;
        &amp;lt;Route path={`${path}/profile`} component={UserProfile} /&amp;gt;
      &amp;lt;/Switch&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;u&gt;React Router v6&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route path="/" element={&amp;lt;Home /&amp;gt;} /&amp;gt;
&amp;lt;Route path="users" element={&amp;lt;Users /&amp;gt;}&amp;gt;
  &amp;lt;Route path=":id" element={&amp;lt;UserInfo /&amp;gt;} /&amp;gt;
  &amp;lt;Route path="profile" element={&amp;lt;UserProfile /&amp;gt;} /&amp;gt;
&amp;lt;/Route&amp;gt;
// ....
users.js
import { Outlet } from 'react-router-dom';
const Users = () =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Outlet/&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-usehistory-%E0%A6%8F%E0%A6%B0-%E0%A6%AA%E0%A6%B0%E0%A6%BF%E0%A6%AC%E0%A6%B0%E0%A7%8D%E0%A6%A4%E0%A7%87-%E0%A6%8F%E0%A6%B8%E0%A7%87%E0%A6%9B%E0%A7%87-usenavigte"&gt;
  &lt;/a&gt;
  6. useHistory এর পরিবর্তে এসেছে useNavigte
&lt;/h2&gt;

&lt;p&gt;useHistory কে গায়েবুল হাওয়া করে দিয়ে এর পরিবর্তে চলে এসেছে আরো বেশি পাওয়ারফুল এবং ফিচার প্যাকড useNavigate হুক।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;উদাহরনঃ&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;React Router v5&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useHistory } from 'react-router-dom';
const CustomButton = props =&amp;gt; {
  const history = useHistory();
  const handleClick = () =&amp;gt; {
    history.push('/users');
  }
  return &amp;lt;button onClick={handleClick}&amp;gt;{props.label}&amp;lt;/button&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;u&gt;React Router v6&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useNavigate } from 'react-router-dom';
const CustomButton = props =&amp;gt; {
  const navigate = useNavigate();
  const handleClick = () =&amp;gt; {
    navigate('/users');
  }
  return &amp;lt;button onClick={handleClick}&amp;gt;{props.label}&amp;lt;/button&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-%E0%A6%86%E0%A6%B0%E0%A7%8B-%E0%A6%AC%E0%A7%87%E0%A6%B6%E0%A6%BF-%E0%A6%85%E0%A6%AA%E0%A6%9F%E0%A6%BF%E0%A6%AE%E0%A6%BE%E0%A6%87%E0%A6%9C%E0%A6%A1-%E0%A6%86%E0%A6%B0%E0%A7%8B-%E0%A6%AC%E0%A7%87%E0%A6%B6%E0%A6%BF-%E0%A6%AA%E0%A6%BE%E0%A6%93%E0%A7%9F%E0%A6%BE%E0%A6%B0%E0%A6%AB%E0%A7%81%E0%A6%B2"&gt;
  &lt;/a&gt;
  7. আরো বেশি অপটিমাইজড, আরো বেশি পাওয়ারফুল
&lt;/h2&gt;

&lt;p&gt;ভার্সন ৫ এর চেয়ে ভার্সন ৬ অনেক বেশি পাওয়ারফুল এবং ফিচার সমৃদ্ব হওয়ার পরেও এর সাইজ ভার্সন ৫ এর প্রায় অর্ধেকেরও কম।&lt;/p&gt;

&lt;p&gt;ভার্সন ৫ঃ &lt;code&gt;২৮.৪ kb&lt;/code&gt;&lt;br&gt;&lt;br&gt;
ভার্সন ৬ঃ &lt;code&gt;১০.২ kb&lt;/code&gt; &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>GUI in Python Using Tkinter</title>
      <author>Anjali Kumawat</author>
      <pubDate>Fri, 10 Dec 2021 08:11:11 +0000</pubDate>
      <link>https://dev.to/anjalikumawat2002/gui-in-python-using-tkinter-gfa</link>
      <guid>https://dev.to/anjalikumawat2002/gui-in-python-using-tkinter-gfa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#gui-in-python"&gt;
  &lt;/a&gt;
  GUI in Python
&lt;/h2&gt;

&lt;p&gt;Python libraries to create Graphical Interfaces :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tkinter&lt;/li&gt;
&lt;li&gt;Python QT&lt;/li&gt;
&lt;li&gt;wxPython&lt;/li&gt;
&lt;li&gt;Kivy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tkinter is an inbuilt Python module used to create simple GUI apps.&lt;/p&gt;

&lt;p&gt;Tk provides following widgets :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;button&lt;/li&gt;
&lt;li&gt;canvas&lt;/li&gt;
&lt;li&gt;checkbutton&lt;/li&gt;
&lt;li&gt;Combobox&lt;/li&gt;
&lt;li&gt;entry&lt;/li&gt;
&lt;li&gt;frame&lt;/li&gt;
&lt;li&gt;label&lt;/li&gt;
&lt;li&gt;labelframe&lt;/li&gt;
&lt;li&gt;listbox&lt;/li&gt;
&lt;li&gt;menu&lt;/li&gt;
&lt;li&gt;menubutton&lt;/li&gt;
&lt;li&gt;message&lt;/li&gt;
&lt;li&gt;notebook&lt;/li&gt;
&lt;li&gt;tk_optionmenu&lt;/li&gt;
&lt;li&gt;panedwindow&lt;/li&gt;
&lt;li&gt;progressbar&lt;/li&gt;
&lt;li&gt;radiobutton&lt;/li&gt;
&lt;li&gt;scale&lt;/li&gt;
&lt;li&gt;scrollbar&lt;/li&gt;
&lt;li&gt;separator&lt;/li&gt;
&lt;li&gt;sizegrip&lt;/li&gt;
&lt;li&gt;spinbox&lt;/li&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;treeview&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It provided the following top-level windows :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tk_chooseColor&lt;/li&gt;
&lt;li&gt;tk_chooseDirectory&lt;/li&gt;
&lt;li&gt;tk_dialog&lt;/li&gt;
&lt;li&gt;tk_getOpenFile&lt;/li&gt;
&lt;li&gt;tk_getSaveFile&lt;/li&gt;
&lt;li&gt;tk_messageBox&lt;/li&gt;
&lt;li&gt;tk_popup&lt;/li&gt;
&lt;li&gt;toplevel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tk also provides three geometry managers :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;​   place  -  It positions widgets at absolute locations&lt;/li&gt;
&lt;li&gt;​    grid    -  It arranges widgets in a grid&lt;/li&gt;
&lt;li&gt;​    pack  -  It packs widgets into a cavity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basics-of-tkinter"&gt;
  &lt;/a&gt;
  Basics of tkinter
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; import tkinter module&lt;/li&gt;
&lt;li&gt; create the main window (container)&lt;/li&gt;
&lt;li&gt; Add any number of widgets to the main window&lt;/li&gt;
&lt;li&gt; Enter the main event loop&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Eg.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import tkinter
window = Tkinter.Tk()          # creates main window
window.title("GUI")
label = tkinter.Label(window , text="Hello World !!").pack()
window.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;mainloop() is used when our application is ready to run. mainloop() is an infinite loop used to run the application, wait for an event to occur and process the event till the window is not closed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#widgets"&gt;
  &lt;/a&gt;
  Widgets
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#button"&gt;
  &lt;/a&gt;
  Button
&lt;/h3&gt;

&lt;p&gt;It is used to add a button in our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window = Button(master, option=value)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;master&lt;/strong&gt; represents the parent window.&lt;/p&gt;

&lt;p&gt;activebackground    :   sets the background color when button is under the cursor.&lt;/p&gt;

&lt;p&gt;activeforeground     :    sets the foreground color when button is under the cursor.&lt;/p&gt;

&lt;p&gt;bg                          :    sets normal background color&lt;/p&gt;

&lt;p&gt;fg                          :     sets the foreground color&lt;/p&gt;

&lt;p&gt;command            :     to call a function&lt;/p&gt;

&lt;p&gt;font                        :     sets the font of button label&lt;/p&gt;

&lt;p&gt;image                    :     sets the image on the button&lt;/p&gt;

&lt;p&gt;width                     :     sets the width of the button&lt;/p&gt;

&lt;p&gt;height                  :     sets the height of the button&lt;/p&gt;

&lt;p&gt;justify                   :     LEFT , RIGHT , CENTER&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import tkinter as tk
window = tk.Tk()
window.title("Python")
button = tk.Button(window , text = 'GUI',width = 25,command = window.destroy)
button.pack()
window.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output is :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ods3yj1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62aefbj9ak9pabk98zwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ods3yj1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62aefbj9ak9pabk98zwa.png" alt="Image description" width="880" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#label"&gt;
  &lt;/a&gt;
  Label
&lt;/h3&gt;

&lt;p&gt;It is used to display text or image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window = Label(master,option=value)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;bg               :       sets the normal background color&lt;br&gt;
command     :        to call a function&lt;br&gt;
font              :      sets the font of Label text &lt;br&gt;
image          :       sets the image on the Label&lt;br&gt;
width           :        sets the width of the Label&lt;br&gt;&lt;br&gt;
height           :     sets the height of the Label&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from tkinter import *
root = Tk()
l1 = Label(root,text="GUI Python",bg="pink",width = 25)
l1.pack()
root.mainloop()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output is :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXHTKqJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp2agtp2g03s17a008c5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXHTKqJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp2agtp2g03s17a008c5.png" alt="Image description" width="880" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#entry"&gt;
  &lt;/a&gt;
  Entry
&lt;/h3&gt;

&lt;p&gt;(Text Field)&lt;/p&gt;

&lt;p&gt;It is used to input single line of text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window = Entry(master,option=value)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;bg      :       sets the background color&lt;/p&gt;

&lt;p&gt;fg      :       sets the foreground color&lt;/p&gt;

&lt;p&gt;font        :       sets the font for widget&lt;/p&gt;

&lt;p&gt;justify :       LEFT , RIGHT , CENTER&lt;/p&gt;

&lt;p&gt;command :       to call a function&lt;/p&gt;

&lt;p&gt;width       :       sets the width of widget&lt;/p&gt;

&lt;p&gt;height      :       sets the height of widget&lt;/p&gt;

&lt;p&gt;show        :       Normally, the characters that the user types appear in the entry. To make a  .password.   entry that echoes each character as (show = "*")&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#methods-of-entry"&gt;
  &lt;/a&gt;
  Methods of Entry
&lt;/h4&gt;

&lt;p&gt;delete(start,end)           :   delete a character or range of characters&lt;/p&gt;

&lt;p&gt;get()                           :     returns the text of widget&lt;/p&gt;

&lt;p&gt;insert(index,string)     :     inserts text at the specified index&lt;/p&gt;

&lt;p&gt;select_range(start,end) :     selects specified range.&lt;/p&gt;

&lt;p&gt;select_present()            :     returns True if there is a selection,false otherwise&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from tkinter import *
master = Tk()
l1=Label(master,text='first Name')
l1.grid(row=0)
l2=Label(master,text='Last Name')
l2.grid(row=1)
e1=Entry(master)
e2=Entry(master)
e1.grid(row=0,column=1)
e2.grid(row=1,column=1)
mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output is :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsOsd9E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10au0b7qovh4bhnc781p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsOsd9E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10au0b7qovh4bhnc781p.png" alt="Image description" width="308" height="123"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text"&gt;
  &lt;/a&gt;
  Text
&lt;/h3&gt;

&lt;p&gt;It is used to edit multi line text and formate the way it has to be displayed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t = Text(master,option = value)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;highlightcolor      :       set the color of focus highlight&lt;/p&gt;

&lt;p&gt;insertbackground  :     set the background of the widget&lt;/p&gt;

&lt;p&gt;bg                       :      sets the normal background color&lt;/p&gt;

&lt;p&gt;fg                        :     sets the foreground color&lt;/p&gt;

&lt;p&gt;bd                       :      sets width of the border around the widget. (Default is 2 pixels)&lt;/p&gt;

&lt;p&gt;font                       :        sets the font&lt;/p&gt;

&lt;p&gt;image                  :        sets the image&lt;/p&gt;

&lt;p&gt;width                   :       sets the width (in pixels)&lt;/p&gt;

&lt;p&gt;height                 :        sets the height (in lines)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from tkinter import *
root = Tk()
t = Text(root , height = 4,width=40)
t.pack()
t.insert(END,'ANJALI KUMAWAT \nCOMPUTER SCIENCE UNDERGRAD \nGWOC"21" CONTRIBUTOR')
mainloop()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output is :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0icy3tcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m244z16lq36nd428cfnk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0icy3tcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m244z16lq36nd428cfnk.png" alt="Image description" width="404" height="108"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#methods-of-text"&gt;
  &lt;/a&gt;
  Methods of Text
&lt;/h4&gt;

&lt;p&gt;delete(start,end)   -   deletes a specific character or a range of text&lt;br&gt;
get(start,end)         -       returns a specific character or a range of text&lt;br&gt;
insert(index,string)   -       inserts text at the specified index&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#checkbutton"&gt;
  &lt;/a&gt;
  CheckButton
&lt;/h3&gt;

&lt;p&gt;It is used to display a number of options to a user as toggle buttons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window = CheckButton(master , option = value)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;bg              :       sets background color&lt;/p&gt;

&lt;p&gt;fg               :      sets foreground color&lt;/p&gt;

&lt;p&gt;command :       to call a function&lt;/p&gt;

&lt;p&gt;font              :     sets the font&lt;/p&gt;

&lt;p&gt;image         :     sets the image&lt;/p&gt;

&lt;p&gt;cffvalue        :       A checkbutton's associated control variable will be &lt;strong&gt;set to 0&lt;/strong&gt; when it is cleared(off).We can supply an alternate value for the off state.&lt;/p&gt;

&lt;p&gt;onvalue     :       A checkbutton's associated control variable will be &lt;strong&gt;set to 1&lt;/strong&gt; when it is set(on).We can supply an alternate value for the on state.&lt;/p&gt;

&lt;p&gt;state            :      Default is &lt;strong&gt;state=NORMAL&lt;/strong&gt; but we can use &lt;strong&gt;state=DISANLED&lt;/strong&gt; to grey out the control and make is unresponsive.&lt;/p&gt;

&lt;p&gt;variable        :       This is control variable associated with checkbutton that tracks the current state of widget.Normally this variable is an IntVar and 0 means cleared and 1 means set.&lt;/p&gt;

&lt;p&gt;Width           :       sets the width of widget.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#methods-of-checkbutton"&gt;
  &lt;/a&gt;
  Methods of checkbutton
&lt;/h4&gt;

&lt;p&gt;Deselect()      -       clears the checkbutton&lt;br&gt;
Select()        -       selects the checkbutton&lt;br&gt;
Toggle()            -       reverses the state(on/off)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from tkinter import *
root = Tk()
var1 = IntVar()
var2 = IntVar()
c1 = Checkbutton(root,text = "like Mango ? ",variable = var1,onvalue = 1,offvalue = 0,width = 40)
c2 = Checkbutton(root,text = "like Orange ? ",variable = var2,onvalue = 1,offvalue = 0,width = 40)
c1.pack()
c2.pack()
root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output is :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2TKIXhKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nz2bfbyfevkmy4ki0zas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2TKIXhKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nz2bfbyfevkmy4ki0zas.png" alt="Image description" width="373" height="97"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#radiobutton"&gt;
  &lt;/a&gt;
  RadioButton
&lt;/h3&gt;

&lt;p&gt;It is used to offer multiple choice option to the used and user can select one option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window = RadioButton(master,option=value)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;bg              :       sets the background color&lt;/p&gt;

&lt;p&gt;fg               :      sets foreground color&lt;/p&gt;

&lt;p&gt;command :       to call a function&lt;/p&gt;

&lt;p&gt;font              :     sets the font&lt;/p&gt;

&lt;p&gt;image         :     sets the image&lt;/p&gt;

&lt;p&gt;width           :       sets the width&lt;/p&gt;

&lt;p&gt;variable        :       variable associated with the Radiobuttons.&lt;/p&gt;

&lt;p&gt;value           :       when a radiobutton is selected by user,its control variable is set to its associated value. If the control variable is an IntVar , give each radiobutton in the group a different integer value option. If the control variable is a StringVar,give each radiobutton a different string value option.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#methods-of-radiobutton"&gt;
  &lt;/a&gt;
  Methods of Radiobutton
&lt;/h4&gt;

&lt;p&gt;select()        -       selects Radiobutton&lt;br&gt;
deselect()      -       deselects Radiobutton&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from tkinter import *

def select():
    if choice.get()==1:
        order = "Large Pizza"
    elif choice.get()==2:
        order = "Medium Pizza"
    else:
        order = "Small Pizza"
    selection = "You have ordered "+order
    label.config(text=selection)

root = Tk()
root.title("Pizza Corner")
choice = IntVar()
rbLarge = Radiobutton(root, text = "Large Pizza",font=20,variable=choice,value=1,command=select)
rbMedium = Radiobutton(root, text = "Medium Pizza",font=20,variable=choice,value=2,command=select)
rbSmall = Radiobutton(root, text = "Small Pizza",font=20,variable=choice,value=3,command=select)
rbLarge.pack(anchor=W)
rbMedium.pack(anchor=W)
rbSmall.pack(anchor=W)
label = Label(root,text="Choose pizza that you want!!",font=35)
label.pack()
mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output is :&lt;/p&gt;

&lt;p&gt;When we are not clicking on any RadioButton - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvNgll4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqcqcm115yhhvi3kjfqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvNgll4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqcqcm115yhhvi3kjfqs.png" alt="Image description" width="880" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we are clicking on any RadioButton then -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---A55lLun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcgpr5nosgxnuvu2emz6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---A55lLun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcgpr5nosgxnuvu2emz6.png" alt="Image description" width="880" height="126"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spinbox"&gt;
  &lt;/a&gt;
  SpinBox
&lt;/h3&gt;

&lt;p&gt;It is used to select a value from fixed number of values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window = Spinbox(root,option=value)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;bg              :       sets the background color&lt;/p&gt;

&lt;p&gt;fg               :      sets foreground color&lt;/p&gt;

&lt;p&gt;font              :     sets the font&lt;/p&gt;

&lt;p&gt;justify       :     LEFT,RIGHT,CENTER&lt;/p&gt;

&lt;p&gt;width         :     sets the width for widget&lt;/p&gt;

&lt;p&gt;from_        :      sets the minimum value&lt;/p&gt;

&lt;p&gt;to             :        sets the maximum value&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#methods-for-spinbox"&gt;
  &lt;/a&gt;
  Methods for Spinbox
&lt;/h4&gt;

&lt;p&gt;get()       -       returns the value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from tkinter import *

def select():
    string = "Selection is "+str(sp.get())
    l.config(text=string)

root = Tk()
sp = Spinbox(root,from_=0,to=10,command=select,width = 15,font=30)
sp.pack()
l=Label(root,text=" ")
l.pack()
mainloop()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​Output is :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oyh-gDSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsvyvemguvt4i61yatrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oyh-gDSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsvyvemguvt4i61yatrg.png" alt="Image description" width="880" height="95"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep Learning......&lt;br&gt;
Keep Coding......👩‍💻❤️🙌&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Tarantool Running on Apple M1: First Results</title>
      <author>tarantool</author>
      <pubDate>Fri, 10 Dec 2021 07:56:57 +0000</pubDate>
      <link>https://dev.to/tarantool/tarantool-running-on-apple-m1-first-results-1omn</link>
      <guid>https://dev.to/tarantool/tarantool-running-on-apple-m1-first-results-1omn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_j9qAhma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2ua5hp8t1dbq67zfeby.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_j9qAhma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2ua5hp8t1dbq67zfeby.jpg" alt="Image description" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Author: Alexey Koryakin&lt;/p&gt;

&lt;p&gt;Apple's M1 chips are not the news any more. Many people know that these chips are fast and that MacOS applications have to be adapted for the new architecture. Tarantool development team decided to take on the same challenge.&lt;/p&gt;

&lt;p&gt;My name is Alexey Koryakin, and I am CTO at &lt;a href="http://www.tarantool.io/en/?utm_source=dev&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2021"&gt;Tarantool&lt;/a&gt;, a part of the VK ecosystem. I will explain why we needed this  even though macOS is not used for production servers; — I will show how we solved the task. and I will share you the benchmark results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-task-and-the-solution"&gt;
  &lt;/a&gt;
  The Task and the Solution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://www.tarantool.io/en/?utm_source=dev&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2021"&gt;Tarantool&lt;/a&gt; is a high-performance in-memory computing platform that consists of the database and the application server. Many developers install Tarantool on their office computers and write code there. In many cases, it's more convenient than a separate server.&lt;/p&gt;

&lt;p&gt;Some developers from our team also prefer installing Tarantool locally. Among them is our product manager, who bought a new M1-based MacBook Air at the beginning of the year. So one time he asked our technical team: &lt;em&gt;"Why doesn't Tarantool run natively on the M1 chip? I have recently bought a new MacBook Air, and I can launch Tarantool only via Rosetta. The native support of Apple M1 chips could become a cool feature for our community so that people switching to new Macs could efficiently develop Tarantool-based systems"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The technical team thought and decided:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Tarantool is known to be very fast. M1 is known to be very fast. And we want to find out how much faster Tarantool could work on M1.&lt;/li&gt;
&lt;li&gt; Apple is actively upgrading its Mac product line, migrating them to M1 chips (and now into M1 Max). Developers and other IT specialists across the world are actively switching to the new platform. The existing x86_64 software is launched via the Rosetta translation environment that impairs the full power of the software (including Tarantool) run on new Apple chips. This must be changed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is how we've ended up with a new task — support of M1 chips &lt;/p&gt;

&lt;p&gt;Around the same time, we were working on the ARM64 support for Linux. Since M1 is essentially ARM64 with some specific features, we assumed that implementing M1 support would be easy. This proved to be not far from the truth: we have finalized most tasks of M1 support with ARM64 support for Linux. The main issues were related to specific features of RISC instructions of ARM architecture. For example, direct transfer of control from one section of the machine code to another one is possible only under 2 MB offsets. Apple ABI that differs from ARM Linux ABI became the distinguishing feature of M1 support. We had to tune Tarantool code specifically for new chips, prying into public &lt;a href="https://developer.apple.com/documentation/xcode/writing-arm64-code-for-apple-platforms"&gt;Apple documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All in all, support of ARM64 and M1 in particular is a relatively simple engineering task. There were some issues, but we were able to resolve them without reading endless specifications and all-nighters. It took us about 4 months, from May until August, to complete the entire endeavor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance-benchmark"&gt;
  &lt;/a&gt;
  Performance Benchmark
&lt;/h2&gt;

&lt;p&gt;M1 is famous for its outstanding performance. Even the code run through Rosetta works fast. We didn't forget the performance either and decided to check how much faster Tarantool could run.&lt;/p&gt;

&lt;p&gt;We compared macOS running on available commodity devices with different hardware. We didn't aim to compare different operating systems or chase after the server CPUs like Xeon. We just wanted to know how much faster Tarantool would run for the developer that switched to a new MacBook, and to assess the perspectives of a new Mac platform. For the test we used several computers owned by the team or available in retail&lt;/p&gt;

&lt;p&gt;● MacBook Pro 16,2 (2020),&lt;br&gt;
● Mac mini 8,1 (2018),&lt;br&gt;
● MacBook Air 10,1 (2020), Apple M1.&lt;/p&gt;

&lt;p&gt;We wrote a &lt;a href="https://gist.github.com/igormunkin/e956396d8fb3348d3ebbad60588af297"&gt;simple benchmark&lt;/a&gt; test  that does three things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; This is Lua code, which means an application server is involved.&lt;/li&gt;
&lt;li&gt; This code writes to the database, which means the transaction engine of the database is involved.&lt;/li&gt;
&lt;li&gt; This code runs on М1 and doesn't crash :)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The benchmark runs in one system thread that starts 50 &lt;a href="http://www.tarantool.io/en/doc/latest/reference/reference_lua/fiber/?utm_source=dev&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2021"&gt;fibers&lt;/a&gt;, each of them inserting 100 operations per one transaction. This scenario provides a greater workload for the CPU rather than for memory or storage. And this is exactly what we need to test the CPU. If the transaction consisted of one or three–four updates, then the workload would rather shift from CPU to RAM or storage.&lt;/p&gt;

&lt;p&gt;We didd multiple tests inserting from 1 up to 20 million records. We repeated every test 15 times and then calculated the median value. These are &lt;a href="https://gist.github.com/igormunkin/e956396d8fb3348d3ebbad60588af297"&gt;complete results&lt;/a&gt; to examine all tests in detail. And here, for illustrative purposes, we show the median value on the diagram.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RBGvZ2m_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3jhvhicp7vhvxj1xyl8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RBGvZ2m_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3jhvhicp7vhvxj1xyl8.png" alt="Wall Clock Benchmark, the median value of 15 iterations. The smaller the value, the faster the code" width="880" height="617"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see that Tarantool performance on M1 chip is twice better than that of the notebook of the same year based on a different processor.&lt;/p&gt;

&lt;p&gt;Then we have tested M1 for the tasks fulfilled via the Rosetta translator. The performance turned out to be approximately the same as that of the Mac mini 2018, but significantly higher than that of MacBook Pro 2020.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7oL2C9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvfp8vdrhg639n0e4dqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7oL2C9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvfp8vdrhg639n0e4dqr.png" alt="Wall Clock Benchmark. The same devices plus launch via Rosetta" width="800" height="650"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wall Clock Benchmark. The same devices plus launch via Rosetta&lt;/p&gt;

&lt;p&gt;We understand that this doesn't mean double performance of all applications. They all vary in their code, tasks, and conditions. But in any way, you can expect that your local Tarantool installation will work faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-sum-up"&gt;
  &lt;/a&gt;
  To Sum Up...
&lt;/h2&gt;

&lt;p&gt;Starting from &lt;a href="https://github.com/tarantool/tarantool/releases/tag/2.10.0-beta1"&gt;2.10.0-beta&lt;/a&gt; Tarantool can natively run on M1 chips. So far this is preliminary support: something may crash or run unstable. We have resolved almost all bugs we knew about, with a few minor ones left. For example, there are some issues with the JIT compiler. But this didn't prevent the team product manager from installing Tarantool on his new MacBook Air and running it every day.&lt;/p&gt;

&lt;p&gt;Later we will resolve other known bugs, and those that the developers will report to us. If you have a new M1 Mac, try the latest version of Tarantool. If something crashes, please &lt;a href="https://github.com/tarantool/tarantool/issues/"&gt;write the bug report&lt;/a&gt;, and we'll help.&lt;/p&gt;

&lt;p&gt;Try Tarantool cluster at &lt;a href="http://try.tarantool.io/?utm_source=dev&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2021"&gt;https://try.tarantool.io&lt;/a&gt;. Download Tarantool at the &lt;a href="https://www.tarantool.io/en/download/os-installation/docker-hub/?utm_source=dev&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2021"&gt;official website&lt;/a&gt;, and get help in the &lt;a href="https://t.me/tarantool?utm_source=dev&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2021"&gt;Telegram chat&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tutorual</category>
      <category>ios</category>
      <category>m1</category>
      <category>programming</category>
    </item>
    <item>
      <title>HTML tags | param</title>
      <author>Carlos Espada</author>
      <pubDate>Fri, 10 Dec 2021 07:13:46 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-param-4lhc</link>
      <guid>https://dev.to/carlosespada/html-tags-param-4lhc</guid>
      <description>&lt;p&gt;It &lt;strong&gt;defines parameters&lt;/strong&gt; for an &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;It has two attributes: &lt;code&gt;name&lt;/code&gt; to declare the name of the parameter and &lt;code&gt;value&lt;/code&gt; to specify its value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;em&gt;-&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Self-closing: &lt;em&gt;Yes&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Semantic value: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/tag_param.asp"&gt;Definition&lt;/a&gt; | &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_param"&gt;Example&lt;/a&gt; | &lt;a href="https://caniuse.com/mdn-html_elements_param"&gt;Support&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>param</category>
    </item>
    <item>
      <title>NEWS Application using New York Times API</title>
      <author>SnowBit</author>
      <pubDate>Fri, 10 Dec 2021 07:10:52 +0000</pubDate>
      <link>https://dev.to/snowbit/news-website-using-new-york-times-api-5c62</link>
      <guid>https://dev.to/snowbit/news-website-using-new-york-times-api-5c62</guid>
      <description>&lt;p&gt;Hello, I am back again with a new article; In this article, I will be showing how I built a &lt;strong&gt;News Website&lt;/strong&gt; using &lt;strong&gt;NY Times API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consider liking and sharing the article.&lt;/p&gt;

&lt;p&gt;Let's get started,&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/d_35sByyMoY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-register-application-at-ny-times-developers"&gt;
  &lt;/a&gt;
  Step 1 - Register Application at &lt;strong&gt;NY Times Developers&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Go to &lt;a href="https://developer.nytimes.com/"&gt;https://developer.nytimes.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Sign up for an account, or sign in if already exists.&lt;/li&gt;
&lt;li&gt;Create a &lt;strong&gt;New App&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sm2Aoqy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5hr1ucotcwfvqcnmyjs.png" alt="Create a new app" width="578" height="290"&gt;
&lt;/li&gt;
&lt;li&gt;And save the API Key&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-2-code"&gt;
  &lt;/a&gt;
  Step 2 - &lt;strong&gt;Code&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fetch
(Note API KEY in the code has been deprecated use your OWN API KEY)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.nytimes.com/svc/mostpopular/v2/viewed/1.json?api-key=iDFG30D2aGpr4OWWSJ6UBMBQh2S7oZpW&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Fetching Results
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`
                    &amp;lt;div class="card"&amp;gt;
                    &amp;lt;div class="card-body"&amp;gt;
                    &amp;lt;img src="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;media&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;media-metadata&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" class="card-img-top" alt="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;media&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;caption&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" title="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;media&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;caption&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;lt;br&amp;gt;
                    &amp;lt;h2 class="card-title"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h2&amp;gt;
                    &amp;lt;div class="card-text"&amp;gt;
                        &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;abstract&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;br&amp;gt;
                    `&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;media&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;caption&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Result&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edd4EiQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8phd58ln5zlfb5tdzyw.png" alt="Result" width="880" height="456"&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Consider liking the article if you learnt something new.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Build a Serverless Realtime Trivia App Using Fauna Streaming And React.Js On Netlify</title>
      <author>Amolo</author>
      <pubDate>Fri, 10 Dec 2021 07:08:11 +0000</pubDate>
      <link>https://dev.to/amolo/build-a-serverless-realtime-trivia-app-using-fauna-streaming-and-reactjs-on-netlify-8md</link>
      <guid>https://dev.to/amolo/build-a-serverless-realtime-trivia-app-using-fauna-streaming-and-reactjs-on-netlify-8md</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h3&gt;

&lt;p&gt;As a developer, building applications that users can interact with in real-time has become a norm for most of the developers. Most of the applications we see and interact with have at least a single real-time feature included. Real-time messaging, notifications are just two of commonly used real-time features used in applications.&lt;br&gt;
While building applications it is not always clear how to achieve real time functionality, there exists a number due to many available technologies and platforms, complexity of setting up, provision of resources, scaling etc.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fauna"&gt;
  &lt;/a&gt;
  &lt;a href="https://fauna.com/?utm_source=DevTo&amp;amp;utm_medium=referral&amp;amp;utm_campaign=WritewithFauna_Trvia_BAmolo"&gt;FAUNA&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://fauna.com/features?utm_source=DevTo&amp;amp;utm_medium=referral&amp;amp;utm_campaign=WritewithFauna_Trvia_BAmolo"&gt;Fauna’s&lt;/a&gt; database is well optimized for the JamStack through its API first approach while offering powerful and useful  query features through its own query language (FQL).&lt;br&gt;
Fauna provides a variety of features including Streams. Using Streams, client code can subscribe to a document stored in a Fauna database and any changes to that document are immediately streamed to the client as event notifications. &lt;br&gt;
With this, you can immediately interact with your users and maintain a consistent and high-level user experience, as well as keep your information and data constantly updated.&lt;br&gt;
In this tutorial we will use React, Fauna and Netlify &amp;amp; Netlify Functions to build out a realtime serverless application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tutorial-application"&gt;
  &lt;/a&gt;
  TUTORIAL APPLICATION
&lt;/h3&gt;

&lt;p&gt;As stated in our title, our application will simply allow you to post questions, following this, a user will be able to answer these questions. We will also maintain a real time leaderboard just to see how well one is stacking up against other players.&lt;/p&gt;

&lt;p&gt;This application will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Allow users to answer questions &lt;/li&gt;
&lt;li&gt;Get their scores in real time&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h3&gt;

&lt;p&gt;The recommended way to initialize a blank React app is by using create-react-app which sets up everything automatically for you. &lt;/p&gt;

&lt;p&gt;You will be required to either have yarn or npm installed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn create react-app trivia&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once this is complete,cd into the folder. &lt;br&gt;
&lt;code&gt;cd trivia&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To quickly build out our UI, we will take advantage of Chakra UI  which is a simple, modular and accessible component library that gives you the building blocks you need to quickly build your React applications.&lt;/p&gt;

&lt;p&gt;To install Chakra UI simply use yarn or npm to do that.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Basic Application Structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── package.json
├── public
│   ├── favicon.ico
│   ├── index.html
│   ├── logo192.png
│   ├── logo512.png
│   ├── manifest.json
│   └── robots.txt
├── README.md
├── src
│   ├── App.css
│   ├── App.js
│   ├── App.test.js
│   ├── index.css
│   ├── index.js
│   ├── reportWebVitals.js
│   └── setupTests.js
└── yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#installing-fauna"&gt;
  &lt;/a&gt;
  Installing Fauna
&lt;/h4&gt;

&lt;p&gt;Install the faunadb npm package to allow our application to interact with our Fauna Instance.&lt;br&gt;
&lt;code&gt;yarn add faunadb&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setup-your-fauna-database"&gt;
  &lt;/a&gt;
  Setup your Fauna database.
&lt;/h4&gt;

&lt;p&gt;To hold all our application’s data, we will first need to create a database. &lt;br&gt;
Fortunately, this is just a single command or line of code, as shown below. &lt;br&gt;
Don’t forget to create a Fauna account before continuing.&lt;br&gt;
Fauna Shell&lt;br&gt;
Fauna's API has various interfaces/clients, such as drivers in Javascript, Golang, Python, Java and more, a cloud console, local and cloud shells, and even a VS Code extension! For this article, we’ll start with the local Fauna Shell, which is almost 100% interchangeable with the other interfaces.&lt;/p&gt;

&lt;p&gt;You will first be required to install the Fauna shell on your machine with the following command.&lt;br&gt;
&lt;code&gt;npm install -g fauna-shell&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After installing the Fauna Shell with yarn, log in with your Fauna credentials using the fauna cloud-login command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ fauna cloud-login
For email login, enter your email below, and then your password.
For login with 3rd-party identity providers like Github or Netlify, please acquire a key from 
Dashboard &amp;gt; Security and enter it below instead.

Email: email@example.com
Password: **********
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are able to create our database.&lt;br&gt;
&lt;code&gt;fauna create-database trivia&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-collections-and-indexes"&gt;
  &lt;/a&gt;
  Create Collections and Indexes.
&lt;/h3&gt;

&lt;p&gt;To start a shell with your new database, run:&lt;br&gt;
fauna shell trivia&lt;/p&gt;

&lt;p&gt;We can now operate our database from this shell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ fauna shell trivia
Starting shell for database trivia
Connected to https://db.fauna.com
Type Ctrl+D or .exit to exit the shell
trivia&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the case of our application, we will have two collections.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Questions - This will hold information about the questions.&lt;/li&gt;
&lt;li&gt;Answers - The responses provided by the users. We will also use this collection to grade the responses.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#data-schema"&gt;
  &lt;/a&gt;
  DATA SCHEMA
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#questions-collection"&gt;
  &lt;/a&gt;
  Questions Collection
&lt;/h3&gt;

&lt;p&gt;Each question will have the following fields &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;question_text - A questions eg. “Does Next.js support SSR or SSG?”&lt;/li&gt;
&lt;li&gt;correct_answer - The correct answer to the question asked in (1)  eg. “Both”&lt;/li&gt;
&lt;li&gt;options - Distractors to the correct answer eg. [“SSR”, “SSG”]&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#answers-collection"&gt;
  &lt;/a&gt;
  Answers Collection
&lt;/h3&gt;

&lt;p&gt;Each question response (answer) will have the following fields &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;question_id - a  reference to the question in the questions collection. &lt;/li&gt;
&lt;li&gt;user_id - A unique identifier for the respondent.(This value will be automatically generated and stored in the browser.)&lt;/li&gt;
&lt;li&gt;response - The user’s response from a list of possible options.&lt;/li&gt;
&lt;li&gt;isCorrect - A Boolean value to indicate it the answer provided is their correct (true) or incorrect (false) &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#creating-collections"&gt;
  &lt;/a&gt;
  Creating collections
&lt;/h3&gt;

&lt;p&gt;To create our questions collection, run the following command in the shell to create the collection with the default configuration.&lt;br&gt;
&lt;code&gt;trivia&amp;gt; CreateCollection({ name: "questions" })&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, let’s do the same for the answers’ collections.&lt;br&gt;
&lt;code&gt;trivia&amp;gt; CreateCollection({ name: "answers" })&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lastly, let’s do the same for the scores’ collections.&lt;br&gt;
&lt;code&gt;trivia&amp;gt; CreateCollection({ name: "scores" })&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;INDEXING OUR DATA.&lt;/p&gt;

&lt;p&gt;Fauna highly recommends indexing your data for the purposes of searching, sorting and combining results from multiple collections.&lt;/p&gt;

&lt;p&gt;In this application, a user will be allowed to attempt and respond to a question only once. We can enforce this constraint in our answers collection by creating an index as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;qna&amp;gt; CreateIndex({
name: "unique_question_user",
   unique: true,
   serialized: true,
   source: Collection("answers"),
   terms: [
     {
       field: ["data", "user_id"]
     },
     {
       field: ["data", "question_id"]
     }
   ]
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#sample-response"&gt;
  &lt;/a&gt;
  SAMPLE RESPONSE
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#SAMPLE RESPONSE…...
{
  ref: Index("unique_question_user"),
  ts: 1610301037970000,
  active: true,
  serialized: true,
  name: 'unique_question_user',
  unique: true,
  source: Collection("answers"),
  terms: [
    { field: [ 'data', 'user_id' ] },
    { field: [ 'data', 'question_id' ] }
  ],
  partitions: 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our second index is to enable us to quickly fetch a question based on the id.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CreateIndex({
  name: "question_by_id",
  source: Collection("questions"),
  terms: [
    {
      field: ["data", "id"]
    }
  ]
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly we will index our scores collection based on the user_id in order to allow faster retrieval and reads to this collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CreateIndex({
  name: "score_by_user",
  source: Collection("scores"),
  terms: [
    {
      field: ["data", "user_id"]
    }
  ]
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;SERVERLESS FUNCTIONS.&lt;/p&gt;

&lt;p&gt;We will create two Netlify functions,&lt;br&gt;
To create questions&lt;br&gt;
To retrieve question data and metadata from the database.&lt;br&gt;
To respond to the questions being asked and update the user’s scores.&lt;/p&gt;

&lt;p&gt;Now let’s create our first Netlify function. To make the functions, first, we need to install Netlify CLI globally.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn global add netlify-cli -g&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that the CLI is installed. We can create a key to allow our application to interact with Fauna.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-a-fauna-key"&gt;
  &lt;/a&gt;
  CREATE A FAUNA KEY
&lt;/h3&gt;

&lt;p&gt;In order for our application to send and receive data to Fauna we will need to create a key and provide its secret when performing queries.&lt;br&gt;
For this application, a key with a Server Role is sufficient to create, read and delete data.&lt;br&gt;
Head over to your database’s Fauna Shell and create a key using the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CreateKey({
      name: "trivia-app",
      role: "server"
   })
# Example result.
# NOTE: Make sure you copy and store the secret!
# {
#   ref: Ref(Keys(), "280185139463529993"),
#     ts: 1603464278974000,
#     role: 'server',
#     secret: '&amp;lt;FaunaDB secret key&amp;gt;’',
#     hashed_secret: ...
# }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let’s create a .env file on our project root with the following fields.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;netlify env:set FAUNADB_SERVER_SECRET “&amp;lt;FaunaDB secret key&amp;gt;”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, Let’s see how we can start with creating Netlify functions. For this, we will need to create a directory in our project root called functions and a file called netlify.toml, which will be responsible for maintaining configurations for our Netlify project. This file defines our function’s directory, build directory, and commands to execute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[build]
command = "npm run build"
functions = "functions/"
publish = "build"

[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200
  force = true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will do some additional configuration for the Netlify configuration file, like in the redirection section in this example. Notice that we are changing the default path of the Netlify function of /.netlify/** to /api/. This configuration is mainly for the improvement of the look and field of the API URL. So to trigger or call our function, we can use the path:&lt;/p&gt;

&lt;p&gt;First, let’s make a connection file for Fauna called lib/fauna.js, returning a Fauna connection object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const faunadb = require('faunadb');
const q = faunadb.query

const client = new faunadb.Client({
  secret: process.env.FAUNADB_SERVER_SECRET,
});

module.exports = { client, q };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would &lt;/p&gt;

&lt;p&gt;For our first function, we create a file: functions/createQuestion.js  and add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { client, q } = require("../src/lib/fauna");

exports.handler = async (event, context) =&amp;gt; {
  try {
    let { question, answer, options } = JSON.parse(event.body);
    let results = await client.query(
      q.Create(q.Collection("questions"), {data: { question, answer, options },}),
    );
    return {statusCode: 200, body: JSON.stringify({ id: results.ref.id, data: results.data }),};
  } catch (err) {
    return { statusCode: 500, body: JSON.stringify({ error: err.toString() }) };
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For our second function, we create a file: functions/getQuestion.js  and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { client, q } = require("../src/lib/fauna");

exports.handler = async (event, context) =&amp;gt; {
  try {
    let {id} = event.queryStringParameters
    let results = await client.query(q.Get(q.Ref(q.Collection("questions"), id )));
    return { statusCode: 200, body: JSON.stringify({ id: results.ref.id, data: results.data }),};
  } catch (err) {
    return { statusCode: 500, body: JSON.stringify({ error: err.toString() }) };
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For our last function create a functions/provideAnswer.js  and add the following to the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Docs on event and context https://www.netlify.com/docs/functions/#the-handler-method
const { client, q } = require("../src/lib/fauna");

exports.handler = async (event, context) =&amp;gt; {
  try {
    let { question_id, answer, user_id } = JSON.parse(event.body);

    // ensure no missing values
    if (!(question_id &amp;amp;&amp;amp; answer &amp;amp;&amp;amp; user_id)) {
      return {
        statusCode: 500,
        body: JSON.stringify({
          error: "Fields question_id &amp;amp; answer &amp;amp; user_id required ",
        }),
      };
    }

    let results = await client.query(
      q.Get(q.Ref(q.Collection("questions"), question_id)),
    );
    let question = results.data;
    let isCorrect = false;
    if (question.answer === answer) isCorrect = true;
    try {
      let query = await client.query(
        q.Create(q.Collection("answers"), {
          data: {
            question_id,
            user_id,
            isCorrect: isCorrect,
            response: answer,
          },
        }),
      );
      query.data.correct = question.correct_answer;
      if (isCorrect) {
        // update the user's score if correct
        try {
          let score = await client.query(
            q.Get(q.Ref(q.Collection("scores"), process.env.LEADERBOARD_ID)),
          );
          let req = await client.query(
            q.Update(q.Ref(q.Collection("scores"), process.env.LEADERBOARD_ID), {
              data: { [user_id]: (score.data[user_id] ? (score.data.user_id+ 10) : 10) },
            }),
          );
        } catch (error) {
            console.log(error)
            return {
                statusCode: 500, body: JSON.stringify({ error: error.toString() }),};
        }
      }
      return {
        statusCode: 200,
        body: JSON.stringify({ ref: query.ref.id, data: query.data }),
      };
    } catch (error) {
      if (error.message === "instance not unique") {
        return {
          statusCode: 500,
          body: JSON.stringify({ error: "Question is already answered" }),
        };
      }
      return {
        statusCode: 500,
        body: JSON.stringify({ error: error.toString() }),
      };
    }
  } catch (err) {
    return { statusCode: 500, body: JSON.stringify({ error: err.toString() }) };
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ui"&gt;
  &lt;/a&gt;
  UI
&lt;/h3&gt;

&lt;p&gt;Now that we have all our function endpoints working. We can now work on the UI for this application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#realtime-leaderboard"&gt;
  &lt;/a&gt;
  REALTIME LEADERBOARD.
&lt;/h3&gt;

&lt;p&gt;For our real time leaderboard we will utilize Fauna Streaming which &lt;/p&gt;

&lt;p&gt;Create a server-only key to be able to  interact between the frontend&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {Box, Stack, useMediaQuery} from '@chakra-ui/react'
import {useEffect} from 'react'
import {query as q, Client} from 'faunadb'
import rw from 'random-words'


function App() {

  let [isMobile] = useMediaQuery("(max-width:600px)");
  let client = new Client({
    secret: process.env.REACT_APP_FAUNA_CLIENT_SECRET
  })
  let stream
  const startStream = () =&amp;gt; {
    stream = client.stream.document(q.Ref(q.Collection('scores'), REACT_APP_LEADERBOARD_ID))
    .on('snapshot', snapshot =&amp;gt; {
      console.log(snapshot)
    })
    .on('version', version =&amp;gt; {
      console.log(version)
    })
    .on('error', error =&amp;gt; {
      console.log('Error:', error)
      stream.close()
      setTimeout(startStream, 1000)
    })
    .start()
  }

  useEffect(()=&amp;gt;{

    if(! window.localStorage.getItem("user_id")){
      window.localStorage.setItem("user_id", `${rw()}_${Math.floor((Math.random() * 999) + 900)}` )
    }
    startStream()

  })

  return (
    &amp;lt;div className=""&amp;gt;
      &amp;lt;Stack direction={isMobile ? "column" : "row"}&amp;gt;

      &amp;lt;/Stack&amp;gt;

    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deploying-to-netlify"&gt;
  &lt;/a&gt;
  DEPLOYING TO NETLIFY.
&lt;/h3&gt;

&lt;p&gt;When deploying your site, you can easily set your environment variables with the Netlify CLI using the netlify env:set command..&lt;/p&gt;

&lt;p&gt;Deploying to Netlify is relatively easy, all you need to do is to create a git repository. &lt;br&gt;
This is a good practice as you are able to easily version control your entire application.&lt;br&gt;
Next, commit your changes and push to the repository you created.&lt;br&gt;
On the Netlify GUI, go to [New Site from Git]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kZXHmWpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t527t0vyqi0go1rr0nem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kZXHmWpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t527t0vyqi0go1rr0nem.png" alt="Deploy to Netlify" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then select your desired project and Netlify will take care of the building, provisioning and deploying.&lt;br&gt;
Once it's done, you will be provided with a URL to access your application. &lt;br&gt;
Wasn’t that easy?&lt;/p&gt;

</description>
      <category>fauna</category>
      <category>netlify</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The number one recommendation - PSR-1</title>
      <author>Anders Björkland</author>
      <pubDate>Fri, 10 Dec 2021 07:06:27 +0000</pubDate>
      <link>https://dev.to/andersbjorkland/the-number-one-recommendation-psr-1-1j9p</link>
      <guid>https://dev.to/andersbjorkland/the-number-one-recommendation-psr-1-1j9p</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Just the Gist&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
PHP Standard Recommendation 1 (PSR-1) is Basic Coding Standards for PHP. It is a set of coding standards that gives us a recommended way to structure our code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The basics
&lt;/h2&gt;

&lt;p&gt;Yesterday we had a first glance at PHP Standard Recommendations (PSRs). While these are not rules, they may provide just the structure needed to make spaghetti code in to lasagna. Today we see what PSR-1 (Basic Coding Standard) gives us for recommendation.&lt;/p&gt;

&lt;p&gt;First, we use either &lt;code&gt;&amp;lt;?php&lt;/code&gt; or &lt;code&gt;&amp;lt;?=&lt;/code&gt; in our files. This means that we should avoid using &lt;code&gt;&amp;lt;?&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The tag &lt;code&gt;&amp;lt;?&lt;/code&gt; should be avoided since it can cause issues when generating XML documents. If you want to use it though, the setting &lt;code&gt;short_open_tag&lt;/code&gt; in &lt;code&gt;php.ini&lt;/code&gt; controls this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, if we declare a new class, functions or constants in a file, we should avoid it causing side effects external to the file. This means for instance that we should not be updating any ini-settings or echoing out anything and then declare a class.&lt;/p&gt;

&lt;p&gt;When we are on about classes, these should follow an autoloading standard. The current standard is PSR-4, which recommends us to use namespaces which goes hand-in-hand with the file structure. A class &lt;code&gt;HomeController&lt;/code&gt; with a namespace &lt;code&gt;App\Controller&lt;/code&gt; should be placed in folders and a file such as &lt;code&gt;App\Controller\HomeController.php&lt;/code&gt;. Having multiple classes in a file is not recommended.&lt;/p&gt;

&lt;p&gt;Following PSR-1, we get a structure that would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class="c1"&gt;// Path: .\src\App\Controller\HelloController.php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Controller&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloController&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="no"&gt;HELLO_WORLD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HELLO_WORLD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's not specified in PSR-1 is how we capitalize or underscore our variables (non-constants). All this PSR asks us is to be consistent with how we use it, be it &lt;code&gt;$PascalCase&lt;/code&gt;, &lt;code&gt;$camelCase&lt;/code&gt; or &lt;code&gt;$snake_case&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expanding"&gt;
  &lt;/a&gt;
  Expanding
&lt;/h2&gt;

&lt;p&gt;A closely related PSR is PSR-12 (Extended Coding Standard). PSR-12 is a recommendation that adds some additional rules to PSR-1. Among other things, it let's us know where to put our &lt;code&gt;declare&lt;/code&gt; statements when present, to omit &lt;code&gt;?&amp;gt;&lt;/code&gt; when dealing with files containing only PHP code, and how to use the &lt;code&gt;use&lt;/code&gt; statements. If you feel the need to find more structure for your projects, PSR-1 and PSR-12 are good places to start!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-you"&gt;
  &lt;/a&gt;
  What about you?
&lt;/h2&gt;

&lt;p&gt;Do you see any benefits of following Basic Coding Standard? Perhaps you already did, but didn't know it was PSR-1 or PSR-12 that you were following? Do you agree with PSR-1? Should PSR-1 also have given us a recommended way to write our variable-names? Comment below and let us know what you think ✍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PSR-1: Basic Coding Standard - &lt;a href="https://www.php-fig.org/psr/psr-1/"&gt;https://www.php-fig.org/psr/psr-1/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;PSR-12: Extended Coding Standard - &lt;a href="https://www.php-fig.org/psr/psr-12/"&gt;https://www.php-fig.org/psr/psr-12/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>webdev</category>
    </item>
    <item>
      <title>when if statement become AND operator</title>
      <author>es404020</author>
      <pubDate>Fri, 10 Dec 2021 07:05:56 +0000</pubDate>
      <link>https://dev.to/es404020/when-if-statement-become-and-operator-499h</link>
      <guid>https://dev.to/es404020/when-if-statement-become-and-operator-499h</guid>
      <description>&lt;p&gt;I was going through a tutorial recently and I found out this developer kept using &amp;amp;&amp;amp; operator to perform if statement. Take a look.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const status  = true

function logSomething(){

console.log('hello world');

}

=========if way========================


if(status) logSomething();

===================and way ======================

status &amp;amp;&amp;amp; logSomething();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They do the same thing .Thanks for reading &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>angular</category>
      <category>vue</category>
      <category>react</category>
    </item>
    <item>
      <title>Part 2: The Evolution of Data Pipeline Architecture</title>
      <author>RudderStack</author>
      <pubDate>Fri, 10 Dec 2021 06:56:22 +0000</pubDate>
      <link>https://dev.to/rudderstack/part-2-the-evolution-of-data-pipeline-architecture-3748</link>
      <guid>https://dev.to/rudderstack/part-2-the-evolution-of-data-pipeline-architecture-3748</guid>
      <description>&lt;p&gt;In &lt;a href="https://rudderstack.com/blog/part-1-the-evolution-of-data-pipeline-architecture/"&gt;Part 1&lt;/a&gt; of this series, we described a high-level architecture for building data pipelines that are commonly used in the industry today. In this post, we will go through a number of changes that have happened, both in the market and in terms of the technologies that are available. Considering these changes, we will propose a new architecture that addresses the issues we mentioned in part 1.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-new-paradigm"&gt;
  &lt;/a&gt;
  A New Paradigm
&lt;/h2&gt;

&lt;p&gt;Certain things occurred in the past five years that have created an environment where data pipelines can be re-invented.&lt;/p&gt;

&lt;p&gt;There are three main changes that we are interested in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-separation-of-computing-and-storage"&gt;
  &lt;/a&gt;
  The Separation of Computing and Storage
&lt;/h2&gt;

&lt;p&gt;I'm not sure if &lt;a href="https://www.snowflake.com/"&gt;Snowflake&lt;/a&gt; was the first to come up with this paradigm, but they definitely are the company that managed to make it mainstream and convince the market of its value.&lt;/p&gt;

&lt;p&gt;By separating computing from storage, some amazing things happened.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  We can scale storage almost indefinitely. We do not worry anymore about the size of our cluster and the downtime of resizing. Also, the cost for storing our data is associated only with storing and is thus much lower.&lt;/li&gt;
&lt;li&gt;  We can also scale our processing while we access only the data we need. In this way, processing also scales while costs remain low.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The impact of the above is tremendous on how we deal with data. We do not have to worry about the data we store anymore, and we have the flexibility to perform complex transformations on huge amounts of historical data when --- and only when --- we need it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-transformation-of-etl-to-elt"&gt;
  &lt;/a&gt;
  The Transformation of ETL to EL(T)
&lt;/h2&gt;

&lt;p&gt;The separation of computing and storage in data warehouses had, as a consequence, some changes to how ETL (extract, transform, load) is perceived.&lt;/p&gt;

&lt;p&gt;Smart people quickly identified that now we don't have to implement complicated ETL pipelines, where heavy transformations are applied to the data. Instead, we can simplify a complex engineering mechanism by removing the transformation and offloading it to the data warehouse.&lt;/p&gt;

&lt;p&gt;Why is this important?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  ETL, although it might sound like copying data around, is not as simple of an engineering problem as it sounds. Especially if you want to do it at scale and in distributed environments. By removing processing from ETL, we can focus on building super resilient and consistent data pipelines and solve that problem once and for all.&lt;/li&gt;
&lt;li&gt;  Now it's possible to create a single source of truth of our data and perform as many and as destructive transformations as we want without losing the original data. We can always go back and change everything again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have the original data and the resources to do it inexpensively and at scale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-platforms-are-more-expressive-than-ever"&gt;
  &lt;/a&gt;
  Data Platforms are More Expressive Than Ever
&lt;/h2&gt;

&lt;p&gt;I'm sure you have heard of &lt;a href="https://www.getdbt.com/"&gt;DBT&lt;/a&gt; (data build tool) and how data engineers and analysts love it. What about &lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;These tools are only a few of a new set of tools that data engineers, analysts, and data scientists have access to today.&lt;/p&gt;

&lt;p&gt;These tools are also a testament to what data platforms are becoming. Data platforms started with simple SQL query engines. That's not the case anymore. They have matured and become complex processing engines capable of deploying and executing extremely complex processing logic by conforming to all the best practices that engineering has developed for delivering products and practices like versioning and testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-all-the-pieces-of-the-puzzle-together"&gt;
  &lt;/a&gt;
  Putting All the Pieces of the Puzzle Together
&lt;/h2&gt;

&lt;p&gt;All the above points are signaling that it's time to rethink how we develop and implement data pipelines and, most importantly, how we want to manage the state that data pipelines are responsible for replicating.&lt;/p&gt;

&lt;p&gt;The paradigm of keeping only the latest state of data should be abandoned, and we should instead follow something closer to a pattern known in software engineering as "Event Sourcing."&lt;/p&gt;

&lt;p&gt;By doing this, instead of replicating the state between the source system and the data warehouse or data lake, the pipeline stores a sequence or stream of state-changing events.&lt;/p&gt;

&lt;p&gt;This is not a new concept in data warehousing. In data warehouse architectures, it was always understood that keeping track of how data changes are important. People who have experience in data warehouses will be aware of the term &lt;a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/db/10g/r2/owb/owb10gr2_gs/owb/lesson3/slowlychangingdimensions.htm/"&gt;Slowly Changing Dimension&lt;/a&gt; (SCD)&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are different SCD strategies that have been invented. What we were describing earlier as the first architecture of Data Pipelines is actually an example of a Type 1 SCD strategy. This particular strategy dictates that old data is overwritten by the new data.&lt;/p&gt;

&lt;p&gt;If you ever had to work with Salesforce, you might be aware of a companion object called "History" that every Salesforce object comes with. This is another example of SCD in action. This time it's type 4 SCD that we see in practice. We keep the main object where we overwrite old data with new, and at the same time, we keep a history table with all the changes of records. In Salesforce, as in most cases, there's also a retention period for the historical data, after which we delete older data and keep only the new data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#small-changes-with-big-impact"&gt;
  &lt;/a&gt;
  Small Changes with Big Impact
&lt;/h2&gt;

&lt;p&gt;The architecture of data pipelines doesn't have to change a lot, but these small changes simplify their logic and have a big impact on how we work with the data.&lt;/p&gt;

&lt;p&gt;All we have to do is to remove the logic the data pipelines had to keep track of --- what is on System B already --- and update it with any updates that have been observed on System A.&lt;/p&gt;

&lt;p&gt;In this way, the pipelines become even simpler, and as we saw with ETL to ELT, we can focus even more on their resilience and consistency. This approach can also reduce latency a lot, as the complicated logic of deduplicating the data does not have to exist anymore.&lt;/p&gt;

&lt;p&gt;At the same time, the separation of computing and processing on the destination storage systems allows us to keep an indefinite sequence of changes that our data has gone through. If we are smart with how we process the data, we will probably never have to delete old data.&lt;/p&gt;

&lt;p&gt;On top of this sequence of state-changing events, we can use tools like DBT and Materialize to reconstruct the current final state of our data or transform our data completely and build data applications on top of it.&lt;/p&gt;

&lt;p&gt;If we want to implement different SDC strategies, now we can do it. We can even change the strategies we implement if we want to in the future without losing any data.&lt;/p&gt;

&lt;p&gt;We don't have to deal with two different data models anymore. Instead, now everything can be handled as a stream of events. We can use processing systems to always reconstruct the final state and have it always available, but at the same time, we can use streaming processing frameworks to add even more use cases that are supported by our data infrastructure.&lt;/p&gt;

&lt;p&gt;Most importantly, now we have access to all the data we need at any point in time, and we can support all the possible use cases we have. Our data analysts and data scientists will always be happy, and we can support them at scale and with predictable costs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;We can apply small changes to our software architectures that can have a tremendous impact on what we can do and how we can do it.&lt;/p&gt;

&lt;p&gt;This is also the case with the Data Pipeline as one of the pillars of modern data infrastructure. Just changing how we replicate the state from one system to the other, can have an amazing impact on the performance and the capabilities of the systems we design.&lt;/p&gt;

&lt;p&gt;Of course, for this to happen, huge changes had to happen in the industry. As we saw, we wouldn't be able to rethink our architecture so easily without some major changes in the way we store and process data.&lt;/p&gt;

&lt;p&gt;Not everything is solved, though. The complexity of the sources of data we have to deal with is increasing, and although we have solutions for some of them (e.g., CDC for databases), how we can interact effectively with other systems, including cloud applications, is still a work in progress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app. &lt;a href="https://app.rudderlabs.com/signup?type=freetrial/"&gt;Get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>customerdata</category>
      <category>cdp</category>
      <category>datawarehouse</category>
      <category>etl</category>
    </item>
    <item>
      <title>What Is A Customer Data Pipeline?</title>
      <author>RudderStack</author>
      <pubDate>Fri, 10 Dec 2021 06:52:00 +0000</pubDate>
      <link>https://dev.to/rudderstack/what-is-a-customer-data-pipeline-50h9</link>
      <guid>https://dev.to/rudderstack/what-is-a-customer-data-pipeline-50h9</guid>
      <description>&lt;p&gt;You have probably heard about a &lt;a href="https://rudderstack.com/blog/build-or-buy-lessons-from-ten-years-building-customer-data-pipelines"&gt;customer data pipeline&lt;/a&gt; before but have always wondered what the concept includes or how it works. This post helps you take a closer look at what a Customer Data Pipeline is, its infrastructure, and its functionalities.&lt;/p&gt;

&lt;p&gt;Simply put, a data pipeline works as a processing engine. It directly sends your information by using transformative filters, applications, and APIs.&lt;/p&gt;

&lt;p&gt;Think of a data pipeline as a public transportation, with you deciding where your information jumps aboard and when it leaves.&lt;/p&gt;

&lt;p&gt;Data pipeline processes are a mixture of various information sources. These apply transformation logic, which is often split into several sequential portions. This service sends the information to a load destination, such as a data warehouse.&lt;/p&gt;

&lt;p&gt;With the beginning of digital marketing and the constant development of technology, data pipelines have developed as saviors for conversation, collection, migration, and complex information visualization, especially within the IT sector. Even so, only 35% of marketers believe their customer data pipeline is efficient and fruitful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-look-for-in-a-customer-data-pipeline"&gt;
  &lt;/a&gt;
  What To Look For In A Customer Data Pipeline?
&lt;/h2&gt;

&lt;p&gt;There are various factors to consider when looking for the &lt;a href="https://rudderstack.com/blog/part-1-the-evolution-of-data-pipeline-architecture"&gt;perfect data pipeline solution&lt;/a&gt; for your marketing strategy. Always searching for a tool that can extract, convert and load information from hundreds of marketing platforms into a final destination, like a data warehouse or BI tool.&lt;/p&gt;

&lt;p&gt;The sturdy nature of data pipelines provides flexible schemes from fixed and real-time sources. In the long run, this flexibility refers to data pipelines' capability to divide data into small stages.&lt;/p&gt;

&lt;p&gt;The connection between the range of information and its impact has become crucial for big business worldwide. Understanding this solid relation helps data scientists resolve problems with inactivity, unidentified sources, restricted access, and data duplication issues.&lt;/p&gt;

&lt;p&gt;Nowadays, data pipelines match the system network. So, if the data pipeline is more comprehensive, the network system applicability will perform far better. It will also help combine hybrid applications and cloud services for a seamless performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rise-of-data-pipelines"&gt;
  &lt;/a&gt;
  The Rise Of Data Pipelines
&lt;/h2&gt;

&lt;p&gt;Data pipelines have started to integrate various tools and ingest many large XML and CSV documents. The processing of information in real-time was maybe the culmination of customer data pipelines and their effects on a business. That culmination also enabled the need of the hour to transfer sizable portions of information from one point to another without changing the layout. Because of this, companies have found brand-new freedom to extract, move, segment, or transfer information over a short period.&lt;/p&gt;

&lt;p&gt;During the past few years, the objectivity of how companies work has changed a lot. The focus is not on gaining revenue margins but has to do with the way customer data scientists can present potential solutions that link with marketers. No matter the changes, they always have to be transformative, suitable for tracking, and flexible for changing upcoming dynamics. Data pipelines are much more than using flat documents, folders, and databases to deal with services on a platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-pipeline-infrastructure"&gt;
  &lt;/a&gt;
  Data Pipeline Infrastructure
&lt;/h2&gt;

&lt;p&gt;A data pipeline infrastructure includes matching, organizing, tracking, or redirecting vast amounts of data to acquire relevant information. That said, there are quite a few notable yet inappropriate access points for fresh data.&lt;/p&gt;

&lt;p&gt;When done right, the process uses the unique pipeline infrastructure that customizes, combines, visualizes, automates, converts, and moves data from various resources, thus achieving set aims.&lt;/p&gt;

&lt;p&gt;The architectural structure of a data pipeline requires optimal functionality based on specific business intelligence and analytics. Data functionality means getting insights into clients' behavior, enhancing the automation and robotic process, and gathering patterns of clients' and users' experiences. You can learn more about real-time information and trends via obtaining specified analytics and business intelligence via vast data chunks.&lt;/p&gt;

&lt;p&gt;It is always recommended that one forms skilled data engineering teams. By recruiting expert data engineers, you will cover various major stages and tackle possible issues, such as troubleshooting complications, implementing specific data, and recognizing complex tables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-functionality-of-a-data-pipeline"&gt;
  &lt;/a&gt;
  The Functionality Of A Data Pipeline
&lt;/h2&gt;

&lt;p&gt;The functionality of a data pipeline serves to bring vast information together. Technically, it uses a method of accessing, storing, and spreading gathered information, depending on its structure.&lt;/p&gt;

&lt;p&gt;Reducing the data movement, for example, is possible through an abstract layer.&lt;/p&gt;

&lt;p&gt;You can design an abstract layer for various file systems using AWS and storage mechanisms.&lt;/p&gt;

&lt;p&gt;The usefulness of a data pipeline doesn't have to rely on the merchant's database system. Data pipeline has to collect complete information before storing a device, thus protecting the data system's future and viability.&lt;/p&gt;

&lt;p&gt;Moreover, data pipeline usage should provide business analytics instead of creating the network entirely on aesthetics. A streaming structure, for instance, is pretty tough to manage and requires strong business skills and professional experience in managing compound engineering responsibilities.&lt;/p&gt;

&lt;p&gt;To design customer data pipelines, you can use a regular container service.&lt;/p&gt;

&lt;p&gt;The most common mistake people make during the designing of functional response is distributing operations which then perform unevenly. The general idea is to adjust the CTAS method to set various operations and file parameters.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign Up For Free And Start Sending Data
&lt;/h3&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app.&lt;a href="https://app.rudderstack.com/signup?type=freetrial"&gt;Get Started&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cdp</category>
      <category>customerdata</category>
      <category>etl</category>
      <category>datawarehouse</category>
    </item>
    <item>
      <title>AI Mystic Release</title>
      <author>david050708</author>
      <pubDate>Fri, 10 Dec 2021 06:38:23 +0000</pubDate>
      <link>https://dev.to/david050708/ai-mystic-release-262b</link>
      <guid>https://dev.to/david050708/ai-mystic-release-262b</guid>
      <description>&lt;p&gt;Hey there Devs,&lt;br&gt;
It's me Dave again....&lt;br&gt;
We have created a New AI called "AI Mystic" some features are not available but...It will be available soon.&lt;br&gt;
I prefer this app to run in the desktop or laptop cause in the server some modules aren't working, but if you want you can try it in the Web. This AI will soon be integrated with the &lt;a href="https://dev.to/david050708/daveos-free-user-friendly-1kam"&gt;DaveWebOS&lt;/a&gt; soon&lt;/p&gt;

&lt;p&gt;Live Link: &lt;a href="https://app.codingrooms.com/w/QfGmy2bAiuK7"&gt;https://app.codingrooms.com/w/QfGmy2bAiuK7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank You&lt;/p&gt;

</description>
      <category>ai</category>
      <category>python</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
