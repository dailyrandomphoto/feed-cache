<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Working with Files in Linux 💻</title>
      <author>Seb </author>
      <pubDate>Sun, 17 Oct 2021 00:06:23 +0000</pubDate>
      <link>https://dev.to/linuxseb/working-with-files-in-linux-51af</link>
      <guid>https://dev.to/linuxseb/working-with-files-in-linux-51af</guid>
      <description>&lt;p&gt;Hey Dev community! 😆&lt;/p&gt;

&lt;p&gt;After weeks of exams and dealing with imposter syndrome, I am back with another short article on 'file commands' in Linux. These are pretty useful so take a look. 🤠&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-cd"&gt;
  &lt;/a&gt;
  1. cd 💻
&lt;/h4&gt;

&lt;p&gt;The 'cd' command moves you into any directory you want. For example, if I have files located in the 'Documents' directory, this is the command I would run:&lt;/p&gt;

&lt;p&gt;cd Documents&lt;/p&gt;

&lt;p&gt;and this would move me to that directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEv_B8Kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98r18ml9og4ru73mml07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEv_B8Kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98r18ml9og4ru73mml07.png" alt="cd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-ls"&gt;
  &lt;/a&gt;
  2. ls 💻
&lt;/h4&gt;

&lt;p&gt;The 'ls' command lists everything that is in that directory. To list everything in the directory, run this command:&lt;/p&gt;

&lt;p&gt;ls -l&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jzEMI5hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7340cz89e2545iodjlq4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jzEMI5hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7340cz89e2545iodjlq4.png" alt="ls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-cat"&gt;
  &lt;/a&gt;
  3. cat 💻
&lt;/h4&gt;

&lt;p&gt;the 'cat' commands displays what is inside a file. Simply run this command:&lt;/p&gt;

&lt;p&gt;cat (name of file)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UvN-TJz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3v1oagw8sn0o4c6pp7jh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UvN-TJz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3v1oagw8sn0o4c6pp7jh.png" alt="cat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cat command also can do other things. 👇&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cat-gt-filename"&gt;
  &lt;/a&gt;
  🎯 cat &amp;gt; filename
&lt;/h4&gt;

&lt;p&gt;Using this command, you can also create a file.&lt;/p&gt;

&lt;p&gt;What I did below was I created the file, typed out what I needed to, then viewed the file which displayed the text I had previously written.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R7MV5Qb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvti4qpxtwnnut56qb0y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R7MV5Qb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvti4qpxtwnnut56qb0y.png" alt="cat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cat-testfile1-testfile2gttestfile4"&gt;
  &lt;/a&gt;
  🎯 cat testfile1 testfile2&amp;gt;testfile4
&lt;/h4&gt;

&lt;p&gt;Using this command, you can also create 1 new file by putting two together by doing this command:&lt;/p&gt;

&lt;p&gt;What I did was I used test1, and test2, and merged that into a new file called test4.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6gD1c3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5cosys5retwn31zd9xx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6gD1c3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5cosys5retwn31zd9xx.png" alt="cat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-cp"&gt;
  &lt;/a&gt;
  4. cp 💻
&lt;/h4&gt;

&lt;p&gt;The 'cp' commands copies files from one directory to another&lt;/p&gt;

&lt;p&gt;What I did below was I copied the Goku image from the pictures directory to the example directory, used 'cd' to move into the example directory, and did ls -l to view if the picture successfully copied.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--anOQ7ocC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6oaejal36x4cq84linr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--anOQ7ocC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6oaejal36x4cq84linr.png" alt="cp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-mv"&gt;
  &lt;/a&gt;
  5. mv 💻
&lt;/h4&gt;

&lt;p&gt;The 'mv' command is typically for moving files but it can also be used to rename files as well.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mv-to-move"&gt;
  &lt;/a&gt;
  🎯 mv (to move)
&lt;/h4&gt;

&lt;p&gt;To move a file into a directory, run this command:&lt;/p&gt;

&lt;p&gt;mv (filename) (directory)&lt;/p&gt;

&lt;p&gt;What I did below was I moved test1 from Documents to example1, I went to example1, and then listed the files to confirm if it successfully moved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dq_q9rst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdvx9gicfyd27abmdrjx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dq_q9rst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdvx9gicfyd27abmdrjx.png" alt="mv"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mv-to-rename"&gt;
  &lt;/a&gt;
  🎯 mv (to rename)
&lt;/h4&gt;

&lt;p&gt;To rename a file, run this command:&lt;/p&gt;

&lt;p&gt;mv (filename) (newfilename)&lt;/p&gt;

&lt;p&gt;Staying in the example1 directory, I changed the name to 'newname' and then listed the files to confirm it's been changed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BmGU2Hi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w16tyq06pm42a4tkwtnr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BmGU2Hi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w16tyq06pm42a4tkwtnr.png" alt="mv"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-mdkir"&gt;
  &lt;/a&gt;
  6. mdkir 💻
&lt;/h4&gt;

&lt;p&gt;The 'mkdir' command is what you will use almost daily. This command is used to make directories.&lt;/p&gt;

&lt;p&gt;💻&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-grep"&gt;
  &lt;/a&gt;
  7. grep 💻
&lt;/h4&gt;

&lt;p&gt;'grep' is used to search for certain words in a text. To do this, run the command&lt;/p&gt;

&lt;p&gt;grep (word) (file name)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FGoglcHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nx8oaoc81in6ypuojz9s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FGoglcHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nx8oaoc81in6ypuojz9s.png" alt="grep"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-touch"&gt;
  &lt;/a&gt;
  8. touch 💻
&lt;/h4&gt;

&lt;p&gt;'touch' is another command you can use to create a file. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_KxSoEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fptxz5dzov09zies9cwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_KxSoEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fptxz5dzov09zies9cwn.png" alt="touch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-rm"&gt;
  &lt;/a&gt;
  9. rm
&lt;/h4&gt;

&lt;p&gt;'rm' is used to delete directories or anything within them. Always be careful with this command because there is no going back once you remove something. To delete, run this command:&lt;/p&gt;

&lt;p&gt;rm -r (name of directory or file)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dDtV89QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsk9goi5jyhvamfkf6b3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dDtV89QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsk9goi5jyhvamfkf6b3.png" alt="rm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-head"&gt;
  &lt;/a&gt;
  10. head
&lt;/h4&gt;

&lt;p&gt;'head' is used to view the first lines of a text file. You can change how many lines you want to view as well. &lt;/p&gt;

&lt;p&gt;head -n (# of lines) (filename)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#and-that-is-it-for-todays-article"&gt;
  &lt;/a&gt;
  and that is it for today's article
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sjwGc_Wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhqkdyakxcmtrf527ouf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sjwGc_Wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhqkdyakxcmtrf527ouf.gif" alt="yayme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading it 🥳 For future Linux content, give me a follow here or follow my twitter, &lt;a class="mentioned-user" href="https://dev.to/linuxseb"&gt;@linuxseb&lt;/a&gt;
&lt;/p&gt;

</description>
      <category>linux</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to automatically add dark mode to your site in 3 lines</title>
      <author>𝐍𝐚𝐭𝐚𝐥𝐢𝐞 𝐝𝐞 𝐖𝐞𝐞𝐫𝐝</author>
      <pubDate>Sat, 16 Oct 2021 23:32:59 +0000</pubDate>
      <link>https://dev.to/nataliedeweerd/how-to-automatically-add-dark-mode-to-your-site-in-3-lines-j40</link>
      <guid>https://dev.to/nataliedeweerd/how-to-automatically-add-dark-mode-to-your-site-in-3-lines-j40</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result won't be perfect (in fact, it'll probably look downright awful), but it gives you a great starting point to then pull out individual colours and rebuild the CSS how you want!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;@media (prefers-color-scheme:dark){ ... }&lt;/code&gt; is all you need to automatically trigger dark mode styling on your site if the user has set their browser to dark mode.&lt;/p&gt;

&lt;p&gt;This is how I created the new dark mode on my blog. Started with the &lt;code&gt;filter:invert(1);&lt;/code&gt; trick, picked out the colours manually in the inspector that worked, and slowly tweaked the rest. You can see the final result here: &lt;a href="https://flipsphere.net/"&gt;https://flipsphere.net/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>darkmode</category>
      <category>quicktips</category>
    </item>
    <item>
      <title>How to use PiHole and Block ALL ads in your network</title>
      <author>Raissa Correia</author>
      <pubDate>Sat, 16 Oct 2021 23:06:11 +0000</pubDate>
      <link>https://dev.to/raissaccorreia/how-to-use-pihole-and-block-all-ads-in-your-network-m1c</link>
      <guid>https://dev.to/raissaccorreia/how-to-use-pihole-and-block-all-ads-in-your-network-m1c</guid>
      <description>&lt;p&gt;I need to clarify that some ads can't be blocked for example: Youtube, Instagram and TikTok, because the ads' source is the same of the content, because this is a DNS filter. &lt;br&gt;
However this is useful to take down annoying ads from free apps on mobile, because on PC it's easier and better to use an ad block extension.&lt;/p&gt;

&lt;p&gt;I also need to tell that there are some collateral effects, the main one is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you're going to buy something all links in google shopping is a google ad, so they can't be loaded you have to disable piHole in the manager address "&lt;a href="http://raspberry_pi_ip_address/admin"&gt;http://raspberry_pi_ip_address/admin&lt;/a&gt;"&lt;/li&gt;
&lt;li&gt;Several web pages have problems to load you click the link and Network Error, reaload, DNS Probe Error, reload, loads like normal&lt;/li&gt;
&lt;li&gt;I have a smart TV by Samsung, like I do, and if you disconnect from Wi-fi, you have to disable to connect your TV again&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All disclaimers aside, let's implement to learn a bit about network!&lt;/p&gt;

&lt;p&gt;1) First set up your raspberry pi, with a linux distro installed in the SD Card.&lt;/p&gt;

&lt;p&gt;Discover the raspberry IP address, I used this command:&lt;br&gt;
sudo nmap -sP $(ip addr | grep "inet " | awk '{ print $2}' | grep -v 127.0.0)&lt;/p&gt;

&lt;p&gt;Keep it updated&lt;br&gt;
&lt;a href="https://www.makeuseof.com/tag/raspberry-pi-update-raspbian-os/"&gt;https://www.makeuseof.com/tag/raspberry-pi-update-raspbian-os/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Then install with a single command!&lt;br&gt;
curl -sSL &lt;a href="https://install.pi-hole.net"&gt;https://install.pi-hole.net&lt;/a&gt; | bash&lt;/p&gt;

&lt;p&gt;If you had any problems you can check it out here:&lt;br&gt;
&lt;a href="https://github.com/pi-hole/pi-hole/#one-step-automated-install"&gt;https://github.com/pi-hole/pi-hole/#one-step-automated-install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After install you'll see this in your terminal, save in a txt file.&lt;/p&gt;

&lt;p&gt;Configure your devices to use the Pi-hole as their DNS server&lt;br&gt;&lt;br&gt;
│ using:&lt;br&gt;&lt;br&gt;
│&lt;br&gt;&lt;br&gt;
│ IPv4:        IPv4 address of your raspberry pi&lt;br&gt;&lt;br&gt;
│ IPv6:        IPv6 address of your raspberry pi&lt;br&gt;&lt;br&gt;
│&lt;br&gt;&lt;br&gt;
│ If you have not done so already, the above IP should be set to&lt;br&gt;&lt;br&gt;
│ static.&lt;br&gt;&lt;br&gt;
│&lt;br&gt;&lt;br&gt;
│ The install log is in /etc/pihole.&lt;br&gt;&lt;br&gt;
│&lt;br&gt;&lt;br&gt;
│ View the web interface at &lt;a href="http://pi.hole/admin"&gt;http://pi.hole/admin&lt;/a&gt; or&lt;br&gt;&lt;br&gt;
│ &lt;a href="http://ip_address/admin"&gt;http://ip_address/admin&lt;/a&gt; (for me only this works)&lt;/p&gt;

&lt;p&gt;3) Then the most complicated part, go to your router configuration and paste these 2 ip addresses in the right place!&lt;/p&gt;

&lt;p&gt;For me, I'm using Claro in Brazil, that uses the Arris router system.&lt;br&gt;
Gateway &amp;gt; Connection &amp;gt; Local IP Network &amp;gt; IPv4&lt;br&gt;
You'll see the option: LAN's DNS, DNS da LAN(in portuguese)&lt;br&gt;
Turn it static!&lt;br&gt;
Paste the raspberry IPV4 in Primary DNS Server, leave the Secondary in blank&lt;br&gt;
To avoid issues I didn't used the IPv6&lt;br&gt;
Disconnect the devices from your network, and that's it! It's done!&lt;/p&gt;

&lt;p&gt;4) If you want to block your ads everywhere, you can set up your VPN DNS server as the raspberry IP, the same as you did with your router&lt;/p&gt;

&lt;p&gt;And the sub Reddit if you have any advanced questions:&lt;br&gt;
&lt;a href="https://www.reddit.com/r/pihole/"&gt;https://www.reddit.com/r/pihole/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</description>
      <category>linux</category>
      <category>network</category>
      <category>raspberrypi</category>
      <category>adblock</category>
    </item>
    <item>
      <title>Advanced C++: Arena Allocation</title>
      <author>Ashish Bailkeri</author>
      <pubDate>Sat, 16 Oct 2021 22:33:56 +0000</pubDate>
      <link>https://dev.to/aboss123/advanced-c-arena-allocation-3580</link>
      <guid>https://dev.to/aboss123/advanced-c-arena-allocation-3580</guid>
      <description>&lt;p&gt;Hi Everyone, I'm going to starting a mini series of articles about Advanced C++ Programming concepts that are used in a lot of real projects. Today's topic is: &lt;strong&gt;Arena Allocation&lt;/strong&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Code snippets and images posted in this article are under the &lt;strong&gt;MIT License&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#memory-management-is-a-pain-isnt-it"&gt;
  &lt;/a&gt;
  Memory management is a pain, isn't it?
&lt;/h2&gt;

&lt;p&gt;When working in garbage collected languages such as Java or Go, you may be mostly free from dealing closely with memory but in languages like C and C++, memory usually causes a lot of problems, especially since you have a lot of power to manipulate it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-the-best-allocator"&gt;
  &lt;/a&gt;
  So what's the best allocator?
&lt;/h2&gt;

&lt;p&gt;There is no number 1 best allocator in every scenario, rather, if you wanted the best allocator, the programmer is the best allocator because they know exactly what the program will do and thus know the best way to allocate memory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arena-allocation"&gt;
  &lt;/a&gt;
  Arena Allocation
&lt;/h2&gt;

&lt;p&gt;Instead of allocating pointers using &lt;code&gt;malloc&lt;/code&gt; or &lt;code&gt;new&lt;/code&gt;, we can create our own allocator known as the arena allocator.&lt;/p&gt;

&lt;p&gt;This kind of allocation involves allocating a large chunk of memory before the logic of your program executes, for example, 20 GiB of memory. Wait, hold up, this sound completely unreasonable right? Yes, it is, but the operating system knows this too, so it allows &lt;a href="https://en.wikipedia.org/wiki/Memory_overcommitment"&gt;overcommitting memory&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linux-overcommit"&gt;
  &lt;/a&gt;
  Linux Overcommit
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dGE_Aa34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbefqnlz91dk2f1bhi4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dGE_Aa34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbefqnlz91dk2f1bhi4j.png" alt="Linux memory overcommit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mac-overcommit"&gt;
  &lt;/a&gt;
  Mac Overcommit
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Vg4UMhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3isi8dmj4nher5o3ndh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Vg4UMhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3isi8dmj4nher5o3ndh.png" alt="Mac memory overcommit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#windows-overcommit"&gt;
  &lt;/a&gt;
  Windows Overcommit
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Windows doesn't have the same ability to overcommit memory, rather large amounts of memory can be reserved and then requested&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v6vFIQP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc0omxuvgjabk2c4tjyk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v6vFIQP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc0omxuvgjabk2c4tjyk.png" alt="Windows memory reserve"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you have your large amount memory allocated, what do you do with it?&lt;br&gt;
Generally the block of memory is separated into chunks, and parts of the program may be assigned dedicated amounts of memory. In certain approaches (simpler ones), objects are allocated linearly from the block of memory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-arena-allocation"&gt;
  &lt;/a&gt;
  When to use arena allocation
&lt;/h3&gt;

&lt;p&gt;Each specific case cannot be listed as it's different for each program but here are some reasons I use it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Program run-time is short and I want fast allocation&lt;/li&gt;
&lt;li&gt;Create an optimized allocator that saves on performance and flexibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-an-allocator"&gt;
  &lt;/a&gt;
  Create an allocator
&lt;/h3&gt;

&lt;p&gt;Here is the way I set up my arena allocator for my language &lt;a href="https://github.com/The-NextGen-Project/jet/blob/main/import/nextgen/allocator.h#L102-L140"&gt;Jet&lt;/a&gt;,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--voJ6aSYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gu1qrz4qvmv0vood1r1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--voJ6aSYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gu1qrz4qvmv0vood1r1.png" alt="Allocator Data Structure"&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The way this is setup is pretty generic, it allows me to create multiple allocators for different parts of my program, which is general pretty common when using arena allocation. For example,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part A of Program &lt;em&gt;5 GiB&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Part B of Program &lt;em&gt;10 GiB&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Part C of Program &lt;em&gt;5 GiB&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is how the large pool of memory can be distributed and is useful if you know which part allocates more memory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Arena allocation is just another tool in the box that will help you advance your knowledge of low-level programming in C++. Understanding allocators behind the scenes will help you in general for any kind of endeavor.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>algorithms</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How To Prevent Theme Colour From Flickering in Svelte Or SvelteKit</title>
      <author>Lucretius Biah</author>
      <pubDate>Sat, 16 Oct 2021 21:55:36 +0000</pubDate>
      <link>https://dev.to/biah/how-to-prevent-theme-colour-from-flickering-in-svelte-or-sveltekit-20cm</link>
      <guid>https://dev.to/biah/how-to-prevent-theme-colour-from-flickering-in-svelte-or-sveltekit-20cm</guid>
      <description>&lt;p&gt;
    Ever since I started using Svelte, my theme colours has always been flickering on page load. Finally I found a workaround
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;At first, I was changing my website's theme colour inside the &lt;code&gt;onMount&lt;/code&gt; function but the theme colours were always flickering. The reason was that, the body loads before the &lt;code&gt;onMount&lt;/code&gt; function sets the theme colour.&lt;br&gt;
Here's a gif showing the problem&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zEgvPtII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://kudadam.sirv.com/blog/prevent-theme-colour-flickering-svelte/flickering.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zEgvPtII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://kudadam.sirv.com/blog/prevent-theme-colour-flickering-svelte/flickering.gif" alt="How the screen was flickering before I found a solution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So as you can see, when the page is reloaded, the light theme is first shown, then after the document has finished loading, the &lt;code&gt;onMount&lt;/code&gt; will then set the theme colour&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;The only probable solution is to set the theme colour before the body has even loaded. How do we do that❓, we insert a script tag inside the head element and this code will run before the body is loaded. That's the best way we can prevent the flickering of colours.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;Okay, so you can write this code in the component in which you use to toggle in-between the themes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svelte:head&amp;gt;
  &amp;lt;script&amp;gt;
    if (document){
      let mode = localStorage.theme || "light";
      if (mode === 'dark' || (window.matchMedia('(prefers-color-scheme: dark)').matches)){
        document.documentElement.classList.add("dark");
        localStorage.theme = "dark";
      }
      else {
        document.documentElement.classList.remove("dark");
        localStorage.theme = "light";
      }
    }
  &amp;lt;/script&amp;gt;
&amp;lt;/svelte:head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;p&gt;In order to access the head element, we used the &lt;code&gt;&amp;lt;svelte:head&amp;gt;&lt;/code&gt; component. Then we created the script tag just as we would on our normal HTML pages. The next statements are the important ones, the reason why we used &lt;code&gt;if (document)&lt;/code&gt; is that, this code first gets evaluated on the server before being rendered on the client, so if you try to access &lt;code&gt;document&lt;/code&gt; on the server, it will pop up an error.&lt;br&gt;
I know SvelteKit provides the &lt;code&gt;{ browser }&lt;/code&gt; constant through the &lt;code&gt;$app/env&lt;/code&gt; module but mind you, this is not available in the custom script tag we made, you will need to use your own workaround and that's why we are using &lt;code&gt;document&lt;/code&gt; to check.&lt;br&gt;
Then on the next line, we try to retrieve the theme from the &lt;code&gt;localStorage&lt;/code&gt;, if it's not set, it defaults to "light" theme;&lt;br&gt;
Then the next steps are the addition of classes and setting of the theme in the &lt;code&gt;localStorage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now look at how the page loads without flickering&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E0W33Vn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://kudadam.sirv.com/blog/prevent-theme-colour-flickering-svelte/non_flickering.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E0W33Vn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://kudadam.sirv.com/blog/prevent-theme-colour-flickering-svelte/non_flickering.gif" alt="Now the page loads without flickering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding!😄&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>svelte</category>
      <category>css</category>
    </item>
    <item>
      <title>12 VS Code Shortcuts To Code Faster!</title>
      <author>Daniela Lima</author>
      <pubDate>Sat, 16 Oct 2021 21:50:38 +0000</pubDate>
      <link>https://dev.to/mrslima/12-vs-code-shortcuts-to-code-faster-55m5</link>
      <guid>https://dev.to/mrslima/12-vs-code-shortcuts-to-code-faster-55m5</guid>
      <description>&lt;p&gt;Some of these tips I took from VS Code documentation. I recommend you to take a look. &lt;a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks"&gt;📃VS Code docs.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-quick-file-open-raw-ctrl-p-endraw-"&gt;
  &lt;/a&gt;
  1. Quick file open: &lt;code&gt;Ctrl + P&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gMm-l9O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfzbx8ovn6m3qeav15b4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gMm-l9O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfzbx8ovn6m3qeav15b4.gif" alt="QuickFileOpenPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-show-terminal-raw-ctrl-backtick-endraw-"&gt;
  &lt;/a&gt;
  2. Show terminal: &lt;code&gt;Ctrl + backtick&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---iOqx5KX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxh7t1gp210hqudnbubk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---iOqx5KX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxh7t1gp210hqudnbubk.png" alt="ShowTerminalPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-zen-mode-raw-ctrl-k-then-z-endraw-"&gt;
  &lt;/a&gt;
  3. Zen mode: &lt;code&gt;Ctrl + K, then Z&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dqaVeybP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsw29uf09ubedaqfohgz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dqaVeybP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsw29uf09ubedaqfohgz.gif" alt="ZenMondePIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-open-new-editor-raw-ctrl-endraw-"&gt;
  &lt;/a&gt;
  4. Open new editor: &lt;code&gt;Ctrl + \&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbJSkAZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z36bcwrvpm02zup6qh3e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbJSkAZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z36bcwrvpm02zup6qh3e.gif" alt="SplitEditorPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-switch-between-editors-raw-ctrl-1-ctrl-2-endraw-"&gt;
  &lt;/a&gt;
  5. Switch between editors: &lt;code&gt;Ctrl + 1, Ctrl + 2...&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--izN1D_9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zivyzlb097qz42tbx6e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--izN1D_9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zivyzlb097qz42tbx6e.gif" alt="NavigateEditorPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-multi-cursor-selection-raw-alt-click-endraw-or-raw-ctrl-alt-updown-endraw-"&gt;
  &lt;/a&gt;
  6. Multi cursor selection: &lt;code&gt;Alt + Click&lt;/code&gt; or &lt;code&gt;Ctrl + Alt + Up/Down&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9z0KMZoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjqvww648f1lohqpvr2t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9z0KMZoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjqvww648f1lohqpvr2t.gif" alt="MultiCursorPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-you-can-also-add-additional-cursors-to-all-occurrences-of-the-current-selection-raw-ctrl-shift-l-endraw-"&gt;
  &lt;/a&gt;
  7. You can also add additional cursors to all occurrences of the current selection: &lt;code&gt;Ctrl + Shift + L&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BJE0oheu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01r2ma37aw67lbfg984v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BJE0oheu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01r2ma37aw67lbfg984v.gif" alt="AllOcurPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-or-if-you-want-to-select-only-the-next-occurrence-raw-ctrl-d-endraw-"&gt;
  &lt;/a&gt;
  8. Or if you want to select only the next occurrence: &lt;code&gt;Ctrl + D&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xs-YvBUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1owbm92ngpbpjjfhovpt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xs-YvBUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1owbm92ngpbpjjfhovpt.gif" alt="OneByOnePIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-copy-line-up-down-raw-shift-alt-updown-endraw-"&gt;
  &lt;/a&gt;
  9. Copy line up / down: &lt;code&gt;Shift + Alt + Up/Down&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kTa-pTYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88q15n4gm13fuxpwqlig.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kTa-pTYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88q15n4gm13fuxpwqlig.gif" alt="CopyLinePIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-move-line-up-and-down-raw-alt-updown-endraw-"&gt;
  &lt;/a&gt;
  10. Move line up and down: &lt;code&gt;Alt + Up/Down&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PqieEQm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8widg4jh7twym1wcr333.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PqieEQm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8widg4jh7twym1wcr333.gif" alt="MoveLinePIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-code-formatting-raw-shift-alt-f-endraw-whole-document"&gt;
  &lt;/a&gt;
  11. Code formatting: &lt;code&gt;Shift + Alt + F&lt;/code&gt; (whole document)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3eR4k3S6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frsg2yorcx7y17ur2u8h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3eR4k3S6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frsg2yorcx7y17ur2u8h.gif" alt="FormatPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-rename-raw-f2-endraw-"&gt;
  &lt;/a&gt;
  12. Rename: &lt;code&gt;F2&lt;/code&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5-cUCfk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cuxxm9wm9jmrkw7n7fv5.gif" alt="RenamePIC"&gt;
&lt;/h2&gt;

&lt;p&gt;😎 You might also like:&lt;br&gt;
&lt;a href="https://dev.to/mrslima/python-typing-kl4"&gt;Python Typing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📫 Where to find me:&lt;br&gt;
&lt;a href="http://taplink.cc/limaa.ds"&gt;All my links&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Build a video player with React.
</title>
      <author>Adeola</author>
      <pubDate>Sat, 16 Oct 2021 21:27:09 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-a-video-player-with-react-24h8</link>
      <guid>https://dev.to/hackmamba/build-a-video-player-with-react-24h8</guid>
      <description>&lt;p&gt;The use of video content on webpages is becoming increasingly popular. Its importance cannot be overestimated as it engages users, and creates a lasting impression in just a few seconds.&lt;br&gt;
It is for this reason that the steps involved in the creation of a video component using React will be discussed in this article.&lt;/p&gt;

&lt;p&gt;The component supports YouTube and Vimeo to allow for the flexibility in its use by users.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sandbox"&gt;
  &lt;/a&gt;
  Sandbox
&lt;/h2&gt;

&lt;p&gt;We completed the entire project on Codesandbox, and you can fork the repo to run it.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CodeSandbox id="react-videoplayer-f62ej" title="React-Videocomponent"/&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisitesinstallation"&gt;
  &lt;/a&gt;
  Prerequisites/Installation
&lt;/h2&gt;

&lt;p&gt;No advanced requirements are needed. However, a basic knowledge of React installation is required.&lt;/p&gt;

&lt;p&gt;To create a React application, open the terminal window or command prompt and change the directory to the folder where you want to create the application.&lt;/p&gt;

&lt;p&gt;Moreover, an online code editor which supports React can be used.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npx create-react-app react-video-player&lt;/code&gt;  to create the application. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The above command installs the create-react-app package into the react-video-player folder of our application. The react-video-player can be given a different name, but should be in lower case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Change directory to the application folder by running &lt;code&gt;cd react-video-player command&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After the application has been created, install &lt;code&gt;reactjs-media&lt;/code&gt; from a terminal window to install the application dependencies.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install reactjs-media&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Start the application by running &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-video-component"&gt;
  &lt;/a&gt;
  Creating the video component
&lt;/h2&gt;

&lt;p&gt;To structure the video player, the video component remains our primary interest. The video component of the reactjs-media involves an effortless process. To do this, the original code in the &lt;code&gt;src/App.jsfolder&lt;/code&gt; is replaced with the snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;//imports basic styling from the css file.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactVideo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reactjs-media&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;//imports the React video component the reactjs-media &lt;/span&gt;
    &lt;span class="nx"&gt;dependency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//exports the default app into the index.js for rendering&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;//defines the properties of the video component&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactVideo&lt;/span&gt;
        &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://player.vimeo.com/external/527751333.hd.mp4? s=6c0db75ad52213d37e122ed4038c6150997e870e&amp;amp;profile_id=172&amp;amp;oauth2_t oken_id=57447761&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;autoPlay&lt;/span&gt;
        &lt;span class="nx"&gt;primaryColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;poster&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://images.pexels.com/photos/7422113/pexels- photo-7422113.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=1&amp;amp;w=500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The audio component could also be created using a similar approach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we went through the creation of a video player using a React component that supports YouTube and Vimeo. The application dependencies with the video component which is reactjs-media was installed through npm.&lt;/p&gt;

&lt;p&gt;This article would not be complete without a mention of how this single page application can be authenticated with Auth0.&lt;br&gt;
With Auth0, an authentication API would be integrated into the application in just a couple of steps. To find out how, visit &lt;a href="https://auth0.com/docs/libraries/auth0-react"&gt;https://auth0.com/docs/libraries/auth0-react&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, the media and other image assets can be stored in the cloud with just a few clicks using Cloudinary. For a detailed overview, visit &lt;a href="https://cloudinary.com/documentation/upload_images"&gt;https://cloudinary.com/documentation/upload_images&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As the code was run in codesandbox, the images might need to be resized to fit the desktop screen, if it is going to be run from an offline code editor. To resize the images, follow the complete walkthrough on &lt;a href="https://cloudinary.com/blog/cool_tricks_for_resizing_images_in_javascript"&gt;https://cloudinary.com/blog/cool_tricks_for_resizing_images_in_javascript&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/jim-junior/reactjs-media"&gt;https://github.com/jim-junior/reactjs-media&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/auth0/auth0-react"&gt;https://github.com/auth0/auth0-react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloudinary.com/"&gt;https://cloudinary.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Content created for the Hackmamba Jamstack Content Hackathon&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>100 Bytes of CSS to look great everywhere</title>
      <author>swyx</author>
      <pubDate>Sat, 16 Oct 2021 21:05:53 +0000</pubDate>
      <link>https://dev.to/swyx/100-bytes-of-css-to-look-great-everywhere-19pd</link>
      <guid>https://dev.to/swyx/100-bytes-of-css-to-look-great-everywhere-19pd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;Dan Luu always writes fascinating posts, but &lt;a href="https://danluu.com/"&gt;the design&lt;/a&gt; makes it very painful to read:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AQiENkcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FB2PmLXVEAYu7GN%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AQiENkcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FB2PmLXVEAYu7GN%3Fformat%3Djpg%26name%3Dlarge" alt="https://pbs.twimg.com/media/FB2PmLXVEAYu7GN?format=jpg&amp;amp;name=large"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A couple years ago, &lt;a href="https://news.ycombinator.com/item?id=19607169"&gt;this post on HN&lt;/a&gt; was fairly popular, and I saved it on my &lt;a href="https://github.com/sw-yx/spark-joy/blob/master/README.md#drop-in-css-frameworks"&gt;spark-joy repo&lt;/a&gt;, which is a &lt;a href="https://twitter.com/swyx/status/1434206569881694210"&gt;swipe file&lt;/a&gt; of design tips I've collected over the past few years. &lt;/p&gt;

&lt;p&gt;However, I noticed that the original website link is dead. So I thought I would refresh it with what I have now implemented for Dan's site:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZcYIvU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FB2Po1tVIAA-i3O%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZcYIvU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FB2Po1tVIAA-i3O%3Fformat%3Djpg%26name%3Dlarge" alt="https://pbs.twimg.com/media/FB2Po1tVIAA-i3O?format=jpg&amp;amp;name=large"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#100-bytes-of-css-to-look-great-nearly-everywhere"&gt;
  &lt;/a&gt;
  100 bytes of css to look great nearly everywhere
&lt;/h1&gt;

&lt;p&gt;This should be simple drop-in css to look good on most displays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this down. I've adapted the original text with my own commentary.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;max-width: 60ch&lt;/code&gt;: the "readable range" is usually 50-80 character widths, and CSS lets you express that directly with the &lt;code&gt;ch&lt;/code&gt; unit. &lt;a href="https://twitter.com/swyx/status/1223025553986347009"&gt;I blogged more on line lengths last year&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;padding: 1.5rem&lt;/code&gt;: If the display's width goes under &lt;code&gt;60ch&lt;/code&gt;, then this padding keeps things looking good on mobile. While this may seem optional, it actually hits two birds with one stone - the padding also provides sorely-needed top and bottom whitespace.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;margin: auto&lt;/code&gt;: This is really all that is needed to center the page - applied on &lt;code&gt;html&lt;/code&gt;, because Dan's site doesnt have a semantic &lt;code&gt;main&lt;/code&gt; tag and &lt;code&gt;html&lt;/code&gt; is more likely to exist in most sites (no judgment pls, i've heard enough semantic HTML preaching). That the top tag centers itself relative to nothing is unintuitive, but thats how browsers do.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;line-height: 1.75rem&lt;/code&gt;: Spacing between the lines to help increase visual clarity.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;font-size: 1.5rem&lt;/code&gt;: I've noticed that recent design trends and screen sizes have tended toward bigger font sizes. Or maybe I'm getting old. Use &lt;code&gt;rem&lt;/code&gt; to just be bigger than the user-set default&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#optional-100-more-bytes"&gt;
  &lt;/a&gt;
  Optional 100 more bytes
&lt;/h2&gt;

&lt;p&gt;If you can spare a few extra bytes of CSS, I'd also recommend margins for headers, paragraphs, and lists, and softening your text color:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1d1d1d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ktMDQTTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sw0uu6y0cwp6lue3d9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ktMDQTTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sw0uu6y0cwp6lue3d9g.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stylebot"&gt;
  &lt;/a&gt;
  Stylebot
&lt;/h2&gt;

&lt;p&gt;You can auto apply these styles on to pages with &lt;a href="https://github.com/ankit/stylebot"&gt;https://github.com/ankit/stylebot&lt;/a&gt;. I can't vouch for their security as I only just started using it.&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>Hacktoberfest - Beginner Project</title>
      <author>S3cBar0n</author>
      <pubDate>Sat, 16 Oct 2021 20:54:44 +0000</pubDate>
      <link>https://dev.to/s3cbar0n/hacktoberfest-beginner-project-1aa7</link>
      <guid>https://dev.to/s3cbar0n/hacktoberfest-beginner-project-1aa7</guid>
      <description>&lt;p&gt;Still need to contribute PR's for Hacktoberfest?&lt;/p&gt;

&lt;p&gt;Checkout this great beginner repo for HTML, CSS, and JS!&lt;br&gt;
&lt;a href="https://github.com/P2PHackClub/website"&gt;https://github.com/P2PHackClub/website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Ditching the "else" Statement</title>
      <author>Michael Kovacevich</author>
      <pubDate>Sat, 16 Oct 2021 20:43:17 +0000</pubDate>
      <link>https://dev.to/mkovace/ditching-the-else-statement-5cfh</link>
      <guid>https://dev.to/mkovace/ditching-the-else-statement-5cfh</guid>
      <description>&lt;p&gt;Are "else" statements really necessary? When first learning to program we are taught about "if" statements and "else" statements. If this condition is met do something, else do another thing. It's fundamental to nearly every programming language, but can we ditch the "else" statement?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-case-for-ditching-it"&gt;
  &lt;/a&gt;
  The Case for Ditching It
&lt;/h2&gt;

&lt;p&gt;Like with most things in programming there will be scenarios where using an "else" statement is more appropriate than avoiding it, but let's assume that we want to ditch it no matter what scenario arises. How would we do that and why would we want to?&lt;/p&gt;

&lt;p&gt;The best way to explore this approach is through examples so let's start with a simple one. All of the examples below are written in Typescript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// With "else"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;areEqual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Without "else"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;areEqual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a common scenario where the "else" statement should be omitted because it is adding more code without adding value. Of course, this entire function is adding code without adding value, since you could just use the "===" operator directly, so let us complicate things a bit more. What if we don't want to "return" from inside our if block?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are several ways to get rid of that "else" statement which also improve the readability of the function. For example, a ternary can be used in these situations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;preferredName&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;preferredName&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This has the added benefit of letting us use a "const" instead of a "let", but wait a minute, this is cheating! A ternary is essentially an "if/else" statement with less syntax, so we didn't really ditch the "else" statement!&lt;/p&gt;

&lt;p&gt;Let's try again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFirstName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFirstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is much better, but for the minimalists out there you could also write it this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;getFirstName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFirstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;preferredName&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The real sticklers will note that this could be done in one function and would reduce the lines of code and the number of characters used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;preferredName&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;preferredName&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a great little function, but in combining the two functions into one the reusability has gone down. What if we only want to get the first name? We no longer have a dedicated function to do it! Of course in a real code base simply using the "||" operator to pick between the two values would be acceptable and would result in less code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;preferredName&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;givenName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, their is also a readability trade off since having a specific function makes it clear what operation is being executed. This along with the reusability is why the dedicated functions is preferred.&lt;/p&gt;

&lt;p&gt;Alright enough talk about minimizing code, let's get back to the "else" conversation. However you choose to implement functions similar to those above, you do not need an "else" statement to accomplish the task. Both examples here show the two main ways to avoid using an "else" statement: "returning early" and "extracting smaller functions".&lt;/p&gt;

&lt;p&gt;Returning early is a straight forward concept. The idea is to return your result (including void) as soon as you can, in other words, minimize the amount of code that needs to be executed. If we return early we can omit "else" and "else if" statements as they just become redundant.&lt;/p&gt;

&lt;p&gt;Extracting smaller functions should be a familiar technique to most software engineers. In both Functional and Object Oriented Programming this is often referred to as the Single Responsibility Principle, the first of the SOLID Principles. We want our functions, classes, and methods to have a single purpose/responsibility. Many engineers make the mistake of defining a single responsibility with a scope that is far too big, resulting in classes, methods, and functions that are large and have many smaller responsibilities. Every large responsibility is made up of smaller responsibilities, and the more of those we identify and isolate, the closer we are following the Single Responsibility Principle.&lt;/p&gt;

&lt;p&gt;Following these two techniques will result in fewer "else" statements without even trying. Sounds like if we write our code with good fundamentals we should never need an "else" statement, so why use them at all?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-case-for-keeping-it"&gt;
  &lt;/a&gt;
  The Case for Keeping It
&lt;/h2&gt;

&lt;p&gt;The only real case for continuing to use "else" statements is convenience, and this is a pretty strong argument. Whether you are working within a legacy code base or just rushing to make a tight deadline, "else" statements are the last things on your mind. However, I still hardly use "else" statements. Not because I'm consciously thinking about it, but because I usually keep my functions small and single purposed, so the need for "else" statements rarely arises. From time to time an "else" statement or two isn't a big deal, but only when it's convenient.&lt;/p&gt;

&lt;p&gt;So how often does this convenience arise? Unfortunately, very often, especially in legacy code bases. Finding an existing code base that is strictly following best practices and conventions is a rarity, and honestly that's a good thing for technological progress. Innovation lies somewhere between idealism and pragmatism, as does the decision to use an "else" statement or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;End of the day, do what is best for you and your team. Most legacy code bases I've seen have plenty of technical debt beyond the number of unnecessary "else" statements being used. I would however encourage everyone reading this to create a Standards and Conventions document for your team. Depending on the size and experience the team, the document may be very small with just enough detail to let the engineers know what is expected of them. For medium to large teams a document like this is essential and should be constantly referenced, maintained, and updated. The standards and conventions you add over time will show the progress that your team has made towards having a higher quality code base. Maybe you'll even include "No Else Statements" as a standard, but probably not.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>codequality</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Debugging Mindset</title>
      <author>Vedran Mihočinec</author>
      <pubDate>Sat, 16 Oct 2021 20:36:24 +0000</pubDate>
      <link>https://dev.to/vedran/debugging-mindset-3n77</link>
      <guid>https://dev.to/vedran/debugging-mindset-3n77</guid>
      <description>&lt;p&gt;Bugs here, bugs there, bugs everywhere. Some are easy to fix, some are complex and obscure. So, is there a generic approach to fixing every bug? Probably not.&lt;/p&gt;

&lt;p&gt;Anyway, there are four parts of fixing a bug:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Understanding a bug;&lt;/li&gt;
&lt;li&gt;Identifying the cause of a bug;&lt;/li&gt;
&lt;li&gt;Planning a bug fix;&lt;/li&gt;
&lt;li&gt;Applying a bug fix.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#understanding-a-bug"&gt;
  &lt;/a&gt;
  Understanding a bug
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-steps-to-reproduce-a-bug"&gt;
  &lt;/a&gt;
  What are the steps to reproduce a bug?
&lt;/h3&gt;

&lt;p&gt;It is crucial to have as much information as possible about a bug, even if some of that information ends up irrelevant. For example, knowing at what time which user on which platform with which input got which output. You should almost always have all the required information already written in the bug report and if you constantly end up asking this question, then consider writing a list of required information for reporting a bug.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-expected-flow"&gt;
  &lt;/a&gt;
  What is the expected flow?
&lt;/h3&gt;

&lt;p&gt;Sometimes features end up reported as bugs. And that's okay, as developers don't know every part of the application code the same way bug reporters might not know about some feature. So it's important to have the expected flow explained in the bug report.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-your-bug-a-bug-and-is-expected-flow-an-expected-flow"&gt;
  &lt;/a&gt;
  Is your bug a bug and is expected flow an expected flow?
&lt;/h3&gt;

&lt;p&gt;As mentioned above, not everyone knows everything and features might end up reported as bugs. So, if you think a bug needs to be challenged, challenge it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#identifying-the-cause-of-a-bug"&gt;
  &lt;/a&gt;
  Identifying the cause of a bug
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-does-the-log-say"&gt;
  &lt;/a&gt;
  What does the log say?
&lt;/h3&gt;

&lt;p&gt;If you know when a bug happened, are there any logs that might help you? Remember to consider all log types: system logs (example: OOM happened), application logs (example: required third party service was unavailable), third party logs (example: unoptimized database query resulted in slow query execution), etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-the-flow-behave-in-your-local-environment"&gt;
  &lt;/a&gt;
  How does the flow behave in your local environment?
&lt;/h3&gt;

&lt;p&gt;Try to reproduce the bug in your local environment. After you reproduce it, turn on a debugger and try to figure out where the bug is in the code. If needed, write down suspicious points and ponder over them until you figure out where the bug is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-the-flow-behave-in-the-production-environment"&gt;
  &lt;/a&gt;
  How does the flow behave in the production environment?
&lt;/h3&gt;

&lt;p&gt;If you can't reproduce the bug in your local environment, then it might be time to try the production environment. Based on identified suspicious points, use remote debugging or write the information you need in the application logs (example: "If logged user is me, then the log information I need (input data, execution time, etc.)"). After you have that production information, try to reproduce it locally again. And finally, if you didn't use remote debugging, remove added temporary logging code from production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-we-cant-identify-the-cause-of-the-bug-after-all-the-steps-mentioned-above"&gt;
  &lt;/a&gt;
  What if we can't identify the cause of the bug after all the steps mentioned above?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Talk to a duck&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explain the bug and all the steps and findings to a non-person. Just by explaining, some ideas might pop up.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Talk to other developers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explain the bug and all the steps and findings to other developers. Maybe you will get some advice or tips on what to check.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Give up (temporarily)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add detailed logging to all identified suspicious points (be careful not to impact the application performance), write down all your findings, deploy code with detailed logging to production and wait for the bug to occur again.&lt;/p&gt;

&lt;p&gt;Explain to your client that you are unable to reproduce the bug and that you have added detailed logging so you will know when the bug occurs next time and that you will try to fix it again at that time, with new information you will have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planning-a-bug-fix"&gt;
  &lt;/a&gt;
  Planning a bug fix
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#is-your-bug-a-bug-and-is-expected-flow-an-expected-flow-vol-2"&gt;
  &lt;/a&gt;
  "Is your bug a bug and is expected flow an expected flow" vol 2
&lt;/h3&gt;

&lt;p&gt;With new information, ask yourself if there is a need to challenge the requested flow. Maybe there is a reason the flow behaves the way it behaves. Maybe the problem is wrong communication to the end-user. Maybe there are security, performance, or some other kind of issues that might occur if that flow is changed. Always check code history where the bug occurs, maybe there are some linked feature requests or explanations for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-many-entities-are-affected-by-this-bug"&gt;
  &lt;/a&gt;
  How many entities are affected by this bug?
&lt;/h3&gt;

&lt;p&gt;It's good practice to check how many entities were affected by a bug. It might lead to different bug solutions or maybe the client might want to know that information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-you-reproduce-a-bug-with-a-test"&gt;
  &lt;/a&gt;
  Can you reproduce a bug with a test?
&lt;/h3&gt;

&lt;p&gt;If you can reproduce a bug with a test, plan to write the test.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-need-a-hotfix"&gt;
  &lt;/a&gt;
  Do you need a hotfix?
&lt;/h3&gt;

&lt;p&gt;If you need to fix a bug ASAP, then plan to create a hotfix.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#did-the-bug-cause-some-data-corruption"&gt;
  &lt;/a&gt;
  Did the bug cause some data corruption?
&lt;/h3&gt;

&lt;p&gt;If some data is corrupted because of the bug, analyze the impact and plan the solution for data corruption. For example, you might have to create a background process that will fix all corrupted data, or maybe you might need some manual intervention to fix corrupted data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-need-to-remove-added-logging"&gt;
  &lt;/a&gt;
  Do you need to remove added logging?
&lt;/h3&gt;

&lt;p&gt;If you have added some detailed logging to better identify the bug, maybe you need to remove it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-a-bug-fix"&gt;
  &lt;/a&gt;
  Applying a bug fix
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;If needed, create and deploy a hotfix. A hotfix can be ugly, but, ideally, it should be accompanied by a test that confirms that hotfix works.&lt;/li&gt;
&lt;li&gt;Fix the bug according to your application coding standards and, if possible, write some tests for it. If you added some logging that is not needed anymore, remove it.&lt;/li&gt;
&lt;li&gt;If corrupted data exists, fix corrupted data.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#outro"&gt;
  &lt;/a&gt;
  Outro
&lt;/h2&gt;

&lt;p&gt;These are the steps I often go through when I work on solving bugs. Most of the time there is no need to go through all these steps, but hey, here they are.&lt;br&gt;
And there is still one important thing to mention:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-estimate-bug-fixing"&gt;
  &lt;/a&gt;
  How to estimate bug fixing?
&lt;/h3&gt;

&lt;p&gt;When you have all the information about the bug, somebody might need an estimate on how long it takes to solve that bug. That's easy when the bug is obvious and (probably) easy to solve, but how about when it isn't? Here are my rule-of-thumb rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a task for identifying the cause of the bug and estimate it to a maximum of one day. If you can't reproduce a bug in one day, give up (temporarily) and create a follow-up ticket for a time when the bug is detected again.&lt;/li&gt;
&lt;li&gt;If you identify the cause of the bug within one day and you can fix it in the remaining part of the day, fix that bug.&lt;/li&gt;
&lt;li&gt;If you can't easily fix the bug, create follow-up tasks based on your plan for a bug fix.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that's it, I hope this article helps you in your future bug fixing ventures.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Javascript : Variables and Datatypes</title>
      <author>Rawan Amr Abdulsattar</author>
      <pubDate>Sat, 16 Oct 2021 20:25:12 +0000</pubDate>
      <link>https://dev.to/rawan_amr_abdulsattar/javascript-variables-and-datatypes-532o</link>
      <guid>https://dev.to/rawan_amr_abdulsattar/javascript-variables-and-datatypes-532o</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;a href="https://1.bp.blogspot.com/-lK1OKYFOHs8/YKVj2ENCprI/AAAAAAAAALE/PdZANMJSTfsXDa61pGg46tjV4B0x-aMfQCLcBGAsYHQ/s800/javascript%25232.png"&gt;&lt;img alt="Javascript : #2 Variables and Data types" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jmP_AX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-lK1OKYFOHs8/YKVj2ENCprI/AAAAAAAAALE/PdZANMJSTfsXDa61pGg46tjV4B0x-aMfQCLcBGAsYHQ/s16000/javascript%2525232.png" title="Javascript : #2 Variables and Data types"&gt;&lt;/a&gt;&lt;br&gt;
&lt;h1&gt;What is a Variable?!&lt;/h1&gt;
&lt;span&gt;A &lt;b&gt;variable&lt;/b&gt; is a container with a label (name) where you store a certain value ( a piece of data ) to use it in your code.&lt;/span&gt;&lt;h1&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;span&gt;Declaring variables and assigning values to them&lt;/span&gt;&lt;/h1&gt;
&lt;h4&gt;&lt;span&gt;To declare a variable is to give it a name, you have to use one of these keywords:&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;var &lt;/b&gt;: most common key to declare variables.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;let &lt;/b&gt;: only visible within the block where it's declared.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;const&lt;/b&gt; : used for constant values and cannot be changed , it will cause an error if you tried to do so.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;span&gt;&lt;b&gt; To declare a variable, use one of the keywords followed by the variable name (which has to be meaningful)&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;var myVariable ;&lt;br&gt;&lt;br&gt;
let myName ;&lt;br&gt;&lt;br&gt;
const pi ;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;span&gt;Variable naming conventions &lt;/span&gt;&lt;/h1&gt;
&lt;span&gt;&lt;b&gt;To name a variable in javascript , you should follow some rules:&lt;/b&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;span&gt;javascript is &lt;b&gt;case sensitive&lt;/b&gt; which means that the letters' case matters (VARIABLE isn't the same as Variable and also not as variable).&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;you have to use &lt;b&gt;camelCase&lt;/b&gt; (example: myName, schoolYear, etc.)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;You can add &lt;b&gt;numbers&lt;/b&gt; but not at the beginning (whatever , who will name a variable 2myVarName, this won't satisfy the rule n.o. 2)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;you cannot use &lt;b&gt;hyphens&lt;/b&gt; " - " or &lt;b&gt;spaces&lt;/b&gt; but you can use &lt;b&gt;underscores&lt;/b&gt; " _ " instead (note : underscores can be used as the first character in a variable name).&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;You cannot use any of the &lt;b&gt;reserved keywords&lt;/b&gt; (like : var, let, const, if, while, for and so on) . don't worry if you don't know a lot of keywords , if you tried to use one it will be highlighted as a keyword and results in an error.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;span&gt;Assigning values to variables&lt;/span&gt;&lt;/h1&gt;
&lt;span&gt;&lt;b&gt;To assign a value to a variable, use the assignment operator  " = " (equal sign).&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Declaring variables&lt;br&gt;&lt;br&gt;
var myVariable ; &lt;br&gt;&lt;br&gt;
let myName ;&lt;br&gt;&lt;br&gt;
const pi ;


&lt;p&gt;// assigning values to variables&lt;br&gt;&lt;br&gt;
myVariable = 25; &lt;br&gt;&lt;br&gt;
myName= "Rawan";&lt;br&gt;&lt;br&gt;
pi = 3.14;&lt;/p&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;span&gt;&lt;b&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;Note&lt;/b&gt; : you can declare variables and assign values to them on the same line.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Declaring a variable and assigning a value to it on one line&lt;br&gt;&lt;br&gt;
var myAge = 15; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;span&gt;Datatypes&lt;/span&gt;&lt;/h1&gt;
&lt;span&gt;In Javascript there are a lot of data types, we will discuss the most important and basic ones.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;h3&gt;&lt;span&gt;Main Datatypes :&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;Numbers&lt;/b&gt; : they can be integer numbers or floats( numbers with decimal points).&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;Strings &lt;/b&gt;: any series of characters included between quotes (double quotes " " or single quotes ' ' ).&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;Boolean value &lt;/b&gt;: has one of the two values &lt;b&gt;true&lt;/b&gt; or &lt;b&gt;false&lt;/b&gt; .&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;null &lt;/b&gt;: means nothing.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;undefined &lt;/b&gt;: something that hasn't been defined.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;Arrays &lt;/b&gt;: can store more than one piece of data.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;Objects &lt;/b&gt;: used to store key-value pairs( each property associated with its own value).&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;span&gt;Getting output in Javascript &lt;/span&gt;&lt;/h1&gt;
&lt;span&gt;You can output values to the console using &lt;b&gt;console.log()&lt;/b&gt; , inside the parenthesis put a &lt;b&gt;variable name&lt;/b&gt; or any piece of &lt;b&gt;data&lt;/b&gt; to be shown in the console.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;console.log("Hello World !"); // output : Hello World !&lt;br&gt;&lt;br&gt;
var myScore = 320 ;&lt;br&gt;&lt;br&gt;
console.log(myScore); // output : 320&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;span&gt;Notes , Again...&lt;/span&gt;&lt;/h1&gt;
&lt;span&gt;1 . Everything greyed out (not highlighted) after " // " is called a &lt;b&gt;comment &lt;/b&gt;, you write them to explain to yourself and others what your code does , you write them using : &lt;/span&gt; &lt;br&gt;&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;//&lt;/b&gt; : for inline comments&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;/*  */&lt;/b&gt; : for multi-line comments&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// I am an inline comment


&lt;p&gt;/* I am a &lt;br&gt;&lt;br&gt;
multi-line&lt;br&gt;&lt;br&gt;
comment */&lt;/p&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;2 .  In Javascript we put a &lt;b&gt;semicolon &lt;/b&gt;"&lt;b&gt;; &lt;/b&gt;" after the end of each line, you don't have to do it all the time, but it's a good practice to do so.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;3 . Variables that are declared but not assigned to store any values are called " &lt;b&gt;Uninitialized variables&lt;/b&gt; " and have a default value of &lt;b&gt;undefined&lt;/b&gt; .&lt;/span&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
