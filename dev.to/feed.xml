<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HTML Features you never knew existed.</title>
      <author>Vishwa.R</author>
      <pubDate>Sat, 28 Aug 2021 19:29:19 +0000</pubDate>
      <link>https://dev.to/codereaper08/html-features-you-never-knew-existed-54ii</link>
      <guid>https://dev.to/codereaper08/html-features-you-never-knew-existed-54ii</guid>
      <description>&lt;p&gt;Hello again from codereaper08!&lt;br&gt;
Thanks again to all my followers, who always motivate me to write blogs weekly, in spite of my tight academic schedules.&lt;/p&gt;

&lt;p&gt;Back again with a good article, I hope. In this post, we are going to discuss 5 features in HTML, which probably we never knew existed. So let's get into it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-wbr-tag"&gt;
  &lt;/a&gt;
  1. WBR Tag:
&lt;/h2&gt;

&lt;p&gt;Let's start from the first one in our list, &lt;code&gt;wordbreak&lt;/code&gt; tag, abbreviated as &lt;code&gt;&amp;lt;wbr&amp;gt;&lt;/code&gt;. You may think, what's the meaning of its existence, well It's not like the handy &lt;code&gt;br&lt;/code&gt; tags we use. &lt;code&gt;&amp;lt;wbr&amp;gt;&lt;/code&gt; just doesn't force words to break unless there's a necessary situation to do so. &lt;code&gt;wbr&lt;/code&gt; tag is an empty tag (Doesn't have a closing tag).&lt;/p&gt;

&lt;p&gt;We'll see a comparison between &lt;code&gt;&amp;lt;wbr&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;, resize the browser-window to see how &lt;code&gt;wbr&lt;/code&gt; breaks itself on necessary situations.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/VishwaR/3bsw7vq8/embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-address-tag"&gt;
  &lt;/a&gt;
  2. address Tag:
&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;div&lt;/code&gt;'s for enclosing contact info?&lt;br&gt;
HTML gives a good semantic way of doing that using &lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt; tag. So what's different in using &lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt; tags, well, It renders the text in &lt;em&gt;Italics&lt;/em&gt; with line-breaks above and below the &lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt; tags. It also has a by default display property of &lt;code&gt;block&lt;/code&gt;. Take a look at the below JSFiddle.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/VishwaR/f2Lnpuhz//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-optgroup-tag"&gt;
  &lt;/a&gt;
  3. optgroup Tag:
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt; tag is used when you need to group the options into categories. This makes selecting an option from a very large list of options easy!&lt;br&gt;
User can look into the relevant category and select an option in that particular category. I've created a superhero &lt;code&gt;optgroup&lt;/code&gt; for demonstration in the below JSFiddle.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/VishwaR/vm9jnwe4//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-portal-tag"&gt;
  &lt;/a&gt;
  4. portal Tag:
&lt;/h2&gt;

&lt;p&gt;Now things get interesting! What we are going to see is a tag called &lt;code&gt;&amp;lt;portal&amp;gt;&lt;/code&gt;. This was launched by &lt;strong&gt;Google&lt;/strong&gt; in I/O 2019 DevCon, where they mentioned that, &lt;code&gt;&amp;lt;portal&amp;gt;&lt;/code&gt; will be an upgrade to &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;. &lt;code&gt;&amp;lt;portal&amp;gt;&lt;/code&gt; allows seamless navigation inside the embedded content, too!. One sad thing, It is not supported by many browsers, including the normal &lt;strong&gt;Google Chrome&lt;/strong&gt; too. Currently, only the &lt;a href="https://www.google.com/chrome/canary/"&gt;Chrome canary&lt;/a&gt; supports the &lt;code&gt;&amp;lt;portal&amp;gt;&lt;/code&gt; tag. Check out the demo video below.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4JkipxFVE9k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-capture-attribute-for-input-element"&gt;
  &lt;/a&gt;
  5. capture attribute for Input element:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vnwy_JyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1488240339625-c4014e114224%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1079%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vnwy_JyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1488240339625-c4014e114224%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1079%26q%3D80" alt="camera"&gt;&lt;/a&gt;&lt;/p&gt;

Photo by &lt;a href="https://unsplash.com/@lucabravo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Luca Bravo&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/camera?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;

  



&lt;p&gt;Lastly, we are going to see about &lt;code&gt;capture&lt;/code&gt; attribute for the input elements. &lt;code&gt;capture&lt;/code&gt; added as an attribute to an input element opens the camera for taking shots of the user(front camera) or the scene(rear camera). This tag only works on mobile, and it simply falls back to a file picker in Desktop. &lt;code&gt;capture&lt;/code&gt; attribute has two values,&lt;/p&gt;

&lt;p&gt;— user --&amp;gt; Opens User facing Camera (Front)&lt;br&gt;
— environment --&amp;gt; Opens Environment (Rear)&lt;/p&gt;

&lt;p&gt;Take a look at the below JSFiddle.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/VishwaR/7r0ec9g1//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And, that's it for today, Feel I missed out something? Write down in comments, I'll be happy to include. Love it? Give a 💖 for the article. Thanks for reading and have a good time 😄&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>todayilearned</category>
      <category>html</category>
      <category>todayisearched</category>
    </item>
    <item>
      <title>A scalable CSS only Typewriter Effect</title>
      <author>Temani Afif</author>
      <pubDate>Sat, 28 Aug 2021 18:37:47 +0000</pubDate>
      <link>https://dev.to/afif/a-scalable-css-only-typewriter-effect-2opn</link>
      <guid>https://dev.to/afif/a-scalable-css-only-typewriter-effect-2opn</guid>
      <description>&lt;p&gt;You want a Typewriter effect for your text but you are lost within all the variations that use JS and the ones that use a complex CSS code?&lt;/p&gt;

&lt;p&gt;Search no more! Here is a simple typewriter effect with only few line of CSS where you don't need to deal with any complex code. It's scalable and works with any kind of text.&lt;/p&gt;

&lt;p&gt;See it in play:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWoajZE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;The logic is pretty simple and relies on a basic HTML code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;CSS typewriter&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You put the text within two &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; and you are done. You don't need to deal with pseudo-element, duplicated texts, data-attribute, etc. &lt;/p&gt;

&lt;p&gt;The CSS now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;word-break&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;break-all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;90&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No, I forget nothing. This is all the CSS needed for the typewriter effect.&lt;/p&gt;

&lt;p&gt;3 tricks are used to achieve the final result:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) cyclic percentage size&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a powerful CSS quirk to calculate width (or height) of elements. I used a first &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; having &lt;code&gt;display:inline-flex&lt;/code&gt; so its size depend on its content (it's an inline level element). The content inside (the other &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;) is using a percentage width so a width based on its container. We have a cyclic calculation since each element depend on the other!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3.org/TR/css-sizing-3/#cyclic-percentage-contribution"&gt;The Specification&lt;/a&gt; detail such behavior. I don't recommend reading it because you will get lost (I had to read it 10 times to understand only a few cases).&lt;/p&gt;

&lt;p&gt;I will try to use easy words to explain what is happening in our case.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First the browser will ignore the percentage width to define the width of the container. The child element will have &lt;code&gt;width:auto&lt;/code&gt;. Our first span will have its width equal to the width of its child (so the width of the text).&lt;/li&gt;
&lt;li&gt;Then the browser will get back to calculate the width of child based on the width of the parent found previously BUT the width of the parent will not change again to not fall into an infinite loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, the &lt;code&gt;width:X%&lt;/code&gt; I am applying to the span is based on its own content that's why we don't need any complex calculation. Animating the element from &lt;code&gt;0%&lt;/code&gt; to &lt;code&gt;100%&lt;/code&gt; is all what we need.&lt;/p&gt;

&lt;p&gt;This is what we get:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/WNOQojX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) breaking the words&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now let's add &lt;code&gt;word-break: break-all;&lt;/code&gt; to the previous code:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/powjNwV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We are getting closer. Our text is wrapping letter by letter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;break-all&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Breaking is allowed within “words” &lt;sup&gt;&lt;a href="https://drafts.csswg.org/css-text/#word-break-property"&gt;ref&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3) fix the height to one line&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The final trick is to set the height of the element to be equal to one line. By default, the height of a line is around &lt;code&gt;1.2xfont-size&lt;/code&gt; that's why I using &lt;code&gt;1.2em&lt;/code&gt;. You have to adjust this value based on your case or based on the value of &lt;code&gt;line-height&lt;/code&gt; (it should be equal to &lt;code&gt;line-height&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/GREpNON?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That's it! we have our typewriter effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wait, there is an issue with the first letter!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, good catch. That's why in the initial code I am adding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a &lt;em&gt;invisible&lt;/em&gt; first letter that will take the place of the &lt;em&gt;real&lt;/em&gt; first letter.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWoabrq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;✔️ No Javascript&lt;br&gt;
✔️ A basic HTML code&lt;br&gt;
✔️ No complex CSS code. Less than 10 declarations and no hard-coded values&lt;br&gt;
✔️ Accessible. The text is written within the html code (no pseudo element, no duplicated text)&lt;br&gt;
✔️ You can use any text you want without changing the code.&lt;br&gt;
✔️ No browser support issue. All the properties I am using are supported by most of the browsers. We can also remove the use of flexbox: &lt;a href="https://codepen.io/t_afif/pen/VwWvmxe"&gt;https://codepen.io/t_afif/pen/VwWvmxe&lt;/a&gt;&lt;br&gt;
❌ Doesn't support multi-line of text. Well, I need one drawback 😜&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-about-the-caret"&gt;
  &lt;/a&gt;
  What about the caret?
&lt;/h3&gt;

&lt;p&gt;You can easily add one using box-shadow:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWoapaj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-about-multiple-text"&gt;
  &lt;/a&gt;
  What about multiple text?
&lt;/h2&gt;

&lt;p&gt;The above was only the first part of the "real" typewriter effect I am aiming for.&lt;/p&gt;

&lt;p&gt;See it in play:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWgjpyb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The HTML code is still a basic one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;I am &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;a CSS Hacker&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;an expert web developer&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;a lazy person!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;word-break&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;break-all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="m"&gt;12s&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;90&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;#0000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-300%&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The trick is to make all the spans under each other (that's why I used &lt;code&gt;display:grid&lt;/code&gt; on their parent container) so that the longest word will define the width of the main element.&lt;/p&gt;

&lt;p&gt;Then each span will animate like previously. The only difference is that, with a small transform trick, I will show only one at a time.&lt;/p&gt;

&lt;p&gt;If you remove the &lt;code&gt;overflow:hidden&lt;/code&gt; from the second span you can see what is happening:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/vYZNxmb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Notice the use of &lt;code&gt;max-width:max-content&lt;/code&gt; to limit the caret to the width of the actual text and not the width of the main element.&lt;/p&gt;

&lt;p&gt;You can also notice that 3 is used with many values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;12s = 3*(2*2s)&lt;/li&gt;
&lt;li&gt;steps(3)&lt;/li&gt;
&lt;li&gt;translateY(-300%) = translateY(3*-100%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes, that value can be a CSS variable. Our code will become &lt;strong&gt;scalable&lt;/strong&gt; and we can easily add as many text as we want:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/NWgGpyx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We have our scalable CSS only Typewriter Effect:&lt;/p&gt;

&lt;p&gt;✔️ No Javascript&lt;br&gt;
✔️ A basic HTML code&lt;br&gt;
✔️ No complex CSS code&lt;br&gt;
✔️ Accessible&lt;br&gt;
✔️ Works with any text content&lt;br&gt;
✔️ Scalable&lt;br&gt;
✔️ No browser support issue&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbHdBjab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/10Y2YMUNmQa9a0/giphy.gif%3Fcid%3Decf05e47exmnx38wexbglodixm9wlqq3tvj8nov47fba0tml%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbHdBjab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/10Y2YMUNmQa9a0/giphy.gif%3Fcid%3Decf05e47exmnx38wexbglodixm9wlqq3tvj8nov47fba0tml%26rid%3Dgiphy.gif%26ct%3Dg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Essential Concepts in JS</title>
      <author>Ambadi Ritik</author>
      <pubDate>Sat, 28 Aug 2021 18:36:27 +0000</pubDate>
      <link>https://dev.to/aritik/essential-concepts-in-js-4bbj</link>
      <guid>https://dev.to/aritik/essential-concepts-in-js-4bbj</guid>
      <description>&lt;p&gt;For first-timers , Javascript might seem easy at first with its C-like syntax...&lt;/p&gt;

&lt;p&gt;However the way it runs, the constant changes that are made to the language (ESNext) and its frameworks might overwhelm a beginner. &lt;br&gt;
I'm here to clear the confusion surrounding what I think is a beautiful , but most importantly , a &lt;em&gt;highly lucrative&lt;/em&gt; language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Highly Lucrative&lt;/em&gt;&lt;/strong&gt; because JS can do almost anything you want it to do today with much ease.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Want to build a Web Application?&lt;/strong&gt; No Problem. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Want to build a CLI Tool?&lt;/strong&gt; No Problem. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Want to build a Desktop App?&lt;/strong&gt; Puh. Easier done than said!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The increasingly vast amount of packages and libraries being made available daily indicate how abstract JS is when it comes to building a software application.&lt;/p&gt;

&lt;p&gt;JS however seems to receive a lot of hate , mostly because of how unconventional it is when compared to its rivals. It is confusing for anyone who might miss out on the theoretical aspects of JS.&lt;/p&gt;

&lt;p&gt;A lot of people overlook the theoretical aspects of Javascript before diving into the language. These concepts help us wrap our head around the different paths and patterns we take when building Javascript Applications. These patterns exist across every framework in JS Land so it makes a lot of sense to go through these concepts before learning the language itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ZVik7pBtu9dNS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ZVik7pBtu9dNS/giphy.gif" alt="Code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#features-of-js"&gt;
  &lt;/a&gt;
  Features Of JS
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#1-multiparadigm"&gt;
  &lt;/a&gt;
  (1) Multi-paradigm
&lt;/h4&gt;

&lt;p&gt;Javascript supports procedural , object-oriented and event-driven functional programming!&lt;br&gt;
Getting to grips with JS' Object Oriented Style of Programming can prove to be extremely beneficial.&lt;/p&gt;

&lt;p&gt;Object Oriented Programming helps programmers visualise components of a Software Application much more easily. &lt;br&gt;
Furthermore , learning Typescript (Javascript with Types) allows programmers to implement the best design patterns in the industry with much ease. These design patterns are used to solve the most common problems encountered in software programming in the most efficient manner possible.&lt;/p&gt;

&lt;p&gt;This versatility makes Javascript very approachable but also very powerful.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-interpreted"&gt;
  &lt;/a&gt;
  (2) Interpreted
&lt;/h4&gt;

&lt;p&gt;Javascript is different from C/C++ wherein , rather than a program being read at once , It is interpreted line-by-line. This is to say that JS will be slower than compiled languages like C/C++. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Javascript is infamous for being an extremely passive language during runtime. Troubleshooting for errors is extremely difficult. &lt;/p&gt;

&lt;p&gt;Don't be disheartened however. With time and practice , you'll learn how to comfortably sail through. The most common error involves your variables returning &lt;code&gt;NULL&lt;/code&gt; values. When such issues do creep up , head onto Stack Overflow because I guarantee you , you're not the first to get stuck with an error , no matter how niche it may be. It's always a good idea however to use the &lt;code&gt;console.log()&lt;/code&gt; liberally while your projects are undergoing development. This helps you pick out exactly the moment in your program's lifecycle , where your variable might have flaked out.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-singlethreaded"&gt;
  &lt;/a&gt;
  (3) Single-Threaded
&lt;/h4&gt;

&lt;p&gt;Javascript can only perform one single task at a time. It queues different tasks into different queues based on type.&lt;br&gt;
In the most abstract sense , Javascript will basically group Synchronous tasks and Asynchronous tasks and queue them separately. &lt;/p&gt;

&lt;p&gt;Synchronous tasks are statements that are processed the moment they're encountered , i.e they run instantly. These tasks include log statements , variable declarations , conditional checking etc.&lt;/p&gt;

&lt;p&gt;Asynchronous tasks involve tasks that may take a variable amount of time to return an output. An example for asynchronous tasks may be requesting information from Web APIs. &lt;/p&gt;

&lt;p&gt;Additionally, Javascript also has a Job Queue which is used to deal with a JS Feature called Promises.&lt;/p&gt;

&lt;p&gt;You can practically see Javascript's single threaded nature by right clicking on this web page and hitting the inspect tab. Next , go to the console tab on the window that has just opened. Type the following code and hit enter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now observe that this page has become completely unresponsive. This is because the Javascript on this page is now busy running the infinite while loop that we executed above.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-nonblocking"&gt;
  &lt;/a&gt;
  (4) Non-Blocking
&lt;/h4&gt;

&lt;p&gt;We've discussed about Asynchronous tasks before. Since JS runs in a single-threaded environment , by default , it waits for nobody!&lt;/p&gt;

&lt;p&gt;Asynchronous code blocks are executed only after all the Synchronous code blocks are executed irrespective of the code's position in the program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm the first statement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm the second statement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm the third statement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;console.log()&lt;/code&gt; logs the statement inside it to the console. &lt;br&gt;
The &lt;code&gt;setTimeout()&lt;/code&gt; function described above runs the second statement after one second. &lt;/p&gt;

&lt;p&gt;On examining the output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I'm the first statement
I'm the third statement
I'm the second statement
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that the third statement was logged before the second statement. This is because of JS's inherent method of handling Sync and Async code blocks. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xAxahR7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vuqbpa4bgignff4yym2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xAxahR7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vuqbpa4bgignff4yym2h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-highlevel"&gt;
  &lt;/a&gt;
  (5) High-level
&lt;/h4&gt;

&lt;p&gt;Javascript is a high-level language. High-Level languages could simply mean that they're much more closer to the language humans speak. High-level languages are capable of offering more features to help programmers better express what they're trying to build.&lt;/p&gt;

&lt;p&gt;This high-level nature of Javascript helps it best serve the client-side portion of the web. A major limitation for JS used to be that it could only be served on the client-side and couldn't do file manipulations like most server-side languages could.&lt;/p&gt;

&lt;p&gt;However this has changed with &lt;code&gt;NodeJS&lt;/code&gt; that allows developers to use Javascript to build Backend Servers. Therefore with just one language , a software developer can operate on both the server and client-side. This has led to Full Stack Engineers becoming prominent.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-dynamically-typed"&gt;
  &lt;/a&gt;
  (6) Dynamically Typed
&lt;/h4&gt;

&lt;p&gt;Javascript is a dynamically typed language. This means that unlike C where we need to specify the datatype for a variable , we can instead use &lt;code&gt;type-inference&lt;/code&gt; in Javascript to automatically sense the type of data , a variable holds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In C variables must have datatypes. In order to change datatypes from one type to //another , we need to use type-casting&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mo"&gt;036&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Javascript , we use &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; to declare either variables or constants respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Hello World&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JS is awesome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// JS is awesome&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I changed my mind&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Error: const cannot be changed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While type inference may seem like a plus point because of its ease of use , it immediately becomes a con for larger projects that require type safety as a feature.&lt;/p&gt;

&lt;p&gt;For this reason , larger projects use TypeScript which is just a wrapper over Javascript that provides types , interfaces and various other features. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learning-strategy"&gt;
  &lt;/a&gt;
  Learning Strategy
&lt;/h3&gt;

&lt;p&gt;It takes a while to settle in JS Land but I have a simple checklist that serves as &lt;code&gt;Minimum Requirements&lt;/code&gt; for learning frameworks like Express or ReactJS. &lt;/p&gt;

&lt;p&gt;First off , do not rush towards learning these frameworks. Take your time mastering Vanilla Javascript .&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The Basics
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Variables and Constants&lt;/li&gt;
&lt;li&gt;Conditional Blocks (if-else)&lt;/li&gt;
&lt;li&gt;Loops (for, while , forEach)&lt;/li&gt;
&lt;li&gt;Switch Case&lt;/li&gt;
&lt;li&gt;Functions &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are your essential programming fundamentals.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-advanced-part-minimum-requirements"&gt;
  &lt;/a&gt;
  The Advanced Part (Minimum Requirements)
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Async/Await &lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Classes in Javascript&lt;/li&gt;
&lt;li&gt;Rest/Spread Syntax&lt;/li&gt;
&lt;li&gt;Array/Object Iterators&lt;/li&gt;
&lt;li&gt;Array Destructuring &lt;/li&gt;
&lt;li&gt;Modules (import,export)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Continue learning as you build projects and soon enough , you'll have a pretty strong grasp on the language.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>10 Cool Things You Can Do with Github.dev 😎</title>
      <author>Jonathan Carter</author>
      <pubDate>Sat, 28 Aug 2021 18:02:02 +0000</pubDate>
      <link>https://dev.to/lostintangent/10-awesome-things-you-can-do-with-github-dev-5fm7</link>
      <guid>https://dev.to/lostintangent/10-awesome-things-you-can-do-with-github-dev-5fm7</guid>
      <description>&lt;p&gt;GitHub recently released &lt;a href="https://github.dev"&gt;github.dev&lt;/a&gt;, which if you haven't heard, allows you to press &lt;code&gt;.&lt;/code&gt; from any repo, in order to open it within Visual Studio Code, running entirely in your browser (🤯). On its own, this experience represents a &lt;em&gt;huge&lt;/em&gt; step forward, for how you can &lt;em&gt;view&lt;/em&gt; and &lt;em&gt;edit&lt;/em&gt; code that's stored in GitHub.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJkNTHVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8hp-_MWEAQRYeB.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtqGx4H6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1414990564408262661/r6YemvF9_normal.jpg" alt="GitHub profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        GitHub
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @github
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🤫  New shortcut: Press . on any GitHub repo. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:14 PM - 11 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1425505817827151872" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1425505817827151872" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1425505817827151872" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;However, what might not be immediately obvious, is that github.dev enables something even more powerful: the ability to customize and create entirely new &lt;strong&gt;GitHub-native workflows&lt;/strong&gt;. Instead of relying on &lt;a href="https://github.com/collections/github-browser-extensions"&gt;browser extensions&lt;/a&gt; to augment github.com, you can now take advantage of the editor you already love, and it's &lt;a href="https://marketplace.visualstudio.com/vscode"&gt;&lt;em&gt;prolific&lt;/em&gt; ecosystem&lt;/a&gt;, to make GitHub even more fun. To illustrate what this means, let's take a look at 10 examples of what you can already do with it today 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-personalizations"&gt;
  &lt;/a&gt;
  1. 💄 Personalizations
&lt;/h2&gt;

&lt;p&gt;Developers &lt;em&gt;love&lt;/em&gt; to personalize their editor, in order to make it more efficient, ergonomic, and visually appealing. Since github.dev is based on VS Code, you can customize your keybindings, color theme, file icons, snippets, and more. Even cooler, you can enable &lt;a href="https://code.visualstudio.com/docs/editor/settings-sync"&gt;settings sync&lt;/a&gt; and roam your personalizations between VS Code, github.dev and &lt;a href="https://github.com/features/codespaces"&gt;Codespaces&lt;/a&gt;. That way, no matter where you're reading/editing code, you'll immediately feel at home 💖&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSG3mtK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9lhmoeXIAM7-Bl.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCIUO99w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1406699569950375936/CgsthMmD_normal.jpg" alt="Philipp Kief profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Philipp Kief
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @philippkief
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Just published v4.10.0 of the Material Icon Theme which can now be used with &lt;a href="https://t.co/QcIEOchT2b"&gt;github.dev&lt;/a&gt; 🔥 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:32 PM - 24 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1430281957083058179" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1430281957083058179" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1430281957083058179" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#2-sharing-deep-links"&gt;
  &lt;/a&gt;
  2. ✉️ Sharing Deep Links
&lt;/h2&gt;

&lt;p&gt;In addition to pressing &lt;code&gt;.&lt;/code&gt; from a repo page, you can also press &lt;code&gt;.&lt;/code&gt; when viewing a specific file on GitHub.com. Furthermore, if you select some text in the currently opened file, and press &lt;code&gt;.&lt;/code&gt;, then when VS Code is opened, both the file and text selection will be maintained. You can then copy the URL in your browser, and send that to others, in order to share that &lt;em&gt;exact same context&lt;/em&gt; 🔥&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yElJmPGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9pdcqiVUAEa13W.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--J4Hqv49q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1373492708589772804/m0W7RNaK_normal.jpg" alt="Tyler Leonhardt #BlackLivesMatter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tyler Leonhardt #BlackLivesMatter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/tylerleonhardt"&gt;@tylerleonhardt&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      My current favorite thing is going into a file on &lt;a href="https://t.co/vCbBIoCq90"&gt;github.com&lt;/a&gt;, selecting a few lines of code by clicking on the line numbers, and then hitting ".". That text is then highlighted in &lt;a href="https://t.co/FIQYIm5ODE"&gt;github.dev&lt;/a&gt;…&lt;br&gt;&lt;br&gt;Incredibly delightful and works exactly how I would expect. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:55 PM - 25 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1430559579218137096" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1430559579218137096" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1430559579218137096" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; Click &lt;a href="https://github.dev/lostintangent/gitdoc/blob/master/src/extension.ts#L26-L27"&gt;this link&lt;/a&gt; to see how the &lt;a href="https://aka.ms/gitdoc"&gt;GitDoc extension&lt;/a&gt; subscribes to repo events in VS Code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#3-pull-request-reviews"&gt;
  &lt;/a&gt;
  3. ✅ Pull Request Reviews
&lt;/h2&gt;

&lt;p&gt;In addition to hitting &lt;code&gt;.&lt;/code&gt; on a repo or file on github.com, you can also press it when viewing a pull request. This enables you to review the PR using a rich, multi-file view, that includes the ability to view &amp;amp; reply to comments, suggest changes, and even approve/merge the PR directly from the editor.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AYrXWxQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9I5DW-X0AUINAA.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tg7D8qgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1030418265598771200/2WcWmcWz_normal.jpg" alt="Sumit Kumar profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Sumit Kumar
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/tweetsofsumit"&gt;@tweetsofsumit&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      How epic is this? &lt;a href="https://twitter.com/github"&gt;@github&lt;/a&gt; codespaces (press `.` in any file) shows PR review comments in-line... I'm using this so much already because it's faster than checking out the reviewed branch and loading the local environment. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:05 AM - 19 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428266771807625226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428266771807625226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428266771807625226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; Click &lt;a href="https://github.dev/microsoft/codetour/pull/153"&gt;this link&lt;/a&gt; to review the PR for adding a regex parser to the &lt;a href="https://aka.ms/codetour"&gt;CodeTour extension&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#4-editing-images-diagrams"&gt;
  &lt;/a&gt;
  4. 📊 Editing Images + Diagrams
&lt;/h2&gt;

&lt;p&gt;Beyond editing text files, VS Code also allows extensions to contribute &lt;a href="https://code.visualstudio.com/api/extension-guides/custom-editors"&gt;custom editors&lt;/a&gt;, which enables you efficently edit any file type in your project. For example, if you install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio"&gt;Drawio extension&lt;/a&gt;, you can view and edit rich diagrams.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDkqu00U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8mbuSaX0AAAkEp.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nlFN-ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1260316972832751617/ga7mSqIB_normal.jpg" alt="Henning Dieterichs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Henning Dieterichs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @hediet_dev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Btw. you can install &lt;a href="https://t.co/x23SFl8Xnu"&gt;Draw.io&lt;/a&gt; in &lt;a href="https://t.co/oY7jxkS7SF"&gt;github.dev&lt;/a&gt; ;) 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:41 PM - 12 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1425844785240236032" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1425844785240236032" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1425844785240236032" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Additionally, if you install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=Tyriar.luna-paint"&gt;Luna Paint extension&lt;/a&gt; you can edit images (PNG, JPG, etc.).&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lnJtcEiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E9uAad_VgAQV4zh.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVL4ZRjK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/776617605389877248/aYSZBtVe_normal.jpg" alt="Daniel Imms profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Daniel Imms
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @tyriar
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The new release of Luna Paint for &lt;a href="https://twitter.com/code"&gt;@code&lt;/a&gt; is out! This includes some minor features as well as initial support &lt;a href="https://t.co/Eoe1xBjj4j"&gt;github.dev&lt;/a&gt;:&lt;br&gt;&lt;br&gt;1️⃣ Go to your &lt;a href="https://t.co/XNVKZZ7Ake"&gt;github.com&lt;/a&gt; repo&lt;br&gt;2️⃣ Press .&lt;br&gt;3️⃣ Start editing&lt;br&gt;&lt;br&gt;Release notes: &lt;a href="https://t.co/gYyaSdAtb4"&gt;github.com/lunapaint/vsco…&lt;/a&gt;&lt;br&gt;Install: &lt;a href="https://t.co/yS7md8qlMk"&gt;marketplace.visualstudio.com/items?itemName…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:04 PM - 26 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1430878752750280709" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1430878752750280709" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1430878752750280709" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In each case, your edits are automatically saved, and you can commit/push changee back to your GitHub repo via the &lt;code&gt;Source Control&lt;/code&gt; tab. Even cooler, you can share a deep link for an image/diagram with others, and as long as they install neccessary extension(s), they'll be able to collaborate with you via the exact same experience. This effectively makes github.dev a hackable "canvas" for any file type that is stored in GitHub 😎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-%F0%9F%97%BA-codebase-walkthroughs"&gt;
  &lt;/a&gt;
  5. 🗺 Codebase Walkthroughs
&lt;/h2&gt;

&lt;p&gt;Learning a new codebase is hard, since it's typically unclear where to start, or how various files/folders relate to each other. With github.dev, you can install the &lt;a href="https://aka.ms/codetoue"&gt;CodeTour extension&lt;/a&gt;, which allows you to create and playback guided walkthroughs of a codebase. Since github.dev is available entirely in the browser, this makes it easy for anyone on the team, or in your community, to get up to speed quickly, without needing to install anything locally.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hiW24BH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E8nQMw8UYAQh0a_.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pcg9d-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/771496206/Twitter_normal.png" alt="Jonathan Carter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Carter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lostintangent"&gt;@lostintangent&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🗺️ When I initially shipped CodeTour, the first thing folks asked for was a web player. As of yesterday, you can now go to any GitHub repo w/a tour, and simply press "." to get a walkthrough of the codebase 🔥 (after installing the CodeTour extension 😎) 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:26 PM - 12 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1425901618780729345" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1425901618780729345" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1425901618780729345" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; Open &lt;a href="https://github.dev/microsoft/codetour"&gt;this repo&lt;/a&gt; and install CodeTour. You'll be presented with a toast that asks if you'd like to take the &lt;code&gt;Getting Started&lt;/code&gt; tour.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#6-code-snippets-gists"&gt;
  &lt;/a&gt;
  6. 📕 Code Snippets + Gists
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://gist.github.com"&gt;Gists&lt;/a&gt; are a popular way for developers to manage and share code snippets, config files, notes, and more. In github.dev, you can install the &lt;a href="https://aka.ms/gistpad"&gt;GistPad extension&lt;/a&gt; and view/edit your gists. This allows you to maintain code snippets across multiple repos, and access them from both your desktop editor, as well as whenever you're browsing/editing code on GitHub.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W9WuEbZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8w8aCiVoAIYOLl.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pcg9d-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/771496206/Twitter_normal.png" alt="Jonathan Carter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Carter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lostintangent"&gt;@lostintangent&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      📢 If you're loving the new &lt;a href="https://t.co/Am4EhpKJfJ"&gt;github.dev&lt;/a&gt; editor, and wish you could use it for gists, then you're in luck! You can install the GistPad extension (&lt;a href="https://t.co/C4vZgHmZhi"&gt;aka.ms/gistpad&lt;/a&gt;), and create/edit gists directly in-browser 🔥 I use this for managing code snippets, notes, etc. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:36 PM - 14 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1426583542432112647" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1426583542432112647" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1426583542432112647" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#7-web-playgrounds-tutorials"&gt;
  &lt;/a&gt;
  7. 🎢 Web Playgrounds + Tutorials
&lt;/h2&gt;

&lt;p&gt;Coding playgrounds (e.g. CodePen, JSFiddle) are a popular way to learn programming languages/libraries, and then share them with others. With github.dev, you can install the &lt;a href="https://aka.ms/codeswing"&gt;CodeSwing extension&lt;/a&gt; and begin creating web playgrounds, using your existing editor setup, and with your files persisted back to GitHub. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yq9mZ5WU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E8srTzPUUAM2VF-.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pcg9d-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/771496206/Twitter_normal.png" alt="Jonathan Carter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Carter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lostintangent"&gt;@lostintangent&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Another fun use case for the &lt;a href="https://t.co/Am4EhpKJfJ"&gt;github.dev&lt;/a&gt; editor: web playgrounds. Create interactive samples and then share them, in a way that's easily remixable. Check out this demo, and install the CodeSwing/CodeTour extensions. Directly from the browser! &lt;a href="https://t.co/XVMz5aKahV"&gt;github.dev/lostintangent/…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:50 PM - 13 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1426285127244468226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1426285127244468226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1426285127244468226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; Open &lt;a href="https://github.dev/lostintangent/rock-paper-scissors"&gt;this repo&lt;/a&gt; and install CodeSwing + CodeTour. After a few seconds, you'll be presented with the playground environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#8-notetaking-knowledge-bases"&gt;
  &lt;/a&gt;
  8. ✏️ Notetaking + Knowledge Bases
&lt;/h2&gt;

&lt;p&gt;VS Code is a world-class markdown editor, and therefore, you can start using github.dev to edit and preview all of your personal notes/documentation. Even cooler, you can install the &lt;a href="https://aka.ms/wikilens"&gt;WikiLens extension&lt;/a&gt; in order to get a Roam/Obsidian-like editing experience, for maintaining a knowledge base, that's stored in GitHub and is able to benefit from the ecosystem of extensions/personalizations for VS Code.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyLCYG4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E9aKX9mVoAIvxQU.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pcg9d-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/771496206/Twitter_normal.png" alt="Jonathan Carter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Carter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lostintangent"&gt;@lostintangent&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🗒 I've started using &lt;a href="https://t.co/Am4EhpKJfJ"&gt;github.dev&lt;/a&gt; as my notetaking environment, but I missed having support for backlinks 😢 So I created WikiLens (&lt;a href="https://t.co/1Q72Cyqx4a"&gt;aka.ms/wikilens&lt;/a&gt;) to provide a wiki-like view for GitHub + markdown, along with rich link navigation. All.From.The.Browser 🥰 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:40 PM - 22 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1429483662257446916" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1429483662257446916" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1429483662257446916" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#9-jupyter-notebooks"&gt;
  &lt;/a&gt;
  9. 📓 Jupyter Notebooks
&lt;/h2&gt;

&lt;p&gt;In addition to coding playgrounds, another popular way to learn and share code, is via Jupyter notebooks. If you open an &lt;code&gt;.ipynb&lt;/code&gt; file in github.dev, you can immediately view the cells and cached outputs of the notebook. Even better, you can install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=joyceerhl.vscode-pyodide"&gt;Pyodide extension&lt;/a&gt; in order to actually run Python code, entirely in your browser!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7rMPmzjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1425485497166549000/pu/img/WXPtAvr99I9oTDlO.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dK-8geE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/626762747330457600/X3Bx503W_normal.jpg" alt="👩‍💻 Paige Bailey #BlackLivesMatter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        👩‍💻 Paige Bailey #BlackLivesMatter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @dynamicwebpaige
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🥳 Am excited to share that we have released &lt;a href="https://t.co/AIqjEKH3OL"&gt;github.dev&lt;/a&gt;: a completely in-browser &lt;a href="https://twitter.com/github"&gt;@github&lt;/a&gt;+&lt;a href="https://twitter.com/code"&gt;@code&lt;/a&gt; editing tool.&lt;br&gt;&lt;br&gt;You can even *run* &lt;a href="https://twitter.com/ProjectJupyter"&gt;@ProjectJupyter&lt;/a&gt; notebooks with the entire &lt;a href="https://twitter.com/hashtag/Python"&gt;#Python&lt;/a&gt; data science stack, using the &lt;a href="https://twitter.com/hashtag/Pyodide"&gt;#Pyodide&lt;/a&gt; extension (&lt;a href="https://t.co/vHoBFyyZhd"&gt;marketplace.visualstudio.com/items?itemName…&lt;/a&gt;)!&lt;br&gt;&lt;br&gt;cc &lt;a href="https://twitter.com/jakevdp"&gt;@jakevdp&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:00 PM - 11 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1425502379777019909" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1425502379777019909" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1425502379777019909" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#10-%F0%9F%9B%A0-creating-your-own-extension"&gt;
  &lt;/a&gt;
  10. 🛠 Creating Your Own Extension!
&lt;/h2&gt;

&lt;p&gt;As you probably noticed, most of the items above were enabled by means of an extension, that someone created and published to the marketplace. Since VS Code is &lt;a href="https://code.visualstudio.com/api/references/vscode-api"&gt;fully extensible&lt;/a&gt;, using simple JavaScript APIs, you can create your own extensions that support not only VS Code desktop, but also, &lt;a href="https://github.com/microsoft/vscode-docs/blob/vnext/api/extension-guides/web-extensions.md"&gt;github.dev&lt;/a&gt;. So if you have an awesome idea, for how to make coding on GitHub more productive and fun, then you now have everything you need to get started 🏃&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Asus-ESS : Easy setup script for setting up laptops after GNU/Linux installs</title>
      <author>Swastik Dwivedi</author>
      <pubDate>Sat, 28 Aug 2021 17:53:22 +0000</pubDate>
      <link>https://dev.to/drunckj/asus-ess-easy-setup-script-for-setting-up-laptops-after-gnu-linux-installs-3o67</link>
      <guid>https://dev.to/drunckj/asus-ess-easy-setup-script-for-setting-up-laptops-after-gnu-linux-installs-3o67</guid>
      <description>&lt;h1&gt;
  &lt;a href="#github-asusess"&gt;
  &lt;/a&gt;
  Github : &lt;a href="https://github.com/drunckj/Asus-ESS"&gt;Asus-ESS&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;I Distrohop a lot and I found myself doing all this stuff manually which eventually got tiresome. So I created this script to help other Distrohoppers and new Linux users for easy setup and fixing of common issues.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features-of-script"&gt;
  &lt;/a&gt;
  Features of script
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#it-takes-backup-before-manipulating-stuff-for-easy-recovery"&gt;
  &lt;/a&gt;
  It takes backup before manipulating stuff for easy recovery
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8M7ln-FA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/drunckj/Asus-ESS/master/screenshots/mainmenu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8M7ln-FA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/drunckj/Asus-ESS/master/screenshots/mainmenu.png" alt="Main menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#supported-package-managers"&gt;
  &lt;/a&gt;
  Supported Package managers
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jlV8s13L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/drunckj/Asus-ESS/master/screenshots/pkgmgr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jlV8s13L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/drunckj/Asus-ESS/master/screenshots/pkgmgr.png" alt="Package Manager"&gt;&lt;/a&gt;&lt;br&gt;
On running the script for the first time, it will ask for your package manager.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asusctl-only-for-asus-laptops"&gt;
  &lt;/a&gt;
  Asusctl: only for Asus laptops
&lt;/h2&gt;

&lt;p&gt;It will install Asusctl which is a tool developed for Asus laptops as an alternative of Armourycrate which used in Windows. It manages CPU profiles, fans, RGBs and a lot more. So if you have never heard about Asusctl, here is a link for it : &lt;a href="https://asus-linux.org/asusctl/"&gt;Asusctl&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mic-not-working-option"&gt;
  &lt;/a&gt;
  Mic not working option
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UN1aaW8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50874358/131223833-020af799-253a-4a28-b40b-dc68db0cd09b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UN1aaW8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50874358/131223833-020af799-253a-4a28-b40b-dc68db0cd09b.png" alt="Mic not working"&gt;&lt;/a&gt;&lt;br&gt;
Many a times some Linux Distros have an issue of determining your codec. This option prints your codec and gives u a link to check what codec you would require for proper functioning of your microphone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mount-ntfs-partitions-at-boot"&gt;
  &lt;/a&gt;
  Mount Ntfs partitions at boot
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T9S2mkVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50874358/131224011-8c02df9f-b80f-4fd6-9330-682e4734035d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T9S2mkVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50874358/131224011-8c02df9f-b80f-4fd6-9330-682e4734035d.png" alt="ntfs partition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAAAqyNx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50874358/131224010-8f26ae07-b3d3-4067-b220-08f355ab071a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAAAqyNx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50874358/131224010-8f26ae07-b3d3-4067-b220-08f355ab071a.png" alt="Ntfspartition"&gt;&lt;/a&gt;&lt;br&gt;
Dual booting a laptop has its own issues. Many a times Windows causes issues with mounting NTFS partitions under Linux. This option gives you an easy approach to mount your partitions at boot without going through the wiki. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#squeeze-maximum-battery-life"&gt;
  &lt;/a&gt;
  Squeeze Maximum Battery life
&lt;/h2&gt;

&lt;p&gt;Most Linux distros ship with Tlp by defaullt as it helps save power and minimize heating up under loads. This options installs a Tlp configuration file which is customized for saving power on laptops with an igpu and dgpu. It also installs a systemctl service file which puts pci to powersaving mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cache-and-unused-dependencies"&gt;
  &lt;/a&gt;
  Cache and unused dependencies
&lt;/h2&gt;

&lt;p&gt;I love Linux but sometimes I find myself in dependency hell when things don't uninstall along with their dependencies. This option helps take care of that. It uninstalls dependency packages left after removal of applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pulseffects-presets"&gt;
  &lt;/a&gt;
  Pulseffects presets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--40OR-ZGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/drunckj/Asus-ESS/master/screenshots/presets.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--40OR-ZGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/drunckj/Asus-ESS/master/screenshots/presets.png" alt="pulseffects"&gt;&lt;/a&gt;&lt;br&gt;
Audio under Linux can be a lot customizable which might overwhelm some people. This script installs the most useful and generic presets for getting good quality sound output from your machines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mic-input-key-not-working"&gt;
  &lt;/a&gt;
  Mic input key not working
&lt;/h2&gt;

&lt;p&gt;This option is only for Asus laptops. The issue is that the current keycode being emitted by the driver is only recognised by Wayland. X11 and desktops using X11 require F20 to be emitted. This option creates a new key and registers it in the hardware database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nvidia-modules-not-loading-in-opensuse-after-update"&gt;
  &lt;/a&gt;
  Nvidia modules not loading in opensuse after update
&lt;/h2&gt;

&lt;p&gt;Due to opensuse's rolling nature the kernel gets updated regularly but the nvidia kernel modules are not loaded up with the new kernel. This option re-installs the kernel modules.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-to-buy-me-a-coffee-paypal-cryptopreferred"&gt;
  &lt;/a&gt;
  Want to buy me a coffee : &lt;a href="https://www.paypal.com/paypalme/drunkcj"&gt;Paypal&lt;/a&gt; || &lt;a href="https://drunckj.github.io/drunkcj-crypto-donation/"&gt;Crypto(preferred)&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Getting Started With API {day -15}</title>
      <author>Al Siam</author>
      <pubDate>Sat, 28 Aug 2021 17:49:49 +0000</pubDate>
      <link>https://dev.to/alsiamworld/getting-started-with-api-day-15-4p80</link>
      <guid>https://dev.to/alsiamworld/getting-started-with-api-day-15-4p80</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-15"&gt;
  &lt;/a&gt;
  100daysofcode [day - 15]
&lt;/h1&gt;

&lt;p&gt;Getting much pleasure working with API. Today I learned something about API and I will learn it in depth soon. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8cZhd2B9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1pi0mimjxk03tjf4nwia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cZhd2B9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1pi0mimjxk03tjf4nwia.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>UX 101 📲: Nielsen's 10 Usability Heuristic Principles for User Interface Design (1-5)</title>
      <author>_CODE</author>
      <pubDate>Sat, 28 Aug 2021 16:59:37 +0000</pubDate>
      <link>https://dev.to/underscorecode/ux-101-nielsen-s-10-usability-heuristic-principles-for-user-interface-design-1-5-1l5d</link>
      <guid>https://dev.to/underscorecode/ux-101-nielsen-s-10-usability-heuristic-principles-for-user-interface-design-1-5-1l5d</guid>
      <description>&lt;p&gt;Hello, everybody! 👋&lt;/p&gt;

&lt;p&gt;And welcome to the first lecture of the &lt;strong&gt;UX 101 series&lt;/strong&gt; 🙌&lt;/p&gt;

&lt;p&gt;In this series, we will be talking about &lt;strong&gt;UX&lt;/strong&gt; and good practices when it comes to &lt;strong&gt;interface design&lt;/strong&gt; and &lt;strong&gt;user interaction&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;In the first two lessons (this one and the following one), we'll be studying in depth the Nielsen's 10 Usability Heuristic Principles for User Interface Design.&lt;/p&gt;

&lt;p&gt;In this first lecture we'll cover &lt;strong&gt;the first five principles&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, with all this said, let's dive into today's lesson 👇&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-heuristics"&gt;
  &lt;/a&gt;
  What are &lt;em&gt;heuristics&lt;/em&gt;?
&lt;/h1&gt;

&lt;p&gt;Heuristics are &lt;strong&gt;techniques&lt;/strong&gt; used to improve the usability of a system based on a previous experience. This improvement consists basically on &lt;strong&gt;solving existent problems&lt;/strong&gt; and &lt;strong&gt;identifying the necessities&lt;/strong&gt; of the said system during the iterative design cycle.&lt;/p&gt;

&lt;p&gt;Even though this method is far from being perfect or optimal, it &lt;strong&gt;speeds up the process of development&lt;/strong&gt; and provides a way to start solving issues as soon as they are discovered and identified.&lt;/p&gt;

&lt;p&gt;Let's now turn our attention to the &lt;strong&gt;first five Nielsen's Principles&lt;/strong&gt; for User Interface Design: &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-visibility-of-system-status-%F0%9F%96%A5"&gt;
  &lt;/a&gt;
  1. Visibility of system status 🖥
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#main-idea"&gt;
  &lt;/a&gt;
  💡 Main idea
&lt;/h3&gt;

&lt;p&gt;The system has to &lt;strong&gt;inform&lt;/strong&gt; the users about the current system status and what is going on &lt;strong&gt;at all times&lt;/strong&gt;, by providing them with &lt;strong&gt;appropriate feedback&lt;/strong&gt; within a &lt;strong&gt;reasonable time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The system status includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where the user is within the navigation tree.&lt;/li&gt;
&lt;li&gt;Where the user is within a process derived from a taken action.&lt;/li&gt;
&lt;li&gt;If the system is stable and everything is working as it should or something went wrong.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This principle is necessary to make the the user capable of deciding which their next steps will be, based on what's happening at that particular moment (&lt;strong&gt;anticipation&lt;/strong&gt;), since they know beforehand where they are and what the current system status is.&lt;/p&gt;

&lt;p&gt;Another advantage of implementing this principle is the &lt;strong&gt;reliability&lt;/strong&gt; we're going to convey to the user. They will end up &lt;strong&gt;trusting&lt;/strong&gt; not only the product or the service we're trying to &lt;em&gt;sell&lt;/em&gt;, but also the brand or the individual behind the service (let's say, for example, a &lt;em&gt;blogger&lt;/em&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-goals"&gt;
  &lt;/a&gt;
  💎 Main goals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make the system &lt;strong&gt;predictable&lt;/strong&gt; and let the users know that they have the &lt;strong&gt;control&lt;/strong&gt;, which, consequently, will send them to think that everything's going to proceed in the way they wish and expect.&lt;br&gt;
The less information they get, the easier it will be that they think that they're not in control of the situation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the user feeling &lt;strong&gt;comfortable&lt;/strong&gt; while they go through a series of steps towards a goal.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a recurring &lt;em&gt;client&lt;/em&gt; (or visitor) and convey trust and reliability looking to the future.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  🔮 Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Always inform the user on what's going on. Always. No matter what. &lt;strong&gt;Communication&lt;/strong&gt; and &lt;strong&gt;transparency&lt;/strong&gt; are key (like in relationships with people in real world). Let them know the result of their actions and don't leave them wondering if they made a mistake after having taken action over something.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nothing&lt;/strong&gt; that affects the users &lt;strong&gt;should happen without informing&lt;/strong&gt; them beforehand. Let alone something that leads to an error condition or a situation from which they don't know how to recover.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you can avoid this type of situations and they happen at some point, tell the user &lt;strong&gt;immediately&lt;/strong&gt;. Or, at least, as soon as possible. &lt;strong&gt;Quick response&lt;/strong&gt; results in &lt;strong&gt;early recovery from errors&lt;/strong&gt; and &lt;strong&gt;providing enough information&lt;/strong&gt; leads to &lt;strong&gt;better decisions&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build &lt;strong&gt;trust&lt;/strong&gt; through interacting with your users.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end of the day, this principle refers more to &lt;strong&gt;how well you communicate&lt;/strong&gt; with your users than the fact of communicate with them itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-we-do-as-ui-designers"&gt;
  &lt;/a&gt;
  📱 What can we do as UI designers?
&lt;/h3&gt;

&lt;p&gt;A good start would be to implement a series of standard elements that help the user notice the status of the system, like the following:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#breadcrumbs"&gt;
  &lt;/a&gt;
  Breadcrumbs
&lt;/h4&gt;

&lt;p&gt;The user should know where they exactly are within the navigation tree at all times.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lOR1Lu4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ij6sxpnwf2cz6vmht4pu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lOR1Lu4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ij6sxpnwf2cz6vmht4pu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#provide-feedback-of-a-taken-action"&gt;
  &lt;/a&gt;
  Provide feedback of a taken action
&lt;/h4&gt;

&lt;p&gt;For example, by highlighting an element after taking an action on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGwH6EiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdd7xk0e49u8wtavao3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGwH6EiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdd7xk0e49u8wtavao3s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#progress-bars"&gt;
  &lt;/a&gt;
  Progress bars
&lt;/h4&gt;

&lt;p&gt;Always let the user know where they are within a multi-step process and show progress bars when appropriate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8iRXQ43t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jge58b3psd5nkhz9bw4z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8iRXQ43t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jge58b3psd5nkhz9bw4z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#spinners"&gt;
  &lt;/a&gt;
  Spinners
&lt;/h4&gt;

&lt;p&gt;Implement spinners to let the user know that they have to wait for an action to complete. Don't leave them wondering what's going on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L1CaeURR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8exl658600kuh35l6z4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L1CaeURR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8exl658600kuh35l6z4k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#keywords-to-this-principle"&gt;
  &lt;/a&gt;
  🤖 Keywords to this principle
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Communication&lt;/li&gt;
&lt;li&gt;Transparency&lt;/li&gt;
&lt;li&gt;Trust&lt;/li&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Anticipation&lt;/li&gt;
&lt;li&gt;Feedback &lt;/li&gt;
&lt;li&gt;Information&lt;/li&gt;
&lt;li&gt;Decisions&lt;/li&gt;
&lt;li&gt;Predictability&lt;/li&gt;
&lt;li&gt;Control&lt;/li&gt;
&lt;li&gt;Comfort&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#2-match-between-the-system-and-the-real-world-%F0%9F%96%A5"&gt;
  &lt;/a&gt;
  2. Match between the system and the real world 🖥↔️🌎
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#main-idea"&gt;
  &lt;/a&gt;
  💡 Main idea
&lt;/h3&gt;

&lt;p&gt;The system should speak the users' language, this is, they have to be capable of easily understand everything they perceive while interacting with the system. &lt;/p&gt;

&lt;p&gt;Human beings find comfort in &lt;strong&gt;familiarity&lt;/strong&gt;, so bear in mind that it's fundamental to use concepts and words that the users already know, have an idea of and find easy to understand. That's what we understand by &lt;em&gt;familiar&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It's true that every person has a &lt;strong&gt;different understanding and perception&lt;/strong&gt; of the world: some things can be very obvious for you, but not that obvious for, let's say, a friend of yours.&lt;/p&gt;

&lt;p&gt;So, since this is something &lt;strong&gt;unavoidable&lt;/strong&gt; (but manageable), it's important to take this fact into mind, and, as a result, base every concept of the system in &lt;strong&gt;real world conventions&lt;/strong&gt;. &lt;strong&gt;Never assume that your understanding and your particular interpretation of the world match the ones of your final users&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These interpretations are formed based on previous experiences, familiarity with language and objects, beliefs, ideas and values, and are called &lt;strong&gt;mental models&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Each user has its own mental model and they &lt;strong&gt;carry these interpretations with them&lt;/strong&gt; from the real world to the digital world, so it's our work to ease this transition by expressing concepts appropriately.&lt;/p&gt;

&lt;p&gt;Since it's impossible to know what the vision of the world is for every user, the only thing we can do to create a suitable conceptual model for our system is to use &lt;strong&gt;logical statements&lt;/strong&gt; and concepts that are &lt;strong&gt;widely extended within society&lt;/strong&gt;. This will result in users making use of the system &lt;strong&gt;intuitively&lt;/strong&gt; and &lt;strong&gt;comfortably&lt;/strong&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#main-goals"&gt;
  &lt;/a&gt;
  💎 Main goals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Match user's expectations as to their interaction with the system.&lt;/li&gt;
&lt;li&gt;Let them know that you understand their needs and care about them: to show &lt;strong&gt;empathy&lt;/strong&gt; will make them feel important.&lt;/li&gt;
&lt;li&gt;Build &lt;strong&gt;trust&lt;/strong&gt; and set a feeling of &lt;strong&gt;familiarity&lt;/strong&gt; on their side, which will lead to &lt;strong&gt;loyal users&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  🔮 Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure your users &lt;strong&gt;understand&lt;/strong&gt; every piece of information they are interacting with and be aware of the importance that this fact has.&lt;br&gt;
Users should always be able to understand the meaning of everything they run into without having to go look it up in a search engine, so &lt;strong&gt;never use jargon or complex words&lt;/strong&gt;. Better use &lt;strong&gt;natural language&lt;/strong&gt; and present information in a &lt;strong&gt;natural and intuitive&lt;/strong&gt; order. Everything &lt;strong&gt;should flow naturally&lt;/strong&gt; to facilitate the user the task of proceeding when using the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Never assume&lt;/strong&gt; the way of making use of the system by an user and how will they behave while interacting with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do a &lt;strong&gt;research&lt;/strong&gt; on what &lt;strong&gt;kind of user&lt;/strong&gt; will interact with your system to find out what &lt;strong&gt;concepts are familiar&lt;/strong&gt; to them and what &lt;strong&gt;type of language&lt;/strong&gt; you should use, and adapt yours, if necessary.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#keywords-to-this-principle"&gt;
  &lt;/a&gt;
  🤖 Keywords to this principle
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Familiarity&lt;/li&gt;
&lt;li&gt;Logic&lt;/li&gt;
&lt;li&gt;Real world&lt;/li&gt;
&lt;li&gt;Perception&lt;/li&gt;
&lt;li&gt;Care&lt;/li&gt;
&lt;li&gt;Empathy&lt;/li&gt;
&lt;li&gt;Experience&lt;/li&gt;
&lt;li&gt;Natural&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#3-user-control-and-freedom"&gt;
  &lt;/a&gt;
  3. User control and freedom 👩‍💻👨‍💻
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#main-idea"&gt;
  &lt;/a&gt;
  💡 Main idea
&lt;/h3&gt;

&lt;p&gt;Users make mistakes, so they have to be provided with emergency exits in case they need to escape or recover from wrongly performed actions.&lt;/p&gt;

&lt;p&gt;But not only when they proceed in a wrong way: they always have to be &lt;strong&gt;allowed to correct mistakes&lt;/strong&gt; and &lt;strong&gt;change their minds&lt;/strong&gt;, especially when they open up a new page, screen or view (usually through clicking a provided link).&lt;/p&gt;

&lt;p&gt;A large amount of users still rely on browser's or device's back buttons instead of using the back links provided by the system, so it's important to pay close attention when leading actions towards new tabs since some users can have trouble trying to go back.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-types-of-emergency-exits"&gt;
  &lt;/a&gt;
  ◽️ Types of &lt;em&gt;emergency&lt;/em&gt; exits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Back link&lt;/strong&gt;: a link that allows the user to go back in a page, screen or view.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cancel link&lt;/strong&gt;: a link that allows the user to interrupt the process of an ongoing action.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Close link&lt;/strong&gt;: a link that allows the user to close an open view (e.g., modals).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Undo link&lt;/strong&gt;: a link that allows the user to reverse a taken action, which should also be ideally accompanied by its corresponding &lt;em&gt;redo&lt;/em&gt; link, to let them know they can change their mind anytime even if they make a mistake in the course of performing an action.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#main-goals"&gt;
  &lt;/a&gt;
  💎 Main goals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ensure that the user &lt;strong&gt;feels in control&lt;/strong&gt; of the situation when interacting with the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give users the &lt;strong&gt;freedom to perform actions&lt;/strong&gt; within the system without leaving them wondering and worried about the actions they are performing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the user &lt;strong&gt;feel comfortable&lt;/strong&gt; enough to &lt;strong&gt;explore the system&lt;/strong&gt; without feeling inhibited, which is a direct consequence of them knowing that they can take actions that can be reversed if they make a mistake.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  🔮 Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Facilitate the user the task of finding &lt;em&gt;emergency&lt;/em&gt; exits on your system, just as it's easy to find their counterparts in public spaces, like a shopping mall.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using icons that are &lt;strong&gt;universally recognizable&lt;/strong&gt; by the user can help match their &lt;strong&gt;mental models&lt;/strong&gt; (like using a cross to close a view). You can add a text label to point more clearly where the corresponding action will lead them to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow the user to &lt;strong&gt;cancel&lt;/strong&gt; an action at &lt;strong&gt;any point&lt;/strong&gt; of the process. This is specially important when it comes to a purchase, a money transfer or a download that can take some time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always support the &lt;strong&gt;undo&lt;/strong&gt; of an action by implementing links, toggles or checkboxes and ensure that they are well placed to be easily discoverable by the user.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#keywords-to-this-principle"&gt;
  &lt;/a&gt;
  🤖 Keywords to this principle
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Control&lt;/li&gt;
&lt;li&gt;Freedom&lt;/li&gt;
&lt;li&gt;Exits&lt;/li&gt;
&lt;li&gt;Mistakes&lt;/li&gt;
&lt;li&gt;Exploration&lt;/li&gt;
&lt;li&gt;Cancel&lt;/li&gt;
&lt;li&gt;Go back&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#4-consistency-and-standards-%EF%B8%8F"&gt;
  &lt;/a&gt;
  4. Consistency and standards ⌚️
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#main-idea"&gt;
  &lt;/a&gt;
  💡 Main idea
&lt;/h3&gt;

&lt;p&gt;Users have expectations when interacting with a system, which are based on their previous experiences with another systems.&lt;/p&gt;

&lt;p&gt;Jakob's Law states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;People spend most of their time using products that are not yours, so they expect your product works in the way the others do. Failing to fulfill these expectation may result in user’s cognitive overload and force them to learn something new.&lt;/em&gt;"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So that's important that our system follows already established conventions when it comes to user interaction and interface design, as we mentioned in &lt;em&gt;Principle 2: Match between the system and the real world&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Some examples of these conventions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Underlined&lt;/strong&gt; text means &lt;em&gt;clickable&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;shopping cart&lt;/strong&gt; / basket icon represents the section where the items you select to buy are stored and from where you will be able to proceed to a checkout process eventually.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Red&lt;/strong&gt; means stop / danger and &lt;strong&gt;green&lt;/strong&gt; means go / safe.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;magnifier&lt;/strong&gt; icon means &lt;em&gt;search&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;While accessing a website or an app on portable devices, an icon representing &lt;strong&gt;three vertically stacked lines&lt;/strong&gt; means that there is a hidden navigation menu.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-internal-versus-external-consistency"&gt;
  &lt;/a&gt;
  ◽️ Internal versus external consistency
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Internal consistency&lt;/em&gt; regards &lt;strong&gt;consistency and standards across a product&lt;/strong&gt; or a family of products. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it comes to a single app, this means that &lt;strong&gt;consistency should remain throughout the platform&lt;/strong&gt;: layout, colors, shapes, typography, visual items treatment...&lt;/p&gt;

&lt;p&gt;On the other hand, while facing the design of a family of related products, not only the conventions above should be met but also have to &lt;strong&gt;keep a coherent relation between them all&lt;/strong&gt; when it comes to layout, icons and functionality, to mention a few.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;External consistency&lt;/em&gt; refers to &lt;strong&gt;consistency and standards that match the industry&lt;/strong&gt; and / or web conventions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example, note that all well-known &lt;em&gt;e-Commerce&lt;/em&gt; sites follow &lt;strong&gt;common standards&lt;/strong&gt; in order to make the purchase experience &lt;strong&gt;consistent and efficient&lt;/strong&gt; to the customer. Otherwise, it would lead to them leaving the &lt;em&gt;store&lt;/em&gt; and looking for another one where they understand the steps they need to take towards their goal (the purchase of an arbitrary number of items) and where they feel comfortable with the process.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-layers-of-consistency"&gt;
  &lt;/a&gt;
  ◽️ Layers of consistency
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#1-visual"&gt;
  &lt;/a&gt;
  1. Visual
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Colors, typography, icon design, title decoration, etc should be &lt;strong&gt;consistent across the system&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Images should be treated similarly: aspect ratio, borders, size...&lt;/li&gt;
&lt;li&gt;Symbols should be consistent with the &lt;strong&gt;action&lt;/strong&gt; they lead to or the &lt;strong&gt;information&lt;/strong&gt; they're providing: use an icon of a plane for flight search, an icon of a car for car rental, an icon of a cat or a dog when specifying if pets are allowed in an accommodation, a cigarette when pointing out if it's allowed to smoke or not, or a shopping cart to store the items that can be eventually purchased, as mentioned earlier above.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#2-page-layout"&gt;
  &lt;/a&gt;
  2. Page layout
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;All items related to page layout &lt;strong&gt;should remain consistent and coherent&lt;/strong&gt; across all the pages of the site.&lt;/li&gt;
&lt;li&gt;It doesn't matter where you decide to locate buttons and other layout items, but &lt;strong&gt;do it consistently&lt;/strong&gt;: don't place the same button in different places when having different screens among the same process, for example.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#3-userentered-data"&gt;
  &lt;/a&gt;
  3. User-entered data
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;This is especially important when it comes to dates, phone numbers and locations. &lt;strong&gt;Avoid to use an open field&lt;/strong&gt; for this type of data. &lt;/li&gt;
&lt;li&gt;Provide the user with &lt;strong&gt;date pickers&lt;/strong&gt; or &lt;strong&gt;auto-formatting&lt;/strong&gt; so they don't have to think about how to enter the required information and let them know they don't have to insert separators in any case (so you don't have to split the entered information later on).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#4-content"&gt;
  &lt;/a&gt;
  4. Content
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;consistent tone of voice&lt;/strong&gt; across the site is crucial. Otherwise the user can feel confused, which will result in not meeting their expectations, and consequently, leaving and / or not returning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don't mix casual tone with formal tone&lt;/strong&gt; and always present the information in a way that is readable and understandable by the majority of the users that access your platform.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#main-goals"&gt;
  &lt;/a&gt;
  💎 Main goals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Meet user's expectations, since they come to use your system with a preconceived idea of how it &lt;em&gt;should&lt;/em&gt; work (based on their mental model).&lt;/li&gt;
&lt;li&gt;Build their &lt;strong&gt;confidence&lt;/strong&gt; towards the system.&lt;/li&gt;
&lt;li&gt;Make them &lt;strong&gt;focus entirely on the content&lt;/strong&gt; rather than let them wondering what's the meaning of what they're viewing, reading or listening to.&lt;/li&gt;
&lt;li&gt;Make sure that the user &lt;strong&gt;doesn't have to learn something new&lt;/strong&gt; in order to interact with your system (or at least as less as possible).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  🔮 Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Always pay attention and implement &lt;strong&gt;both internal and external consistence&lt;/strong&gt;, to make sure all the standards and conventions are met.&lt;/li&gt;
&lt;li&gt;Follow &lt;strong&gt;industry and web conventions&lt;/strong&gt; to avoid the user have to learn new things or concepts while interacting with your system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#keywords-to-this-principle"&gt;
  &lt;/a&gt;
  🤖 Keywords to this principle
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Consistency&lt;/li&gt;
&lt;li&gt;Conventions&lt;/li&gt;
&lt;li&gt;Standards&lt;/li&gt;
&lt;li&gt;Expectations&lt;/li&gt;
&lt;li&gt;Interaction&lt;/li&gt;
&lt;li&gt;Confidence&lt;/li&gt;
&lt;li&gt;Focus&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#5-error-prevention-%E2%86%92"&gt;
  &lt;/a&gt;
  5. Error prevention ❌ → ✅
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#main-idea"&gt;
  &lt;/a&gt;
  💡 Main idea
&lt;/h3&gt;

&lt;p&gt;Users, as human beings, make errors. You, as an user, make errors. Everybody does. That's something natural. But, even it's something unavoidable, it can also be alleviated by designing a good interface for our system, in these terms.&lt;/p&gt;

&lt;p&gt;Although alerting the user with an error message is a good practice, it's even better to design a &lt;strong&gt;non error-prone system&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-types-of-errors"&gt;
  &lt;/a&gt;
  ◽️ Types of errors
&lt;/h3&gt;

&lt;p&gt;There are two types of errors the users can make: &lt;strong&gt;slips&lt;/strong&gt; (minor errors) and &lt;strong&gt;mistakes&lt;/strong&gt; (conscious errors).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Slips&lt;/strong&gt;: This type of error is often caused by &lt;strong&gt;inattention&lt;/strong&gt; on user's side, like &lt;em&gt;typos&lt;/em&gt;. They are more often made by experienced users, who use the autopilot when interacting with a system: they feel comfortable and rely their confidence on their previous experience with it, while newbies pay more attention to what they're doing since they're &lt;em&gt;learning&lt;/em&gt; how to interact with the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mistakes&lt;/strong&gt;: These are caused by a &lt;strong&gt;mismatch&lt;/strong&gt; between the user's mental model and the design of the system. They take the correct steps towards their goal but these can be inappropriate for the situation. &lt;em&gt;Mistakes&lt;/em&gt; are more difficult to prevent than &lt;em&gt;slips&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-how-to-prevent-slips"&gt;
  &lt;/a&gt;
  ◽️ How to prevent &lt;em&gt;slips&lt;/em&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Always include &lt;strong&gt;helpful constraints&lt;/strong&gt; for user input. For example, regarding a form input field where a range of dates should be entered, always compel the user to select a range where the first date comes before the second date.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Offer &lt;strong&gt;suggestions&lt;/strong&gt; as to search, to avoid typos.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;according default values&lt;/strong&gt;, when needed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;strong&gt;&lt;em&gt;forgiving&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;formatting&lt;/strong&gt;. This means that, for some input fields, every user can have a different idea on how to enter data, for example, a phone number. So, from here, we have two options: getting rid of the info the user has entered and which is not needed (parentheses or hyphens, for example) or autocompleting the phone number with these special characters while the user is typing. This latter improves their reliability on the system, since they know that they're performing the task correctly, so it's more appropriated than the first one.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-how-to-prevent-mistakes"&gt;
  &lt;/a&gt;
  ◽️ How to prevent &lt;em&gt;mistakes&lt;/em&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Collect data&lt;/strong&gt;. While you're still designing the system, you can gather information about what kind of users are going to use it and do a little research, so you can be aware of what you can expect of their actual &lt;strong&gt;mental models&lt;/strong&gt;.&lt;br&gt;
Once you have your system designed, you can run &lt;strong&gt;usability testing&lt;/strong&gt; to know what's wrong with the usage of your system on user's side.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow &lt;strong&gt;design conventions&lt;/strong&gt;, as we've mentioned above, in &lt;em&gt;Principle #2: Match between the system and the real world&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Communicate &lt;strong&gt;affordances&lt;/strong&gt;. This means that the user should be able to know when an &lt;strong&gt;element&lt;/strong&gt; of the interface is &lt;strong&gt;available&lt;/strong&gt; and, consequently, that is interactive and that an action can be taken on it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Preview results&lt;/strong&gt;. Let the user know that the action they're going to take may result in changes at scope level within the system, so they can double-check if they really want to proceed and inform them on what's going on from there.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-good-practices-to-prevent-both-types-of-errors"&gt;
  &lt;/a&gt;
  ◽️ Good practices to prevent both types of errors
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Don't make the user have to &lt;strong&gt;remember&lt;/strong&gt; things or keep information about something within the system. Always provide contextual information.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Show a &lt;strong&gt;confirmation dialog&lt;/strong&gt; before they take an action that causes changes, like deleting something.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always support &lt;strong&gt;undo&lt;/strong&gt;, so the user knows that the changes they would do can be revoked.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let the user know that they will &lt;strong&gt;incur an error&lt;/strong&gt; if they proceed when they're actually doing something that is not allowed. For example, if the user surpasses the number of allowed characters as to a text.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#main-goals"&gt;
  &lt;/a&gt;
  💎 Main goals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Prevent the majority of mistakes&lt;/strong&gt; a user can make when interacting with our system, rather than waiting for them to perform an action that leads to an error to inform them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make the user comfortable with the system&lt;/strong&gt; by letting them know that if they make a mistake, they can &lt;strong&gt;undo&lt;/strong&gt; the taken action, so their confidence and reliability on the system grow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Never make the user feel that they're responsible for errors&lt;/strong&gt;, because they're not. The designer of the system is (yes, us 😇). So, it's important to use an appropriate language when communicating with the user when an error occurs and improve the design of the system so they make as less of them as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Help the user &lt;strong&gt;build a good mental model&lt;/strong&gt; of your system's interface.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  🔮 Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Always &lt;strong&gt;prevent errors&lt;/strong&gt; to occur.&lt;/li&gt;
&lt;li&gt;Avoid &lt;strong&gt;&lt;em&gt;slips&lt;/em&gt;&lt;/strong&gt; by including constraints, good default values and suggestions.&lt;/li&gt;
&lt;li&gt;Support &lt;strong&gt;&lt;em&gt;undo&lt;/em&gt;&lt;/strong&gt; and let the user know they can recover from their errors.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Warn&lt;/strong&gt; your users when needed. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#keywords-to-this-principle"&gt;
  &lt;/a&gt;
  🤖 Keywords to this principle
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Error&lt;/li&gt;
&lt;li&gt;Mistake&lt;/li&gt;
&lt;li&gt;Undo&lt;/li&gt;
&lt;li&gt;Prevention&lt;/li&gt;
&lt;li&gt;Revoke&lt;/li&gt;
&lt;li&gt;Confirmation&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;And this is all for the first lecture of the UX 101 series! &lt;/p&gt;

&lt;p&gt;Stay tuned to know more about UX in future episodes of the series.&lt;/p&gt;

&lt;p&gt;A big thanks for reading  🤗  and don't hesitate to reach out to me if you have any questions or doubts about today's lecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XFuQ4InwtXBE4DDPHM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XFuQ4InwtXBE4DDPHM/giphy.gif" alt='Rachel Green from Friends TV Show behind a desk saying "Ask me anything"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you found this article useful and I see you all in the next 👋&lt;/p&gt;



&lt;p&gt;👉 You can also check out the &lt;strong&gt;related slides&lt;/strong&gt; for this article on Instagram 👈&lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CTHh--hjqnD/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;





&lt;p&gt;🎉 Don't forget to follow &lt;a class="mentioned-user" href="https://dev.to/underscorecode"&gt;@underscorecode&lt;/a&gt;
 on &lt;a href="https://instagram.com/underscorecode"&gt;Instagram&lt;/a&gt; and &lt;a href="https://twitter.com/underscorecode"&gt;Twitter&lt;/a&gt; for more daily webdev content: info, challenges, quizzes &amp;amp; more 💜&lt;/p&gt;




</description>
      <category>uiweekly</category>
      <category>ux</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Avoid this when using Date/Time functions in PHP</title>
      <author>Marcos Rezende</author>
      <pubDate>Sat, 28 Aug 2021 16:37:31 +0000</pubDate>
      <link>https://dev.to/rezende79/avoid-this-when-using-date-time-functions-in-php-4o3</link>
      <guid>https://dev.to/rezende79/avoid-this-when-using-date-time-functions-in-php-4o3</guid>
      <description>&lt;p&gt;Is there any difference between getting the current date/time in the following ways in PHP?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;DateTimeImmutable&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;DateTimeImmutable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'U'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine that you are inserting data into a database table using the first way, but when querying the same database table you use the second option.&lt;/p&gt;

&lt;p&gt;While the first option will return the current date/time of your server taking into account its Time Zone configuration, the second way will return the current date/time of your server based on UTC time zone.&lt;/p&gt;

&lt;p&gt;After creating just a single user into a users table with this data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Sebastian'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;createdAt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;DateTimeImmutable&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and querying the user table in this way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$dql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sh"&gt;&amp;lt;&amp;lt;&amp;lt;EOT
        SELECT u FROM App\Entity\User u
        WHERE u.createdAt &amp;lt;= :createdAt
    EOT;&lt;/span&gt;

&lt;span class="nv"&gt;$now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;DateTimeImmutable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'U'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;entityManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;createQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'createdAt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you will receive an empty array of &lt;code&gt;$users&lt;/code&gt; if the server which hosts your application is located in any country with Time Zone configuration greater than 0 (Lisbon, France, Germany, and so on).&lt;/p&gt;

&lt;p&gt;It will happen because the data inserted into your user table will have the &lt;code&gt;createdAt&lt;/code&gt; field was filled with &lt;code&gt;18:14&lt;/code&gt; while when you try to query the database, you will use the time &lt;code&gt;16:14&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You didn't create any user before 16:14!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will never find the users that you recently created.&lt;/p&gt;

&lt;p&gt;This happens because when you use &lt;code&gt;U&lt;/code&gt; for formatting the date/time values, you are getting a Unix Timestamp date7time format which gets the date/time always based on &lt;a href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time"&gt;Coordinated Universal Time&lt;/a&gt;, and never taking into account your Server's Time Zone configuration.&lt;/p&gt;

&lt;p&gt;It looks pretty basic but maybe you have never had this issue because you are working bellow UTC Time Zone (Denmark, South America, Canada, USA, and so on). &lt;/p&gt;

</description>
      <category>timezone</category>
      <category>php</category>
      <category>datetime</category>
    </item>
    <item>
      <title>✅ Tell Me About A Time You Received Constructive Feedback | Facebook Behavioral Interview (Jedi) Series 🔥</title>
      <author>The Interview Sage</author>
      <pubDate>Sat, 28 Aug 2021 16:01:31 +0000</pubDate>
      <link>https://dev.to/theinterviewsage/tell-me-about-a-time-you-received-constructive-feedback-facebook-behavioral-interview-jedi-series-5254</link>
      <guid>https://dev.to/theinterviewsage/tell-me-about-a-time-you-received-constructive-feedback-facebook-behavioral-interview-jedi-series-5254</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3O2iJ9s_mKs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Before we discuss this question, let us recap what the Behavioral Interview Round at Facebook is.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Behavioral Interview Round is also known as the Jedi Interview round at Facebook.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is about you and your history, your résumé, and your motivation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The purpose of this interview is to assess whether the candidate will thrive in Facebook's peer-to-peer, minimal process, and unstructured engineering organization.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For Software Engineers, the behavioral interview is actually part behavioral and part coding. The coding part is a shorter version of the usual coding interviews and is included to supplement the other two coding interviews to get an additional coding signal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tips-amp-tricks-to-effectively-prepare-for-behavioral-interviews"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks to effectively prepare for Behavioral Interviews
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_kgnGQmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y9t832s7yc0j58aycqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_kgnGQmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y9t832s7yc0j58aycqb.png" alt="Tips &amp;amp; Tricks to effectively prepare for Behavioral Interviews" title="Behavioral Interview Tips &amp;amp; Tricks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Know yourself! Take the time to review your résumé, as the interviewer will almost certainly ask about key events in your work history.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have concrete examples or anecdotes to support each of the questions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Familiarize yourself with Facebook's mission statement and its five core values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be Bold&lt;/li&gt;
&lt;li&gt;Focus on Impact&lt;/li&gt;
&lt;li&gt;Move Fast&lt;/li&gt;
&lt;li&gt;Be Open&lt;/li&gt;
&lt;li&gt;Build Social Value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be yourself! Be open and honest about your successes and failures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be humble and focus on teamwork, leadership, and mentorship qualities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, let us review how to effectively answer this question.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-tell-me-about-a-time-you-received-constructive-feedback"&gt;
  &lt;/a&gt;
  Question: Tell Me About A Time You Received Constructive Feedback
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6-6gzcQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ty1seij05oa3ne3vopdy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6-6gzcQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ty1seij05oa3ne3vopdy.png" alt="Tell Me About A Time You Received Constructive Feedback" title="Tell Me About A Time You Received Constructive Feedback"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=2189s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, Sample Answer (Example), and a Special Case of "Don't Have Any Work Experience".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;"Tell me about a time you received constructive feedback" is one of the most challenging questions asked in the behavioral interview. Interviewers sometimes also ask this question as "What is your greatest weakness?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clShXJlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2qtm1wa9ds9vl1csmim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clShXJlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2qtm1wa9ds9vl1csmim.png" alt="Evaluation Criteria for Tell Me About A Time You Received Constructive Feedback" title="Evaluation Criteria for 'Tell Me About A Time You Received Constructive Feedback'"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wHRCtd3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u00yrf1c38ad3xipo74s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHRCtd3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u00yrf1c38ad3xipo74s.png" alt="Evaluation Criteria for Tell Me About A Time You Received Constructive Feedback" title="Evaluation Criteria for 'Tell Me About A Time You Received Constructive Feedback'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everyone makes mistakes in their careers and has received constructive feedback from their managers or peers. By this question, the interviewer's goal is not to trick you but to assess how you react when you receive feedback from others.&lt;/p&gt;

&lt;p&gt;They want to get a handle on how well you can adapt and perform in challenging situations and unstructured environments. They are trying to judge your ability to stay calm and composed with the right attitude when receiving criticism of any type, whether constructive or negative.&lt;/p&gt;

&lt;p&gt;Employers want to understand your enthusiasm to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn new things,&lt;/li&gt;
&lt;li&gt;Exercise judgment under pressure, and&lt;/li&gt;
&lt;li&gt;Shift gears when needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are also evaluating your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication skills,&lt;/li&gt;
&lt;li&gt;Ability to identify the gaps in your skills, and&lt;/li&gt;
&lt;li&gt;The willingness to improve yourself continuously.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#response-framework"&gt;
  &lt;/a&gt;
  Response Framework
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--blYZqfeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfmwc2sxam4bqh8kg1o3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--blYZqfeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfmwc2sxam4bqh8kg1o3.png" alt="Response Framework for Tell Me About A Time You Received Constructive Feedback" title="Response Framework for 'Tell Me About A Time You Received Constructive Feedback'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our advice is to pick a compelling and honest story that can articulate a real-life experience where you received constructive feedback from your manager or peer at your workplace.&lt;/p&gt;

&lt;p&gt;Describe the situation, the events that occurred, and explain what feedback you received and from whom.&lt;/p&gt;

&lt;p&gt;Elaborate to the interviewer how did you react when you received the feedback. Show that you maintained a calm and composed attitude and were not defensive to the person who gave you the feedback.&lt;/p&gt;

&lt;p&gt;Explain to the interviewer how you evaluated and decided your plan of action. Elaborate on the strategy that you used to improve yourself based on the criticism.&lt;/p&gt;

&lt;p&gt;Finally, express to the interviewer that you are level-headed and act responsibly even in times of disagreement. Show that the steps you took helped you in addressing the feedback. Explain the learnings you took from this challenging situation and how they helped you become a better engineer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-amp-tricks"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yiBGXYUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbk1gxyh601b9ihbkjcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yiBGXYUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbk1gxyh601b9ihbkjcc.png" alt="Tips and Tricks for Tell Me About A Time You Received Constructive Feedback" title="Tips &amp;amp; Tricks for 'Tell Me About A Time You Received Constructive Feedback'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some tips and tricks that will help you effectively prepare this question for the behavioral interview.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Always remain calm, composed, and professional.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Refrain from being negative and avoid blaming your employer, coworkers, or manager.&lt;/li&gt;
&lt;li&gt;Companies generally do not like to hire people who are always pointing fingers at others.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a compelling story that is honest and believable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is most desirable to describe a real-life example to the interviewer to show that you have actually faced such a situation in your career and not just talk about a generic strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose a criticism or feedback that does not disqualify you from the job you are applying for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not sugarcoat your answer with irrelevant details.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spend more time talking about your strategy and the actions you took to improve yourself.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The biggest way to mess up answering this question is by simply saying that you have never received constructive feedback at your workplace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead, explain your strategies for dealing with such situations from your day-to-day life or the projects you did in college.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prepare the response for this question beforehand, as it will be tough to structure your answer on the spot during the interview.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not memorize the answer as it should come naturally, and you should sound confident to the interviewer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#sample-answer-example"&gt;
  &lt;/a&gt;
  Sample Answer (Example)
&lt;/h2&gt;

&lt;p&gt;Here is Phoebe. She is currently working as a Technical Lead at a major technology company. She is interviewing for the role of Staff Software Engineer at Facebook.&lt;/p&gt;

&lt;p&gt;🎧 Listen to her response to this question in this &lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=2404s"&gt;YouTube Video&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#special-case-dont-have-any-work-experience"&gt;
  &lt;/a&gt;
  Special Case: Don't Have Any Work Experience
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ArtmSfET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhif593ugz7mlfydvge9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ArtmSfET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhif593ugz7mlfydvge9.png" alt="Special Case: Don't Have Any Work Experience" title="Special Case: Don't Have Any Work Experience"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It may be the case that you don't have any work experience. New Grads and entry-level software engineers usually fall under this category.&lt;/p&gt;

&lt;p&gt;If you are in such a situation,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do not end your answer by simply saying that you have never received constructive feedback at your workplace.&lt;/li&gt;
&lt;li&gt;Remember, no human is perfect, and everyone makes mistakes in their life.&lt;/li&gt;
&lt;li&gt;Try to use a real-life experience from your everyday life or the projects you did in college.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will help the interviewer evaluate you on the following attributes that we mentioned earlier:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How you react when you receive feedback of any type, whether constructive or negative,&lt;/li&gt;
&lt;li&gt;Ability to stay calm and composed with the right attitude,&lt;/li&gt;
&lt;li&gt;Enthusiasm to learn new things,&lt;/li&gt;
&lt;li&gt;Communication skills,&lt;/li&gt;
&lt;li&gt;Ability to identify the gaps in your skills, and&lt;/li&gt;
&lt;li&gt;Willingness to improve yourself continuously.&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#preparation-material"&gt;
  &lt;/a&gt;
  Preparation Material
&lt;/h1&gt;

&lt;p&gt;Learn more about the Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, and Sample Answers (Examples) to effectively prepare and answer these top questions asked in the Behavioral Interviews at Facebook. Certain special cases are also discussed which are usually faced by the candidates during these interviews.&lt;/p&gt;

&lt;p&gt;⬇️ &lt;a href="https://www.buymeacoffee.com/interviewsage/e/40678"&gt;Detailed Notes on Top Facebook Behavioral Interview Questions - Part 2&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-behavioral-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook Behavioral Interview
&lt;/h1&gt;

&lt;p&gt;If you have not read our first article on Top Facebook Behavioral Interview Questions, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-behavioral-interview-questions-part-1-2a0o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;✅ Top Facebook Behavioral Interview Questions (Part 1) | Facebook Jedi Interview Round 🔥&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage ・ May 15 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-system-design-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook System Design Interview
&lt;/h1&gt;

&lt;p&gt;In case if you have not read our series on Cracking the Facebook System Design Interview, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-system-design-interview-questions-31np" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top Facebook System Design Interview Questions (Part 1) | Facebook Pirate Interview Round&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage ・ Jan 4 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h1&gt;

&lt;p&gt;✅ &lt;a href="https://bit.ly/Educative-Unlimited"&gt;Educative.io Unlimited Plan [💰 10% off for first 100 users]&lt;/a&gt;&lt;br&gt;
✅ &lt;a href="https://bit.ly/Try-Exponent"&gt;TryExponent.com Membership [💰 Limited Time 10% offer]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ &lt;a href="https://instagr.am/TheInterviewSage"&gt;Follow for Daily Coding Problem&lt;/a&gt;&lt;br&gt;
✅ &lt;a href="https://bit.ly/Join-Membership"&gt;Join our membership for exclusive benefits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👩‍💻 &lt;a href="https://www.educative.io/courses/grokking-the-system-design-interview?aff=KQZl"&gt;Best System Design Interview Course&lt;/a&gt;&lt;br&gt;
🚀 &lt;a href="https://bit.ly/SWE-Interview-Course"&gt;Complete SWE Interview Course [💰 Limited Time 10% offer]&lt;/a&gt;&lt;br&gt;
🙋‍♀️ &lt;a href="https://www.buymeacoffee.com/interviewsage/e/30176"&gt;Behavioral Interview Guide [💰 Special Discount]&lt;/a&gt;&lt;br&gt;
📚 &lt;a href="https://smarturl.it/InterviewPrepBook"&gt;Recommended Interview Preparation Book (on Amazon)&lt;/a&gt;&lt;/p&gt;




&lt;center&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--121vjxPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2l00b1bt3nl8fdfb0nn.png" alt="Buy Me a Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☕️ Buy us a Coffee at &lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;BuyMeACoffee.com/InterviewSage&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;




&lt;center&gt;

&lt;p&gt;To stay updated about new posts, Subscribe &amp;amp; Follow Us!&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://www.youtube.com/TheInterviewSage?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRCmz2gQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uqifmelnuenxiik8pwx.png" alt="Subscribe to our YouTube channel" title="Subscribe to our YouTube channel"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.instagram.com/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OADCpudp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovhcxjpg0v5z2tidtydk.png" alt="Follow us on Instagram" title="Follow us on Instagram"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.facebook.com/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zohyoISu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyy3kyo44tmv645vvrqw.png" alt="Like &amp;amp; Follow us on Facebook" title="Like &amp;amp; Follow us on Facebook"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="http://twitter.com/intent/follow?source=followbutton&amp;amp;variant=1.0&amp;amp;screen_name=InterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoV_1sI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwwcu44k00a0a8hpfbmf.png" alt="Follow us on Twitter" title="Follow us on Twitter"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.linkedin.com/in/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5QaEiEG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcrwzwc9tnv0q3zmkih8.png" alt="Follow &amp;amp; Connect on LinkedIn" title="Follow &amp;amp; Connect on LinkedIn"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;/center&gt;



&lt;blockquote&gt;
&lt;p&gt;This article is part of the series on Behavioral Interviews at Facebook. So, follow us to get notified when our next article in this series is published. Thanks for reading! &lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__553012"&gt;
  
    .ltag__user__id__553012 .follow-action-button {
      background-color: #3b49df !important;
      color: #f9fafa !important;
      border-color: #3b49df !important;
    }
  
    &lt;a href="/theinterviewsage" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/theinterviewsage"&gt;The Interview Sage&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/theinterviewsage"&gt;Our goal is to create Software Eng Interview tutorials to help you get a job at companies like Facebook, Google, Apple, &amp;amp; Amazon. We will deep-dive into System Design, Coding, &amp;amp; Behavioral interviews.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;/blockquote&gt;

&lt;p&gt;📸 Some images used are from free&lt;span&gt;pik&lt;/span&gt;.com: Freepik, pch.vector, vectorjuice, pikisuperstar, raw&lt;span&gt;pixel&lt;/span&gt;.com, slidesgo, stories, Upklyak, jcomp, macrovector_official, syarifahbrit, redgreystock&lt;/p&gt;

&lt;p&gt;&lt;a href="https://disclosureanddisclaimer.theinterviewsage.com/"&gt;Full Disclosure &amp;amp; Disclaimer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Are you even learning if you’re not working at a start up?</title>
      <author>Simon Barker</author>
      <pubDate>Sat, 28 Aug 2021 15:34:42 +0000</pubDate>
      <link>https://dev.to/allthecode/are-you-even-learning-if-you-re-not-working-at-a-start-up-1pno</link>
      <guid>https://dev.to/allthecode/are-you-even-learning-if-you-re-not-working-at-a-start-up-1pno</guid>
      <description>&lt;p&gt;Everyone wants to work for a sexy, up and coming startup .... apparently! I've even seen people say that if your first job in tech isn't at a start up or on a new team at one of the big tech companies then your tech career is basically a bust before you got out of the gate.&lt;/p&gt;

&lt;p&gt;Setting aside the ridiculousness of that statement I want to look at the difference between working on greenfield projects and older, more established IT estates at companies for whom tech probably isn't their primary focus. Is one better than the other?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-up-greenfield-work"&gt;
  &lt;/a&gt;
  Start up / greenfield work
&lt;/h2&gt;

&lt;p&gt;Nearly everyone loves the first page of a new notebook, that sense of opportunity of what this book could be, the person you will become once you write your thoughts and ideas in it - there is something exciting about it. We all know after page 3 it will be full of scribbled notes from calls and reminders for tasks you need to do, but still, we hover the pen over the page just that bit longer on page one, like we're stepping out in to the first fresh snowfall of the year not wanting to ruin it.&lt;/p&gt;

&lt;p&gt;Starting a new codebase is similar, all those ideas and possibilities. Knowing that this time you will "do it the right way" is alluring, not having decades of technical debt to slow you down is freeing. &lt;/p&gt;

&lt;p&gt;You will get to know more of the code, you have a hand in crafting many of the main areas, and so further changes and refinements are fast because you already know the code and the patterns employed. You don't need to reference documentation all the time or go spelunking through layers of function calls because you already know the final DynamoDB document that the data you need ends up in.&lt;/p&gt;

&lt;p&gt;Working on a greenfield project can make you feel like a coding god. You know what to do and where to do it. You deliver features quickly and you're on top of your tech debt. It's nice but short lived because all greenfield projects grow old, become complex and no one knows how it all works, not really any way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brownfield"&gt;
  &lt;/a&gt;
  Brownfield
&lt;/h2&gt;

&lt;p&gt;Working on old IT estates is tedious, hard and boring. Nothing new happens and it's all just maintenance!&lt;/p&gt;

&lt;p&gt;This misconception is what startups and agencies want you to believe because it's their best narrative to persuade you to come and work for them. At some companies it might be true, but that's not an issue inherent with older codebases but instead organisations that are set up in such a way that this is how they view their IT systems. Funnily enough a boring company that isn't really innovating will probably have boring IT projects that will feel like the above.&lt;/p&gt;

&lt;p&gt;Companies that recognise the value in their IT department and are actively adding features and modernising their IT estate on the other hand, offer something equally fun and, I think, more challenging than greenfield projects. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They teach you the ability to decipher how a system works without relying on knowledge you accrued from making it yourself. You become a better problem solver.&lt;/li&gt;
&lt;li&gt;You are forced to become comfortable woking on a system you only partially understand.&lt;/li&gt;
&lt;li&gt;You learn the value of tests, not because you are forced to write them but because you will loath previous developers who didn't write any for the code you now have to change.&lt;/li&gt;
&lt;li&gt;You will be given the chance to modernise an old system using best practices and compare new approaches to the "old ways" and see not only the benefits but also the downsides.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#greenfield-vs-brownfield"&gt;
  &lt;/a&gt;
  Greenfield vs Brownfield
&lt;/h2&gt;

&lt;p&gt;There is no right or wrong answer to which is better but I will say that I have seen developers come to existing IT projects, having only previously worked on greenfield projects, and flail for 6 months getting frustrated and annoyed at how slow everything feels because their expectations have been set unrealistically high from their experience to date. Most of the work with existing code bases is working out exactly what you have to change and where, rather than the change itself.&lt;/p&gt;

&lt;p&gt;People who start their careers on old systems, adding features, fixing old bugs and generally ushering this creaky beast into more modern times don't have this painful learning curve, and when they come to a greenfield project they are delighted and appreciative of this window of time where they can move fast and break things.&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Wait, Wait, Wait ... Now Go! ⌚⏳ </title>
      <author>alxizr</author>
      <pubDate>Sat, 28 Aug 2021 15:33:02 +0000</pubDate>
      <link>https://dev.to/alxizr/wait-wait-wait-now-go-p0k</link>
      <guid>https://dev.to/alxizr/wait-wait-wait-now-go-p0k</guid>
      <description>&lt;p&gt;Hello everyone,&lt;/p&gt;

&lt;p&gt;Thank you for joining in for this article. I know the title is a bit vague, but I would like you to know that we will not be going to talk about the GO programming language, but rather, make it today a little discussion about blocking your code, because sometimes you need to do it. One of the reasons, if not the most common one, is to avoid being blocked by an API's rate limiter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before we begin, as always we want to know what is the minimum for us to be able to start, be efficient and productive.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/"&gt;Git Bash&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prologue"&gt;
  &lt;/a&gt;
  Prologue
&lt;/h2&gt;

&lt;p&gt;Let us address the matter at hand - we want, on purpose by all means, block our code or some part(s) of it from executing sequentially in a short period of time and carry on with our day, but why is that? Well, like I mentioned in the beginning, one of the main reasons, the one that I am familiar with at least the most, is to by pass the rate limiting rule of any public facing API.&lt;/p&gt;

&lt;p&gt;Ever encountered this &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429"&gt;429 Too Many Requests&lt;/a&gt; error ? Well now we will demonstrate how to avoid it and quite elegantly if I may add.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use case
&lt;/h1&gt;

&lt;p&gt;I would like to talk about the motivation on implementing this scenario because you might not need this at all. There are certain use cases where you will have to have this implementation in your code buried somewhere inside a helper function and no body knows it but you. The one use case we are addressing for our example is &lt;a href="https://en.wikipedia.org/wiki/Rate_limiting"&gt;rate limiting&lt;/a&gt;. This is a far common use case than others and I have decided to use it for building today our example. I also want to make sure and emphasis that we are not going to implement a rate limiter on our service but we are going to deal with one on a remote API which has nothing to do with us rather.&lt;/p&gt;

&lt;p&gt;Assume that you are assigned a task to get all the information about the buses in your city and in order to achieve this information successfully you need to communicate with an external API, probably provided by the bus company or the city or what ever. The issues is that the data set is fairly large, let's assume 1,000,000 records, and you cannot get all of them in one go, so you need to basically paginate your way in getting the job done, but alas, you get the data in chunks and in the 10th try to get the next chunk you receive an error stating that you executed too many request to the server and now need to take a break. We need to understand that when this error occurs, we failed to accomplish the task because we did not retrieve all the records.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drill-down-on-the-solutions"&gt;
  &lt;/a&gt;
  Drill down on the solutions
&lt;/h2&gt;

&lt;p&gt;There are more that enough ways to solve this matter. You can argue that for example you do not need the entire data set or you can manually re-run the function from the point it failed or maybe even argue that this is not your problem because you are not responsible on something you have no control of, true story by the way, but you do realize that you add +1 to your fails counter as a developer who should be able to solve any task handed to you.&lt;/p&gt;

&lt;p&gt;We want to talk about the solution that will guarantee us 100 per cent success on this matter, we want it to be fully automatic and no human intervention is needed and, from my stand of point the most important aspect of the matter, we take full ownership on the task the way we are accountable. Accountability is by far one of the most valued traits any employee can have that managers love and appreciate (we will leave this for another talk).&lt;/p&gt;

&lt;p&gt;So, by now we fully understand the what, where and who but we did not yet determined the how. If you consider it a bit, we actually only need to do some 4th grade math in order to find the time period we need to wait. In Physics the is a constant called 'T' for time period and is equal to 1 second divided by the frequency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This equation still does not answer our question. We need to understand what we are looking for in the equation. The easy part is the 1 second, we know this is a constant and we cannot change it. Let us try and understand what the 'f' for frequency stands for. The 'f' tells us how many executions or attempts we can have in 1 second the way that the other side of the equation will remain true at all times. &lt;/p&gt;

&lt;p&gt;Let's see an example: Assume that we can approach the remote API 300 times in one minute. Our equation is addressing seconds so we need to convert it to. One minute consist of 60 second, then we divide 300 attempts in 60 and we get back 5 attempts per one second.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// 300 attmpts per one minute&lt;/span&gt;

   &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
   &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we want to place this value in the equation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// T = 1 / f&lt;/span&gt;

   &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;
   &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
   &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;
   &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see here, in order to not violate the rate limiting rule, we must have 5 attempts at the API per minute or wait at lease 200 milliseconds between the executions. This was not that hard, but wait, JavaScript is asynchronous in nature. How will we make it run synchronously and sequentially ? The real question we are actually asking is, how do we make it that the HTTP requests to the remote API will wait the minimum delay time in between the executions. This is where we are going to use the tool that is called &lt;a href="https://www.npmjs.com/package/bottleneck"&gt;BottleNeck&lt;/a&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bottleneck is a lightweight and zero-dependency Task Scheduler and Rate Limiter for Node.js and the browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the help of this tool we can apply some logic, and not that complex if I may add, to solve our 3 part problem that we noted above.&lt;/p&gt;

&lt;p&gt;I will give my 2 cents on this tool and how it works from a bird's eye view in the simplest manner I can. Te tool is instantiated with the use of a constructor that receives some arguments, the instance that is created holds a number of methods for particular use cases, we will need the &lt;strong&gt;wrap&lt;/strong&gt; method. The wrap method receives a function as an argument and returns a throttled version of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-us-see-it-in-action"&gt;
  &lt;/a&gt;
  Let us see it in action
&lt;/h2&gt;

&lt;p&gt;We will open our visual studio code and create a new folder anywhere, I will do it on my Desktop, then we will open the integrated terminal, then we will create a file for our code with 'touch main.js' and initialize our project with 'npm init -y' and install the bottleneck and axios npm packages with 'npm i -S axios bottleneck' command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nb"&gt;mkdir &lt;/span&gt;ratelimitmycode
  &lt;span class="nb"&gt;cd &lt;/span&gt;ratelimitmycode
  &lt;span class="nb"&gt;touch &lt;/span&gt;main.js
  npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
  npm i &lt;span class="nt"&gt;-S&lt;/span&gt; axios bottleneck
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will use the &lt;a href="https://jsonplaceholder.typicode.com/todos"&gt;json placeholder API&lt;/a&gt; for this example and you can change it to any other url that you want to test.&lt;/p&gt;

&lt;p&gt;When we look at what we need to code here, we basically understand that we need an HTTP client and for that reason we installed axios and we need the target url.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// main.js&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/todos/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// main&lt;/span&gt;


  &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in this piece of code, there is nothing fancy in it. All we do here is fetching the entire available data set the remote API has to offer under this endpoint. We will now implement a different data fetching approach based on a particular item id and see what happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// main.js&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/todos/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// for&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// main&lt;/span&gt;


  &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that this particular endpoint might hold 200 records and we can address them with their unique id. In this piece of code we are looping 200 times to execute the same endpoint to retrieve a different piece of data. &lt;/p&gt;

&lt;p&gt;We also need to remember that the particular API we are addressing has no rate limit rule turned on. Let us assume that there was a rate limit rule here and we would fail after several attempts. What would we do ? Well, we already answered this question earlier. We need to calculate the rate limit quota and act by it.&lt;/p&gt;

&lt;p&gt;We will assume the following, the API has a rate limit of 300 requests per one minute and it holds 1 million records. As we already did the math, we need to have 5 requests per one second, so in total it will take us 2 days and 7 hours approximately to complete the fetching successfully. Do not be frightened because of this long time period. We will not be fetching 1 million records to begin with and we need to also understand that there could be very long time consuming tasks.&lt;/p&gt;

&lt;p&gt;Given this information we know now that with the current implementation we have the task will fail. We will not be able never to fetch the entire data set from the remote API. We need to change the strategy and for this we have Bottleneck to help us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// import the package&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Bottleneck&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bottleneck&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="c1"&gt;// create the instance with a constructor&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Bottleneck&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;minTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//ms&lt;/span&gt;
        &lt;span class="na"&gt;maxConcurrent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// created a throttled function&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;throttled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see in this piece of code only configurations. We will explain what we see. first of all we import the package, then we create an instance and passing some configuration options and finally we create a throttled version of the function to act by the rate limit. &lt;/p&gt;

&lt;p&gt;We look at the configurations options and understand what we see&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;minTime&lt;/strong&gt; property should hold the minimal time period we need to wait between executions and it is in milliseconds. By default it is set to 0.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;maxConcurrent&lt;/strong&gt; property holds the number of jobs can be executed in the same time. By default it is null, and it should not be null ever, you always must control this value. This property exist to make sure that in case we have one job or execution that is longer the minTime value we set, it will not allow more jobs to start on different threads because it can break all of our logic and math.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we constructed our instance we want to use the wrap method on our function that is responsible to get the data, we pass that function as an argument and get a new throttled function.&lt;/p&gt;

&lt;p&gt;Let us see an implementation with the latest code snippet from earlier. We will attempt to get 200 records and see how long it takes us with the configurations we set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// main.js&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Bottleneck&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bottleneck&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/todos/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Bottleneck&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;minTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//ms&lt;/span&gt;
        &lt;span class="na"&gt;maxConcurrent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;


  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;throttled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;throttled&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// for&lt;/span&gt;


    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;requests&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* rest of your code goes here */&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// main&lt;/span&gt;


  &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that there is a bit going on here. First of all we create a throttled function on the fly inside the loop with a particular argument and push it into an array of throttled functions. We then await on the requests array with Promise.all to run all requests in the same time so we would receive one response. The responses are ordered by the requests in the responses array. We print in the terminal the timestamps before and after the promises resolves and we will see what is the time difference in milliseconds. According to our math we should get a roughly 40 seconds in total to get 200 records, this may vary with your hardware and link and add couple more seconds to the total. Once you have the data you can do what ever you want with it and it has no more need for the remote API until the next time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pay attention that we do not await on the wrapped function&lt;/strong&gt;. I want to say also that we do not need to this on the fly, but rather to create a function that is responsible to create the Http request object with axios and pass it to the 'wrap' method, but we will still need to pass the argument to the throttled function inside the loop. I chose to do it like this because it is a simple implementation, but in case we have a more complex logic the definitely we will create a helper function.&lt;/p&gt;

&lt;p&gt;I hope this was very informative for you and would become very useful in the future. I also recommend to read the documentation of Bottleneck, it has more to offer than what we'd cover in this article.&lt;/p&gt;

&lt;p&gt;In a personal note i would really appreciate if you could provide some feedback on what you are reading, this would help me a lot. I am talking about my English skills, or something that i missed to address in the article itself, whatever you find can be very valuable for me to improve.&lt;/p&gt;

&lt;p&gt;Stay tuned for next&lt;br&gt;
Like, subscribe, comment and whatever ...&lt;br&gt;
Thank you &amp;amp; Goodbye&lt;/p&gt;

</description>
      <category>node</category>
      <category>ratelimit</category>
      <category>webdev</category>
      <category>bottleneck</category>
    </item>
    <item>
      <title>How on earth does this work?</title>
      <author>RiversideRocks</author>
      <pubDate>Sat, 28 Aug 2021 15:28:32 +0000</pubDate>
      <link>https://dev.to/riversiderocks/how-on-earth-does-this-work-11e</link>
      <guid>https://dev.to/riversiderocks/how-on-earth-does-this-work-11e</guid>
      <description>&lt;p&gt;I was browsing the internet the other day and came across a site known as spur.us. The site claims to "Stops fraud and abuse on the internet" by collecting and indexing IP usage, VPN IPs, and proxy IPs.&lt;/p&gt;

&lt;p&gt;Its a very interesting site, you can get info on any IP by visiting spur.us/context/youriphere. My question is, how does it work? How does a site collect data on every IP address out there? How do they know that X amount of people are on my IP address? How do they know that I have connected to the Tor network or used ProtonVPN?&lt;/p&gt;

</description>
      <category>security</category>
    </item>
  </channel>
</rss>
