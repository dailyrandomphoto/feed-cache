<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Faster module tests with Facter 4 and rspec-puppet</title>
      <author>Gabriel Nagy</author>
      <pubDate>Sat, 22 Jan 2022 10:03:16 +0000</pubDate>
      <link>https://dev.to/puppet/faster-module-tests-with-facter-4-and-rspec-puppet-561e</link>
      <guid>https://dev.to/puppet/faster-module-tests-with-facter-4-and-rspec-puppet-561e</guid>
      <description>&lt;p&gt;The latest major version of &lt;a href="https://github.com/puppetlabs/facter"&gt;Facter&lt;/a&gt;—Puppet's tool for collecting system information—&lt;a href="https://puppet.com/blog/facter-4-back-to-the-roots/"&gt;has been out&lt;/a&gt; for some time now. However, we've been hard at work fixing bugs ever since. The fact that Facter has to be able to run on a variety of operating systems and architectures makes maintenance quite a challenging ordeal.&lt;/p&gt;

&lt;p&gt;Returning to using Ruby as the language of choice (Facter 3 was &lt;a href="https://github.com/puppetlabs/facter/tree/3.x"&gt;written in C++&lt;/a&gt;) meant that we'd have a lot more freedom in structuring and writing the code, mostly at the expense of the added run time. This isn't an issue for how most people use Facter, for example Puppet loads &lt;a href="https://github.com/puppetlabs/puppet/blob/a5a77602a275f1106be9e6a810c5878d08998299/lib/puppet/indirector/facts/facter.rb#L39"&gt;all available facts&lt;/a&gt; at once when it runs, so a few seconds of added run time won't make a difference with Puppet runs that already take minutes. This was something we took into account when making the decision to return to Ruby with Facter 4 (initially Facter was written in Ruby, but was then rewritten in C++ for improved performance). What we didn't take into account were the intricacies of how Facter interacts with other downstream projects that we weren't aware of, such as the &lt;a href="https://rspec-puppet.com/"&gt;rspec-puppet&lt;/a&gt; test framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-raw-rspecpuppet-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;rspec-puppet&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;Well, RSpec is a well-known test framework for Ruby, and Puppet is... well, you probably already know or you wouldn't be here reading these words.&lt;/p&gt;

&lt;p&gt;rspec-puppet is the tool of choice when writing unit tests for Puppet modules.  It provides a helpful syntax for interacting with Puppet catalogs in an RSpec way. Since it's unfeasible to acceptance test Puppet functionality on dozens of operating systems and versions, rspec-puppet circumvents this by making Facter &lt;em&gt;trick&lt;/em&gt; Puppet into thinking it runs on different OS configurations.&lt;/p&gt;

&lt;p&gt;Puppet gets almost all of its system-related information using facts, so for example if you're running some Linux and you're curious to see how your Puppet manifest would behave on macOS, in most cases it's enough to feed Facter a bunch of macOS facts. Of course, the underlying implementation is more complicated than that, especially for Windows, but in a nutshell this is how rspec-puppet works.&lt;/p&gt;

&lt;p&gt;For each test, rspec-puppet &lt;a href="https://github.com/puppetlabs/rspec-puppet/blob/84a9cfe48257e09061bda565189766cebd03d426/lib/rspec-puppet/support.rb#L482"&gt;stubs the fake facts&lt;/a&gt; using the &lt;a href="https://puppet.com/docs/puppet/latest/custom_facts.html"&gt;custom facts API&lt;/a&gt;. The &lt;em&gt;fake&lt;/em&gt; facts it gets from &lt;a href="https://github.com/voxpupuli/facterdb"&gt;facterdb&lt;/a&gt;, which is a gem that contains "dummy" facts for a variety of operating systems and Facter versions—basically lots of files containing &lt;code&gt;facter --json&lt;/code&gt; output. The resulting information is then fed to Puppet for catalog compilation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-slower-and-slower"&gt;
  &lt;/a&gt;
  Getting slower and slower...
&lt;/h2&gt;

&lt;p&gt;Over time, &lt;a href="https://tickets.puppetlabs.com/browse/FACT-3039"&gt;people have been noticing&lt;/a&gt; that module tests running with Facter 4 were much slower than Facter 2. Module tests have skipped Facter 3 altogether because even though Facter 3 ships a compatible Ruby module, in the end it's C++ code that's extremely incompatible with the Ruby ecosystem (you can't &lt;code&gt;gem install&lt;/code&gt; it like you would any other gem).&lt;/p&gt;

&lt;p&gt;After some investigation it turned out that Facter 4 was evaluating underlying core facts even though they had been overridden by custom facts. The first instinct would be to classify this as a bug, but a closer look showed us that this functionality was intended in order to be fully-compatible with Facter 3.  And because modules never ran tests with Facter 3 this wasn't a problem until now.&lt;/p&gt;

&lt;p&gt;Overriding a core fact, similar to how rspec-puppet does:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Facter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:ipaddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;weight: &lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;setcode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'1.1.1.1'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will return the correct value (1.1.1.1) but it will cause Facter to also load the core &lt;code&gt;ipaddress&lt;/code&gt; fact, ultimately resolving all networking facts, which means executing system commands. &lt;/p&gt;

&lt;p&gt;Assuming our custom &lt;code&gt;ipaddress&lt;/code&gt; fact is defined inside the &lt;code&gt;custom_facts&lt;/code&gt; directory, here's what gets called when we attempt to resolve the fact:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ FACTERLIB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;/custom_facts strace &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nt"&gt;-eexecve&lt;/span&gt; facter ipaddress
&lt;span class="o"&gt;[&lt;/span&gt;pid 1777063] execve&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/usr/bin/ip"&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"ip"&lt;/span&gt;, &lt;span class="s2"&gt;"-o"&lt;/span&gt;, &lt;span class="s2"&gt;"link"&lt;/span&gt;, &lt;span class="s2"&gt;"show"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, 0x563bf6b7acf0 /&lt;span class="k"&gt;*&lt;/span&gt; 110 vars &lt;span class="k"&gt;*&lt;/span&gt;/&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
&lt;span class="o"&gt;[&lt;/span&gt;pid 1777067] execve&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/usr/bin/ip"&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"ip"&lt;/span&gt;, &lt;span class="s2"&gt;"link"&lt;/span&gt;, &lt;span class="s2"&gt;"show"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, 0x563bf64eafa0 /&lt;span class="k"&gt;*&lt;/span&gt; 110 vars &lt;span class="k"&gt;*&lt;/span&gt;/&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
&lt;span class="o"&gt;[&lt;/span&gt;pid 1777068] execve&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/usr/bin/dhcpcd"&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"/usr/bin/dhcpcd"&lt;/span&gt;, &lt;span class="s2"&gt;"-U"&lt;/span&gt;, &lt;span class="s2"&gt;"lo"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, 0x563bf6aa57b0 /&lt;span class="k"&gt;*&lt;/span&gt; 110 vars &lt;span class="k"&gt;*&lt;/span&gt;/&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
&lt;span class="c"&gt;# ... dhcpcd is called for every network interface on the system&lt;/span&gt;
&lt;span class="c"&gt;# I removed the other calls for brevity&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;pid 1777078] execve&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/usr/bin/ip"&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"ip"&lt;/span&gt;, &lt;span class="s2"&gt;"route"&lt;/span&gt;, &lt;span class="s2"&gt;"show"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, 0x563bf6aba230 /&lt;span class="k"&gt;*&lt;/span&gt; 110 vars &lt;span class="k"&gt;*&lt;/span&gt;/&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
&lt;span class="o"&gt;[&lt;/span&gt;pid 1777079] execve&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/usr/bin/ip"&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"ip"&lt;/span&gt;, &lt;span class="s2"&gt;"-6"&lt;/span&gt;, &lt;span class="s2"&gt;"route"&lt;/span&gt;, &lt;span class="s2"&gt;"show"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, 0x563bf6ae37d0 /&lt;span class="k"&gt;*&lt;/span&gt; 110 vars &lt;span class="k"&gt;*&lt;/span&gt;/&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doing this hundreds or even thousands of times per test suite definitely adds to the increase in run time, and it's redundant since the resolved facts are never needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixing-things-without-breaking-more-things"&gt;
  &lt;/a&gt;
  Fixing things without breaking more things
&lt;/h2&gt;

&lt;p&gt;Modifying Facter's behavior—undocumented as it was—was a no-go from the start,  as we &lt;a href="https://tickets.puppetlabs.com/browse/FACT-3000"&gt;found out before&lt;/a&gt; (Facter is a good example of &lt;a href="https://www.hyrumslaw.com/"&gt;Hyrum's law&lt;/a&gt; in action). So, we had to think of other ways to improve performance.&lt;/p&gt;

&lt;p&gt;We started by decoupling Puppet from Facter as much as we could, introducing the possibility of having &lt;a href="https://tickets.puppetlabs.com/browse/PUP-11216"&gt;multiple Facter backends&lt;/a&gt;. While Puppet would &lt;a href="https://github.com/puppetlabs/puppet/blob/a5a77602a275f1106be9e6a810c5878d08998299/lib/puppet/runtime.rb#L21"&gt;use&lt;/a&gt; the &lt;a href="https://github.com/puppetlabs/puppet/blob/a5a77602a275f1106be9e6a810c5878d08998299/lib/puppet/facter_impl.rb"&gt;default Facter implementation&lt;/a&gt; when running on its own, external users would be able to define and pass their own Facter implementation when initializing Puppet, similar to how puppetserver configures Puppet to use its JRuby-compliant HTTP client.&lt;/p&gt;

&lt;p&gt;To avoid breaking the Facter API, we ended up &lt;a href="https://github.com/puppetlabs/rspec-puppet/blob/046340805ba8877e34af22be7756ee972da84f9b/lib/rspec-puppet/facter_impl.rb"&gt;implementing an overcomplicated way of interacting with a hash&lt;/a&gt;. Using our dumb Facter backend, custom facts were now simply added to a hash, and querying them would just produce them from the hash if available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FacterTestImpl&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@facts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fact_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@facts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fact_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s1"&gt;'Facter.add expects a block'&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;block_given?&lt;/span&gt;
    &lt;span class="vi"&gt;@facts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;instance_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With our custom implementation we bypassed Facter altogether. This managed to bring us back to Facter 2 speeds, which behaved similarly by just returning the custom fact's value without resolving any additional facts.&lt;/p&gt;

&lt;p&gt;Of course, there may be downsides to this approach, as Facter code paths will no longer be executed by rspec-puppet. In the past there have been occasions where we merged Facter work that passed our CI, but ended up failing in module tests, so switching to this implementation will get rid of this level of testing. I'd argue that it wasn't a module's business to validate Facter itself, but it was a good safety net for us as maintainers.&lt;/p&gt;

&lt;p&gt;And because performance improvements mean nothing without showing the numbers, here's how test times have changed for the &lt;a href="https://github.com/puppetlabs/puppet-nginx"&gt;puppet-nginx&lt;/a&gt; module:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N_0nFVA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwhqmqiit3i2n0x3n318.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N_0nFVA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwhqmqiit3i2n0x3n318.png" width="880" height="323"&gt;&lt;/a&gt;&lt;br&gt;Running &lt;code&gt;rake parallel_spec&lt;/code&gt; on the module using Puppet 7 / Facter 4 took around 47 minutes with the original rspec-puppet implementation.
  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Akhy4w-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jg65snejczql6wj99ym2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Akhy4w-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jg65snejczql6wj99ym2.png" width="880" height="313"&gt;&lt;/a&gt;&lt;br&gt;We managed to shave off around 11 minutes off the test run by using the custom Facter implementation in rspec-puppet.
  &lt;/p&gt;

&lt;p&gt;One thing I haven't mentioned is that running the same tests with Puppet 6 takes &lt;a href="https://github.com/GabrielNagy/puppet-nginx/runs/4149964576"&gt;a total of 25 minutes&lt;/a&gt;, so there's more to improve in Puppet itself as well.  However, from a Facter standpoint it's impossible to make the tests any faster, unless Ruby itself improves hash access speed 😜.&lt;/p&gt;

&lt;p&gt;This new functionality is opt-in and configurable by setting the &lt;a href="https://github.com/puppetlabs/rspec-puppet#facter_implementation"&gt;&lt;code&gt;facter_implementation&lt;/code&gt;&lt;/a&gt; RSpec option in your &lt;code&gt;spec_helper.rb&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;facter_implementation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:rspec&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It was first &lt;a href="https://github.com/puppetlabs/rspec-puppet/pull/16"&gt;made available&lt;/a&gt; in rspec-puppet &lt;a href="https://rubygems.org/gems/rspec-puppet/versions/2.11.0"&gt;2.11.0&lt;/a&gt;, with an additional &lt;a href="https://github.com/puppetlabs/rspec-puppet/pull/19"&gt;bugfix&lt;/a&gt; that was released in rspec-puppet &lt;a href="https://rubygems.org/gems/rspec-puppet/versions/2.11.1"&gt;2.11.1&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;The investigation and work surrounding this improvement has spanned many months and was the product of multiple Puppet employees and community members, namely &lt;a href="https://github.com/gimmyxd"&gt;Gimmy&lt;/a&gt;, &lt;a href="https://github.com/joshcooper"&gt;Josh Cooper&lt;/a&gt;, &lt;a href="https://github.com/ekohl"&gt;Ewoud Kohl van Wijngaarden&lt;/a&gt; and &lt;a href="https://github.com/bastelfreak"&gt;Tim Meusel&lt;/a&gt;. Thanks to everyone who contributed!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Pass the AWS Solutions Architect Professional Exam</title>
      <author>luan vu</author>
      <pubDate>Sat, 22 Jan 2022 09:53:23 +0000</pubDate>
      <link>https://dev.to/luanvu/how-to-pass-the-aws-solutions-architect-professional-exam-4f34</link>
      <guid>https://dev.to/luanvu/how-to-pass-the-aws-solutions-architect-professional-exam-4f34</guid>
      <description>&lt;p&gt;You are looking to take the AWS Certified Solutions Architect — Professional certification exam. Today I will help you with some tips &amp;amp; tricks that I learned during my professional exam preparation two years ago.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-passed-the-new-aws-solutions-architect-professional"&gt;
  &lt;/a&gt;
  How I PASSED the New AWS Solutions Architect Professional?
&lt;/h2&gt;

&lt;p&gt;Another guide to the certification exam, probably reading the White Paper, watching videos on YouTube, taking that course, etc. No! Such articles are present on the internet a lot. I can get you some:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://acloud.guru/forums/aws-csa-pro-2019/discussion/-L_joCzK9FTbpP2P7H0Z/how_i_passed_the_new_aws_solut"&gt;How I PASSED the New AWS Solutions Architect Professional (Feb 2019 version) exam last March 9!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://acloud.guru/forums/aws-csa-pro-2019/discussion/-Lc31u8nAIbpeo9q9mM7/aws_certified_solutions_archit"&gt;AWS Certified Solutions Architect --- Professional 2019 (feedback)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://virtualbonzo.com/2020/02/03/my-aws-solution-architect-professional-certification-experience/"&gt;My AWS Solution Architect Professional Certification Experience&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/grey-frogs/my-path-to-aws-certified-solutions-architect-professional-bebd42eb5d5"&gt;My path to AWS Certified Solutions Architect --- Professional&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://acloud.guru/forums/aws-certified-solutions-architect-professional/discussion/-KEAY5AHdre2DzoI-H99/passed-sa-pro-today"&gt;Passed SA Pro today&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those articles are already too many, and adding one of mine is nothing more. Are the other people correct? Right. But to do it is not as easy as it sounds. The exam depends on your ability to learn and your background knowledge. If you study for four months, you will die (I have looked for a whole year, what a shame), but you could still don't pass no matter an entire year's preparation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-standard-learning-path"&gt;
  &lt;/a&gt;
  What is the standard learning path?
&lt;/h3&gt;

&lt;p&gt;In general, The path to passing the AWS certification exam includes (don't miss anything):&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-read-white-papers"&gt;
  &lt;/a&gt;
  1.  Read White papers
&lt;/h3&gt;

&lt;p&gt;There are hundreds of White papers, some with thousands of pages. Can you read it all? No matter how many you read, how much are you able to remember?&lt;/p&gt;

&lt;p&gt;I just checked, now there are 314 White Paper &amp;amp; Guides; you can check them at &lt;a href="https://aws.amazon.com/whitepapers/?whitepapers-main.sort-by=item.additionalFields.sortDate&amp;amp;whitepapers-main.sort-order=desc&amp;amp;awsm.page-whitepapers-main=1"&gt;AWS Whitepapers &amp;amp; Guides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should read all the essential White Papers mentioned in those articles above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-read-faqs"&gt;
  &lt;/a&gt;
  2.  Read FAQs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/faqs/"&gt;AWS | FAQs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FAQs are also important. You should read all.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-watch-aws-reinvent-this-is-my-architecture-in-youtube"&gt;
  &lt;/a&gt;
  3.  Watch AWS re:Invent, This Is My Architecture in YouTube
&lt;/h3&gt;

&lt;p&gt;If you don't have much chance to try services architectures (like me), these videos are beneficial. They show you how a service should be used in actual projects (the exam too, of course) and how a group of services interact in architecture to resolve problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/amazonwebservices/search?query=AWS%20Re%3Ainvent"&gt;Amazon Web Services&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-take-some-onlineoffline-courses"&gt;
  &lt;/a&gt;
  4.  Take some online/offline courses
&lt;/h3&gt;

&lt;p&gt;It is the easiest to access. Many (most) AWS courses are available, both paid and paid. AWS also has some Exam Readiness (Free) to guide you through the exam questions&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/training/course-descriptions/exam-workshop-solutions-architect-professional/"&gt;Exam Readiness: AWS Certified Solutions Architect --- Professional&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many types of courses, but they are not enough in general. Especially some of the default courses require you to have a good knowledge of AWS and the overview for you. If you stick to them only, failure is inevitable.&lt;/p&gt;

&lt;p&gt;I found a precious course on Udemy. It could be more expensive than usual, but the author deserves it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/share/104sE03@v25ocWwp5mS6EczCcLEoR6xjbdtVk0GPohkBLMVwUaLf4HB5bd4GAH_1dxW_J10=/"&gt;https://www.udemy.com/share/104sE03@v25ocWwp5mS6EczCcLEoR6xjbdtVk0GPohkBLMVwUaLf4HB5bd4GAH_1dxW_J10=/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fun Fact: The first time I took the exam, It hit me in the face with a service called Amazon Mechanical Turk, which didn't appear in any of the White Papers, FAQs, or AWS Console. I think it is a question that has not been scored, so don't worry if AWS gives you such a surprise.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-practice"&gt;
  &lt;/a&gt;
  5.  Practice
&lt;/h3&gt;

&lt;p&gt;Those learning materials are certainly informative, but it's hard to remember them all if you just read them and watch them do it. Practicing helps you understand better reflect better. Never skip practice any service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-learn-english"&gt;
  &lt;/a&gt;
  6.  Learn English
&lt;/h3&gt;

&lt;p&gt;It's serious. It depends on the certification level you take the exam. With Professional, I took the exam, and all questions are very long; printing must also be over 50 pages. As I read and thought of the answer, it was indeed a terrible sprint. For test takers whose native language is not English (non-English speakers or English as a Second Language), AWS allows you to request accommodations, whereby you get a bonus of 30 minutes each time, so take advantage of it.&lt;/p&gt;

&lt;p&gt;Many of you are probably shocked and don't dare to study, but that's the truth. This test is challenging, requiring hundreds of hours of study and practice. You should have terrible determination to make it through. Fortunately, Amazon will only test you on a few essential services. If you know (to the point of mastering) them, you have achieved over 80%. And if you don't understand these services and lose points, then strange services you never touch will be a lifesaver, but it is boundless knowledge. That is why AWS Solutions Architect Professional is touched, it is difficult to understand something deeply, and if it is broad, it is too wide to understand it all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-amp-trick"&gt;
  &lt;/a&gt;
  Tip &amp;amp; Trick
&lt;/h2&gt;




&lt;p&gt;I'm not a person who can remember well. I tried to learn by going from service to service and memorizing them. According to statistics, I have read at least 47 full books about AWS, about 10--20 White Papers. However, the more I try to remember, the more I forget, learning 10--20 services, overlooking the first ones, reading a lot of books also forgetting quite a bit. So, I chose to study on my own.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#service-classification"&gt;
  &lt;/a&gt;
  Service classification
&lt;/h3&gt;

&lt;p&gt;AWS has already categorized it for you at &lt;a href="https://aws.amazon.com/products/"&gt;https://aws.amazon.com/products/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Service classification is critical. It helps you know what you face and how you deal with it. If you encounter a storage service, you need to know security, capacity, availability, and reliability. If you use databases, remember it is RDBMS or NoSQL, cache, or Big data.&lt;/p&gt;

&lt;p&gt;It also helps you to remember the service better. There are various service names you have never heard before, so classification helps you have some idea about it. For instance, EC2 Auto Scaling or Elastic Load Balancer sounds reminiscent, but what do you think Neptune's purpose? Universe? Snowball, Glacier, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#based-on-wellarchitected-frameworks-five-pillars"&gt;
  &lt;/a&gt;
  Based on Well-Architected Framework's Five Pillars
&lt;/h3&gt;

&lt;p&gt;Well-Architected Framework provides guidelines to help customers deploy systems on AWS. The framework offers five main pillars:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Security&lt;/li&gt;
&lt;li&gt;  Reliability&lt;/li&gt;
&lt;li&gt;  Performance Efficiency&lt;/li&gt;
&lt;li&gt;  Cost Optimization&lt;/li&gt;
&lt;li&gt;  Operational Excellence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When encountering any service, you need to think about these pillars.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-security"&gt;
  &lt;/a&gt;
  1.  Security
&lt;/h3&gt;

&lt;p&gt;AWS places great emphasis on security across all architects. There are two main types of security that you need to know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Security operations&lt;/li&gt;
&lt;li&gt;  Data protection&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#security-operations"&gt;
  &lt;/a&gt;
  Security operations
&lt;/h4&gt;

&lt;p&gt;There are always employees who do wrong things they are not authorized to do or should not do. Those are why there are services like IAM, Organizations, Cognito, CloudTrail, etc. When learning a specific service, you must know how to grant access or limit it. Amazon S3, how to not allow others to publish it? How do I allow access to someone with another AWS account (and only them)? How to prevent someone from Terminating EC2 instances? Knowing what a service can do is important, but securing it is just as important.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#data-protection"&gt;
  &lt;/a&gt;
  Data protection
&lt;/h4&gt;

&lt;p&gt;You must get used to the concept of Encrypt at rest and Encrypt in transit. Is data stored in Storage encrypted? Is it encrypted when transferring data to the internet or on-premises via VPN? Most services are encrypted in transit by default, but encrypt at rest is not (Encryption is not enabled by default on EBS). There are still a lot of demanding customers out there. They require even more security. Have to use CloudHSM, use their certificate, or use end-to-end encryption too, and it's tough as well. You will become confusing with such services as KMS, CloudHSM, Direct Connect, Security Hub, Transit Gateway, VPN, etc... Still, it will frequently appear in the exam because that's how enterprise applications are built.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-resiliency-availability-and-disaster-recovery-dr"&gt;
  &lt;/a&gt;
  2.  Resiliency: Availability and Disaster Recovery (DR)
&lt;/h3&gt;

&lt;p&gt;High Availability, Blue/Green Deployment, Zero Down Time, Uptime, service level agreement (SLA), recovery time objective (RTO), recovery point objective (RPO), Redundancy, Failback, etc. You must go into deep dives on it.&lt;/p&gt;

&lt;p&gt;Maybe the projects you have done or are doing are at an elementary level: one server, one database, one data center, etc. Stop and start again. But when it came to AWS, the architecture standard took a new high level. Your system must be redundant for everything: hardware failure leading to server stop or data loss. Possibilities like hurricanes, earthquakes, and volcanoes destroy a data center. Even, you have to consider the case of the main error from AWS.&lt;/p&gt;

&lt;p&gt;You need to know four ways to preserve the system&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Backup and Restore&lt;/li&gt;
&lt;li&gt;  Pilot Light&lt;/li&gt;
&lt;li&gt;  Warm Standby&lt;/li&gt;
&lt;li&gt;  Multi-site Example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, EC2 only guarantees 95.0% availability, which means every 1 hour, EC2 can be down for 3 minutes. We need to combine with Auto Scaling Group, Load Balancer to increase availability. More advanced, use Cross-region Load Balancer, Multi-site between AWS infrastructure and on-premises. The Serverless option can also be considered as an alternative. What about data? EC2 stores data in EBS. How to ensure no data loss? By now, you will probably have to know things like RAID, Snapshot, Point-in-time-recovery (PITR).&lt;/p&gt;

&lt;p&gt;Similarly, in RDS, we have RDS snapshot, backtrack, Replica, Multi-AZ, etc. With ElastiCache, there is also Multi A-Z, Failover, Append Only Files (AOF)...You also need to know how long it takes to recover (RTO) and how much data can be lost (RPO). If customers need to restore the system within 1 hour, storing it in Glacier is wrong.&lt;br&gt;
Refer&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://aws.amazon.com/blogs/publicsector/rapidly-recover-mission-critical-systems-in-a-disaster/"&gt;Rapidly recover mission-critical systems in a disaster&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://cloud.netapp.com/blog/understanding-aws-high-availability-compute-sql-and-storage"&gt;AWS High Availability: Compute, SQL and Storage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://aws.amazon.com/blogs/startups/high-availability-for-mere-mortals/"&gt;High Availability for Mere Mortals&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-performance"&gt;
  &lt;/a&gt;
  3.  Performance
&lt;/h3&gt;

&lt;p&gt;The performance here is understood as using computing resources to meet system requirements and maintain performance when conditions change or technology evolves. Some of the issues raised could be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Latency&lt;/li&gt;
&lt;li&gt;  IOPS&lt;/li&gt;
&lt;li&gt;  Throughput&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When choosing a service to use for your architecture, there are four types of resources you need to consider: compute, storage, database, and network.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#compute"&gt;
  &lt;/a&gt;
  Compute
&lt;/h4&gt;

&lt;p&gt;There are three main types of computing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;Instance&lt;/em&gt;: a virtual server, typically EC2 and Lightsail. You can use EC2 to solve everything if there is no other option. For example, launch a MySQL server inside an EC2 instance.&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Container&lt;/em&gt;: this is a way of virtualizing the operating system, I can immediately think of Docker, Kubernetes. With AWS, think about ECS, Fargate, and EKS. When to use Container instead of Instance? Most of the answers (in the test) will be customers who already use on-premises containers and want to spend the least amount of effort if migrating to AWS.&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Function&lt;/em&gt;: focus on code and run without having to manage instances. Functions have three essential benefits: minimal management effort, outstanding scalability and are particularly suitable for event-based programs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h4&gt;

&lt;p&gt;There are three main types of storage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Object Storage: just S3&lt;/li&gt;
&lt;li&gt;  Block Storage: just EBS&lt;/li&gt;
&lt;li&gt;  File Storage: EFS, FSx&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my opinion, Storage Gateway should also be included here. The storage classification doesn't make much sense either. You can save it in Object Storage, Block Storage, or File Storage with a file. However, there is a slight difference. E.g., S3 is limited to 3,500 PUT/COPY/POST/DELETE and 5,500 GET/HEAD requests per second per prefix (directory name), and don't forget there's also a KMS limit if you choose to encrypt. And yet, accessing files from S3 will have extremely high latency. Think about them when you use them. With EBS, it is necessary to know the difference between the volume types, which are optimal for IOPS? Which are optimal for Throughput? If you need even higher performance, you can think of RAID, but what are the disadvantages of RAID? Data loss, Downtime. EBS still has certain limitations: IOPS, Throughput, Hybrid Storage, Limit storage size, Sharing, Availability, etc. Then you will need to use EFS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h4&gt;

&lt;p&gt;Databases can be divided into seven types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Relational: RDS&lt;/li&gt;
&lt;li&gt;  Key-Value: DynamoDB, or maybe even Redis&lt;/li&gt;
&lt;li&gt;  Document: DocumentDB&lt;/li&gt;
&lt;li&gt;  In-Memory: ElastiCache, MemoryDB (new)&lt;/li&gt;
&lt;li&gt;  Graph: Neptune&lt;/li&gt;
&lt;li&gt;  Time-Series: Timestream&lt;/li&gt;
&lt;li&gt;  Ledger: QLDB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each type of database will be used for different purposes, but sometimes it is not too noticeable.&lt;/p&gt;

&lt;p&gt;E.g., Customers using MySQL on-premises does not mean that going to AWS is required to use RDS. That's also just an option. Another option could be MySQL on EC2 instance, converting MySQL to DynamoDB.&lt;/p&gt;

&lt;p&gt;If you want a database with high access frequency low latency, it can be DynamoDB, but if the data is not too necessary, ElastiCache is also a good choice.&lt;/p&gt;

&lt;p&gt;In general, the database selection problem is not too complex. Usually, the question will revolve around the issue of optimizing a particular type of database.&lt;/p&gt;

&lt;p&gt;E.g., the customer is using MySQL on RDS and is noticing slow response as traffic increases. Think about multi-writer, multi-reader, and maybe even ElastiCache to reduce RDS load.&lt;/p&gt;

&lt;p&gt;Refer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/watch?v=q81TVuV5u28&amp;amp;ref=wellarchitected"&gt;AWS re:Invent 2019: Leadership session: AWS purpose-built databases (DAT209-L)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#network"&gt;
  &lt;/a&gt;
  Network
&lt;/h4&gt;

&lt;p&gt;All AWS components are connected through a network, AWS's private network, or the internet.&lt;/p&gt;

&lt;p&gt;EC2 instances connect to EBS through the internal network; Route53, CloudFront, S3 in/out internet; the connection between AWS and on-premises... In this regard, there are several standard solutions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  CloudFront can reduce latency when accessing global&lt;/li&gt;
&lt;li&gt;  Deploying (adding a system) on a region near the user is also the best way to reduce latency&lt;/li&gt;
&lt;li&gt;  Upload/Download on S3 is slow: Use S3 transfer acceleration&lt;/li&gt;
&lt;li&gt;  Connecting to On-premises using VPN is slow: Spend more money to use Direct Connect&lt;/li&gt;
&lt;li&gt;  Latency-Based Routing in Amazon Route 53&lt;/li&gt;
&lt;li&gt;  Use VPC Endpoints to use AWS's internal network
Refer&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://wa.aws.amazon.com/wat.question.PERF_1.en.html"&gt;PERF 1: How do you select the best performing architecture?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://wa.aws.amazon.com/wat.question.PERF_2.en.html"&gt;PERF 2: How do you select your compute solution?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://wa.aws.amazon.com/wat.question.PERF_3.en.html"&gt;PERF 3: How do you select your storage solution?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://wa.aws.amazon.com/wat.question.PERF_4.en.html"&gt;PERF 4: How do you select your database solution?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://wa.aws.amazon.com/wat.question.PERF_5.en.html"&gt;PERF 5: How do you configure your networking solution?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://wa.aws.amazon.com/wat.question.PERF_6.en.html"&gt;PERF 6: How do you evolve your workload to take advantage of new releases?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://wa.aws.amazon.com/wat.question.PERF_7.en.html"&gt;PERF 7: How do you monitor your resources to ensure they are performing?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://wa.aws.amazon.com/wat.question.PERF_8.en.html"&gt;PERF 8: How do you use tradeoffs to improve performance?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://wa.aws.amazon.com/wat.pillar.performance.en.html"&gt;Performance Efficiency&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-cost"&gt;
  &lt;/a&gt;
  4.  Cost
&lt;/h3&gt;

&lt;p&gt;Usually, there are two scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Customers already have the system and want to reduce the price&lt;/li&gt;
&lt;li&gt;  Customers want to migrate to AWS for the lowest possible price.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how to optimize the price:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Choose cheaper services. When to use Kinesis instead of SQS? When to use a VPN instead of Direct Connect? When to use Spot Instances?&lt;/li&gt;
&lt;li&gt;  Remove unnecessary resources.&lt;/li&gt;
&lt;li&gt;  Commitment: Savings Plans, Reserved Instances&lt;/li&gt;
&lt;li&gt;  Cost Management: Consolidated Billing, Cost Allocation Tags, Trust Advisor,...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, remember, optimizing for price also comes at the expense of other things (performance, availability, reliability, security, etc.). The architecture you choose may not be perfect, but it is still the correct answer if it is feasible and the most cost-effective according to the customer's requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-operational-excellence"&gt;
  &lt;/a&gt;
  5.  Operational Excellence
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;"The Operational Excellence pillar includes the ability to support development and run workloads effectively, gain insight into their operations, and to continuously improve supporting processes and procedures to deliver business value"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It depends on services, but there are some common aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Infrastructure as code: in short, CloudFormation, Opsworks. You don't need to understand what Ansible or Puppet is, but you should know what Opsworks is and what it is suitable for. You also don't need to master the CloudFormation template, but you must know some basic syntax and create some services by CloudFormation, such as VPC, Subnets, RDS...&lt;/li&gt;
&lt;li&gt;  Basic settings: some services have unique settings you must be familiar. E.g.: could I change Lambda CPU configuration? Restore an RDS snapshot, make a failover on an RDS instance? Change Launch Template, etc.&lt;/li&gt;
&lt;li&gt;  Monitoring, Incident response: logging, metric visualizer, alarms, incident management, and remediation&lt;/li&gt;
&lt;li&gt;  Some managed operator services: there are some services you should get to know, such as CloudTrail, Config, Personal Health Dashboard, Organizations, Service Catalog, Systems Manager.
Refer&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://wa.aws.amazon.com/wellarchitected/2020-07-02T19-33-23/wat.pillar.operationalExcellence.en.html"&gt;https://wa.aws.amazon.com/wellarchitected/2020-07-02T19-33-23/wat.pillar.operationalExcellence.en.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#dont-trust-keywords"&gt;
  &lt;/a&gt;
  Don't trust keywords
&lt;/h3&gt;

&lt;p&gt;When taking the exam, many of you will have a trick that believes in the keyword, see this keyword, and immediately decide. But here, things are not so clear. If you insist on choosing the most appropriate service, it is easy to lead you to the wrong architecture because this is a collection of services and methods, not a story of just one service.&lt;/p&gt;

&lt;p&gt;E.g., When a customer needs a Relational database, RDS comes to mind, but don't forget you could also use EC2 and launch the database on its instance. Why does it? Because of the cost, there are features of the database that RDS does not support.&lt;/p&gt;

&lt;p&gt;When customers think of storing static data, you think of S3. But, saving in EBS, EFS is also away.&lt;/p&gt;

&lt;p&gt;When facing a problem, the answers will gather a lot of services and methods to solve it. Your job is to choose the most suitable plan, only the most appropriate service is not enough.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-what-customers-ask"&gt;
  &lt;/a&gt;
  Do what customers ask
&lt;/h3&gt;

&lt;p&gt;There are widespread errors I have encountered. Each question will present many problems, and you must focus on only some of them: What the customer wants. These could be requests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  How to optimize price?&lt;/li&gt;
&lt;li&gt;  How to reduce latency?&lt;/li&gt;
&lt;li&gt;  How to shorten the processing time?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why is it a problem? Because the content of the question will be very rambling and make you think of its request in the wrong way.&lt;/p&gt;

&lt;p&gt;E.g., The customer has a website deployed in region us-east-1, using EC2 instance and Application Load Balancer, Auto Scaling Group. The website has about 1 million users worldwide. Customers find that users accessing from Asia will experience significant latency. Ask how to optimize the price?&lt;/p&gt;

&lt;p&gt;You can think of CloudFront with global access, high latency, and optimal price. However, CloudFront is not price-optimized too much, sometimes even increasing costs, while customer requirements are price-optimized. So you have to think about Spot Instances, Reserved Instances. So, your job is to choose the answer to the question, don't let other things distract you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-management"&gt;
  &lt;/a&gt;
  Time management
&lt;/h3&gt;

&lt;p&gt;You have 170 minutes (or 200 minutes if you request as ESL) to solve 75 questions. However, the topic is very long. Furthermore, to the pressure of the exam, it is easy to get immersed in some difficult questions and waste a lot of time. Try to practice solving each question within 2 or 2.5 minutes. I will review the sentences marked with review the rest of the time.&lt;/p&gt;

&lt;p&gt;Also, do not mark the review too many. Should only keep the check under 20 sentences. For questions you don't know or think you can't answer, answer indiscriminately and don't look back; spend your precious time on questions that are more likely to earn points.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclude"&gt;
  &lt;/a&gt;
  Conclude
&lt;/h2&gt;

&lt;p&gt;The AWS Certified Solutions Architect --- Professional exam is challenging. You need a solid determination to overcome. But whether you pass or not, it doesn't matter; what matters is that you will gain various knowledge, which will help you in a real career path.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>sapc01</category>
      <category>certification</category>
    </item>
    <item>
      <title>Day 0: Joined dev.to!</title>
      <author>Nandan Wewhare</author>
      <pubDate>Sat, 22 Jan 2022 08:52:43 +0000</pubDate>
      <link>https://dev.to/nandanwewhare/day-0-joined-devto-16md</link>
      <guid>https://dev.to/nandanwewhare/day-0-joined-devto-16md</guid>
      <description>&lt;p&gt;Joined dev.to, aiming to write posts everyday here. The posts will be quite informal and maybe I'll try and use dev.to as a daily blog.&lt;/p&gt;

&lt;p&gt;Working on a full stack project, will update more on this in the coming posts. Technically haven't written a single line of code for this but design and stack is ready.&lt;/p&gt;

&lt;p&gt;Feeling a bit down on health side, let's see when I open the IDE 😜.&lt;/p&gt;

&lt;p&gt;Here's to beginnings 🍺&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 5 Websites To Find Great Illustrations</title>
      <author>Sachin Chaurasiya</author>
      <pubDate>Sat, 22 Jan 2022 08:13:15 +0000</pubDate>
      <link>https://dev.to/sachinchaurasiya/top-5-websites-to-find-great-illustrations-1kal</link>
      <guid>https://dev.to/sachinchaurasiya/top-5-websites-to-find-great-illustrations-1kal</guid>
      <description>&lt;p&gt;When we work with website designing and development we might need to add some illustrations to give some visuals so that users can visualize what we are designing and developing.&lt;/p&gt;

&lt;p&gt;To add illustrations we need to find or create one that matches our requirements. creating illustrations from scratch is time-consuming and takes a lot of effort, so instead of creating our own illustrations, we can get them from illustrations websites that are available for free plus (we can buy paid ones if required).&lt;/p&gt;

&lt;p&gt;In this article, I'm going to share the top 5 illustrations website where you can find different kinds of great illustrations for your next project.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storyset"&gt;
  &lt;/a&gt;
  Storyset
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M3bNdyOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762568143/AuUYcwFZL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M3bNdyOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762568143/AuUYcwFZL.png" alt="image.png" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Storyset is a cool collection of illustrations to power up your next project. there are 5 different styles available in Storyset. you can choose one and customize it as you want then export it as SVG or PNG.&lt;br&gt;
You can also apply the animation and export the animation in HTML, GIF or MP4 video formats.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-for-storyset"&gt;
  &lt;/a&gt;
  &lt;a href="https://storyset.com/"&gt;Link for storyset&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;## Open Doodles&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d3XDqyaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762683841/NxN3ICuPr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d3XDqyaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762683841/NxN3ICuPr.png" alt="image.png" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open Doodle is an open-source collection of free illustrations. it allows you to download illustrations in &lt;br&gt;
 SVG and PNG format.&lt;/p&gt;

&lt;p&gt;It also provides you with the &lt;a href="https://generator.opendoodles.com/"&gt;generator&lt;/a&gt; to generate doodles &lt;br&gt;
 using an existing theme or by creating your own theme.&lt;/p&gt;

&lt;p&gt;### &lt;a href="https://www.opendoodles.com/"&gt;Link for open doodles&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#themeisle"&gt;
  &lt;/a&gt;
  Themeisle
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_vSH4oI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762738674/otvK9iO1_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_vSH4oI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762738674/otvK9iO1_.png" alt="image.png" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Themeisle is a great website to get high-quality, free and delightful illustrations to use in your next project.&lt;br&gt;
You have to just specify your brand colour and then it will create all the illustrations with your brand colour.&lt;br&gt;
The best thing about themeisle is it allows you to download all the illustrations in one go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-for-theme-isle"&gt;
  &lt;/a&gt;
  &lt;a href="https://themeisle.com/illustrations/"&gt;Link for theme isle&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#humaaans"&gt;
  &lt;/a&gt;
  Humaaans
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9tXiqIx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762832497/23qh7niDF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9tXiqIx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762832497/23qh7niDF.png" alt="image.png" width="880" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Humaaans is a great website to get illustrations of people with a design library. You can edit all the illustrations using blush editor.&lt;br&gt;
You can customize their positions, clothing, colours, and hairstyle to create some cool scenes. You can add backgrounds and use the power of libraries to make it your own.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-for-humaaans"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.humaaans.com//"&gt;Link for humaaans&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#drawkit"&gt;
  &lt;/a&gt;
  Drawkit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkaZAXAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642763037711/vMvWr_kOy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkaZAXAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642763037711/vMvWr_kOy.png" alt="image.png" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Drawkit comes with various types of illustrations like &lt;strong&gt;Health &amp;amp; Medical Illustrations&lt;/strong&gt;, &lt;strong&gt;Digital marketing Illustrations&lt;/strong&gt;, &lt;strong&gt;Marketing and ads Illustrations&lt;/strong&gt; and etc.&lt;br&gt;
Drawkit has both free and premium illustrations. it also has a collection of icons to use in your next project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-for-drawkit"&gt;
  &lt;/a&gt;
  &lt;a href="https://drawkit.com/"&gt;Link for drawkit&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#undraw"&gt;
  &lt;/a&gt;
  UnDraw
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3PfFM9K_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642763080428/plZ9ODIWB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3PfFM9K_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642763080428/plZ9ODIWB.png" alt="image.png" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UnDraw is an OpenSource illustration project with beautiful SVG images that you can use completely free and without attribution.&lt;br&gt;
You can create your own illustration and contribute to the UnDraw project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-for-undraw"&gt;
  &lt;/a&gt;
  &lt;a href="https://undraw.co/illustrations/"&gt;Link for undraw&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;To summarize we talked about the top 5 illustration websites, some of them are open source and some of them are freemium.&lt;br&gt;
I use unDraw and Humaaans very often for my projects. let me know which one do you use and if it's not mentioned here then please add comments so that people get to know those websites as well.&lt;/p&gt;

&lt;p&gt;And that’s it for this topic. Thank you for reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/sachin-chaurasiya"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://twitter.com/sachindotcom"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/sachin87"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y61HrVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-blue.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Make Your First Contribution To Open Source</title>
      <author>Susmita Dey</author>
      <pubDate>Sat, 22 Jan 2022 07:44:05 +0000</pubDate>
      <link>https://dev.to/susmitadey/make-your-first-contribution-to-open-source-ono</link>
      <guid>https://dev.to/susmitadey/make-your-first-contribution-to-open-source-ono</guid>
      <description>&lt;h2&gt;
  &lt;a href="#open-source-is-something-awesome-it-will-make-you-fall-in-love-with-it"&gt;
  &lt;/a&gt;
  Open Source is something awesome. It will make you fall in love with it.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#read-the-following-steps-to-know-more"&gt;
  &lt;/a&gt;
  Read the following steps to know more:-
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It increases your level of confidence and helps you to connect with people from various countries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It makes you to learn how to contribute on any project and collaborate together.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It increases your communication skills.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can also give you a remote job and connect with your clients if you're freelancing as your side hustle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open Source is not just about code&lt;/strong&gt;; it's more than  connecting and collaborating with people and working on a project (maybe it's small or big doesn't matter) together; creating issues and pull requests, documenting the README file, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Conclusion:-&lt;/strong&gt;&lt;br&gt;
So, I would suggest you to remove your fear and start contributing to Open source repositories on GitHub. &lt;br&gt;
I started my Open Source journey by the inspiration of &lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/eddiejaoude"&gt;@eddiejaoude&lt;/a&gt; and joined his amazing #EddieHub Community on GitHub and did my first contribution there.&lt;/p&gt;

&lt;p&gt;💡&lt;strong&gt;Important One:-&lt;/strong&gt;&lt;br&gt;
This is my &lt;a href="https://github.com/Susmita-Dey"&gt;GitHub profile link&lt;/a&gt;&lt;br&gt;
Do check it out and feel free to contribute to any of my repositories. Start doing your first contribution on GitHub today. &lt;br&gt;
Also, feel free to &lt;a href="https://twitter.com/its_SusmitaDey"&gt;connect with me&lt;/a&gt; 😊&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>opensource</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>CSS Pseudo-classes: Links</title>
      <author>Chris Bongers</author>
      <pubDate>Sat, 22 Jan 2022 07:14:17 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/css-pseudo-classes-links-bm5</link>
      <guid>https://dev.to/dailydevtips1/css-pseudo-classes-links-bm5</guid>
      <description>&lt;p&gt;We already had a look at &lt;a href="https://daily-dev-tips.com/posts/css-pseudo-elements/"&gt;CSS pseudo-elements&lt;/a&gt;, and even how to use &lt;a href="https://daily-dev-tips.com/posts/tailwind-css-pseudo-elements/"&gt;pseudo-elemtns in Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But then I realized I've never talked about pseudo-classes, and they are pretty substantial as we use them all the time in web development.&lt;/p&gt;

&lt;p&gt;So this article is dedicated to pseudo-classes.&lt;/p&gt;

&lt;p&gt;Pseudo-classes can be used to style based on a certain state of an element.&lt;br&gt;
States could be that the user hovers an element or is an element is invalid.&lt;/p&gt;

&lt;p&gt;I've split this up into a series of four, where this is the first part about link pseudo-states.&lt;/p&gt;

&lt;p&gt;The other parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Link pseudo-states&lt;/em&gt; (this one 💖)&lt;/li&gt;
&lt;li&gt;Form pseudo states (coming soon)&lt;/li&gt;
&lt;li&gt;Element state selectors (coming soon)&lt;/li&gt;
&lt;li&gt;Other pseudo states (coming soon)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#link-pseudostates"&gt;
  &lt;/a&gt;
  Link pseudo-states
&lt;/h2&gt;

&lt;p&gt;One of the more common use-cases is to apply styling to link elements.&lt;/p&gt;

&lt;p&gt;The options we get here are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:link&lt;/code&gt;: Unvisited links&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:visited&lt;/code&gt;: Visited links&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:active&lt;/code&gt;: Currently interacting with it, like a click&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:hover&lt;/code&gt;: Mouse hover over it&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:target&lt;/code&gt;: When a user clicks an anchor target like &lt;code&gt;#section-1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:focus&lt;/code&gt;: Tabbed to this element, or input has the focus&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:focus-within&lt;/code&gt;: If a child element has the focus&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:focus-visible&lt;/code&gt;: Can be used to apply focus styles on keyboard events only&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#-raw-link-endraw-amp-raw-visited-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:link&lt;/code&gt; &amp;amp; &lt;code&gt;:visited&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;:link&lt;/code&gt; selector can be applied to indicate which pages have already been visited by the user.&lt;/p&gt;

&lt;p&gt;It's often used to make a link appear less bright, so the user knows he already visited that page.&lt;/p&gt;

&lt;p&gt;In the following example, I've made the default links blue, and once you visit them, they turn gray.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:visited&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;darkGray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Try visiting some links and come back to this page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/bGoQXoo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-active-endraw-amp-raw-hover-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:active&lt;/code&gt; &amp;amp; &lt;code&gt;:hover&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These two can be used to indicate user interactions with a link.&lt;br&gt;
Hover is when we hover our mouse over an element and are active when clicking on it.&lt;/p&gt;

&lt;p&gt;In your CSS, it's good to know that the active state should always come &lt;strong&gt;after&lt;/strong&gt; the hover state.&lt;br&gt;
Else the hover will take priority of it.&lt;/p&gt;

&lt;p&gt;In this example, we'll make the hover links have a purple background and white text, and once we click, they turn red.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try it out in this example.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/oNGQKpX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-target-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;target&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This one is super cool and often overlooked.&lt;br&gt;
It can be used to indicate which element is clicked on and navigated to.&lt;/p&gt;

&lt;p&gt;This works for one-pages that link to a specific section with something like the following setup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"section-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Hi I'm section one
  &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#section-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Go to section two&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"section-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;And I'm the second section&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you click this button, you will navigate to the second section.&lt;/p&gt;

&lt;p&gt;As for the magic part 🪄&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#section-2&lt;/span&gt;&lt;span class="nd"&gt;:target&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try to scroll to the second section manually first. It should just show a white section.&lt;br&gt;
If you scroll back up and click the button, it should move there and make it pink.&lt;/p&gt;

&lt;p&gt;Pretty cool stuff, right!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/dyVQxmG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-focus-endraw-raw-focuswithin-endraw-amp-raw-focusvisible-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:focus&lt;/code&gt;, &lt;code&gt;:focus-within&lt;/code&gt;, &amp;amp; &lt;code&gt;:focus-visible&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Let's try and spread these out a bit. The first one is &lt;code&gt;:focus&lt;/code&gt;. It can be used to indicate if an element received focus. Generally, this would work well for input fields, but you can use it for &lt;code&gt;buttons&lt;/code&gt;, which will be our vibe today.&lt;/p&gt;

&lt;p&gt;For the default focus state, we can use the following CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline-offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Try to click on the "Focus button" in the CodePen below. You can also tab to it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As for &lt;code&gt;:focus-within&lt;/code&gt;, this is an excellent pseudo-class to use, and I even dedicated a whole article to why &lt;a href="https://daily-dev-tips.com/posts/why-css-focus-within-is-amazing/"&gt;focus-within is amazing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's try out a small example with another button that could show a helper text on focus.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"focus-wrap"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Focus within&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"helper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can then add the following CSS to make this helper only show if the button has focus.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.helper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:focus-within&lt;/span&gt; &lt;span class="nc"&gt;.helper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: You can try this by focusing on the "Focus within" button below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The last one is &lt;code&gt;focus-visible&lt;/code&gt;, and it can be used to target only keyboard events.&lt;/p&gt;

&lt;p&gt;We want to show a state on click but appear different on the keyboard tab.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nc"&gt;.visible&lt;/span&gt;&lt;span class="nd"&gt;:focus-visible&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try and click on this button. You should see the dashed border, but it should show a solid border once you use the tab navigation.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/BawGXPm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Run CI Tests with GitHub Actions ⚙️</title>
      <author>Pierre-Henry Soria ✨</author>
      <pubDate>Sat, 22 Jan 2022 06:48:47 +0000</pubDate>
      <link>https://dev.to/pierre/create-ci-unit-tests-github-actions-52p3</link>
      <guid>https://dev.to/pierre/create-ci-unit-tests-github-actions-52p3</guid>
      <description>&lt;p&gt;Thanks to &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;, we can now setup workflows for our git repository very easily without any configuration from the GitHub platform. Indeed, we just need to create a specific .yml file in &lt;code&gt;.github/workflows&lt;/code&gt; folder of your repository.&lt;/p&gt;

&lt;p&gt;Having a CI running on every "git pull" (or scheduled with a cron setting in the GitHub Action) increases the quality for each pull request made against your project. You can run performance (PHPStan), code analysis tools (eslint/prettier),  formatting scripts (PHP CS/CodeSniffer), unit tests, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-your-1st-github-action"&gt;
  &lt;/a&gt;
  Create your 1st GitHub Action 🎉
&lt;/h2&gt;

&lt;p&gt;In this article, we will create a GitHub action that runs the unit tests of your application. However, you can literally create any kind of GitHub actions for the workflow of your repository 😃 &lt;/p&gt;

&lt;p&gt;First, go to your GitHub repository, and then create a &lt;code&gt;.github/workflows&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;workflows&lt;/code&gt; folder, create a file called &lt;code&gt;test.yml&lt;/code&gt; or &lt;code&gt;ci.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside of it, you will start with the name of the CI Action (as it will be shown in the GitHub Actions tab). &lt;/p&gt;

&lt;p&gt;In our cast, let's do &lt;code&gt;name: Tests&lt;/code&gt; 🙂&lt;/p&gt;

&lt;p&gt;Then, you can mention on what event you would like GitHub to listen thanks to &lt;code&gt;on:&lt;/code&gt;. I usually mention &lt;code&gt;on: [push,pull_request]&lt;/code&gt;. That way, it will run on every &lt;code&gt;git push&lt;/code&gt; and pull request.&lt;/p&gt;

&lt;p&gt;Then, we can start declaring the jobs of our GitHub Action, &lt;code&gt;jobs: run:&lt;/code&gt; where we mention each action we want to job to execute for us.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;runs-on&lt;/code&gt; is on what OS you would like your job to be executed on.  In my case, it will just be Linux and Windows, so I can mention &lt;code&gt;runs-on: [ 'ubuntu-latest', 'windows-latest' ]&lt;/code&gt;. &lt;code&gt;-latest&lt;/code&gt; suffix means it will use the latest OS available.&lt;/p&gt;

&lt;p&gt;So, so far, we have this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Tests&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;windows-latest'&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;php-versions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;7.3'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;7.4'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8.0'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8.1'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PHP ${{ matrix.php-versions }} Test on ${{ matrix.os }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can mention the steps for our GitHub Action's jobs. They are the steps of action to be executed each time our GitHub Workflow needs to be ran.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup PHP&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shivammathur/setup-php@v2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;php-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.php-versions }}&lt;/span&gt;
    &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mbstring&lt;/span&gt;
    &lt;span class="na"&gt;coverage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;
    &lt;span class="na"&gt;tools&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;phpunit:${{ matrix.phpunit-version }}, composer:v2&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check PHP Version&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php -v&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check Composer Version&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer -V&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Validate composer.json &amp;amp; composer.lock&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer validate --strict&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install PHP dependencies&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer install --no-interaction --no-progress --no-suggest&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run Test Suite&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php vendor/bin/phpunit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The few job steps such as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check PHP Version&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php -v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check Composer Version&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer -V&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;are just there to give you further information about the version running on your CI in case you need to investigate on an issue coming from your GitHub Action.&lt;/p&gt;




&lt;p&gt;And the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Validate composer.json &amp;amp; composer.lock&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer validate --strict&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is used to validate the &lt;code&gt;composer.json&lt;/code&gt; file before installing the dependencies.&lt;/p&gt;

&lt;p&gt;Finally, the last step will execute the unit tests&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run Test Suite&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php vendor/bin/phpunit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Once you are all done with the configuration of your CI file, GitHub will automatically run your new workflow action you just added. &lt;/p&gt;

&lt;p&gt;On new commit pushed or pull requests (depending on what event your configuration (&lt;code&gt;on: [push,pull_request]&lt;/code&gt;), GitHub will show the status of each CI run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eaxtEkLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38k4p3nvpv5aeu2l6x1t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eaxtEkLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38k4p3nvpv5aeu2l6x1t.png" alt="PR, GitHub Action" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0LobGal6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fohd68zm5evekf5dtcbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0LobGal6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fohd68zm5evekf5dtcbq.png" alt="Commit failing" width="772" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ql-yV1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxqkhq0odkf456xrx1ul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ql-yV1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxqkhq0odkf456xrx1ul.png" alt="Commit status based on your GitHub Action" width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#speed-amp-caching"&gt;
  &lt;/a&gt;
  Speed &amp;amp; Caching
&lt;/h2&gt;

&lt;p&gt;With CI, it's always a good practice to cache the needed dependencies. Some CI (Travis, Circle CI or others) aren't free and you will need to pay per usage. When you are caching them, they get faster and consume less resources. That way, they will also be cheaper to be executed. &lt;/p&gt;

&lt;p&gt;If you use Composer, you can add those two steps in your GitHub Action's jobs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get Composer Cache Directory&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer-cache&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "::set-output name=dir::$(composer config cache-files-dir)"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache Composer dependencies&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.composer-cache.outputs.dir }}&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}&lt;/span&gt;
  &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-composer-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: You can also use the commit hash &lt;code&gt;key: mycache-${{ github.sha }}&lt;/code&gt; as the cache key to update the cache when a new commit has been pushed. This is usually useful of your project is just a library and that your composer.lock doesn't get changed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-npm"&gt;
  &lt;/a&gt;
  With NPM
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache NPM deps&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;~/.npm&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}&lt;/span&gt;
    &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-npm-&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#if-you-use-pipenv-with-python"&gt;
  &lt;/a&gt;
  If you use Pipenv with Python,
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache Pipenv&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
      &lt;span class="s"&gt;~/.cache/pip&lt;/span&gt;
      &lt;span class="s"&gt;~/.cache/pipenv&lt;/span&gt;
      &lt;span class="s"&gt;~/.local/share/virtualenvs/&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pip-pipenv-${{ hashFiles('Pipfile.lock') }}&lt;/span&gt;
    &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pip-pipenv-&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.9&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pip install pipenv&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pipenv install --deploy --dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resource: &lt;a href="https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows"&gt;GitHub: Caching dependencies to speed up workflows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example 👉 &lt;a href="https://github.com/pH-7/pH2Gravatar/blob/master/.github/workflows/test.yml"&gt;https://github.com/pH-7/pH2Gravatar/blob/master/.github/workflows/test.yml&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beyond-testing-actions"&gt;
  &lt;/a&gt;
  Beyond testing actions 🚀
&lt;/h2&gt;

&lt;p&gt;Like I said previously, you have GitHub actions for many other purposes other than running tests.&lt;/p&gt;

&lt;p&gt;Indeed, developers often find themselves doing repetitive tasks that can be easily automated by CI. &lt;/p&gt;

&lt;p&gt;You can use GitHub actions for much more than just running tests such as &lt;a href="https://github.com/marketplace/actions/deploy-to-github-pages"&gt;deploying your changes to GitHub Pages&lt;/a&gt;, &lt;a href="https://github.com/marketplace/actions/npm-publish"&gt;re-publishing an NPM packages&lt;/a&gt; or even an action that &lt;a href="https://github.com/marketplace/actions/dev-to-posts-to-markdown"&gt;creates a PR with your DEV.to .md post file&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;And you? What's your most common usage of the GitHub Actions? 😄&lt;/p&gt;

</description>
      <category>github</category>
      <category>workflows</category>
      <category>ci</category>
      <category>testing</category>
    </item>
    <item>
      <title>Git Commands Every Dev MUST know</title>
      <author>Mursal Furqan</author>
      <pubDate>Sat, 22 Jan 2022 06:04:57 +0000</pubDate>
      <link>https://dev.to/mursalfk/git-commands-every-dev-must-know-53c3</link>
      <guid>https://dev.to/mursalfk/git-commands-every-dev-must-know-53c3</guid>
      <description>&lt;p&gt;Hello and Good Morning ☕&lt;br&gt;
I know I had not been writing lately, but now I am back on my writing spree 🎉&lt;br&gt;
Today we are going to see some awesome git commands, that every developer MUST know. Look carefully when I stress on the word MUST. Knowing these commands would definitely make your time easier. 😉&lt;br&gt;
So let's start.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initialize local git repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a particular file to a repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git add git_commands.md&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add all uncommitted files to the repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set Repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git config --global user.name 'mursalfk'&lt;br&gt;
git config --global user.email 'mursalfurqan@gmail.com'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add message to your commit
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git commit -m "You can add a message to your commit like this"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See commit history
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add remote Name/URL
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git remote add origin 'https://github.com/mursalfk/mursalfk.git'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Push your changes to remote repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone any repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git clone 'https://github.com/mursalfk/mursalfk.git'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the current working directory
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git pull origin master&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tired already? Come on... It's not that long 😉&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fH8p-4R7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nm22olicm0zakxf1xoso.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fH8p-4R7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nm22olicm0zakxf1xoso.png" alt="Image description" width="500" height="414"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Check difference in between commits
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git diff HEAD~1 HEAD&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download files from any repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git fetch origin master&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new branch
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git branch branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new branch inside a folder
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git branch branchFolder/branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch to another branch
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git checkout branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch to another branch present in another folder
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git checkout branchFolder/branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create and checkout to the new branch at the same time
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git checkout -b branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create and checkout to the new branch present in another folder at the same time
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git checkout branchFolder/branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Merge to a new branch
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git merge master&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

</description>
      <category>git</category>
      <category>devops</category>
      <category>opensource</category>
      <category>programming</category>
    </item>
    <item>
      <title>Self-Taught Developer Journal, Day 45: TOP Building Rock Paper Scissors UI cont.</title>
      <author>Jennifer Tieu</author>
      <pubDate>Sat, 22 Jan 2022 05:44:26 +0000</pubDate>
      <link>https://dev.to/jennifer_tieu/self-taught-developer-journal-day-45-top-building-rock-paper-scissors-ui-cont-48pj</link>
      <guid>https://dev.to/jennifer_tieu/self-taught-developer-journal-day-45-top-building-rock-paper-scissors-ui-cont-48pj</guid>
      <description>&lt;p&gt;Today...&lt;/p&gt;

&lt;p&gt;I am still working on the Rock Paper Scissors UI for The Odin Project.&lt;/p&gt;

&lt;p&gt;I designed a rough mock up of what I plan to create for the game. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YvGR0-TV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4zmyjzfgv42cxxegrh5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YvGR0-TV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4zmyjzfgv42cxxegrh5.png" alt="Mockup" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we already created the logic for the game in JavaScript, I don't have to worry about the script right now. So I am going to focus on creating the HTML elements first and use CSS to set them in the desired locations. Then I will add the DOM manipulation methods and events in my JavaScript code because I'll have something to select. &lt;/p&gt;

&lt;p&gt;After testing the game, I will go back and add the CSS to style. I am not sure yet on the exact design, but I will decide that after I get the game working on the webpage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations/"&gt;The Odin Project&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/revisiting-rock-paper-scissors"&gt;Revisiting Rock Paper Scissors&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Some laughs for the evening</title>
      <author>Nick Taylor</author>
      <pubDate>Sat, 22 Jan 2022 04:01:14 +0000</pubDate>
      <link>https://dev.to/nickytonline/some-laughs-for-the-evening-12jp</link>
      <guid>https://dev.to/nickytonline/some-laughs-for-the-evening-12jp</guid>
      <description>&lt;p&gt;I'm laughing at my own joke tonight, so to lighten the mood, what's some funny things you've come across recently?&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tvmXOnOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FJrVmt2WUAASNO-.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P11PQVAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1152392593042485249/M7M0YZ4j_normal.jpg" alt="Nick Taylor (he/him) | nicktaylor.eth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nick Taylor (he/him) | nicktaylor.eth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Vanilla Ice is the best open source maintainer because he always collaborates and listens. New release? Brand new edition. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:45 AM - 22 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1484733894058512389" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1484733894058512389" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1484733894058512389" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Also, if you don't know who Vanilla Ice is, &lt;a href="https://en.wikipedia.org/wiki/Vanilla_Ice"&gt;Wikipedia has you covered&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Remember to keep it clean. 😎&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Create A React Router App in 5 Minutes</title>
      <author>ayubf</author>
      <pubDate>Sat, 22 Jan 2022 01:28:23 +0000</pubDate>
      <link>https://dev.to/ayubf/create-a-react-router-app-in-5-minutes-3ccp</link>
      <guid>https://dev.to/ayubf/create-a-react-router-app-in-5-minutes-3ccp</guid>
      <description>&lt;p&gt;    Have you ever created a React app and wondered what it would take to add routes? Have, let's say, a seperate &lt;br&gt;
page for your posts and pictures? Routes are a basic concept in web development and are necessary for any web development framework, frontend or backend. This is especially essential for RESTful APIs that take advantage of the ability for routes to output different pages, carry out different functions like logging in, logging out, etc. In this article I'll show you how to set up routes in React with a library called React Router.&lt;/p&gt;



&lt;p&gt;Before you can start you should make sure you have the proper packages and tools installed. &lt;br&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#node-amp-npm"&gt;
  &lt;/a&gt;
  Node &amp;amp; NPM
&lt;/h3&gt;

&lt;p&gt;    Node is the environment that runs JavaScript frameworks and libraries like React and is essential for projects like these. NPM is the package manager for Node, and that basically means NPM installs the required files to use React and other libraries. We will use it later in this article to install libraries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.dev/"&gt;Install Node.js&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#text-editor"&gt;
  &lt;/a&gt;
  Text Editor
&lt;/h3&gt;

&lt;p&gt;    To put it simply, a text editor is just the application on your computer that will edit the text files to create the React app. My personal choice is one called VSCode, but there are other good options like Sublime Text, Notepad++, &amp;amp; Atom, but even your default text editor can get the job done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;Install VSCode&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-1-creating-react-app"&gt;
  &lt;/a&gt;
  Step 1: Creating React App
&lt;/h3&gt;

&lt;p&gt;    To initiate the React app we'll use a tool that's gonna make the process much simpler. Run the command below to create the React app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app reactrouterapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;npx&lt;/code&gt; is a package bundled with &lt;code&gt;npm&lt;/code&gt; and is used to execute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;reactrouterapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; will move us into the directory for the React app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i react-router react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command installs the required packages for this app. &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#step-2-adding-routes"&gt;
  &lt;/a&gt;
  Step 2: Adding Routes
&lt;/h3&gt;

&lt;p&gt;    In this step we will create the app's routes and route outputs. First open the &lt;code&gt;/src&lt;/code&gt; folder inside the &lt;code&gt;reactrouterapp&lt;/code&gt; directory.&lt;br&gt;
Create a new file named &lt;code&gt;Page.js&lt;/code&gt; and type the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;    The function &lt;code&gt;Page()&lt;/code&gt; returns a JSX object in its' &lt;code&gt;return&lt;/code&gt; statement. The &lt;code&gt;export default&lt;/code&gt; statement at the bottom lets us use this in other files, very convenient.&lt;/p&gt;

&lt;p&gt;Next, change the contents of &lt;code&gt;App.js&lt;/code&gt; to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/page&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Routes&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;    The first line imports from the React Router library, and it imports three components for our routing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;    The second line imports from our &lt;code&gt;Page.js&lt;/code&gt; file from earlier, and it imports the &lt;code&gt;&amp;lt;Page /&amp;gt;&lt;/code&gt; component we created earlier.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;App()&lt;/code&gt; returns this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/page&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Routes&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;    Routes holds the routes and with the &lt;code&gt;path=&lt;/code&gt; parameter can have a prefix. &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; defines the specific routes, their paths, and the elements rendered (in this example that's our &lt;code&gt;&amp;lt;Page /&amp;gt;&lt;/code&gt; component).&lt;/p&gt;

&lt;p&gt;The app will return the &lt;code&gt;&amp;lt;Page /&amp;gt;&lt;/code&gt; element when the &lt;code&gt;/page&lt;/code&gt; route is visited.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#step-3-running"&gt;
  &lt;/a&gt;
  Step 3: Running
&lt;/h3&gt;

&lt;p&gt;To run the app run the follow command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The out put should be something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    Compiled successfully!

    You can now view reactrouterapp &lt;span class="k"&gt;in &lt;/span&gt;the browser.

      Local:            http://localhost:3000
      On Your Network:  http://10.0.0.87:3000

    Note that the development build is not optimized.
    To create a production build, use npm run build.

    assets by status 6.93 KiB &lt;span class="o"&gt;[&lt;/span&gt;cached] 1 asset
    assets by chunk 1.6 MiB &lt;span class="o"&gt;(&lt;/span&gt;name: main&lt;span class="o"&gt;)&lt;/span&gt;
      asset static/js/bundle.js 1.53 MiB &lt;span class="o"&gt;[&lt;/span&gt;emitted] &lt;span class="o"&gt;(&lt;/span&gt;name: main&lt;span class="o"&gt;)&lt;/span&gt; 1 related asset
      asset main.cdf5e8aba95c1b3dac48.hot-update.js 71.4 KiB &lt;span class="o"&gt;[&lt;/span&gt;emitted] &lt;span class="o"&gt;[&lt;/span&gt;immutable] &lt;span class="o"&gt;[&lt;/span&gt;hmr] &lt;span class="o"&gt;(&lt;/span&gt;name: main&lt;span class="o"&gt;)&lt;/span&gt; 1 related asset
    assets by path &lt;span class="k"&gt;*&lt;/span&gt;.json 611 bytes
      asset asset-manifest.json 583 bytes &lt;span class="o"&gt;[&lt;/span&gt;emitted]
      asset main.cdf5e8aba95c1b3dac48.hot-update.json 28 bytes &lt;span class="o"&gt;[&lt;/span&gt;emitted] &lt;span class="o"&gt;[&lt;/span&gt;immutable] &lt;span class="o"&gt;[&lt;/span&gt;hmr]
    asset index.html 1.67 KiB &lt;span class="o"&gt;[&lt;/span&gt;emitted]
    Entrypoint main 1.6 MiB &lt;span class="o"&gt;(&lt;/span&gt;1.62 MiB&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; static/js/bundle.js 1.53 MiB main.cdf5e8aba95c1b3dac48.hot-update.js 71.4 KiB 2 auxiliary assets
    cached modules 1.41 MiB &lt;span class="o"&gt;[&lt;/span&gt;cached] 107 modules
    runtime modules 31.3 KiB 15 modules
    javascript modules 3.95 KiB
      ./src/index.js 1.81 KiB &lt;span class="o"&gt;[&lt;/span&gt;code generated]
      ./src/App.js 2.14 KiB &lt;span class="o"&gt;[&lt;/span&gt;built] &lt;span class="o"&gt;[&lt;/span&gt;code generated]
    webpack 5.67.0 compiled successfully &lt;span class="k"&gt;in &lt;/span&gt;75 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;    Visit the link in the output, either one of them, and then visit the &lt;code&gt;/page&lt;/code&gt; route and you should see something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m1veq9DN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceqc6i3r2f5v0n3g25qk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m1veq9DN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceqc6i3r2f5v0n3g25qk.png" alt="Successfully run React app with React Router" width="483" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    Congrats! You quickly created a React app with routes using React Router. Understanding &amp;amp; using routes and routing is a crucial skill for a wev developer, this will come up often in projects or on the job.&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://reactrouter.com/docs/en/v6"&gt;React Router v6&lt;/a&gt; &lt;br&gt;
&lt;a href="https://create-react-app.dev"&gt;Create-React-App&lt;/a&gt;&lt;br&gt;
&lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nodejs.org/en"&gt;Node.js&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.npmjs.com"&gt;Npm&lt;/a&gt;&lt;br&gt;
&lt;a href="https://code.visualstudio.com"&gt;VSCode&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/npx"&gt;Npx&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>So you want to know about Web Workers?</title>
      <author>Wardell Bagby</author>
      <pubDate>Fri, 21 Jan 2022 23:55:31 +0000</pubDate>
      <link>https://dev.to/wardellbagby/so-you-want-to-know-about-web-workers-4aoe</link>
      <guid>https://dev.to/wardellbagby/so-you-want-to-know-about-web-workers-4aoe</guid>
      <description>&lt;p&gt;Hey! Wardell here! So you've got yourself a website and you're interested in potentially off-loading some of your heavy-hitting computations to another thread?&lt;/p&gt;

&lt;p&gt;Sounds like you want a Web Worker!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hold-up-what-even-is-a-web-worker"&gt;
  &lt;/a&gt;
  Hold up, what even &lt;em&gt;is&lt;/em&gt; a Web Worker?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"&gt;Web Workers&lt;/a&gt; are a simple means for web content to run scripts in background threads.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before I tell you &lt;em&gt;how&lt;/em&gt; to use a Web Worker, let's first go over things to consider before deciding to use a Web Worker.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You've &lt;a href="https://developer.chrome.com/docs/devtools/evaluate-performance/"&gt;profiled&lt;/a&gt; your website and discovered what you're considering putting in a Web Worker is actually slow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't bother with a Web Worker if you don't actually need it. Adding an extra thread to communicate with will complicate your code, and if you aren't getting noticeable performance gains from it, it's an unnecessary complication.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The work you want to offload &lt;em&gt;can&lt;/em&gt; be done asynchronously.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is difficult to define, but &lt;a href="https://www.youtube.com/watch?v=L7-0ugujS2U"&gt;if you know, you know&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You don't need &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt;, or anything else DOM related.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Workers don't have direct access to the DOM of your site. There are ways around this but it's generally just a good idea &lt;em&gt;not&lt;/em&gt; to do it in the first place.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#whats-something-youve-used-a-web-worker-for"&gt;
  &lt;/a&gt;
  What's something you've used a Web Worker for?
&lt;/h2&gt;

&lt;p&gt;See, I just love your questions!&lt;/p&gt;

&lt;p&gt;My app &lt;a href="https://lyricistant.app"&gt;Lyricistant&lt;/a&gt; currently has two web workers, but we're going to talk about the easier to understand one: &lt;a href="https://github.com/wardellbagby/lyricistant/blob/7e047c48a112076545551ee720bef01c2cef1f5c/packages/rhyme-generator/main/rhyme-generator.ts"&gt;a Web Worker that generates rhymes on demand, totally offline&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I won't get into the nitty-gritty of how it all works, 'cause I mostly wrote it in a tired stupor at 2am one night, but it needs to load a 6 MiB JSON file, iterate through 135,165 words, and compare the syllables of those 135k words to the syllables of an inputted word.&lt;/p&gt;

&lt;p&gt;That is to say, if you type "Time" into Lyricistant (make sure to enable the Offline Rhymes in Preferences first!), my web worker will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the pronunciation of "time" (T AY1 M)&lt;/li&gt;
&lt;li&gt;Iterate over &lt;em&gt;every single one&lt;/em&gt; of the 135k words it has pronunciations for.&lt;/li&gt;
&lt;li&gt;Compare the syllables of "time" to the syllables of the word its currently looking at.&lt;/li&gt;
&lt;li&gt;Calculate a score based off the comparison in step 3.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's also worth noting that this all happens on almost &lt;em&gt;every&lt;/em&gt; keypress (its debouncing, of course; I'm not a monster), so not only are we finding rhymes for "time", but also "tim" and "ti" if you type slow enough.&lt;/p&gt;

&lt;p&gt;This is a &lt;strong&gt;very&lt;/strong&gt; naive way of generating rhymes, and also extremely slow. My excuse is I'm not a linguist! I'm barely a programmer! 😂&lt;/p&gt;

&lt;p&gt;Anyway, you can imagine how slow all of that code can be, so a Web Worker was the perfect choice to use! Although, fun fact: my initial implementation had this all run in the browser's main thread, and 60% of the time, it would finish in under 60 milliseconds, meaning Lyricistant could &lt;em&gt;mostly&lt;/em&gt; hit 60fps on my 2015 MacBook Pro using Chrome. Browsers are pretty fast!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#alright-enough-talking-i-wanna-make-my-own-web-worker"&gt;
  &lt;/a&gt;
  Alright, enough talking. I wanna make my own Web Worker!
&lt;/h2&gt;

&lt;p&gt;Fair enough; this blog post was starting to look like one of those &lt;a href="https://www.reddit.com/r/mildlyinfuriating/comments/bcuvs3/literally_every_online_recipe_now_days/"&gt;online recipe intros&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-your-web-worker"&gt;
  &lt;/a&gt;
  Creating your Web Worker
&lt;/h3&gt;

&lt;p&gt;There are quite a few ways to make a Web Worker, but probably the easiest for most people will be using &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; for bundling and &lt;a href="https://github.com/GoogleChromeLabs/comlink"&gt;Comlink&lt;/a&gt; for communication.&lt;/p&gt;

&lt;p&gt;Assuming you're already using Webpack, making your Web Worker is super easy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./path/to/my/file.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-worker-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The bit you give to &lt;code&gt;URL&lt;/code&gt; should match exactly what it'd look like in an &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statement. This works with any path mappings or resolve aliases you might have set up as well.&lt;/p&gt;

&lt;p&gt;I.e, if you'd normally import the file like &lt;code&gt;import '@my-app/my-file.ts'&lt;/code&gt;, then you'd do &lt;code&gt;new URL('@my-app/my-file.ts')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you're &lt;em&gt;not&lt;/em&gt; using Webpack, you should probably consult your own module bundler's docs. If you're not using any bundler, omit the &lt;code&gt;new URL&lt;/code&gt; and instead do &lt;code&gt;new Worker("./path/to/your/output/file.js");&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communicating-with-your-web-worker"&gt;
  &lt;/a&gt;
  Communicating with your Web Worker
&lt;/h3&gt;

&lt;p&gt;This is where Comlink comes into play!&lt;/p&gt;

&lt;p&gt;Web Workers, at their core, communicate via posting messages back and forth. Your main thread code communicates with your Worker with &lt;code&gt;worker.postMessage&lt;/code&gt;, your Worker listens to those messages with &lt;code&gt;self.onmessage&lt;/code&gt;, your Worker responds with &lt;code&gt;self.postMessage&lt;/code&gt;, and your main thread listens to those responses with &lt;code&gt;window.onmessage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That's not very easy to follow, is it?&lt;/p&gt;

&lt;p&gt;Comlink removes all that hassle and instead gives you a much nicer &lt;code&gt;Promise&lt;/code&gt;-based API.&lt;/p&gt;

&lt;p&gt;Let's imagine you've got a Web Worker that simply multiples two numbers. With Comlink, you can set that up like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Worker code math-worker.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multiplicand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;multiplicand&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;multiplier&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Every function we "expose" this way will be available in the main thread. Functions that aren't exposed won't be available.&lt;/span&gt;
&lt;span class="nx"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Main thread code&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mathWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./math-worker.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;math-worker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mathWorker&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Wrapping mathWorker gives us access to the exposed functions, but now they return Promises!&lt;/span&gt;
&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#know-anything-i-should-be-on-the-lookout-for-or-just-general-advice"&gt;
  &lt;/a&gt;
  Know anything I should be on the lookout for? Or just general advice?
&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, your Worker doesn't have access to the DOM or &lt;code&gt;window&lt;/code&gt;. That makes sense; you don't actually have a DOM in a Web Worker because you don't have any UI. Outside of that, you can do almost anything you want, including spawning &lt;em&gt;more&lt;/em&gt; Workers!&lt;/p&gt;

&lt;p&gt;You also can't use &lt;code&gt;this&lt;/code&gt; at the root level of your Worker code; use &lt;code&gt;self&lt;/code&gt; instead. &lt;code&gt;this&lt;/code&gt; still works fine in functions and classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verify that your code is actually running in a Web Worker!&lt;/strong&gt; This bit me a few times, where I had messed up the setup and had inadvertently ran my worker in the main thread. Super easy to do if you import the file your Worker is supposed to run directly as an &lt;code&gt;import&lt;/code&gt;. The easiest way to verify your Web Worker is running is by opening up Dev Tools and going to the "Sources" tab. You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtFBw7C3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm9ey63obj2wzbatc219.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtFBw7C3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm9ey63obj2wzbatc219.png" alt="Image of Chrome Dev Tools" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In that image, "top" refers to the main thread, and "platform" and "rhyme-generator" are Web Workers.&lt;/p&gt;

&lt;p&gt;If you only see "top", your Web Worker isn't running. This is either because you haven't started it yet (which you do by sending some data to it) or because you've misconfigured it.&lt;/p&gt;

&lt;p&gt;Also, remember that concurrency is difficult! Try and keep your Workers as simple and stateless as possible. This'll make your life much easier overall.&lt;/p&gt;

&lt;p&gt;One last tip: much like regular threads, there's diminishing returns to having too many Web Workers. A tip that I've heard is the maximum number of Web Workers you should spawn is &lt;code&gt;window.navigator.hardwareConcurrency - 1&lt;/code&gt;. We subtract one to save a core for the main thread. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#alright-i-think-ive-got-it-now-thanks"&gt;
  &lt;/a&gt;
  Alright, I think I've got it now! Thanks!
&lt;/h2&gt;

&lt;p&gt;Of course, no problem! Have fun and don't work your workers too hard!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
