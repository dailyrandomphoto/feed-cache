<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>API Testing - Database State Validation in vREST NG</title>
      <author>Dheeraj Aggarwal</author>
      <pubDate>Mon, 04 Oct 2021 05:50:27 +0000</pubDate>
      <link>https://dev.to/dheerajaggarwal/api-testing-database-state-validation-in-vrest-ng-gj5</link>
      <guid>https://dev.to/dheerajaggarwal/api-testing-database-state-validation-in-vrest-ng-gj5</guid>
      <description>&lt;p&gt;Watch our video #tutorial on how you may validate the database state during the execution of API Test cases in the #vREST NG Application.&lt;/p&gt;

&lt;p&gt;Video Link: &lt;a href="https://youtu.be/dVdc8e0keiE"&gt;https://youtu.be/dVdc8e0keiE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Playlist: &lt;a href="https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0"&gt;https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;vREST NG is an enterprise-ready application for Automated API Testing. You can download and install the vREST NG application directly on Windows, OSX, and Linux via our website.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://vrest.io/?utm_source=devto&amp;amp;utm_medium=devto-desc&amp;amp;utm_campaign=video"&gt;vREST NG Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//support@vrest.io"&gt;Contact Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/NtRa7kw"&gt;Community Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meetings.hubspot.com/dheeraj-aggarwal"&gt;Book a Live Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please do like and share if you found this video helpful and let the voice heard by the testing community. Also, let us know your feedback by commenting on this post.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>vrestng</category>
      <category>apitesting</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Swallow programming language - A Python-like language that's as fast as C.</title>
      <author>Ethan Olchik</author>
      <pubDate>Mon, 04 Oct 2021 05:45:39 +0000</pubDate>
      <link>https://dev.to/ethanolchik/the-swallow-programming-language-a-python-like-language-that-s-as-fast-as-c-43j7</link>
      <guid>https://dev.to/ethanolchik/the-swallow-programming-language-a-python-like-language-that-s-as-fast-as-c-43j7</guid>
      <description>&lt;p&gt;Hey guys!&lt;/p&gt;

&lt;p&gt;I'm Ethan, I'm one of 8 swallow developers. This post is gonna be about some updates we've added into swallow lately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;If you know Python, you know how easy it is. However, it also comes with a big downgrade. Python is slow, and I'm pretty sure every python developer knows this by now. This is kind of annoying. That's where Swallow comes in. Me and 8 other friends have been working on Swallow for the past few months. Swallows syntax is very similar to Python's, and it gets trans-compiled to C, thus making it as fast as C. Below I've written 2 programs, one in Swallow and one in Python.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#swallow"&gt;
  &lt;/a&gt;
  Swallow
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# Swallow has type inference!
&lt;/span&gt;    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;function return types can be omitted.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two programs are almost the same, which makes it so easy for Python users to switch to. Now, you might be asking: "How much faster is Swallow?" Well, to answer your question, here are the results:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#swallow"&gt;
  &lt;/a&gt;
  Swallow:
&lt;/h4&gt;

&lt;p&gt;Executed in: 1.06 secs&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python:
&lt;/h4&gt;

&lt;p&gt;Executed in: 32.30 secs&lt;/p&gt;

&lt;p&gt;As you can see, Swallow is significantly faster than Python. It is around 30x faster than python when running this program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's new?
&lt;/h2&gt;

&lt;p&gt;Here are some of Swallow's newest features:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-inference"&gt;
  &lt;/a&gt;
  Type Inference
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Type_inference"&gt;Type Inference&lt;/a&gt; is one of Swallow's newest features. This allows Swallow code to be written with simplicity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ifelsematch"&gt;
  &lt;/a&gt;
  if/else/match
&lt;/h3&gt;

&lt;p&gt;Although this may seem like a standard feature in any programming language, it does take time to add these features which is why I'm acknowledging it. Not much to say about it since it's in every programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#newish-features"&gt;
  &lt;/a&gt;
  New-ish Features
&lt;/h2&gt;

&lt;p&gt;Let's talk more about the features that are currently available in Swallow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ccode"&gt;
  &lt;/a&gt;
  Ccode
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ccode&lt;/code&gt; allows C code to be ran in Swallow. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;Ccode&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;Ccode&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{x}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# prints 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, any variables declared outside the &lt;code&gt;Ccode&lt;/code&gt; block can be used within &lt;code&gt;Ccode&lt;/code&gt; and vice versa. This also means you can import any C library through &lt;code&gt;Ccode&lt;/code&gt; and use it in Swallow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inline-assembly"&gt;
  &lt;/a&gt;
  Inline Assembly
&lt;/h3&gt;

&lt;p&gt;You can also have inline assembly in Swallow. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"It should add 45 and 50 using asm and print it&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"addl %%ebx, %%eax;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"=a"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%lld"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This prints &lt;code&gt;90&lt;/code&gt;, as expected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more"&gt;
  &lt;/a&gt;
  More
&lt;/h3&gt;

&lt;p&gt;You can find some more examples in the &lt;a href="https://github.com/Swallow-lang/swallow/tree/main/swallow/tests"&gt;Swallow test folder&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planned-features"&gt;
  &lt;/a&gt;
  Planned Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Structs&lt;/li&gt;
&lt;li&gt;More decorators for different purposes&lt;/li&gt;
&lt;li&gt;Python ecosystem in Swallow

&lt;ul&gt;
&lt;li&gt;You will be able to use any python module in Swallow&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Swallow is planned to release version 0.0.1 sometime in March, so make so to show some support by starring the &lt;a href="https://github.com/swallow-lang/swallow"&gt;repo&lt;/a&gt; and make sure to press on the "Watch" button so you don't miss any updates.&lt;/p&gt;

&lt;p&gt;We would greatly appreciate any contributions, so if you find something that you can improve, open a pull-request! You can also check out our &lt;a href="https://github.com/swallow-lang/swallow/issues"&gt;open issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks so much for reading!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>python</category>
      <category>programming</category>
      <category>c</category>
    </item>
    <item>
      <title>Best practices for AWS Athena</title>
      <author>Christopher Thompson H.</author>
      <pubDate>Mon, 04 Oct 2021 05:44:01 +0000</pubDate>
      <link>https://dev.to/aws-builders/best-practices-for-aws-athena-12gb</link>
      <guid>https://dev.to/aws-builders/best-practices-for-aws-athena-12gb</guid>
      <description>&lt;p&gt;In this blog I will mention some of the best practices recommended by AWS for building queries in Athena based on my experience and the following resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://aws.amazon.com/blogs/big-data/top-10-performance-tuning-tips-for-amazon-athena/"&gt;https://aws.amazon.com/blogs/big-data/top-10-performance-tuning-tips-for-amazon-athena/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Joins"&gt;https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Joins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#general-recommendations"&gt;
  &lt;/a&gt;
  General Recommendations
&lt;/h1&gt;




&lt;h2&gt;
  &lt;a href="#always-use-where-on-partition-field"&gt;
  &lt;/a&gt;
  Always use WHERE on partition field
&lt;/h2&gt;

&lt;p&gt;This mainly in order to speed up time and cost.&lt;br&gt;
For example:&lt;br&gt;
Avoid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'201912'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and prefer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;col_particion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'201911'&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;speedup&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;savings&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#avoid-using-order-by-without-limit"&gt;
  &lt;/a&gt;
  Avoid using ORDER BY without LIMIT
&lt;/h2&gt;

&lt;p&gt;It is extremely important to understand that the ORDER BY function must be done in a single node, since it is a slow and time-consuming function. Ideally it should be avoided, however, if within the use case you are implementing you must use it, I always recommend placing a LIMIT.&lt;br&gt;
For example:&lt;br&gt;
Avoid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and prefer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;speedup&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;avoid&lt;/span&gt; &lt;span class="s1"&gt;'Query exhausted resources at this scale factor'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#select-only-the-columns-to-retrieve-the-final-result"&gt;
  &lt;/a&gt;
  Select only the columns to retrieve the final result
&lt;/h2&gt;

&lt;p&gt;This recommendation is very simple. In practical effect it is to avoid the SELECT * FROM.&lt;br&gt;
For example:&lt;br&gt;
Avoid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;tmp_table&lt;/span&gt;
&lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_2&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_3&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table_1&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;tmp_table&lt;/span&gt;
&lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_2&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_3&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;col_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;col_2&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table_1&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;col_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;col_3&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#schedule-data-aggregation-for-small-files"&gt;
  &lt;/a&gt;
  Schedule data aggregation for small files
&lt;/h2&gt;

&lt;p&gt;The numbers speak for themselves:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Query&lt;/th&gt;
&lt;th&gt;Number of files&lt;/th&gt;
&lt;th&gt;Run time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SELECT COUNT(*) FROM lineitem&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;8.4 seg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SELECT COUNT(*) FROM lineitem&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2.31 seg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Speedup&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;72% faster&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#prefer-the-use-of-regular-expressions-over-like"&gt;
  &lt;/a&gt;
  Prefer the use of regular expressions over 'LIKE'
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Query&lt;/th&gt;
&lt;th&gt;Run time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SELECT COUNT(*) FROM lineitem WHERE text_column LIKE '%wake%' OR text_column LIKE '%some%' OR text_column LIKE '%express%' OR text_column LIKE '%hello%'&lt;/td&gt;
&lt;td&gt;20.56 seg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SELECT COUNT(*) FROM lineitem WHERE regexp_like(text_column,'...')&lt;/td&gt;
&lt;td&gt;15.87 seg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Speedup&lt;/td&gt;
&lt;td&gt;17% faster&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Note: The expression would be&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;regexp_like(text_column, 'wake|some|express|hello')&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#when-using-group-by-for-multiple-fields-order-them-from-highest-to-lowest-cardinality"&gt;
  &lt;/a&gt;
  When using group by for multiple fields. order them from highest to lowest cardinality
&lt;/h2&gt;

&lt;p&gt;This will avoid memory errors and reduce the time to deliver results.&lt;br&gt;
For instance:&lt;br&gt;
Avoid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;column_genre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;department&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;department&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;column_genre&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;In case of using Crawlers to automatically obtain the structure of the data stored in S3, respect the data types supported for the source engine. Likewise, do not forget to run the crawler after a data update that may generate changes in the structure, this in order to update the structure in the glue catalog.&lt;/p&gt;

&lt;p&gt;Use &lt;em&gt;MSCK REPAIR&lt;/em&gt; TABLE only if the folders are created with the structure 'field1 =  / field2 =  /.../ fieldN = ' and only after creating the table, since it is' msck repair table 'is expensive operation and it is preferable to use' alter table add partition 'or glue api to add partitions.&lt;/p&gt;

&lt;p&gt;and do you have any good practice that you recommend? Comment it in the comment box.&lt;/p&gt;

&lt;p&gt;I hope this blog is useful for you. Greetings!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>3 JS code snippets sites to use daily!</title>
      <author>Rupak Dey</author>
      <pubDate>Mon, 04 Oct 2021 05:25:50 +0000</pubDate>
      <link>https://dev.to/deyrupak/3-js-code-snippets-sites-to-use-daily-5642</link>
      <guid>https://dev.to/deyrupak/3-js-code-snippets-sites-to-use-daily-5642</guid>
      <description>&lt;p&gt;&lt;em&gt;Save for later.&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1locdev"&gt;
  &lt;/a&gt;
  &lt;a href="https://1loc.dev/"&gt;1loc.dev&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;JS utilities in single line of code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gdzikopj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95r8jrbfr6h056eu5cwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gdzikopj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95r8jrbfr6h056eu5cwg.png" alt="1loc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#htmldomdev"&gt;
  &lt;/a&gt;
  &lt;br&gt;&lt;a href="https://htmldom.dev/"&gt;htmldom.dev&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Managing DOM with JS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GV1hWRll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g93ggu74vuftvavxnus9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GV1hWRll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g93ggu74vuftvavxnus9.png" alt="htmlDOM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#30secondsofcodeorg"&gt;
  &lt;/a&gt;
  &lt;br&gt;&lt;a href="https://www.30secondsofcode.org/"&gt;30secondsofcode.org&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Snippets for all development needs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B_XAdFpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ult6v1sod6666hxuap2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B_XAdFpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ult6v1sod6666hxuap2l.png" alt="30secCode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;P.S. Want the next post to be something specific? Do let me know in the comments.&lt;/p&gt;

&lt;p&gt;🤘🏻&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Connect with me : &lt;a href="https://github.com/deyRupak"&gt;Github&lt;/a&gt;&lt;br&gt;
Support me : &lt;a href="https://paypal.me/deyrdx?locale.x=en_GB"&gt;Buy me a coffee!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Rock, Paper, Scissors game in Python</title>
      <author>JRRyan606</author>
      <pubDate>Mon, 04 Oct 2021 05:18:21 +0000</pubDate>
      <link>https://dev.to/ryan_jr/rock-paper-scissors-game-in-python-3n2</link>
      <guid>https://dev.to/ryan_jr/rock-paper-scissors-game-in-python-3n2</guid>
      <description>&lt;p&gt;Hey there,  this is a simple GUI-Based Rock Paper Scissors game in python.&lt;/p&gt;

&lt;p&gt;Link to the github repo: &lt;a href="https://github.com/JRRyan606/Rock-Paper-Scissors-Tk-Gui"&gt;https://github.com/JRRyan606/Rock-Paper-Scissors-Tk-Gui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IMPORTANT, PLEASE READ THIS:&lt;/p&gt;

&lt;p&gt;The credit for this project MUST go to Bro code, He made a video in his Youtube channel called Python rock, paper, scissors game where he created a CLI-Based rock, paper, scissors game in python. I have created the GUI version of it. There are some features that Bro code created in his rock, paper, scissors game that is NOT YET coded in my gui version of the game. I will be coding it soon...&lt;/p&gt;

&lt;p&gt;Link to Bro code's Youtube channel: &lt;a href="https://www.youtube.com/channel/UC4SVo0Ue36XCfOyb5Lh1viQ"&gt;https://www.youtube.com/channel/UC4SVo0Ue36XCfOyb5Lh1viQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to the Python rock, paper, scissors game Youtube video: &lt;a href="https://youtu.be/GhPZHvhvlsk"&gt;https://youtu.be/GhPZHvhvlsk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to address any bugs on this project or some improvements that can be made on this project, feel free to email me about it at: &lt;a href="mailto:ryanjustin25706@gmail.com"&gt;ryanjustin25706@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my first Tkinter project using Python, any improvements or suggestions is highly appreciated!!. Thanks.&lt;/p&gt;

&lt;p&gt;For those of you who have some problems seeing the code from the above github link, here's is the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from tkinter import *
import random

win = Tk()
win.title("Rock, Paper, Scissors")
win.geometry("801x300")


options = ["rock", "paper", "scissors"]
computer = random.choice(options)




def show():
    info = "Computer choose: " + computer
    info2 = "You choose: " + str(e.get()).lower()
    if str(e.get()).lower() == computer:
        text3 = Label(win, text="ITS A TIE!!", font=('Arial', 18))
        text3.pack()

    elif str(e.get()).lower() == "rock":
        if computer == "paper":
            text4 = Label(win, text="The computer wins!, you lose", font=('Arial', 18))
            text4.pack()

        if computer == "scissors":
            text5 = Label(win, text="You win!, the computer lose", font=('Arial', 18))
            text5.pack()

    elif str(e.get()).lower() == "scissors":
        if computer == "rock":
            text6 = Label(win, text="The computer wins!, you lose", font=('Arial', 18))
            text6.pack()

        if computer == "paper":
            text7 = Label(win, text="You win!, the computer lose", font=('Arial', 18))
            text7.pack()

    elif str(e.get()).lower() == "paper":
        if computer == "scissors":
            text8 = Label(win, text="The computer wins!, you lose", font=('Arial', 18))
            text8.pack()

        if computer == "rock":
            text9 = Label(win, text="You win!, the computer lose", font=('Arial', 18))
            text9.pack()

    elif str(e.get()).lower() is not options:
        text10 = Label(win, text="There is no such thing as " + str(e.get()).lower() + " in this game. " + "Please enter the correct word", fg="red", font=('Arial', 18))
        text10.pack()

    text1 = Label(win, text=info, font=('Arial', 18))
    text1.pack()
    text2 = Label(win, text=info2, font=('Arial', 18))
    text2.pack()





lab = Label(win, text="Rock, Paper or Scissors?", font=('Arial', 18))
lab.pack()


e = Entry(win, borderwidth=10, bg="powderblue")
e.pack()


b = Button(win, text="Submit", font=('Arial', 18), bg="lightgreen", command=show)
b.pack()
win.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>github</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Uniswap Clone Script- Fastest Solution to Start Your Own DeFi Exchange</title>
      <author>stanislas</author>
      <pubDate>Mon, 04 Oct 2021 05:01:10 +0000</pubDate>
      <link>https://dev.to/stanislasblo/uniswap-clone-script-fastest-solution-to-start-your-own-defi-exchange-51f3</link>
      <guid>https://dev.to/stanislasblo/uniswap-clone-script-fastest-solution-to-start-your-own-defi-exchange-51f3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-uniswap"&gt;
  &lt;/a&gt;
  What is Uniswap?
&lt;/h2&gt;

&lt;p&gt;Uniswap is a decentralized business protocol that’s used to exchange cryptocurrencies. It is also the name of the company based on the Uniswap protocol.&lt;br&gt;
Uniswap was created by Hayden Adams. Its initial version was published to the Ethereum main net on November 2, 2018. Uniswap makes multiple crypto assets, including its native UNI cryptocurrency, to afford a service similar to an old-style exchange. The difference is, Uniswap has no one central operator or manager, making it fully decentralized.&lt;br&gt;
Uniswap unlike most exchanges, which are designed to take fees, is planned to function as a public good — a tool for the community to trade tokens without middlemen. Also, different most exchanges, which match buyers and sellers to determine prices and execute trades, Uniswap uses a simple math equation, pools of tokens and Ethereum to do the same job. That’s why the companies are interested to get &lt;strong&gt;&lt;a href="https://radindev.com/uniswap-clone-script/"&gt;Uniswap clone script&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yuO_j9Xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7x6x99muqtdx8zeqetpd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuO_j9Xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7x6x99muqtdx8zeqetpd.jpeg" alt="uniswap statistics"&gt;&lt;/a&gt;&lt;br&gt;
Since Uniswap is built on Ethereum, it cannot list tokens built on other blockchains, and so users can only swap ERC-20 tokens.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtX0hQX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4u4pvyrrxz98zxnolk5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtX0hQX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4u4pvyrrxz98zxnolk5.jpeg" alt="uniswap statistics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;Uniswap’s network is designed to facilitate the buying and selling of crypto assets in a way that mirrors a traditional exchange. &lt;br&gt;
It does this by using smart contracts, which allow users (called liquidity providers) to deposit crypto assets into pools. These smart contracts then allow other users (called traders) to buy and sell these assets. Users who trade these pool assets pay a fee that is then distributed to all the liquidity providers proportionally (based on their contribution to the pool).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uniswap-clone-script"&gt;
  &lt;/a&gt;
  Uniswap Clone Script
&lt;/h2&gt;

&lt;p&gt;Uniswap clone script is a decentralized exchange (DEX) script that performs two smart contracts presented on the topmost of Ethereum (ETH) blockchain.&lt;br&gt;
Uniswap exchange clone script is developed in a way that resolves common liquidity problems faced by every exchange. It permits automatic token swapping for performing decentralized exchanges (DEX) in DeFi platforms. Uniswap Clone Script is a multi-tested, readymade decentralized finance (DeFi) protocol script built on Ethereum Blockchain used to start a decentralized platform for automated liquidity providing on Ethereum (ETH) that operates 100% similar to Uniswap. The Uniswap Clone Script supports both swapping &amp;amp; liquidity provisions of Ethereum and its tokens.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-uniswap-exchange-clone-script"&gt;
  &lt;/a&gt;
  Features of Uniswap Exchange Clone Script
&lt;/h3&gt;

&lt;p&gt;Some of the exclusive features of Uniswap clone script are as follows:&lt;br&gt;
• Two-factor authentication&lt;br&gt;
• Unauthorized users are extremely prevented by offering a safe trade.&lt;br&gt;
• Quick buying &amp;amp; selling options&lt;br&gt;
• Rapidly enabling the buying &amp;amp; selling of the assets without a delay.&lt;br&gt;
• White label solutions&lt;br&gt;
• Enabling a customization feature for satisfying the customer's needs &amp;amp; deploying it.&lt;br&gt;
• Multilingual support&lt;br&gt;
• Multi-language supporting DeFi platforms attract the global audience by offering their native language support facility for people across our world.&lt;br&gt;
• Ease to Use&lt;br&gt;
• Eco-friendly options make the software easy to use even for beginners.&lt;br&gt;
• Uniswap at High level&lt;br&gt;
• Absolutely offered as an open-source, this non-profit protocol is absolutely simple &amp;amp; easy to use.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n3tgtcD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd7uwrh08oqhuajaa2aj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3tgtcD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd7uwrh08oqhuajaa2aj.png" alt="uniswap decentralized exchange"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-own-defi-based-protocol-like-uniswap"&gt;
  &lt;/a&gt;
  How to create own defi based protocol like uniswap?
&lt;/h3&gt;

&lt;p&gt;Go to our Uniswap clone interface.&lt;br&gt;
Connect your wallet. ...&lt;br&gt;
Select the token you'd like to exchange from.&lt;br&gt;
Select the token you'd like to exchange to.&lt;br&gt;
Click on Swap.&lt;br&gt;
Preview the transaction in the pop-up window.&lt;br&gt;
Confirm the transaction request in your wallet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-uniswap-clone-script"&gt;
  &lt;/a&gt;
  Benefits of Uniswap Clone Script
&lt;/h3&gt;

&lt;p&gt;Many remarkable benefits of uniswap clone script are there, here is a list of some of popular benefits of uniswap clone script&lt;br&gt;
• Easy options are provided for exchanging ERC20 tokens&lt;br&gt;
• New tokens provide direct access to the liquidity pools.&lt;br&gt;
• Start a Liquidity based exchange that is totally affordable by anyone.&lt;br&gt;
• Ability to gain profit by offering funds into the liquidity pools.&lt;br&gt;
• 100% Decentralized network &amp;amp; no involment of the third parties&lt;/p&gt;

&lt;p&gt;Top DeFi Development Company offers world-class special decentralized finance (Defi) development services and solutions for you to start an independent financial business across global countries. As traditional finance is being replaced with the DeFi, business can be high started in it so offers Permission less, interoperable, immutable defi solutions for managing tremendous growth and efficiency in your business.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-make-your-first-trade-on-uniswap"&gt;
  &lt;/a&gt;
  How to make your first trade on Uniswap
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; Step 1: First head over to the Uniswap exchange platform. ...&lt;/li&gt;
&lt;li&gt; Step 2: Once logged in, the trading interface will appear. ...&lt;/li&gt;
&lt;li&gt; Step 3: Now you're ready to set up your order. ...&lt;/li&gt;
&lt;li&gt; Step 4: At the bottom of the order menu, you'll then see how much you can expect to receive.
The process of creating decentralized protocols like Uniswap can take time to complete. From finding qualified DeFi developers and explaining your focus to having the DeFi developed and making revisions—the whole process can be confusing and very time-consuming. That being said, many businesses are learning how to create a decentralized protocol like Uniswap with the help of online (but that’s not easy). And many are choosing the best Decentralized finance development service provider on the world.
## White label uniswap clone script
Uniswap Clone Script supports anyone to launch their own DeFi Exchange Protocol similar to Uniswap instantly. And develops and deploys the Whitelabel uniswap clone script with features as like in the Uniswap and the script is completely customizable that you can add any functionalities or APIs anytime. Whitelabel Uniswap Clone comes with fully tested and customizable source code, advanced admin tools, free installation, and more. The finest decentralized protocol whitelabel clone on the market for a fair price is Uniswap Clone, which is new, dynamic, technologically sophisticated, and the best decentralized protocol whitelabel clone on the marketplace. White label cryptocurrency exchange software technology permits you to start your own decentralized crypto exchange. Uniswap Clone platform, the most efficient decentralized exchange solution, has become available for purchase.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--diUV60XR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ceaw3uawvtn2p24vwzk.png" alt="uniswap clone script"&gt;
## How to get a DeFi exchange similar to Uniswap? 
The replacement and useful method to make a DeFi exchange platform like Uniswap is to make a copy of it. The market has started getting decentralized exchanges like Uniswap in a cloned format. However, the trouble is that many companies are offering Uniswap clone Script, and it’s frustrating to find the best company in this field. So, how can you decide the best DeFi development company which provides robust &amp;amp; ready-made Uniswap Clone Script?
If you have decided to go for Uniswap clone Scripts, try to get it from the creators of Decentralized Finance exchange script development. It’s because whoever developed the Uniswap Clone Script for the first time, actually knows its realistic usage. It is also a smart idea to try the demo of Uniswap Clone Script before spending your bucks on it. How can I buy DeFi?&lt;/li&gt;
&lt;li&gt; Step 1: Create a Wallet. Download Trust Wallet and create a wallet. ...&lt;/li&gt;
&lt;li&gt; Step 2: Add DeFi Coin to the Wallet. Tap the icon in the top-right and search for “DeFi Coin”. ...&lt;/li&gt;
&lt;li&gt; Step 3: Buy “Uniswap Smart Chain” (USC) ...&lt;/li&gt;
&lt;li&gt; Step 4: Swap USC for DeFi Coin!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#things-to-know-before-buying-a-uniswap-clone-software"&gt;
  &lt;/a&gt;
  Things to know before buying a Uniswap clone software
&lt;/h3&gt;

&lt;p&gt;First of all, you need talk to experts and also, you must have a checklist before buying the Uniswap clone script. Here are the 5 important items to be considered before buying a Uniswap clone script. &lt;br&gt;
Ask for Free Demo: A great demo lets prospects understand how solution truly solves their pain points and enables them to become more successful in their job. so try the free demo of the website or app provided by the companies and check the serviceability and functionality of the website. &lt;br&gt;
Analyze DeFi Market: Take a deep dive into unique protocol-level and market-wide DeFi indicators. Explore Now. Detailed analysis of individual DeFi projects. try to select Uniswap DEX clone scripts from companies other than freelancers. Because Decentralized Finance development companies provide more support. Try to get a free quote from companies and choose one from them.&lt;br&gt;
Customization: Need to Know what will be the cost range for customization and read their terms and conditions about the company you buy. &lt;br&gt;
Packages: The price range of the Uniswap clone script varies according to the business needs. Think carefully and choose the package and try premium packages it will provide more outstanding features. &lt;br&gt;
Technical Person: If you are not technical person, then hire a technical person who can support you with the whole process. It is welfare to have a team to test the Uniswap clone script. You can optimize the Uniswap clone script by adding additional features and bug fixes with the help of your technical team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFwXAiQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58842kjtywhfr4256kjn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFwXAiQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58842kjtywhfr4256kjn.jpg" alt="uniswap exchange"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-uniswap-clone-script"&gt;
  &lt;/a&gt;
  Why Use Uniswap Clone Script?
&lt;/h2&gt;

&lt;p&gt;• Complete decentralized liquidity solution&lt;br&gt;
• Support for Multi-crypto token trading pairs&lt;br&gt;
• Fast &amp;amp; Instant Swapping &lt;br&gt;
• 100% Customizable&lt;br&gt;
• Prebuilt Scripts&lt;br&gt;
• Scalable &amp;amp; Clean Design&lt;br&gt;
• Multi-Language &amp;amp; Multi-Crypto Token Support&lt;br&gt;
• Referral &amp;amp; Promotions&lt;br&gt;
• User-friendly UI/UX&lt;br&gt;
• Liquidity Pools&lt;br&gt;
• Integrated Crypto Wallets&lt;br&gt;
• Top-performing pools&lt;br&gt;
• Flash Swapping&lt;br&gt;
• Perfectly Integrated &amp;amp; Audited Immutable Smart Contract&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ch15DloK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf0mzher3rwrhm60naii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ch15DloK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf0mzher3rwrhm60naii.png" alt="Uniswap Clone App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uniswap-clone-app"&gt;
  &lt;/a&gt;
  Uniswap Clone App
&lt;/h2&gt;

&lt;p&gt;However, Uniswap does not have dedicated application but companies’ technologies not only offer exclusive Uniswap clone script-based software solutions but also provides an updated Uniswap clone app development for your business. DEX clone app development is packed with all the features and benefits that Uniswap has. You can also add some additional features based on your business requirements. Contact to companies to get Uniswap clone script app for your crypto business. &lt;br&gt;
How to Build a Decentralized Protocol similar to Uniswap?&lt;br&gt;
A Decentralized finance trading is becoming more popular through the world; many companies and startups are starting to recognize the importance of Decentralized finance development for their business. But they have no idea about the DeFi, cost of DeFi development and the technical skills needed to develop these decentralized protocols similar to Uniswap, so many organizations face a lot of challenges in this competitive world.&lt;br&gt;
But as many DeFi development companies are realizing the request for Decentralized Finance and comprehend that specified requirements, these DeFi development companies are developing DeFi meant at providing a solution for how to make decentralized protocols like Uniswap. The trending solution involves companies launching DeFi based business with complete solutions.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>webdev</category>
      <category>cryptocurrency</category>
      <category>exchange</category>
    </item>
    <item>
      <title>The Only stock resources library you will ever need.</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Mon, 04 Oct 2021 04:37:18 +0000</pubDate>
      <link>https://dev.to/abhirajb/the-only-stock-resources-library-you-will-ever-need-48jf</link>
      <guid>https://dev.to/abhirajb/the-only-stock-resources-library-you-will-ever-need-48jf</guid>
      <description>&lt;p&gt;If you have ever searched the mystic lands of the internet for quality stock photos, videos or music, you have come to the right place. This excerpt from &lt;a href="https://devresources.gitbook.io"&gt;Dev Resources&lt;/a&gt; lists the quality websites for stock resources. If I have missed out on any websites, comment down below and they will be added.&lt;/p&gt;

&lt;p&gt;If you like this post and need more resources as such, head on to &lt;a href="https://devresources.gitbook.io"&gt;Dev Resources&lt;/a&gt; for more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stock-photos"&gt;
  &lt;/a&gt;
  Stock Photos
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Websites that offer free stock photos of all kinds for your websites and apps&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website                           &lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free stock photos shared by talented creators&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The internet’s source of freely usable images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://pixabay.com/"&gt;Pixabay&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Over 1.7 million+ high-quality stock images and videos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://magdeleine.co/"&gt;Magdeleine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Gallery &amp;amp; free high-resolution photo everyday&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://picspree.com"&gt;Picspree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Royalty free images, stock photos, illustrations, and vectors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://burst.shopify.com/"&gt;Burst&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free stock photos collections&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://gratisography.com/"&gt;Gratisography&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free collection of free high-resolution pictures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.lifeofpix.com/"&gt;Life of Pix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free high-resolution photography&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://stocksnap.io/"&gt;Stock Snap&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hundreds of high quality photos added weekly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://morguefile.com/"&gt;Morguefile&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Over 350,000 free stock photos for commercial use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kaboompics.com/"&gt;Kaboom Pics&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stock photography and color palettes. Good for product images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://nos.twnsnd.co/"&gt;New Old Stock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stock vintage photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://picjumbo.com/"&gt;Pic Jumbo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Good collections of different types of photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.publicdomainpictures.net/en/"&gt;Public Domain Pictures&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Public domain images of all types&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.chamberofcommerce.org/findaphoto/"&gt;Find A Photo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Searches multiple stock photo websites&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.stockvault.net/"&gt;Stockvault&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Categorized stock photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://placeholder.com/"&gt;Placeholder&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A free image placeholder service for the web. You can specify image size and format&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://realisticshots.com/"&gt;Realistic Shots&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free high-resolution stock photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://negativespace.co/"&gt;Negative Space&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;High-Resolution Free Stock Photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://skitterphoto.com/"&gt;SkitterPhoto&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free high-resolution photography&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://picography.co/"&gt;PicoGraphy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Gorgeous, High-Resolution, Free Photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://wunderstock.com/"&gt;Wunder Stock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stunningly amazing free photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://pxhere.com/"&gt;PxHere&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free Images &amp;amp; Free stock photos - PxHere&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://piqsels.com/"&gt;Piqsels&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Royalty Free Stock Photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.foodiesfeed.com/"&gt;FoodiesFeed&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Food photo stock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.nappy.co/"&gt;Nappy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A website offering Beautiful, high-res photos of black and brown people.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://generated.photos/"&gt;Generated Photos&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Unique AI Generated model photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.reshot.com/"&gt;Reshot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Uniquely free photos. Handpicked, non-stocky images.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freeimages.com/"&gt;Free Images&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Find and download free stock photos - all free for personal and commercial use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://picsum.photos/"&gt;Lorem Picsum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An easy to use API to get beautiful placeholder images. Size and other parameters can be specified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.scienceimage.csiro.au"&gt;scienceimage&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An image library specializing in science and nature images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://ian.umces.edu/imagelibrary"&gt;Integration &amp;amp; Application Network Image Library&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free images to provide scientists, resource managers, government agencies, community groups and graphics professionals with a resource for enhancing science communication.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.freenatureimages.eu"&gt;Saxifraga&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free nature images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://search.creativecommons.org"&gt;Creative Commons&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Search for free images to reuse.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://allthefreestock.com/"&gt;AllTheFreeStock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;a curated list of free stock images, audio and videos.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#stock-videos"&gt;
  &lt;/a&gt;
  Stock Videos
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Websites that offer free stock videos of all kinds for your websites and apps&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website                           &lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.pexels.com/videos"&gt;Pexels&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Largest library of free to use videos, donated by the community&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.pixabay.com/videos"&gt;Pixabay&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Large library of free to use videos, donated by the community similar to Pexels&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://coverr.co/"&gt;Coverr.co&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Beautiful free stock video footage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.videezy.com/"&gt;Videezy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free HD stock footage &amp;amp; 4K videos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://mixkit.co/"&gt;Mix Kit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stock video clips &amp;amp; music&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.lifeofvids.com/"&gt;Life Of Vids&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free video clips and loops&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.videvo.net/stock-video-footage/"&gt;Videvo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free and premium stock videos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://stock.loopvidz.com/"&gt;Loopvidz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free To Use Cinema graphs Created With VIMAGE App&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.splitshire.com/"&gt;SplitShire&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Beautiful &amp;amp; exclusive free stock videos &amp;amp; photos&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#stock-music-amp-sound-effects"&gt;
  &lt;/a&gt;
  Stock Music &amp;amp; Sound Effects
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Websites that offer free stock music and/or sound effects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website                           &lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.free-stock-music.com/"&gt;Free Stock Music&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Royalty free stock music for YouTube videos, podcasts, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.bensound.com/"&gt;Bensound&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Download Royalty Free Music for free and use it in your project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://mixkit.co/free-stock-music/"&gt;Mixkit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free music for your projects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://freesound.org/"&gt;Freesound&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free stock music and sounds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://freemusicarchive.org/"&gt;Free Music Archive&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Collaborative database of creative-commons licensed sound for musicians and sound lovers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://musopen.org/music/"&gt;Musopen&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An online copyright free classical music library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.unminus.com/"&gt;Unminus&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free Premium Music for Your Projects 🎁 Royalty Free. Cleared for YouTube.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's Connect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/rainboestrykr"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can support me by buying me a coffee maybe&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/rainboestrykr"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Divtober Day 3: Quick</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 04 Oct 2021 04:09:45 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-3-quick-45pf</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-3-quick-45pf</guid>
      <description>&lt;p&gt;An animated version of Aesop's The Hare and the Tortoise drawn using CSS and a single HTML element for &lt;a href=""&gt;Divtober&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/LYLozab?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If it goes too quick (or is it fast?), here is a screenshot of the animation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CM_OHPdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rbj287liszmcl7it07w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CM_OHPdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rbj287liszmcl7it07w.png" alt="A tortoise on a skateboard with a rocket attached to its shell reaches the finish line (with the word Meta in Spanish) ahead of a sad/surprised hare"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Something I learned from coding this one: Safari has some type of problem with the radial gradients when they have a value of 100%. It shows them squared. An easy hacky solution: use 99.9% instead of 100%.&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
      <category>art</category>
    </item>
    <item>
      <title>Async + Await</title>
      <author>Dubymar Tollinchi</author>
      <pubDate>Mon, 04 Oct 2021 03:48:59 +0000</pubDate>
      <link>https://dev.to/dubymarjtr/async-await-2l10</link>
      <guid>https://dev.to/dubymarjtr/async-await-2l10</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-control-flow"&gt;
  &lt;/a&gt;
  What is control flow?
&lt;/h2&gt;

&lt;p&gt;It is the &lt;strong&gt;order&lt;/strong&gt; in which statements, instructions, or functions &lt;strong&gt;are executed in our code&lt;/strong&gt;. JavaScript is an &lt;em&gt;asynchronous&lt;/em&gt; language, meaning that it reads code line by line, from top to bottom.&lt;/p&gt;

&lt;p&gt;If there is a line that needs to &lt;em&gt;fetch&lt;/em&gt; any information from a database, for example, it will kick off that data fetching and &lt;br&gt;
continue reading the next lines immediately, instead of waiting for the fetching to be done. &lt;/p&gt;

&lt;p&gt;JavaScript being &lt;em&gt;asynchronous&lt;/em&gt; makes it difficult to write any code that will suddenly stop or block any application process. In the past some of the solutions for this issue were implementing callbacks, which is &lt;em&gt;a function that gets passed as the last argument of another function&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;This was fine until you encounter what developers call &lt;strong&gt;Callback Hell&lt;/strong&gt;, which is a callback within a callback, within a callback, and so on, which makes it very difficult to read and maintain the code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-promise"&gt;
  &lt;/a&gt;
  What is a promise?
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;promise&lt;/strong&gt; is the &lt;em&gt;state of the result that gets return&lt;/em&gt;, so instead of having 10 lines of code indented with all those callbacks you can do it step by step. If something bad happens to the data, then you have an error handling, such as try catch. If you get the data successfully, then you execute a code, and like this, you write &lt;code&gt;.then&lt;/code&gt; for each action that you want. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Async + Await&lt;/strong&gt; is the same as promises but with a better syntax. Rather than having &lt;code&gt;.then&lt;/code&gt;, we can put &lt;code&gt;await&lt;/code&gt; in front of the promise and it will temporarily freeze that line of code until the promise is &lt;em&gt;resolved&lt;/em&gt; or &lt;em&gt;rejected&lt;/em&gt;, and then continues reading the following lines.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;promises.all()&lt;/code&gt; are &lt;strong&gt;Mega promises&lt;/strong&gt;, which are no other thing than a promise made of many promises, and it will return a promise where it will only resolve itself when all pieces of data are resolved. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-apis"&gt;
  &lt;/a&gt;
  Browser API's
&lt;/h2&gt;

&lt;p&gt;Most new browser API's are build on native promises. &lt;strong&gt;Fetch&lt;/strong&gt; is the way to get data from an API, so we can use await fetching data. &lt;/p&gt;

&lt;p&gt;The fetch API is like a &lt;em&gt;double promise&lt;/em&gt;, because you fetch some data from your API and then you need to &lt;em&gt;convert that data&lt;/em&gt; (most of the time we want to convert it into JSON). &lt;strong&gt;Axios&lt;/strong&gt; is also based on promises and they have some JSON defaults, so we don't need to convert the data.&lt;/p&gt;

&lt;p&gt;JS's &lt;code&gt;util&lt;/code&gt; package has a &lt;strong&gt;promisify&lt;/strong&gt; function that &lt;em&gt;converts callback-based functions to promise-based functions&lt;/em&gt;, so we can use our code on callback-based API's.&lt;/p&gt;

&lt;p&gt;Since &lt;strong&gt;Async + Await&lt;/strong&gt; is not built in every browser, something that we can do in order to make our code compatible with everything, is to go to Babel.com and &lt;em&gt;convert the code&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h2&gt;

&lt;p&gt;Error handling methods, such as &lt;code&gt;try-catch&lt;/code&gt;, let you place the code that you want to execute in your program in the &lt;code&gt;try&lt;/code&gt; part, and if anything happens, any errors can be handle in the &lt;code&gt;catch&lt;/code&gt; part.&lt;/p&gt;

&lt;p&gt;There is no way to &lt;strong&gt;abort or cancel a promise&lt;/strong&gt;, when, for example, you have two fetch requests going at the same time. One thing that you can do is &lt;code&gt;abortController()&lt;/code&gt;, which will &lt;em&gt;cancel one or more web requests&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>npm</category>
    </item>
    <item>
      <title>Some things to know about Lit</title>
      <author>Westbrook Johnson</author>
      <pubDate>Mon, 04 Oct 2021 03:04:18 +0000</pubDate>
      <link>https://dev.to/open-wc/some-things-to-know-about-litelement-282c</link>
      <guid>https://dev.to/open-wc/some-things-to-know-about-litelement-282c</guid>
      <description>&lt;p&gt;When reviewing software with which you have little experience, it's pretty common to attempt to compare it to software you have used before. That can help you get a handle on the general ergonomics and decisions behind the two pieces of software in question. However, one thing that this approach is not particularly good at is comparing the new software &lt;em&gt;in situ&lt;/em&gt;. You may have spent a good amount of time investigating, researching, and getting comfortable with the software you're already using in the context of your particular use casso much so, that it may even be the best solution available in that context. Comparing a new software in that context (unless it, too, is purpose-built for that context) can do a disservice to the software under test, as well as to your ability to fully understand the benefits of that software.&lt;/p&gt;

&lt;p&gt;This is what I keep coming back to when people say things like "X isn't as good as Y" when "X" is a way to build web components (&lt;a href="https://webcomponents.dev/blog/all-the-ways-to-make-a-web-component/"&gt;of which there are many&lt;/a&gt;) and "Y" is a JS framework. Even before you fill actual names into either side of the equation the differences in usage of what you fill those in with is important:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JS frameworks often want to own most or all of a page, whereas a web component is a single custom element on an potentially large and diverse DOM tree.&lt;/li&gt;
&lt;li&gt;Functional JS frameworks often hide much of that ownership from view to both the benefit (less code) and expense (less flexibility) of developers leveraging them.&lt;/li&gt;
&lt;li&gt;JS Frameworks tend to be an abstraction above the DOM and in this way, their "components" can exist as both literal (DOM/UI elements) and figurative (data connectivity/translations to non-web contexts).&lt;/li&gt;
&lt;li&gt;Web components being a DOM element can interact with their position in the DOM in the ways you'd otherwise need to bend over backward to do in a framework.&lt;/li&gt;
&lt;li&gt;JS frameworks often ship a lot of JS down the wire that may not be required by your application or component(s) whether or not the framework author gives you the ability to manage how much of that code makes it into your production build.&lt;/li&gt;
&lt;li&gt;Since web components are DOM elements, they can use their position in the DOM in ways you'd need to bend over backward to do in some JS frameworks.&lt;/li&gt;
&lt;li&gt;Web components are portable to just about any context in which you'd build web UI, while JS frameworks require your components to run in an app built with the same framework (unless or course, they allow you to export web components).&lt;/li&gt;
&lt;li&gt;and, many, many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some or all of these points could be seen as being for or against either side of the conversation. Many of these could switch from pro to con depending on the particular use case. Too often, reviews that fail to take that into account lead to half-baked, often hypercritical takes.&lt;/p&gt;

&lt;p&gt;With that in mind, I want to go over some concepts that support healthier decision-making when teams evaluate LitElement for their projects. This isn't really a "how-to", though I've got some (slightly) dated version of that available in my &lt;a href="https://dev.to/westbrook/not-another-to-do-app-2kj9"&gt;"Not Another To-Do App" series&lt;/a&gt;. This is more of a "good to know" guide, as these concepts aren't all exact ports from JS framework contexts. I hope the ability to judge the differences from a place of knowledge proves useful to you.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#default-values"&gt;
  &lt;/a&gt;
  Default Values
&lt;/h2&gt;

&lt;p&gt;There are a number of ways to define default values for a property on a LitElement, While some do require management across the entire element class, we'll ignore those today as there are a number of options that do not require such work.&lt;/p&gt;

&lt;p&gt;First off, LitElement's &lt;code&gt;render()&lt;/code&gt; method of a LitElement is (from the user's perspective) an almost 1 to 1 conversion from the functional definitions found in other offerings. In this way, you could treat &lt;code&gt;render()&lt;/code&gt; as the only entry into your properties and define fallbacks at the top of your render function's body like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;x-dialog delay=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;Thank you!&amp;lt;/x-dialog&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here, you could get very close to copy and paste the rest of a functional UI component into a LitElement for an early test of its capabilities. Leveraging scoped variables like this, rather than class properties, does leave you in much the same place that functional alternatives to UI development do; needing additional tools for memoization of that scope. As using LitElement means you're already in a class context, we can use the capabilities of a class directly rather than synthesizing them with memoization.&lt;/p&gt;

&lt;p&gt;A simpler approach to merging the two concepts is to set that fallback into the class property itself. Above I showed doing this in the &lt;code&gt;render()&lt;/code&gt; lifecycle method, however, I find it much nicer to &lt;em&gt;only&lt;/em&gt; have the template surfaced therein. Leveraging one of the earlier lifecycle methods for managing defaults, validation, sanitation, transformation, or derivation help to maintain that structure. In this case, we'll use &lt;code&gt;willUpdate()&lt;/code&gt; which doesn't require a &lt;code&gt;super&lt;/code&gt; call or a returned value, but will always be visited during each render lifecycle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;willUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyValues&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this approach, you can most closely facilitate the single line defaulting that can be present when relying on a function to define a component. This does mean the &lt;code&gt;shouldRender()&lt;/code&gt; method - the first method called in the render lifecycle - will not have your default value, and if that's an issue for your style of element development, you might want to move this fallback work there, but it also means that due to the fact the LitElement renders asynchronously there's technically a possibility that your local methods could as well. Due to this fact, you may want to leverage a slightly more complete approach to a default.&lt;/p&gt;

&lt;p&gt;Here we see the property getter fallback to the value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closeDelay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This does eclipse the simplicity of a functional solution as we are choosing to apply the default by writing our own getter/setter pair on the property. At the same time, however, we've fallen into a possible trap of the functional fallback approach (and as the &lt;code&gt;willUpdate()&lt;/code&gt; approach above), we're allowing our entire render lifecycle to be triggered for what might not be an actual change to our component state. Were &lt;code&gt;this.closeDelay&lt;/code&gt; to already equal &lt;code&gt;300&lt;/code&gt; and the application to change it to &lt;code&gt;undefined&lt;/code&gt;, all of these approaches we've looked at so far would cause whatever could occur in your render lifecycle to occur needlessly.&lt;/p&gt;

&lt;p&gt;By falling back in the setter as opposed to the getter you can leverage the capabilities of a class component to prevent the render lifecycle to be started altogether. In the following code, no matter how the value of &lt;code&gt;this.closeDelay&lt;/code&gt; gets to &lt;code&gt;300&lt;/code&gt; the call to &lt;code&gt;this.requestUpdate()&lt;/code&gt; is gated as long as the final value doesn't change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyThing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;property&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_closeDelay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closeDelay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you may still ask, "but, why it is so much more code?" and, in our ecosystem of "less is more", both from a DX as well as a UX/performance standpoint, it's a great question. It's more code because it is also a different level/type of capability. Here we get a default to our property, clear gating on the render lifecycle, and on top of that, we get a value that is held state-fully within a class that defines a DOM element. This means that not only can it take part in the render pipeline of the element that owns it, but that it is available for other elements that share its DOM tree to query as a container for that state. Not every application is architected with a want or need for this capability. Not every component is going to be leveraged at the scale where the checking is needed to confirm that the render lifecycle has no side effects in a way that benefits extra prevention of the lifecycle altogether. However, when you do, you might take a look at LitElement as a path towards attaining these capabilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-you-like-typescript"&gt;
  &lt;/a&gt;
  So you like Typescript?
&lt;/h2&gt;

&lt;p&gt;Typescript loves a good &lt;code&gt;"Property is not definitely assigned in the constructor"&lt;/code&gt; warning, and if you like Typescript enough to use it a lot, you'll likely run into it at some point. It's telling you this, because in contrast to what you've been told Typescript is NOT smarter than you and it can't tell if something &lt;em&gt;should&lt;/em&gt; always be available, only if it &lt;em&gt;might&lt;/em&gt; not be available. You can set an initial value to a property, and it'll never yell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyThing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;myProperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// always available, always a string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're looking for that to &lt;em&gt;have&lt;/em&gt; to be initialized to use your element, so &lt;em&gt;you&lt;/em&gt; KNOW it's going to always have a value, but you want the consumer to initialize it, then you can tell Typescript that by using the &lt;code&gt;!&lt;/code&gt; operator once and be done with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyThing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;myProperty&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// no initial value, but a string is required from the consumer&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you still want to be defensive, you can add some helper code in your lifecycle to support a consumer leveraging your custom element correctly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyThing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;shouldUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyValues&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// great location to make sure it's NEVER undefined;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myProperty&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;canUpdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;`myProperty` is unset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;canUpdate&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shouldUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;firstUpdated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyValues&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// for one time availability confirmation&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstUpdated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myProperty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;`myProperty` is unset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#required-properties"&gt;
  &lt;/a&gt;
  Required properties
&lt;/h3&gt;

&lt;p&gt;In this way, you can also manage required properties/attributes. No, it doesn't fall within the available management of a tool-based contract with the consumers of your component, however, a tool-based contract is not strictly enforceable. You as a component author can tell Typescript or a linter to error on certain things, but your consumer can tell them not to just as easily. Deciding to &lt;em&gt;only&lt;/em&gt; leverage tooling for this sort of capability might mean less work for you, but it doesn't guarantee better outcomes for your consumers. Any component author will need to decide the risks they are willing to foist onto their consumers when publishing a component, and this is yet another item to manage on that list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#event-management"&gt;
  &lt;/a&gt;
  Event management
&lt;/h2&gt;

&lt;p&gt;Event listeners added directly on &lt;code&gt;this&lt;/code&gt; in a custom element &lt;em&gt;do not&lt;/em&gt; need to be cleaned up when disconnected from the &lt;code&gt;document&lt;/code&gt;. Once all references to the element are released, the same garbage collection that cleans up the element itself will clean up the events bound to it. What's more, when calling &lt;code&gt;addEventListener&lt;/code&gt; on &lt;code&gt;this&lt;/code&gt;, the method's &lt;code&gt;this&lt;/code&gt; reference automatically reverts to the instance. You don't need to bind the method, so you can call a class method directly without any &lt;code&gt;.bind(this)&lt;/code&gt; or class field arrow-functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;menu-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MenuTrigger&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;property&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;willUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyValues&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do stuff.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Events are even easier if you know the name of the event you're wanting to listen for will be the same throughout the lifecycle of your application. With that knowledge you can listen just once without needing to add/remove the listener based on even name changes over time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;menu-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MenuTrigger&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;known-event-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do stuff.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done and done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stylemap-usage"&gt;
  &lt;/a&gt;
  styleMap usage
&lt;/h2&gt;

&lt;p&gt;Lit's &lt;code&gt;styleMap()&lt;/code&gt; directive helps when setting the &lt;code&gt;style&lt;/code&gt; attribute on HTML elements from JavaScript. It accepts an object with css-property keys and string, &lt;code&gt;undefined&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; values. This means you can prevent a CSS property from being added to the element by passing &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; as the value, e.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styleMap&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lit/directives/style-map.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
      &amp;lt;p
        style=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styleMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1px solid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;200px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// I don't show a type mismatch&lt;/span&gt;
          &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// I do show a type mismatch&lt;/span&gt;
        &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="s2"&gt;
      &amp;gt;Hello, world!&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://lit.dev/playground/#project=W3sibmFtZSI6InNpbXBsZS1ncmVldGluZy50cyIsImNvbnRlbnQiOiJpbXBvcnQge2h0bWwsIGNzcywgTGl0RWxlbWVudH0gZnJvbSAnbGl0JztcbmltcG9ydCB7Y3VzdG9tRWxlbWVudCwgcHJvcGVydHl9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7c3R5bGVNYXB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qcyc7XG5cbkBjdXN0b21FbGVtZW50KCdzaW1wbGUtZ3JlZXRpbmcnKVxuZXhwb3J0IGNsYXNzIFNpbXBsZUdyZWV0aW5nIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgcCB7IGNvbG9yOiBibHVlIH1gO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIG5hbWUgPSAnU29tZWJvZHknO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgPHBcbiAgICAgICAgc3R5bGU9JHtzdHlsZU1hcCh7XG4gICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkJyxcbiAgICAgICAgICB3aWR0aDogJzIwMHB4JyxcbiAgICAgICAgICBmbG9hdDogdW5kZWZpbmVkLFxuICAgICAgICAgIG1hcmdpbjogMTAsXG4gICAgICAgIH0pfVxuICAgICAgICA-SGVsbG8sICR7dGhpcy5uYW1lfSE8L3A-YDtcbiAgfVxufVxuIn0seyJuYW1lIjoiaW5kZXguaHRtbCIsImNvbnRlbnQiOiI8IURPQ1RZUEUgaHRtbD5cbjxoZWFkPlxuICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBzcmM9XCIuL3NpbXBsZS1ncmVldGluZy5qc1wiPjwvc2NyaXB0PlxuPC9oZWFkPlxuPGJvZHk-XG4gIDxzaW1wbGUtZ3JlZXRpbmcgbmFtZT1cIldvcmxkXCI-PC9zaW1wbGUtZ3JlZXRpbmc-XG48L2JvZHk-XG4ifSx7Im5hbWUiOiJwYWNrYWdlLmpzb24iLCJjb250ZW50Ijoie1xuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJsaXRcIjogXCJeMi4wLjAtcmMuMlwiLFxuICAgIFwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI6IFwiXjEuMC4wLXJjLjJcIixcbiAgICBcImxpdC1lbGVtZW50XCI6IFwiXjMuMC4wLXJjLjJcIixcbiAgICBcImxpdC1odG1sXCI6IFwiXjIuMC4wLXJjLjNcIlxuICB9XG59IiwiaGlkZGVuIjp0cnVlfV0"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The current version of Lit's styleMap excludes numbers as values. You might expect Lit to automatically convert numbers to &lt;code&gt;px&lt;/code&gt; values, but on second thought that isn't actually what you'd want. In CSS, where &lt;code&gt;px&lt;/code&gt; is just one of many units that a numeric CSS property could accept (&lt;code&gt;%&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt;, &lt;code&gt;vwmax&lt;/code&gt;, &lt;code&gt;pt&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;rem&lt;/code&gt;, &lt;code&gt;pt&lt;/code&gt;, &lt;code&gt;pc&lt;/code&gt;, &lt;em&gt;ad infinitum&lt;/em&gt;), there's no way for Lit to know or even assume what kind of number you're using. On top of that, you might want to apply unit-less numbers directly to your styles:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;XL&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
    output {
      background-color: hsl(var(--hue, 0) 50 100);
    }
  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;property&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;hue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

Thanks &lt;a class="mentioned-user" href="https://dev.to/bennypowers"&gt;@bennypowers&lt;/a&gt;
 for the code sample here.



&lt;p&gt;Defaulting numbers to &lt;code&gt;px&lt;/code&gt; would be a foot-gun. Instead, Lit encourages you to be explicit with your CSS code. Doing so not only helps your consumers, but your teammates and future self as well when it comes time to maintain the components that you create.&lt;/p&gt;




&lt;p&gt;One of the best things about &lt;code&gt;lit-html&lt;/code&gt;, the renderer underlying LitElement, is that, if you want to live on that wild side, you could create your own directive that applied number typed properties as &lt;code&gt;px&lt;/code&gt; and leverage it in your own work. Here are &lt;a href="https://lit.dev/docs/templates/custom-directives/"&gt;the docs&lt;/a&gt; for doing just that! If you're still not convinced, check out some &lt;a href="https://dev.to/open-wc/doing-a-flip-with-lit-html-2-0-3gn4"&gt;directives with which I've experimented&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: the above article, "Doing a FLIP with &lt;a href="mailto:lit-html@2.0"&gt;lit-html@2.0&lt;/a&gt;", was written against an RC of &lt;code&gt;lit@2.0&lt;/code&gt; and may not be 100% current. I'll be looking to update it here, soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When you're learning a new piece of software, by all means, start by comparing it to something that you know. It's like a cheat code to getting started down the path of learning something new. Once you've done that, don't stop there, get into a real use case with it and learn what sort of capabilities or techniques it unlocks or supports. Only then can you really get into the question of why it's doing so and whether in the context that it is intended to be used (or the context that you might use it) it's the sort of tool you want to leverage for the job.&lt;/p&gt;




&lt;p&gt;If you do get to building something with LitElement, come share it here and let's chat about the whats and whys of what you've done/are trying to do. I look forward to seeing it here in the comments, or hit me up on the &lt;a href="https://join.slack.com/t/lit-and-friends/shared_invite/zt-llwznvsy-LZwT13R66gOgnrg12PUGqw"&gt;Lit &amp;amp; Friends Slack&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>litelement</category>
      <category>webcomponents</category>
      <category>typescript</category>
      <category>learning</category>
    </item>
    <item>
      <title>Do you wanna keep your embedded database encrypted?</title>
      <author>Akash Srivastava</author>
      <pubDate>Mon, 04 Oct 2021 02:58:41 +0000</pubDate>
      <link>https://dev.to/dev1721/do-you-wanna-keep-your-embedded-database-encrypted-5egk</link>
      <guid>https://dev.to/dev1721/do-you-wanna-keep-your-embedded-database-encrypted-5egk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Data privacy and security is the priority of every software product and services. During developing any software product or services as a developer first thing we should have to keep in mind that the storage and fetching of data should be secured and protected. &lt;br&gt;
In this blog I am using SQLite Database and Python Language to show how to encrypt Data inside database and how to show the decrypted data on client side.&lt;br&gt;
I am dividing the process into several parts to get good understanding.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understanding of Data Encryption&lt;/li&gt;
&lt;li&gt;Software Setup&lt;/li&gt;
&lt;li&gt;Core Coding Understanding&lt;/li&gt;
&lt;li&gt;Inferences &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#theory-of-data-encryption"&gt;
  &lt;/a&gt;
  Theory of Data Encryption
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#theory"&gt;
  &lt;/a&gt;
  Theory
&lt;/h3&gt;

&lt;p&gt;Encryption is the process of translating plain text data (plaintext) into something that appears to be random and meaningless (ciphertext). Decryption is the process of converting ciphertext back to plaintext.&lt;br&gt;
To encrypt more than a small amount of data, symmetric encryption is used. A symmetric key is used during both the encryption and decryption processes. To decrypt a particular piece of ciphertext, the key that was used to encrypt the data must be used.&lt;br&gt;
The goal of every encryption algorithm is to make it as difficult as possible to decrypt the generated ciphertext without using the key. If a really good encryption algorithm is used, there is no technique significantly better than methodically trying every possible key. For such an algorithm, the longer the key, the more difficult it is to decrypt a piece of ciphertext without possessing the key.&lt;br&gt;
It is difficult to determine the quality of an encryption algorithm. Algorithms that look promising sometimes turn out to be very easy to break, given the proper attack. When selecting an encryption algorithm, it is a good idea to choose one that has been in use for several years and has successfully resisted all attacks.&lt;br&gt;
&lt;a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/data-encryption-and-decryption"&gt;Reference&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flow-diagram"&gt;
  &lt;/a&gt;
  Flow Diagram
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ey3qRaaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tgdxclbonzxzo4no0u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ey3qRaaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tgdxclbonzxzo4no0u8.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#software-setup"&gt;
  &lt;/a&gt;
  Software Setup
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Tool: VS-Code: &lt;a href="https://code.visualstudio.com/download"&gt;Download&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Language: Python &lt;a href="https://www.python.org/downloads/"&gt;Download&lt;/a&gt;, SQLite &lt;a href="https://www.sqlite.org/download.html"&gt;Download&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Libraries: Cryptography Command: &lt;code&gt;pip install cryptography&lt;/code&gt;-&lt;a href="https://pypi.org/project/cryptography/"&gt;Read Here&lt;/a&gt;,
Fernet &lt;a href="https://cryptography.io/en/latest/fernet/"&gt;Read Here&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#core-coding"&gt;
  &lt;/a&gt;
  Core Coding
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#scenario-to-understand-coding"&gt;
  &lt;/a&gt;
  Scenario to understand Coding
&lt;/h3&gt;

&lt;p&gt;Let us take a part of application which maintains the daily routine of ours in a database embedded in our system. But there is a risk of keeping the &lt;code&gt;.db&lt;/code&gt; file in the system as plain text because the data is readable. So, we have to keep this database encrypted hence we will use following method to encrypt the data base.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#file-structure-and-understanding"&gt;
  &lt;/a&gt;
  File Structure and Understanding
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQ4RaWz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r1bf4p9bksm8k9gwre7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQ4RaWz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r1bf4p9bksm8k9gwre7.JPG" alt="filestructure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be using modular form development. So for each functionality we will be creating a module. And finally use each module in main module by importing and calling it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creation-of-database"&gt;
  &lt;/a&gt;
  Creation of Database
&lt;/h4&gt;

&lt;p&gt;As shown there is a file name &lt;code&gt;createdb.py&lt;/code&gt;.The purpose of this file is to create a new database &lt;code&gt;mySecret.db&lt;/code&gt; having following columns: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Routine ID: It is the description of routine such as morning routine, breakfast, office hour etc.&lt;/li&gt;
&lt;li&gt;Date: The date when this routine is or was happened.&lt;/li&gt;
&lt;li&gt;Start Time: The time when this routine is starting/started.&lt;/li&gt;
&lt;li&gt;End Time: The time when this routine is ending/ended.&lt;/li&gt;
&lt;li&gt;Status: The Routine is done/pending/in progress/not done etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;createdb.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code to implement the db creation.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code-to-implement-the-db-creation"&gt;
  &lt;/a&gt;
  Python Code to implement the db creation
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3

def create():
    conn = sqlite3.connect("mySecret.db")
    crsr = conn.cursor()
    sql_command = """CREATE TABLE ROUTINE (
    routineID VARCHAR(10000) PRIMARY KEY,
    date DATE,
    startTime VARCHAR(5),
    endTime VARCHAR(5),
    status VARCHAR(10));"""
    crsr.execute(sql_command)
    conn.commit()
    conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;sqlite3&lt;/code&gt; is the library we have to import in order to work with database in python.&lt;br&gt;
Every Database handling under sqlite3 follows simple process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connection with database&lt;/li&gt;
&lt;li&gt;Taking the curser of database&lt;/li&gt;
&lt;li&gt;Giving the SQL Query to Execute&lt;/li&gt;
&lt;li&gt;Commit the Execution&lt;/li&gt;
&lt;li&gt;Closing the Database. &lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#sql-query-to-create-table"&gt;
  &lt;/a&gt;
  SQL Query to create Table
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE ROUTINE (
routineID VARCHAR(10000) PRIMARY KEY,
date DATE,
startTime VARCHAR(5),
endTime VARCHAR(5),
status VARCHAR(10));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#generation-of-universal-key"&gt;
  &lt;/a&gt;
  Generation of Universal Key
&lt;/h4&gt;

&lt;p&gt;As shown there is a filename &lt;code&gt;generateKey.py&lt;/code&gt;.The purpose of this file is to generate a universal key which would be use while encryption and decryption of a cell in database.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;generateKey.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code to implement the key generation.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code-to-implement-the-key-generation"&gt;
  &lt;/a&gt;
  Python Code to implement the key generation
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from cryptography.fernet import Fernet

def generate():
    key = Fernet.generate_key()
    with open("universal.key","wb") as key_files:
        key_files.write(key)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;Fernet is the library from Cryptography which is being used in this code to generate the key which we will be using as universal key as of now. The generated key is stored in the file &lt;code&gt;universal.key&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#process-of-encrypting-data"&gt;
  &lt;/a&gt;
  Process of Encrypting Data
&lt;/h4&gt;

&lt;p&gt;As shown there is a filename &lt;code&gt;encrypt.py&lt;/code&gt;.The purpose of this file is to encrypt the secret message passed as parameter.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;encrypt.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code to implement the encryption.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from cryptography.fernet import Fernet

def loadKey():
    key = open("universal.key","rb").read()
    return key

def Encrypt(secret):
    key = loadKey()
    encodeSecret = secret.encode()
    fer  = Fernet(key)
    return fer.encrypt(encodeSecret)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;Fernet is the library from Cryptography which is being used in this code to encrypt the data. We will made a block name &lt;code&gt;loadKey()&lt;/code&gt; which will load the universal key stored inside the &lt;code&gt;universal.key&lt;/code&gt;. Then we will make an &lt;code&gt;Encrypt()&lt;/code&gt; block accepting "secret" as the parameter. For encryption we will first encode the secret message then pollute it with the salt made by &lt;code&gt;Fernet(key)&lt;/code&gt;by encrypting with the encoded message.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#process-of-decrypting-data"&gt;
  &lt;/a&gt;
  Process of Decrypting Data
&lt;/h4&gt;

&lt;p&gt;As shown there is a filename &lt;code&gt;decrypt.py&lt;/code&gt;.The purpose of this file is to decrypt the encrypted message passed as parameter.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;decrypt.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code to implement the decryption.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from cryptography.fernet import Fernet

def loadKey():
    key = open("universal.key","rb").read()
    return key

def Decrypt(encryptSecret):
    key = loadKey()
    fer  = Fernet(key)
    decryptSecret = fer.decrypt(encryptSecret)
    return decryptSecret.decode()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;Fernet is the library from Cryptography which is being used in this code to decrypt the data. We will made a block name &lt;code&gt;loadKey()&lt;/code&gt; which will load the universal key stored inside the &lt;code&gt;universal.key&lt;/code&gt;. Then we will make an &lt;code&gt;Decrypt()&lt;/code&gt; block accepting "encryptSecret" as the parameter. For decryption we will first depollute the secret message from the salt made by &lt;code&gt;Fernet(key)&lt;/code&gt;by decrypting with the encrypted message then decode it to view the original secret message.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#data-entry-of-encrypted-data-to-database"&gt;
  &lt;/a&gt;
  Data Entry of encrypted data to database.
&lt;/h4&gt;

&lt;p&gt;As shown there is a file name &lt;code&gt;dataentry.py&lt;/code&gt;.The purpose of this file is to insert encrypted data into the database &lt;code&gt;mySecret.db&lt;/code&gt; having following columns: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Routine ID: It is the description of routine such as morning routine, breakfast, office hour etc.&lt;/li&gt;
&lt;li&gt;Date: The date when this routine is or was happened.&lt;/li&gt;
&lt;li&gt;Start Time: The time when this routine is starting/started.&lt;/li&gt;
&lt;li&gt;End Time: The time when this routine is ending/ended.&lt;/li&gt;
&lt;li&gt;Status: The Routine is done/pending/in progress/not done etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;dataentry.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code to implement data entry of encrypted data.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3
import encrypt 

def enter(id,dt,st,et,status):
    conn = sqlite3.connect("mySecret.db")
    crsr = conn.cursor()
    sql_command = """INSERT INTO ROUTINE(routineID,date,startTIme,endTime,status)
    VALUES (?,?,?,?,?);"""
    id = encrypt.Encrypt(id)
    dt = encrypt.Encrypt(dt)
    st = encrypt.Encrypt(st)
    et = encrypt.Encrypt(et)
    status = encrypt.Encrypt(status)

    tup = (id,dt,st,et,status)
    crsr.execute(sql_command,tup)
    conn.commit()
    conn.close()  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;sqlite3&lt;/code&gt; is the library we have to import in order to work with database in python. And we are also importing 'encrypt' module made by us.&lt;br&gt;
Every Database handling under sqlite3 follows simple process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connection with database&lt;/li&gt;
&lt;li&gt;Taking the curser of database&lt;/li&gt;
&lt;li&gt;Giving the SQL Query to Execute&lt;/li&gt;
&lt;li&gt;Commit the Execution&lt;/li&gt;
&lt;li&gt;Closing the Database. 
The &lt;code&gt;enter()&lt;/code&gt; block takes 5 parameters as input. And then encrypt each parameter and then insert into the db in the form of tuple as shown in the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#sql-query-to-insert-into-db"&gt;
  &lt;/a&gt;
  SQL Query to insert into db
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO ROUTINE(routineID,date,startTIme,endTime,status)
    VALUES (?,?,?,?,?);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#printing-of-decrypted-data"&gt;
  &lt;/a&gt;
  Printing of Decrypted data
&lt;/h4&gt;

&lt;p&gt;As shown there is a file name &lt;code&gt;dataprinting.py&lt;/code&gt;.The purpose of this file is to print decrypted data from the database &lt;code&gt;mySecret.db&lt;/code&gt; having following columns: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Routine ID: It is the description of routine such as morning routine, breakfast, office hour etc.&lt;/li&gt;
&lt;li&gt;Date: The date when this routine is or was happened.&lt;/li&gt;
&lt;li&gt;Start Time: The time when this routine is starting/started.&lt;/li&gt;
&lt;li&gt;End Time: The time when this routine is ending/ended.&lt;/li&gt;
&lt;li&gt;Status: The Routine is done/pending/in progress/not done etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;dataprinting.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code to implement data printing of decrypted data.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3
import decrypt

def printit():
    conn = sqlite3.connect("mySecret.db")
    crsr = conn.cursor()
    crsr.execute("SELECT * FROM ROUTINE")
    rows = crsr.fetchall()
    for row in rows:
        for cell in row:
            print(decrypt.Decrypt(cell))

    conn.commit()
    conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;sqlite3&lt;/code&gt; is the library we have to import in order to work with database in python. And we are also importing 'decrypt' module made by us.&lt;br&gt;
Every Database handling under sqlite3 follows simple process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connection with database&lt;/li&gt;
&lt;li&gt;Taking the curser of database&lt;/li&gt;
&lt;li&gt;Giving the SQL Query to Execute&lt;/li&gt;
&lt;li&gt;Commit the Execution&lt;/li&gt;
&lt;li&gt;Closing the Database. 
The &lt;code&gt;printit()&lt;/code&gt; fetch all rows(tuple) of database. And then decrypt each cell of each tuple and then print it. &lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#sql-query-to-select-all-elements"&gt;
  &lt;/a&gt;
  SQL Query to select all elements
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM ROUTINE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-main-module"&gt;
  &lt;/a&gt;
  The Main Module
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Create a file name as &lt;code&gt;main.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Code the program as shown in Python Code.&lt;/li&gt;
&lt;li&gt;Save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from os import path
import createdb
import generateKey
import dataentry
import dataprinting

def main():
    if(path.exists('mySecret.db')==False):
        generateKey.generate()
        createdb.create()
    exit = int(input("enter 0 if you want to exit or 1 to continue entring data"))
    while(exit==1):
        id = input("input routineID")
        dt = input("input date in DD-MM-YYYY")
        st = input("input start time in hh:mm")
        et = input("input end time in hh:mm")
        status = input("not done/pending/inprogress/done")
        dataentry.enter(id,dt,st,et,status)
        exit = int(input("enter 0 if you want to exit or 1 to continue entering data"))
    dataprinting.printit()

main()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code Explanation
&lt;/h5&gt;

&lt;p&gt;We are importing &lt;code&gt;path from os&lt;/code&gt;, self made modules &lt;code&gt;createdb&lt;/code&gt;,&lt;code&gt;generateKey&lt;/code&gt;,&lt;code&gt;dataentry&lt;/code&gt;and&lt;code&gt;dataprinting&lt;/code&gt;. The purpose of &lt;code&gt;path&lt;/code&gt; is to check whether the database 'mySecret.db' already exists or not. If it is not exist we will create the db and generate one universal key otherwise leave these two steps as shown in the &lt;code&gt;main()&lt;/code&gt; block. Now we are asking user to select either 1 "if they want to insert data in db" or 0 "if they do not want to insert data in db". Then in while loop we are taking 5 inputs and entering in database using module &lt;code&gt;dataentry&lt;/code&gt;.Once the data is being entered control comes out of while loop and using module &lt;code&gt;dataprinting&lt;/code&gt; print the data.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#code-run"&gt;
  &lt;/a&gt;
  Code Run
&lt;/h5&gt;

&lt;p&gt;Once you run &lt;code&gt;main.py&lt;/code&gt; the code it will ask &lt;code&gt;enter 0 if you want to exit or 1 to continue entering data'. Click 1 and enter insert all data as asked. once all rows are finished press 0 to exit out of loop. And all the data will be printed. But in behind the scene some process happened.&lt;/code&gt;mySecret.db` and 'univeral.key' are created.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Output &lt;br&gt;
&lt;strong&gt;Universal Key&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;yn1ZrHZ2VBLqq7iZ38pTMvRf9-3pyAVHFlWjADIPO20=&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Consider below image to open db&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyEMd6Lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxhoygu41jqxi059lq52.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyEMd6Lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxhoygu41jqxi059lq52.JPG" alt="opendb"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Data inside DB:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;routineID&lt;/th&gt;
&lt;th&gt;date&lt;/th&gt;
&lt;th&gt;startTime&lt;/th&gt;
&lt;th&gt;endTime&lt;/th&gt;
&lt;th&gt;status&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDfTHxfYmU4kHl9uSqt-bF0LpSlZZyxyk2cXbyummG0HRfLRH6Ouja8u7yt12Ii-qAHzX_hkohLhg9GKglzEZhT2Hg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDfTh4WTHW0ezh8kpWnr7Ccs5ZvdI12jtbxVRKa4pmKOx-Fm6cZ1NGbV_uTkk9--GG97LEjUSEEPRN-8Cj3RYtWSjQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDfTeGHg8foPNYIZxchL61UDmORidKvFgvdy_eiBX8vEV-24qk5fTrjinehW51AAs3ZZHWN3R-tvnJdfUpcykvMpsg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDfTNFTmf7Cxgc48IUmrrKakT4-CSi4FYLp57DTzlqy3s9TFuEKXpIAPRa2gNWif_vO2Nc_6_Na1CpmvdrHNRdaTZQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDfT_hCJYgSVWZjCTy3YqWyhvORmVDi4tS4EZHsHJLe6P3t4ljZRFro21eFKemOnK9SZh3uzl7NOM7c54nDTBEQkSg==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDhKooyIOnSHEJWhkj8QUaNw1YPIPzxyYHUE7yoBGWsIDlVy5_s7_SJPnF6yj5kxf_Lykl6SwYpVRMNbmJ9dGU7NkA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDhKF9ATmebjCCNW_dLK74LvNm9l8sBk7PbxPG-70KsHolHNjZ5mFE3aj62XJS1TaGrZTxtMBYUiNuBs1WZwcqzymQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDhKJgoYW2tihp7tEgKEF1QG5EMHYkZ3nA6I27T_bArxt7V3-PZ1snhlkWN2OSR4ITfJw-0bIQh30Og08PFmaFDedA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDhKgz0fI5cefWYeQknGfQ44vnAZvuSTFZdGPsN_dVAduMsTfkqhrwCe-HaX3Lv47QorlypTQRJnC0dQaGHvvRqXZg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDhKNSG8qx9le0TOcdHIMW8_iJX-OPAxTdQvJCuK6Krr0vABAdiuZGw8hyU1D42Cm8YOWIBkKeURrZli4-G3J7M3sQ==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDiG3kN7BLWKwKQo-VESvAw-Wqt8rEHfWUD1mn5sdB8qbQcnpsA0pFMWD3Mp85AWtqTxfEO1rkd62Nc6FMO3K_AWrA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDiGsTxqUZT3r9wWit7UwrYuQ-bcg_19nK1qJXNPo7oN3L2tBTkigDVvAW1fLpfqt-0T5Uu6pw_8UzT-utP50rI6gw==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDiG66j46ciB5Z62meatN0cqcJcIRgrR36wfOyQ9WgEx14tETC_hHwOXshywTP9xxDHuBjJe7L4mLul-qhE-oJ5ZiQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDiGF4Oz_wG2wlwLqLTPNQreDbVZGx96-cCtCE93pduRM5K_Tvgo8Jz5Ef0jnuWqmcaD378X7x8zXMwImzjjJW6VCg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDiGP8WxV-OFxEfhXRGNBr7bmTc-vH1Hlfrd9jAX4wfjV3Y4W8HldHJY0tp1UQ_VyhRdyc08HMiRh4oEOHLn-nkoPg==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDjN6O28PEj0_xDYcJWu4hWQO0jcW4labsJ-HM4OfTOQoguXMFlXZpdbOpER4jdAEYfHaU6zK5NEtA5RiCSb-XV5lg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDjNRmeDI-vv3N4PbLedclWNbdjBzVQ935Fws4RsHbgiq2JP92o7oaOQsyY-kwChlzSijk6PcQy1J0uDelXbFjZcEg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDjNBAt6T-s6KoLkL7zRBrM-TS4gjmTtgN6fPJrJl2BtevCHlSoizbafsNHioaBEJv0fmivKeu6vUaCcaMawTW4Fnw==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDjNTtJctnIsAr7ltrCbxTn2MNWpDcD32kjfCLuFOUrkQp-sQBWoxoxcTM6C5SbGUiUCrxiYuwTlpFIB2QBChEmN7w==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDjNII9CHW1E0AluwHousw7O1vQzVDXhU4QtJyVvq9Y1sAeL6bMO1WY9Rqfuj0K6B1sWoUZOFrHdqv60cEnuR8GVWg==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDkMNAwdIZ1cNqzFvdqSbH_NRYYO0jWx4GOfUn29DVg910VH1z_eyztdeVcv4bxgYD3y8ZGTGfkxUQyhZruYICB-FA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkMNoRf6A3ySmmsWyjAYljqpbQx5SfUtn5J_IpmV0cRi5CJvPMqZD1P7wL8WGWLaa7WshAST35xn5-LXfLaVbGhYA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkMbPjQ7HX8oWV7jj1ISoH54_7ED3GmrJjuMfjSPf1cmHrRhCYxyM2tsXFFiyEqJoQ8BnQqXt9fiUlfXWAtJq088w==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkMMcEFFoCtHHEAkDOFVMtqHVD6VTRVFV64iWpIgpBYUsy8cjRIECtS8qtCMNhXJM7DW0OjU0LYhHswtlfrDLNIHQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkMfuJ9TC81M2uXGx4XioqSnC9s0VcRSk9y6GDlf_jxoyy-ovo1iwg8r8OUz2UyQY7WqhHf4R4N1OG9axIRGkIYmg==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDkyXbUR3KEJMjAG7M58zCdRA_b_TECSX9Ux9ZLBdnqgp76b6csZeaL61RHsvgdgNocem6nsF3u52FLVQl0wkYL3dQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDky51NPI0NSi7w-pyFrGfGSV2Ultb-QOZJSBx70XKTmlpgbJqs-GdmJ-Q4tppl5E66_10mRYoyjWeY8P1JzRwPtyw==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkyyo4wgA_tQAuL4PBIpufjiddpTPDL9VeJT9D4kzk6RjIunNo_AqTwxrXJ-FK5Doamfc1ph2thuVrkxO9_8-HakA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkyt8KS19BrKYEKVWW3KeRvpJCR6j1k9B-0IxaS-5EYniPpEBPhglxHdDkxyCeZAGqOFdym17X_ab7wE-Xcn__xgA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDkyoEmGhGn6X5Mb0a2KIutYKdl9jqmBTXTyS3vjmDKvHwsl56vCwJ_39IJqGv0KrFz2FX095QUSCNQ-nCS6xZ1lRw==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDmUe3eLl4H6YLBc1VEtJShGqSDtLZeFVfwlm2AvGiMqhVI0K_iA4N1q1LEu3GLHK6jLX8j3Djx9qaM2OHfLTv4ImA==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDmUhtF-96H5ZAi3Ro9l4bViohqTDaRP2ZtTk3wolHKFdkHMyPkMWpXy1R94pBNHdA6hhjHBDGItVMADLv2ZEmFqDw==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDmU9JHb_krh3d-gj9twSgwlKrBfaHHjs-Qv0HB8RaNdZZ0Ztunia59QElWa5Jk9EwPNAg7c5jb_tTltkYkVpjTT9Q==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDmU3Vsk99Wnkxo03vQVtbALL3P9HynbAzkJMiXvmX8JG08yu4xMi96YIEELRpbqk7wb1VTExtDHtbyjFQXVDOIb6w==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDmU7_Hrs5jm_Y4h7VL0aKz4MuPXktr6XDBLqIVmnWtozvDbOCukZQSgQz5PnNxWPCokb1HXZ4EIIWuahd3AT64ybg==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gAAAAABhWDnGa0YHTkv1VXM5BsYVw68C-VfSyFp9q5p3aU6wyus1fzta-xfNRQF4lI-N5hzvEjShv2sYWrBSfSl2s4b8f4hDIQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDnGlXHA31rr0Hs7zU_daF51zDtNSKEdtqCjrbhH9P1_U4n9AXn_IDKpRrxPn_r6yNTPUE1CVClOPqRCosYkIKT6FQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDnGeg7sWOwNrAHVkxZlPkyqJBcc-HI1QqU01mEWHv-LWsYo-tKUUNldMrz7yeAZTmtQB0RMsN-pdERZmrEd2ylmBg==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDnGnnqaJ53FvFpv4rkkoMpTzm398pGEHad6cMde9VZ4RY1xqeJf4sGfMBYSbQHW849DBSlQVhKn8V9samDXisEuOQ==&lt;/td&gt;
&lt;td&gt;gAAAAABhWDnGm-l6Bn_IlD_SCJhHvR_FaD4asZaEp1oJ_pAXPIB1B74hpglV7Ajl-ARaQlX0kcaJjuy3w9tXKNlNFvoY5nWb4Q==&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Printing Output:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4sHuhApl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/492g6u48x9yadhzwomsh.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4sHuhApl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/492g6u48x9yadhzwomsh.JPG" alt="print"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#inference"&gt;
  &lt;/a&gt;
  Inference
&lt;/h2&gt;

&lt;p&gt;Hence, the blog concludes with the demonstration of understanding of Data base encryption using Python and SQLite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;By Akash Srivastava&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do Follow me on&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/akash-s-233ab3160/"&gt;[LinkedIn]&lt;/a&gt;&lt;a href="https://github.com/AkashSrivastava1721"&gt;[GitHub]&lt;/a&gt;&lt;a href="https://twitter.com/AkashSr1234"&gt;[Twitter]&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>sqlite</category>
      <category>hacktoberfest</category>
      <category>security</category>
    </item>
    <item>
      <title>Rethinking Gameboards</title>
      <author>Toby Parent</author>
      <pubDate>Mon, 04 Oct 2021 02:28:16 +0000</pubDate>
      <link>https://dev.to/parenttobias/rethinking-gameboards-3cin</link>
      <guid>https://dev.to/parenttobias/rethinking-gameboards-3cin</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-plan"&gt;
  &lt;/a&gt;
  The Plan
&lt;/h2&gt;

&lt;p&gt;This is an evolution of an idea. At first, I wanted to see if it would be possible to use grid-areas to set up a minimalist chessboard (both positioning and movement), and it was. Then, I got into reading Eric Elliott's &lt;strong&gt;Composing Software&lt;/strong&gt;, and I really wanted to toy with the idea of functionally composed elements, so the pieces on the board happened. Then I had a conversation on The Odin Project about defining &lt;em&gt;interfaces&lt;/em&gt; for factory functions, and the Gameboard as a whole became a factory using the pieces' interface methods. It didn't happen all at once, and I won't write about it all at once.&lt;/p&gt;

&lt;p&gt;But if you'd like to see this thing as it stands at this point in its evolution, take a look at &lt;a href="https://replit.com/@TobiasParent/BonyEvilSquares"&gt;the repl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I plan on a three- or four-part series, depending. This one explains the theory behind the board. The next should cover the Piece factory, which covers the generic methods all pieces share. The third will explain some of how the moves are handled for each piece, exploring composed functions along the way, and finally getting into how the whole thing plays together.&lt;/p&gt;

&lt;p&gt;I do hope you enjoy the ride!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-what"&gt;
  &lt;/a&gt;
  The what
&lt;/h2&gt;

&lt;p&gt;Often, when we are going through online curricula, there is a project involving building a game. Might be tic-tac-toe, might be chess, might be Battleship, but a game design happens. In this case, we'll build a chessboard.&lt;/p&gt;

&lt;p&gt;Being fearless devs, we dive into coding, building an HTML mockup and figuring our CSS, and let's see what it might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'gameboard'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'cell'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'cell'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- and repeat that to make an eight-by-eight... --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
html&lt;br&gt;
And the css:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.gameboard&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.cell&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12.5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12.5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;silver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But at that point, we have to think about this: the cells have to alternate color. We could use a css rule, something like &lt;code&gt;:nth-of-child()&lt;/code&gt; with some funky css magic to color alternating squares, but we have an easier solution: we can simply make the board image a background on the &lt;code&gt;.gameboard&lt;/code&gt;, and make those cells the same size as our image cells!&lt;/p&gt;

&lt;p&gt;At this point, I had to stop. We &lt;strong&gt;could&lt;/strong&gt; do this. This works, and it's the most common way. Make all the cells contained within the board, and set the pieces on the particular cell div as needed. Works fine.&lt;/p&gt;

&lt;p&gt;But I don't particularly like it. It's not the way a chessboard works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-why"&gt;
  &lt;/a&gt;
  The why
&lt;/h2&gt;

&lt;p&gt;Let's imagine we just went to the game store, bought a new chess set. When we open it, do we have a board, 32 chess pieces, and 64 cells? No, we do not. We have a board, and we have the pieces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So why do we feel we need to code those cells&lt;/strong&gt;? &lt;/p&gt;

&lt;p&gt;We might see it as reasonable to have the cells to handle the click in a particular one, but most of us will likely use event delegation, so the clicks are happening on the board, not the cell.&lt;/p&gt;

&lt;p&gt;Perhaps we see it as reasonable to have the cells there, in order to appropriately position the chess pieces. And this, right here, is why I want to write this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-how"&gt;
  &lt;/a&gt;
  The how
&lt;/h2&gt;

&lt;p&gt;CSS3 gave us a great many power-tools, and we don't always use them to their fullest. But this article is about using one of them in ways that can simplify things like, for example, gameboard development.&lt;/p&gt;

&lt;p&gt;I'm talking about grids. And in particular, about the &lt;code&gt;grid-area&lt;/code&gt; css rule. Consider this HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chessboard"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece rook black queens"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece knight black queens"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece bishop black queens"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece queen black"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece king black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece bishop black kings"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece knight black kings"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece rook black kings"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece rook white queens"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece knight white queens"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece bishop white queens"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece queen white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece king white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece bishop white kings"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece knight white kings"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chess-piece rook white kings"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it. It contains everything we need to make a playable chessboard (leaving off the pawns for brevity, but the idea remains). We have a board, which contains the pieces. The pieces have class names that are pretty descriptive, we know which one's the "black queen's rook" at a glance.&lt;/p&gt;

&lt;p&gt;Now, for the board's CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.chessboard&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('./quad-grid.svg')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* This is the bit to watch! */&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12.5%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12.5%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s1"&gt;"A0 B0 C0 D0 E0 F0 G0 H0"&lt;/span&gt;
    &lt;span class="s1"&gt;"A1 B1 C1 D1 E1 F1 G1 H1"&lt;/span&gt;
    &lt;span class="s1"&gt;"A2 B2 C2 D2 E2 F2 G2 H2"&lt;/span&gt;
    &lt;span class="s1"&gt;"A3 B3 C3 D3 E3 F3 G3 H3"&lt;/span&gt;
    &lt;span class="s1"&gt;"A4 B4 C4 D4 E4 F4 G4 H4"&lt;/span&gt;
    &lt;span class="s1"&gt;"A5 B5 C5 D5 E5 F5 G5 H5"&lt;/span&gt;
    &lt;span class="s1"&gt;"A6 B6 C6 D6 E6 F6 G6 H6"&lt;/span&gt;
    &lt;span class="s1"&gt;"A7 B7 C7 D7 E7 F7 G7 H7"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So this sizes the board, places the background image in which gives us the actual board appearance, and sets up the css grid. The grid is set up with named &lt;code&gt;grid-template-areas&lt;/code&gt;, named using chess notation.&lt;/p&gt;

&lt;p&gt;And the fun part? The pieces are placed using that same chess notation!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/****
 * There is some sizing and styling of the pieces,
 *   but this is mostly about positioning.
 ****/&lt;/span&gt;

&lt;span class="c"&gt;/* Black pieces */&lt;/span&gt;
&lt;span class="nc"&gt;.black.queens.rook&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.black.queens.knight&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;B7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.black.queens.bishop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;C7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.black.queen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;D7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.black.king&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;E7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.black.kings.bishop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;F7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.black.kings.knight&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;G7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.black.kings.rook&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c"&gt;/* White side pieces */&lt;/span&gt;
&lt;span class="err"&gt;.white.queens.rook&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.white.queens.knight&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;B0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.white.queens.bishop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;C0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.white.queen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;D0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.white.king&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;E0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.white.kings.bishop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;F0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.white.kings.knight&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;G0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.white.kings.rook&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;H0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So each piece is positioned on the board by an initial &lt;code&gt;grid-area&lt;/code&gt;. And further, we can later do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.white.kings.knight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gridArea&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;F2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that moves the piece on the board. No worrying about calculating offsets or moving the piece, simply tell it, by css, where to move.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
    </item>
  </channel>
</rss>
