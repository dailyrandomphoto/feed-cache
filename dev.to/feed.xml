<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Use CURL to Send API Requests?</title>
      <author>Pramod Dutta</author>
      <pubDate>Mon, 19 Apr 2021 15:25:47 +0000</pubDate>
      <link>https://dev.to/promode/how-to-use-curl-to-send-api-requests-126m</link>
      <guid>https://dev.to/promode/how-to-use-curl-to-send-api-requests-126m</guid>
      <description>&lt;p&gt;We are going to lean how you can make the HTTP Method GET, POST, PUT, PATCH and Delete Request with CURL with examples.&lt;/p&gt;

&lt;p&gt;❤️ MindMap Download - &lt;a href="https://sdet.live/notes"&gt;https://sdet.live/notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test a REST API with curl supports over 200 command-line options. We can have zero or more of them to accompany the URL in the command.&lt;/p&gt;

&lt;p&gt;Before we use it for our purposes, let's take a look at two that would make our lives easier.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fVmHqtjFzbA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-curl"&gt;
  &lt;/a&gt;
  What is CURL?
&lt;/h2&gt;

&lt;p&gt;curl is used in command lines or scripts to transfer data. curl is also used in cars, television sets, routers, printers, audio equipment, mobile phones, tablets, settop boxes, media players and is the Internet transfer engine for thousands of software applications in over ten billion installations.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>testing</category>
      <category>beginners</category>
      <category>curl</category>
    </item>
    <item>
      <title>Is "this" really that complicated in JavaScript?</title>
      <author>Chuck Choi</author>
      <pubDate>Mon, 19 Apr 2021 15:03:31 +0000</pubDate>
      <link>https://dev.to/chuckchoiboi/is-this-really-that-complicated-in-javascript-4o3h</link>
      <guid>https://dev.to/chuckchoiboi/is-this-really-that-complicated-in-javascript-4o3h</guid>
      <description>&lt;p&gt;&lt;code&gt;this&lt;/code&gt; keyword can be one of the most confusing monsters in JavaScript. Especially those who didn't learn JavaScript as their first programming language find it pretty confusing as it behaves differently in JS compared to the other languages. And many programmers rely on library like jQuery, so they learn how to use it but don't get to fully comprehend its fundamentals. Well, let me show you how &lt;code&gt;this&lt;/code&gt; isn't as confusing as you think.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-this-in-javascript"&gt;
  &lt;/a&gt;
  What is "this" in JavaScript?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"&gt;MDN Web Doc&lt;/a&gt; explains that &lt;code&gt;this&lt;/code&gt; is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A property of an execution context&lt;/strong&gt; (global, function or eval) that, in non–strict mode, is always a reference to an object and in strict mode can be any value. In most cases, &lt;strong&gt;the value of &lt;code&gt;this&lt;/code&gt; is determined by how a function is called&lt;/strong&gt; (runtime binding). It can't be set by assignment during execution, and it may be different each time the function is called.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To put it simply, &lt;strong&gt;&lt;code&gt;this&lt;/code&gt; is a keyword used to reference the execution context.&lt;/strong&gt; We could think of it as "whoever that calls the function." So &lt;code&gt;this&lt;/code&gt; typically refers to the object that is invoking its method. In JavaScript, any value can be determined when it is defined or when function is called. The latter is the case for &lt;code&gt;this&lt;/code&gt; keyword usually in the case of &lt;strong&gt;Implicit binding&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;Implicit binding&lt;/strong&gt;, the value of &lt;code&gt;this&lt;/code&gt; is determined based on the execution context. But &lt;code&gt;this&lt;/code&gt; behaves differently if the function being invoked as an &lt;strong&gt;arrow function&lt;/strong&gt; or if you are using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"&gt;strict mode&lt;/a&gt; introduced in ES5.  And there's &lt;strong&gt;Explicit binding&lt;/strong&gt; which you can explicitly bind &lt;code&gt;this&lt;/code&gt; keyword to an object you pass as an argument for &lt;code&gt;call()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, and &lt;code&gt;apply()&lt;/code&gt; methods. Let's dive in deeper to each of them.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-object-method"&gt;
  &lt;/a&gt;
  1. Object Method
&lt;/h3&gt;

&lt;p&gt;Take a look at the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Slim Shady&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;myNameIs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myNameIs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// prints 'Slim Shady'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code's &lt;code&gt;hi&lt;/code&gt; object has a method &lt;code&gt;myNameIs&lt;/code&gt; which logs &lt;code&gt;myName&lt;/code&gt; of &lt;code&gt;this&lt;/code&gt; in the console. When &lt;code&gt;hi&lt;/code&gt; object invokes its method like the following &lt;code&gt;hi.myNameIs()&lt;/code&gt;, the object who called the function is &lt;code&gt;hi&lt;/code&gt; which makes &lt;code&gt;this&lt;/code&gt; to be implicitly bound to &lt;code&gt;hi&lt;/code&gt; object. Hence, the console will log &lt;code&gt;myName&lt;/code&gt; of the object &lt;code&gt;'Slim Shady'&lt;/code&gt;. A simple way to look at it is that &lt;strong&gt;whatever is on the left side of a dot notation of a method being invoked is the object that &lt;code&gt;this&lt;/code&gt; will be referring to.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;How about this example though:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;whatIsThis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;whatIsThis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// prints Window {...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hmm... we just discussed that an easy way to understand &lt;code&gt;this&lt;/code&gt; keyword in object method invocation is paying attention to the left side of dot notation. But this time, &lt;code&gt;whatIsThis&lt;/code&gt; is a function defined using function declaration, and we can execute it without an object which logs &lt;code&gt;this&lt;/code&gt; as the &lt;code&gt;window&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Sounds pretty confusing right? Well, when we declare a function, we are making it a global function available to the global object, so the function's containing scope is the global object &lt;code&gt;Window&lt;/code&gt;. Another way to execute &lt;code&gt;whatIsThis&lt;/code&gt; is: &lt;code&gt;window.whatIsThis()&lt;/code&gt;. Look at that, &lt;code&gt;window&lt;/code&gt; is on the left side of &lt;code&gt;whatIsThis()&lt;/code&gt;! This brings me to the next point -- &lt;code&gt;this&lt;/code&gt; in global context.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-global-context"&gt;
  &lt;/a&gt;
  2. Global Context
&lt;/h3&gt;

&lt;p&gt;As we discussed, when a method inside an object is executed by the object, &lt;code&gt;this&lt;/code&gt; refers to the object. But what happens if I try to simply log &lt;code&gt;this&lt;/code&gt; into console? Give it a try in your browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints Window {...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks like &lt;code&gt;this&lt;/code&gt; refers to &lt;code&gt;window&lt;/code&gt; object. By default, &lt;code&gt;this&lt;/code&gt; refers to the global object (Window in browser environment). If we want to understand why it is, ask yourself (or Google) what the &lt;code&gt;window&lt;/code&gt; object is. If we take a look at &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Global_object"&gt;MDN Web Docs&lt;/a&gt; again, it explains:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The window object is the Global Object in the Browser. &lt;strong&gt;Any Global Variables or Functions can be accessed as properties of the window object.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we add &lt;code&gt;this&lt;/code&gt; to your browser console, your global environment Window is executing the expression &lt;code&gt;this&lt;/code&gt;, so the window object is referred in this global context. &lt;/p&gt;

&lt;p&gt;Back to the Slim Shady example, here's a function created using the &lt;code&gt;myNameIs&lt;/code&gt; method in &lt;code&gt;hi&lt;/code&gt; object earlier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Slim Shady&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;myNameIs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hisNameIs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myNameIs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;hisNameIs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// prints undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Interesting. &lt;code&gt;hisNameIs&lt;/code&gt; function logged &lt;code&gt;undefined&lt;/code&gt; in the console. Let's try to understand what happened at the line &lt;code&gt;var hisNameIs = hi.myNameIs&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;First, &lt;code&gt;hi.myNameIs&lt;/code&gt; is a method -- a property containing a function definition. We simply declared a &lt;strong&gt;global function&lt;/strong&gt; named &lt;code&gt;hisNameIs&lt;/code&gt; by using &lt;code&gt;var&lt;/code&gt; and initialized it with the function definition from &lt;code&gt;hi&lt;/code&gt; object passed.&lt;/p&gt;

&lt;p&gt;Second, global functions are stored as properties in the &lt;code&gt;window&lt;/code&gt; object. When we invoke the global function &lt;code&gt;hisNameIs()&lt;/code&gt;, it is the same as &lt;code&gt;window.hisNameIs()&lt;/code&gt;. The window is the object that is executing its method &lt;code&gt;hisNameIs&lt;/code&gt;, so &lt;code&gt;this&lt;/code&gt; is now referring to the &lt;code&gt;window&lt;/code&gt; object. window object does not have a property named &lt;code&gt;myName&lt;/code&gt;, so it will return undefined.&lt;/p&gt;

&lt;p&gt;In conclusion, &lt;strong&gt;&lt;code&gt;this&lt;/code&gt; will refer to the global object in global context.&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-strict-mode"&gt;
  &lt;/a&gt;
  3. Strict Mode
&lt;/h3&gt;

&lt;p&gt;JavaScript was first introduced in 1995 as &lt;em&gt;Mocha&lt;/em&gt; which took 10 days to develop by a Netscape programmer named &lt;strong&gt;Brandon Eich&lt;/strong&gt;. It would be surprising if the language came out to be perfect in 10 days of development right? The language has evolved to today's version 6 (ES6), with the language designers' attempt to correct the flaws in the past versions. Its legacy features were not possible to be removed in order to maintain the backward compatibility, which is why &lt;em&gt;strict mode&lt;/em&gt; was introduced in ES5 to opt in to correct the early language flaws. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;this&lt;/code&gt; keyword is one of them. It behaves differently when you opt into &lt;em&gt;strict mode&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;whatIsThis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;whatIsThis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// prints undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;em&gt;strict mode&lt;/em&gt;, &lt;code&gt;this&lt;/code&gt; keyword will default to undefined in function invocation. It is likely that &lt;code&gt;this&lt;/code&gt; keyword was not meant to point to the &lt;code&gt;window&lt;/code&gt; object, as you can simply use &lt;code&gt;window&lt;/code&gt; keyword to do so.&lt;/p&gt;

&lt;p&gt;In ES5, &lt;code&gt;bind()&lt;/code&gt; method was introduced to explicitly set the function's &lt;code&gt;this&lt;/code&gt; regardless of how it is called. You can pass an object as an argument when using &lt;code&gt;bind()&lt;/code&gt; method, and the function's &lt;code&gt;this&lt;/code&gt; keyword will refer to the object no matter how the function is invoked. Bringing back the code from earlier using &lt;code&gt;bind()&lt;/code&gt; method this time, we can now create a new function with object passed explicitly like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Slim Shady&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;myNameIs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hisNameIs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myNameIs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;hisNameIs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// prints Slim Shady&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Boom! Even with the strict mode, &lt;code&gt;hisNameIs&lt;/code&gt; function's &lt;code&gt;this&lt;/code&gt; will refer to the &lt;code&gt;hi&lt;/code&gt; object passed no matter what. &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;apply()&lt;/code&gt; are basically the same which you can pass additional arguments to the function. The three methods are slightly different which you can read more about in this &lt;a href="https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb"&gt;blog post&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-arrow-function"&gt;
  &lt;/a&gt;
  4. Arrow function
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;this&lt;/code&gt; inside an &lt;strong&gt;arrow function&lt;/strong&gt; behaves a bit differently compared to the one inside a function declaration or a function expression. Arrow function was introduced in ES6 as an alternative to a traditional way of defining function. Let's compare these two objects using the different versions of function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using regular function as callback inside forEach()&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;oldPhone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chuck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Facebook&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YouTube&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Uber&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;useApps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is using &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="c1"&gt;// this refers to the window object&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;oldPhone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useApps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// prints undefined is using Facebook&lt;/span&gt;
&lt;span class="c1"&gt;// prints undefined is using YouTube&lt;/span&gt;
&lt;span class="c1"&gt;// prints undefined is using Uber&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;oldphone.useApps&lt;/code&gt; function iterates each of the &lt;code&gt;apps&lt;/code&gt; using &lt;code&gt;forEach&lt;/code&gt; with regular function passed as a callback function. However, the callback function inside &lt;code&gt;forEach&lt;/code&gt; method does not bind to the original object. Instead, it will bind to the global &lt;code&gt;window&lt;/code&gt; object thus &lt;code&gt;this.owner&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This could be very inconvenient if we were doing something similar as a &lt;code&gt;class&lt;/code&gt;. There are two ways to fix it though, &lt;code&gt;forEach()&lt;/code&gt; method takes an optional argument &lt;code&gt;thisArg&lt;/code&gt; in addition to the callback function like this: &lt;code&gt;arr.forEach(callback[, thisArg])&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Or we can use an &lt;strong&gt;arrow function&lt;/strong&gt; as a callback to utilize its &lt;em&gt;lexical scoping&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using arrow function as callback inside forEach()&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newPhone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chuck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Facebook&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YouTube&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Uber&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;useApps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is using &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;newPhone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useApps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// prints Chuck is using Facebook&lt;/span&gt;
&lt;span class="c1"&gt;// prints Chuck is using YouTube&lt;/span&gt;
&lt;span class="c1"&gt;// prints Chuck is using Uber&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! This time the callback function's &lt;code&gt;this&lt;/code&gt; referred to &lt;code&gt;newPhone&lt;/code&gt;, and logged &lt;code&gt;this.owner&lt;/code&gt; as &lt;code&gt;'Chuck'&lt;/code&gt;. Arrow function allows you to write functions in a cleaner way, and they have &lt;strong&gt;lexical scope&lt;/strong&gt; I mentioned earlier which means that they will inherit the scope from its parent. &lt;/p&gt;

&lt;p&gt;The callback function nested inside the &lt;code&gt;forEach&lt;/code&gt; method above inherited the scope from its parent &lt;code&gt;useApps&lt;/code&gt; which is &lt;code&gt;newPhone&lt;/code&gt; object. Because of this nature, &lt;strong&gt;The value of &lt;code&gt;this&lt;/code&gt; inside arrow functions' is determined when the arrow function is defined&lt;/strong&gt; unlike the typical situations from earlier. I personally think that &lt;code&gt;this&lt;/code&gt; inside an arrow function is the most confusing part of &lt;code&gt;this&lt;/code&gt; keyword, but it simply inherits the scope from its parent.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;call()&lt;/code&gt;, and &lt;code&gt;apply()&lt;/code&gt; are not compatible with arrow functions. Arrow functions will inherit the scope from its parent regardless.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To conclude, let's summarize how &lt;code&gt;this&lt;/code&gt; works in JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; is a keyword used to reference the execution context&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;method invocation&lt;/strong&gt;, the object that is invoking the method would be the execution context &lt;code&gt;this&lt;/code&gt; will refer to&lt;/li&gt;
&lt;li&gt;In global context like regular function invocation, &lt;code&gt;this&lt;/code&gt; will default to the global object&lt;/li&gt;
&lt;li&gt;In &lt;em&gt;strict mode&lt;/em&gt;, &lt;code&gt;this&lt;/code&gt; keyword will default to undefined in regular function invocation.&lt;/li&gt;
&lt;li&gt;You can use &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;call()&lt;/code&gt;, or &lt;code&gt;apply()&lt;/code&gt; to explicitly bind an object to a function&lt;/li&gt;
&lt;li&gt;An arrow function will inherit the scope from its parent, so &lt;code&gt;this&lt;/code&gt; inside an arrow function will follow its parent's&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;call()&lt;/code&gt;, and &lt;code&gt;apply()&lt;/code&gt; do not work for arrow functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this was helpful resource for you to understand how &lt;code&gt;this&lt;/code&gt; works in JavaScript. Feel free to comment below if you have any questions or notice any inaccurate information and I will respond as soon as possible :)&lt;/p&gt;

&lt;p&gt;Follow me on Clubhouse &lt;a class="mentioned-user" href="https://dev.to/chuckchoiboi"&gt;@chuckchoiboi&lt;/a&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>oop</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I got a full-time development job as a self-taught developer at 18 years old</title>
      <author>Jack Kelly</author>
      <pubDate>Mon, 19 Apr 2021 14:33:33 +0000</pubDate>
      <link>https://dev.to/jackrkelly/how-i-got-a-full-time-development-job-as-a-self-taught-developer-at-18-years-old-4iph</link>
      <guid>https://dev.to/jackrkelly/how-i-got-a-full-time-development-job-as-a-self-taught-developer-at-18-years-old-4iph</guid>
      <description>&lt;p&gt;My name is Jack Kelly, I am an 18-year-old self-taught developer based out of Kansas. Since 2 years ago my primary goal has been to get a full-time job as a self-taught developer with no college degree. I was told by countless people that I would have no chance without a degree and that it wouldn't be possible.&lt;/p&gt;

&lt;p&gt;My web development journey all started once I got to high school, there is a multi-media program at my school and there are 4 different strands, one of those being web design. Web design really sparked my interest in web development but this class was more for content management systems and UI. I was more interested in the development side of things, so my awesome web teacher allowed me to take my own path.&lt;/p&gt;

&lt;p&gt;I started down my own path, I was following many curriculums such as FreeCodeCamp or some courses on Scrimba to learn about certain technologies. I spent most of my weekends learning and I think I forgot what friends and fun were. This is one thing I will say, though my situation worked out from my hard work. Make sure you still enjoy life, don't let the process take over your life. &lt;/p&gt;

&lt;p&gt;In my sophomore year of high school, I told my web-design teacher that my goal was to get a job out of high school. Now we look back and laugh at this, but he probably thought I had ambitious goals, but regardless he supported me and my goals. &lt;/p&gt;

&lt;p&gt;In my junior year of high school, I was at a hackathon for my school and there were some engineers from Cerner who told me I would need a college degree if I wanted to work there. This was really demotivating and it turned out to be true, this company did not accept self-taught developers with no degree, but it didn't matter.&lt;/p&gt;

&lt;p&gt;Then an opportunity came up through my school for my senior year that there was a Software Engineering internship at Cerner. I saw this opportunity and went ahead and applied for it with my fingers crossed as this would be a huge opportunity for me. &lt;/p&gt;

&lt;p&gt;I went into the interview super nervous, and actually, the interview was more difficult than I expected. I got asked questions about data structures and projects I had worked on. Bear in mind this is a high school level internship.&lt;/p&gt;

&lt;p&gt;It ended up working out, I got the internship! I was super excited to get this opportunity, this is around the time covid-19 started so I didn't get to work in the awesome office they had. See the image below of where I didn't get to work in person haha.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CND8ZQEq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djhpdbet7bi0zpdubi11.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CND8ZQEq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djhpdbet7bi0zpdubi11.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The internship started, then I got to work with some pretty fun technologies and this experience introduced me to some enterprise tools such as JIRA and Jenkins. This is one thing that self-taught developers are missing when it comes to getting a job, a lot of companies are expecting you have experience with CI/CD tools and task management tools.&lt;/p&gt;

&lt;p&gt;I also worked with tools I already had experience with such as React, Jest, and Javascript. I got to learn Ruby and Ruby on Rails, Groovy, and a couple of other technologies which was a great experience.&lt;/p&gt;

&lt;p&gt;This internship was great, but it was still an internship. I got in contact with my team lead and asked if it was possible to get a full-time position at Cerner with no degree. And the engineers at Cerner which I met at the hackathon were right, you need a degree to work there full-time. I started applying to jobs and was interviewing like crazy. &lt;/p&gt;

&lt;p&gt;Interviewing is definitely a skill, you're not going to start interviewing and be a pro your first one. I bombed a couple of interviews but started to understand the game. I had 15 interviews one week, it was getting tiring. &lt;/p&gt;

&lt;p&gt;But at last, I finally got an offer from Yellow as a Web Developer I. The director thought my journey as a self-taught developer was cool and didn't care that I didn't have a computer science degree. &lt;/p&gt;

&lt;p&gt;Since I joined Yellow, I have been interviewing candidates. Including senior candidates as well which has been a great but crazy experience. I wouldn't have expected to be the interviewer so quickly after being the interviewee. &lt;/p&gt;

&lt;p&gt;I have been learning so much in my new position and while interviewing candidates. I have a running list of "things I don't know". This list has been ever-growing and it has been great! I think my experience interviewing will be so much better having been on the other side and after I have learned so much more.&lt;/p&gt;

&lt;p&gt;Overall, things worked out. My hard work paid off and I got a full-time job before graduating high school. I had to trudge through the mud a bit with school, my internship, coding in my free time, and applying to jobs. But it was all worth it and I couldn't be happier.&lt;/p&gt;

&lt;p&gt;My first closing piece of advice is very cliche, but it couldn't be more true. People will tell you that you can't do something, which is hard. But there are some things that just haven't been done often and no one is familiar with it. My parents were quite nervous about the path I was taking and there was a lot of uncertainty. &lt;/p&gt;

&lt;p&gt;And even once you land that job or reach your goal, people may be jealous and that could bring a lot of negativity. You just have to be there for yourself and understand what you have done and how impressive that is. &lt;/p&gt;

&lt;p&gt;My second closing piece of advice is to not give up, again very cliche. But just before I got the job offer from Yellow, I was on the verge of giving up. I felt like I had worked so hard and it had amounted to nothing so far, the feeling of relief when I got that offer, started my first day, and got the first paycheck. It finally felt real, just imagine if I gave up weeks before.&lt;/p&gt;

&lt;p&gt;Thanks for reading this article, hopefully it was helpful for some of you. If any self-taught developers or any aspiring self-taught developers have any questions or would like some advice, I would be more than happy to help out. Feel free to reach out on discord (JackRKelly#7129) or somewhere else.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The React Router Cheatsheet: Everything You Should Know</title>
      <author>Reed Barger</author>
      <pubDate>Mon, 19 Apr 2021 14:30:14 +0000</pubDate>
      <link>https://dev.to/reedbarger/the-react-router-cheatsheet-everything-you-should-know-23h5</link>
      <guid>https://dev.to/reedbarger/the-react-router-cheatsheet-everything-you-should-know-23h5</guid>
      <description>&lt;p&gt;If you're building React applications for the web, you're going to need to use a dedicated router to display pages and navigate your user around them.&lt;/p&gt;

&lt;p&gt;That's why today we're going to go over the most popular and most powerful router for React applications--React Router.&lt;/p&gt;

&lt;p&gt;We're going to go over 11 of the essential features you need to know if you're using React Router in your projects today, specifically for the web using the package &lt;code&gt;react-router-dom&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-your-own-copy%E2%80%AC"&gt;
  &lt;/a&gt;
  Want Your Own Copy?‬ 📄
&lt;/h2&gt;

&lt;p&gt;*&lt;strong&gt;&lt;em&gt;&lt;a href="http://bit.ly/react-router-cheatsheet"&gt;Click here to download the cheatsheet in PDF format&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;*(it takes 5 seconds).&lt;/p&gt;

&lt;p&gt;It includes all of the essential information here as a convenient PDF guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-react-router"&gt;
  &lt;/a&gt;
  Install React Router
&lt;/h2&gt;

&lt;p&gt;The very first step to using React Router is to install the appropriate package.&lt;/p&gt;

&lt;p&gt;They are technically three different packages: React Router, React Router DOM, and React Router Native.&lt;/p&gt;

&lt;p&gt;The primary difference between them lies in their usage. React Router DOM is for web applications and React Router Native is for mobile applications made with React Native.&lt;/p&gt;

&lt;p&gt;The first thing that you'll need to do is install React Router DOM using npm (or yarn):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#basic-router-setup"&gt;
  &lt;/a&gt;
  Basic Router Setup
&lt;/h2&gt;

&lt;p&gt;Once it's installed, we can bring in our first component which is required to use React router and this is called BrowserRouter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are multiple types of routers that &lt;code&gt;react-router-dom&lt;/code&gt; provides aside from BrowserRouter which we won't go into. It's a common practice to alias (rename) BrowserRoute as simply 'Router' when it is imported.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we want to provide routes within our entire application it needs to be wrapped around our entire component tree. That's why you will usually see it wrapped around or within the main app component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* routes go here, as children */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the primary function of the BrowserRouter: to be able to declare individual routes within our application.&lt;/p&gt;

&lt;p&gt;Note that any router-specific data cannot be accessed outside of the Router component. For example, we cannot access history data outside of the router (i.e. with the &lt;code&gt;useHistory&lt;/code&gt; hook) and we cannot create a Route outside of a Router component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#route-component"&gt;
  &lt;/a&gt;
  Route Component
&lt;/h2&gt;

&lt;p&gt;The next component is the Route component.&lt;/p&gt;

&lt;p&gt;We declare routes within the Router component as children. We can declare as many routes as we like and we need to provide at least two props to each route, &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;component&lt;/code&gt; (or &lt;code&gt;render&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;about&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;  &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; prop specifies on what path of our app a given route is located.&lt;/p&gt;

&lt;p&gt;For an about page, for example, we might want that route to be accessible on the path '/about'.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;render&lt;/code&gt; or &lt;code&gt;component&lt;/code&gt; prop are used to display a specific component for our path.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;component&lt;/code&gt; props can only receives a reference to a given component, whereas &lt;code&gt;render&lt;/code&gt; is more typically used for applying some conditional logic to render one route one component or another. For render you can either use a reference to a component, or use a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;about&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's worth noting that you can potentially drop the &lt;code&gt;render&lt;/code&gt; or &lt;code&gt;component&lt;/code&gt; prop entirely and use the component that you want to associate with a given route as a child of Route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, if want a component (such as a navbar) to be visible on every page, put it still within the browser router, but above (or below) the declared routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// visible on every page&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;about&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#switch-component"&gt;
  &lt;/a&gt;
  Switch Component
&lt;/h2&gt;

&lt;p&gt;When we get begin to add multiple routes, we'll notice something strange.&lt;/p&gt;

&lt;p&gt;Let's say we have a route for the home page and about page. Even though we specify two different paths, '/' and '/about', when I visit the about page we'll see both the home and the about components.&lt;/p&gt;

&lt;p&gt;We can fix this with the exact prop, on the home route to make sure that our router matches exactly the path '/' instead of '/about':&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it comes to switching between different routes that our router should show there is in fact a dedicated component that you should be using if you have multiple routes within your router and that is the Switch component.&lt;/p&gt;

&lt;p&gt;The switch component should be included within the router and we can place all of our routes within it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The switch component looks through all of its child routes and it displays the first one whose path matches the current url.&lt;/p&gt;

&lt;p&gt;This component is what we want to use in most cases for most applications, because we have multiple routes and multiple plate pages in our app but we only want to show one page at a time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If for some reason you do want multiple pages to be displayed at the same time, you might consider not using the switch component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#404-route"&gt;
  &lt;/a&gt;
  404 Route
&lt;/h2&gt;

&lt;p&gt;If we attempt to go to a path that doesn't exist in our application, what are we going to see?&lt;/p&gt;

&lt;p&gt;We're not going to see anything if we don't have a route corresponding to that. How do we make a catch-all route?&lt;/p&gt;

&lt;p&gt;If a user attempts to go to a page for which we don't have a defined route, we can create a route and then set the path to an asterisk *:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;landed&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;doesn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t exist&amp;lt;/&amp;gt;;
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will match any attempt to visit a page that doesn't exist and we can connect it to a not found component to tell our users have "landed on a page that doesn't exist."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#link-component"&gt;
  &lt;/a&gt;
  Link Component
&lt;/h2&gt;

&lt;p&gt;Let's say that within our NavBar, we actually want to create some links so we can move around our application more easily instead of having to change the url manually in the browser.&lt;/p&gt;

&lt;p&gt;We can do so with another special component from React Router DOM called the Link component. It accepts the &lt;code&gt;to&lt;/code&gt; prop, which specifies where we want the link to navigate our user to. In our case, we might have a home and about link:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The link component allows us to provide some inline styles just like any standard React component. It also gives us a helpful &lt;code&gt;component&lt;/code&gt; prop, so we can set our link as our own custom component for even easier styling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#navlink-component"&gt;
  &lt;/a&gt;
  NavLink Component
&lt;/h2&gt;

&lt;p&gt;Additionally, React Router DOM gives us a NavLink component which is helpful. in the event that we want to apply some special styles.&lt;/p&gt;

&lt;p&gt;If we are on the current path that the link points to, this allows us to create some active link styles to tell our users, by looking at our link, what page they're on.&lt;/p&gt;

&lt;p&gt;For example, if our users are on the homepage, we could tell them as much by using the &lt;code&gt;activeStyle&lt;/code&gt; prop to make our link bold and red when they're on the homepage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;NavLink&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NavLink&lt;/span&gt;
        &lt;span class="nx"&gt;activeStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Home&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NavLink&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NavLink&lt;/span&gt; &lt;span class="nx"&gt;activeClassName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;About&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NavLink&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is also an &lt;code&gt;activeClassName&lt;/code&gt; prop which can be set as well if you do not want to include inline styles or want more reusable styles to perform the same function as &lt;code&gt;activeStyle&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redirect-component"&gt;
  &lt;/a&gt;
  Redirect Component
&lt;/h2&gt;

&lt;p&gt;Another very helpful component that React Router DOM gives us is the redirect component.&lt;/p&gt;

&lt;p&gt;This may seem strange to have a component that performs a function of redirecting our user when it's displayed, but this is very functional. Whenever we're using something like a private route and we have a condition in which the user is not authenticated, we want to redirect them back to the login page.&lt;/p&gt;

&lt;p&gt;Here is an example of an implementation of a private route component that ensures that a user is authenticated to show them a particular route has been declared with this component.&lt;/p&gt;

&lt;p&gt;Otherwise, if they're not authenticated, they will be redirected to a public route (presumably a route to login) once the redirect component is displayed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Redirect&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrivateRoute&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Hidden&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PrivateRoute&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// useAuth is some custom hook to get the current user's auth state&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;
      &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;isAuth&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; : &amp;lt;Redirect to="/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; /&amp;gt;
      }
    /&amp;gt;
  );
}

function Home() {
  return &amp;lt;&amp;gt;home&amp;lt;/&amp;gt;;
}

function Hidden() {
  return &amp;lt;&amp;gt;hidden&amp;lt;/&amp;gt;;
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The redirect component is very simple to use, very declarative and allows us to see the great benefit of React Router DOM being component based just like everything in React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usehistory-hook"&gt;
  &lt;/a&gt;
  useHistory Hook
&lt;/h2&gt;

&lt;p&gt;On top of all of these powerful components, we have some very useful hooks that React Router DOM gives us.&lt;/p&gt;

&lt;p&gt;They are mainly helpful by supplying additional information that we can use within our components. They can be called as normal React hooks for which we can use their values exactly as we like.&lt;/p&gt;

&lt;p&gt;Perhaps the most powerful hook is the &lt;code&gt;useHistory&lt;/code&gt; hook. We can call it up at the top of any component that is declared within our router component and get back &lt;code&gt;history&lt;/code&gt; data, which includes information such as the location associated with our component.&lt;/p&gt;

&lt;p&gt;This tells us all about where the user currently is, such as the pathname that they're on, as well as any query parameters that might be appended to our url. All of the location data is accessible from &lt;code&gt;history.location&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '/about'&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;about&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, the history object directly includes helpful methods that allows us to programmatically direct our user to different pages in our app.&lt;/p&gt;

&lt;p&gt;This is very helpful in, for example, for redirecting our user after logging in, or in any situation where we need to take a user from one page to another.&lt;/p&gt;

&lt;p&gt;We can push users from one page to another using &lt;code&gt;history.push&lt;/code&gt;. When we use the push method, we just need to supply the path that we want to take our users to using this method adds this new page on to the stack (so to speak) of our history:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '/about'&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;about&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Go&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also redirect our users with &lt;code&gt;history.replace&lt;/code&gt;, which also accepts a path value, but clears out everything in history, after the navigation is performed. This is helpful for situations where going back in history is no longer needed, such as after users have been logged out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uselocation-hook"&gt;
  &lt;/a&gt;
  useLocation Hook
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;useLocation&lt;/code&gt; hook includes all of the same information that the &lt;code&gt;useHistory&lt;/code&gt; hook does.&lt;/p&gt;

&lt;p&gt;This is important to note that if you need both location data and to use history to programmatically navigate your user, make sure to useHistory. However, if you only want location data, all you need to do is call useLocation or get back all of the location data on an object that is identical to the data provided on &lt;code&gt;history. location&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '/about'&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;about&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useparams-hook-dynamic-routes"&gt;
  &lt;/a&gt;
  useParams Hook + Dynamic Routes
&lt;/h2&gt;

&lt;p&gt;One thing that we didn't cover when it comes to routes is that we can naturally create dynamic routes, meaning routes that are not fixed and determined, but can be any number of characters.&lt;/p&gt;

&lt;p&gt;Dynamic routes are helpful in situations where we have let's say a blog post with a unique slug. How do we make sure that we display the appropriate data and appropriate components, given that our blog post slug can be completely different?&lt;/p&gt;

&lt;p&gt;To declare a route parameter on a given route, it must be prefixed with a colon &lt;code&gt;:&lt;/code&gt;. If I wanted to create a dynamic route, "/blog/:postSlug", for a blog post component, it might look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/blog/:postSlug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're now matching the appropriate component or whatever the slug is, but within our BlogPost component, how do we receive that post slug data?&lt;/p&gt;

&lt;p&gt;We can access any route params of a declared route with its associated component using the &lt;code&gt;useParams&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;useParams will return an object which will contain properties that match our route params (in this case, &lt;code&gt;postSlug&lt;/code&gt;). We can use object destructuring to immediately access and declare as a variable with the name &lt;code&gt;postSlug&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/blog/:postSlug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPost&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;postSlug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;postSlug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;postSlug&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we go to the route '/blog/my-blog-post', I can access the string 'my-blog-post' on the &lt;code&gt;postSlug&lt;/code&gt; variable and fetch that post's associated data within useEffect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useroutematch-hook"&gt;
  &lt;/a&gt;
  useRouteMatch Hook
&lt;/h2&gt;

&lt;p&gt;If we want to know whether the given component is on a certain page, we can use the &lt;code&gt;useRouteMatch&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;For example, within our blog post, to see the page that we're on matches the route "/blog/:postSlug" can get back a boolean value that will tell us if the route that we're on matches the pattern that we specified:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouteMatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isBlogPostRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouteMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/blog/:postSlug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// display, hide content, or do something else&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is helpful in conditions in which we want to show something specific, based off of whether we're on a certain route or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-keep-this-guide-for-future-reference%E2%80%AC"&gt;
  &lt;/a&gt;
  Want to keep this guide for future reference?‬
&lt;/h2&gt;

&lt;p&gt;*&lt;strong&gt;&lt;em&gt;&lt;a href="http://bit.ly/react-router-cheatsheet"&gt;Click here to download the cheatsheet as a helpful PDF&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;*&lt;/p&gt;

&lt;p&gt;Here are 3 quick wins you get when you grab the downloadable version:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  You’ll get tons of copyable code snippets for easy reuse in your own projects.&lt;/li&gt;
&lt;li&gt;  It is a great reference guide to strengthen your skills as a React developer and for job interviews.&lt;/li&gt;
&lt;li&gt;  You can take, use, print, read, and re-read this guide literally anywhere that you like.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Social Media Button Hover Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Mon, 19 Apr 2021 14:28:44 +0000</pubDate>
      <link>https://dev.to/nikhil27b/social-media-button-hover-using-html-css-49b5</link>
      <guid>https://dev.to/nikhil27b/social-media-button-hover-using-html-css-49b5</guid>
      <description>&lt;p&gt;Hello, today I created an Amazing social media hover button Using HTML &amp;amp; CSS. when you hover on this button this shows as a sort profile card I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to more support me then buy me a &lt;a href="https://www.buymeacoffee.com/nikhilbobade27"&gt;coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/PoWdajw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>#8 of 100DaysOfCode </title>
      <author>atulit023</author>
      <pubDate>Mon, 19 Apr 2021 14:28:32 +0000</pubDate>
      <link>https://dev.to/icecoffee/8-of-100daysofcode-24ng</link>
      <guid>https://dev.to/icecoffee/8-of-100daysofcode-24ng</guid>
      <description>&lt;p&gt;Eighth Day,&lt;br&gt;
Today I am revisiting react states in greater detail.&lt;/p&gt;

&lt;p&gt;And here is what I have learned so far.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#eight-ways-to-handle-state-in-a-react-application"&gt;
  &lt;/a&gt;
  Eight ways to handle state in a React application
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#url"&gt;
  &lt;/a&gt;
  URL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Current app. location/settings.&lt;/li&gt;
&lt;li&gt;Enables support for deep linking.&lt;/li&gt;
&lt;li&gt;Avoids redundantly storage of data in your beautiful app.&lt;/li&gt;
&lt;li&gt;3rd Party Enhancement - React router&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#web-storage"&gt;
  &lt;/a&gt;
  Web Storage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To persist states between reloads.

&lt;ul&gt;
&lt;li&gt;Cookies&lt;/li&gt;
&lt;li&gt;Locale&lt;/li&gt;
&lt;li&gt;IndexedDB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⚠ &lt;em&gt;Watchout&lt;/em&gt; !!!

&lt;ul&gt;
&lt;li&gt;Tied to a single browser - i.e. If the same app. will be accessed from a different browser then you have to again store all the data. (we all are familiar with cookies, right!)&lt;/li&gt;
&lt;li&gt; Avoid storing sensitive data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use Cases

&lt;ul&gt;
&lt;li&gt;Items in a shopping cart.&lt;/li&gt;
&lt;li&gt;Partially filled form data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#local-state"&gt;
  &lt;/a&gt;
  Local State
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Store state inside a React component. (used when a component needs it)&lt;/li&gt;
&lt;li&gt;Use Cases

&lt;ul&gt;
&lt;li&gt;Forms&lt;/li&gt;
&lt;li&gt;Toggles&lt;/li&gt;
&lt;li&gt;Local lists&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#lifted-state"&gt;
  &lt;/a&gt;
  Lifted State
&lt;/h3&gt;

&lt;p&gt;It's literally what its name says. When a state is used by multiple components then we just lift a state to common parent and pass'em down via props.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#derived-state"&gt;
  &lt;/a&gt;
  Derived State
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Derive state from existing states/ props.&lt;/li&gt;
&lt;li&gt;Example: Like using Array.length rather than assigning a length of the list to a new state variable.&lt;/li&gt;
&lt;li&gt;That was a simple example but what derived states?

&lt;ul&gt;
&lt;li&gt;Not because it makes code "slick" but to simplify code and avoid &lt;strong&gt;sync bugs&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#refs"&gt;
  &lt;/a&gt;
  Refs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The DOM reference 

&lt;ul&gt;
&lt;li&gt;For uncontrolled elements like inputs and other components where React don't control their properties&lt;/li&gt;
&lt;li&gt;Interfacing with non-react libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;State that isn't displayed

&lt;ul&gt;
&lt;li&gt;Like to track if a component is mounted or not.&lt;/li&gt;
&lt;li&gt;Hold timers.&lt;/li&gt;
&lt;li&gt;Store previous state values &lt;strong&gt;(Helps in making features like undo and redo)&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/icecoffee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRw8PnaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--V2yBTOrT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/583438/e8ceceea-d6dc-4493-a2eb-0a47f371d6a6.png" alt="icecoffee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/icecoffee/7-of-100daysofcode-2lbi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;#7 of 100DaysOfCode&lt;/h2&gt;
      &lt;h3&gt;atulit023 ・ Apr 18 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Yep, the same thing that I mentioned the day before.&lt;/li&gt;
&lt;li&gt;Global/ broadly used state and functions.

&lt;ul&gt;
&lt;li&gt;Avoids prop drilling&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Use Cases:

&lt;ul&gt;
&lt;li&gt;Login key of the user.&lt;/li&gt;
&lt;li&gt;Authorization settings.&lt;/li&gt;
&lt;li&gt;Theming&lt;/li&gt;
&lt;li&gt;Internationalization settings&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#third-parth-states"&gt;
  &lt;/a&gt;
  Third Parth States
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Handling state via third parties to make life chill.&lt;/li&gt;
&lt;li&gt;General Options:

&lt;ul&gt;
&lt;li&gt;Redux&lt;/li&gt;
&lt;li&gt;Motex&lt;/li&gt;
&lt;li&gt;Recoil&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Remote State:

&lt;ul&gt;
&lt;li&gt;SWR&lt;/li&gt;
&lt;li&gt;Relay ---|--Both of them goes well with GraphQL&lt;/li&gt;
&lt;li&gt;Apollo --|&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yep and that's all for today. &lt;br&gt;
I wasn't able to do enough today but I am working on it.&lt;/p&gt;

&lt;p&gt;I'm sure most of you guys have used them before and this is just a general classification of possible use cases but since we are developers, innovation is in our middle name.😄&lt;br&gt;
You know what I'm saying. &lt;/p&gt;

&lt;p&gt;If anyone wants to suggest some more use cases or any add on's or if there are some mistakes in the post, please let me know.&lt;br&gt;
I'll really appreciate that.&lt;/p&gt;

&lt;p&gt;Thanks for reading it.😊&lt;br&gt;
Have a beautiful day.🌷&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
    </item>
    <item>
      <title>Codesphere vs. GitHub Codespaces: What's the Difference?</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 19 Apr 2021 14:28:10 +0000</pubDate>
      <link>https://dev.to/codesphere/codesphere-vs-github-codespaces-what-s-the-difference-2p1</link>
      <guid>https://dev.to/codesphere/codesphere-vs-github-codespaces-what-s-the-difference-2p1</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;As we were recently asked how Codesphere differentiates itself from Codespaces, an online editor for Github, we thought we could help clear some things up. If you were ever wondering what makes Codesphere unique, continue reading to find out. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Codespaces&lt;/strong&gt; is an online code editor powered by VSCode specifically designed for Github. With the click of a button directly in your GitHub repository, it starts a remote VM, downloads the code, and lets users edit it with a special version of VSCode, which can be used from the browser.&lt;/p&gt;

&lt;p&gt;This is really useful for making quick changes in some repo without the entire setup on your laptop, but it is still limited by the resources of the remote VM and does not solve the complexity of getting a user’s app live.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Codesphere on the other hand aims to provide a much simpler experience compared to today's cloud providers while giving the opportunity to ad-hoc code in your browser&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The idea behind &lt;strong&gt;Codesphere&lt;/strong&gt;  builds on a paradigm shift: Instead of creating apps on your computer and deploying them to a totally different infrastructure (e.g. AWS), you can now create the apps, using Codesphere’s web IDE, in the same environment in which you will run them in production.&lt;/p&gt;

&lt;p&gt;Combined with our new distributed architecture, you can now use the power of the full cloud even while you are still coding (e.g. to run builds on hundreds of VM’s or seamlessly switch between dev and prod). Development is always tested and online alongside production. Neither deployment nor git is needed and the application scales automatically. &lt;/p&gt;

&lt;p&gt;Starting up with &lt;strong&gt;Codesphere&lt;/strong&gt; is effortless as it provides you with everything needed to change the deployment or even take out the code without any lock-in. On the other hand, if you prefer your local VSCode, you can just mount the remote file system and work with that, getting the best of both worlds. We make scalable infrastructure easy to deploy and make starting up projects a lot faster, regardless if you are a single developer or a team. &lt;strong&gt;Codesphere&lt;/strong&gt;  grows with you, from your very first experiments to building the next Spotify or Youtube. &lt;/p&gt;

&lt;p&gt;While there are really great tools out there, we felt there is a gap in the market when it comes to creating scalable apps, and this is why we created &lt;strong&gt;Codesphere&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>github</category>
      <category>vscode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>All you need is NAND, NAND, NAND; NAND is all you need!</title>
      <author>Nathan Kallman</author>
      <pubDate>Mon, 19 Apr 2021 14:21:32 +0000</pubDate>
      <link>https://dev.to/kallmanation/all-you-need-is-nand-nand-nand-nand-is-all-you-need-1cho</link>
      <guid>https://dev.to/kallmanation/all-you-need-is-nand-nand-nand-nand-is-all-you-need-1cho</guid>
      <description>&lt;p&gt;&lt;em&gt;All animations courtesy of my &lt;a href="https://dev.to/kallmanation/wireworld-svelte-edition-1lgj"&gt;Wireworld built in Svelte&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;If you've spent any time programming, you may recognize the "big three" boolean operators: AND, OR, and NOT (often written &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt; in many programming languages). Together these operators are &lt;a href="https://en.wikipedia.org/wiki/Functional_completeness"&gt;functionally complete&lt;/a&gt;, meaning they can be used to build &lt;em&gt;any&lt;/em&gt; boolean logic. Combined with some sort of memory, functionally complete operators can be used to build a &lt;a href="https://en.wikipedia.org/wiki/Turing_completeness"&gt;turing complete&lt;/a&gt; system.&lt;/p&gt;

&lt;p&gt;What if I told you we need only one operator to be functionally complete? That's right! All you need is NAND (short for Not AND; &lt;code&gt;!(x &amp;amp;&amp;amp; y)&lt;/code&gt;). But don't trust me, let me show you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#proving-nand-is-all-you-need"&gt;
  &lt;/a&gt;
  Proving NAND is all you need
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#nand-is-not"&gt;
  &lt;/a&gt;
  NAND is NOT
&lt;/h2&gt;

&lt;p&gt;You've seen the animation of a NAND in a Wireworld above (NAND-imation anyone?). What would happen if instead of two inputs, we tied them both together as one input?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YlGlwt10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a27parjsmzxf4b6jnlf5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YlGlwt10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a27parjsmzxf4b6jnlf5.gif" alt="Animation of NAND acting as a NOT"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice how this new operator constantly outputs until an input is received and then it stops (aka NOT logic). In JavaScript, if we had a &lt;code&gt;nand(x, y)&lt;/code&gt; function, we could make &lt;code&gt;not()&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;nand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look at NAND's truth table where both inputs are the same:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;X&lt;/th&gt;
&lt;th&gt;Y&lt;/th&gt;
&lt;th&gt;=&lt;/th&gt;
&lt;th&gt;O&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Looks a lot like NOT to me! &lt;strong&gt;NAND is NOT.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nand-is-and"&gt;
  &lt;/a&gt;
  NAND is AND
&lt;/h2&gt;

&lt;p&gt;Look at NAND's full truth table compared to AND:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;X&lt;/th&gt;
&lt;th&gt;Y&lt;/th&gt;
&lt;th&gt;=&lt;/th&gt;
&lt;th&gt;NAND&lt;/th&gt;
&lt;th&gt;AND&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;It's perfectly inverse (that is the definition of Not AND after all). If only we could NOT the output of our NAND, we would have AND... if you read the last section, that's exactly what we have! Just put the output of a NAND as both inputs to another NAND and viola! an AND appears:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14O7dBpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zx9b6e2dm1o90gpsvnxk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14O7dBpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zx9b6e2dm1o90gpsvnxk.gif" alt="Animation of two NANDs acting as an AND"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again to relate this to code it might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;nand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;nand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#nand-is-or"&gt;
  &lt;/a&gt;
  NAND is OR
&lt;/h2&gt;

&lt;p&gt;Perhaps the trickiest one yet. AND and NOT were fairly obvious looking at their truth tables. But OR?&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;X&lt;/th&gt;
&lt;th&gt;Y&lt;/th&gt;
&lt;th&gt;=&lt;/th&gt;
&lt;th&gt;NAND&lt;/th&gt;
&lt;th&gt;OR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;OR is tantalizingly close to NAND. They both have three outputs of &lt;code&gt;true&lt;/code&gt; and only one case of &lt;code&gt;false&lt;/code&gt;. But the tables are backwards! What are we supposed to do with this? What if I showed you a table with the opposite inputs:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;NOT X&lt;/th&gt;
&lt;th&gt;NOT Y&lt;/th&gt;
&lt;th&gt;=&lt;/th&gt;
&lt;th&gt;OR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Does that pattern look familiar? If we NOT our inputs first (using the same NAND as NOT trick) and put those as the inputs to our NAND, we'll get an OR!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ELw2jWG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kub3745sl4u5ibb65ueh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ELw2jWG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kub3745sl4u5ibb65ueh.gif" alt="Animation of three NANDs acting as an OR"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll finish out our code examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;nand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;nand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(We just did &lt;a href="https://en.wikipedia.org/wiki/De_Morgan's_laws"&gt;DeMorgan's Theorem&lt;/a&gt; a&lt;/em&gt; very &lt;em&gt;cool trick for making boolean code more readable; but we'll talk more about that later)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nand-is-all-you-need"&gt;
  &lt;/a&gt;
  NAND is all you need
&lt;/h2&gt;

&lt;p&gt;If you accept that AND, OR, and NOT are functionally complete, since NAND can build each of those three things, NAND, all by itself, is functionally complete!&lt;/p&gt;

&lt;p&gt;So yes, NAND &lt;em&gt;is&lt;/em&gt; all you need... but please don't write all your booleans using only NANDs. This is for your edification and education.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-should-i-care"&gt;
  &lt;/a&gt;
  Why should I care?
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#problem-transformations-solve-problems"&gt;
  &lt;/a&gt;
  Problem Transformations Solve Problems
&lt;/h2&gt;

&lt;p&gt;What is the difference between a Bubble Sort and a Quick Sort? They will both give an equally sorted output after all. The importance comes in performance. Because while they are &lt;em&gt;logically equivalent&lt;/em&gt; they are not &lt;em&gt;operationally equivalent&lt;/em&gt;; one of them will finish faster when a physical computer executes the sort.&lt;/p&gt;

&lt;p&gt;Many, &lt;em&gt;many&lt;/em&gt; things in the business of software development see drastic improvements from transforming the physical operations while keeping logical equivalence. The better we become at this skill, the better programmers we become. (One way to become better is seeing examples, like this).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nand-runs-the-world"&gt;
  &lt;/a&gt;
  NAND Runs the World
&lt;/h2&gt;

&lt;p&gt;It just so happens that in real-world computer chips NAND is one of the easiest things to build. If you've ever heard of &lt;a href="https://searchstorage.techtarget.com/definition/3D-NAND-flash"&gt;3D NAND&lt;/a&gt;, you now know what that NAND stands for. And when your code works the first time around, thank a NAND gate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-just-cool"&gt;
  &lt;/a&gt;
  It's Just Cool!
&lt;/h2&gt;

&lt;p&gt;Who would have thought that just one operator can run the whole world?&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>learning</category>
      <category>computerscience</category>
      <category>fundamentals</category>
    </item>
    <item>
      <title>What is Nix and how to use it?</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 19 Apr 2021 13:48:15 +0000</pubDate>
      <link>https://dev.to/typeable/what-is-nix-and-how-to-use-it-1iff</link>
      <guid>https://dev.to/typeable/what-is-nix-and-how-to-use-it-1iff</guid>
      <description>&lt;p&gt;Author: Nick Sigulya&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQvWaC7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/nix/nix1_en.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQvWaC7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/nix/nix1_en.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here at Typeable, we wanted to publish a small series of posts about the way Nix helps us (and slightly hinders) in software development. We would like to start with an introduction to Nix which we might refer to further on.&lt;/p&gt;

&lt;p&gt;You can find the files for this post &lt;a href="https://github.com/typeable/blog-posts-ru/tree/main/Nix_Intro"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-get-it"&gt;
  &lt;/a&gt;
  Where to get it?
&lt;/h2&gt;

&lt;p&gt;Apart from NixOS, where you don’t need to do anything, Nix can be installed on any (or almost any) Linux distribution. To this end, you just have to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sh &amp;lt;(curl -L https://nixos.org/nix/install)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, the installation script will do everything on its own. The recent changes in MacOS have made the installation more difficult. Before the changes, the above-mentioned command was sufficient. You can read about the installation on the latest MacOS versions &lt;a href="https://nixos.org/manual/nix/stable/#sect-macos-installation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-nix-language"&gt;
  &lt;/a&gt;
  The Nix language
&lt;/h2&gt;

&lt;p&gt;When you speak about Nix, you often imply two different entities: Nix as a language and nixpkgs as the package repository also constituting the basis of NixOS. Let’s start with the first one.&lt;/p&gt;

&lt;p&gt;Nix is a lazy functional language with dynamic typing. The syntax looks much like the languages of the ML family (SML, OCaml, Haskell), which is why those who know them are not likely to face any issues.&lt;/p&gt;

&lt;p&gt;You can start getting familiar with the language simply by running the interpreter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nix repl
Welcome to Nix version 2.3.10. Type :? for help.

nix-repl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is no special syntax used to declare the functions in Nix. The functions are defined by assigning, similarly to other values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nix-repl&amp;gt; "Hello " + "World!"
"Hello World!"

nix-repl&amp;gt; add = a: b: a + b

nix-repl&amp;gt; add 1 2
3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All functions are curried, in the same way as in the languages which have influenced Nix.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nix-repl&amp;gt; addOne = add 1

nix-repl&amp;gt; addOne 3
4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to the primitive types such as numbers and lines, Nix supports the lists and dictionaries (attribute sets in the Nix terminology).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nix-repl&amp;gt; list = [ 1 2 3 ]

nix-repl&amp;gt; set = { a = 1; b = list; }

nix-repl&amp;gt; set
{ a = 1; b = [ ... ]; }

nix-repl&amp;gt; set.b
[ 1 2 3 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The values within the local scope can be set using the expression &lt;code&gt;let...in&lt;/code&gt;. For example, here is a simple function implementing a factorial, as it is usually done in other posts on functional programming.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fac.nix&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let
  fac = n:
    if n == 0
    then 1
    else n * fac (n - 1);
in { inherit fac; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Directive &lt;code&gt;inherit&lt;/code&gt; introduces or "inherits" the term from the current scope and gives it the same name. The example above is equivalent to the record &lt;code&gt;let fac = ... in { fac = fac; }&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nix repl fac.nix
Welcome to Nix version 2.3.10. Type :? for help.

Loading 'fac.nix'...
Added 1 variables.

nix-repl&amp;gt; fac 3
6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When files or modules are uploaded to REPL, Nix expects that the module computation will result in a set whose elements will be imported in the current scope.&lt;/p&gt;

&lt;p&gt;To download the code from other files, Nix uses the function &lt;code&gt;import&lt;/code&gt; accepting the path to the code file and returning the result of this code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mul.nix&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let
  mul = a: b: a * b;
in { inherit mul; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;New &lt;code&gt;fac.nix&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let
  multMod = import ./mul.nix;
  fac = n:
    if n == 0
    then 1
    else multMod.mul n (fac (n - 1));
in { inherit fac; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Though assigning the module to an individual variable is done rather often, it looks somewhat awkward here, doesn’t it? Nix includes the &lt;code&gt;with&lt;/code&gt; directive adding all names from the set passed as the parameter to the current scope.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fac.nix&lt;/code&gt; using &lt;code&gt;with&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;with import ./mul.nix;
let
  fac = n:
    if n == 0
    then 1
    else mul n (fac (n - 1));
in { inherit fac; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-programs"&gt;
  &lt;/a&gt;
  Building programs
&lt;/h2&gt;

&lt;p&gt;Building programs and individual components is the main function of the Nix language.&lt;/p&gt;

&lt;p&gt;When working with packages, the main tool you should know about is &lt;code&gt;Derivation&lt;/code&gt;. In itself, &lt;code&gt;Derivation&lt;/code&gt; is a special file containing the recipe for a machine-readable build. The derivation compiling a program in C that displays "Hello World!” looks approximately as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Derive([("out","/nix/store/1nq46fyv3629slgxnagqn2c01skp7xrq-hello-world","","")],[("/nix/store/60xqp516mkfhf31n6ycyvxppcknb2dwr-build-hello.drv",["out"])],["/nix/store/wiviq2xyz0ylhl0qcgfgl9221nkvvxfj-hello.c"],"x86_64-linux","/nix/store/r5lh8zg768swlm9hxxfrf9j8gwyadi72-build-hello",[],[("builder","/nix/store/r5lh8zg768swlm9hxxfrf9j8gwyadi72-build-hello"),("name","hello-world"),("out","/nix/store/1nq46fyv3629slgxnagqn2c01skp7xrq-hello-world"),("src","/nix/store/wiviq2xyz0ylhl0qcgfgl9221nkvvxfj-hello.c"),("system","x86_64-linux")])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this expression includes the path to the resulting build and the paths to the source files, build script, and metadata: the project name and platform. It should also be noted that the paths to the source code start with &lt;code&gt;/nix/store&lt;/code&gt;. During the build, Nix copies everything it needs to this directory. After that, the build is carried out in an isolated environment (sandbox). Thus, the reproducibility of all package builds is achieved.&lt;/p&gt;

&lt;p&gt;Surely, it’s insanity to write this manually! For simple cases, Nix offers the built-in &lt;code&gt;derivation&lt;/code&gt; function accepting the build description.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;simple-derivation/default.nix&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ pkgs ? import &amp;lt;nixpkgs&amp;gt; {} }:

derivation {
  name = "hello-world";
  builder = pkgs.writeShellScript "build-hello" ''
    ${pkgs.coreutils}/bin/mkdir -p $out/bin
    ${pkgs.gcc}/bin/gcc $src -o $out/bin/hello -O2
  '';
  src = ./hello.c;
  system = builtins.currentSystem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s analyze this example. The entire file is the definition of the function accepting one parameter – the dictionary containing the &lt;code&gt;pkgs&lt;/code&gt; field. If it was not passed during the function call, the default value will be used: &lt;code&gt;import &amp;lt;nixpkgs&amp;gt; {}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;derivation&lt;/code&gt; is the function also accepting the dictionary with the build parameters: The &lt;code&gt;name&lt;/code&gt; is the package name, the &lt;code&gt;builder&lt;/code&gt; is the build script, the &lt;code&gt;src&lt;/code&gt; is the source code, the &lt;code&gt;system&lt;/code&gt; is the system or list of systems the package can be built for.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;writeShellScript&lt;/code&gt; is one of the &lt;code&gt;nixpkgs&lt;/code&gt; functions accepting the script name and code and returning the executable file path. For multiline text, Nix offers an alternative syntax with two pairs of single quotes.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;nix build&lt;/code&gt; command you can run this build recipe and obtain a working binary file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nix build -f ./simple-derivation/default.nix
[1 built]

$ ./result/bin/hello
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run &lt;code&gt;nix build&lt;/code&gt;, the symbolic link &lt;code&gt;result&lt;/code&gt; referring to the package created in the &lt;code&gt;/nix/store&lt;/code&gt; will be generated in the current directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ls -l result
lrwxrwxrwx 1 user users 50 Mar 29 17:53 result -&amp;gt; /nix/store/vpcddray35g2jrv40dg1809xrmz73awi-simple

$ find /nix/store/vpcddray35g2jrv40dg1809xrmz73awi-simple
/nix/store/vpcddray35g2jrv40dg1809xrmz73awi-simple
/nix/store/vpcddray35g2jrv40dg1809xrmz73awi-simple/bin
/nix/store/vpcddray35g2jrv40dg1809xrmz73awi-simple/bin/hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-programs-advanced-version"&gt;
  &lt;/a&gt;
  Building programs, advanced version
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;derivation&lt;/code&gt; is the fairly low-level function Nix uses as the basis for far more powerful primitives. As an example, we can consider the build of the well-known &lt;code&gt;cowsay&lt;/code&gt; utility.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ lib, stdenv, fetchurl, perl }:

stdenv.mkDerivation rec {
  version = "3.03+dfsg2";
  pname = "cowsay";

  src = fetchurl {
    url = "http://http.debian.net/debian/pool/main/c/cowsay/cowsay_${version}.orig.tar.gz";
    sha256 = "0ghqnkp8njc3wyqx4mlg0qv0v0pc996x2nbyhqhz66bbgmf9d29v";
  };

  buildInputs = [ perl ];

  postBuild = ''
    substituteInPlace cowsay --replace "%BANGPERL%" "!${perl}/bin/perl" \
      --replace "%PREFIX%" "$out"
  '';

  installPhase = ''
    mkdir -p $out/{bin,man/man1,share/cows}
    install -m755 cowsay $out/bin/cowsay
    ln -s cowsay $out/bin/cowthink
    install -m644 cowsay.1 $out/man/man1/cowsay.1
    ln -s cowsay.1 $out/man/man1/cowthink.1
    install -m644 cows/* -t $out/share/cows/
  '';

  meta = with lib; {
    description = "A program which generates ASCII pictures of a cow with a message";
    homepage = "https://en.wikipedia.org/wiki/Cowsay";
    license = licenses.gpl1;
    platforms = platforms.all;
    maintainers = [ maintainers.rob ];
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The original script can be found &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/tools/misc/cowsay/default.nix"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stdenv&lt;/code&gt; is a special &lt;code&gt;derivation&lt;/code&gt; containing the build rules for the current system: the required compiler, flags, and other parameters. Its main content is the huge Bash script named &lt;code&gt;setup&lt;/code&gt; working as the &lt;code&gt;builder&lt;/code&gt; script in our simple example shown above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ nix build nixpkgs.stdenv

 $ find result/
result/
result/setup
result/nix-support

$ wc -l result/setup
1330 result/setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;mkDerivation&lt;/code&gt; is the function creating the &lt;code&gt;derivation&lt;/code&gt; with this script and simultaneously filling out other fields.&lt;/p&gt;

&lt;p&gt;Those readers who used to write package build scripts in Arch Linux or Gentoo might see a pretty familiar structure here. Just as in other distributions, the build is broken down into phases, dependencies enumeration is available (&lt;code&gt;buildInputs&lt;/code&gt;), and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this part, I’ve tried to describe the most basic aspects of using Nix as the build description language. In the next posts, I’m going to show you the ways we use Nix at Typeable and the ways you’d better not use it. Stay tuned!&lt;/p&gt;

&lt;p&gt;Besides, a far more detailed introduction to Nix is published on the website of the project itself under the name of &lt;a href="https://nixos.org/guides/nix-pills/"&gt;Nix pills&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>nix</category>
      <category>package</category>
      <category>tutorial</category>
      <category>build</category>
    </item>
    <item>
      <title>DEPLOYING A WORDPRESS APPLICATION WITH MYSQL DATABASE IN K8S Cluster USING HELM ON AWS</title>
      <author>Sachin Kumar</author>
      <pubDate>Mon, 19 Apr 2021 13:43:22 +0000</pubDate>
      <link>https://dev.to/hackcoderr/deploying-a-wordpress-application-with-mysql-database-in-k8s-cluster-using-helm-on-aws-4lpn</link>
      <guid>https://dev.to/hackcoderr/deploying-a-wordpress-application-with-mysql-database-in-k8s-cluster-using-helm-on-aws-4lpn</guid>
      <description>&lt;p&gt;Welcome to back in my another article. You will see all about the integration of WordPress, MySQL, Helm etc, in this article. So let's get started without delay.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Pre-requisite
&lt;/h2&gt;

&lt;p&gt;To perform this scenario you will need mentioned tools and platform.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/console/"&gt;AWS Account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#kubernetes-setup"&gt;
  &lt;/a&gt;
  Kubernetes Setup
&lt;/h2&gt;

&lt;p&gt;To demonstrate this scenario, first of all we have to install the Kubernetes setup then we can move ahead for farther part. I am installing the Kubernetes Kubernetes cluster on the top of AWS. So launch the instance with mentioned configuration.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu Server 18.04 LTS (HVM), SSD Volume Type&lt;/li&gt;
&lt;li&gt;t2.xlarge Instance type&lt;/li&gt;
&lt;li&gt;Minimum Storage 30 GiB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After launching AWS Instance, connect with it with the help of any remote software eg. putty etc or ssh protocol and then run the following commands.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;login with root power.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo su -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install kubectl.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Update the instance and install docker.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update -y
sudo apt-get install docker.io -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install curl software to install Minikube.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install curl -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#whats-minikube-"&gt;
  &lt;/a&gt;
  What's Minikube ?
&lt;/h3&gt;

&lt;p&gt;Minikube is a utility you can use to run Kubernetes (k8s) on your local machine. It creates a single node cluster contained in a virtual machine (VM). This cluster lets you demo Kubernetes operations without requiring the time and resource-consuming installation of full-blown K8s.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Minikube
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo chmod +x minikube
sudo mv minikube /usr/local/bin/
sudo apt install conntrack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Go into sudo if not gone.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo -i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Start the Minikube
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;minikube start --vm-driver=none
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now our single node cluster is ready to use and you can use with below command.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;minikube status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you will get output such as;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@ip-172-31-39-130:~# minikube status
minikube
type: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats-helm-"&gt;
  &lt;/a&gt;
  What's Helm ?
&lt;/h2&gt;

&lt;p&gt;So let's try to understand what helm is?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Helm is package manager for Kubernetes&lt;/li&gt;
&lt;li&gt;Helm packages are called Charts.&lt;/li&gt;
&lt;li&gt;Helm Charts help define, install and upgrade complex Kubernetes application.&lt;/li&gt;
&lt;li&gt;Helm Charts can be versioned, shared, and published.&lt;/li&gt;
&lt;li&gt;Helm Charts can accept input parameter.

&lt;ul&gt;
&lt;li&gt;Kubectl need template engine to do this (Kubernetes, jinja etc)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Popular packages already available.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-grafana-"&gt;
  &lt;/a&gt;
  What's Grafana ?
&lt;/h2&gt;

&lt;p&gt;Grafana is a &lt;a href="https://en.wikipedia.org/wiki/Multi-platform"&gt;multi-platform open source&lt;/a&gt; analytics and &lt;a href="https://en.wikipedia.org/wiki/Interactive_visualization"&gt;interactive visualization&lt;/a&gt; web application. It provides charts, graphs, and alerts for the web when connected to supported data sources. A licensed Grafana Enterprise version with additional capabilities is also available as a self-hosted installation or an account on the Grafana Labs cloud service. It is expandable through a &lt;a href="https://en.wikipedia.org/wiki/Plug-in_(computing)"&gt;plug-in system&lt;/a&gt;. End users can create complex monitoring dashboards using interactive query builders. Grafana is divided into a front end and back end, written in TypeScript and Go, respectively.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dockerfile-for-grafana"&gt;
  &lt;/a&gt;
  Dockerfile for grafana
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
minikube status&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;clone the repo&lt;br&gt;
&lt;code&gt;&lt;br&gt;
git clone https://github.com/hackcoderr/Grafana.git&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
go inside the Grafana then install&lt;br&gt;
&lt;code&gt;&lt;br&gt;
wget https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
then run&lt;br&gt;
&lt;code&gt;&lt;br&gt;
tar -xvzf helm-v3.5.2-linux-amd64.tar.gz&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
then copy&lt;br&gt;
&lt;code&gt;&lt;br&gt;
cp linux-amd64/helm /usr/bin/&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
then run helm&lt;br&gt;
&lt;code&gt;&lt;br&gt;
cd&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -&lt;br&gt;
sudo apt-get install apt-transport-https --yes&lt;br&gt;
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list&lt;br&gt;
sudo apt-get update&lt;br&gt;
sudo apt-get install helm&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
root@ip-172-31-47-112:~#  helm install grafana Grafana/&lt;br&gt;
NAME: grafana&lt;br&gt;
LAST DEPLOYED: Sun Apr 18 14:25:28 2021&lt;br&gt;
NAMESPACE: default&lt;br&gt;
STATUS: deployed&lt;br&gt;
REVISION: 1&lt;br&gt;
TEST SUITE: None&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;root@ip-172-31-47-112:~# kubectl get pods&lt;br&gt;
NAME                    READY   STATUS    RESTARTS   AGE&lt;br&gt;
graf-7f76fcd8b6-fxvwl   1/1     Running   0          71s&lt;br&gt;
&lt;code&gt;&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
root@ip-172-31-47-112:~# kubectl get svc&lt;br&gt;
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE&lt;br&gt;
graf         NodePort    10.107.249.248           3000:30683/TCP   2m17s&lt;br&gt;
kubernetes   ClusterIP   10.96.0.1                443/TCP          11m&lt;br&gt;
``&lt;/p&gt;

&lt;p&gt;root@ip-172-31-47-112:~# kubectl get service&lt;br&gt;
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE&lt;br&gt;
graf         NodePort    10.107.249.248           3000:30683/TCP   4m1s&lt;br&gt;
kubernetes   ClusterIP   10.96.0.1                443/TCP          13m&lt;br&gt;
root@ip-172-31-47-112:~#&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>aws</category>
      <category>helm</category>
      <category>mysql</category>
    </item>
    <item>
      <title>Don't underestimate development time.</title>
      <author>Moemin Mamdouh 👨‍💻</author>
      <pubDate>Mon, 19 Apr 2021 13:36:54 +0000</pubDate>
      <link>https://dev.to/mamdouhmoemin/don-t-underestimate-development-time-1dgg</link>
      <guid>https://dev.to/mamdouhmoemin/don-t-underestimate-development-time-1dgg</guid>
      <description>&lt;p&gt;Hi there, dev.to! 👋&lt;/p&gt;

&lt;p&gt;I was supposed to launch my side project 20 days ago. I think you can see where i'm going with this, but long story short, i'm falling short of that promise. &lt;/p&gt;

&lt;p&gt;A little background: I'm a designer who's working on a side project with a developer friend. We started around early February and estimated that we would be able to launch by the end of March. &lt;/p&gt;

&lt;p&gt;Everything was going great, we wrapped up development and pushed to Netlify to test it out with a few users who have signed up to our waitlist. &lt;em&gt;Except:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1- We use Github login, we completely forgot the permissions to be read-only. Lots of users pointed that out.&lt;/p&gt;

&lt;p&gt;2- Edge cases for subscriptions were not handled properly. &lt;/p&gt;

&lt;p&gt;3- Some edge cases for our downloadable templates required design modification, so back to the drawing board we went.&lt;/p&gt;

&lt;p&gt;4- Some of the templates were missing files (woops).&lt;/p&gt;

&lt;p&gt;5- Solutions/comments showed the wrong timestamps. &lt;/p&gt;

&lt;p&gt;There's a ton of bugs that showed up during early user testing which if you think about it, isn't that bad. We avoided what could have been a disaster if we launched. &lt;/p&gt;

&lt;p&gt;The point is, we thought if we wrap up development, that's the project. User testing was always going to be after we launch and receive feedback from &lt;em&gt;actual users&lt;/em&gt;, thankfully we did not go that route and it ended up to our advantage, but it's back to development for us.&lt;/p&gt;

&lt;p&gt;I'm building this project in public on &lt;a href="https://twitter.com/MamdouhMoemin"&gt;Twitter&lt;/a&gt; if you'd like to follow me on the journey :) &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Why QA is so important in your development process?</title>
      <author>Carmen Amengual</author>
      <pubDate>Mon, 19 Apr 2021 13:18:52 +0000</pubDate>
      <link>https://dev.to/carmenqa/why-qa-is-so-important-in-your-development-process-4ecg</link>
      <guid>https://dev.to/carmenqa/why-qa-is-so-important-in-your-development-process-4ecg</guid>
      <description>&lt;p&gt;This shouldn't be a question, and probably everyone in the software world should know the answer, but (there's always a but) not everyone does.&lt;/p&gt;

&lt;p&gt;In this article, I will mention why I consider that a QA team is important in any software company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-one-test-a-day-keeps-the-bugs-away"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. "One test a day keeps the bugs away"&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Yes, as you read it, I have used the phrase of the apple, but because it is 100% applicable to what I want to say.&lt;br&gt;
A test in time prevents a disaster in the future, perhaps not all software companies have a QA team because they start from the logic that, "why are we going to pay a person to verify that things work if we have developers that they can test what they do? ", and the truth is that the developers are not able to judge the masterpiece that maybe took days to make, they need an extra pair of eyes to help them see that their masterpiece is not yet ready to be exhibited, and don't get me wrong, our job is precisely to help developers to make their work perfect and also for the user to have a nice experience in mobile apps or web apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-it-is-better-to-have-a-qa-team-and-not-need-it-than-need-it-and-not-have-it"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. It is better to have a QA team and not need it than need it and not have it&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It sounds like a slogan for an insurance company, but it is a fact, having a quality team guarantees that your products or features, come out ready to use and you may not need them in some moments, but it is always better to know that a group of people is there for taking a look at the app before you decide to put anything into production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-we-test-because-we-care"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. We test because we care&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I do not know of any quality course or workshop that does not mention how important it is to think like a user, because our main objective will always be the user, and that the company does not have great losses due to errors that could be prevented in time. so yes we test because we care.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-test-is-the-key-for-a-better-release"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. The test is the key for a better release&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Just as companies that make skincare products do many tests before saying that a product is ready to go on the market, we also do many tests before saying yes to a release, precisely because we worry about everything coming out, we do a series of tests to check that everything is ready for the release works as expected and that there are no surprises later that can cost millions.&lt;/p&gt;




&lt;p&gt;Well, I think I have made my points clear, and I hope nothing escapes me because if so, that would speak very badly of me as a tester.&lt;/p&gt;

&lt;p&gt;Remember " QA´s are friends not enemies".&lt;br&gt;
&lt;a href="https://i.giphy.com/media/Le5eHA05wkYCs/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Le5eHA05wkYCs/giphy.gif" alt="nemorefference"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's time to promote myself( because if I don't do it, who will?):&lt;br&gt;
you can follow me on my Instagram &lt;a href="https://www.instagram.com/mela.qa/"&gt;@mela.qa&lt;/a&gt;, for some QA content.&lt;br&gt;
And if you want to help a tester to survive a pre-release night feel free to &lt;a href="https://www.buymeacoffee.com/melaq"&gt;buy me a coffee&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>healthydebate</category>
      <category>motivation</category>
      <category>testing</category>
    </item>
  </channel>
</rss>
