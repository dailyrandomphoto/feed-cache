<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Getting Started with Custom Structural Directives in Angular</title>
      <author>Chris Trze≈õniewski</author>
      <pubDate>Tue, 23 Nov 2021 09:02:10 +0000</pubDate>
      <link>https://dev.to/thisdotmedia/getting-started-with-custom-structural-directives-in-angular-4mon</link>
      <guid>https://dev.to/thisdotmedia/getting-started-with-custom-structural-directives-in-angular-4mon</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Angular comes with many built-in directives. Some of them (eg. NgIf, NgModel or FormControlDirective) are used daily by Angular developers. Those directives can be split into 2 categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Attribute directives&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They can be used to modify the appearance of behavior of Angular components and DOM elements. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angular.io/api/router/RouterLink"&gt;RouterLink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angular.io/api/forms/NgModel"&gt;NgModel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://angular.io/api/forms/FormControlDirective"&gt;FormControlDirective&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Structural directives&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They can be used to manipulate the HTML structure in the DOM. Using them, we can change the structure of part of the DOM that they control. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angular.io/api/common/NgIf"&gt;NgIf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angular.io/api/common/NgForOf"&gt;NgForOf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angular.io/api/common/NgSwitch"&gt;NgSwitch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, I will focus on the latter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-custom-structural-directive"&gt;
  &lt;/a&gt;
  Creating a custom structural directive
&lt;/h2&gt;

&lt;p&gt;As I've mentioned above, there are a couple of built-in structural directives in Angular. However, we might come across a case that the ones provided with the framework don't solve. This is where a custom structural directive might help us resolve the issue. But how do we write one?&lt;/p&gt;




&lt;p&gt;All the code examples in this article use the Angular CLI or Nx CLI generated project as a starting point. You can generate a project using the following command, or use &lt;a href="https://stackblitz.com/github/nrwl/stackblitz-nx-angular?preset=node"&gt;Stackblitz starter project&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-nx-workspace &lt;span class="nt"&gt;--preset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;angular &lt;span class="nt"&gt;--prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;csd &lt;span class="nt"&gt;--appName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;custom-structural-directive

&lt;span class="c"&gt;# or&lt;/span&gt;
&lt;span class="c"&gt;# ng new custom-structural-directive --prefix=csd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#ngif-directive-clone"&gt;
  &lt;/a&gt;
  NgIf directive clone
&lt;/h3&gt;

&lt;p&gt;Let's learn the basic concepts by reimplementing the basic features of the &lt;code&gt;NgIf&lt;/code&gt; directive. We will call it &lt;code&gt;CsdIf&lt;/code&gt; (CSR prefix stands for Custom Structural Directive :))&lt;/p&gt;

&lt;p&gt;The structural directive is actually just a regular directive (with some additional syntactic sugars provided by Angular). So we can start with creating a module and empty directive using AngularCLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng generate module &lt;span class="k"&gt;if
&lt;/span&gt;ng generate directive &lt;span class="k"&gt;if&lt;/span&gt;/if &lt;span class="nt"&gt;--module&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;

&lt;span class="c"&gt;# or shorthand&lt;/span&gt;
&lt;span class="c"&gt;# ng g m if&lt;/span&gt;
&lt;span class="c"&gt;# ng g d if/if --module if&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;our new directive should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Directive&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[csdIf]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IfDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's implement the basic functionality of displaying the content if passed value is &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;*csdIf=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My visible conditional header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;*csdIf=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My hidden conditional header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To achieve that, we need a couple of elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an input that will determine whether to show or hide the content (&lt;code&gt;@Input&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;a reference to the template that we want to conditionally display (&lt;code&gt;TemplateRef&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;a container that will provide us with access to Angular's view (&lt;code&gt;ViewContainerRef&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The input can be just a regular class property with Angular's &lt;code&gt;@Input&lt;/code&gt; decorator. The important thing is to use a proper naming convention. For it to work as it does in the example code shown above, we need to name the property the same as the attribute's selector:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[csdIf]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IfDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;csdIf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our directive has the information whether to display the content or not but we need to also gain access to the TemplateRef and ViewContainerRef instances. We can do that by injecting them via a constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[csdIf]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IfDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;csdIf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have all the necessary tools and information to display or hide the content. We can use &lt;code&gt;ViewContainerRef&lt;/code&gt;'s &lt;code&gt;createEmbeddedView&lt;/code&gt; method to display and &lt;code&gt;clear&lt;/code&gt; method to remove the content.&lt;br&gt;
&lt;strong&gt;Important note:&lt;/strong&gt; To make sure the &lt;code&gt;csdIf&lt;/code&gt; property is assigned already, we need to use &lt;code&gt;ngOnInit&lt;/code&gt; lifecycle hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[csdIf]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IfDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;csdIf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csdIf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this implementation, the following example already works as expected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;*csdIf=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My visible conditional header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;*csdIf=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My hidden conditional header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="//images.contentful.com/zojzzdop0fzx/5T3mjVVkLWsK8oIWmgiNYl/1222be8721cd592db9861ff455075fb5/Screenshot_2021-10-22_at_13.42.39.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.contentful.com/zojzzdop0fzx/5T3mjVVkLWsK8oIWmgiNYl/1222be8721cd592db9861ff455075fb5/Screenshot_2021-10-22_at_13.42.39.png" alt="csdIf - first result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is still a problem with this implementation. Let's try to use the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"showInput"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;[(ngModel)]=&lt;/span&gt;&lt;span class="s"&gt;"showInput"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"showInput"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Show conditional header&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;*csdIf=&lt;/span&gt;&lt;span class="s"&gt;"showInput"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My conditional header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "My conditional header" is displayed correctly when the page renders but as soon as we uncheck the &lt;code&gt;showInput&lt;/code&gt;, our header doesn't disappear as we would expect. This is because we only check the &lt;code&gt;csdIf&lt;/code&gt; input value inside of &lt;code&gt;ngOnInit&lt;/code&gt;, but we do not react to the input's changes. To resolve this, we can either use &lt;code&gt;ngOnChanges&lt;/code&gt; lifecycle hook or modify the &lt;code&gt;csdIf&lt;/code&gt; to be a setter rather than just a property. I will show you the later solution but implementing it using &lt;code&gt;ngOnChanges&lt;/code&gt; should be very similar.&lt;/p&gt;

&lt;p&gt;As a first step, let's modify the &lt;code&gt;csdIf&lt;/code&gt; to be a setter, and store its value in a private property &lt;code&gt;show&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[csdIf]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IfDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;csdIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/* constructor */&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Secondly, when the new &lt;code&gt;csdIf&lt;/code&gt; value is set, we need to perform the same logic as we do in &lt;code&gt;ngOnInit&lt;/code&gt;. We need to make sure though that we don't render the template twice so we can clear the view first in all cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[csdIf]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IfDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;csdIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/* constructor */&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a final step, let's refactor to remove the code duplication by extracting the common logic into a method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[csdIf]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IfDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;csdIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayTemplate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/* constructor */&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayTemplate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;displayTemplate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, our second example works as expected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"showInput"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;[(ngModel)]=&lt;/span&gt;&lt;span class="s"&gt;"showInput"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"showInput"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Show conditional header&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;*csdIf=&lt;/span&gt;&lt;span class="s"&gt;"showInput"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My conditional header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#handling-additional-parameters-else-template"&gt;
  &lt;/a&gt;
  Handling additional parameters - else template
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;CsdIf&lt;/code&gt; directive shows and hides the content based on the boolean input correctly. But the original &lt;code&gt;NgIf&lt;/code&gt; directive allows for specifying an alternative template via the "else" property as well. How do we achieve this behavior in our custom directive? This is where understanding the "syntactic sugar" that stands behind the structural directives is crucial. The following &lt;code&gt;NgIf&lt;/code&gt; syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"show; else alternativeTemplate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My conditional header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#alternativeTemplate&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;My alternative header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is actually equivalent to the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[ngIf]=&lt;/span&gt;&lt;span class="s"&gt;"show"&lt;/span&gt; &lt;span class="na"&gt;[ngIfElse]=&lt;/span&gt;&lt;span class="s"&gt;"alternativeTemplate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;My conditional header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#alternativeTemplate&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;My alternative header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that the &lt;code&gt;else&lt;/code&gt; property is actually becoming &lt;code&gt;ngIfElse&lt;/code&gt; input parameter. In general, we can construct the property name by concatenating the attribute following &lt;code&gt;*&lt;/code&gt; and the capitalized property name (eg. &lt;code&gt;"ngIf"&lt;/code&gt; + &lt;code&gt;"Else"&lt;/code&gt; = &lt;code&gt;"ngIfElse""&lt;/code&gt;). In case of our custom directive it will become &lt;code&gt;"csdIf"&lt;/code&gt; + &lt;code&gt;"Else"&lt;/code&gt; = &lt;code&gt;"csdIfElse&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;*csdIf=&lt;/span&gt;&lt;span class="s"&gt;"show; else alternativeTemplate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My conditional header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#alternativeTemplate&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;My alternative header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is equivalent to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[csdIf]=&lt;/span&gt;&lt;span class="s"&gt;"show"&lt;/span&gt; &lt;span class="na"&gt;[csdIfElse]=&lt;/span&gt;&lt;span class="s"&gt;"alternativeTemplate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;My conditional header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#alternativeTemplate&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;My alternative header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By analyzing the "unwrapped" syntax we can notice the the reference to an alternative template is passed via the &lt;code&gt;csdIfElse&lt;/code&gt; property. Let's add and handle that property in the custom directive implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[csdIf]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IfDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;csdIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayTemplate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;csdIfElse&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/* constructor */&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayTemplate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;displayTemplate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csdIfElse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vcr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csdIfElse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This addition makes our directive much more useful, and allows for displaying content for cases when the condition is true or false.&lt;/p&gt;

&lt;p&gt;If something is not clear, or you want to play with the example directive please visit the &lt;a href="https://stackblitz.com/github/ktrz/custom-structural-directive/tree/getting-started-solution?file=apps%2Fcustom-structural-directive%2Fsrc%2Fapp%2Fif%2Fif.directive.ts&amp;amp;preset=node"&gt;example on Stackblitz&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#real-life-example"&gt;
  &lt;/a&gt;
  Real life example
&lt;/h2&gt;

&lt;p&gt;The above example is very simple, but it gives you tools to create your own custom directive when you need it. If you want to have a look at some real-life custom directive example that we've found useful at This Dot Labs, I suggest checking out our &lt;a href="https://www.npmjs.com/package/@this-dot/route-config"&gt;route-config&lt;/a&gt; open source library. You can read more about it in one of our articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.thisdot.co/blog/introducing-our-first-open-source-library-this-dot-route-config"&gt;Introducing @this-dot/route-config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thisdot.co/blog/whats-new-in-this-dot-route-config-v1-2"&gt;What's new in @this-dot@route-config v1.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article, we've learnt how to write a simple custom structural directive that handles additional inputs. We've covered the syntactic sugar that stands behind the structural directive, and how it translates into directive's inputs. In the second part, I will show you how to add some additional functionalities to the custom structural directive and present ways to improve type checking experience for the custom directive's templates.&lt;/p&gt;

&lt;p&gt;In case you have any questions, you can always tweet or DM me at &lt;a href="https://twitter.com/ktrz__"&gt;@ktrz&lt;/a&gt;. I'm always happy to help!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This Dot Labs is a development consultancy focused on providing staff augmentation, architectural guidance, and consulting to companies.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We help implement and teach modern web best practices with technologies such as React, Angular, Vue, Web Components, GraphQL, Node, and more.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>directive</category>
    </item>
    <item>
      <title>The React roadmap for beginners you never knew you needed.</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Tue, 23 Nov 2021 08:38:20 +0000</pubDate>
      <link>https://dev.to/abhirajb/the-react-roadmap-for-beginners-you-never-knew-you-needed-8ed</link>
      <guid>https://dev.to/abhirajb/the-react-roadmap-for-beginners-you-never-knew-you-needed-8ed</guid>
      <description>&lt;p&gt;One of the most widely used JavaScript libraries for developing dynamic web apps is React. It has a sizable community and a dedicated development team behind it.&lt;br&gt;
Although React is reasonably simple on its own, learning just one library is insufficient, especially if you want to build a complex web app.&lt;br&gt;
In this article, I'll lay out a road map for learning how to utilise React to build real-world applications. I'll go over the key React principles and libraries you should be familiar with.&lt;/p&gt;

&lt;p&gt;Below listed are some of the languages and frameworks you will have to be familiarized before getting into React.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Basics

&lt;ol&gt;
&lt;li&gt;HTML

&lt;ul&gt;
&lt;li&gt;Learn the basics of HTML&lt;/li&gt;
&lt;li&gt;Make a few pages as an exercise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSS

&lt;ul&gt;
&lt;li&gt;Learn the basics of CSS&lt;/li&gt;
&lt;li&gt;Style pages from previous step&lt;/li&gt;
&lt;li&gt;Build a page with grid and flexbox&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JS Basics

&lt;ul&gt;
&lt;li&gt;Get familiar with the syntax&lt;/li&gt;
&lt;li&gt;Learn basic operations on DOM&lt;/li&gt;
&lt;li&gt;Learn mechanisms typical for JS (Hoisting, Event Bubbling, Prototyping)&lt;/li&gt;
&lt;li&gt;Make some AJAX (XHR) calls&lt;/li&gt;
&lt;li&gt;Learn new features (ECMA Script 6+)&lt;/li&gt;
&lt;li&gt;Additionally, get familiar with the jQuery library&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;General Development Skills

&lt;ol&gt;
&lt;li&gt;Learn GIT, create a few repositories on GitHub, share your code with other people&lt;/li&gt;
&lt;li&gt;Know HTTP(S) protocol, request methods (GET, POST, PUT, PATCH, DELETE, OPTIONS)&lt;/li&gt;
&lt;li&gt;Don't be afraid of using Google, &lt;a href="http://www.powersearchingwithgoogle.com/"&gt;Power Searching with Google&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get familiar with terminal, configure your shell (bash, zsh, fish)&lt;/li&gt;
&lt;li&gt;Read a few books about algorithms and data structures&lt;/li&gt;
&lt;li&gt;Read a few books about design patterns&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Learn React on &lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;official website&lt;/a&gt; or complete some &lt;a href="https://egghead.io/courses/the-beginner-s-guide-to-react"&gt;courses&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get familiar with tools that you will be using

&lt;ol&gt;
&lt;li&gt;Package Managers

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yarnpkg.com/lang/en/"&gt;yarn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pnpm.js.org/"&gt;pnpm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Task Runners

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.npmjs.com/misc/scripts"&gt;npm scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gulpjs.com/"&gt;gulp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rollupjs.org/guide/en"&gt;Rollup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parceljs.org/"&gt;Parcel&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Styling

&lt;ol&gt;
&lt;li&gt;CSS Preprocessor

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sass-lang.com/"&gt;Sass/CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://postcss.org/"&gt;PostCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lesscss.org/"&gt;Less&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stylus-lang.com/"&gt;Stylus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSS Frameworks

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://materializecss.com/"&gt;Materialize&lt;/a&gt;, &lt;a href="https://material-ui.com/"&gt;Material UI&lt;/a&gt;, &lt;a href="https://getmdl.io/"&gt;Material Design Lite&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bulma.io/"&gt;Bulma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semantic-ui.com/"&gt;Semantic UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSS Architecture

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://getbem.com/"&gt;BEM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://acss.io/"&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stubbornella/oocss/wiki"&gt;OOCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smacss.com/"&gt;SMACSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://suitcss.github.io/"&gt;SUITCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSS in JS

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.styled-components.com/"&gt;Styled Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://formidable.com/open-source/radium/"&gt;Radium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emotion.sh/"&gt;Emotion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cssinjs.org/"&gt;JSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Khan/aphrodite"&gt;Aphrodite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;State Management

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/faq-state.html"&gt;Component State&lt;/a&gt;/&lt;a href="https://reactjs.org/docs/context.html"&gt;Context API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;Async actions (Side Effects)

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/reduxjs/redux-thunk"&gt;Redux Thunk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Lukasz-pluszczewski/redux-better-promise"&gt;Redux Better Promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux-saga.js.org/"&gt;Redux Saga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux-observable.js.org"&gt;Redux Observable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Helpers

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rematch.gitbooks.io/rematch/"&gt;Rematch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/reduxjs/reselect"&gt;Reselect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data persistence

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rt2zz/redux-persist"&gt;Redux Persist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adam-golab/redux-phoenix"&gt;Redux Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux-form.com"&gt;Redux Form&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mobx.js.org/"&gt;MobX&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Type Checkers

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/typechecking-with-proptypes.html"&gt;PropTypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flow.org/en/"&gt;Flow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Form Helpers

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redux-form.com"&gt;Redux Form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jaredpalmer/formik"&gt;Formik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formsy/formsy-react"&gt;Formsy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/final-form/final-form"&gt;Final Form&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Routing

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reacttraining.com/react-router/"&gt;React-Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://router5.js.org/"&gt;Router5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/faceyspacey/redux-first-router"&gt;Redux-First Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reach.tech/router/"&gt;Reach Router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;API Clients

&lt;ol&gt;
&lt;li&gt;REST

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Fetch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://visionmedia.github.io/superagent/"&gt;SuperAgent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/axios/axios"&gt;axios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GraphQL

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.apollographql.com/docs/react/"&gt;Apollo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://facebook.github.io/relay/"&gt;Relay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FormidableLabs/urql"&gt;urql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Utility Libraries

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://momentjs.com/"&gt;Moment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JedWatson/classnames"&gt;classnames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://numeraljs.com/"&gt;Numeral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://reactivex.io/"&gt;RxJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://facebook.github.io/immutable-js/"&gt;ImmutableJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ramdajs.com/"&gt;Ramda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Testing

&lt;ol&gt;
&lt;li&gt;Unit Testing

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://facebook.github.io/jest/"&gt;Jest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://airbnb.io/enzyme/"&gt;Enzyme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sinonjs.org/"&gt;Sinon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chaijs.com/"&gt;Chai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/avajs/ava"&gt;AVA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/substack/tape"&gt;Tape&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;End to End Testing

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.seleniumhq.org/"&gt;Selenium&lt;/a&gt;, &lt;a href="http://webdriver.io/"&gt;Webdriver&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cypress.io/"&gt;Cypress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pptr.dev/"&gt;Puppeteer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cucumber/cucumber-js"&gt;Cucumber.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nightwatchjs.org/"&gt;Nightwatch.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integration Testing

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://karma-runner.github.io/"&gt;Karma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Internationalization

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yahoo/react-intl"&gt;React Intl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react.i18next.com/"&gt;React i18next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Server Side Rendering

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jaredpalmer/after.js"&gt;After.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alidcastano/rogue.js"&gt;Rogue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Static Site Generator

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gatsbyjs.org/"&gt;Gatsby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Now you can follow the below provided roadmap to start your journey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_96obMgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4hfhxyuwbcrmvyeoyl3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_96obMgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4hfhxyuwbcrmvyeoyl3.jpg" alt="rd" width="880" height="1084"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading.
&lt;/h2&gt;

&lt;p&gt;Until next time,&lt;br&gt;
&lt;a href="https://abhiraj.glitch.me"&gt;Abhiraj&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JavaScript ‚Äî Call stack , event loop and callback queue</title>
      <author>Karthikeyan</author>
      <pubDate>Tue, 23 Nov 2021 08:24:00 +0000</pubDate>
      <link>https://dev.to/imkarthikeyan/javascript-call-stack-event-loop-and-callback-queue-1ioo</link>
      <guid>https://dev.to/imkarthikeyan/javascript-call-stack-event-loop-and-callback-queue-1ioo</guid>
      <description>&lt;p&gt;When I started as a beginner in JS, I had some difficulties in figuring out the concepts which I am about to say. I think I have figured it out. Thanks to talk given by &lt;strong&gt;Philip Roberts at JS conf EU&lt;/strong&gt;. I will be sharing the things which I understood in the below article. This article will be about how the javascript program works under the hood.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/2GjgvS5vA6y08/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2GjgvS5vA6y08/giphy.gif" alt="https://media.giphy.com/media/2GjgvS5vA6y08/giphy.gif" width="500" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First things first¬†, what is Javascript¬†?&lt;/p&gt;

&lt;p&gt;Javascript is a &lt;strong&gt;single threaded&lt;/strong&gt;, &lt;strong&gt;non-blocking&lt;/strong&gt;, &lt;strong&gt;concurrent&lt;/strong&gt; and &lt;strong&gt;asynchronous language&lt;/strong&gt;. It has single call stack and executes the program concurrently. But how¬†? Let‚Äôs talk about that. I will be starting with some of the terminologies which will clear your doubts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rRQk7nPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637630893034/Tu5FTDf3Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rRQk7nPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637630893034/Tu5FTDf3Q.png" alt="image.png" width="752" height="568"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; call stack&lt;/li&gt;
&lt;li&gt; callback queue&lt;/li&gt;
&lt;li&gt; event loop&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Call Stack¬†:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CallStack is generally a data structure which consists of active sub-routines in the computer program. So when a program executes, if it sees a &lt;strong&gt;function call&lt;/strong&gt;, then it is &lt;strong&gt;pushed onto the stack&lt;/strong&gt; and once the &lt;strong&gt;function finishes the execution&lt;/strong&gt; or returns a value, then it will be &lt;strong&gt;popped out from the stack&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;let‚Äôs see how a below piece of code is being executed by JS behind the scenes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see a video which shows the execution of the program&lt;/p&gt;

&lt;p&gt;After we run the program¬†, &lt;code&gt;console.log("data")&lt;/code&gt;and since it returns value &lt;code&gt;data&lt;/code&gt; it will be popped out from the stack. Followed by that, &lt;code&gt;bar()&lt;/code&gt; gets pushed onto the stack which in turn prints inside &lt;code&gt;console.log()&lt;/code&gt; function which is present inside the &lt;code&gt;bar()&lt;/code&gt; function definition. After this &lt;code&gt;foo()&lt;/code&gt; gets pushed onto the stack which in turn executes &lt;code&gt;console.log("foo")&lt;/code&gt; then pops the &lt;code&gt;foo&lt;/code&gt; from the stack and finally &lt;code&gt;bar&lt;/code&gt; gets popped off from the stack&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Call stack ( total call stack frames 16000 )&lt;/strong&gt; goes out of the range in case of the recursive function call which might be caught in the endless loop.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Uea0sl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637633082591/81rLlZfOa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Uea0sl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637633082591/81rLlZfOa.png" alt="image.png" width="693" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#heap"&gt;
  &lt;/a&gt;
  Heap:
&lt;/h4&gt;

&lt;p&gt;Objects are allocated in a heap which is just a name to denote a large mostly unstructured region of memory.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#call-back-queue%C2%A0"&gt;
  &lt;/a&gt;
  Call back queue¬†:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Call back queue or message queue&lt;/strong&gt; contains the list of messages to be processed and their associated call back functions. The messages are queued in response of an external events ( Like response after ajax call or response from the click event )¬†. As the external events are web apis which are not part of the V8 runtime¬†, when the call stack encounters it pushes to another block where it starts to execute and pushes to callback queue when it receives the response or the timer is finished.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qi40BhJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637633101541/B1RFnlMsR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qi40BhJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637633101541/B1RFnlMsR.png" alt="image.png" width="700" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the above screenshot, set timeout function executes for &lt;code&gt;500ms&lt;/code&gt; then it pushes to call back queue which it turn pushed on to the call stack by the technique called &lt;code&gt;event loop&lt;/code&gt; which we will talking about soon.&lt;/p&gt;

&lt;p&gt;Since there is no &lt;code&gt;console.log()&lt;/code&gt; messages inside the call back¬†, it will just execute the callback in the &lt;code&gt;settimeout&lt;/code&gt; function after &lt;code&gt;500ms.&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#event-loop"&gt;
  &lt;/a&gt;
  Event loop:
&lt;/h4&gt;

&lt;p&gt;Event loop is a simple piece which puts the whole puzzle together. So when the &lt;code&gt;set timeout or click function&lt;/code&gt; is called or when pushed on to the stack¬†, after the execution it goes to the callback queue. So the event loop will be checking the &lt;code&gt;call stack and the callback queue&lt;/code&gt;¬†. If the call stack is empty¬†, then it pushes the first processed callback function present in the callback queue to the call stack. Each message is processed completely before any other message is processed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;while (queue.waitForMessage()) {   ¬†queue.processNextMessage();   }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;queue.waitForMessage()&lt;/code&gt; waits synchronously for a message to arrive if there is none currently.&lt;/p&gt;

&lt;p&gt;In web browsers, messages are added anytime an event occurs and there is an event listener attached to it. If there is no listener, the event is lost. So a click on an element with a click event handler will add a message‚Ää‚Äî‚Äälikewise with any other event.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;set timeout&lt;/code&gt; function has two arguments which has two arguments which will be the message to add it to the queue and the time value ( default¬†: 0 ). The time value represents the (minimum) delay after which the message will actually be pushed into the queue.&lt;/p&gt;

&lt;p&gt;If there are no messages in the queue then¬†, the message will be processed right after the delay. If there are messages in the queue¬†, then it will have to wait for the previous messages to be processed. For that reason, the second &lt;strong&gt;argument indicates a minimum time&lt;/strong&gt; and not a &lt;strong&gt;guaranteed time&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;That's pretty much it. Thank you for taking the time to read the blog post. I hope¬†, everyone understood how the javascript program works under the hood and also about the asynchronous part. If you found the post useful , add ‚ù§Ô∏è to it and let me know if I have missed something in the comments section. Feedback on the blog are most welcome.&lt;/p&gt;

&lt;p&gt;Let's connect on twitter : (&lt;strong&gt;&lt;a href="https://twitter.com/karthik_coder"&gt;https://twitter.com/karthik_coder&lt;/a&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/eujb1tWaj3ZxS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/eujb1tWaj3ZxS/giphy.gif" alt="https://media.giphy.com/media/eujb1tWaj3ZxS/giphy.gif" width="500" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D"&gt;loupe‚Ää‚Äî‚ÄäJs visualisation tool by Philip roberts&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"&gt;Event loop‚Ää‚Äî‚Äämdn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;What the heck is event loop¬†?&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Using Axios with React to Make API Requests</title>
      <author>Yatharth Nigam</author>
      <pubDate>Tue, 23 Nov 2021 08:22:55 +0000</pubDate>
      <link>https://dev.to/yatharthnigam/using-axios-with-react-to-make-api-requests-2jn2</link>
      <guid>https://dev.to/yatharthnigam/using-axios-with-react-to-make-api-requests-2jn2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;I was working on a project that uses React and Material UI. For this project, I needed to fetch data from the server and I encountered some difficulties trying to fetch data from API. After some research and practice, I understood the concept and was able to fetch data using Axios.&lt;br&gt;
So I've written this post to get you started with basics of Axios.&lt;br&gt;
At the end of this article, you will be able to get data from a server.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#axios"&gt;
  &lt;/a&gt;
  Axios
&lt;/h3&gt;

&lt;p&gt;Axios is a simple promise based HTTP client for the browser and node.js. Axios provides a simple to use library in a small package with a very extensible interface.&lt;br&gt;
Axios is a Promised-based JavaScript library that is used to send HTTP requests. You can think of it as an alternative to JavaScript's native fetch() function.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make XMLHttpRequests from the browser&lt;/li&gt;
&lt;li&gt;Make http requests from node.js&lt;/li&gt;
&lt;li&gt;Supports the Promise API&lt;/li&gt;
&lt;li&gt;Intercept request and response&lt;/li&gt;
&lt;li&gt;Transform request and response data&lt;/li&gt;
&lt;li&gt;Cancel requests&lt;/li&gt;
&lt;li&gt;Automatic transforms for JSON data&lt;/li&gt;
&lt;li&gt;Client side support for protecting against XSRF&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#installing"&gt;
  &lt;/a&gt;
  Installing
&lt;/h3&gt;

&lt;p&gt;Using npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ yarn add axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#where-do-we-make-http-request"&gt;
  &lt;/a&gt;
  Where do we make http request?
&lt;/h3&gt;

&lt;p&gt;In a class based component, requests are made in componentDidMount() lifecycle while in a functional component, requests are made in react lifecycle hooks i.e. useEffect.&lt;br&gt;
Axios supports several request methods such as get, post, delete, put, etc.&lt;br&gt;
Our major focus will be on get and post method which is commonly used.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fetching-data-in-axios-using-the-get-method"&gt;
  &lt;/a&gt;
  Fetching data in Axios using the Get method
&lt;/h3&gt;

&lt;p&gt;Axios offers a get method with at least one argument (url).&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;axios.get('url')
.then(response =&amp;gt; {
console.log(response);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Axios uses promises and get returns a promise 'then' which is a method which takes a function as the input and the function will get executed once the promise resolves, that is when the data from the server is there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XNyKn2Zh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvwrccyol0rkcjm9p0k7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XNyKn2Zh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvwrccyol0rkcjm9p0k7.png" alt="Fetch using promise" width="545" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above code is a simple API fetch using axios. Now, let's explain:&lt;/p&gt;

&lt;p&gt;Axios uses promises. get returns a promise 'then' which is a method which takes a function as the input and the function will get executed once the promise resolves, i.e. when the data from the server is there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjjwnNVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f3ru1lupa1vl6xwskdy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjjwnNVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f3ru1lupa1vl6xwskdy.png" alt="Calling in useEffect" width="517" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the code, we create an arrow function where the fetched data from the server is passed in into a variable called getApi and called it in the lifecycle hooks. The second parameter [ ] empty array was passed so that the lifecycle hooks runs just once.&lt;/p&gt;

&lt;p&gt;Among the response gotten back from the API, we only need to the data, that is why we stored response.data is passed in the state.&lt;/p&gt;

&lt;p&gt;The output will be:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNDOl4m6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqlzk7snoms84loer5hg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNDOl4m6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqlzk7snoms84loer5hg.png" alt="Output in console" width="880" height="171"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error Handling
&lt;/h3&gt;

&lt;p&gt;If we make any error in the URL or in the syntax, how we'll handle that error.&lt;/p&gt;

&lt;p&gt;To handle this error, add a catch method which catches any error you get, after the then method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.catch ((error) {
console.log(error)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetch-data-from-the-server-using-the-asyncawait-function"&gt;
  &lt;/a&gt;
  Fetch data from the server using the async/await function
&lt;/h3&gt;

&lt;p&gt;To use the async/await syntax, we need to wrap the axios.get() function call within an async function. We encase the method call with a try‚Ä¶catch block so that we can capture any errors. The variable ‚Äúresponse‚Äù that receives the http data had to use await to ensure the asynchronous data was received before continuing.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JF-wOgXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/loep98ok24goulwszlzd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JF-wOgXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/loep98ok24goulwszlzd.png" alt="Fetch using async/await" width="663" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this post, you have learned how to make http requests to the server using axios and we have been able to get data from server using both promise and async/await. I am sure this article has made you axios journey a nice one. You can got to &lt;a href="https://axios-http.com/"&gt;Axios&lt;/a&gt; to read the official documentation and learn more about it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 things I struggled with when learning React with a Vue background</title>
      <author>Jeremy</author>
      <pubDate>Tue, 23 Nov 2021 07:49:41 +0000</pubDate>
      <link>https://dev.to/jeremyling/5-things-i-struggled-with-when-learning-react-with-a-vue-background-1fed</link>
      <guid>https://dev.to/jeremyling/5-things-i-struggled-with-when-learning-react-with-a-vue-background-1fed</guid>
      <description>&lt;h2&gt;
  &lt;a href="#initial-state"&gt;
  &lt;/a&gt;
  Initial state
&lt;/h2&gt;

&lt;p&gt;Having worked with Vue for the majority of the past 3 years, I got very used to the Vue syntax and libraries and became very comfortable with the framework. Vue was easy to pick up mainly due to two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A clearly segmented component structure - HTML template, JS and CSS.&lt;/li&gt;
&lt;li&gt;Intuitively named options within the JS segment - components, props, data, computed, methods, watch and the lifecycle hooks.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Arguably, anyone with a HTML/CSS background studying a well-written Vue component could make a good guess of what it does and how it works without referring to documentation. A relative beginner in programming would also find the intuitively named options very helpful. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mutation"&gt;
  &lt;/a&gt;
  Mutation
&lt;/h2&gt;

&lt;p&gt;Fast forward to a year ago, my knowledge of React was limited to the few articles I read comparing Vue and React and which to use (there are many and mostly not immediately appreciable if you have never used both) and some dabbling with creating simple components in React following the getting started guide. It all seemed fairly straightforward. I mean, how different can the two frameworks be, right? &lt;/p&gt;

&lt;p&gt;Then came the opportunity to really pick React up when I moved jobs. And I was stupefied.&lt;/p&gt;

&lt;p&gt;This article aims to help others (with and without a Vue background) understand React &lt;strong&gt;functional components&lt;/strong&gt; and to get up to speed with React concepts more quickly. It does not attempt to compare Vue and React as competing frameworks and its intention is not to rank one over the other. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-5-things-i-struggled-with"&gt;
  &lt;/a&gt;
  The 5 things I struggled with
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-code-structure"&gt;
  &lt;/a&gt;
  1. Code structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---FWVYEnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z5y9rbrqqppnxx6sctn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---FWVYEnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z5y9rbrqqppnxx6sctn.jpg" alt="Code structure: Vue vs React" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Vue, there are three segments to every component: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; (HTML/JSX), &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; (JS structured within intuitively named options), &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; (CSS). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is very similar to a typical HTML page's layout, albeit with style in the "footer" instead of "head".&lt;/p&gt;

&lt;p&gt;In React functional components, the main underlying key is that component code runs sequentially from top to bottom, like a typical JS script, and returns a value, usually HTML/JSX. Coming from Vue, the structure looked like: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One big mess (JS - unstructured interspersion of hooks and methods), &lt;/li&gt;
&lt;li&gt;return (HTML/JSX)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At first impressions, without a fixed structure for the JS segment, trying to understand code written by others was not easy, especially if there were no comments. It did not help that the built-in hooks are named so technically (&lt;code&gt;useEffect&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt;) and that it is impossible to understand what the second argument in the aforementioned hooks was for without referring to documentation. So while these hooks are more flexible and hence reusable than their Vue counterparts (&lt;code&gt;watch&lt;/code&gt; - &lt;code&gt;useEffect&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt; - &lt;code&gt;useMemo&lt;/code&gt; and &lt;code&gt;useCallback&lt;/code&gt;, &lt;code&gt;mounted&lt;/code&gt; - hooks with an empty second argument), they are also much less interpretable.&lt;/p&gt;

&lt;p&gt;That said, as I started writing my own components, I began to realise that while there was no fixed structure, there were certain rules (such as the Rules of Hooks) that made my code conform to a non-explicitly defined structure. In all my components, I tended to define all states used within the component and place all setup code just below. Following that, I found myself structuring the code in blocks of logical concerns, very similarly to how I structured my &lt;code&gt;methods&lt;/code&gt; option in Vue. &lt;/p&gt;

&lt;p&gt;I then realised that what looked to be one big mess to my uninitiated self, actually had a general structure across projects - I just needed to understand the functionality and use cases of hooks more intimately before I could decipher the React component structure. And this is not a steep learning curve if you already understand basic computing concepts (side effects, memoization, callbacks).&lt;/p&gt;

&lt;p&gt;For those coming from Vue, here's a quick glossary to help understand how certain hooks translate to Vue concepts.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;React Hook&lt;/th&gt;
&lt;th&gt;Vue option&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;useState&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;data&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;useEffect(, [x])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;watch&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;useCallback(, [x])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;computed&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;useMemo(, [x])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;computed&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;useEffect(, [])&lt;/code&gt;, &lt;code&gt;useCallback(, [])&lt;/code&gt;, &lt;code&gt;useMemo(, [])&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mounted&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;return function called within &lt;code&gt;useEffect(... return function(), [])&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unmounted&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;And for those who don't have a background in Vue, here's a summary of what I learned about code structure in React functional components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some methods, constants and styles can be defined outside the scope of a component (typically at the top of a file). These are optimisations so that said objects are not re-created on every render.&lt;/li&gt;
&lt;li&gt;Components usually begin with retrieving props, defining states and importing reusable methods/helpers. This is very similar to how JS files are structured.&lt;/li&gt;
&lt;li&gt;Setup methods usually come next: setting up states on mounting, computing derived values, fetching data.&lt;/li&gt;
&lt;li&gt;All other logic used within the component - hopefully organised by logical concerns.&lt;/li&gt;
&lt;li&gt;If you're wondering where CSS comes in, React doesn't dictate how CSS is used. You are free to import CSS files, define inline styles or use a CSS-in-JS library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-lifecycle-methods"&gt;
  &lt;/a&gt;
  2. Lifecycle methods
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1aj9VsGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ki5zdfc4vvnxiyw4e8v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1aj9VsGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ki5zdfc4vvnxiyw4e8v.jpg" alt="Lifecycle methods: Vue vs React" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of Vue's key concepts that I truly appreciate is the clear definition and documentation of the lifecycle of a component. React does attempt to document this as well, but not to the extent that Vue does, and the API only works for class components. With React's shift towards functional components, lifecycle methods are no longer as easily accessible.&lt;/p&gt;

&lt;p&gt;When I started out with React, one of the first concepts I wanted to understand was the React component lifecycle. Having got used to Vue's lifecycle hooks, I was looking for something similar in React functional components, but there is no documentation for this within the State and Lifecycle section of the official React guides. And even for class components, React does not make the entire lifecycle accessible like Vue does.&lt;/p&gt;

&lt;p&gt;However, in Vue, the lifecycle methods I tend to use the most are mounted and unmounted. So, I was really looking for an equivalent in React functional components. On further Googling, I found out that the useEffect hook could function the same way that the mounted/unmounted hooks do in Vue. While not as intuitive, it was merely a matter of adapting to the React API. At least I had a solution for my setup and teardown methods.&lt;/p&gt;

&lt;p&gt;In short, what I learned here was that in React functional components, the setup phase (usually created/mounted in Vue) can be written with useEffect(, []), while the teardown phase (unmounted in Vue) can be written with useEffect(... return function(), []). While other lifecycle methods cannot be accessed in React, they are probably not required frequently enough to be a big bother.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-twoway-binding-vs-oneway-binding"&gt;
  &lt;/a&gt;
  3. Two-way binding vs one-way binding
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BgvH_i2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pxq76q4lyej103qe5m6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BgvH_i2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pxq76q4lyej103qe5m6.jpg" alt="Data flow: Vue vs React" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Vue, the v-model directive allows for two-way binding for input elements. From a purely lazy (perhaps also maintainability) standpoint, this saves on a lot of boilerplate code. While I don't want to get into the debate about whether two-way binding or one-way binding is better, it was a definite annoyance for me to have to write what seemed like boilerplate methods to update state when switching to React. This is compounded by the fact that doing React right meant not mutating states but creating copies and re-setting states. This meant that the code for forms in React was much longer than the equivalent in Vue.&lt;/p&gt;

&lt;p&gt;For those without context, one of React's core facets is one-way data binding, which in short means that data flows only in one direction. This allows React to more effectively determine whether a state has changed and what caused the change. &lt;/p&gt;

&lt;p&gt;In complex Vue components, you would occasionally run into situations where the DOM does not update despite an observable being updated. Rare, but it happens and is annoying to debug. However, one-way data binding in React eliminates such issues because you trigger a DOM update manually every time you call a setState. The downside to this is that you have to write the code to trigger the re-render (setState), something you don't have to do when using Vue. &lt;/p&gt;

&lt;p&gt;In truth, this was largely just an annoyance when I first started out with React. I have since built reusable components and I no longer write boilerplate for forms any more. In fact, with &lt;a href="https://formblob.com"&gt;FormBlob&lt;/a&gt;, I can create any form I need in 2 minutes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-scoped-styling-css"&gt;
  &lt;/a&gt;
  4. Scoped Styling (CSS)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhyvSVuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnamelms8e989ow7xv36.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhyvSVuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnamelms8e989ow7xv36.jpg" alt="Scoped styles: Vue vs React" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scoped styling in Vue is very straightforward. If you're familiar with HTML/CSS, it all comes very naturally - define a class on your HTML element, set CSS styles for that class in the &lt;code&gt;&amp;lt;style scoped&amp;gt;&lt;/code&gt; segment.&lt;/p&gt;

&lt;p&gt;Scoped styling is useful to ensure that styles are only applied within the component it is defined in. This allows us to reuse class names in multiple components without being concerned that styles defined elsewhere would interfere. This is especially powerful for building component libraries that are intended for use across multiple projects.&lt;/p&gt;

&lt;p&gt;With React, there is no pre-defined recommendation on how CSS is applied. You are free to import CSS files, use inline styles or use CSS-in-JS libraries. Some CSS-in-JS libraries such as jss or emotion have become very popular and are used in many React projects. However, as with any third party library, there is always a learning curve, especially when defining reusable styles.&lt;/p&gt;

&lt;p&gt;Before I get berated for being too spoilt, remember that this is my experience moving from Vue to React. In Vue, I did not have to re-learn any Vue-specific style libraries and I could achieve scoped styling with reusable class names out of the box using vanilla CSS. In React, the process to achieve a similar result is arguably more tedious, whether it is writing your own CSS file or using third party libraries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-reference-resources-and-libraries"&gt;
  &lt;/a&gt;
  5. Reference resources and libraries
&lt;/h3&gt;

&lt;p&gt;One of the arguments going for React is always that React, being the more popular framework has deeper online resources and support that you can tap into. In my experience, having only started working with React after the launch of functional components, this is not true. &lt;/p&gt;

&lt;p&gt;React, having been around for so long with so many versions (it's at v17 now) has a deep resource of outdated solutions and dated libraries. I find that it is considerably easier to find solutions and relevant libraries for Vue (only at v3 now) than for React. Since working with React, I find myself spending significantly more time Googling to find a solution that solves my needs than when I was working with Vue. From a personal point of view, it is something I struggled with when starting out in React. A large number of solutions that I stumble upon simply won't work and it takes more time to find something that does. But that may be down to my inadequate Googling skills!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I have used both Vue and React to build complex apps and to be honest, I'm now more familiar with React having used it on a day to day basis for the past year. If I were to start a new project now, I would do it with React simply because I'd be able to deliver a complete app much quicker in React than in Vue right now. I have since got much more comfortable with React and its quirks and have no strong preference for either Vue or React as a framework.&lt;/p&gt;

&lt;p&gt;This article is a personal anecdote and is not meant to be an objective comparison between Vue and React. My intent here is to share what I've learnt transitioning from Vue to React and hopefully help others who are doing the same, or who are looking to learn React. I welcome any views and experiences contrary to what I have experienced and it is not my intention to make any sweeping statement or claim (even if within the article it sounds that way). I am a student of programming and always will be and am glad to learn from anyone.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Prototype Pattern | Design Patterns in Java</title>
      <author>coder4life</author>
      <pubDate>Tue, 23 Nov 2021 07:39:30 +0000</pubDate>
      <link>https://dev.to/coder4_life/prototype-pattern-design-patterns-in-java-4pnd</link>
      <guid>https://dev.to/coder4_life/prototype-pattern-design-patterns-in-java-4pnd</guid>
      <description>&lt;p&gt;Java implementation of the Prototype Pattern, with which you can clone full objects. This is implementation of the Cloneable interface in Java but it could have to achieve the same goal of cloning objects.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QgQcQim5qqo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>programming</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Best Web Development Company NYC</title>
      <author>TechAvidus</author>
      <pubDate>Tue, 23 Nov 2021 07:39:16 +0000</pubDate>
      <link>https://dev.to/techavidus/best-web-development-company-nyc-397p</link>
      <guid>https://dev.to/techavidus/best-web-development-company-nyc-397p</guid>
      <description>&lt;p&gt;New York is the heart of all the technological advancements, and for great reasons. Web Development Company NYC is the ideal choice for many companies. The region has also been home to a variety of startups or business partnerships where millions of customers eagerly awaiting the launch of the next major digital platform. You can choose an NYC web developer or a firm according to how they will represent your business on the internet. It is vital to develop an easy-to-use website that will increase the experience for customers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-is-web-development"&gt;
  &lt;/a&gt;
  What exactly is Web Development?
&lt;/h2&gt;

&lt;p&gt;Web development is inextricably linked to the design of the features and functions of apps and websites (often known as "web design") however, the "web design" or "web development" phrase is generally applied to the development and programming of apps and websites.&lt;/p&gt;

&lt;p&gt;In a broad way, the development of a website covers all actions, updates, as well as processes required to create and maintain websites to ensure their efficiency, user experience, and speed are at the highest level.&lt;/p&gt;

&lt;p&gt;In the current shift from in-person interaction to online communication it is crucial that businesses are an integral part of the digital revolution. The objective is to increase the potential for market growth as well as brand value and customer loyalty with an outstanding website developed by an expert &lt;a href="https://www.techavidus.com/web-development-new-york"&gt;Web Development Company NYC&lt;/a&gt;. A website can be a portal to understanding them is the value of services, products, and effectiveness the business can offer in a crowded, competitive market.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-vs-backend-development"&gt;
  &lt;/a&gt;
  FRONT-END VS BACK-END DEVELOPMENT
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Front-end&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Front-end also referred to as client-side development, is employed to construct an overall layout, design, as well as interaction of a site. Front-end development helps determine how websites display text, videos, images as well as graphic images. Also, it defines the front-facing interactions that include minimizing and maximizing visual assets, including texts, and filling out forms fields. Front-end development is based on three programming languages: HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Back-end&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Back-end or server-side development is the process of creating an online infrastructure and the behind-the-scenes functions of a website, to ensure that it operates smoothly. The back-end comprises the server on which the website is hosting on and an application that runs the website as well as a database that stores the site's information. Developers may use a range of programming languages to assist in back-end development as servers can be programmed to work with virtually any programming language site data. Developers are able to use a variety of programming languages to aid in back-end development as servers can be set up to be able to comprehend nearly any programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-choose-us-for-web-development-company-nyc"&gt;
  &lt;/a&gt;
  Why Choose US for Web Development Company NYC
&lt;/h2&gt;

&lt;p&gt;We're experienced in every aspect of web development to assist our clients in reaching their maximum potential. Make your company online, make more sales, and find more leads.&lt;/p&gt;

&lt;p&gt;We employ a holistic method of web development, starting with mark-up and coding, all the way up to content creation and web design. We take pride in being an experienced team of experts working in tandem. Our aim is to build your website, not only to get higher rankings in search results but also to provide the best experience possible to your customers.&lt;/p&gt;

&lt;p&gt;Our experienced Web Developer NYC, provides cutting-edge, technologically-driven solutions to meet your web development requirements. The experts at Our Web Development Company NYC, develop and deliver 100% professional and performance-oriented Web development solutions. Contact us now.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>webdevelopmentcompany</category>
      <category>web</category>
    </item>
    <item>
      <title>Add a video background in HTML/CSS</title>
      <author>Ustariz Enzo</author>
      <pubDate>Tue, 23 Nov 2021 07:28:58 +0000</pubDate>
      <link>https://dev.to/ziratsu/add-a-video-background-in-htmlcss-2l0e</link>
      <guid>https://dev.to/ziratsu/add-a-video-background-in-htmlcss-2l0e</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;Here's a simple tutorial on how to add a &lt;em&gt;video background&lt;/em&gt; to your website ! You'll learn all the tips and tricks to make it responsive. &lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4UK6iQ_jkcQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-basic-structure-of-your-code"&gt;
  &lt;/a&gt;
  1. The basic structure of your code.
&lt;/h2&gt;

&lt;p&gt;Let's imagine a restaurant asked us to create a nice website. Create a HTML file, with only the head for now. You can add a font that you like or use the one I found:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Video Background&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com"&lt;/span&gt; &lt;span class="na"&gt;crossorigin&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600&amp;amp;family=Roboto&amp;amp;display=swap"&lt;/span&gt;
      &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a CSS file, in which you'll simply reset the values and add the font for now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Playfair&lt;/span&gt; &lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-add-the-video-to-your-html"&gt;
  &lt;/a&gt;
  2. Add the video to your HTML!
&lt;/h2&gt;

&lt;p&gt;Now you need to create a body, inside of which will be the video tag, which will ask for a source which you can add as a tag, however you need to add some attributes like &lt;em&gt;autoplay&lt;/em&gt; (it'll play the video automatically), &lt;em&gt;muted&lt;/em&gt; (to mute the sound of the video if it has one) and &lt;em&gt;loop&lt;/em&gt;(it'll repeat the video infinitely):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"home"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt; &lt;span class="na"&gt;muted&lt;/span&gt; &lt;span class="na"&gt;loop&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"ressources/cooking.mp4"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll need to add the video in your ressources folder, which is what I did.&lt;/p&gt;

&lt;p&gt;As you can see, it works! However, there are scroll bars on the side and bottom of the screen and the video is too light, so that if you add text on top of it, the text will be hard to read. Let's change all of that!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-add-an-overlay-with-some-text"&gt;
  &lt;/a&gt;
  3. Add an overlay with some text.
&lt;/h2&gt;

&lt;p&gt;Let's add an overlay beneath the video that will have some text in order to showcase the restaurant:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"overlay"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"home-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;High-End Kitchen.&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"middle-line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;DISCOVER&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-lets-style-the-page"&gt;
  &lt;/a&gt;
  4. Let's style the page!
&lt;/h2&gt;

&lt;p&gt;Go to your CSS file and start by creating a container with a height of 100vh (in order to take up the whole screen) and position relative, since some elements (children of this container) will be absolute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.home&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's deal with the video:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;video&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's now taking the full width and height of the viewport, meaning that you no longer have scroll bars on the side and bottom of the page!&lt;/p&gt;

&lt;p&gt;Now let's darken the video with the overlay:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.overlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, you can either use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%;&lt;/span&gt;
&lt;span class="nt"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt; &lt;span class="nt"&gt;top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="nt"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="nt"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="nt"&gt;right&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It does the exact same thing, since it pins your element to all corners of the screen! This is just a little trick for you to know. &lt;/p&gt;

&lt;p&gt;Now let's style the content by increasing the size of the title and the button, organising it to the middle of the screen and creating the divide vertical line between the title and the button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.home-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.home-content&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Playfair&lt;/span&gt; &lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;85px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.middle-line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.home-content&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You now have a beautiful landing page for your website with a nice high-resolution &lt;strong&gt;video background&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Check out the source code  &lt;a href="https://github.com/Ziratsu/video-background"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy coding!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Salesforce Certification Guide: Step by step Overview and Career Paths</title>
      <author>UI/UX Design Services </author>
      <pubDate>Tue, 23 Nov 2021 07:26:36 +0000</pubDate>
      <link>https://dev.to/reloadux/salesforce-certification-guide-step-by-step-overview-and-career-paths-6lm</link>
      <guid>https://dev.to/reloadux/salesforce-certification-guide-step-by-step-overview-and-career-paths-6lm</guid>
      <description>&lt;p&gt;&lt;a href="https://www.salesforce.com/"&gt;Salesforce.com&lt;/a&gt; has the top prize for its customer relationship management (CRM) products for small and medium-sized companies. However, enterprises of all sizes use Salesforce to manage their CRM. This is why you'll see Salesforce items and solutions used across a broad range of industry sectors, all the way from automobile to healthcare to non-profits in retail, media, communications, as well as finance.&lt;/p&gt;

&lt;p&gt;The first version of Salesforce was marketed as sales automation software. However, Salesforce is most well-known for its Intelligent Customers Success Platform, which provides cloud-based solutions for communities, sales marketing, service, analytics platforms apps, the Internet of things (IoT), and artificial intelligence.&lt;/p&gt;

&lt;p&gt;Salesforce also offers a range of cloud-based solutions. One of them is Heroku, which is a platform as a services (PaaS) service. Another option is Force.com, a more customized PaaS made specifically to integrate custom-built apps with Salesforce sales cloud services. Additionally, Salesforce also offers Data.com (a cloud-based business needs directory), Desk.com (a cloud-based help desk solution for small-sized enterprises) as well as Pardot (for marketing automation in the business-to-business space), and other options.&lt;/p&gt;

&lt;p&gt;In the present, with the introduction of the General Data Protection Regulation (GDPR) in May of 2018, businesses could be able to find Salesforce's offerings - which offer monitoring and tools for configuration to help ensure compliance with GDPR, especially compelling.&lt;/p&gt;

&lt;h2&gt;Salesforce certification program overview&lt;/h2&gt;

&lt;p&gt;In contrast to other programs, you won't see the hierarchy of certifications or tiers (such as professional, associate, or specialist) inside Salesforce's Salesforce certifications portfolio. The focus of Salesforce certifies focus on various roles, or tracks, which are common for Salesforce professionals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Administrators&lt;/li&gt;
&lt;li&gt;App builders&lt;/li&gt;
&lt;li&gt;Developers&lt;/li&gt;
&lt;li&gt;Architects&lt;/li&gt;
&lt;li&gt;Specialists (implementation experts)&lt;/li&gt;
&lt;li&gt;Marketers&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tkxel.com/salesforce-consulting-services/"&gt;Salesforce Consultant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pardot experts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span&gt;Salesforce currently offers 23 credentials. The majority of them are for architects and consultants.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Salesforce certification exams&lt;/h2&gt;

&lt;p&gt;The majority of Salesforce certifications are earned through passing a 60-question multiple-choice test. The certification will vary based on the exam you're looking for, and the exam will last between 90 to 120 minutes. Exams for app builders, administrators, developers, marketers, consultants, Pardot experts, and CPQ experts are very accessible, with initial attempts costing $200 and retakes costing $100. Many architect certifications specialize in architects that cost around $400 (retakes costs $200). However, the highest-level architect's certificate - the Salesforce Certified Technical Architect - requires a separate Review Board Exam and costs $6,000 (retakes are $3,000).&lt;/p&gt;

&lt;p&gt;Training is not necessary to obtain Salesforce certifications. However, it is highly recommended. Additionally, there are a few, if any, requirements for the majority of Salesforce certifications. If they are present, the requirements are different Salesforce certifications.&lt;/p&gt;

&lt;p&gt;Candidates can take proctored tests at testing locations or complete online tests at home or work. In either case, candidates need to enroll for certification tests via the Webassessor (Kryterion Global Testing Solutions ).&lt;/p&gt;

&lt;h2&gt;Salesforce Architect certifications&lt;/h2&gt;

&lt;p&gt;Salesforce has revamped its process for architect certifications in 2016 better to align them to current and upcoming requirements of customers. This means that upon going to Salesforce's Salesforce Architect Certifications page, you'll see three architect certificates that include six certifications in specialization (up from four certifications at the beginning of the year).&lt;/p&gt;

&lt;h4&gt;Salesforce Architect Certifications:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Salesforce Certified Technical Architect&lt;/li&gt;
&lt;li&gt;Salesforce Certified Application Architect&lt;/li&gt;
&lt;li&gt;Salesforce Certified System Architect&lt;/li&gt;
&lt;li&gt;Team of Certified Salesforce Consultants &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Salesforce Professional Specializations:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Salesforce Certified Data Architecture and Management Designer&lt;/li&gt;
&lt;li&gt;The Salesforce-certified Development Lifecycle Designer and the Deployment Designer&lt;/li&gt;
&lt;li&gt;Salesforce Certified Access and Identity Management Designer&lt;/li&gt;
&lt;li&gt;Salesforce Certified Integration Architecture Designer&lt;/li&gt;
&lt;li&gt;Salesforce Certified Mobile Solutions Architecture Designer&lt;/li&gt;
&lt;li&gt;Salesforce Certified Sharing and Visibility Designer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Architect certifications are arranged in an arc, and Salesforce's Architect Specialization certifications are the basis. These are the credentials for designers and some other closely related Salesforce certifications.&lt;/p&gt;

&lt;p&gt;Salesforce is adamant that designer credentials be the essential building blocks for a career as Salesforce Architect and are designed to verify certain areas of proficiency. Salesforce Domain Architect certifications - such as the Certified Application Architect and the Certified System Architect are a testament to the depth of Salesforce platform expertise in several related specializations. Domain Architect certifications can be earned when a candidate fulfills specific specifications - specifically, the four requirements for qualifications for specialization.&lt;/p&gt;

&lt;p&gt;The top of the ladder comes that of Salesforce Certified Technical architect, which is the cr√®me of the Salesforce architect portfolio. This prestigious credential is awarded to professionals who develop and implement customized solutions for customers on Salesforce's Force.com platform.&lt;/p&gt;

&lt;p&gt;To earn this title, it is necessary first to achieve both Domain Architect qualifications. After that, you'll be eligible to sit for the Salesforce Certified Technical Architect Certification Review Board Test. In the test, you'll be presented with a scenario that simulates details of the customer's requirements. You will then be required to explain and defend the architecture solution you propose to use. Candidates must sequentially finish each task and cannot proceed to the next task until the final task is complete.&lt;/p&gt;

&lt;h2&gt;Top Salesforce Consultants certifications&lt;/h2&gt;

&lt;p&gt;Salesforce provides six certifications, especially for Salesforce professionals who work in the field of customer service as well as those who design and implement Salesforce solutions within their specific specializations. The available top Salesforce Consultants certifications include the following:&lt;/p&gt;


&lt;li&gt;
&lt;b&gt;Salesforce Certified Sales Cloud Consultant&lt;/b&gt; A person who has this certification creates and develops Sales Cloud solutions, including design of interfaces and applications and design, and manages and creates analytics to track goals.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Certified Salesforce Service Cloud Consultant&lt;/b&gt; The certification recognizes those who create services for customer service centers and analytics solutions to track metrics.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Salesforce-certified Pardot Consultant&lt;/b&gt; The certification is for professionals who study the business needs requirement and then develop, create and manage Pardot solutions.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Salesforce Certified Marketing Cloud Consultant&lt;/b&gt; The certification demonstrates a person's capability to set up and deploy Salesforce Marketing Cloud Email application tools and help with platform issues.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Salesforce Certified Community Cloud Consultant&lt;/b&gt; A person with this certification implements Salesforce Communities applications and helps customers set up and manage community settings and troubleshoot issues with the platform.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Salesforce certified Field Service Lightning consultant:&lt;/b&gt; The certification is awarded to professional services who develop Salesforce services for clients and manage and configure Salesforce applications on the premises of the customer.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Salesforce Certified Einstein Analytics and Discovery Consultant&lt;/b&gt; This certification acknowledges the salesforce consultants experience designing and implementing right salesforce solution in Salesforce's Einstein Analytics and Discovery platform.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Salesforce Certified Nonprofit Cloud Consultant Certified Non-Profit Cloud Consultant&lt;/b&gt; The individuals awarded this certification possess the skills and experience in the design and implementation of Salesforce Non-Profit Cloud Solutions.&lt;/li&gt;

&lt;h2&gt;Salesforce Administration, Developer Pardot, Marketers as well as CPQ certifications&lt;/h2&gt;

&lt;p&gt;Salesforce offers a variety of certifications targeted developers and administrators, as well as for those who work with Pardot or CPQ:&lt;/p&gt;


&lt;li&gt;
&lt;b&gt;Salesforce Administrator certificates:&lt;/b&gt; This group comprises certifications such as the Salesforce Certified Administrator and the Salesforce Certified Advanced Administrator. This certification is aimed at professionals with years of experience.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Salesforce professionals:&lt;/b&gt; Who are responsible for creating reports, managing dashboards, and workflows, as well as security users, data as well as the upkeep of Salesforce applications. It is a certification for Advanced Administrators. It was specifically designed to help Salesforce administrators with extensive experience and a deep understanding of Salesforce applications and leverage features to increase efficiency. The Advanced Administrator earns the Administrator credential at a lower level as an entry-level requirement.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Salesforce Platform App Builder certification:&lt;/b&gt; Salesforce offers a single certificate for those who develop apps: the Salesforce certified Platform App Builder. This certification is specially designed for those working on the Force.com platform and creating, deploying, designing developing custom Force.com applications.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Salesforce Developer certificates:&lt;/b&gt; Three credentials are available: Salesforce Certified Platform Developer I and II and Salesforce Certified Commerce Cloud Digital transformation Developer. These developers, I and II credentials are designed for Salesforce professionals working on Salesforce's Force.com platform. The skills that are recognized as valid include creating or programming Force.com platform applications, using Visualforce and Apex to build custom apps, and the ability to create custom data models for apps and interfaces, logic, and security. Credentialed Developers II is capable of developing salesforce solutions for complex interfaces and implementing the best practices. The Commerce Cloud Digital transformation Developer has extensive experience in the development of e-commerce solutions.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Salesforce Certified Pardot Expert certifications:&lt;/b&gt; The Pardot qualifications include the certified Pardot specialist certification and the Certified Consultant (described earlier in the section Consultant). Pardot Specialist certification Pardot Specialist qualification is targeted towards professionals managing marketing workflows (build designs, develop, and build, design) using Pardot. Pardot platform.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Salesforce marketing certifications:&lt;/b&gt; Salesforce offers three marketing credentials: that of the certified Marketing Cloud consultant (described more in detail in the section Consultant) and the Certification of Marketing Cloud Social Specialist and the certified cloud email specialist. This Certified Marketing Cloud Social Specialist will target Social Studio professionals to create posts, analyze conversations, and create related reports. The Certified Marketing Cloud Email Specialist will target professionals who utilize marketing cloud email. Marketing Cloud Email application to create campaigns, create emails, implement email automation and track data from email.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Salesforce CPQ Expert Certification&lt;/b&gt; The certification recognizes experts who use Salesforce CPQ solutions and design and develop quoting flow designs to satisfy customers' needs and troubleshoot problems with the platform.&lt;/li&gt;

&lt;h2&gt;Career opportunities and training sources for Salesforce&lt;/h2&gt;

&lt;p&gt;Salesforce is the top. Number one CRM leading salesforce consultancy company globally, Salesforce experts are highly sought-after. Because of this, Salesforce professionals won't just be in demand for Salesforce expertise across all industries. They will also be required to be qualified and competent Salesforce experts in various work roles.&lt;/p&gt;

&lt;p&gt;What number of Salesforce jobs are there on the market? A quick look on Glassdoor provides more than 7,900 job opportunities in the field of Salesforce professionals, including jobs for engineers, administrators (hardware software, platforms, software IoT integration) and developers, analytics salesforce cloud specialists, technical support.&lt;/p&gt;

&lt;p&gt;There are plenty of opportunities for job seekers beyond technical positions neither. For instance, many Salesforce jobs are available to Program directors and project managers. It's safe to say that Salesforce will not go away anytime soon, and, no matter your field of expertise, there are bound to be opportunities in this area.&lt;/p&gt;

&lt;p&gt;Trailhead (which replaces Salesforce University) should be the first option when searching for Salesforce training. You'll find a variety of learning options, such as traditional classroom instruction and self-paced learning, as well as virtual classrooms as well as private workshops.&lt;/p&gt;

&lt;h4&gt;Salesforce Training courses are divided into two classes:&lt;/h4&gt;


&lt;li&gt;
&lt;b&gt;Classes offered by Cloud:&lt;/b&gt; Marketing, service, sales analytics, community as well as Salesforce1's platform.&lt;/li&gt;


&lt;li&gt;
&lt;b&gt;Classes according to the role&lt;/b&gt; Administrator developers, end-users marketers, developers, technical architects, sales and service management, and solution developers.&lt;/li&gt;

&lt;p&gt;Each certification's website offers links to recommended training and exam guides and examples of questions. This exam manual also provides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hyperlinks to relevant information.&lt;/li&gt;
&lt;li&gt;Tips sheets.&lt;/li&gt;
&lt;li&gt;User guides for people looking to test their certifications without engaging in informal education.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also get study guides and online training courses offered by third parties on the web.&lt;/p&gt;

&lt;p&gt;People looking to look at Salesforce Architect certifications should explore the Salesforce Architect Journey page and go through the accompanying (and free) exam manual before taking the exam. Specialization exam.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>HTML tags | rt</title>
      <author>Carlos Espada</author>
      <pubDate>Tue, 23 Nov 2021 07:24:04 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-rt-2mep</link>
      <guid>https://dev.to/carlosespada/html-tags-rt-2mep</guid>
      <description>&lt;p&gt;It is used to &lt;strong&gt;specify the ruby text component of a ruby annotation&lt;/strong&gt;, providing pronunciation, translation, transliteration or explanation for East Asian typography.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;rt&amp;gt;&lt;/code&gt; element must always be contained within a &lt;code&gt;&amp;lt;ruby&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;The end tag may be omitted if the &lt;code&gt;&amp;lt;rt&amp;gt;&lt;/code&gt; element is immediately followed by an &lt;code&gt;&amp;lt;rt&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;rp&amp;gt;&lt;/code&gt; element, or if there is no more content in the parent element.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;em&gt;block&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Self-closing: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Semantic value: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/tag_rt.asp"&gt;Definition&lt;/a&gt; | &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_ruby"&gt;Example&lt;/a&gt; | &lt;a href="https://caniuse.com/mdn-html_elements_rt"&gt;Support&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>rt</category>
    </item>
    <item>
      <title>3 recent trends in low-code &amp; year-end events you can't miss!</title>
      <author>Technocrat</author>
      <pubDate>Tue, 23 Nov 2021 07:19:52 +0000</pubDate>
      <link>https://dev.to/technocrat/3-recent-trends-in-low-code-year-end-events-you-cant-miss-3j0k</link>
      <guid>https://dev.to/technocrat/3-recent-trends-in-low-code-year-end-events-you-cant-miss-3j0k</guid>
      <description>&lt;p&gt;Low-code has steadily gained prominence among developers, showing that they appreciate low-code's visual builders that make complex use cases easier, with fewer lines of code.&lt;/p&gt;

&lt;p&gt;If you're a tech enthusiast, here's why you should be jumping on the low-code bandwagon:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3 recent trends in low-code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Robotic process automation (RPA)&lt;/strong&gt; - Low-code is now used to develop RPA elements that make it easy to build, deploy, and automate processes that are repetitive, high-volume, and rule-based.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Internet of things (IoT)&lt;/strong&gt;: IoT apps are complex to build, as they need to manage data from devices like sensors, communication devices, cars, and more. Low-code helps developers seamlessly build applications that can sync reams of data into context-aware visuals for end users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Augmented reality (AR)&lt;/strong&gt;: Low-code has already enabled many device experience for users. And recent progress has made even multi-interaction feasible. Users can now interact with applications via AR, VR, and more.&lt;/p&gt;

&lt;p&gt;If you love low-code, or are interested in knowing more about it, here are a few developer events you can check out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;OutSystems&lt;/strong&gt;: Outsystems is conducting an event for the developer community, to showcase their low-code platform, with feature-specific sessions, such as integration builders, plus discussions of various use cases. Click here to join: &lt;a href="https://www.outsystems.com/nextstep/osdc/#"&gt;https://www.outsystems.com/nextstep/osdc/#&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Zoho Creator&lt;/strong&gt;: Zoho Creator is hosting their virtual hackathon, inviting amateur and experienced developers to build apps on their low-code platform. They've made it even more attractive, with $10k in prize gift vouchers for the top 3 winners. Click here to register: &lt;a href="https://www.zoho.com/creator/low-code-hackathon"&gt;https://www.zoho.com/creator/low-code-hackathon&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With low-code solidifying its place as the future of software development, attending events for various platform providers helps to connect with like-minded developers and better understand the trends in this space.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Symbl.ai‚Äôs Hacktoberfest 2021: Thank you for participating!</title>
      <author>Akanksha Bhasin</author>
      <pubDate>Tue, 23 Nov 2021 07:19:06 +0000</pubDate>
      <link>https://dev.to/symbldotai/symblais-hacktoberfest-2021-thank-you-for-participating-1gcl</link>
      <guid>https://dev.to/symbldotai/symblais-hacktoberfest-2021-thank-you-for-participating-1gcl</guid>
      <description>&lt;p&gt;It was our pleasure participating in the Hacktoberfest for the first time and we were absolutely thrilled to see the participation from our fellow developers of Symbl.ai Community. üë©‚Äçüíªüë®‚Äçüíª&lt;/p&gt;

&lt;p&gt;It feels like we just announced &lt;a href="https://blog.symbl.ai/blog/hacktoberfest-with-symbl-ai-celebrate-open-source-for-a-chance-to-win-exclusive-prizes"&gt;Symbl.ai‚Äôs Hacktoberfest&lt;/a&gt; a while back, but it has officially come to a close. &lt;/p&gt;

&lt;p&gt;‚≠ê &lt;strong&gt;Some Amazing Stats&lt;/strong&gt; from our 3 repos that were a part of hacktoberfest: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/symblai/Symbl-powered-Agora-RTE-app/"&gt;Symbl Agora&lt;/a&gt; - 32 contributions (12 issues + 20 PRs)&lt;br&gt;
&lt;a href="https://github.com/symblai/symbl-twilio-video-react"&gt;Symbl Twilio&lt;/a&gt; - 20 contributions (15 issues + 5 PRs)&lt;br&gt;
 &lt;a href="https://github.com/symblai/symbl-docs/"&gt;Symbl Docs&lt;/a&gt; - 15 contributions (6 issues + 9 PRs)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On behalf of me and my Symbl.ai team, we thank each and every one of you for your contributions in open source. Your involvement and enthusiasm blew us away, with participants ranging from school kids, professionals, community members to people completely new to our ecosystem. &lt;/p&gt;

&lt;p&gt;üö© Huge shout out to our &lt;strong&gt;Project Maintainers and stakeholders&lt;/strong&gt; from Symbl.ai Team: Vishal, Shivam, Akanksha, Rishabh, Marcelo, Vaibhav, Janhavi and Pema. &lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;‚è≥ We‚Äôre currently in the process of reviewing all submissions, and everyone who completed our Hacktoberfest challenge will receive a limited edition T-shirt, and stickers depending on the contribution level. &lt;/p&gt;

&lt;p&gt;‚úÖ Participants who meet all the &lt;a href="https://github.com/symblai/symbl-docs/blob/develop/Contributing.md"&gt;requirements&lt;/a&gt; will receive an email in the coming week with a swag form and shipping instructions. We appreciate your patience ‚Äì they‚Äôre coming soon!&lt;/p&gt;

&lt;p&gt;ü§î Anything you‚Äôd like to see at Symbl.ai‚Äôs Hacktoberfest next year? Let me know via email (&lt;a href="mailto:akanksha.bhasin@symbl.ai"&gt;akanksha.bhasin@symbl.ai&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Hacktoberfest is over, but you still can contribute to our repositories anytime. Read more about us on &lt;a href="https://docs.symbl.ai/docs/"&gt;Symbl.ai Docs&lt;/a&gt; + &lt;a href="https://github.com/symblai/"&gt;Open Source repos&lt;/a&gt;.üöÄ&lt;/p&gt;

&lt;p&gt;üåª &lt;strong&gt;Join our Symbl.ai community here&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üîó Slack Group: &lt;a href="https://bit.ly/symbldotai-slack"&gt;https://bit.ly/symbldotai-slack&lt;/a&gt;&lt;br&gt;
üîó Twitter: &lt;a href="https://twitter.com/SymblDev"&gt;@SymblDev&lt;/a&gt; and &lt;a href="https://twitter.com/symbldotai"&gt;@symbldotai&lt;/a&gt;&lt;br&gt;
üîó&lt;a href="https://twitter.com/Akii_20"&gt;Akanksha Bhasin‚Äôs Twitter&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Happy Hacking! &lt;/p&gt;

&lt;p&gt;Cheers,&lt;br&gt;
Akanksha&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
