<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Explanation Of Javascript Fallback (ง'̀-'́)ง</title>
      <author>Sanskar Sahu</author>
      <pubDate>Thu, 20 Jan 2022 13:07:52 +0000</pubDate>
      <link>https://dev.to/dsmark/explanation-of-javascript-fallback-ng-ng-37f5</link>
      <guid>https://dev.to/dsmark/explanation-of-javascript-fallback-ng-ng-37f5</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
The worst accessibility sin you &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;can make is to make your navigation dependent on Javascript.&lt;/p&gt;

&lt;p&gt;The problem is, that a lot of elements considered to be good usability actually need javascript to function properly.&lt;/p&gt;

&lt;p&gt;Most of the time, this is due to the fact that HTML elements are being used for something which is not their purpose, like a button acting as a link.&lt;/p&gt;

&lt;p&gt;Now, to make these things work although there is no Javascript available we have two options&lt;/p&gt;

&lt;p&gt;Use a backend script to deal with it&lt;br&gt;
Use Javascript sorcery and fallback options to make the navigation element work in any case.&lt;br&gt;
If possible, use the first option, it is much safer and does not clutter the code unneccessarily.&lt;/p&gt;

&lt;p&gt;However if th&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
ere is no chance to change the backend code, use noscript to replace the elements with their accessible equivalents, and write the elements that cause trouble via javascript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example: Navigation button&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="button" 
onclick="self.location='http://www.netdecisions.com'" 
value="Homepage" /&amp;gt;
Backend solution(PHP):
&amp;lt;input type="submit" name="home" 
onclick="self.location='http://www.netdecisions.com;return false'" 
value="Homepage" /&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the PHP would be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?PHP if($_GET['home']=='homepage'){
echo header('http://www.netdecisions.com')}?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return false prevents javascript browsers to send the data back to the server, non-javascript browsers go back to the server, call the PHP script (of course it needs to be the form action) and set the header to load the other page.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Store Secrets in Vault with Symfony</title>
      <author>Jérôme TAMARELLE</author>
      <pubDate>Thu, 20 Jan 2022 12:56:43 +0000</pubDate>
      <link>https://dev.to/gromnan/store-secrets-in-vault-with-symfony-51ai</link>
      <guid>https://dev.to/gromnan/store-secrets-in-vault-with-symfony-51ai</guid>
      <description>&lt;p&gt;TL;DR: Integrating Vault and Symfony does not require any PHP code. Using &lt;code&gt;vault-agent&lt;/code&gt; secrets variables can be dumped into &lt;code&gt;.env&lt;/code&gt; file. Dynamic secrets can even be used as feature flags.&lt;/p&gt;




&lt;p&gt;Prisma Media's websites and applications are mostly developed using Symfony framework. Many of them require secrets values: API keys, database credentials, private certificats… they needs to be treated carefully.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-we-choose-vault-to-store-secrets"&gt;
  &lt;/a&gt;
  Why we choose Vault to store secrets
&lt;/h2&gt;

&lt;p&gt;If you are there, you may know that storing secrets in your Git repository is a terrible practice that could lead to severe security issues.&lt;/p&gt;

&lt;p&gt;Symfony introduced a &lt;a href="https://symfony.com/doc/current/configuration/secrets.html"&gt;"Vault" mecanism&lt;/a&gt; to allow storing encrypted secrets in repositories and artifacts. This is a simple solution for basic needs. That has the advantage of being independent from any external system (simplicity, scalability).&lt;/p&gt;

&lt;p&gt;We preferred HashiCorp Vault, a server solution that we deployed on our infrastructure. It is centralized, auditable and can handle dynamic secrets. This open-source product is not tied to a cloud provider. Easy to &lt;a href="https://learn.hashicorp.com/tutorials/vault/getting-started-dev-server"&gt;run locally for dev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vault works as a key-value store were secrets variables are pushed and read using a REST API.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lK-NI1Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0akevfsc2dq2qstbrx6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lK-NI1Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0akevfsc2dq2qstbrx6v.png" alt="Vault UI screenshot, editing secrets" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-need-for-frequent-reload-of-secrets"&gt;
  &lt;/a&gt;
  The need for frequent reload of secrets
&lt;/h2&gt;

&lt;p&gt;Even if we generate the most secure password for your database, it will leak somewhere: logs, APM, error pages... To be safe, credentials needs to change, change all the time.&lt;/p&gt;

&lt;p&gt;To get short-living secrets, Vault has a concept of &lt;a href="https://learn.hashicorp.com/tutorials/vault/getting-started-dynamic-secrets"&gt;Dynamic Secrets&lt;/a&gt;. Unlike key/value secrets where you had to put data into the store yourself, dynamic secrets are generated when they are accessed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPwXRefr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xj23rgejo67sj279p39o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPwXRefr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xj23rgejo67sj279p39o.png" alt="Dynamic Secrets in Vault" width="726" height="289"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not only we have to load the secrets from Vault, but also they have to be reloaded every time they change.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-config-of-symfony-with-raw-env-endraw-"&gt;
  &lt;/a&gt;
  Dynamic config of Symfony with &lt;code&gt;.env&lt;/code&gt;
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--juFWJSDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1126770148092698625/nI58pL5O_normal.png" alt="Fabien Potencier profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Fabien Potencier
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @fabpot
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      My yearly reminder that you should NOT use env vars to configure your &lt;a href="https://twitter.com/hashtag/Symfony"&gt;#Symfony&lt;/a&gt; application. Use env vars ONLY if you want to be able to change values WITHOUT redeploying your application (aka flushing the cache). Parameters ARE the way to configure applications.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:54 AM - 29 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1343842728547901441" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1343842728547901441" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1343842728547901441" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Thank you Fabien, this is exactly what I need: changing the values without redeploying the application.&lt;/p&gt;

&lt;p&gt;Unlike the YAML/PHP files in &lt;code&gt;config/&lt;/code&gt; directory, that are read only when the container cache is built, the &lt;code&gt;.env&lt;/code&gt; file are read on every HTTP request. Updating this file while the application is running is a good way to update its configuration without impacting performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vault-agent-can-write-secrets-into-a-file"&gt;
  &lt;/a&gt;
  Vault Agent can write secrets into a file
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.vaultproject.io/docs/agent"&gt;vault-agent&lt;/a&gt; is a small utility that can be used as a cache proxy for the Vault server; or as a schedule to write secrets into a file using a template (&lt;a href="https://www.vaultproject.io/docs/agent/template#non-renewable-leased-secrets"&gt;every 5 minutes, configurable&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Example of vault-agent configuration for an app running on AWS EC2 instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vault.conf

vault {
  address = "https://vault.example.com"
  retry {
    num_retries = 5
  }
}

auto_auth {
  method "aws" {
    config = {
      type = "iam"
      role = "&amp;lt;iam role&amp;gt;"
      region = "eu-west-1"
      header_value = "vault.example.com"
    }
  }
}

template {
  source = "./.env.local.ctmpl"
  destination = "./.env.local"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The template maps Vault secrets to environment variables. The &lt;a href="https://www.vaultproject.io/docs/agent/template"&gt;templating syntax&lt;/a&gt; allows some flexibility, but it looks very primitive for a developer with Twig practice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .env.local.ctmpl
# This will generate a regular .env file
APP_ENV=prod

{{ with secret "secret/example/app" }}
APP_SECRET={{ .Data.data.APP_SECRET }}
{{ end }}

# Real environment variables can be read
{{ $env := (env "ENVIRONMENT") }}
{{ with secret (printf "secret/example/%s/database" $env) }}
DB_HOST={{ .Data.data.DB_HOST }}
DB_NAME={{ .Data.data.DB_NAME }}
DB_USER={{ .Data.data.DB_USER }}
DB_PASSWORD={{ .Data.data.DB_PASSWORD }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, &lt;code&gt;vault agent&lt;/code&gt; can be launched with any process manager (supervisord or systemd).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Daemon &lt;span class="k"&gt;for &lt;/span&gt;prod server
&lt;span class="go"&gt;vault agent -config=vault.conf

&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Single run &lt;span class="k"&gt;for &lt;/span&gt;testing
&lt;span class="go"&gt;vault agent -config=vault.conf -exit-after-aut
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last security recommendation is to not write secrets on disks. We can create a &lt;code&gt;tmpfs&lt;/code&gt; volume and symlink from the project root to that volume.&lt;/p&gt;

&lt;p&gt;For kubernetes, vault-agent runs in a &lt;a href="https://www.vaultproject.io/docs/platform/k8s/injector"&gt;sidecar container&lt;/a&gt; that renders Vault secrets to a shared memory volume.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-dynamic-configuration-feature-flag"&gt;
  &lt;/a&gt;
  Use dynamic configuration feature flag
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Feature_toggle"&gt;Feature flags&lt;/a&gt; are a benefit of using Vault and supporting dynamic configuration. Even if they are not secrets, flags can be stored in Vault. With fine tuned policies, product managers could manage feature flags and being rejected from other secrets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-of-feature-flag-to-render-a-block-in-twig"&gt;
  &lt;/a&gt;
  Example of feature flag to render a block in Twig
&lt;/h3&gt;

&lt;p&gt;In this example, we create a feature flag in Vault, with is a boolean to show or hide a "sales" block on a page.&lt;/p&gt;

&lt;p&gt;Create a variable in Vault KV:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;secret/example/app/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"FEATURE_FLAG_SALES"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read this secret in the vault agent template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .env.local.ctmpl

{{ with secret "secret/example/app" }}
FEATURE_FLAG_SALES={{ .Data.data.FEATURE_FLAG_SALES }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Share the value of the variable with Twig context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/config/packages/twig.yaml&lt;/span&gt;
&lt;span class="na"&gt;twig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;feature_flag_sales&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;%env(bool:FEATURE_FLAG_SALES)%"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the variable to render the block conditionally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight twig"&gt;&lt;code&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;feature_flag_sales&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;My conditional sales block&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the &lt;code&gt;vault-agent&lt;/code&gt;.&lt;br&gt;
When the variable updated, the block is shown or hidden after few minutes.&lt;/p&gt;

</description>
      <category>symfony</category>
      <category>vault</category>
      <category>secrets</category>
      <category>prismamedia</category>
    </item>
    <item>
      <title>Accelerated Guide to Fullstack Web3 with ASS (Anchor, Solana, and Svelte) 🍑</title>
      <author>0xMuse</author>
      <pubDate>Thu, 20 Jan 2022 12:48:19 +0000</pubDate>
      <link>https://dev.to/0xmuse/accelerated-guide-to-fullstack-web3-with-ass-anchor-solana-and-svelte-1mg</link>
      <guid>https://dev.to/0xmuse/accelerated-guide-to-fullstack-web3-with-ass-anchor-solana-and-svelte-1mg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#accelerated-guide-to-fullstack-web3-with-ass-anchor-solana-and-svelte"&gt;
  &lt;/a&gt;
  Accelerated Guide to Fullstack Web3 with ASS (Anchor, Solana, and Svelte)
&lt;/h1&gt;

&lt;p&gt;In this tutorial, you'll learn how to build from scratch a fullstack Web3 dApp with the ASS stack - the hottest &lt;strong&gt;Solana&lt;/strong&gt; tech stack!&lt;/p&gt;

&lt;p&gt;You do not need any Rust experience to follow this guide, but it would be helpful to have a general understanding of how dApps work at least from a user’s perspective (all that &lt;em&gt;connect wallet&lt;/em&gt;, &lt;em&gt;approve transaction&lt;/em&gt; kind of stuff).&lt;/p&gt;

&lt;p&gt;You can find the finished project in &lt;a href="https://github.com/0xMuse/gm-solana"&gt;this repo&lt;/a&gt;. If you have any questions, ping me on Twitter &lt;a href="https://twitter.com/0xMuse"&gt;@0xMuse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll skip the further mumbling on why ASS stack is thicc because it is self-evident. Let’s dive straight in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preview-of-our-app"&gt;
  &lt;/a&gt;
  Preview of our app
&lt;/h2&gt;

&lt;p&gt;We are building an app called “gm Solana” - a guest book app where users can log in with their Solana wallets and drop a “&lt;a href="https://knowyourmeme.com/memes/gm-good-morning"&gt;gm&lt;/a&gt;” to their &lt;a href="https://knowyourmeme.com/memes/fren"&gt;frens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BNoiFbzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgj2itvco51yxsxrgvwp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNoiFbzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgj2itvco51yxsxrgvwp.gif" alt="Preview of our app" width="800" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although the app is simple, you will be able to understand intuitively how Solana apps work, and get a hands-on experience with the most important skills and concepts developing a fullstack Solana dApp - the typical workflow, read and write blockchain data, connect the blockchain with your frontend app, authentication, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-tech-stack"&gt;
  &lt;/a&gt;
  Our tech stack
&lt;/h2&gt;

&lt;p&gt;First, let's have a look at what the ASS stack covers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://project-serum.github.io/anchor/getting-started/introduction.html"&gt;&lt;strong&gt;Anchor&lt;/strong&gt;&lt;/a&gt; - The de facto high-level framework for Solana&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.solana.com/cli/install-solana-cli-tools"&gt;&lt;strong&gt;Solana&lt;/strong&gt;&lt;/a&gt; - The reason why are you reading this&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://svelte.dev/"&gt;&lt;strong&gt;Svelte&lt;/strong&gt;&lt;/a&gt; - A blazing fast frontend framework (actually it’s a compiler), an alternative to React&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://emojipedia.org/peach/"&gt;🍑&lt;/a&gt; - The peach emoji, which is often associated with the word “ass”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, we’ll also integrate our app with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://phantom.app/"&gt;&lt;strong&gt;Phantom&lt;/strong&gt;&lt;/a&gt; - An awesome Solana browser wallet&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://solana-labs.github.io/solana-web3.js/"&gt;@solana/web3.js&lt;/a&gt;&lt;/strong&gt; - The Javascript library bridging client-side and the Solana network&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.typescriptlang.org/"&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/a&gt; - Frankly, I just can’t work with Javascript... Besides, most Solana tutorials available right now are written in JS, and to get everything working with TS sometimes needs some extra effort, so I hope this tutorial proves helpful&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll also be using &lt;strong&gt;&lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;&lt;/strong&gt;. If you haven’t done it yet, you need to install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode"&gt;Svelte&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=rust-lang.rust"&gt;Rust&lt;/a&gt; extensions to follow along this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-0-install-and-set-up-solana"&gt;
  &lt;/a&gt;
  Step 0. Install and set up Solana
&lt;/h2&gt;

&lt;p&gt;Before we start, you need to install the necessary tools. M1 Macs used to have some issues setting things up for the Solana Tool Suite, but now there is an official binary build for the M1 architecture, so the process has become pretty straightforward.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-rust"&gt;
  &lt;/a&gt;
  Install Rust
&lt;/h3&gt;

&lt;p&gt;First, you will need to install the Rust toolchain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://sh.rustup.rs &lt;span class="nt"&gt;-sSf&lt;/span&gt; | sh
&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.cargo/env
rustup component add rustfmt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HzEOZSg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/M1bIux8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HzEOZSg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/M1bIux8.png" alt="Install Rust" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-solana-tool-suite"&gt;
  &lt;/a&gt;
  Install Solana Tool Suite
&lt;/h3&gt;

&lt;p&gt;To install Solana, you can simply run the installation script. I’m specifying to install &lt;a href="https://github.com/solana-labs/solana/releases/tag/v1.9.4"&gt;v1.9.4&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-sSfL&lt;/span&gt; https://release.solana.com/v1.9.4/install&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-2PUNnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1Dj2iWB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-2PUNnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1Dj2iWB.png" alt="Install Solana Tool Suite" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that if you are using zsh, you need to update your PATH.&lt;/p&gt;

&lt;p&gt;After it is finished, you can verify if the installation is successful with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;solana &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can run the test validator (a local testnet) to see if everything works correctly with command &lt;code&gt;solana-test-validator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKSU5TLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2nIBADv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKSU5TLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2nIBADv.png" alt="Solana version check" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s stop the test validator for now and move on!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-anchor"&gt;
  &lt;/a&gt;
  Install Anchor
&lt;/h3&gt;

&lt;p&gt;Anchor is the recommended framework for Solana programs.&lt;/p&gt;

&lt;p&gt;Note that Anchor uses &lt;a href="https://classic.yarnpkg.com/en/docs/install#mac-stable"&gt;Yarn v1&lt;/a&gt; to manage Javascript dependencies in your project, so make sure you already have it installed on your computer.&lt;/p&gt;

&lt;p&gt;Let’s build the Rust code from source, it’s pretty straightforward:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--git&lt;/span&gt; https://github.com/project-serum/anchor &lt;span class="nt"&gt;--tag&lt;/span&gt; v0.20.1 anchor-cli &lt;span class="nt"&gt;--locked&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can verify if the installation is successful with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;anchor &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sOzQ3Q1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F4ffirh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sOzQ3Q1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F4ffirh.png" alt="Install Anchor" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-phantom-wallet"&gt;
  &lt;/a&gt;
  Install Phantom Wallet
&lt;/h3&gt;

&lt;p&gt;The Phantom Wallet is a browser extension that takes care of connecting your Solana wallet and the dApp you are visiting, as well as the Solana blockchain. You can get it from &lt;a href="https://phantom.app/download"&gt;their official website&lt;/a&gt; and follow their instruction to set it up.&lt;/p&gt;

&lt;p&gt;If you have used MetaMask with EVM compatible networks before, you are then already familiar with how it works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmEdFq5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1EQTPGF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmEdFq5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1EQTPGF.png" alt="Install Phantom Wallet" width="856" height="1228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s it. Let’s have some real fun!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-an-anchor-project-gm-solana"&gt;
  &lt;/a&gt;
  Step 1. Create an Anchor project - gm Solana!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#gmsolana"&gt;
  &lt;/a&gt;
  gm-solana
&lt;/h3&gt;

&lt;p&gt;To kick off, use Anchor to initialize a project and open it in VS Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;anchor init gm-solana
&lt;span class="nb"&gt;cd &lt;/span&gt;gm-solana
code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uPFXvcHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KdojPjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uPFXvcHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KdojPjm.png" alt="Initialize gm-solana" width="880" height="682"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What we’ve got here are some config files and a few subdirectories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;app - where our client-side Svelte app will be&lt;/li&gt;
&lt;li&gt;migrations - deployment scripts&lt;/li&gt;
&lt;li&gt;programs - smart contracts&lt;/li&gt;
&lt;li&gt;tests - the name says it all ;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#set-up-keys"&gt;
  &lt;/a&gt;
  Set up keys
&lt;/h3&gt;

&lt;p&gt;If you haven’t played with Solana on this machine yet, you will need to run &lt;code&gt;solana-keygen new&lt;/code&gt; to generate a new key. The passphrase can be empty.&lt;/p&gt;

&lt;p&gt;The new key is saved at &lt;code&gt;~/.config/solana/id.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bNLeRka0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7IC8677.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bNLeRka0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7IC8677.png" alt="solana-keygen new" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also use the key generated from your Phantom wallet, but I’m just going to use separate ones in this tutorial for clarity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-solana-to-use-localhost"&gt;
  &lt;/a&gt;
  Configure Solana to use localhost
&lt;/h3&gt;

&lt;p&gt;Next, run the following commands to set the network to localhost, and check the current settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;solana config set --url localhost
solana config get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5l2yWLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9cYsh2E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5l2yWLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9cYsh2E.png" alt="Configure Solana to use localhost" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Later we will see how to push your app to devnet or mainnet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-and-verify-project-setup"&gt;
  &lt;/a&gt;
  Test and verify project setup
&lt;/h3&gt;

&lt;p&gt;Now, you can run &lt;code&gt;anchor build&lt;/code&gt; to test build the default example project Anchor created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5vHDfjaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/5z910NB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5vHDfjaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/5z910NB.png" alt="anchor build" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building works! Now, run &lt;code&gt;anchor test&lt;/code&gt; to see if tests pass too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VhEQUN_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ULuZjvN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VhEQUN_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ULuZjvN.png" alt="anchor test" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;anchor test&lt;/code&gt; command does a bunch in one go - it spins up the test validator, deploys the build, and runs the test cases against the deployments. Pretty handy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-anatomy-of-an-anchor-program"&gt;
  &lt;/a&gt;
  Step 2. Anatomy of an Anchor program
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#programs-and-accounts"&gt;
  &lt;/a&gt;
  Programs and Accounts
&lt;/h3&gt;

&lt;p&gt;In Solana, there’s a clear separation of logic (programs) and state (accounts). This is very different from Ethereum where contracts hold state themselves.&lt;/p&gt;

&lt;p&gt;Users store data in accounts, Solana programs store data in accounts, the code instructions themselves are also stored in accounts. If your program wants some state stored, it will have to reach out to some accounts outside, everything is passed by reference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-the-hello-world-example"&gt;
  &lt;/a&gt;
  Overview of the “hello world” example
&lt;/h3&gt;

&lt;p&gt;Anchor is like the backend web framework for Solana, like Ruby on Rails, Express, or Flask. It really abstracts away a lot of the low level stuff so that you can focus on just designing logic and data structure.&lt;/p&gt;

&lt;p&gt;Before we delete the “hello world” app that Anchor generated for us, let’s have a look at it first.&lt;/p&gt;

&lt;p&gt;The magic all happens in the &lt;code&gt;programs/gm-solana/src/lib.rs&lt;/code&gt; file, that’s the entrance of our program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;anchor_lang&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;declare_id!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nd"&gt;#[program]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;gm_solana&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProgramResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Accounts)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Initialize&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s break it down:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preamble"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Preamble&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;anchor_lang&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;declare_id!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two lines basically imports the Rust libraries needed here and hardcodes the address where your program will be deployed to (it needs to be predefined for security reasons).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#program-and-instruction-handlers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Program and instruction handlers&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[program]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;gm_solana&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProgramResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This section is where our logic is defined.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#[program]&lt;/code&gt; is a &lt;a href="https://doc.rust-lang.org/book/ch19-06-macros.html#macros"&gt;Rust macro&lt;/a&gt; that abstracts away the boilerplate and extra code needed to make your Rust program an Anchor program.&lt;/p&gt;

&lt;p&gt;The functions here are very similar to request handlers in server-side web frameworks. And, this is exactly what all these Web3 things are about - they replace the web servers from the traditional, centralized web!&lt;/p&gt;

&lt;p&gt;We can see that the &lt;code&gt;initialize&lt;/code&gt; instruction handler takes in a context &lt;code&gt;ctx&lt;/code&gt;, which has the type of &lt;code&gt;Context&lt;/code&gt; of struct &lt;code&gt;Initialize&lt;/code&gt;. What a mouthful!&lt;/p&gt;

&lt;p&gt;Remember that we said everything is passed by reference into the program, if the program wants to access and manipulate state? Well, that’s because of the parallel nature of Solana’s executions and how all programs are stateless.&lt;/p&gt;

&lt;p&gt;When we want to call a function on a program, we need to provide all the accounts in advance (aka. all the data that might be needed for a function to perform some tasks).&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;ctx&lt;/code&gt; thing basically contains all those references, and it uses some Rust magic to constrain the types of accounts that can be passed in, below in the account constraints part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#account-constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Account constraints&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(Accounts)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Initialize&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don’t have much going on here in this “hello world” program, but we’ll see more in our “gm Solana” app below. What this section does is to enforce that the context passed into the instruction handler has the correct accounts.&lt;/p&gt;

&lt;p&gt;Our “gm Solana” program is more complex, let’s dive into it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-implement-gm-solana"&gt;
  &lt;/a&gt;
  Step 3. Implement “gm Solana”
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#understand-what-we-need-to-do"&gt;
  &lt;/a&gt;
  Understand what we need to do
&lt;/h3&gt;

&lt;p&gt;Now we know what accounts and programs in Solana are, and how an Anchor app looks like. Let’s see what we need exactly for our “gm Solana” guest book app to work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;some state to store all those gm’s (specifically - message content, sender, and timestamp)&lt;/li&gt;
&lt;li&gt;a program to access that state and add new gm’s when needed&lt;/li&gt;
&lt;li&gt;a bunch of functions aka. instruction handlers on that program to do the actual work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sounds good, let’s go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-data-structure"&gt;
  &lt;/a&gt;
  Define data structure
&lt;/h3&gt;

&lt;p&gt;Let’s start with data structures first, then move on to the logic parts.&lt;/p&gt;

&lt;p&gt;First, we need to store the program state somewhere. Let’s define a &lt;code&gt;BaseAccount&lt;/code&gt; with exactly what we want to store - &lt;code&gt;gm_count&lt;/code&gt; is an unsigned 64bit integer, and &lt;code&gt;gm_list&lt;/code&gt; is a &lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"&gt;vector&lt;/a&gt; (a growable array) of &lt;code&gt;GmMessage&lt;/code&gt; objects, which contain the message and some metadata.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[account]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;BaseAccount&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;gm_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;gm_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GmMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// define a struct called GmMessage that contains a message, sender, and timestamp&lt;/span&gt;
&lt;span class="nd"&gt;#[derive(Clone,&lt;/span&gt; &lt;span class="nd"&gt;Debug,&lt;/span&gt; &lt;span class="nd"&gt;AnchorSerialize,&lt;/span&gt; &lt;span class="nd"&gt;AnchorDeserialize)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;GmMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pubkey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;BaseAccount&lt;/code&gt; is marked under the &lt;code&gt;#[account]&lt;/code&gt; macro, and because Solana works with specific kinds of data structures, we have to use the macro &lt;code&gt;#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]&lt;/code&gt; here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#program-and-instruction-handlers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Program and instruction handlers&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now, let’s write the program logic. We need two functions - first one is to initialize a &lt;code&gt;base_account&lt;/code&gt;, set the initial values to 0, then another one is to handle the client’s request to &lt;code&gt;say_gm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We’ll declare the context structs / account constraints right after.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[program]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;gm_solana&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProgramResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// &amp;amp;mut means we are letting the compiler know that we are mutating this value&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.accounts.base_account&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="py"&gt;.gm_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// receive a message and store it into gm_list with some metadata&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;say_gm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SayGm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProgramResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.accounts.base_account&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// grab a copy of the input data&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// get the current Solana network time&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Clock&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.unix_timestamp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// grab the public key of the transaction sender&lt;/span&gt;
        &lt;span class="c1"&gt;// * dereferences the pointer&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.accounts.user&lt;/span&gt;&lt;span class="nf"&gt;.to_account_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;gm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GmMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="py"&gt;.gm_list&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="py"&gt;.gm_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#account-constraints"&gt;
  &lt;/a&gt;
  Account constraints
&lt;/h3&gt;

&lt;p&gt;As we mentioned earlier, the program code itself has no way to access any data, unless the accounts that store that data are passed into the handlers in the context, by the client.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Initialize&lt;/code&gt; context struct will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(Accounts)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;#[account(init,&lt;/span&gt; &lt;span class="nd"&gt;payer&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;user,&lt;/span&gt; &lt;span class="nd"&gt;space&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nd"&gt;#[account(mut)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Signer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;system_program&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The macro &lt;code&gt;#[account(init, payer = user, space = 64 + 64)]&lt;/code&gt; basically means that we want to &lt;strong&gt;&lt;code&gt;init&lt;/code&gt;&lt;/strong&gt;ialize the following account (&lt;code&gt;base_account&lt;/code&gt;), the fee will be paid by &lt;code&gt;user&lt;/code&gt; below, and we’ll allocate 64KB + 64KB space for it. We need a bigger space because of the vector.&lt;/p&gt;

&lt;p&gt;The macro &lt;code&gt;#[account(mut)]&lt;/code&gt; means that the &lt;code&gt;user&lt;/code&gt; here will be mutated, because it will be paying fees. This &lt;code&gt;user&lt;/code&gt; field represents the signer of the transaction, aka. the wallet that called this function.&lt;/p&gt;

&lt;p&gt;The last line refers to the root System Program, the special program on Solana that handles account creations. If you leave it out, you won’t be able to initialize the &lt;code&gt;base_account&lt;/code&gt; above.&lt;/p&gt;

&lt;p&gt;OK, let’s move on to the &lt;code&gt;SayGm&lt;/code&gt; struct:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(Accounts)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SayGm&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;#[account(mut)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Signer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we will be mutating the data held in &lt;code&gt;base_account&lt;/code&gt;, we’ll once again use the &lt;code&gt;#[account(mut)]&lt;/code&gt; macro.&lt;/p&gt;

&lt;p&gt;The most important thing here though is &lt;code&gt;pub user: Signer&amp;lt;'info&amp;gt;&lt;/code&gt;. This is essentially how we will be able to authenticate, to verify that this address &lt;em&gt;is&lt;/em&gt; indeed the one that signed the transaction.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AccountInfo&amp;lt;'info&amp;gt;&lt;/code&gt; can also represent a user, but there’s no validation in place that anyone can be an imposter by simply passing in a random account.&lt;/p&gt;

&lt;p&gt;What we just did was to do some simple authentication routines completely via writing some Rust types - this is pretty cool and won’t be possible without Anchor’s abstraction! This way we can simply use the accounts in our program logic with the guarantee that they have already been checked.&lt;/p&gt;

&lt;p&gt;To put everything together, your app should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;anchor_lang&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;declare_id!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nd"&gt;#[program]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;gm_solana&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProgramResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// &amp;amp;mut means we are letting the compiler know that we are mutating this value&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.accounts.base_account&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="py"&gt;.gm_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;say_gm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SayGm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProgramResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.accounts.base_account&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// grab a copy of the input data&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// get the current Solana network time&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Clock&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.unix_timestamp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// grab the public key of the user account. We need to use * to dereference the pointer&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.accounts.user&lt;/span&gt;&lt;span class="nf"&gt;.to_account_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;gm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GmMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="py"&gt;.gm_list&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="py"&gt;.gm_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Accounts)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;#[account(init,&lt;/span&gt; &lt;span class="nd"&gt;payer&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;user,&lt;/span&gt; &lt;span class="nd"&gt;space&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nd"&gt;#[account(mut)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Signer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;system_program&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Accounts)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SayGm&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;#[account(mut)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Signer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[account]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;BaseAccount&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;gm_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;gm_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GmMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// define a struct called GmMessage that contains a message, sender, and timestamp&lt;/span&gt;
&lt;span class="nd"&gt;#[derive(Clone,&lt;/span&gt; &lt;span class="nd"&gt;Debug,&lt;/span&gt; &lt;span class="nd"&gt;AnchorSerialize,&lt;/span&gt; &lt;span class="nd"&gt;AnchorDeserialize)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;GmMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pubkey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-forget-to-compile"&gt;
  &lt;/a&gt;
  Don’t forget to compile!
&lt;/h3&gt;

&lt;p&gt;The “gm Solana” program is complete and we need to rebuild the binary. At the same time, in order for our client-side code (be it tests or frontend app) to interact with it, we need to ask Anchor to generate &lt;a href="https://en.wikipedia.org/wiki/Interface_description_language"&gt;IDL&lt;/a&gt; (similar to ABI in EVM), TypeScript types for us.&lt;/p&gt;

&lt;p&gt;We can do all this by running &lt;code&gt;anchor build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgIJjRxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zGflmSE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgIJjRxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zGflmSE.png" alt="anchor build" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-write-tests-for-gm-solana"&gt;
  &lt;/a&gt;
  Step 4. Write tests for “gm Solana”
&lt;/h2&gt;

&lt;p&gt;We have already ran the tests for the default “hello world” program, now let’s update the tests for our “gm Solana”.&lt;/p&gt;

&lt;p&gt;Go into &lt;code&gt;tests/gm-solana.ts&lt;/code&gt; and put in the following, I’ll comment explanation in the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s"&gt;"@project-serum/anchor"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s"&gt;"@project-serum/anchor"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;GmSolana&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s"&gt;"../target/types/gm_solana"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s"&gt;"assert"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// we need to access SystemProgram so that we can create the base_account&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;SystemProgram&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="py"&gt;.web3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nf"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gm-solana"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// configure the client to use the local cluster.&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="py"&gt;.Provider&lt;/span&gt;&lt;span class="nf"&gt;.env&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="nf"&gt;.setProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="py"&gt;.workspace.GmSolana&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GmSolana&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;_baseAccount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="py"&gt;.web3.Keypair&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"creates a base account for gm's"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;baseAccount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="py"&gt;.web3.Keypair&lt;/span&gt;&lt;span class="nf"&gt;.generate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// call the initialize function via RPC&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="py"&gt;.rpc&lt;/span&gt;&lt;span class="nf"&gt;.initialize&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;baseAccount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;baseAccount&lt;/span&gt;&lt;span class="py"&gt;.publicKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="py"&gt;.wallet.publicKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;systemProgram&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SystemProgram&lt;/span&gt;&lt;span class="py"&gt;.programId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="n"&gt;signers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;baseAccount&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="c1"&gt;// fetch the base account&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="py"&gt;.account.baseAccount&lt;/span&gt;&lt;span class="nf"&gt;.fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;baseAccount&lt;/span&gt;&lt;span class="py"&gt;.publicKey&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// gmCount is a "big number" type, so we need to convert it to a string&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="nf"&gt;.equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="py"&gt;.gmCount&lt;/span&gt;&lt;span class="nf"&gt;.toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;_baseAccount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;baseAccount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"receives and saves a gm message"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"gm wagmi"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="py"&gt;.wallet.publicKey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// fetch the base account and cache how many messages are there&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;accountBefore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="py"&gt;.account.baseAccount&lt;/span&gt;&lt;span class="nf"&gt;.fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;_baseAccount&lt;/span&gt;&lt;span class="py"&gt;.publicKey&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;gmCountBefore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accountBefore&lt;/span&gt;&lt;span class="py"&gt;.gmCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// call the sayGm function with message&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="py"&gt;.rpc&lt;/span&gt;&lt;span class="nf"&gt;.sayGm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;baseAccount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_baseAccount&lt;/span&gt;&lt;span class="py"&gt;.publicKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// fetch the base account again and check that the gmCount has increased&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;accountAfter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="py"&gt;.account.baseAccount&lt;/span&gt;&lt;span class="nf"&gt;.fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;_baseAccount&lt;/span&gt;&lt;span class="py"&gt;.publicKey&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;gmCountAfter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accountAfter&lt;/span&gt;&lt;span class="py"&gt;.gmCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="nf"&gt;.equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmCountAfter&lt;/span&gt;&lt;span class="nf"&gt;.sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmCountBefore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// fetch the gmList and check the value of the first message&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;gmList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accountAfter&lt;/span&gt;&lt;span class="py"&gt;.gmList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="nf"&gt;.equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="py"&gt;.message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="nf"&gt;.equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="py"&gt;.user&lt;/span&gt;&lt;span class="nf"&gt;.equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// user is an object, we can't just compare objects in JS&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="nf"&gt;.equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="py"&gt;.timestamp&lt;/span&gt;&lt;span class="nf"&gt;.gt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="nf"&gt;.BN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// just a loose check to see if the timestamp is greater than 0&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When finished, the run &lt;code&gt;anchor test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--84W_mlTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kHHjlqC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--84W_mlTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kHHjlqC.png" alt="anchor test" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both tests have passed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-deploy-app-to-local-network"&gt;
  &lt;/a&gt;
  Step 5. Deploy app to local network
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#set-new-program-id"&gt;
  &lt;/a&gt;
  Set new Program ID
&lt;/h3&gt;

&lt;p&gt;Remember that in the beginning of our code, there’s that line &lt;code&gt;declare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now as we are getting closer to production, we need to replace it with the unique Program ID generated by &lt;code&gt;anchor build&lt;/code&gt;. We can get it with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="n"&gt;solana&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gm_solana&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keypair&lt;/span&gt;&lt;span class="py"&gt;.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3f-Sh6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j5YWfL0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3f-Sh6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j5YWfL0.png" alt="get gm_solana address" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, copy this key over back to the &lt;code&gt;lib.rs&lt;/code&gt; file (use your own pub key pls!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;declare_id!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"9V3sjRVvZ61X4qHkz2gVaxB1kKhMenzjwWhjmhpqgRHK"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll also need to update it accordingly in &lt;code&gt;Anchor.toml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="cs"&gt;# Anchor.toml&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;programs&lt;/span&gt;&lt;span class="py"&gt;.localnet&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;gm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;solana&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"9V3sjRVvZ61X4qHkz2gVaxB1kKhMenzjwWhjmhpqgRHK"&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;cluster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"localnet"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;anchor test&lt;/code&gt; again, and it still all works. ;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_XyhNwUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nIRZje0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_XyhNwUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nIRZje0.png" alt="anchor test" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#start-a-local-network-and-deploy"&gt;
  &lt;/a&gt;
  Start a local network and deploy
&lt;/h3&gt;

&lt;p&gt;To deploy, we need to start up the &lt;code&gt;solana-test-validator&lt;/code&gt; in one terminal, and then simply run &lt;code&gt;anchor deploy&lt;/code&gt; in a new terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dC-u46Iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dMc3jDi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dC-u46Iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dMc3jDi.png" alt="solana-test-validator" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xYklbGnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pypufxN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYklbGnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pypufxN.png" alt="anchor deploy" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have a live deployment, let’s move on to the last &lt;code&gt;S&lt;/code&gt; in ASS - Svelte!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-set-up-frontend"&gt;
  &lt;/a&gt;
  Step 6. Set up frontend
&lt;/h2&gt;

&lt;p&gt;Svelte is an incredibly simple framework/compiler to learn - it’s just HTML + JavaScript + built-in reactive state management!&lt;/p&gt;

&lt;p&gt;If you know nothing about Svelte, I highly recommend you to check out the official &lt;a href="https://svelte.dev/tutorial/basics"&gt;interactive tutorials&lt;/a&gt;, it will only take you 15 minutes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-svelte"&gt;
  &lt;/a&gt;
  Set up Svelte
&lt;/h3&gt;

&lt;p&gt;The workspace Anchor generated for us is a monorepo, so we are going to initialize the frontend right inside the &lt;code&gt;app&lt;/code&gt; directory. Everything from now on is done inside this directory unless notified otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;app
npx degit sveltejs/template &lt;span class="nb"&gt;.&lt;/span&gt;
node scripts/setupTypeScript.js

yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPXqLOHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FY3Gfyv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPXqLOHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FY3Gfyv.png" alt="Set up Svelte" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As mentioned in the very beginning, we will need to install a bunch of client-side JavaScript libraries to interact with the blockchain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @project-serum/anchor @solana/web3.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configure-rollup"&gt;
  &lt;/a&gt;
  Configure Rollup
&lt;/h3&gt;

&lt;p&gt;We need some extra steps to get the Rollup bundler do its job correctly.&lt;/p&gt;

&lt;p&gt;Just like how our tests worked, we need the IDL files for our Svelte app so that it knows which instruction handlers exist on our Solana program, as well as the data type of everything.&lt;/p&gt;

&lt;p&gt;The IDL files and types are located under the &lt;code&gt;target&lt;/code&gt; directory under the Anchor project root. Just copy the entire &lt;code&gt;target/idl&lt;/code&gt; and &lt;code&gt;target/types&lt;/code&gt; directory over into &lt;code&gt;app/src/idl&lt;/code&gt; and &lt;code&gt;app/src/types&lt;/code&gt;. In our case, we only have one &lt;code&gt;gm_solana.json&lt;/code&gt; and one &lt;code&gt;gm_solana.ts&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;We will also need to enable JSON module resolving in &lt;code&gt;app/tsconfig.json&lt;/code&gt;. It will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@tsconfig/svelte/tsconfig.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"resolveJsonModule"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"src/**/*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"exclude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"node_modules/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"__sapper__/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"public/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we need to install a few plugins. These take care of JSON imports and polyfilling built-in Node.js modules not available in the browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @rollup/plugin-json rollup-plugin-node-builtins rollup-plugin-node-globals
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then enable them in &lt;code&gt;rollup.config.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ... other imports
import json from "@rollup/plugin-json";
import builtins from "rollup-plugin-node-builtins";
import globals from "rollup-plugin-node-globals";

export default {
  // ... other configs
  plugins: [
    // ... other rollup plugins
    resolve({
      browser: true,
      dedupe: ["svelte"],
      preferBuiltins: false, // set this to false
    }),
    // ... more rollup plugins
    json(),
    globals(),
    builtins(),
  ]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start the dev server with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uuwqyfcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/T0N8323.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uuwqyfcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/T0N8323.png" alt="yarn dev" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wkTK8Uv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/EFUhZOa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wkTK8Uv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/EFUhZOa.png" alt="Svelte Hello World" width="880" height="565"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-connect-wallet-button"&gt;
  &lt;/a&gt;
  Create a “Connect Wallet” button
&lt;/h3&gt;

&lt;p&gt;When a user visits our dApp, the first thing they need to do should be to connect their Phantom Wallet with our app. What exactly this does is that the browser extension injects into our page a “provider”, which our app can use to interact with the blockchain on behalf of the user (of course the user needs to approve and sign any transactions). We will make a “connect wallet” button for them.&lt;/p&gt;

&lt;p&gt;This is essentially the same as when you are already logged into Google or Github, and now want to connect to a third party service using the “Sign in with Google” button.&lt;/p&gt;

&lt;p&gt;Let’s clean up the default page Svelte generated for us and implement this thing, I added comments to highlight important lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// ======== APPLICATION STATE ========&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// reactively log the wallet connection when account state changes,&lt;/span&gt;
  &lt;span class="c1"&gt;// if you don't know what this is, check out https://svelte.dev/tutorial/reactive-declarations&lt;/span&gt;
  &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Connected to wallet: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// ======== PAGE LOAD CHECKS ========&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onLoad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;solana&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;solana&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// set up handlers for wallet events&lt;/span&gt;
    &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publicKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;disconnect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// eagerly connect wallet if the user already has connected before, otherwise do nothing&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;onlyIfTrusted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// life cycle hook for when the component is mounted&lt;/span&gt;
  &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// run the onLoad function when the page completes loading&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onLoad&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// return a cleanup function to remove the event listener to avoid memory leaks when the page unloads&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onLoad&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// ======== CONNECT WALLET ========&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleConnectWallet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;gm, Solana!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Conditionally render the user account, connect button, or just a warning --&amp;gt;&lt;/span&gt;
  {#if account}
  &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Your wallet:&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{account}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  {:else if wallet} {#if wallet.isPhantom}
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Phantom Wallet found!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;"{handleConnectWallet}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Connect wallet&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  {:else}
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Solana wallet found but not supported.&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  {/if} {:else}
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Solana wallet not found.&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  {/if}
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;240px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff3e00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;640px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s open up the app again in the browser, and voilà!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y34_zmUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j5ukV8M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y34_zmUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j5ukV8M.png" alt="Connecting wallet" width="880" height="554"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#switch-to-local-network"&gt;
  &lt;/a&gt;
  Switch to local network
&lt;/h3&gt;

&lt;p&gt;By default, the Phantom Wallet connects to the mainnet of Solana. Since we are doing all the testing on local network, you need to go to Settings then Change Network to &lt;em&gt;localhost&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EdKGj5ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/OwO2KdS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EdKGj5ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/OwO2KdS.png" alt="Switch to local network" width="880" height="565"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-implement-guest-book-frontend"&gt;
  &lt;/a&gt;
  Step 7. Implement guest book frontend
&lt;/h2&gt;

&lt;p&gt;Now let’s write the core features of the app. The app should display a list of “gm” messages, tagged with their timestamps and the wallet address of their senders.&lt;/p&gt;

&lt;p&gt;We’ve already interacted with the Solana network before - in the tests! Now we just need to do something similar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connection-helpers-to-the-solana-network"&gt;
  &lt;/a&gt;
  Connection helpers to the Solana network
&lt;/h3&gt;

&lt;p&gt;To get started, we need to have a bunch of parameters at our disposal, namely the &lt;code&gt;programID&lt;/code&gt;, which &lt;code&gt;network&lt;/code&gt; we are interacting with, and some &lt;code&gt;connection&lt;/code&gt; settings with some handy context providers.&lt;/p&gt;

&lt;p&gt;Add this to the existing code in &lt;code&gt;App.svelte&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script lang="ts"&amp;gt;
  // ...
  import * as idl from "./idl/gm_solana.json";
  import type { GmSolana } from "./types/gm_solana";
  import { Connection, PublicKey, clusterApiUrl } from "@solana/web3.js";
  import { Idl, Program, Provider, web3 } from "@project-serum/anchor";
  const { SystemProgram, Keypair } = web3;

  //...

  // ======== CONNECT TO NETWORK ========

  // get program id from IDL, the metadata is only available after a deployment
  const programID = new PublicKey(idl.metadata.address);

  // we are using local network endpoint for now
  const network = "http://127.0.0.1:8899";

  // set up connection with "preflight commitment" set to "confirmed" level, which basically means that our app
  // will treat the transaction as done only when the block is voted on by supermajority.
  // this is similar to waiting for how many confirmations like in Ethereum.
  // you can also set it to "finalized" (even more secure) or "processed" (changes might be rolled back)
  const connection = new Connection(network, "confirmed");

  // create a network and wallet context provider
  const getProvider = () =&amp;gt; {
    const provider = new Provider(connection, wallet, {
      preflightCommitment: "confirmed",
    });
    return provider;
  };

  // helper function to get the program
  const getProgram = () =&amp;gt; {
    const program = new Program(
      idl as Idl,
      programID,
      getProvider()
    ) as Program&amp;lt;GmSolana&amp;gt;;
    return program;
  };
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#initialize-base-account"&gt;
  &lt;/a&gt;
  Initialize Base Account
&lt;/h3&gt;

&lt;p&gt;Now comes the interesting part. Remember that our app needs a base account to store all the gm messages?&lt;/p&gt;

&lt;p&gt;Well, everyone can create their base account and they are all perfectly valid - it’s like that everyone can set up a private Minecraft server. If you insist having a singleton design for your base account, you will need to hardcode the user accounts that are allowed to create them in your program.&lt;/p&gt;

&lt;p&gt;So, in our “gm Solana” app, the visitors will be given two choices - to initialize a new base account or use a pre-existing one. If you want to host your “ultimate, canonical, official gm Solana” app, you can just bake your base account into the Svelte code.&lt;/p&gt;

&lt;p&gt;This is pretty cool isn’t it? ;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script lang="ts"&amp;gt;
  // ...
  // ======== INITIATE BASE ACCOUNT ========

  // the base account that will hold the gm messages,
  // if we want to share the same "gm Solana" instance then we need to provide the same base account
  let baseAccountPublicKey: PublicKey;
  let baseAccountPublicKeyInput = ""; // UI state used for the input field

  // because state in Solana is not tied with programs, users can create their own "baseAccount" for the gm app,
  // the way to share and establish our baseAccount as the "official" one is to provide users with ours up front
  // in the app client. otherwise we can also hardcode a "deployer account" in the program so only it can do it.
  // the initializeAccount() here is a naive implementation that creates a new baseAccount on demand.
  const initializeAccount = async () =&amp;gt; {
    const provider = getProvider();
    const program = getProgram();
    const _baseAccount = Keypair.generate();
    Keypair;

    await program.rpc.initialize({
      accounts: {
        baseAccount: _baseAccount.publicKey,
        user: provider.wallet.publicKey,
        systemProgram: SystemProgram.programId,
      },
      signers: [_baseAccount],
    });
    baseAccountPublicKey = _baseAccount.publicKey;
    console.log("New BaseAccount:", baseAccountPublicKey.toString());
    await getGmList(); // first fetch
  };

  // alternative to initializeAccount(), loadAccount() allows you to pick up a previously created baseAccount
  // so we can share the same "gm Solana" instance!
  const loadAccount = async () =&amp;gt; {
    baseAccountPublicKey = new PublicKey(baseAccountPublicKeyInput);
    console.log("Loaded BaseAccount:", baseAccountPublicKey.toString());
    await getGmList(); // first fetch
  };
&amp;lt;/script&amp;gt;
&amp;lt;main&amp;gt;
  &amp;lt;!-- other stuff... --&amp;gt;
  {#if account}
    {#if !baseAccountPublicKey}
      &amp;lt;button on:click={initializeAccount}&amp;gt;Initialize account&amp;lt;/button&amp;gt;
      or
      &amp;lt;input
        type="text"
        placeholder="use existing account..."
        bind:value={baseAccountPublicKeyInput}
      /&amp;gt;
      &amp;lt;button on:click={loadAccount}&amp;gt;Load&amp;lt;/button&amp;gt;
    {:else}
      Using gm solana base account: {baseAccountPublicKey.toString()}
    {/if}
  {/if}
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#interact-with-the-program"&gt;
  &lt;/a&gt;
  Interact with the program
&lt;/h3&gt;

&lt;p&gt;Now we are all set to interact with the blockchain and wire up local state! We’ll set up a couple of extra UI state variables and render all the gm’s neatly in a list. Of course there’s also a submit button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script lang="ts"&amp;gt;
  // ...
  // ======== APPLICATION STATE ========
  // ... other state
  let gmList = [];
  let gmMessage = "";

  // ======== PROGRAM INTERACTION ========

  // interacts with our program and updates local the gm list
  const getGmList = async () =&amp;gt; {
    const program = getProgram();
    const account = await program.account.baseAccount.fetch(
      baseAccountPublicKey
    );

    console.log("Got the account", account);
    gmList = account.gmList as any[];
  };

  // interacts with our program and submits a new gm message
  const sayGm = async () =&amp;gt; {
    const provider = getProvider();
    const program = getProgram();

    await program.rpc.sayGm(gmMessage, {
      accounts: {
        baseAccount: baseAccountPublicKey,
        user: provider.wallet.publicKey,
      },
      // if we don't supply a signer, it will try to use the connected wallet by default
    });
    console.log("gm successfully sent", gmMessage);
    gmMessage = ""; // clears the input field

    await getGmList(); // updates the local gm list
  };

  $: console.log("gmList:", gmList); // just some extra logging when the gm list changes
&amp;lt;/script&amp;gt;
&amp;lt;main&amp;gt;
  &amp;lt;!-- other stuff... --&amp;gt;
  {#if baseAccountPublicKey}
    &amp;lt;div&amp;gt;
      &amp;lt;h3&amp;gt;gm List:&amp;lt;/h3&amp;gt;
      &amp;lt;ul&amp;gt;
        {#each gmList as gm}
          &amp;lt;li&amp;gt;
            &amp;lt;b&amp;gt;{gm.message}&amp;lt;/b&amp;gt;, said {gm.user.toString().slice(0, 6)}... at {new Date(
              gm.timestamp.toNumber() * 1000
            ).toLocaleTimeString()}
          &amp;lt;/li&amp;gt;
        {/each}
      &amp;lt;/ul&amp;gt;
      &amp;lt;button on:click={getGmList}&amp;gt;Refresh gms!&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div&amp;gt;
      &amp;lt;h3&amp;gt;Say gm:&amp;lt;/h3&amp;gt;
      &amp;lt;input
        type="text"
        placeholder="write something..."
        bind:value={gmMessage}
      /&amp;gt;
      &amp;lt;button on:click={sayGm} disabled={!gmMessage}&amp;gt;Say gm!&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  {/if}
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your browser wallet doesn’t have local network SOL tokens, you can always airdrop yourself a bunch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;solana airdrop 1000 mmmmyyyyywwwwwaaaalllleeeetttt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rCkajrJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PdCEQaf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rCkajrJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PdCEQaf.png" alt="Airdrop" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s it, we have finished the “gm Solana” dApp! Have fun playing with it in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--giqjvFth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/oWh5iOf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--giqjvFth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/oWh5iOf.png" alt="Final demo" width="880" height="554"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-8-deploy-on-public-devnet-or-mainnet"&gt;
  &lt;/a&gt;
  Step 8. Deploy on public devnet (or mainnet)
&lt;/h2&gt;

&lt;p&gt;So far we’ve only been deploying to localhost running the test validator. To deploy it to devnet (or mainnet-beta), you need a few extra steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-tooling-configs"&gt;
  &lt;/a&gt;
  Update tooling configs
&lt;/h3&gt;

&lt;p&gt;First, you need to switch the Solana CLI to devnet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;solana config &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;--url&lt;/span&gt; devnet
solana config get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, open the &lt;code&gt;Anchor.toml&lt;/code&gt; file in project root to update the &lt;code&gt;cluster&lt;/code&gt; and &lt;code&gt;[programs.localnet]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Anchor.toml&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;programs.devnet]
gm-solana &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"foooooooobaaaaaaar"&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;provider]
cluster &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"devnet"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don’t have devnet SOL, you can airdrop yourself 5 at a time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;solana airdrop 5 mmmmyyyyywwwwwaaaalllleeeetttt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can run build and deploy again!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;anchor build
anchor deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#update-parameters-in-app"&gt;
  &lt;/a&gt;
  Update parameters in app
&lt;/h3&gt;

&lt;p&gt;Since we are deploying to the public devnet, you will need to switch the network in Phantom Wallet to devnet of course.&lt;/p&gt;

&lt;p&gt;Then, you only need to change one thing in the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script lang=ts&amp;gt;
  // ...
  // // we are using local network endpoint for now
  // const network = "http://127.0.0.1:8899";

  // we are using devnet endpoint
  const network = clusterApiUrl('devnet');
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;yarn dev&lt;/code&gt; or &lt;code&gt;yarn build&lt;/code&gt; in the &lt;code&gt;app&lt;/code&gt; directory again, and you are all set!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-badass"&gt;
  &lt;/a&gt;
  That’s bad-ASS!
&lt;/h2&gt;

&lt;p&gt;Now you have mastered the art of ASS appreciation, you are an ASS stack connoisseur!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Also building in Web3? Let's connect via Twitter&lt;/em&gt; 👋 &lt;strong&gt;&lt;a href="https://twitter.com/0xmuse"&gt;@0xMuse&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>web3</category>
      <category>solana</category>
      <category>svelte</category>
    </item>
    <item>
      <title>Awesome presentations deserve beautiful code</title>
      <author>Dr. Gernot Starke</author>
      <pubDate>Thu, 20 Jan 2022 11:43:30 +0000</pubDate>
      <link>https://dev.to/arc42/awesome-presentations-deserve-beautiful-code-3jn9</link>
      <guid>https://dev.to/arc42/awesome-presentations-deserve-beautiful-code-3jn9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#ever-seen-ugly-source-code-on-a-slide"&gt;
  &lt;/a&gt;
  Ever seen ugly source code on a slide?
&lt;/h3&gt;

&lt;p&gt;Welcome to reality. Every now and then we all need to put code samples onto PowerPoint or Keynote presentations.&lt;/p&gt;

&lt;p&gt;But wait - presentation programs are made for &lt;strong&gt;text&lt;/strong&gt;, not for &lt;strong&gt;code&lt;/strong&gt;: &lt;br&gt;
They loose all syntax highlighting when you paste your valuable code into their limited textboxes...&lt;br&gt;
Look at this horrible example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YSXNxO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uewhzmq3z130owhmn5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YSXNxO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uewhzmq3z130owhmn5u.png" alt="Slide with ugly source code" width="880" height="609"&gt;&lt;/a&gt;&lt;br&gt;Fig.1 - Slide with ugly code.
  &lt;/p&gt;

&lt;p&gt;I like to introduce &lt;a href="https://carbon.now.sh"&gt;carbon&lt;/a&gt; - a free website that elegantly solves this problem. On their website the creators describe their goal short and concise: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Carbon lets you create and share beautiful images of your source code". &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You see a possible result below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QYc2UkWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb78wmihb4gy8wxq5ve0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYc2UkWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb78wmihb4gy8wxq5ve0.png" alt="Slide with beautiful source code (by carbon.now)" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;
Fig.2 - Slide with beautiful code.

 

&lt;p&gt;What a difference!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nicen-easy"&gt;
  &lt;/a&gt;
  Nice'n Easy
&lt;/h3&gt;

&lt;p&gt;Carbon is incredbly easy to use: Simply paste your code in the textbox or drag a source file.&lt;/p&gt;

&lt;p&gt;Carbon has a number of interesting configuration options available: Themes, borders, (fake) window controls and more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#predefines-themes"&gt;
  &lt;/a&gt;
  Predefines themes
&lt;/h4&gt;

&lt;p&gt;Several themes are available, all except the Darcula-Pro themes are free:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8zUxXil5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm1smn1yrm2r78ee304e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8zUxXil5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm1smn1yrm2r78ee304e.png" alt="carbon themes (1) - Monokai" width="880" height="672"&gt;&lt;/a&gt; &lt;/p&gt;
Fig.3 - carbon theme (Monokai).

 

&lt;p&gt;If you prefer a lighter theme, you are covered too:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXbXfFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcr3xkgpwmjslcgveha7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXbXfFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcr3xkgpwmjslcgveha7.png" alt="carbon themes (2) - OneLight" width="880" height="690"&gt;&lt;/a&gt;&lt;/p&gt;
Fig.4 - carbon theme (OneLight)

 

&lt;p&gt;In case you need to, you may even configure your own custom theme. It's a lot of work, and for me the standard themes are way good enough.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#additional-layout-options"&gt;
  &lt;/a&gt;
  Additional Layout Options
&lt;/h4&gt;

&lt;p&gt;You can set padding, border color, shadow, width, (artificial) window controls and a few more options:&lt;/p&gt;

&lt;p&gt;&lt;a href="" class="article-body-image-wrapper"&gt;&lt;img alt="Some config options"&gt;&lt;/a&gt;&lt;/p&gt;
Fig.5 - some config options.

 

&lt;h4&gt;
  &lt;a href="#export-to-png-and-svg"&gt;
  &lt;/a&gt;
  Export to png and svg
&lt;/h4&gt;

&lt;p&gt;As expected, carbon can export the image of your source as png or svg:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---xo5ZZaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzs8qgr34x81atllyibl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---xo5ZZaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzs8qgr34x81atllyibl.png" alt="carbon export options" width="532" height="404"&gt;&lt;/a&gt;&lt;/p&gt;
Fig.6 - export options.

 

&lt;h4&gt;
  &lt;a href="#alternatives"&gt;
  &lt;/a&gt;
  Alternatives
&lt;/h4&gt;

&lt;p&gt;All right, you may also copy/paste source code as RTF (and hope that your presentation tool really preserves formatting).&lt;br&gt;
You could either paste your code to Microsoft-Word (crossing fingers again for preserved formatting), and export it to PowerPoint from Word. Might work, but is less fun. And in contrast to carbon.sh, it does no good to our atmosphere :-).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-accessibility-issues"&gt;
  &lt;/a&gt;
  But: Accessibility Issues
&lt;/h3&gt;

&lt;p&gt;When you convert source code to images, you have to (manually) take care of &lt;a href="https://www.innoq.com/en/topics/accessibility/"&gt;accessibility&lt;/a&gt;.&lt;br&gt;
Images like the ones generated by carbon.sh are not suitable for screen readers.&lt;br&gt;
If you want to adhere to accessibility good practices, you should therefore include the source code shown in the alt-tag of the generated images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enjoy"&gt;
  &lt;/a&gt;
  Enjoy!
&lt;/h3&gt;

&lt;p&gt;You never again need to include source code as plain and ugly text in any of your presentations!&lt;/p&gt;

&lt;p&gt;One final remark: The name "carbon" was chosen by the authors because they want to reduce CO2 in the atmosphere, read the small print (&lt;a href="https://www.wren.co/join/carbon"&gt;...offsets&lt;/a&gt;) on their website. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://carbon.now.sh"&gt;carbon.now.sh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The creators, &lt;a href="https://twitter.com/carbon_app"&gt;carbon_app&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Their &lt;a href="https://github.com/carbon-app/carbon"&gt;Github repository (carbon-app)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thanx"&gt;
  &lt;/a&gt;
  Thanx
&lt;/h3&gt;

&lt;p&gt;Kudos to Joachim Praetorius for improving my English and Lars Hupel for pointing out the accessibility issues!&lt;/p&gt;

&lt;p&gt;Thanx to &lt;a href="https://unsplash.com/photos/E0bIdzi8zoQ"&gt;Miguel Henriques&lt;br&gt;
&lt;/a&gt; for the header image.&lt;/p&gt;

</description>
      <category>presentation</category>
      <category>code</category>
    </item>
    <item>
      <title>Day 83 of 100 Days of Code &amp; Scrum: Deploying Services Pages to Production</title>
      <author>Rammina</author>
      <pubDate>Thu, 20 Jan 2022 11:43:15 +0000</pubDate>
      <link>https://dev.to/rammina/day-83-of-100-days-of-code-scrum-deploying-services-pages-to-production-1jo1</link>
      <guid>https://dev.to/rammina/day-83-of-100-days-of-code-scrum-deploying-services-pages-to-production-1jo1</guid>
      <description>&lt;p&gt;Greetings, everyone!&lt;/p&gt;

&lt;p&gt;Not much free time today, but at least I finished coding all of the services pages for my &lt;a href="https://www.rammina.com"&gt;business site&lt;/a&gt;. I've also tested and deployed all of them, so here are the three of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rammina.com/services/web-dev"&gt;Web Development page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rammina.com/services/digital-marketing"&gt;Digital Marketing page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rammina.com/services/writing"&gt;Writing page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As for learning, I did a little bit of practice with Next.js, especially with writing API function handlers on the &lt;code&gt;/pages/api&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I did various things, such as working on my &lt;a href="https://www.rammina.com"&gt;company website&lt;/a&gt;, learning Next.js, and picking up MySQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;finished coding the services-related pages.&lt;/li&gt;
&lt;li&gt;did some testing and checking before deploying the updates to production.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;practiced writing APIs for Next.js.&lt;/li&gt;
&lt;li&gt;continued going through &lt;a href="https://www.udemy.com/course/nextjs-react-the-complete-guide/"&gt;Next.js &amp;amp; React by Maximilian Schwarzmüller&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I didn't have the time to read an article about Scrum for today.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading! Have a good day!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/nextjs-react-the-complete-guide/"&gt;Next.js &amp;amp; React by Maximilian Schwarzmüller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/getting-started"&gt;Next.js official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swr.vercel.app/"&gt;SWR official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/7S_tz1z_5bA"&gt;MySQL Tutorial for Beginners by Mosh Hamedani&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sqlzoo.net/wiki/SQL_Tutorial"&gt;SQLZoo's SQL Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h2&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>2021 Summary: A Rebrand To “Open Up The Cloud” &amp; The Start Of Video Content</title>
      <author>Lou (🚀 Open Up The Cloud ☁️)</author>
      <pubDate>Thu, 20 Jan 2022 11:20:00 +0000</pubDate>
      <link>https://dev.to/loujaybee/2021-summary-a-rebrand-to-open-up-the-cloud-the-start-of-video-content-17k3</link>
      <guid>https://dev.to/loujaybee/2021-summary-a-rebrand-to-open-up-the-cloud-the-start-of-video-content-17k3</guid>
      <description>&lt;p&gt;It’s now become a tradition for me to sit down and do an end of year review, if you want to see the previous years, here is &lt;a href="https://openupthecloud.com/one-thing-ill-focusing-2018/"&gt;2017&lt;/a&gt;, &lt;a href="https://openupthecloud.com/2018-a-year-in-review/"&gt;2018&lt;/a&gt;, &lt;a href="https://openupthecloud.com/2019-a-year-in-review/"&gt;2019&lt;/a&gt; and &lt;a href="https://openupthecloud.com/2020-a-year-in-review/"&gt;2020&lt;/a&gt;. But wow, what a crazy year 2021 has been! Sitting down to look at the numbers, I’m even a little blown away myself. It’s been a year of really pushing myself, personally to get out there, join the community more, engage in video content.&lt;/p&gt;

&lt;p&gt;Looking back, it’s hard to recognise where things were at the start of the year. I started the year with no real YouTube videos or subscribers, no real Instagram account, no real Twitter following, etc. In just a year, things already look incredibly different. But more on that later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQNB3OgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/05/logo-1-760x377.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQNB3OgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/05/logo-1-760x377.png" alt="" width="760" height="377"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with the numbers…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-year-in-numbers"&gt;
  &lt;/a&gt;
  A Year In Numbers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;🚢 33 YouTube Videos published.&lt;/li&gt;
&lt;li&gt;🚢 12 Blogs published.&lt;/li&gt;
&lt;li&gt;🚢 11 newsletters published.&lt;/li&gt;
&lt;li&gt;👀 148K unique users visited the blog (up from 80K in 2020)&lt;/li&gt;
&lt;li&gt;👀 20K blog visitors per month (up from 8K in 2020)&lt;/li&gt;
&lt;li&gt;👀 18K YouTube views (up from 1K in 2020)&lt;/li&gt;
&lt;li&gt;📧 681 newsletter subscribers, with a 40% open rate (up from 300)&lt;/li&gt;
&lt;li&gt;⏫ 2267 personal Twitter followers (up from 526 followers)&lt;/li&gt;
&lt;li&gt;⏫ 626 YouTube subscribers (up from 12!)&lt;/li&gt;
&lt;li&gt;⏫ 531 followers on Open Up The Cloud twitter (from 0!)&lt;/li&gt;
&lt;li&gt;⏫ 892 Instagram Followers (from 40)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-rebrand-to-open-up-the-cloud"&gt;
  &lt;/a&gt;
  A Rebrand To “Open Up The Cloud”
&lt;/h2&gt;

&lt;p&gt;A big milestone of 2021 was the rebrand to “Open Up The Cloud”. It’s actually wild for me to think that even just 6 months ago, Open Up The Cloud was still branded as “The Dev Coach”!&lt;/p&gt;

&lt;p&gt;A few years ago, “cloud” wasn’t even really a career path, it was more like a tool that some tech folks used. Now, cloud is a whole career path for architects, data engineers, serverless folks…&lt;/p&gt;

&lt;p&gt;It was back in 2019 that I decided to double-down on cloud content, and ever since that decision, I’ve continued to see huge industry growth, which gave me the confidence to make the rebrand.&lt;/p&gt;

&lt;p&gt;It’s hard to overstate how impactful the branding change has been. Not only was I able to shed the “dev coach” branding which made me cringe when I shared content, but “Open Up The Cloud” more embodies the vision I had. “Cloud” is big enough to be interesting and varied, but narrow enough that people know exactly what it is that I’m talking about.&lt;/p&gt;

&lt;p&gt;To read more about the name change, check out this &lt;a href="https://www.instagram.com/p/CNt0eQ4AtRP/"&gt;instagram post&lt;/a&gt; / this &lt;a href="https://www.youtube.com/watch?v=JnqUElnhXus"&gt;interview with Sai&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-commitment-to-being-open"&gt;
  &lt;/a&gt;
  A Commitment To Being Open
&lt;/h2&gt;

&lt;p&gt;Another big milestone for me this year was &lt;a href="https://openupthecloud.com/income-report-december-2021/"&gt;publishing the first income reports&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I won’t go into the background much here, as I think it’s covered well in the blog post, and in &lt;a href="https://twitter.com/loujaybee/status/1475902397948047367?s=20"&gt;this Twitter thread&lt;/a&gt;. But, the TL;DR is: all of the income and expenses are now public, and I’ll report on them every month. I’ll use the report to share about social media and other metrics growth, too.&lt;/p&gt;

&lt;p&gt;Opening up the finances is a new chapter for Open Up The Cloud.&lt;/p&gt;

&lt;p&gt;I did a lot of meditating and thinking on this topic. At this point, I’m not personally motivated by random financial goals. I’m motivated by the potential impact I can have. Open Up The Cloud was, and now simply continues to be put the audience and community first.&lt;/p&gt;

&lt;p&gt;Now, let’s look back at last years goal, whether I hit it, and what I learned over 2021.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-years-goal-write-100-blog-articles"&gt;
  &lt;/a&gt;
  Last Years Goal: Write 100 Blog Articles!
&lt;/h2&gt;

&lt;p&gt;Last year’s goal was to write 100 blog articles, and get to 100,000 monthly recurring users. It was a big goal that’s for sure. Did I hit the goal? Nope, not even close! I only wrote 12 articles throughout 2021. However… Was it such a huge loss? Not at all.&lt;/p&gt;

&lt;p&gt;Throughout the year I achieved a much bigger goal, which was pushing through some blockers I had with publishing more “personal” content. In 2021, I posted: 33 YouTube videos, published 11 newsletters, and wrote 12 pretty big blog posts.&lt;/p&gt;

&lt;p&gt;If we add those all up, it equals 56 individual items of high-quality content, that I’m proud of. It’s not the 100 articles that I wanted, but it’s more than 1 piece of content per week, and as far as I’m concerned, that’s some really good output. I’m proud of that work. For YouTube, I had to learn photography, research and buy equipment, teach myself how to edit, learn thumbnails, improve my presentation on camera, and more. Behind those videos was a load of thinking, research and work.&lt;/p&gt;

&lt;p&gt;To build credibility in an online world, we must constantly remind people that we know what we’re talking about. And it’s our responsibility to constantly build that credibility. We can’t assume everyone knows us and trusts us—they don’t. When people discover our work for the first time, we have no credibility. So, we have to re-share old work, and “remind” people of our credibility.&lt;/p&gt;

&lt;p&gt;The challenge that I faced when doing the majority of my work written, through blogging was that despite having a growing website… no-one knew who I was. I’m sure lots of people read my work, but failed to notice the little author box at the end, and draw the link between the article they read. The reality is that blogging simply isn’t very good for building credibility in today’s world.&lt;/p&gt;

&lt;p&gt;I was not fully utilising my story, my history and credibility to grow the brand.&lt;/p&gt;

&lt;p&gt;I’ve been a software engineer for over 10 years now, I’ve worked in start-ups, enterprises, government, finance, I’ve done front-end, UX and UI design, I’ve built full-stack apps and backends, I’ve built infra, networks and serverless services, libraries and tools, I’ve refactored legacy codebases, I’ve ran training courses, lead workshops, coached and mentored folks, I’ve managed teams, built products which landed huge amounts of investment. But we simply can’t expect everyone to know every detail about our past.&lt;/p&gt;

&lt;p&gt;Visual platforms like YouTube, TikTok and Instagram, are great to “get your face out there”, and build credibility. When people hear you speak, and talk, and see the “context” of where you work and your space, trust just comes more naturally. We can’t simply expect people to go through our LinkedIn, dig up our resume or read all our old articles. We have to remind people, link things, reference them.&lt;/p&gt;

&lt;p&gt;Which is why I got more personal. I started posting on Twitter, I revived my Instagram, and forced myself to do more video’s. I started posting more on YouTube. I knew that being on camera would make me uncomfortable, but it seemed like more of a good reason to do it than not. And now, at the end of 2021, I can say those experiments were a massive success, I can see the quality of the networks and relationships that I’ve built have gone up exponentially, and I credit that to “putting my face” out there, sharing more of my past and my experience.&lt;/p&gt;

&lt;p&gt;So, did I hit my writing goal? Nope. But Is that a problem? I don’t think so, I think I achieved something far more powerful in the mean time. So, that covers last years goal, but what about this year? What do I have in store?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2022-goal-12-months-12-videos"&gt;
  &lt;/a&gt;
  2022 Goal: 12 Months, 12 Videos
&lt;/h2&gt;

&lt;p&gt;Last year’s goal was all about writing. This year’s is goal is all about video. Video is the future of content in my eyes, and my goal this year is to produce one really good video per month (at least).&lt;/p&gt;

&lt;p&gt;Producing one video doesn’t mean I’ll not write any blogs, or post on social media, it simply means I’ll commit to a theme each month and publish at least one video that I’m proud of.&lt;/p&gt;

&lt;p&gt;My plan is also to do a bunch of product/course reviews of the different learning platforms and use taking some certs as the excuse / exercise in which to review them. Here’s a draft plan of what those 12 video’s are currently looking like for 2022 (in no particular order):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Exampro (&lt;a href="http://Exampro.co"&gt;AWS Data Analytics Speciality&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Analyse 100 cloud architect and data job descriptions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Antoni IT&lt;/strong&gt; (&lt;a href="https://training.antonit.com/"&gt;Google Cloud Professional Architect&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review Of Mastering Vim (&lt;a href="https://www.vim.so/"&gt;vim.so&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review of A Cloud Guru (&lt;a href="https://acloudguru.com/course/aws-certified-sysops-administrator-associate"&gt;AWS SysOps Associate Exam&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A day in the life&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review of Adrian Cantrill (&lt;a href="https://learn.cantrill.io/"&gt;Solutions Architect Professional&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tech World With Nana Review (&lt;a href="https://www.techworld-with-nana.com/kubernetes-administrator-cka"&gt;CKA Kubernetes Administrator&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review Of CodeAcademy&lt;/strong&gt; (&lt;a href="https://www.codecademy.com/learn/paths/data-science"&gt;Data Science&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Certified Developer Associate&lt;/strong&gt; (&lt;a href="https://www.udemy.com/course/aws-certified-developer-associate-dva-c01/"&gt;Stephane Mareek Udemy&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GoLang Course(s) Review (&lt;a href="https://tutorialedge.net/"&gt;TutorialEdge.net&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review of Cloud Academy (&lt;a href="https://cloudacademy.com/learning-paths/linux-certification-lpic-1-8/"&gt;Linux Server Professional LPIC-101&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The majority of these video’s are going to be about reviewing some existing courses, and certifications. I talk a lot about the cloud, but folks who I talk to are in the trenches, doing these courses, so I’d like to get in the trenches with them.&lt;/p&gt;

&lt;p&gt;Along the way, I want to also get certified in a bunch of different areas: complete and finish off some AWS certifications, as that’s been my previous area of speciality. But also step into traditional networking, and also Kubernetes, which I’ve actually long since ignored.&lt;/p&gt;

&lt;p&gt;So that’s it, that’s the plan for 2022. I enter 2022 with a much stronger vision of what Open Up The Cloud is, and can do. I’m excited for the year ahead! See you next year in 2023!&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://openupthecloud.com/2021-summary/"&gt;2021 Summary: A Rebrand To “Open Up The Cloud” &amp;amp; The Start Of Video Content&lt;/a&gt; appeared first on &lt;a href="https://openupthecloud.com"&gt;Open Up The Cloud&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>meta</category>
    </item>
    <item>
      <title>What is SEO and how to do search engine optimization? Explained for begginers. </title>
      <author>Shivashish Yadav</author>
      <pubDate>Thu, 20 Jan 2022 11:11:42 +0000</pubDate>
      <link>https://dev.to/shivashish/what-is-seo-and-how-to-do-search-engine-optimization-explained-19lb</link>
      <guid>https://dev.to/shivashish/what-is-seo-and-how-to-do-search-engine-optimization-explained-19lb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vR6BHuEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26uli6q8phj3uw2v2xgp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vR6BHuEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26uli6q8phj3uw2v2xgp.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;What is SEO, and why is it important for a blog? The simple answer is SEO is the life of blogging. Because if you want to write any good article, if your article is not ranked properly, then the chances of getting traffic in it are negligible. In such a situation, all the hard work of the writers goes into the water.&lt;/p&gt;

&lt;p&gt;In today's digital age, if you have to come in front of people, then online is the only way where you can be present in front of crores of people simultaneously.&lt;/p&gt;

&lt;p&gt;Here you can be present through the video itself, or you can reach out to the people through your written content. But to do this, you have to come to the first pages of Search Engines because these are the pages which visitors like and trust more.&lt;/p&gt;

&lt;p&gt;But reaching here is not that straightforward task because for this you have to do SEO of your articles properly. Meaning that they have to be optimized properly so that they can rank in the search engine. And its process is called SEO. Whereas in today's article, we will get information about what is called SEO and how to do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-seo"&gt;
  &lt;/a&gt;
  What is SEO
&lt;/h2&gt;

&lt;p&gt;SEO or Search Engine Optimization is a technique by which we bring our post or page to the top on any search engine, or rank it. We all know what a search engine is. When it comes to search engines, then for your information, let me tell you that Google is the most popular search engine in the entire world, apart from this there are other search engines like Bing, Yahoo. With the help of SEO, we can keep our blog at No.1 position on all search engines.&lt;/p&gt;

&lt;p&gt;For example, if we go to Google and search by typing any keyword, then Google shows you all the contents related to that keyword. All these contents that we see come from different blogs.&lt;/p&gt;

&lt;p&gt;The result which we see at the top is on No.1 rank in Google, only then it has maintained its place at the top. On No.1 it means that SEO has been used very well in that blog so that it gets more visitors and that is why that blog has become famous.&lt;/p&gt;

&lt;p&gt;SEO helps to bring our blog to No.1 rank in Google. This is a technique that increases the number of visitors to your website by placing it at the top of the search result of the search engine.&lt;/p&gt;

&lt;p&gt;If your website is at the top of the search result, then internet users will first visit your site, which increases the chances of getting more and more traffic in your site and your income also starts getting good. It is very important to use SEO to increase organic traffic to your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-full-form-of-seo"&gt;
  &lt;/a&gt;
  What is the full form of SEO?
&lt;/h2&gt;

&lt;p&gt;The full form of SEO is "Search Engine Optimization".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-seo-is-important-for-blog"&gt;
  &lt;/a&gt;
  Why SEO is Important for Blog?
&lt;/h2&gt;

&lt;p&gt;You have learned what SEO is, let us now know why it is important for the blog. We use SEO to make our website accessible to people.&lt;/p&gt;

&lt;p&gt;Suppose I have created a website and have published good quality content in it, but if I do not use SEO, then my website cannot reach people and there will be no use of making my website.&lt;/p&gt;

&lt;p&gt;If we does not use SEO, then whenever a user searches for a keyword, then even if there is any content related to that keyword in your website, the user cannot access your website.&lt;/p&gt;

&lt;p&gt;This is because the search engine cannot find your site, nor will it be able to store the content of your website on its database. Due to which, it will be very difficult to have traffic in your website. That is why it is very significant to do SEO properly in your site.&lt;/p&gt;

&lt;p&gt;Understanding SEO is not so difficult, if you learn it, then you can make your blog much better and increase its value in the search engine.&lt;/p&gt;

&lt;p&gt;After learning SEO, when you use it for your blog, you will not see its result immediately, for this you will have to be patient and keep doing your work. Because the fruit of patience is sweet, and you will definitely see the color of your hard work.&lt;/p&gt;

&lt;p&gt;Like I have already said that how it becomes necessary to do SEO for ranking and for traffic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-seo-search-engine-optimization-so-important"&gt;
  &lt;/a&gt;
  Why is SEO (Search Engine Optimization) so important?
&lt;/h2&gt;

&lt;p&gt;Most users use Search Engines on the Internet to get answers to their questions. In such a situation, they pay more attention to the top results shown by the search engine. So if you also want to come in front of people, then you also have to take the help of SEO to rank the blog. That is, youYou have to come to the first page of the Google search result. SEO is not just for search engines, but having good SEO practices helps in increasing the user experience and also increases the usability of your website. Users mostly trust only the top results and this increases the trust of that website. That is why it is very significant to know in SEO, as well as keep yourself updated. SEO is also very essential for the social promotion of your website or blog. Because people who see your site in search engines like google, then most of them share them in social media like Facebook, Twitter, Pinterest. SEO plays an important role in increasing the traffic of any site. SEO definitely helps you to stay ahead in any competition. For example, if two websites are selling similar things, then the website which is SEO optimized attracts more customers to itself and their sales also increase while others cannot do that much.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-seo"&gt;
  &lt;/a&gt;
  Types of SEO
&lt;/h2&gt;

&lt;p&gt;There are two types of SEO, one is On-page SEO, and the other is Off-page SEO. The work of these two is completely different, let us also know about them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On-Page SEO&lt;/li&gt;
&lt;li&gt;Off-Page SEO&lt;/li&gt;
&lt;li&gt;Local SEO&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-what-is-onpage-seo"&gt;
  &lt;/a&gt;
  1. What is On-Page SEO
&lt;/h2&gt;

&lt;p&gt;On-page SEO work is done in your blog. This means to design your website properly which is SEO friendly.&lt;/p&gt;

&lt;p&gt;Using the template in your website by following the rule of SEO. Writing good content and using good keywords in them which are most searched in the search engine.&lt;/p&gt;

&lt;p&gt;Using keywords in the right place in the page like title, meta description, using keywords in the content makes it easy for Google to know on whom your content is written and helps to rank your website on Google page quickly. Due to which the traffic of your blog increases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-do-onpage-seo"&gt;
  &lt;/a&gt;
  How to do On-Page SEO
&lt;/h2&gt;

&lt;p&gt;Here we will learn about some such techniques, with the help of which we will do On-Page SEO on our blog or website in a good way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-website-speed"&gt;
  &lt;/a&gt;
  1. Website Speed
&lt;/h3&gt;

&lt;p&gt;Website speed is a very important link from the point of view of SEO. It has been found from a survey that any visitor stays on a blog or website for 5 to 6 seconds.&lt;/p&gt;

&lt;p&gt;If it does not open within this time, then it leaves it and migrates to another. And this also applies for Google because if your blog does not open soon then a negative signal reaches Google this blog is not that good, or it is not quick. So keep your site speed as good as possible.&lt;/p&gt;

&lt;p&gt;Here I have given some important tips by which you can speed up your blog or website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use simple and attractive themes&lt;/li&gt;
&lt;li&gt;Don't use too many plugins&lt;/li&gt;
&lt;li&gt;Keep the image size to a minimum&lt;/li&gt;
&lt;li&gt;Use W3 Total cache and WP super cache plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-navigation-of-the-website"&gt;
  &lt;/a&gt;
  2. Navigation of the Website
&lt;/h3&gt;

&lt;p&gt;It should be easy to move around in your blog or website so that no visitor and Google have any problem in going from one page to another. The more smooth the navigation of the website, the more ease any search engine will have to navigate the site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-title-tag"&gt;
  &lt;/a&gt;
  3. Title Tag
&lt;/h3&gt;

&lt;p&gt;Make the title tag very good in your website so that if any visitor reads it, then click on your title as soon as possible, this will also increase your CTR.&lt;/p&gt;

&lt;p&gt;How to make good title tag: Do not use over 65 words in your title because Google does not show title tag in google searches after 65 words.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-how-to-write-the-url-of-the-post"&gt;
  &lt;/a&gt;
  4. How to Write the URL of the Post
&lt;/h3&gt;

&lt;p&gt;Always keep the URL of your post simple and as short.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-internal-link"&gt;
  &lt;/a&gt;
  5. Internal Link
&lt;/h3&gt;

&lt;p&gt;This is a great way to rank your post. With this, you can be interlinking your related pages with each other. With this, all your interlinked pages can be ranked easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-alt-tag"&gt;
  &lt;/a&gt;
  6. Alt Tag
&lt;/h3&gt;

&lt;p&gt;Use images in the post of your website. Because you can get a lot of traffic from images, so while using the image, do not forget to put ALT TAG in it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-content-heading-and-keyword"&gt;
  &lt;/a&gt;
  7. Content, Heading and Keyword
&lt;/h3&gt;

&lt;p&gt;As we all know about the content that this is a very important link. Because Content is also called King and the better your content, the better the site's valuation will be. Therefore, write content of over 800 words at least.&lt;/p&gt;

&lt;p&gt;With this you can also give complete information, and it is also good for SEO. Never steal or copy content from anyone else.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heading:&lt;/strong&gt; Special care should be taken of the headings of your article as it has a great impact on SEO. The title of the article is H1 and after this you can nominate the subheadings with H2, H3, etc. With this, you must use the focus keyword.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keyword:&lt;/strong&gt; Use LSI Keyword while writing your article. With this, you can easily link people's searches. With this, BOLD significant keywords so that Google and visitors know that these are important keywords, and it will attract their attention towards it.&lt;/p&gt;

&lt;p&gt;These were some points about some information about On-Page SEO.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-what-is-offpage-seo"&gt;
  &lt;/a&gt;
  2. What is Off-Page SEO
&lt;/h2&gt;

&lt;p&gt;All the work of Off-Page SEO is done outside the blog. In Off-page SEO, we have to promote our blog, like visiting many popular blogs, commenting on their article and submitting the link of our website, we call it backlink. The website benefits a lot from backlinks.&lt;/p&gt;

&lt;p&gt;Make an attractive page of your website on social networking sites like Facebook, Twitter, Quora and increase your followers, this has the chances of increasing more visitors to your website.&lt;/p&gt;

&lt;p&gt;In big blogs which are very popular, submit guest post on their blog, this will allow visitors to their blog to know you and traffic will start coming to your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-do-offpage-seo"&gt;
  &lt;/a&gt;
  How to do Off-Page SEO
&lt;/h2&gt;

&lt;p&gt;Here I will tell you about some Off-Page SEO Techniques which will prove very useful for you later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-search-engine-submission"&gt;
  &lt;/a&gt;
  1. Search Engine Submission
&lt;/h3&gt;

&lt;p&gt;Your website should be submitted properly in all search engines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-bookmarking"&gt;
  &lt;/a&gt;
  2. Bookmarking
&lt;/h3&gt;

&lt;p&gt;The page and post of your blog or website should be submitted on the website with Bookmarking.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-directory-submission"&gt;
  &lt;/a&gt;
  3. Directory Submission
&lt;/h3&gt;

&lt;p&gt;Your blog or website should be submitted to a directory with a popular, high PR.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-social-media"&gt;
  &lt;/a&gt;
  4. Social Media
&lt;/h3&gt;

&lt;p&gt;Create a profile on your blog or website page and social media and add a link to your website like Facebook, Twitter, LinkedIn&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-classified-submission"&gt;
  &lt;/a&gt;
  5. Classified Submission
&lt;/h3&gt;

&lt;p&gt;Advertise your website for free by going to the Free Classified Website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-q-amp-a-site"&gt;
  &lt;/a&gt;
  6. Q &amp;amp; A site
&lt;/h3&gt;

&lt;p&gt;You can ask any question by going to the question-and-answer website, and you can put a link to your site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-blog-commenting"&gt;
  &lt;/a&gt;
  7. Blog Commenting
&lt;/h3&gt;

&lt;p&gt;By visiting the blog related to your blog, you can comment in their posts and put a link to your website (the link should be placed where the website is written).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-pin"&gt;
  &lt;/a&gt;
  8. Pin
&lt;/h3&gt;

&lt;p&gt;You can post the image of your website on Pinterest, this is an excellent way to increase traffic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-guest-post"&gt;
  &lt;/a&gt;
  9. Guest Post
&lt;/h3&gt;

&lt;p&gt;You can guest post by visiting the blog related to your website, this is the best from where you can take a do-follow link and that too in the right way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-what-is-local-seo"&gt;
  &lt;/a&gt;
  3. What is Local SEO
&lt;/h2&gt;

&lt;p&gt;Often people ask what is Local SEO? If I believe, then the answer lies in the question itself.&lt;/p&gt;

&lt;p&gt;If you do Local SEO, then this is the summation of two words, Local + SEO. SEO done keeping in mind a local audience is called Local SEO.&lt;/p&gt;

&lt;p&gt;This is a technique in which your website or blog is specially optimized so that it ranks better on the search engine for a local audience.&lt;/p&gt;

&lt;p&gt;By the way, with the help of a website, you can target the entire internet, whereas if you want to target only one particular locality, then for this you have to use Local SEO.&lt;/p&gt;

&lt;p&gt;In this, optimize the name of your city, while its address details will also have to be optimized together. To say it briefly, then you have to optimize your site in such a way that people can know you not only online but also offline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-of-local-seo"&gt;
  &lt;/a&gt;
  Example of Local SEO
&lt;/h2&gt;

&lt;p&gt;If you have a local business, such as a shop, where people often visit you, then if you optimize your website in such a way that people can easily reach you in real life too.&lt;/p&gt;

&lt;p&gt;If here, you only target your own local area and SEO optimized your site accordingly. Then this type of SEO is called "local SEO".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-seo-and-internet-marketing"&gt;
  &lt;/a&gt;
  What is the difference between SEO and Internet Marketing?
&lt;/h2&gt;

&lt;p&gt;Many people have many doubts about SEO and Internet Marketing. They think that these two are often the same. But in response to this, I want to say that SEO is a type of tool, it can also be called a part of Internet Marketing. By using it, it becomes very easy to do Internet Marketing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-seo-and-sem"&gt;
  &lt;/a&gt;
  What is the difference between SEO and SEM?
&lt;/h2&gt;

&lt;p&gt;The major difference between SEO and SEM is that SEO is an important part of SEM. Let me tell you about both SEO and SEM.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SEO or Search Engine Optimization is a process by which a blogger optimizes his blog or website in such a way that he can rank the articles of the blog in the search engine and bring free traffic to his blog from there. The main purpose of SEO is that your blog/website can be optimized properly so that it can get a better ranking in the search engine. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SEM or Search Engine Marketing is a marketing process by which you can make your blog more visible in search engines so that you can get traffic, whether it is free traffic (SEO) or paid traffic (Paid Search Advertisement). With SEM you can get more things than SEO. Because it is not only limited to free traffic but it also includes other methods such as PPC advertising, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#information-about-seo-terms"&gt;
  &lt;/a&gt;
  Information about SEO Terms
&lt;/h2&gt;

&lt;p&gt;If you have a blog or a website, then you will know a lot about basic SEO, how it works. But I know that there are many of you who do not even have any idea about Basic SEO Terms.&lt;/p&gt;

&lt;p&gt;That's why I thought why not give information about some very important Basic SEO Terms to you people so that you can also know about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backlink"&gt;
  &lt;/a&gt;
  Backlink
&lt;/h3&gt;

&lt;p&gt;Also called its in link or simply link, it is a hyperlink to another website that points to your website. Backlinks are very important from the SEO point of view, as it directly influences the Search Ranking of any webpage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pagerank"&gt;
  &lt;/a&gt;
  PageRank
&lt;/h3&gt;

&lt;p&gt;PageRank is an algorithm that Google uses to estimate which relative significant pages are in the web.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anchor-text"&gt;
  &lt;/a&gt;
  Anchor text
&lt;/h3&gt;

&lt;p&gt;Anchor text of any backlink is a type of text which is clickable. If your Keyword is available in your Anchor Text, then it will help you a lot from the point of view of SEO as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#title-tag"&gt;
  &lt;/a&gt;
  Title Tag
&lt;/h3&gt;

&lt;p&gt;Title Tag is mainly the title of any web page and this is a very important factor for Google's Search Algorithm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meta-tags"&gt;
  &lt;/a&gt;
  Meta Tags
&lt;/h3&gt;

&lt;p&gt;Just like Title Tag, by using Meta Tag, Search Engines get to know what is in the content in the pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-algorithm"&gt;
  &lt;/a&gt;
  Search Algorithm
&lt;/h3&gt;

&lt;p&gt;With the help of Google's search algorithm, we can find out which web pages are relevant in the whole Internet. About 200 algorithms work in Google's Search Algorithm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serp"&gt;
  &lt;/a&gt;
  SERP
&lt;/h3&gt;

&lt;p&gt;Its full form is Search Engine Results Page. It basically shows only those pages which are relevant according to Google Search Engines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyword-density"&gt;
  &lt;/a&gt;
  Keyword Density
&lt;/h3&gt;

&lt;p&gt;This Keyword Density shows how many times any keyword has been used in the article. Keyword density is very important from the point of view of SEO.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyword-stuffing"&gt;
  &lt;/a&gt;
  Keyword Stuffing
&lt;/h3&gt;

&lt;p&gt;Like I have already said that Keyword Density is very important from the point of view of SEO but if a Keyword is used excessively, then it is called Keyword Stuffing. This is called Negative SEO because it has a deleterious effect on your blog.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#robotstxt"&gt;
  &lt;/a&gt;
  Robots.txt
&lt;/h3&gt;

&lt;p&gt;This is nothing more than just a file which is kept in the domain's root. Using this, the search bots are informed about the structure of the website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#q-n-a"&gt;
  &lt;/a&gt;
  Q n A
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-are-organic-and-inorganic-results"&gt;
  &lt;/a&gt;
  What are Organic and Inorganic results?
&lt;/h3&gt;

&lt;p&gt;There are mainly two types of listings on SERP (Search Engine Result Page) – Organic and Inorganic.&lt;/p&gt;

&lt;p&gt;In this, we have to pay Google for Inorganic Listing. They are paid and money has to be paid in it.&lt;/p&gt;

&lt;p&gt;Whereas organic listing is completely free, we can also come on the top page of Google without paying, but for this you have to do SEO first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-seo-easy-to-teach-or-do"&gt;
  &lt;/a&gt;
  Is SEO easy to teach or do?
&lt;/h3&gt;

&lt;p&gt;There is no simple answer to this. Because no one can ever achieve complete mastery over SEO, the reason for this is that there are always changes in it.&lt;/p&gt;

&lt;p&gt;In such a situation, if you are serious about blogging, then you must keep information about SEO tutorial. By doing this, they are going to be of great use to you later. There are no such rules of SEO, rather it is based on some Google Algorithms, and it keeps on changing.&lt;/p&gt;

&lt;p&gt;We must note one thing that if someone tells you he is a big SEO Expert, then never believe him because till date no one has been able to mastery on SEO.&lt;/p&gt;

&lt;p&gt;This thing is like this, and it keeps changing with time and according to the need. But still there are some fundamentals of Google SEO guide which are always the same. That's why it is important that bloggers always keep themselves updated with new SEO techniques.&lt;/p&gt;

&lt;p&gt;With this, you will know about the trends going on in the market, so that you can also bring necessary changes in your articles, which will help you to rank later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-seo-always-changing"&gt;
  &lt;/a&gt;
  Is SEO always changing?
&lt;/h3&gt;

&lt;p&gt;Yes, SEO is always changing. This is because the search engine's algorithm is always changing, in the same way we also have to change the SEO in our site so that it appears at the top of the SERP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-best-seo-strategy"&gt;
  &lt;/a&gt;
  What is the best SEO strategy?
&lt;/h3&gt;

&lt;p&gt;No SEO strategy is the best. This is because the strategy or technique of SEO is always changing. Therefore, it would not be right to consider any one strategy as the best. It would be better that you keep doing your own research and experimentation, by this you will know about the right working things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#does-page-speed-%E2%80%8B%E2%80%8Bmatter-in-google-ranking"&gt;
  &lt;/a&gt;
  Does Page Speed ​​Matter in Google Ranking?
&lt;/h3&gt;

&lt;p&gt;Yes, Page Speed ​​has a different importance in Google ranking. The better the page speed, the more easily you can rank on Google.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-did-you-learn-today"&gt;
  &lt;/a&gt;
  What did you learn today?
&lt;/h2&gt;

&lt;p&gt;You all must have understood what is SEO. If you have any doubts about this article, or you want that there should be some improvement in it, then you can write low comments for this.&lt;/p&gt;

&lt;p&gt;Easily now you can feel free to answer what is SEO. From these thoughts of yours, we will get a chance to learn something and improve something.&lt;/p&gt;

</description>
      <category>seo</category>
      <category>webdev</category>
      <category>ranking</category>
    </item>
    <item>
      <title>My Portfolio </title>
      <author>Saqlain Raza</author>
      <pubDate>Thu, 20 Jan 2022 10:58:42 +0000</pubDate>
      <link>https://dev.to/saqlainraza/my-portfolio-ad2</link>
      <guid>https://dev.to/saqlainraza/my-portfolio-ad2</guid>
      <description>&lt;p&gt;&lt;a href="https://saqlainraza.netlify.app/"&gt;Visit&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Distributed messaging with NATS</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Thu, 20 Jan 2022 10:45:52 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/distributed-messaging-with-nats-3jg3</link>
      <guid>https://dev.to/karanpratapsingh/distributed-messaging-with-nats-3jg3</guid>
      <description>&lt;p&gt;Recently, I was building an application where I wanted to take event-driven approach for async communication between the microservices. Usually, I would use &lt;a href="https://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt;, &lt;a href="https://www.rabbitmq.com/tutorials/tutorial-one-go.html"&gt;RabbitMQ&lt;/a&gt;, &lt;a href="https://redis.io/topics/streams-intro"&gt;Redis Streams&lt;/a&gt; or a managed solution like &lt;a href="https://aws.amazon.com/sns/"&gt;AWS SNS&lt;/a&gt;, &lt;a href="https://cloud.google.com/pubsub/"&gt;Google Cloud Pub/Sub&lt;/a&gt; but this time I wanted to keep my implementation easy and cost minimal yet not affect my scalability or increase technical debt for the future. After a few hops on &lt;a href="//stackshare.io"&gt;StackShare&lt;/a&gt;, I found &lt;a href="https://nats.io"&gt;NATS&lt;/a&gt; as a popular alternative and after trying it out, I really liked it. That evening I migrated everything from Apache Kafka to NATS. So, in this article, we'll learn what NATS is and how to get started with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-nats"&gt;
  &lt;/a&gt;
  What is NATS?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--16BnSNlZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nats.io/img/logos/nats-horizontal-color.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--16BnSNlZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nats.io/img/logos/nats-horizontal-color.png" alt="nats" width="880" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NATS is an &lt;a href="https://github.com/nats-io/nats-server"&gt;open-source&lt;/a&gt; messaging system. It provides a simple, secure, and performant communications system for digital systems, services, and devices. The core design principles of NATS are performance, scalability, and ease of use. Its server can run on-premise, in the cloud, at the edge, and even on a Raspberry Pi. NATS can secure and simplify the design and operation of modern distributed systems. It is written in &lt;a href="https://go.dev/"&gt;Go&lt;/a&gt; and used by companies like Tesla, Paypal, Walmart, and many others. NATS is also part of the Cloud Native Computing Foundation (&lt;a href="https://www.cncf.io/"&gt;CNCF&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: For more info checkout &lt;a href="https://nats.io"&gt;NATS.io&lt;/a&gt; or watch this fantastic &lt;a href="https://www.youtube.com/watch?v=lHQXEqyH57U"&gt;Keynote&lt;/a&gt; by its creator &lt;a href="https://github.com/derekcollison"&gt;Derek Collison&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;p&gt;Here are some of the features that I found interesting for my use case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease of use&lt;/li&gt;
&lt;li&gt;Highly performant&lt;/li&gt;
&lt;li&gt;Zero downtime scaling&lt;/li&gt;
&lt;li&gt;Self healing and resilient&lt;/li&gt;
&lt;li&gt;Isolated and secure by default&lt;/li&gt;
&lt;li&gt;Supports edge, cloud or hybrid deployments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h3&gt;

&lt;p&gt;Before we start with any code, let's see what we will implement. We will try to make a simple pub/sub example like shown in the diagram below, and we will use different languages and pretend they are different services.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cTIa4vs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aidayfv61l5bhhrcjvwy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cTIa4vs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aidayfv61l5bhhrcjvwy.png" alt="demo" width="880" height="672"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setup-nats-server"&gt;
  &lt;/a&gt;
  Setup NATS server
&lt;/h4&gt;

&lt;p&gt;Before anything, we'll need to set up a NATS server. We can do it multiple ways as shown below. Personally, I like to use docker but feel free to set it up however you want. We can also use &lt;code&gt;demo.nats.io&lt;/code&gt; which is a demo server provider buy NATS authors (please don't use it for production!).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here's our &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;nats&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nats&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nats:2.7.0-alpine&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;4222:4222&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or we can simply use &lt;code&gt;docker run&lt;/code&gt; as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run -p 4222:4222 nats:2.7.0-alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Locally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I'm using macOS, I installed it with &lt;a href="https://brew.sh/"&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install nats-server
$ nats-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: Checkout &lt;a href="https://docs.nats.io/running-a-nats-service/introduction/installation"&gt;official docs&lt;/a&gt; for more installation options.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[18193] 2022/01/20 16:00:05.581377 [INF] Starting nats-server
[18193] 2022/01/20 16:00:05.581992 [INF]   Version:  2.7.0
[18193] 2022/01/20 16:00:05.581996 [INF]   Git:      [not set]
[18193] 2022/01/20 16:00:05.582005 [INF]   Name:     ND2VU7MH7J6RU6RS6JUKKPPCTMRPY35LRBRFT3NLENDZI3TL33PVRR3P
[18193] 2022/01/20 16:00:05.582008 [INF]   ID:       ND2VU7MH7J6RU6RS6JUKKPPCTMRPY35LRBRFT3NLENDZI3TL33PVRR3P
[18193] 2022/01/20 16:00:05.582791 [INF] Listening for client connections on 0.0.0.0:4222
[18193] 2022/01/20 16:00:05.583066 [INF] Server is ready
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#client"&gt;
  &lt;/a&gt;
  Client
&lt;/h4&gt;

&lt;p&gt;Now that our NATS server is running, we'll be using &lt;a href="https://github.com/nats-io/nats.go"&gt;Go&lt;/a&gt; and &lt;a href="https://github.com/nats-io/nats.js"&gt;Node.js&lt;/a&gt;  clients to connect to it for a simple demonstration. Not familiar with Go or Node? Don't worry NATS has clients available in &lt;a href="https://nats.io/download"&gt;over 40 languages&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;First, let's init our Go module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go mod init example
$ go get github.com/nats-io/nats.go/@latest
$ touch main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our Go code will act as the subscriber.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/nats-io/nats.go"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"my_subject"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;wait&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;nc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;nats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;nc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;nc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Subscribed to"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's init our Node project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm init -y
$ npm install nats
$ touch index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is our JavaScript code that will act as the publisher.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;StringCodec&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nats&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_subject&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;servers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost:4222&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;codec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StringCodec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;servers&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;nc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;codec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello there!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sent...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drain&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will subscribe to the &lt;code&gt;my_subject&lt;/code&gt; subject by running our Go code first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run main.go
Subscribed to my_subject
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, We will run our JavaScript code, which publishes &lt;code&gt;Hello there!&lt;/code&gt; message on &lt;code&gt;my_subject&lt;/code&gt; subject.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ node index.js
Sent...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there it is! We can see the message being received by our subscriber. NATS makes this so simple, yet so powerful!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Subscribed to my_subject
Received: Hello there!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We haven't even scratched the surface in this article, NATS also has a built-in distributed persistence system called &lt;a href="https://docs.nats.io/nats-concepts/jetstream"&gt;JetStream&lt;/a&gt; which takes it to a whole another level!&lt;/p&gt;

&lt;p&gt;Lastly, I think NATS is a fantastic technology, it scales well from a hobby project to production ready distributed applications. And best of all it's quite easy to get started. I hope this article was helpful in getting you interested!&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>backend</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Introducing a new tool - How to back your DEV Post</title>
      <author>SnowBit</author>
      <pubDate>Thu, 20 Jan 2022 10:39:03 +0000</pubDate>
      <link>https://dev.to/codewithsnowbit/introducing-a-new-tool-dev-backup-1c06</link>
      <guid>https://dev.to/codewithsnowbit/introducing-a-new-tool-dev-backup-1c06</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello folks 👋
&lt;/h3&gt;

&lt;p&gt;What's up friends, this is &lt;strong&gt;SnowBit&lt;/strong&gt; here. I am a passionate young developer having the intention to become a successful developer.&lt;/p&gt;

&lt;p&gt;Today, I am here with an amazing tool for my fellow writers on this platform. Probably, you all write articles and post on DEV.to and want to keep a backup of your posts and articles on GitHub and doing that manually becomes somewhat tedious work. &lt;/p&gt;

&lt;p&gt;Here comes &lt;strong&gt;&lt;a href="https://dev-backup.vercel.app/"&gt;DEV Backup&lt;/a&gt;&lt;/strong&gt; that backup/saves any post on &lt;strong&gt;DEV Community&lt;/strong&gt; in your GitHub Repository in just a few clicks. Let's give it a try 🌟 - &lt;a href="https://dev-backup.vercel.app/"&gt;DEV Backup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xspv9Vbf9qI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thank you for reading, have a nice day!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on Twitter - &lt;a href="https://twitter.com/codewithsnowbit"&gt;@codewithsnowbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subscribe me on YouTube - &lt;a href="https://www.youtube.com/channel/UCNTKqF1vhFYX_v0ERnUa1RQ?view_as=subscriber&amp;amp;sub_confirmation=1"&gt;Code With SnowBit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How could you be certified with AWS DevOps Professional? </title>
      <author>Igor Soroka</author>
      <pubDate>Thu, 20 Jan 2022 10:27:23 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-could-you-be-certified-with-aws-devops-professional-1eah</link>
      <guid>https://dev.to/aws-builders/how-could-you-be-certified-with-aws-devops-professional-1eah</guid>
      <description>&lt;p&gt;Last year, I felt that it was time to have more certifications. I have a Developer Associate certificate, so getting a Solutions Architect Associate one should not be an issue. I was wrong. It took time to get into the flow of the studying. Passing exams is a skill you should develop through an effective routine and development mindset. &lt;/p&gt;

&lt;p&gt;Recently I went to certification on DevOps professional. My background is in Development mostly. However, I spent my time setting up environments and infrastructure during recent years. It is worth mentioning that my typical stack includes AWS Lambda, DynamoDB, S3, API Gateway, and SNS/SQS. Here is my list of tips and materials for passing your DevOps professional certificate. You could combine them in any order.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General recommendations&lt;/strong&gt;. Do not underestimate the content, syllabus, and time during the exam preparation. Sitting on the exam for 3 hours could be challenging. I took the exam in the Pearson VUE accredited test center. I got two A4 papers for writing. With the online option, you will not have a chance to write anything. The notes during the exam helped to map the question and refresh it during the review part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pass-sysops-administrator"&gt;
  &lt;/a&gt;
  Pass SysOps Administrator
&lt;/h2&gt;

&lt;p&gt;Try to focus on on monitoring, deployments. This exam will benefit the parts regarding deployments, auditing, and monitoring. Take 1-2 months for the DevOps preparation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-whitepapers"&gt;
  &lt;/a&gt;
  Read whitepapers
&lt;/h2&gt;

&lt;p&gt;I was skipping them during associate ones. They build the correct mindset towards implementation on how to follow AWS practices. I advise you to read them before sleep. Here is the official list&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1j5TgVfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpg2c7qagif4qg4z1b9d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1j5TgVfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpg2c7qagif4qg4z1b9d.jpg" alt="whitepapers list" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-course"&gt;
  &lt;/a&gt;
  Main Course
&lt;/h2&gt;

&lt;p&gt;Complete one course with Labs. Any platform will work. There are plenty of them, but the most accessible ones are ACloudGuru or CloudAcademy. Making quick hand-written notes is helpful on the last days before the exam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmJBov_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssyrap8ihgt910mdb7wx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmJBov_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssyrap8ihgt910mdb7wx.jpg" alt="exam note example" width="612" height="792"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-skill-builder"&gt;
  &lt;/a&gt;
  Use Skill Builder
&lt;/h2&gt;

&lt;p&gt;It is a new official online learning platform from the AWS itself. The quality of the content is outstanding. One drawback is that you need to register but it is for free. &lt;/p&gt;

&lt;p&gt;I recommend these courses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Getting Started with DevOps on AWS&lt;/li&gt;
&lt;li&gt;AWS Certification Official Practice Question Sets (sample test is free now for any of the exams)&lt;/li&gt;
&lt;li&gt;Exam Readiness: AWS Certified DevOps Engineer - Professional&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#train-yourself"&gt;
  &lt;/a&gt;
  Train yourself
&lt;/h2&gt;

&lt;p&gt;Sit the actual 75 questions in one go (TutorialsDojo practice exams or the one at the end of the course). Do not be demotivated by the results of the practice exams. &lt;/p&gt;

&lt;p&gt;Topics and services to concentrate on: Beanstalk, Config, Trusted Advisor, Auto Scaling, CloudFront, CodeDeploy, Systems Manager, S3, Logging, CloudTrail, CodeCommit.&lt;/p&gt;

&lt;p&gt;If you have a couple of days before an exam - concentrate on the most complicated areas. Read tutorialsdojo's cheatsheets. They are enormously helpful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Config (&lt;a href="https://tutorialsdojo.com/aws-config/"&gt;cheatsheet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;CodeDeploy (&lt;a href="https://tutorialsdojo.com/aws-codedeploy/"&gt;cheatsheet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Deployment tools comparison (&lt;a href="https://tutorialsdojo.com/elastic-beanstalk-vs-cloudformation-vs-opsworks-vs-codedeploy/"&gt;cheatsheet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Installation of CodeDeploy Agent (&lt;a href="https://www.youtube.com/watch?v=P4K3HB8TNJo"&gt;video&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Systems Manager (&lt;a href="https://tutorialsdojo.com/aws-systems-manager/"&gt;cheatsheet&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#physical-aspect"&gt;
  &lt;/a&gt;
  Physical aspect
&lt;/h2&gt;

&lt;p&gt;Sleep well, do physical exercises, spend time outdoors. Take a break during the exam for standing and stretching. Avoid consuming too much caffeine and sugar especially in the last week before the exam. In the end, all of these factors accumulates into tiredness and lack of concentration. For improving focus, it is nice to do meditation or yoga.&lt;/p&gt;

&lt;p&gt;The exam is challenging, but you could become an AWS-certified professional with extensive preparation and discipline. If you could learn at least one lesson from this article, it would mean for me that it was worth sharing. Thanks for reading me! Follow me on Twitter also:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2v9HFv-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1453302847592976384/girU0zFG_normal.jpg" alt="Igor Soroka profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Igor Soroka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/grenguar"&gt;@grenguar&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      After watching cloud educational content on 2x speed, I noticed that every instructor sounds sad at normal playback.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:21 AM - 17 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1483021717874388994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1483021717874388994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1483021717874388994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>aws</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>career</category>
    </item>
    <item>
      <title>Basic SEO Terms and their Meanings</title>
      <author>Shivashish Yadav</author>
      <pubDate>Thu, 20 Jan 2022 10:25:35 +0000</pubDate>
      <link>https://dev.to/shivashish/basic-seo-terms-and-their-meanings-4a86</link>
      <guid>https://dev.to/shivashish/basic-seo-terms-and-their-meanings-4a86</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zru5hDsU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62b5cuyng6utua110n43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zru5hDsU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62b5cuyng6utua110n43.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Today we will know about some Basic SEO Terms and their meanings. SEO is search engine optimization. When you search for something in Google, it shows you its results.&lt;/p&gt;

&lt;p&gt;It only shows you the same results with which your search term matches. Whatever bloggers and website owners are, they optimize their content in such a way that they come in search results. We call this SEO.&lt;/p&gt;

&lt;p&gt;If you are interested in digital marketing, then it is very important for you to be aware of it. There are many terms of SEO, if you do not know about them then you cannot understand it.&lt;/p&gt;

&lt;p&gt;Unless you know the English alphabet from A to Z, you cannot make any word or sentence. Similarly, it is significant to know about the basic terms of SEO.&lt;/p&gt;

&lt;p&gt;As a beginner, I have told you some terms of SEO and their meaning below. Do these before you go to Advanced. In this way, you will slowly remember all the terms, when you will practically use them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-seo-terms-and-their-meanings"&gt;
  &lt;/a&gt;
  Basic SEO Terms and Their Meanings
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#alttext"&gt;
  &lt;/a&gt;
  Alt-Text
&lt;/h3&gt;

&lt;p&gt;This is done in images. With the help of this, the search engine gets to know what this image is about.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anchor-text"&gt;
  &lt;/a&gt;
  Anchor Text
&lt;/h3&gt;

&lt;p&gt;Used to link to another page. You can do it in the image as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backlink"&gt;
  &lt;/a&gt;
  Backlink
&lt;/h3&gt;

&lt;p&gt;This is a link that is done from another site to your site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#black-hat-seo"&gt;
  &lt;/a&gt;
  Black Hat SEO
&lt;/h3&gt;

&lt;p&gt;This technique is used to rank your site in search engines quickly. But it is not safe, and it puts you at risk of getting a penalty.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#botspidercrawlergooglebot"&gt;
  &lt;/a&gt;
  Bot/Spider/Crawler/GoogleBot
&lt;/h3&gt;

&lt;p&gt;Search Engine sends their bots to other sites. Through which he could read the contents of your site. This is an automatic process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyword"&gt;
  &lt;/a&gt;
  Keyword
&lt;/h3&gt;

&lt;p&gt;This is a phrase or sentence, which people search in the search engine. There are two types of keywords; Short Tail and Long Tail. The keyword which lasts up to 1-3 words is called Short Tail and the keywords with more than that are called Long Tail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metadata"&gt;
  &lt;/a&gt;
  Metadata
&lt;/h3&gt;

&lt;p&gt;The search engine does this to make the search results appear properly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meta-title"&gt;
  &lt;/a&gt;
  Meta Title
&lt;/h3&gt;

&lt;p&gt;This is the title of your article or website that describes your content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meta-description"&gt;
  &lt;/a&gt;
  Meta Description
&lt;/h3&gt;

&lt;p&gt;It is used in the search result to describe the content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nofollow"&gt;
  &lt;/a&gt;
  No-Follow
&lt;/h3&gt;

&lt;p&gt;This is an attribute that is used in anchor text. With this, the search engine understands the app is not following that link. It is used in external links.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#onpage-seo"&gt;
  &lt;/a&gt;
  On-Page SEO
&lt;/h3&gt;

&lt;p&gt;The technique you use in your site to make your website or blog post SEO friendly is called On-Page SEO. In this you have to optimize texts, images, tags, URL structure, internal links, headers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#offpage-seo"&gt;
  &lt;/a&gt;
  Off-Page SEO
&lt;/h3&gt;

&lt;p&gt;The technique used to improve the ranking position of your website in Search Engines is called Off-Page SEO.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#robottxt-file"&gt;
  &lt;/a&gt;
  Robot.txt file
&lt;/h3&gt;

&lt;p&gt;This file is an art to communicate with the search engine robots and tells them which site to the index which page to index and which page not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pagerank-pr"&gt;
  &lt;/a&gt;
  PageRank (PR)
&lt;/h3&gt;

&lt;p&gt;Google gives a rank to every website and page from 0 to 10 by looking at the quality of their site and SEO score. Who's more his page ranks better in Google. But more PR updates are not coming from last year.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seo-search-engine-optimization"&gt;
  &lt;/a&gt;
  SEO: Search Engine Optimization
&lt;/h3&gt;

&lt;p&gt;This is a process to improve the search engine score of your website. Good SEO decides which page of your page will appear in the search results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sitemap"&gt;
  &lt;/a&gt;
  Sitemap
&lt;/h3&gt;

&lt;p&gt;Sitemap contains details of all the contents of your blog or website. By submitting it to the search engine, he can read all your pages well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#white-hat-seo"&gt;
  &lt;/a&gt;
  White Hat SEO
&lt;/h3&gt;

&lt;p&gt;This is called good quality SEO technique. Because of this, it takes time to rank your page, but you are completely safe from penalties.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>seo</category>
      <category>ranking</category>
    </item>
  </channel>
</rss>
