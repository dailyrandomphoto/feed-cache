<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>‚ú® Learning is not a destination... it's a lifelong journey</title>
      <author>Treehouse</author>
      <pubDate>Mon, 03 May 2021 19:21:13 +0000</pubDate>
      <link>https://dev.to/teamtreehouse/learning-is-not-a-destination-it-s-a-lifelong-journey-2kng</link>
      <guid>https://dev.to/teamtreehouse/learning-is-not-a-destination-it-s-a-lifelong-journey-2kng</guid>
      <description>&lt;p&gt;While the path may be full of twists and turns, bumps and burns... there are some essential checkpoints that will help you along the way.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%F0%9F%8F%9E-find-your-path"&gt;
  &lt;/a&gt;
  üèû Find your path
&lt;/h3&gt;

&lt;p&gt;As your learning journey begins, you may feel overwhelmed with all of your options. Which programming language should you start with? Front-end, back-end, design, something else?!&lt;/p&gt;

&lt;p&gt;Take a deep breath... and know that there's no wrong place to start. What interests you the most? What feels like it will be the best starting point for you? Just start somewhere... and grow from there.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#learn-and-grow"&gt;
  &lt;/a&gt;
  üå± Learn and grow
&lt;/h3&gt;

&lt;p&gt;Once you've found and committed to your learning path, you're well on your way! Design a learning groove that works for your daily lifestyle. If learning 15 minutes per day is most beneficial for you, go for it! &lt;/p&gt;

&lt;p&gt;Again, there's no wrong way. Just make sure you set yourself up for success with reasonable daily goals so you are building momentum. Be sure to also take breaks so that you can digest everything you're learning - you'll come back fresh!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#ask-for-help"&gt;
  &lt;/a&gt;
  üí¨ Ask for help
&lt;/h3&gt;

&lt;p&gt;You may encounter challenges along the way. You may sail right through. One thing's for sure, you will eventually come upon roadblocks - it's part of the journey! It's important to surround yourself with folx and resources that can help you unblock things and move forward.&lt;/p&gt;

&lt;p&gt;Be sure to reach out to your loved ones and friends for support. Build or join a community that you can reach out to and ask for help when challenges arise. Utilize your resources - Google-it, Stack Overflow-it, Dev.to-it.&lt;/p&gt;

&lt;p&gt;Overcoming challenges along the way will help you to successfully learn... and your support networks and online resources are key to that success.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%F0%9F%9B%A4-stay-on-track"&gt;
  &lt;/a&gt;
  üõ§ Stay on track
&lt;/h3&gt;

&lt;p&gt;There may come a point along your learning journey where you start to deviate from the path... you might miss a day (or a few). That's okay! Life happens. The most important thing is to hop back on the track when you are able and start moving again. &lt;/p&gt;

&lt;p&gt;You may have needed a bit of time to digest everything you've been working with. Just don't give up on your goals - know that you can reach the top of that mountain you're climbing.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#achieve-your-goals"&gt;
  &lt;/a&gt;
  ‚úÖ Achieve your goals
&lt;/h3&gt;

&lt;p&gt;Whether you're working on small daily goals, or big picture goals... reaching those achievements is vital to feeling like you're getting somewhere on your learning journey. It will propel you from success to success.&lt;/p&gt;

&lt;p&gt;We know it's not always easy. Be sure to give yourself some props! You are doing an amazing job juggling life alongside learning. Keep receipts of your achievements so that you can refer back to them if you feel like giving up or if Imposter Syndrome sets in.&lt;/p&gt;

&lt;p&gt;Once you've accomplished your goals ‚Äì go after new ones. The key to being a lifelong learner is doing it for the love of learning... and finding joy in the growing process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-going-dont-give-up"&gt;
  &lt;/a&gt;
  Keep going - don't give up! üíú
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#join-the-conversation"&gt;
  &lt;/a&gt;
  üí¨ Join the conversation
&lt;/h2&gt;

&lt;p&gt;Every learning journey is unique. Are there any other essential checkpoints you have to keep you motivated and growing?  &lt;strong&gt;Leave a comment below!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>career</category>
      <category>programming</category>
      <category>design</category>
    </item>
    <item>
      <title>Beautify your GitHub!</title>
      <author>philip-haines</author>
      <pubDate>Mon, 03 May 2021 19:19:13 +0000</pubDate>
      <link>https://dev.to/philiphaines/beautify-your-github-40hh</link>
      <guid>https://dev.to/philiphaines/beautify-your-github-40hh</guid>
      <description>&lt;p&gt;If you have ever visited someones GitHub and noticed that they have some fancy pictures, cool emojis, and stats on their homepage you may have wondered how to make a page like that on your own. If this sounds like you, keep reading, because in this blog post I'm going to tell you exactly how to make your GitHub &lt;code&gt;README&lt;/code&gt; sparkle! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AACisvwi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1dptsjjls6mdgvjdvor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AACisvwi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1dptsjjls6mdgvjdvor.png" alt="Screen Shot 2021-05-03 at 12.23.15 PM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-your-own"&gt;
  &lt;/a&gt;
  How to Make Your Own
&lt;/h2&gt;

&lt;h6&gt;
  &lt;a href="#its-easier-than-you-think"&gt;
  &lt;/a&gt;
  (Its easier than you think!)
&lt;/h6&gt;

&lt;p&gt;Creating a GitHub profile &lt;code&gt;README&lt;/code&gt; is super simple super simple but a little hard to find by yourself. Once you are signed into GitHub, initialize a new repository by going to &lt;a href="https://github.com/new"&gt;https://github.com/new&lt;/a&gt;. Name your new repository the name of your GitHub account (hint: this can be found by hovering over your profile icon in the top right of the screen), and click "Create Repository". How easy was that? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_P3qZ-u9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxthfaope9v7iotiufm6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_P3qZ-u9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxthfaope9v7iotiufm6.png" alt="Screen Shot 2021-05-03 at 11.58.53 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a shortcut checkoff "Add a README file" when creating your repository. The &lt;code&gt;README&lt;/code&gt; has to be there in order for your new fancy profile to be fancy. Speaking of which... &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-it-stand-out"&gt;
  &lt;/a&gt;
  Make It Stand Out
&lt;/h2&gt;

&lt;p&gt;Now that you have your GitHub &lt;code&gt;README&lt;/code&gt; created, theres a few things you need to know about making it pretty. GitHub &lt;code&gt;README&lt;/code&gt; uses something called Markdown language. You can use Markdown to add images, link, gifs, headers, and so much more. No need to memories Markdown, just use the &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet"&gt;cheat sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing that I really like on a GitHub profile page is a header. It's a nice personal touch, and really easy to make with a program like PhotoShop, Sketch, or even Google Docs. Or for something even easier check out &lt;a href="https://www.canva.com/search/templates?q=header"&gt;Canva Headers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c5FUcBcw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vvgfeazzphvsvkc3opb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5FUcBcw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vvgfeazzphvsvkc3opb.png" alt="Screen Shot 2021-05-03 at 12.30.26 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your header could have your name, photo, job title, location, and a plethora of other things. Here are a few examples that I really like: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jlengstorf"&gt;https://github.com/jlengstorf&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/bdougie"&gt;https://github.com/bdougie&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/sindresorhus"&gt;https://github.com/sindresorhus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's super simple to add pictures into your GitHub &lt;code&gt;README&lt;/code&gt;. If you have the file saved locally you can just drag and drop it into your Markup and its imported. If you want to add a link as a photo you can use the &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; tag and add a &lt;code&gt;src&lt;/code&gt; with a path to the photo you want to add. Remember, the &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; is a self closing tag, you can still have bugs in Markdown so be sure to close that tag! &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tell-people-about-yourself"&gt;
  &lt;/a&gt;
  Tell People About Yourself
&lt;/h2&gt;

&lt;p&gt;People are interested in other people, tell your story. A couple of lines of text about your dev philosophy could go a long way to showing a potential employer or collaborator who you are! Even better, give a list of things you're currently working on, excited to learn about, and link to a few of your projects. Looking for collaborators on your current projects is one of the best ways to network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0wnYPN5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhsirq9bjxrp3a8p667z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0wnYPN5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhsirq9bjxrp3a8p667z.png" alt="Screen Shot 2021-05-03 at 1.01.16 PM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is another great opportunity to also slip in an interesting fact about yourself. Make sure to keep your bullet points short and to the point. Add emojis for a little fun, who doesn't like emojis?&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highlighting-your-skills"&gt;
  &lt;/a&gt;
  Highlighting Your Skills
&lt;/h2&gt;

&lt;p&gt;Displaying your skills right on your GitHub homepage is highly recommended. You worked hard for those skills, show them off! When potential employers or collaborators land on your GitHub page this small future will give them a quick understanding of the languages that you can work in. &lt;/p&gt;

&lt;p&gt;There are a couple of ways of doing this, you can have logos of all of the languages, tools, and technologies that you're adept in. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zv5fkHJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cznw99fmy9en0ro9x0u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zv5fkHJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cznw99fmy9en0ro9x0u8.png" alt="Screen Shot 2021-05-03 at 12.29.53 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to find these icons is to use google images and then click on "tools", then "color", then "transparent". This should return a large number of &lt;code&gt;.png&lt;/code&gt; images that you can easily resize in your Markdown.&lt;br&gt;
&lt;code&gt;&amp;lt;img height="20"src="https://img.icons8.com/color/452/graphql.png"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Some other awesome places to look for logos or icons are &lt;a href="https://simpleicons.org/"&gt;https://simpleicons.org/&lt;/a&gt; and if you're looking for something a little fancier, check out &lt;a href="https://shields.io"&gt;https://shields.io&lt;/a&gt;. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-off-your-work"&gt;
  &lt;/a&gt;
  Show Off Your Work
&lt;/h2&gt;

&lt;p&gt;Another really good way to boast your skills is by showcasing your repos. The first way to do this is by pinning your top repos directly to your home page. While you don't technically do this in the &lt;code&gt;README&lt;/code&gt;, it's still super important to make sure that your top repositories are actually your top repos. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OCUOMeOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh3fzj7d0ryrvtkco04o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OCUOMeOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh3fzj7d0ryrvtkco04o.png" alt="Screen Shot 2021-05-03 at 12.44.40 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To change your pinned repositories, go to your GitHub homepage (github.com/) and scroll to your "pinned" section. On the top right of your currently pinned repositories, there is some clickable text that says "Customize pinned". Click that and a modal with a list of all of your work will pop up. Check off the work you want to show off, you can pin up to six repos on your home page.   &lt;/p&gt;

&lt;p&gt;If you want to take it to the next level, look no further than &lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;GitHub README Stats&lt;/a&gt;. GitHub README Stats is a tool that allows you display stats on your GitHub homepage in nicely formatted cards. You can pass in many information options such as &lt;code&gt;top_langs&lt;/code&gt;, which will give you a card for your &lt;code&gt;README&lt;/code&gt; that displays your top languages. There are many other arguments that you can pass into the stats URL and the &lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;docs&lt;/a&gt; are super helpful.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it All Together
&lt;/h2&gt;

&lt;p&gt;Now that you're a Markdown master, and a champion of the GitHub homepage, go ahead and push your &lt;code&gt;README&lt;/code&gt; to the master branch and brag about your beautiful new GitHub on LinkedIn! Remember, you can always go back and edit your &lt;code&gt;README&lt;/code&gt; at any point so make sure to market test a few different setups. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ifmUGM_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fno82ya50jueyoclrkpk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ifmUGM_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fno82ya50jueyoclrkpk.png" alt="Github-full-page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding, and remember to keep that GitHub green!&lt;/p&gt;

</description>
      <category>github</category>
      <category>markdown</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>My Dev Journey: Bootcamp Pre-Course</title>
      <author>Harry York</author>
      <pubDate>Mon, 03 May 2021 19:08:25 +0000</pubDate>
      <link>https://dev.to/harryyork97/dev-journey-pre-course-2dn5</link>
      <guid>https://dev.to/harryyork97/dev-journey-pre-course-2dn5</guid>
      <description>&lt;p&gt;Thanks for checking out my first blog post on my journey into tech! I'm aiming to do one of these each week as a retrospective, to see how far I've come! üèÉüèª‚Äç‚ôÇÔ∏è&lt;br&gt;
Consider following me on &lt;a href="https://github.com/harryyork97"&gt;GitHub&lt;/a&gt; and &lt;a href="https://twitter.com/grand_oldduke"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-i-am"&gt;
  &lt;/a&gt;
  Who I am!
&lt;/h2&gt;

&lt;p&gt;I‚Äôm Harry, I‚Äôm a trainee Software Developer, about to start my bootcamp through &lt;a href="https://northcoders.com/"&gt;Northcoders&lt;/a&gt;. I live in Leeds, West Yorkshire with my partner &lt;a href="https://dev.to/samroebuck_"&gt;Sam&lt;/a&gt;, and our two Gerbils, &lt;a href="https://www.instagram.com/gussandjim/"&gt;Guss and Jim&lt;/a&gt;. üê≠ üê≠&lt;/p&gt;

&lt;p&gt;I went to University and did my degree in Design Engineering, which is just Industrial/Product Design with a different name slapped on it. For just over a year I worked as a Technical Designer for a prop and set design company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-knew-before-applying"&gt;
  &lt;/a&gt;
  What I knew before applying
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A little bit of Python&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A little HTML and CSS from a while back&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That I enjoyed learning about what makes the tech I use work, and honestly I think this is the most important pre-requisite rather than any knowledge/experience.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learnt-since-applying"&gt;
  &lt;/a&gt;
  What I‚Äôve learnt since applying
&lt;/h2&gt;

&lt;p&gt;Here's a list of some of the things I've learnt and links to resources I've found useful!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-basics"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;JavaScript Basics&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;On freeCodeCamp I've gone through everything from comments and variables through to loops and recursion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#es6"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#es6"&gt;ES6&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;LOTS&lt;/em&gt;&lt;/em&gt; of ES6 content, from let and const variables through to Promises.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-data-structures"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#basic-data-structures"&gt;Basic Data Structures&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Manipulating Arrays and Objects! Great fun ü•≥&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#debugging"&gt;Debugging&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;console.log()&lt;/code&gt; is now my most typed phrase ‚Äî &lt;em&gt;and I love it&lt;/em&gt; ‚Äî it's such a valuable tool for understanding what is happening at any point in my code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cli"&gt;
  &lt;/a&gt;
  &lt;a href="https://openclassrooms.com/en/courses/4614926-learn-the-command-line-in-terminal?status=published"&gt;CLI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://ohmyz.sh/"&gt;ohmyzsh&lt;/a&gt; is a great way to style your terminal to a less threatening theme (I use &lt;a href="https://github.com/denysdovhan/spaceship-prompt"&gt;Spaceship&lt;/a&gt;) which can really help take the barrier of fear down using the command line.&lt;/p&gt;

&lt;p&gt;The best advice from this course is to stop using Finder for searching through your docs, use your Terminal! I now use mine for as much as possible, and it's taken a lot of the fear out of the mysterious black box.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-basics-and-using-github"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/playlist?list=PLRqwX-V7Uu6ZF9C0YMKuns9sLDzK6zoiV"&gt;Git basics and using GitHub&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Very daft video series and really enjoyable, if you have a GitHub and haven't got a clue where to start, why not with a rainbow poems üòÇ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-vscode"&gt;
  &lt;/a&gt;
  Using VSCode
&lt;/h3&gt;

&lt;p&gt;Here's a couple of extensions and themes that I've been enjoying so far, if you know some good extensions let me know!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag"&gt;Auto Close Tag&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula"&gt;Dracula Theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codewars"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codewars.com/dashboard"&gt;CodeWars&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Such a great way to warm up in a morning or to try out some theory work that I just covered. Highly recommend for anyone starting out, it's a great way to put your skills to work!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-found-difficult"&gt;
  &lt;/a&gt;
  What I found difficult
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#background-processes"&gt;
  &lt;/a&gt;
  Background processes
&lt;/h3&gt;

&lt;p&gt;Grasping processes that happen in the background, especially the processes that compound and have no observable steps. &lt;/p&gt;

&lt;p&gt;As an example, mapping over an array rather than creating a for loop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instance-properties-and-instance-methods"&gt;
  &lt;/a&gt;
  Instance properties and instance methods
&lt;/h3&gt;

&lt;p&gt;The reason why length() doesn't work. (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_properties"&gt;MDN&lt;/a&gt; says it best)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-path-of-least-resistance"&gt;
  &lt;/a&gt;
  The path of least resistance
&lt;/h3&gt;

&lt;p&gt;If after trying and trying again to get a solution to work I start to feel like there's a better way. And there usually is.&lt;/p&gt;

&lt;p&gt;The path of least resistance isn't about cutting corners but is about working smart not hard.&lt;/p&gt;

&lt;p&gt;This means thinking about the problem logically rather than rationally, i.e. not always needing to split a string down to an array, or not always needing to create a for loop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exiting-vim"&gt;
  &lt;/a&gt;
  Exiting Vim üò®
&lt;/h3&gt;

&lt;p&gt;Got stuck in Vim?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Esc&lt;/code&gt; then &lt;code&gt;:wq&lt;/code&gt; then &lt;code&gt;Return&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#possibly-the-most-important"&gt;
  &lt;/a&gt;
  Possibly the most important
&lt;/h3&gt;

&lt;p&gt;Not defining where I am in my tech journey based on  where others are. üíú&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-enjoyed-so-far"&gt;
  &lt;/a&gt;
  What I've enjoyed so far
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Learning, it's great fun to grasp something new and there's so much more to come!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ternary operators and syntactic sugar in ES6&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Template literals &lt;em&gt;chef's kiss&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.codewars.com/dashboard"&gt;CodeWars&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>bootcamp</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Learn Machine Learning: For Beginners, by a Beginner</title>
      <author>Guy Torbet</author>
      <pubDate>Mon, 03 May 2021 18:29:31 +0000</pubDate>
      <link>https://dev.to/torbet/how-to-learn-machine-learning-for-beginners-by-a-beginner-2pj</link>
      <guid>https://dev.to/torbet/how-to-learn-machine-learning-for-beginners-by-a-beginner-2pj</guid>
      <description>&lt;p&gt;Machine learning and AI as a whole can seem hugely daunting when you're first getting started. Over a weekend, I &lt;em&gt;painstakingly&lt;/em&gt; sifted through all of the "beginner" guides on how to get started, so that you don't have to.&lt;/p&gt;

&lt;p&gt;I also just made a &lt;a href="https://twitter.com/guytorbet"&gt;Twitter&lt;/a&gt;! Give it a follow, it'll be worth it I promise ;) &lt;/p&gt;

&lt;p&gt;If you like this post, feel free to &lt;a href="https://torbet.co/subscribe"&gt;subscribe&lt;/a&gt; or check out my other posts &lt;a href="https://torbet.co/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most people recommend an image classifier using the MNIST dataset as your 'hello world'/first machine learning program - I'm not sure if there is just an obscenely high barrier to entry, or if I'm simply just stupid, but for someone who wants to go from zero to something in the world of machine learning, this project seems a bit tricky.&lt;/p&gt;

&lt;p&gt;Now of course I attempted it. I read anything and everything that I could get my hands on about the inner workings for how neural networks ACTUALLY work, and thought I had a pretty rudimentary understanding of what was going on, but with pre-made datasets and perplexing technical jargon, it's often hard to dilute what is actually happening - I'm still not entirely sure what the fuck a 2D convolutional layer is.&lt;/p&gt;

&lt;p&gt;So without further ado, here's how a beginner can get started with machine learning, by a REAL beginner. This will cover everything, from what libraries and frameworks to use, to how to save and load your trained model. By the end of this project, you should have a rough idea as to how it all works, which will send you on your merry way to more complex projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-framework-to-use"&gt;
  &lt;/a&gt;
  What Framework to Use
&lt;/h2&gt;

&lt;p&gt;There are countless machine learning frameworks and libraries out there, but the main players are TensorFlow, PyTorch and Keras (now part of TensorFlow). As usual, I ended up in a state of paralysis as to which to pick, and which one was the best - this is what inspired me to adopt the mentality of &lt;a href="https://torbet.co/posts/Just-Start"&gt;&lt;strong&gt;just starting&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end, I went with PyTorch. I would recommend this as you get control of everything and it makes it easy to visualise what's going on, but in the grand scheme of things they all work well and it doesn't really matter which one you go with - so just pick one and get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-project"&gt;
  &lt;/a&gt;
  First Project
&lt;/h2&gt;

&lt;p&gt;Neural Networks function around arrays, or tensors if you're cool (yes, I know that there is a difference, but it's not that important at this stage).&lt;/p&gt;

&lt;p&gt;Long story short, you give a trained model an input as an array, and it gives you an output, that is hopefully correct. The simplest way that I could think to demonstrate this was to count the number of occurrences in a list.&lt;/p&gt;

&lt;p&gt;The end goal of this model is to give it a binary list, and it outputs the number of ones, for example;&lt;/p&gt;

&lt;p&gt;input: [1, 0, 0, 1, 0, 0, 0, 0, 1, 1], output: 4&lt;/p&gt;

&lt;p&gt;Neural networks require an input and an expected output in order to train. You can generate arrays of random 1's and 0's like so, which also includes labels (expected outputs) for easy training later down the line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;genData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then can assign the values and labels to variables, which we convert to tensors so that the neural network can easily read and process them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;genData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;xTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;yTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple so far right? Now we structure our network! We will use PyTorches nn.Module to include all of the layers we could ever need, and then just piece them together. For this network, I only used 1 layer, it takes in 10 inputs (I used a random binary array of length 10), and 1 output (0-10, number of 1's in the given list).&lt;/p&gt;

&lt;p&gt;We then have a forward method, which tells the network how to process the inputs as they pass through the layers, we're keeping it simple by just passing them through layer 1 and using a relu function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we need a loss function, which will tell our network how far off the expected output it was, so that it can correct itself and become more accurate, we will also add an optimiser, to you know... optimise this process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;criterion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MSELoss&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;optimizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SGD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;lr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can do a lot of reading for yourself on the different loss functions, there are hundreds of them, but I enjoyed the MSE or cross entropy loss function for linear NN's.&lt;/p&gt;

&lt;p&gt;Now, TRAIN, TRAIN, TRAIN! Think of an epoch as a training loop, so in this example, I'm cycling through the data 1000 times:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xTensor&lt;/span&gt;
        &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yTensor&lt;/span&gt;

        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zero_grad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;criterion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unsqueeze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can finally save the model like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cnn.pt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! you've successfully created and trained your first neural network, from the ground up!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-model"&gt;
  &lt;/a&gt;
  Running the Model
&lt;/h2&gt;

&lt;p&gt;Now that we've trained and saved our model, we can start to pass in real inputs, and see what it predicts!&lt;/p&gt;

&lt;p&gt;Make a new file, and initialise a simple array, and turn it into a tensor like before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;in_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;inTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to copy the model from our previous file, so that we can add the weights and biases from our saved neural network to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can load our saved model, evaluate it, and pass in our new input data!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'cnn.pt'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inTensor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you print the value of the "out" variable, you should see a 6 in this case!&lt;/p&gt;

&lt;p&gt;If you've made it this far and have been following along, you should hopefully have a better understanding as to how PyTorch, and machine learning, works as a whole. For me, this project was a good jumping off point, and after it I felt more comfortable pursuing image classification with MNIST!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Toggling between light and dark mode: it's not all black and white.</title>
      <author>Alana Bishop</author>
      <pubDate>Mon, 03 May 2021 18:28:22 +0000</pubDate>
      <link>https://dev.to/alanabishop/toggling-between-light-and-dark-mode-it-s-not-all-black-and-white-3474</link>
      <guid>https://dev.to/alanabishop/toggling-between-light-and-dark-mode-it-s-not-all-black-and-white-3474</guid>
      <description>&lt;p&gt;A few months ago, near the beginning of my coding journey, I tweeted about a Codepen I was particularly proud of - a toggle between a light and dark mode, which would later feature in my portfolio. (Check it out here if you want to see the code: &lt;a href="https://codepen.io/alanacargill/pen/gOrWRGP"&gt;https://codepen.io/alanacargill/pen/gOrWRGP&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Naively, I assumed that switching a design from light to dark would be as simple as inverting black to white and vice versa, but walking on the &lt;em&gt;dark side&lt;/em&gt; isn‚Äôt as simple as I first imagined. For good UX, there are several things to consider, like content, colour, and typography.&lt;/p&gt;

&lt;p&gt;Firstly, I think it‚Äôs important to think about what dark mode actually is, and what it‚Äôs used for. The term ‚Äòdark mode‚Äô perhaps gives away what it is - a predominantly dark palette with light UI. This is something that‚Äôs becoming more and more popular on websites, and for good reason. Dark UI is designed to minimise digital eye strain, make the screen easier to see in low light settings (e.g. late at night), and it can be really useful in terms of branding and conveying moods and emotions. Also, it would be remiss of me not to mention that it can look &lt;strong&gt;super&lt;/strong&gt; cool.&lt;/p&gt;

&lt;p&gt;But, as is the case with most UI design, there are certain rules that should be followed if you‚Äôre designing a dark mode interface. Although it can look awesome, there are potential usability issues, particularly relating to readability.&lt;/p&gt;

&lt;p&gt;So, if we are going to add a dark mode feature to our apps or sites, what can we do to tackle these issues? &lt;/p&gt;

&lt;p&gt;Well, excellent question. The biggest challenge is maintaining sufficient contrast between the background and the foreground, which impacts the overarching issue of readability, and therefore usability. For best UX, dark mode should really only be used with more minimal designs, for example sparse text with heavily broken up content. The majority of space should be dedicated to dark surfaces, which makes dark mode not particularly suited to text-heavy content, or a variety of content types (e.g. text, images, videos, data tables etc.).&lt;/p&gt;

&lt;p&gt;When looking at dark mode typography, there are two main considerations: is there enough contrast between the background and the text? And is this still legible if the user turns their screen brightness all the way down?&lt;/p&gt;

&lt;p&gt;When text is used, it should be highly contrasted to the background. Generally, in light mode, most colours have enough contrast on a white background, but on a dark background the amount of colours that work well for text are dramatically reduced. Therefore, it‚Äôs recommended to use a dark grey background rather than a black one, as greys can express a wider range of colour (it's easier to see shadows on grey), and dark grey surfaces also reduce eye strain. #000000 is hard on the eyes on a high contrast screen, so dark mode colours are usually shades of grey combined with desaturated colours. &lt;br&gt;
Dark themes should avoid using saturated colours, as they don't pass WCAG's accessibility standard of at least 4.5:1 for body text against dark surfaces. As well as this, saturated colours can also create optical vibrations against a dark background, which can induce more eye strain. Highly saturated brand colours might also not work as well on a dark background, so one option is to desaturate it to use as a more legible alternative. &lt;/p&gt;

&lt;p&gt;While I highly recommend adding a dark mode to smaller project sites, like portfolios for example, I think it‚Äôs so important that we take care to make our designs as accessible and readable as possible, and pick dark mode colour palettes carefully to make sure everyone is able to make the most out of one of the coolest features on the web. &lt;/p&gt;

&lt;p&gt;If you‚Äôre looking for some dark mode colour inspiration, check out &lt;a href="https://colorhunt.co/palettes/dark"&gt;https://colorhunt.co/palettes/dark&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>ux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Instagram Hunter</title>
      <author>theastronomer123</author>
      <pubDate>Mon, 03 May 2021 18:20:07 +0000</pubDate>
      <link>https://dev.to/theastronomer123/instagram-hunter-524c</link>
      <guid>https://dev.to/theastronomer123/instagram-hunter-524c</guid>
      <description>&lt;p&gt;I created a simple tool that helps you discover instagram accounts by checking for possible usernames. Hope you like it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/theastronomer123/instagram_hunter"&gt;https://github.com/theastronomer123/instagram_hunter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>python</category>
      <category>opensource</category>
    </item>
    <item>
      <title>React authentication, simplified</title>
      <author>Tyler Warnock</author>
      <pubDate>Mon, 03 May 2021 17:46:23 +0000</pubDate>
      <link>https://dev.to/tyrw/react-authentication-simplified-18gl</link>
      <guid>https://dev.to/tyrw/react-authentication-simplified-18gl</guid>
      <description>&lt;p&gt;Authentication is one of those things that just always seems to take a lot more effort than we want it to.&lt;/p&gt;

&lt;p&gt;To set up auth, you have to re-research topics you haven‚Äôt thought about since the last time you did authentication, and the fast-paced nature of the space means things have often changed in the meantime. New threats, new options, and new updates may have kept you guessing and digging through docs in your past projects.&lt;/p&gt;

&lt;p&gt;In this article, we lay out a different approach to authentication (plus access control &amp;amp; SSO) in React applications. Rather than add a static library that you have to keep up to date or re-research each time you want to implement auth, we‚Äôll use a service that stays up to date automatically and is a much simpler alternative to Auth0, Okta, and others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-authentication"&gt;
  &lt;/a&gt;
  React authentication
&lt;/h2&gt;

&lt;p&gt;We typically use a similar approach when writing authentication in React: our React app makes a request to our authentication server, which then returns an access token. That token is saved in the browser and can be used in subsequent requests to your server (or other servers, if needed). Whether writing standard email &amp;amp; password authentication or using magic links or single sign on (SSO) logins like Google, Azure, or Facebook, we want our React app to send an initial request to an authentication server and have that server handle all the complexity of generating a token.&lt;/p&gt;

&lt;p&gt;So React‚Äôs responsibility in authentication is to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Send the initial request to the authentication server&lt;/li&gt;
&lt;li&gt;Receive and store the access token&lt;/li&gt;
&lt;li&gt;Send the access token to your server with each subsequent request&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#jwt-access-tokens"&gt;
  &lt;/a&gt;
  JWT access tokens
&lt;/h2&gt;

&lt;p&gt;JSON Web Tokens (JWTs) are compact, URL-safe tokens that can be used for authentication and access control in React applications. Each JWT has a simple JSON-object as its ‚Äúpayload‚Äù and is signed such that your server can verify that the payload is authentic. An example JWT would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImF1dGhvcml6YXRpb24iOiJhZG1pbiJ9.f7iKN-xi24qrQ5NQtOe0jiriotT-rve3ru6sskbQXnA
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The payload for this token is the middle section (separated by periods):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eyJ1c2VySWQiOjEsImF1dGhvcml6YXRpb24iOiJhZG1pbiJ9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The JWT payload can be decoded from base64 to yield the JSON object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;atob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eyJ1c2VySWQiOjEsImF1dGhvcml6YXRpb24iOiJhZG1pbiJ9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It‚Äôs important to note that this payload is readable by anyone with the JWT, including your React application or a third party.&lt;/p&gt;

&lt;p&gt;Anyone that has the JWT can read its contents. However, only the authentication server can generate valid JWTs -- your React application, your application server, or a malicious third party cannot generate valid JWTs. So in addition to reading the JWT, your server also needs to verify the JWT as authentic by checking it against a public key. This allows your application server to verify incoming JWTs and reject any tokens that were not created by the authentication server or that have expired.&lt;/p&gt;

&lt;p&gt;The flow for using a JWT in a React application looks like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your React app requests a JWT whenever the user wants to sign on.&lt;/li&gt;
&lt;li&gt;The authentication server generates a JWT using a private key and then sends the JWT back to your React app.&lt;/li&gt;
&lt;li&gt;Your React app stores this JWT and sends it to your application server whenever your user needs to make a request.&lt;/li&gt;
&lt;li&gt;Your application server verifies the JWT using a public key and then read the payload to determine which user is making the request.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each of these steps is simple to write down, but each step has its own pitfalls when you actually want to implement it and keep it secure. Especially over time, as new threat vectors emerge and new platforms need to be patched or supported, the security overhead can add up quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#userfront-removes-auth-complexity-in-react-apps"&gt;
  &lt;/a&gt;
  Userfront removes auth complexity in React apps
&lt;/h2&gt;

&lt;p&gt;Userfront is a framework that abstracts away auth complexity. This makes it much easier for you to work with authentication in a React application and, perhaps most importantly, keeps all the auth protocols updated for you automatically over time.&lt;/p&gt;

&lt;p&gt;The underlying philosophy with Userfront is that world-class auth should not take effort ‚Äì it should be easy to set up, and security updates should happen for you automatically. Userfront has all the bells and whistles of authentication, Single Sign On (SSO), access control, and multi-tenancy, with a production-ready free tier up to 10,000 monthly active users. For most modern React applications, it‚Äôs a great solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-authentication-in-react"&gt;
  &lt;/a&gt;
  Setting up authentication in React
&lt;/h3&gt;

&lt;p&gt;Now we will go through building all the main aspects of authentication in a React application. The final code for this example is available &lt;a href="https://github.com/tyrw/david-walsh-blog-react-auth"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use your favorite boilerplate to set up your React application and get your build pipeline in order. In this article, we‚Äôll use &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;Create React App&lt;/a&gt;, which does a lot of the setup work for us, and we‚Äôll also add &lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;React Router&lt;/a&gt; for our client-side routing. Start by installing Create React App and React Router:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our React application is available at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYFcNjbS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/component/image/upload/v1612896738/permanent/create-react-app.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYFcNjbS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/component/image/upload/v1612896738/permanent/create-react-app.gif" alt="Create React App authentication"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like it says, we can now edit the &lt;code&gt;src/App.js&lt;/code&gt; file to start working.&lt;/p&gt;

&lt;p&gt;Replace the contents of &lt;code&gt;src/App.js&lt;/code&gt; with the following, based on the React Router quickstart:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/login"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/reset"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Reset&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/dashboard"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dashboard&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/login"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Login&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/reset"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PasswordReset&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/dashboard"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Dashboard&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PasswordReset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password Reset&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Dashboard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dashboard&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a very simple app with routing:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Route&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Home page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/login&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Login page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/reset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Password reset page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/dashboard&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;User dashboard, for logged in users only&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YngG7ziW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/component/image/upload/v1614094607/permanent/react-router-basic.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YngG7ziW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/component/image/upload/v1614094607/permanent/react-router-basic.gif" alt="React Router authentication"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is all the structure we need to start adding authentication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#signup-login-and-password-reset-with-userfront"&gt;
  &lt;/a&gt;
  Signup, login, and password reset with Userfront
&lt;/h3&gt;

&lt;p&gt;First, create a Userfront account at &lt;a href="https://userfront.com"&gt;https://userfront.com&lt;/a&gt;. This will give you a signup form, login form, and password reset form you can use for the next steps.&lt;/p&gt;

&lt;p&gt;In the Toolkit section of your Userfront dashboard, you can find the instructions for installing your signup form:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DgnAt9fa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/component/image/upload/v1614094834/permanent/instructions-react.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DgnAt9fa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/component/image/upload/v1614094834/permanent/instructions-react.png" alt="Userfront installation instructions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow the instructions by installing the Userfront react package with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;userfront&lt;/span&gt;&lt;span class="sr"&gt;/react --sav&lt;/span&gt;&lt;span class="err"&gt;e
&lt;/span&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add the form to your home page by importing and initializing Userfront, and then updating the &lt;code&gt;Home()&lt;/code&gt; function to render the form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Userfront&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@userfront/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Userfront&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo1234&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SignupForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Userfront&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;toolId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nkmbbm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/reset&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dashboard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Dashboard&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/reset&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PasswordReset&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dashboard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Dashboard&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SignupForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PasswordReset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Password&lt;/span&gt; &lt;span class="nx"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Dashboard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Dashboard&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the home page has your signup form. Try signing up a user:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VawFSEJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/component/image/upload/v1614095453/permanent/react-router-signup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VawFSEJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/component/image/upload/v1614095453/permanent/react-router-signup.png" alt="React signup form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The form is in "Test mode" by default, which will create user records in a test environment you can view separately in your Userfront dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZG04SIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/component/image/upload/v1612980797/permanent/create-react-app-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZG04SIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/component/image/upload/v1612980797/permanent/create-react-app-2.png" alt="Userfront test mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Continue by adding your login and password reset forms in the same way that you added your signup form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Userfront&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@userfront/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Userfront&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo1234&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SignupForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Userfront&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;toolId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nkmbbm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoginForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Userfront&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;toolId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alnkkd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PasswordResetForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Userfront&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;toolId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dkbmmo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/reset&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dashboard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Dashboard&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/reset&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PasswordReset&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dashboard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Dashboard&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SignupForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoginForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PasswordReset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Password&lt;/span&gt; &lt;span class="nx"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PasswordResetForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Dashboard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Dashboard&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, your signup, login, and password reset should all be functional.&lt;/p&gt;

&lt;p&gt;Your users can sign up, log in, and reset their password.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2EP4QQ9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/component/image/upload/v1614095875/permanent/react-router-3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2EP4QQ9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/component/image/upload/v1614095875/permanent/react-router-3.gif" alt="React signup, login, password reset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#protected-route-in-react"&gt;
  &lt;/a&gt;
  Protected route in React
&lt;/h2&gt;

&lt;p&gt;Usually, we don't want users to be able to view the dashboard unless they are logged in. This is known as protecting a route.&lt;/p&gt;

&lt;p&gt;Whenever a user is not logged in but tries to visit &lt;code&gt;/dashboard&lt;/code&gt;, we can redirect them to the login screen.&lt;/p&gt;

&lt;p&gt;We can accomplish this by updating the &lt;code&gt;Dashboard&lt;/code&gt; component in &lt;code&gt;src/App.js&lt;/code&gt; to handle the conditional logic.&lt;/p&gt;

&lt;p&gt;When a user is logged in with Userfront, they will have an access token available as &lt;code&gt;Userfront.accessToken()&lt;/code&gt;. We can check for this token to determine if the user is logged in.&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;Redirect&lt;/code&gt; component to the &lt;code&gt;import&lt;/code&gt; statement for React Router, and then update the &lt;code&gt;Dashboard&lt;/code&gt; component to redirect if no access token is present.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Be sure to add this import&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Dashboard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderFn&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// If the user is not logged in, redirect to login&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;Userfront&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Redirect&lt;/span&gt;
          &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
            &lt;span class="na"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// If the user is logged in, show the dashboard&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Userfront&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Dashboard&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/pre&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Userfront&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Logout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderFn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice also that we've added a logout button by calling &lt;code&gt;Userfront.logout()&lt;/code&gt; directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Userfront&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Logout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when a user is logged in, they can view the dashboard. If the user is not logged in, they will be redirected to the login page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r3i7wBxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/component/image/upload/v1614104770/permanent/react-router-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3i7wBxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/component/image/upload/v1614104770/permanent/react-router-4.png" alt="React protected route"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-authentication-with-an-api"&gt;
  &lt;/a&gt;
  React authentication with an API
&lt;/h2&gt;

&lt;p&gt;You will probably want to retrieve user-specific information from your backend. In order to protect these API endpoints, your server should check that incoming JWTs are valid.&lt;/p&gt;

&lt;p&gt;There are many libraries to read and verify JWTs across various languages; here are a few popular libraries for handling JWTs:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/auth0/node-jsonwebtoken"&gt;Node.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/jwt-dotnet/jwt"&gt;.NET&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/jpadilla/pyjwt/"&gt;Python&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/auth0/java-jwt"&gt;Java&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For Userfront, the access token is available in your React application as &lt;code&gt;Userfront.accessToken()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your React application can send this as a &lt;code&gt;Bearer&lt;/code&gt; token inside the &lt;code&gt;Authorization&lt;/code&gt; header. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example of calling an endpoint with a JWT&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/your-endpoint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Userfront&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getInfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To handle a request like this, your backend should read the JWT from the &lt;code&gt;Authorization&lt;/code&gt; header and verify that it is valid using the public key found in your Userfront dashboard.&lt;/p&gt;

&lt;p&gt;Here is an example of Node.js middleware to read and verify the JWT:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Node.js example (Express.js)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jsonwebtoken&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;authenticateToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Read the JWT access token from the request header&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authHeader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;authorization&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;authHeader&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;authHeader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Return 401 if no token&lt;/span&gt;

  &lt;span class="c1"&gt;// Verify the token using the Userfront public key&lt;/span&gt;
  &lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;USERFRONT_PUBLIC_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Return 403 if there is an error verifying&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using this approach, any invalid or missing tokens would be rejected by your server. You can also reference the contents of the token later in the route handlers using the &lt;code&gt;req.auth&lt;/code&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;tenantId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;demo1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;userUuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab53dbdc-bb1a-4d4d-9edf-683a6ca3f609&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isConfirmed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;demo1234&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;tenantId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;demo1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Demo project&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;sessionId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;35d0bf4a-912c-4429-9886-cd65a4844a4f&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;iat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1614114057&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1616706057&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this information, you can perform further checks as desired, or use the &lt;code&gt;userId&lt;/code&gt; or &lt;code&gt;userUuid&lt;/code&gt; to look up user information to return.&lt;/p&gt;

&lt;p&gt;For example, if you wanted to limit a route to admin users, you could check against the &lt;code&gt;authorization&lt;/code&gt; object from the verified access token:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Node.js example (Express.js)&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authorization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo1234&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Allow access&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Deny access&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#react-sso-single-sign-on"&gt;
  &lt;/a&gt;
  React SSO (Single Sign On)
&lt;/h2&gt;

&lt;p&gt;From here, you can add social identity providers like Google, Facebook, and LinkedIn to your React application, or business identity providers like Azure AD, Office365, and more.&lt;/p&gt;

&lt;p&gt;You do this by creating an application with the identity provider (e.g. Google), and then adding that application's credentials to the Userfront dashboard. The result is a modified sign on experience:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBzEZljH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/component/image/upload/v1612378383/permanent/userfront-login.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBzEZljH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/component/image/upload/v1612378383/permanent/userfront-login.png" alt="React SSO form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No additional code is needed to implement Single Sign On using this approach: you can add and remove providers without updating your forms or the way you handle JWTs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;Adding authentication and access control to your React application doesn't have to be a hassle. Both the setup step and, more importantly, the maintenance over time, are handled with modern platforms like &lt;a href="https://userfront.com"&gt;Userfront&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;JSON Web Tokens allow you to cleanly separate your auth token generation layer from the rest of your application, making it easier to reason about and more modular for future needs. This architecture also allows you to focus your efforts on your core application, where you are likely to create much more value for yourself or your clients.&lt;/p&gt;

&lt;p&gt;For more details on adding auth to your React application, visit the &lt;a href="https://userfront.com/guide"&gt;Userfront guide&lt;/a&gt;, which covers everything from setting up your auth forms to API documentation, example repositories, working with different languages and frameworks, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://userfront.com"&gt;Create a free Userfront project&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Simple docker-compose continuous deployment üöÄ</title>
      <author>Fran√ßois</author>
      <pubDate>Mon, 03 May 2021 17:40:40 +0000</pubDate>
      <link>https://dev.to/asteryujano/simple-docker-compose-continuous-deployment-50nf</link>
      <guid>https://dev.to/asteryujano/simple-docker-compose-continuous-deployment-50nf</guid>
      <description>&lt;p&gt;This post is about a small and simple process to add Continuous Deployment to some projects where 0-downtime deployment is not needed. With the following methods, the containers will need few seconds to restart on deployment, therefore it is not adapted to a high availability project.&lt;/p&gt;

&lt;p&gt;You will need a repository (Github, Gitlab, Bitbucket, ...), a pipeline tool (Bitbucket pipeline, circleCI, github actions, Gitlab CI, ...), an image registry (Docker hub), and a server.&lt;/p&gt;

&lt;p&gt;In this post, I use a &lt;strong&gt;bitbucket repository&lt;/strong&gt;, a &lt;strong&gt;bitbucket pipeline&lt;/strong&gt; and &lt;strong&gt;docker hub&lt;/strong&gt;. You can of course adapt this to your needs and tools!&lt;/p&gt;

&lt;p&gt;As well, this is a simple version. For sensitive projects, apply best practices, read more about Docker, security, CI/CD, etc.&lt;/p&gt;

&lt;p&gt;Why it is worth the time to set up automated deployment for a project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fast build&lt;/li&gt;
&lt;li&gt;Easy rollback&lt;/li&gt;
&lt;li&gt;A docker image on production, staging, or local remains the same&lt;/li&gt;
&lt;li&gt;Use simple-technologies (docker-compose &amp;amp; bash script)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#set-up-the-pipeline-to-build-and-push-your-image-on-a-registry"&gt;
  &lt;/a&gt;
  Set up the pipeline to build and push your image on a registry
&lt;/h2&gt;

&lt;p&gt;First, set up the variables you need from the settings of your repository:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$DOCKER_HUB_USER_TOKEN_NAME&lt;/li&gt;
&lt;li&gt;$DOCKER_HUB_TOKEN&lt;/li&gt;
&lt;li&gt;$IMAGE, name of your image on docker-hub, example: user/project&lt;/li&gt;
&lt;li&gt;DEPLOY_SERVER: IP or Domain name of your server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$BITBUCKET_COMMIT is a variable provided by bitbucket, giving you the commit ID and I am using it as a tag for the docker image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# bitbucket-pipelines.yml&lt;/span&gt;
&lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node:12&lt;/span&gt;

&lt;span class="na"&gt;pipelines&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build &amp;amp; Push to registry&lt;/span&gt;
          &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;docker login --username $DOCKER_HUB_USER_TOKEN_NAME --password $DOCKER_HUB_TOKEN&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;docker build -t $IMAGE:$BITBUCKET_COMMIT -t $IMAGE:$production .&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;docker push $IMAGE:$BITBUCKET_COMMIT&lt;/span&gt;
          &lt;span class="na"&gt;caches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;docker&lt;/span&gt;
          &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;docker&lt;/span&gt; 

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy to production&lt;/span&gt;
          &lt;span class="na"&gt;deployment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;production&lt;/span&gt;
          &lt;span class="c1"&gt;# comment this step to deploy automatically on production&lt;/span&gt;
          &lt;span class="c1"&gt;# It is better to run tests before deploying&lt;/span&gt;
          &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;manual&lt;/span&gt; 
          &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;echo "  [+] Start deploy script on the server"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ssh root@$DEPLOY_SERVER "/docker/deploy.sh $BITBUCKET_COMMIT"&lt;/span&gt;

&lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;definitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2048&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-this-file-doing"&gt;
  &lt;/a&gt;
  What is this file doing?
&lt;/h3&gt;

&lt;p&gt;In the step "Build &amp;amp; Push to registry", first it logs in to the registry using a token you generated on docker hub (go to settings &amp;gt; security). Then it builds the image using the Dockerfile at the root of your repository and adds 2 tags to it (commit ID and &lt;code&gt;production&lt;/code&gt;). Finally, it pushes the image to the registry.&lt;/p&gt;

&lt;p&gt;The following part will listen to the production branch for a new commit. You can replace it with &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt; depending on your branch's names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy to production&lt;/span&gt; 
                    &lt;span class="s"&gt;deployment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;production&lt;/span&gt;
          &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;manual&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The manual trigger is advised to prevent downtime of a few second a moment you might want a high availability of service (during the day).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;definitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2048&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last part is useful to activate docker and to change the default memory setting, preventing the pipeline to run out of memory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#script-to-pull-and-run-the-new-image"&gt;
  &lt;/a&gt;
  Script to pull and run the new image
&lt;/h2&gt;

&lt;p&gt;This script is on the server in a folder, the same that I specified in my pipeline: &lt;code&gt;/docker/deploy.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Set the rights to a write mode: &lt;code&gt;chmod +x deploy.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#! /bin/bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"  [!] No argument supplied, this script expects a docker tag to run."&lt;/span&gt;
        &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="k"&gt;fi

&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="nv"&gt;image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"user/project"&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"[&amp;gt;] Starting deployment"&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"  [+] Remove containers, volume and networks older than 1 week..."&lt;/span&gt;
docker system prune &lt;span class="nt"&gt;--force&lt;/span&gt; &lt;span class="nt"&gt;--filter&lt;/span&gt; &lt;span class="s2"&gt;"until=168h"&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt; /docker

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"  [+]  Bitbucket commit ID: &lt;/span&gt;&lt;span class="nv"&gt;$tag&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"  [+]  Pull image &lt;/span&gt;&lt;span class="nv"&gt;$image&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$tag&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;pull&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker pull &lt;span class="nv"&gt;$image&lt;/span&gt;:&lt;span class="nv"&gt;$tag&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Check if docker pull returns empty string&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$pull&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"  [!] Fail to pull image with tag &lt;/span&gt;&lt;span class="nv"&gt;$tag&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="k"&gt;fi

&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"  [+] Start (or Restart) containers: docker-compose up -d"&lt;/span&gt;
&lt;span class="nv"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$tag&lt;/span&gt; docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"[&amp;gt;] Deployment done."&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Tips: If you want to debug this script, you can add the option &lt;code&gt;set -x&lt;/code&gt; at the beginning of the script to have more detailed information during the script process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you need to roll back to any docker image, you can either rerun the deployment of a previous commit, or SSH to the server and run &lt;code&gt;TAG=abcdefg docker-compose up -d&lt;/code&gt; (with abcdefg the commit ID you want to roll back to)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practices-to-note"&gt;
  &lt;/a&gt;
  Best practices to note
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add SSH port, which should be different from the default 22. Or whitelist &lt;a href="https://support.atlassian.com/bitbucket-cloud/docs/what-are-the-bitbucket-cloud-ip-addresses-i-should-use-to-configure-my-corporate-firewall/"&gt;bitbucket&lt;/a&gt; and refuse unknown connections.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a deploy user, and use it to connect with SSH and do the deploy actions (so you will need to add this user to the docker group)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#to-go-further"&gt;
  &lt;/a&gt;
  To go further
&lt;/h2&gt;

&lt;p&gt;With a monitoring tool like grafana, you can add an &lt;a href="https://bitbucket.org/blog/after-scripts-now-available-for-bitbucket-pipelines"&gt;"after script" on bitbucket pipeline&lt;/a&gt; and set &lt;a href="https://grafana.com/docs/grafana/latest/http_api/annotations/"&gt;custom annotations&lt;/a&gt; to indicates the deployments on your dashboards.&lt;/p&gt;

&lt;p&gt;Connect &lt;a href="https://support.atlassian.com/bitbucket-cloud/docs/integrate-slack-with-pipelines/"&gt;bitbucket pipelines to slack&lt;/a&gt; to get notifications on some events such as failed pipeline.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>docker</category>
      <category>productivity</category>
      <category>bash</category>
    </item>
    <item>
      <title>5 Reasons to use Node-js along with React-js</title>
      <author>| pro._.gramer |</author>
      <pubDate>Mon, 03 May 2021 17:21:21 +0000</pubDate>
      <link>https://dev.to/anushree71199/5-reasons-to-use-node-js-along-with-react-js-3347</link>
      <guid>https://dev.to/anushree71199/5-reasons-to-use-node-js-along-with-react-js-3347</guid>
      <description>&lt;p&gt;Always been wondering how and why do we use node js along with react js? Well same here but I can list down the very needed five reasons every web developer thinks about before starting their work on building a website. &lt;/p&gt;

&lt;p&gt;P.S: Trying not to make this post boring because React can never be boring that too plus node it is just going to be dope üî•. So what are we waiting for? Let's get right into it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-helps-in-maintaining-high-server-load"&gt;
  &lt;/a&gt;
  1) Helps in maintaining high server load
&lt;/h2&gt;

&lt;p&gt;Yeah you heard it right, having node with your react project makes it super easy for the server to maintain server requests as node can handle multiple server requests, on top of that it helps in maintaining the server load balance.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-helps-in-maintaining-dynamic-website"&gt;
  &lt;/a&gt;
  2) Helps in maintaining dynamic website
&lt;/h2&gt;

&lt;p&gt;Dynamic websites are those websites that have to maintain a real-time database, and to manage those kinds of websites "react+node" helps a lot, in short your problem for the front-end plus back-end can be resolved using these two combos for sure. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-helps-in-creating-single-page-applications-easily"&gt;
  &lt;/a&gt;
  3) Helps in creating single page applications easily
&lt;/h2&gt;

&lt;p&gt;Single page applications like Gmail, Facebook can be easily made using node and react. Here react provides a very interactive UI/UX whereas the node provides a very simple back-end model. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-helps-in-building-json-for-your-apis"&gt;
  &lt;/a&gt;
  4) Helps in building JSON for your APIs
&lt;/h2&gt;

&lt;p&gt;JSON files stands for JavaScript object notation, it helps in transmitting data between website and a server. APIs are used in programming an application, as a developer you have to talk to the users for certain inputs and also with the program application to give specific output for that input. Now node helps in creating reusable code and this code gets shareable using react.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-helps-while-creating-mern-stack-applications"&gt;
  &lt;/a&gt;
  5) Helps while creating MERN stack applications
&lt;/h2&gt;

&lt;p&gt;The web applications that use mongoDB, express.js, react.js and node.js. Using this we can create applications like e-commerce websites, banking websites and many more. React plus node will help us in building such applications with ease.&lt;/p&gt;




&lt;p&gt;Ending this post with a reminder to take care of yourselves and keep coding ‚ù§Ô∏è&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>node</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>The Simple Tricks to Make Your Website Blazing Fast</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 03 May 2021 17:09:27 +0000</pubDate>
      <link>https://dev.to/martinheinz/the-simple-tricks-to-make-your-website-blazing-fast-4p19</link>
      <guid>https://dev.to/martinheinz/the-simple-tricks-to-make-your-website-blazing-fast-4p19</guid>
      <description>&lt;p&gt;Web application load speed is the most basic part of UX. Neglecting performance (load time) of your website can drive away users, because most people tend to leave the page after about 3 seconds if it doesn't load, therefore it's very important to make sure that your application loads as fast as possible. But how can you achieve that? There are many tricks and techniques for speeding up load time of an application and most of them don't involve any actual code change. In some cases, just a single line of config can give you a huge performance improvement. So, in this article we will explore the simplest and most effective tricks that will help you make your web application load as fast as possibly can!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compression"&gt;
  &lt;/a&gt;
  Compression
&lt;/h2&gt;

&lt;p&gt;The easiest change that can make really big difference in performance is usage of text compression. Enabling text compression tells browser which compression algorithms are supported by your server, allowing it to transfer text-based data faster and more efficiently.&lt;/p&gt;

&lt;p&gt;To get most out the text compression, you should use &lt;em&gt;Brotli&lt;/em&gt;, which is most efficient algorithm available. It's supported by all the major browsers, so there isn't any reason not to use it. To enable it, your server needs to return &lt;code&gt;Content-Encoding: br&lt;/code&gt; header and - of course - it also needs to support this algorithm.&lt;/p&gt;

&lt;p&gt;In case you're using NGINX, then to enable it you need to include Brotli plugin in your server. Basic installation guide is available in &lt;a href="https://docs.nginx.com/nginx/admin-guide/dynamic-modules/brotli/"&gt;docs&lt;/a&gt;, but if you're running NGINX in Docker container, then you need to build your own image because the plugin is not included in the base image by default. To build it you can run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;docker-base
&lt;span class="nb"&gt;cd &lt;/span&gt;docker-base/
curl &lt;span class="nt"&gt;-o&lt;/span&gt; Dockerfile.alpine https://raw.githubusercontent.com/nginxinc/docker-nginx/master/modules/Dockerfile.alpine
docker build &lt;span class="nt"&gt;--build-arg&lt;/span&gt; &lt;span class="nv"&gt;ENABLED_MODULES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"brotli"&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; nginx-brotli &lt;span class="nt"&gt;-f&lt;/span&gt; Dockerfile.alpine &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the plugin is installed, you also need to load it and enable it in the configuration. This can be added to the top of your &lt;code&gt;nginx.conf&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="n"&gt;load_module&lt;/span&gt; &lt;span class="s2"&gt;"modules/ngx_http_brotli_filter_module.so"&lt;/span&gt;;
&lt;span class="n"&gt;load_module&lt;/span&gt; &lt;span class="s2"&gt;"modules/ngx_http_brotli_static_module.so"&lt;/span&gt;;

&lt;span class="n"&gt;brotli&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;;
&lt;span class="n"&gt;brotli_comp_level&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;;
&lt;span class="n"&gt;brotli_static&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;;
&lt;span class="n"&gt;brotli_types&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;/&lt;span class="n"&gt;atom&lt;/span&gt;+&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;/&lt;span class="n"&gt;javascript&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;/&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;/&lt;span class="n"&gt;rss&lt;/span&gt;+&lt;span class="n"&gt;xml&lt;/span&gt;
             &lt;span class="n"&gt;application&lt;/span&gt;/&lt;span class="n"&gt;vnd&lt;/span&gt;.&lt;span class="n"&gt;ms&lt;/span&gt;-&lt;span class="n"&gt;fontobject&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;/&lt;span class="n"&gt;x&lt;/span&gt;-&lt;span class="n"&gt;font&lt;/span&gt;-&lt;span class="n"&gt;opentype&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;/&lt;span class="n"&gt;x&lt;/span&gt;-&lt;span class="n"&gt;font&lt;/span&gt;-&lt;span class="n"&gt;truetype&lt;/span&gt;
             &lt;span class="n"&gt;application&lt;/span&gt;/&lt;span class="n"&gt;x&lt;/span&gt;-&lt;span class="n"&gt;font&lt;/span&gt;-&lt;span class="n"&gt;ttf&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;/&lt;span class="n"&gt;x&lt;/span&gt;-&lt;span class="n"&gt;javascript&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;/&lt;span class="n"&gt;xhtml&lt;/span&gt;+&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;/&lt;span class="n"&gt;xml&lt;/span&gt;
             &lt;span class="n"&gt;font&lt;/span&gt;/&lt;span class="n"&gt;eot&lt;/span&gt; &lt;span class="n"&gt;font&lt;/span&gt;/&lt;span class="n"&gt;opentype&lt;/span&gt; &lt;span class="n"&gt;font&lt;/span&gt;/&lt;span class="n"&gt;otf&lt;/span&gt; &lt;span class="n"&gt;font&lt;/span&gt;/&lt;span class="n"&gt;truetype&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;/&lt;span class="n"&gt;svg&lt;/span&gt;+&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;/&lt;span class="n"&gt;vnd&lt;/span&gt;.&lt;span class="n"&gt;microsoft&lt;/span&gt;.&lt;span class="n"&gt;icon&lt;/span&gt;
             &lt;span class="n"&gt;image&lt;/span&gt;/&lt;span class="n"&gt;x&lt;/span&gt;-&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;/&lt;span class="n"&gt;x&lt;/span&gt;-&lt;span class="n"&gt;win&lt;/span&gt;-&lt;span class="n"&gt;bitmap&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;/&lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;/&lt;span class="n"&gt;javascript&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;/&lt;span class="n"&gt;plain&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;/&lt;span class="n"&gt;xml&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, to test whether it's really there, you can run the container and check for the presence of Brotli modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; nginx-brotli /bin/sh
/ &lt;span class="c"&gt;# ls etc/nginx/modules/*brotli*&lt;/span&gt;
etc/nginx/modules/ngx_http_brotli_filter_module-debug.so  etc/nginx/modules/ngx_http_brotli_static_module-debug.so
etc/nginx/modules/ngx_http_brotli_filter_module.so        etc/nginx/modules/ngx_http_brotli_static_module.so
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're also making requests to your own backend/APIs, you should check whether it supports Brotli or other compression option too, as that can also improve overall performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preloading-key-requests"&gt;
  &lt;/a&gt;
  Preloading Key Requests
&lt;/h2&gt;

&lt;p&gt;There are certain files and resources that your web application needs in order to fully load a page. These resources usually include things like fonts, CSS or JavaScript files. It's therefore good idea to preload these resources to make sure they're available when your application needs them. This way you can oftentimes save around 200ms for each resource!&lt;/p&gt;

&lt;p&gt;To preload any of these you would need to include &lt;code&gt;rel="preload"&lt;/code&gt; in &lt;code&gt;link&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preload"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"some-fancy-font.ttf"&lt;/span&gt; &lt;span class="na"&gt;as=&lt;/span&gt;&lt;span class="s"&gt;"font"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"font/woff2"&lt;/span&gt; &lt;span class="na"&gt;crossorigin&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you're making &lt;em&gt;Cross Origin&lt;/em&gt; resource fetch then you need to also include &lt;code&gt;crossorigin&lt;/code&gt; like above. If you want to see all the other content preloading options and browser compatibility, then check MDN docs &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caching-static-files"&gt;
  &lt;/a&gt;
  Caching Static Files
&lt;/h2&gt;

&lt;p&gt;Another improvement that requires only a bit of configuration of your web server is caching of static files. All files that won't change (often), such as fonts, images (gif, png, jpg) or icons (ico, svg) should be cached so that user's browser doesn't have to re-download all the content it already has every time user returns to your application or when they browse through individual pages.&lt;/p&gt;

&lt;p&gt;To implement this, you'd need to configure your web server to return &lt;code&gt;Cache-Control: max-age=...&lt;/code&gt; header to let the browser know that the resource should be cached for some period of time. To set this up in NGINX you would include the following snippet in your configuration (&lt;code&gt;server&lt;/code&gt; section):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="n"&gt;server&lt;/span&gt; {
    &lt;span class="n"&gt;location&lt;/span&gt; ~* \.(?:&lt;span class="n"&gt;cur&lt;/span&gt;|&lt;span class="n"&gt;jpe&lt;/span&gt;?&lt;span class="n"&gt;g&lt;/span&gt;|&lt;span class="n"&gt;gif&lt;/span&gt;|&lt;span class="n"&gt;htc&lt;/span&gt;|&lt;span class="n"&gt;ico&lt;/span&gt;|&lt;span class="n"&gt;png&lt;/span&gt;|&lt;span class="n"&gt;xml&lt;/span&gt;|&lt;span class="n"&gt;otf&lt;/span&gt;|&lt;span class="n"&gt;ttf&lt;/span&gt;|&lt;span class="n"&gt;eot&lt;/span&gt;|&lt;span class="n"&gt;woff&lt;/span&gt;|&lt;span class="n"&gt;woff2&lt;/span&gt;|&lt;span class="n"&gt;svg&lt;/span&gt;)$ {
        &lt;span class="n"&gt;root&lt;/span&gt; /&lt;span class="n"&gt;home&lt;/span&gt;/&lt;span class="n"&gt;html&lt;/span&gt;;
        &lt;span class="n"&gt;access_log&lt;/span&gt;    &lt;span class="n"&gt;off&lt;/span&gt;;
        &lt;span class="n"&gt;add_header&lt;/span&gt;    &lt;span class="n"&gt;Cache&lt;/span&gt;-&lt;span class="n"&gt;Control&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt;;
        &lt;span class="n"&gt;expires&lt;/span&gt;       &lt;span class="n"&gt;max&lt;/span&gt;;

        &lt;span class="n"&gt;tcp_nodelay&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;;
    }

    &lt;span class="n"&gt;location&lt;/span&gt; ~* \.(?:&lt;span class="n"&gt;css&lt;/span&gt;|&lt;span class="n"&gt;js&lt;/span&gt;|&lt;span class="n"&gt;html&lt;/span&gt;)$ {
        &lt;span class="n"&gt;root&lt;/span&gt; /&lt;span class="n"&gt;home&lt;/span&gt;/&lt;span class="n"&gt;html&lt;/span&gt;;
        &lt;span class="n"&gt;access_log&lt;/span&gt;    &lt;span class="n"&gt;off&lt;/span&gt;;
        &lt;span class="n"&gt;add_header&lt;/span&gt;    &lt;span class="n"&gt;Cache&lt;/span&gt;-&lt;span class="n"&gt;Control&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt;;
        &lt;span class="n"&gt;expires&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;;

        &lt;span class="n"&gt;tcp_nodelay&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see from the above, here we split the caching configuration into 2 parts. First tells browser to cache images, icons, fonts, etc. for maximum possible time. The other takes care of CSS, JS and HTML and sets the cache expiration to 2 hours. This is because if you're developing your application and deploying code regularly (daily), it'd be unfortunate if your code or styles wouldn't be visible to users because of very long cache expiration. You should adjust this to your needs though, based on how frequently your code changes.&lt;/p&gt;

&lt;p&gt;On top of caching of static files, you would ideally also cache responses from remote services/API. For this you have to identify which remote resources are suitable for caching and how long they should be cached. Then you'd need to do some more changes to your web server's configuration. The setup for NGINX is outlined in the docs &lt;a href="https://docs.nginx.com/nginx/admin-guide/content-cache/content-caching/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are some gotchas you might run into, so I will leave a few useful links here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nginx.com/resources/wiki/start/topics/examples/reverseproxycachingexample/"&gt;Example configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/understanding-nginx-http-proxying-load-balancing-buffering-and-caching"&gt;NGINX proxying article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/29358187"&gt;Headers that need to be ignored&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/9232739"&gt;Even more headers that need to be ignored&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nginx-proxy/nginx-proxy/issues/241#issuecomment-357422465"&gt;&lt;code&gt;proxy_buffering&lt;/code&gt; must be set to &lt;code&gt;on&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gryzli.info/2018/03/07/nginx-caching-check-if-request-is-cached/"&gt;Testing whether caching works&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tree-shaking"&gt;
  &lt;/a&gt;
  Tree Shaking
&lt;/h2&gt;

&lt;p&gt;Generally, playing with configuration will only get you so far and if you want make big dent in the application load time, you will need to shake off some of the redundant code bundled up with your application.&lt;/p&gt;

&lt;p&gt;This exact process of removing unused code from application bundle is called &lt;em&gt;Tree Shaking&lt;/em&gt;. The reason why it can make such a big difference is, that chances are that you're including/importing a lot of code that you're not actually using, which then has to be loaded by browser, even though doesn't do anything. You might be able to see this in the logs when you build your application, where &lt;em&gt;Webpack&lt;/em&gt; (or whichever other tool you might be using) will warn you that your bundle size is above recommended limit, which is good indicator, that you're probably bundling up a lot of unused JavaScript.&lt;/p&gt;

&lt;p&gt;Now, even when you see this kind of a warning, it's quite hard to actually find the libraries that are making your application little too bulky. So, to help us with this we can use &lt;code&gt;webpack-bundle-analyzer&lt;/code&gt; - which is handy plugin that shows size of all the JS libs included in your application. To use it, you have to install it and add it to your Webpack configuration, which is shown on NPM website &lt;a href="https://www.npmjs.com/package/webpack-bundle-analyzer"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;As for actual optimization - there's no real general way to &lt;em&gt;shake off&lt;/em&gt; unnecessary JS, as it depends on the individual bulky JS libs. That said, you're probably not the first one dealing with the size issue for that particular library, so it should be easy enough to find help on StackOverflow (well, that was the case for me at least).&lt;/p&gt;

&lt;p&gt;To give you an idea about how much this can help, here's a &lt;em&gt;before&lt;/em&gt; and &lt;em&gt;after&lt;/em&gt; screenshot of bundle size of my blog website frontend:&lt;/p&gt;

&lt;p&gt;Before making changes based Webpack Bundle Analyzer, the bundle was huge:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cHK8biMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxdjdjiha78p1jki0zy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHK8biMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxdjdjiha78p1jki0zy1.png" alt="Before"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After making changes &lt;em&gt;Vuetify.js&lt;/em&gt; and &lt;em&gt;Moment.js&lt;/em&gt; are (almost) completely removed and size reduced by more than 50%:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y6ewWj5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9supovwuev0yyeaycpye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6ewWj5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9supovwuev0yyeaycpye.png" alt="After"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from, or in addition to &lt;code&gt;webpack-bundle-analyzer&lt;/code&gt;, you can also use &lt;em&gt;Chrome DevTools&lt;/em&gt; to find unused JavaScript and CSS. To do that, you can open &lt;em&gt;Coverage&lt;/em&gt; tab, which you will find by opening DevTools &lt;em&gt;Command Menu&lt;/em&gt; with &lt;code&gt;Control + Shift + P&lt;/code&gt; and typing &lt;em&gt;Show Coverage&lt;/em&gt;. You should also use non-minified build of the application otherwise you won't find anything useful in there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qL_0edSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vn1ze76ui6h4ctvzeyf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qL_0edSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vn1ze76ui6h4ctvzeyf.png" alt="Coverage Tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see above this will highlight individual lines of unused code, which can be helpful in identifying sections of dead code or whole libraries that are barely touched. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-more-things-to-improve"&gt;
  &lt;/a&gt;
  Finding More Things to Improve
&lt;/h2&gt;

&lt;p&gt;In previous sections we went over some of the low hanging fruit when it comes to optimizing load time and performance. There are however many more things one can do to speed up a web application. To aid us in that effort, Google created &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;PageSpeed&lt;/a&gt;, which is a tool that allows you to inspect a web page and see it's performance in various areas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--19rv2-wf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yum3h6shdruvf93ybpd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--19rv2-wf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yum3h6shdruvf93ybpd.png" alt="Summary of performance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from metrics, the PageSpeed tool also gives you guide and many good resources for resolving the issues it found, both for mobile and desktop version of your application.&lt;/p&gt;

&lt;p&gt;The PageSpeed tool is useful for testing your production website, but not so convenient when you want to test your application while developing locally. For this case you can instead use &lt;em&gt;Lighthouse&lt;/em&gt; tool available in Chrome DevTools. To use use it, simply navigate to Lighthouse tab and click &lt;em&gt;Generate report&lt;/em&gt; and you will get same report as in PageSpeed tool.&lt;/p&gt;

&lt;p&gt;Another two good tools that can help you gauge the performance of your application is Chrome DevTools &lt;em&gt;Network tab&lt;/em&gt;, which allows you to simulate slow internet, or the Chrome DevTools option to simulate different device type - for example old-ish mobile devices. With these you can get more realistic idea about the actual UX of users of you application.&lt;/p&gt;

&lt;p&gt;So, to apply network throttling, you would go to Network tab in Chrome DevTools, open the drop-down next to &lt;em&gt;Disable Cache&lt;/em&gt; checkbox (by default set to &lt;em&gt;No throttling&lt;/em&gt;) and choose either one of the presets or add custom network profile (you can view full example in &lt;a href="https://developer.chrome.com/docs/devtools/network/#throttle"&gt;docs&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHHEEqdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dulnjtiwp2h7sqd062im.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHHEEqdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dulnjtiwp2h7sqd062im.png" alt="Network throttling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To change a device type, you'd want press &lt;code&gt;Control+Shift+M&lt;/code&gt; and then choose a device from drop-down in top center of your screen (also by default set to &lt;em&gt;No throttling&lt;/em&gt;). See also complete example in &lt;a href="https://developer.chrome.com/docs/devtools/device-mode/#throttle"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;After implementing the above, your application should be a fair bit speedier than before, but it's important to remember that what runs well on your machine might not be so great on users' - possibly old and slow - hardware. Also bear in mind that performance on desktop and mobile devices can differ wildly, so make sure to test performance on various (simulated) devices and in various network conditions.&lt;/p&gt;

&lt;p&gt;Website load times are important part of UX, but are not the only thing that you should pay attention to. So, while looking at the above mentioned PageSpeed website, make sure to check all the other metrics and suggestions that Google gives you to improve your application. Many of the audits that Google runs as part of PageSpeed test can help you not just in improving website performance but also with SEO or accessibility.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>webpack</category>
      <category>nginx</category>
      <category>performance</category>
    </item>
    <item>
      <title>Complete Guide for OS Module in Python Every Developer should know</title>
      <author>Ashish Yadav</author>
      <pubDate>Mon, 03 May 2021 16:58:50 +0000</pubDate>
      <link>https://dev.to/expoashish/complete-guide-for-os-module-in-python-every-developer-should-know-1f7a</link>
      <guid>https://dev.to/expoashish/complete-guide-for-os-module-in-python-every-developer-should-know-1f7a</guid>
      <description>&lt;p&gt;Introduction to Python OS Module: The OS module in Python provides functions for interacting with the operating system. It offers many useful OS functions that are used to perform OS-based tasks and get related information about operating system. The OS comes under Python's standard utility modules. Lets Start:-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-work-with-the-os-module-we-need-to-import-the-os-module"&gt;
  &lt;/a&gt;
  To work with the OS module, we need to import the OS module:
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#1-osname"&gt;&lt;br&gt;
  &lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;os.name:
&lt;/li&gt;
&lt;/ol&gt;
&lt;/h2&gt;


&lt;p&gt;This function gives the name of the operating system dependent module imported. The following names have currently been registered: ‚Äòposix‚Äô, ‚Äònt‚Äô, ‚Äòos2‚Äô, ‚Äòce‚Äô, ‚Äòjava‚Äô and ‚Äòriscos‚Äô&lt;/p&gt;

&lt;p&gt;Code:&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os&lt;br&gt;
print(os.name)&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#2-osmkdir-"&gt;&lt;br&gt;
  &lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;os.mkdir() :
&lt;/li&gt;
&lt;/ol&gt;
&lt;/h2&gt;


&lt;p&gt;This function is used to create new directory.&lt;/p&gt;

&lt;p&gt;Code:&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os&lt;br&gt;
print(os.mkdir(path))&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h1&gt;
&lt;br&gt;
  &lt;a href="#for-continue-readinggt"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  &lt;a href="https://expoashish.blogspot.com/2021/05/os-module-in-python-programming.html"&gt;For Continue Reading-&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#and-subscribe-to-our-youtube-channel-bestcodecreator"&gt;
  &lt;/a&gt;
  üé•üí°üî•AND Subscribe to Our YouTube Channel &lt;a href="https://www.youtube.com/bestcodecreator"&gt;bestcodecreator&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#and-support-our-blogging-site-myblogs"&gt;
  &lt;/a&gt;
  üé•üí°üî•AND Support Our Blogging site &lt;a href="https://expoashish.blogspot.com/2021/05/data-structures-roadmap.html"&gt;myblogs&lt;/a&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Thank you for reading this blog. I wish you the best in your journey in learning and mastering in Python Programmingüî•üî•.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>computerscience</category>
      <category>deeplearning</category>
    </item>
    <item>
      <title>April: Forem Twitch Events Roundup üëæ</title>
      <author>Christina Gorton</author>
      <pubDate>Mon, 03 May 2021 16:42:35 +0000</pubDate>
      <link>https://dev.to/devteam/april-forem-twitch-events-roundup-3j27</link>
      <guid>https://dev.to/devteam/april-forem-twitch-events-roundup-3j27</guid>
      <description>&lt;p&gt;In April, Nick Taylor and I had the privilege to speak with 3 awesome guests. This is a round up of all the wonderful guests who joined us and a special pair programming episode where Nick taught me how Cypress is set up in Forem. .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-maggie-appleton"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Maggie Appleton
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QeGDcK1neoU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Nick and I chatted with Maggie Appleton about &lt;a href="https://egghead.io/"&gt;egghead.io&lt;/a&gt;, art, anthropology, &lt;a href="https://github.com/MaggieAppleton/digital-gardeners"&gt;digital gardens&lt;/a&gt;, and more. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to follow Maggie:&lt;/strong&gt;&lt;br&gt;
&lt;a href="http://maggieappleton.com"&gt;http://maggieappleton.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Mappletons"&gt;https://twitter.com/Mappletons&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pair-programming-with-nick-and-christina"&gt;
  &lt;/a&gt;
  Pair Programming with Nick and Christina
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Xm-nCsTObkE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Nick and I talked about how Forem is set up with Cypress end-to-end testing. We also showed how to make custom commands in Cypress and why you might want to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some of the links mentioned in the stream:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://docs.forem.com/tests/e2e-tests/"&gt;Forem end-to-end docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.cypress.io/guides/overview/why-cypress"&gt;Cypress documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/&amp;lt;br&amp;gt;%0Amaking-your-ui-tests-resilient-to-change"&gt;Making your UI tests resilient to change by Kent C. Dodds&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/forem/forem/tree/master/cypress"&gt;Forem‚Äôs use of Cypress in GitHub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/testdouble/cypress-rails"&gt;Cypress Rails&lt;/a&gt;&lt;br&gt;
&lt;a href="https://testautomationu.applitools.com/"&gt;Test Automation University&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-jason-lengstorf"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Jason Lengstorf
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dXr0iJE10tQ"&gt;
&lt;/iframe&gt;
&lt;br&gt;
We were joined by Jason Lengstorf, host of &lt;a href="https://www.learnwithjason.dev/"&gt;Learn with Jason&lt;/a&gt; and VP of Developer Experience at &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We talked &lt;a href="https://www.netlify.com/jamstack/"&gt;Jamstack&lt;/a&gt;, serverless, and Nick and Jason used serverless functions on Netlify to quickly set up an API to grab DEV posts with the &lt;a href="https://docs.forem.com/api/"&gt;DEV API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where to follow Jason:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.jason.af/"&gt;https://www.jason.af/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/jlengstorf"&gt;https://twitter.com/jlengstorf&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pair-programming-with-jhey"&gt;
  &lt;/a&gt;
  Pair Programming with Jhey
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AqTP9SX4nAU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
We were joined once again by Jhey! This time we tackled creating an overlay(or scene) and animation for the Twitch Channel. Check out the Sloan the sloth animation we created with &lt;a href="https://github.com/instafluff/ComfyJS"&gt;ComfyJS&lt;/a&gt; and &lt;a href="https://greensock.com/"&gt;GreenSock&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where to follow Jhey:&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://jhey.dev/links/"&gt;https://jhey.dev/links/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to all our viewers who joined the streams and chatted with us this month! &lt;/p&gt;

&lt;p&gt;Be sure to follow the &lt;a href="https://www.twitch.tv/thepracticaldev"&gt;ThePracticalDev Twitch&lt;/a&gt; channel to check out all the great guests we have joining us every Wednesday this month. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our May guests currently include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/JeromeHardaway"&gt;Jerome Hardaway&lt;/a&gt;, developer at Microsoft and founder of &lt;a href="https://twitter.com/vetswhocode"&gt;Vets Who Code&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/AishaBlake"&gt;Aisha Blake&lt;/a&gt; and &lt;a href="https://twitter.com/pachicodes"&gt;Pachi Carlson&lt;/a&gt;, Developer Relations Engineers at New Relic and &lt;a href="https://www.therelicans.com/"&gt;the Relicans&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/meg_gutshall"&gt;Meg Gutshall&lt;/a&gt;, Software engineer. Always smiling. Spanish speaker. Book junkie.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>meta</category>
    </item>
  </channel>
</rss>
