<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create a user in AWS IAM</title>
      <author>Ajit Singh</author>
      <pubDate>Thu, 20 May 2021 06:29:24 +0000</pubDate>
      <link>https://dev.to/ajitsinghkaler/create-a-user-in-aws-iam-al3</link>
      <guid>https://dev.to/ajitsinghkaler/create-a-user-in-aws-iam-al3</guid>
      <description>&lt;p&gt;First we studied the &lt;a href="https://dev.to/ajitsinghkaler/aws-identity-and-access-management-4jc2"&gt;basics of IAM&lt;/a&gt; now we do some hands on exercises. If you follow along most of the things we do while learning AWS will be completed in the AWS free tier. So you don't need to worry but remember always follow the clean up paragraph at the end of each hands on article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iam-users"&gt;
  &lt;/a&gt;
  IAM Users
&lt;/h2&gt;

&lt;p&gt;Lets first create an admin user so that we don;t have to use our root user which can lead to a devastation.&lt;/p&gt;

&lt;p&gt;To create an admin user follow the steps below I've also provided images to follow along.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login as you root user in your aws account. On this window select root user and login using your root id and password
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hPCGZ--b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nd4i2sc1copaa3zk3bie.png" alt="Amazon Root Login Window"&gt;
If you land on an IAM user window somehow select the option below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aS7tPdLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/935syfvnnfr2m312axjy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aS7tPdLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/935syfvnnfr2m312axjy.png" alt="IAM user window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Search for IAM in the top search bar and select the option highlighted below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mvv9SOHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vig6r5dotmlg85i8qcq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mvv9SOHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vig6r5dotmlg85i8qcq.png" alt="AWS home Page"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select users from the sidebar and select add user from the top of the opened window&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9RGDO0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt33vf1rzqwhxtgqcuoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9RGDO0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt33vf1rzqwhxtgqcuoa.png" alt="AWS create user step 1"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set user details as required. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Username: This is a unique username all across aws&lt;/li&gt;
&lt;li&gt;Access type: Programmatic access using this you get access using Keys which you use while connecting with API, CLI, SDK used mostly be software developers(We will learn about this later in more detail)&lt;/li&gt;
&lt;li&gt;Console Access: This provides access to the AWS management console using a password like the way we login into it &lt;/li&gt;
&lt;li&gt;Console Password: Form there you can use an auto generated AWS password or a custom password based on needs&lt;/li&gt;
&lt;li&gt;Require password reset: This is set if you want your user to reset his password on first login. Click on next after this&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1vdzq0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp3xrsmsl1ic7j893fzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1vdzq0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp3xrsmsl1ic7j893fzt.png" alt="Add user details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now we set the permissions for this user. This has 3 options

&lt;ul&gt;
&lt;li&gt;Add user to group: Here we can add a user to a group. Which we have not learnt so don't worry about this&lt;/li&gt;
&lt;li&gt;Copy permissions from existing user: We don't have any existing user so we can't do anything&lt;/li&gt;
&lt;li&gt;Attach existing policies directly: AWS has a lot of existing policies form which we can select check these policies and use it according to your needs. For this exercise we are creating a shadow root user as learnt in previous &lt;a href="https://dev.to/ajitsinghkaler/aws-identity-and-access-management-4jc2"&gt;article&lt;/a&gt;. You can use filter and filter the admin policy named AdministratorAccess. Select this and move onto the next step.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iU-TeXHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zm4k1onv6xmvlz75ltf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iU-TeXHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zm4k1onv6xmvlz75ltf.png" alt="User permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now, we set the tags, imagine you are a big corporation and you want to manage your users. To data AWS provides us with tags which we can join to a user to identify it. Like Job Postion: Developer. Here you can add as many tags as you need to identify it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0e63rAwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81btlo7bs68aloka5s4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0e63rAwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81btlo7bs68aloka5s4j.png" alt="Add taga to IAM"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We review and check if everything is set properly. If not you can go back and change that. Now click on create user.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O0ZG5sTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nwujx98waft4ajcgvzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O0ZG5sTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nwujx98waft4ajcgvzt.png" alt="Review Changes"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New User is created with admin access. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfvZb_gh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4borblifjp2qabfoxaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfvZb_gh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4borblifjp2qabfoxaq.png" alt="New user created"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-You can see it from the users tab in IAM.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mzy0RdKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jesl0af9zt4qna769z15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mzy0RdKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jesl0af9zt4qna769z15.png" alt="Dash Board User"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is it for today next we will create user groups.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>cloudnewbie</category>
    </item>
    <item>
      <title>Software Engineering</title>
      <author>Ankush Singh Gandhi</author>
      <pubDate>Thu, 20 May 2021 06:10:21 +0000</pubDate>
      <link>https://dev.to/ankushsinghgandhi/software-engineering-3gbm</link>
      <guid>https://dev.to/ankushsinghgandhi/software-engineering-3gbm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#software-engineering"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Software Engineering🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;It is a systematic, disciplined, cost-effective technique for software development.&lt;/li&gt;
&lt;li&gt;It is an Engineering approach to develop software.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#software-engineering-process"&gt;
  &lt;/a&gt;
  🟢Software Engineering Process
&lt;/h3&gt;

&lt;p&gt;1) Software Development Lifecycle&lt;br&gt;
2) Requirements &amp;amp; Specification (SRS)&lt;br&gt;
3) Architecture&lt;br&gt;
4) Software Design Process&lt;br&gt;
5) Implementation&lt;br&gt;
6) Development&lt;br&gt;
7) Testing&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#software-development-lifecycle"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Software Development Lifecycle🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;It is a process used by the software engineering industry to design develop and test high-quality software SDLC tends to produce high-quality software that meets customer expectations.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sdlc-models"&gt;
  &lt;/a&gt;
  🟢SDLC Models
&lt;/h3&gt;

&lt;p&gt;There are processes, methodologies and frameworks range from specific prescriptive steps that can be used by the organization there are many SDLC models that have been developed to achieve the different required objective the model specifies various stages of the process and the order in which they are carried out.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Waterfall Model&lt;/li&gt;
&lt;li&gt;V Model&lt;/li&gt;
&lt;li&gt;Incremental Model&lt;/li&gt;
&lt;li&gt;Iterative Model&lt;/li&gt;
&lt;li&gt;Spiral Model&lt;/li&gt;
&lt;li&gt;RAD Model&lt;/li&gt;
&lt;li&gt;Prototype Model&lt;/li&gt;
&lt;li&gt;Agile Model&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#waterfall-model"&gt;
  &lt;/a&gt;
  🟢Waterfall Model
&lt;/h3&gt;

&lt;p&gt;It is a breakdown of project activities into linear sequential phases where each face depends on the deliverables of the previous one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZfwNmMyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yat5l6scectuaiijpos.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZfwNmMyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yat5l6scectuaiijpos.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#incremental-model"&gt;
  &lt;/a&gt;
  🟢Incremental Model
&lt;/h3&gt;

&lt;p&gt;The incremental build model is a method of software development where the model is designed, implemented, and tested incrementally (a little more is added each time) until the product is finished the product defined finished when it satisfies all requirements&lt;/p&gt;

&lt;p&gt;Each iteration passes through the requirement, design, coding, and testing phase and each subsequent release of the system adds function to the previous release until all designed functionality has been implemented.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_74UxLnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebu7xt0vb2isu5fixbyh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_74UxLnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebu7xt0vb2isu5fixbyh.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#iterative-model"&gt;
  &lt;/a&gt;
  🟢Iterative Model
&lt;/h3&gt;

&lt;p&gt;The iterative model is a particular implementation of a software development life cycle (SDLC) that focuses on an initial, simplified implementation, which then progressively gains more complexity and a broader feature set until the final system is complete. When discussing the iterative method, the concept of incremental development will also often be used liberally and interchangeably, which describes the incremental alterations made during the design and implementation of each new iteration.&lt;/p&gt;

&lt;p&gt;Unlike the more traditional waterfall model, which focuses on a stringent step-by-step process of development stages, the iterative model is best thought of as a cyclical process. After an initial planning phase, a small handful of stages are repeated over and over, with each completion of the cycle incrementally improving and iterating on the software. Enhancements can quickly be recognized and implemented throughout each iteration, allowing the next iteration to be at least marginally better than the last.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--717YDRj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7xglfglflwwstaxnfrv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--717YDRj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7xglfglflwwstaxnfrv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#spiral-model"&gt;
  &lt;/a&gt;
  🟢Spiral Model
&lt;/h3&gt;

&lt;p&gt;The spiral model combines the idea of iterative development with the systematic, controlled aspects of the waterfall model. This Spiral model is a combination of the iterative development process model and sequential linear development model i.e. the waterfall model with a very high emphasis on risk analysis. It allows incremental releases of the product or incremental refinement through each iteration around the spiral.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--29C46As1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtf8ji9nvv7ibhmzghin.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--29C46As1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtf8ji9nvv7ibhmzghin.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#agile-model"&gt;
  &lt;/a&gt;
  🟢Agile Model
&lt;/h3&gt;

&lt;p&gt;The meaning of Agile is swift or versatile." Agile process model" refers to a software development approach based on iterative development. Agile methods break tasks into smaller iterations or parts that do not directly involve long-term planning. The project scope and requirements are laid down at the beginning of the development process. Plans regarding the number of iterations, the duration, and the scope of each iteration are clearly defined in advance.&lt;/p&gt;

&lt;p&gt;Each iteration is considered as a short time "frame" in the Agile process model, which typically lasts from one to four weeks. The division of the entire project into smaller parts helps to minimize the project risk and to reduce the overall project delivery time requirements. Each iteration involves a team working through a full software development life cycle including planning, requirements analysis, design, coding, and testing before a working product is demonstrated to the client.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tl2SR4AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnmgxl3y9krunmwv4g94.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tl2SR4AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnmgxl3y9krunmwv4g94.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agile is a methodology. It's a way of thinking. It is NOT a model in and of itself.&lt;/p&gt;

&lt;p&gt;Agile was invented because the scope of software development was changing. Waterfall methods aren't bad, they're just slow, and not built for a lot of modern problems.&lt;/p&gt;

&lt;p&gt;This is largely due to the complexity of modern systems which make them hard to plan 100%. This means at some point, a change will be required, and production will stop until all the documents are updated.&lt;/p&gt;

&lt;p&gt;With agile however, we can move a little bit quicker. We are constantly looking for and adjusting to change.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#agile-manifesto"&gt;
  &lt;/a&gt;
  📌Agile Manifesto
&lt;/h3&gt;

&lt;p&gt;The agile manifesto is a set of guiding principles for agile development. They are: &lt;/p&gt;

&lt;p&gt;🔺Individuals and interactions over process and tools.&lt;/p&gt;

&lt;p&gt;🔺Working software over comprehensive documentation.&lt;/p&gt;

&lt;p&gt;🔺Customer collaboration over contract negotiation.&lt;/p&gt;

&lt;p&gt;🔺Responding to change over following a plan.&lt;/p&gt;

&lt;p&gt;With this set of rules, all agile models are created. Note, in here we aren't throwing out processes and tools, and we aren't going without a plan. We are simply just creating priorities within the development process. We want to make the piece of software that is needed. To do this, we need to keep communication channels open and collaborate with all involved.&lt;/p&gt;

&lt;p&gt;Through this manifesto, models were created that fit these rules.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#agile-models"&gt;
  &lt;/a&gt;
  📌Agile Models
&lt;/h3&gt;

&lt;p&gt;🔺Scrum - Scrum is focused on sprints. Sprints are these 1-4 week production cycles. We take the software, come up with a goal of where we want it to be, and then build it to there.&lt;/p&gt;

&lt;p&gt;Once we finish a sprint, we then go back to the stakeholders, show them the software, take suggestions, and move on to the next sprint.&lt;/p&gt;

&lt;p&gt;All of this allows us to stay flexible. We are communicating with the stakeholders almost every 2 weeks with this model. This means we are constantly able to take those suggestions and change the direction of development.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#for-more-deeper-understanding"&gt;
  &lt;/a&gt;
  For more deeper understanding
&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ankushsinghgandhi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8acRaTd1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hNCrq8eb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/471579/90f99e7e-3d48-4883-aa30-a7c876528c99.png" alt="ankushsinghgandhi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ankushsinghgandhi/scrum-cheat-sheet-16ab" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Scrum Cheat Sheet&lt;/h2&gt;
      &lt;h3&gt;Ankush Singh Gandhi ・ Feb 4 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;🔺Kanban - The kanban system is one of optimization. With kanban, we are trying to analyze the flow of production and figure out the slowdowns.&lt;/p&gt;

&lt;p&gt;To do this, we usually use some sort of visual flowchart. We break the project up into tasks and fill up the chart. We are then able to see if any part of production has a slowdown. Maybe for example, our review process is slowing us down, or maybe it's planning.&lt;/p&gt;

&lt;p&gt;With kanban, we are trying to make small adjustments into the right direction. We want to work with the existing process, not replace it.&lt;/p&gt;

&lt;p&gt;🔺Lean Startup - Lean startup is a way of testing out the market before spending on development. Here we create a MVP (Minimum Viable Product) to see if there is interest in the product we are developing.&lt;/p&gt;

&lt;p&gt;Production costs a lot of money. It would be really bad if we spent $500,000 on a project, just to figure out that nobody is actually interested in that product.&lt;/p&gt;

&lt;p&gt;An example of this would be to build a website that sells a certain product. Get it working to the point where people can place that item into a cart. Then when they go to purchase, have it give them a friendly message stating that this feature will be coming soon. We then track how many people are actually interested in buying products off our website.&lt;/p&gt;

&lt;p&gt;If we have a lot of interest, then we are good to go ahead with production. If we don't have as much interest, then maybe we need to rethink our design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#waterfall-model-example"&gt;
  &lt;/a&gt;
  🟢Waterfall Model Example
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-requirements"&gt;
  &lt;/a&gt;
  1) Requirements
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;collecting email &amp;amp; message&lt;/li&gt;
&lt;li&gt;store in db&lt;/li&gt;
&lt;li&gt;prevent bad input&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#2-design"&gt;
  &lt;/a&gt;
  2) Design
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;using HTML &amp;amp; CSS for building&lt;/li&gt;
&lt;li&gt;JS for input verification&lt;/li&gt;
&lt;li&gt;MySQL for backend&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#3development"&gt;
  &lt;/a&gt;
  3)Development
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;actual coding&lt;/li&gt;
&lt;li&gt;documenting&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#4-testing"&gt;
  &lt;/a&gt;
  4) Testing
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;does form collect input&lt;/li&gt;
&lt;li&gt;does it send info. to db&lt;/li&gt;
&lt;li&gt;does it prevent bad input&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#5-deployment"&gt;
  &lt;/a&gt;
  5) Deployment
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;deploying on AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#6-maintainence"&gt;
  &lt;/a&gt;
  6) Maintainence
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;fixing bugs&lt;/li&gt;
&lt;li&gt;adding features&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#requirements-amp-specification"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Requirements &amp;amp; Specification🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  🟢Requirements
&lt;/h3&gt;

&lt;p&gt;A way of figuring out the exact specification of what the software should do all things that define the goal of the system.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A non-tech definition of something the user requires from the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Anyone can understand.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ex - ability to submit a request for medical treatment form.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#specification"&gt;
  &lt;/a&gt;
  🟢Specification
&lt;/h3&gt;

&lt;p&gt;A more technical way of figuring out exactly what the software should do we can say it is the technical aspect of requirements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A technical definition of what users require from the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep it simple we are not trying to design.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ex - send AES 256 form data from the frontend to the server.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  🟢Example
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#requirement"&gt;
  &lt;/a&gt;
  Requirement
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The tire must work on SUV automobiles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#specification"&gt;
  &lt;/a&gt;
  Specification
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Must support 75,00lbs pressure.&lt;/li&gt;
&lt;li&gt;Tire must fill US DOT standards.&lt;/li&gt;
&lt;li&gt;T or greater speed quality.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#types-of-requirements"&gt;
  &lt;/a&gt;
  🟢Types of Requirements
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#on-the-basis-of-functionality-there-are-two-types-of-requirements"&gt;
  &lt;/a&gt;
  On the basis of functionality there are two types of requirements
&lt;/h4&gt;

&lt;p&gt;1.Functional&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What are the functions of the program &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;what should the system do &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.Non-Functional&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;what goals should be met &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How should the system work&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#other-than-these-two-there-are-three-more-types-of-requirements"&gt;
  &lt;/a&gt;
  Other than these two there are three more types of requirements
&lt;/h4&gt;

&lt;p&gt;1.Product&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;must have of the product itself&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ex - the app must be coded in kotlin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.Organizational&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;company policies, standards, style, etc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ex - data should be encrypted by AES 256&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ex - project should be developed by SCRUM &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.External&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;external law, regulations, trends, etc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ex - it must use SSL due to law Xyz in the US&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#design-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Design: Architecture🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#architecture-introduction"&gt;
  &lt;/a&gt;
  🟢Architecture Introduction
&lt;/h3&gt;

&lt;p&gt;Architecture is the highest level of design within a system. It is the link between idea and reality. It takes our idea for the system, and creates a plan for it. We focus on only the largest areas of the system here.  We want to break it down from idea, into concrete areas to build.&lt;/p&gt;

&lt;p&gt;In software, bad architecture is something that CAN'T be fixed with good programming. It is a critical step within the development process. Once we decide on an architecture, we have to understand that it can't be changed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#architecture-overview"&gt;
  &lt;/a&gt;
  🟢Architecture Overview
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#bad-architecture"&gt;
  &lt;/a&gt;
  📌Bad Architecture
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sV6sQuVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jua15xanshz5j447voj9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sV6sQuVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jua15xanshz5j447voj9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-architecture"&gt;
  &lt;/a&gt;
  📌Good Architecture
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Puaj2Fzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu5goiiz02ceps97m80q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Puaj2Fzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu5goiiz02ceps97m80q.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Software architecture is all about breaking up larger systems and ideas, into smaller focused systems. Our first step is to take the requirements, and build an initial architecture. We take this broad set of ideas and guidelines, and have to organize it into functioning areas.&lt;/p&gt;

&lt;p&gt;Each of these areas are then put through the same process to break them up into smaller and smaller pieces. Eventually we will have a blueprint for the entire system designed.&lt;/p&gt;

&lt;p&gt;Good architecture is hard. It takes a lot of resources to develop correctly. However, this upfront cost is almost always recovered from how maintainable the software is. This will reduce the amount of bugs, and the time to fix those bugs.&lt;/p&gt;

&lt;p&gt;Good architecture also helps for faster development and better resource utilization. If we break up the project into small pieces, we will understand how to have multiple developers work at the same time on it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-architecture-example"&gt;
  &lt;/a&gt;
  🟢Software Architecture example
&lt;/h3&gt;

&lt;p&gt;1.We are going to design an architecture of a game.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wCXPIL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1eu6vj33apalrlfx4mwl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wCXPIL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1eu6vj33apalrlfx4mwl.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.now we should divide these layers based on functionality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A2O97Zby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gikcci43x6687unmjn8z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A2O97Zby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gikcci43x6687unmjn8z.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.now we will add another layer that controls the interaction between frontend and game logic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUbbpAf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01tf696m4wdnf0h7i8o4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUbbpAf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01tf696m4wdnf0h7i8o4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#architecture-patterns"&gt;
  &lt;/a&gt;
  🟢Architecture Patterns
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#pipeandfilter"&gt;
  &lt;/a&gt;
  📌Pipe-and-Filter
&lt;/h3&gt;

&lt;p&gt;The pipe and filter pattern is a good pattern to use to process data through multiple different layers. The key to this pattern is the ability of each step to input, and output the same type of data. So if you send a set of numbers in one side, you will get a set of numbers out the other side.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h-8-UH_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu0ae7cds804rm228kn7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h-8-UH_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu0ae7cds804rm228kn7.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ysk7Dys9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dabfnnh0g44ft8cqs3y.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ysk7Dys9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dabfnnh0g44ft8cqs3y.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This key constraint makes it so you can mix and match the logic in any order and still have the program work. These different filters can also be set up across multiple servers.&lt;/p&gt;

&lt;p&gt;There is definitely an added complexity with this pattern. Setting it up can be tricky to get correct. Also, if the data is lost at any step, the entire process is broken.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clientserver"&gt;
  &lt;/a&gt;
  📌Client-Server
&lt;/h3&gt;

&lt;p&gt;The client-server pattern is one that is quite common today. Every single website and most phone apps use this architecture. With this pattern there are two parts to the software, the client, and the server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r1fBMPAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soxbq4xw9h668rx3iqr4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r1fBMPAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soxbq4xw9h668rx3iqr4.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take an iPhone app for example. What you download in the app store is what is known as the "client software". This is the version of the app built to talk to the server. It doesn't store any of the server's data locally. It is just setup to make the appropriate server calls when necessary.&lt;/p&gt;

&lt;p&gt;The other part of this is of course the "server software". This is the software that is installed onto a server to receive the requests from the client. The server holds and updates the data. It also processes requests, and sends the data to the clients. Servers have to be tuned correctly, as there can be a near unlimited number of clients requesting information.&lt;/p&gt;

&lt;p&gt;This is a great pattern for accessing and updating a single repository of information. It's great of keeping track of accounts, and regulating which data is given automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#masterslave"&gt;
  &lt;/a&gt;
  📌Master-Slave
&lt;/h3&gt;

&lt;p&gt;The master slave pattern consists of two elements, the master, and the slave. The master is in full control of all slaves associated with it. This is good for a multitude of different applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--thpSg_Ey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmu7tm6uhqgmtlxv0gxk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thpSg_Ey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmu7tm6uhqgmtlxv0gxk.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One such application is with duplicate backup servers. You don't want these backup servers all acting independently of one another. This will create a bunch of different states of memory. Each server will have a different set of data. Instead, you have a master server, which is the main server of operation.&lt;/p&gt;

&lt;p&gt;The master server is the one dealing with all of the normal day to day operations. Then at some point during the day, it sends a signal out to all of the slave servers to tell them to begin their backup operation. The slave servers all start up, copy the data from the master server, and then go back to sleep.&lt;/p&gt;

&lt;p&gt;This pattern is also used with "multi-threading". Here we break up an operation into a bunch of small parts. Each of those parts are given a thread and fed through the CPU. If a CPU has multiple cores, it can process multiple threads at the same time.&lt;/p&gt;

&lt;p&gt;We typically have a master thread which controls the creation and tracking of all slave threads. The slaves do exactly what the master thread has told them. The master thread keeps reassessing the situation both creating and deleting slave threads. Once the operation is finished, the master thread ceases as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#layered-pattern"&gt;
  &lt;/a&gt;
  📌Layered Pattern
&lt;/h3&gt;

&lt;p&gt;The layered pattern consists of divvying up program into layers of technology. These layers only communicate with adjacent layers. Let's say we have an architecture with 9 layers. In this model, 8 would only be able to communicate with 9 and 7, 4 with 3 and 5, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9E2JJrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbwrqzhjonzh16kdroov.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9E2JJrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbwrqzhjonzh16kdroov.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This simplifies the communication channels, and helps to better distinguish the areas of the program. Overall, this helps to make the program more maintainable. The downside to this, is that there can be of added complexity in some areas. For example, if you need to send a message from layer 1 to layer 9. There will have to be a function in each layer to pass that message along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#architecture-conclusion"&gt;
  &lt;/a&gt;
  🟢Architecture Conclusion
&lt;/h3&gt;

&lt;p&gt;There is no one size fits all plan when it comes to software development. The process must be taken on a case to case basis. Us, as engineers, seek to find the best pattern or set of patterns which solve the problem.&lt;/p&gt;

&lt;p&gt;This process is an iterative one. We come up with an idea, get feedback, rework it, and repeat the process many times. After a series of iterations, we have the architecture that will work best for the problem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#design-modularity"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Design: Modularity🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The design is where we really plan out our system. We can go as detailed as possible in this step.&lt;/p&gt;

&lt;p&gt;The main focus here is to break up the project into subsystems, and modules.&lt;/p&gt;

&lt;p&gt;Subsystem - Independent system which holds independent value.&lt;/p&gt;

&lt;p&gt;Module - Component of a subsystem which cannot function as a standalone.&lt;/p&gt;

&lt;p&gt;We should slowly refine and reorganize the systems and sub-modules until they make the most sense.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mtv01r41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e96ch438u0v852meyxfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mtv01r41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e96ch438u0v852meyxfm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Design is two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Activity - working to design the software.&lt;/li&gt;
&lt;li&gt;Product - a document or set of documents detailing the design of software.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Information Hiding - Hiding the complexity of the program inside of a "black box".&lt;/p&gt;

&lt;p&gt;Data Encapsulation - Hiding the implementation details from the user, providing only an interface.&lt;/p&gt;

&lt;p&gt;Both of these work to hide the implementation details, and protect the integrity of the data. We want to control the flow of data, and provide the user with an easy to use experience.&lt;/p&gt;

&lt;p&gt;With these ideas, we can take the most complex of code, and make it accessible to anyone. Doing this at each step in the design process also helps make the code easier to maintain.&lt;/p&gt;

&lt;p&gt;With it implemented properly, we don't need to know the entire codebase to make a change. We only need to know the part of the program we are working on. The encapsulation of all the other levels of the program, make things easy to test and change.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#goals-of-modularity"&gt;
  &lt;/a&gt;
  🟢Goals of Modularity
&lt;/h3&gt;

&lt;p&gt;1) Abstraction&lt;br&gt;
2) Composibility&lt;br&gt;
3) Decomposibility&lt;br&gt;
4) Protectibility&lt;br&gt;
5) Continuity&lt;br&gt;
6) Module understandibility&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#coupling-introduction"&gt;
  &lt;/a&gt;
  🟢Coupling Introduction
&lt;/h3&gt;

&lt;p&gt;Coupling is one of the major things to look at when designing the modularity of the system. It details how dependent each module is on every other module. A set of modules with tight coupling is bad design. It creates hard to maintain code.&lt;/p&gt;

&lt;p&gt;We don't want our modules to be dependent on one another. We want to be able to swap one module out with another, and only have to update code in the swapped module. The more dependent our program is, the more and more modules we will have to rewrite for every change.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tight-coupling"&gt;
  &lt;/a&gt;
  📌Tight Coupling
&lt;/h3&gt;

&lt;p&gt;This is the worst form of coupling. Tight coupling means there is a strong dependence between modules. Changes will be very hard to make and bugs will be difficult to track down.&lt;/p&gt;

&lt;p&gt;Content Coupling - When one module modifies or reliese on internal working of another module.&lt;/p&gt;

&lt;p&gt;Common Coupling - when several modules have access to same global data.&lt;/p&gt;

&lt;p&gt;External Coupling - when several modules have direct access to the same external Input/Output.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#medium-coupling"&gt;
  &lt;/a&gt;
  📌Medium Coupling
&lt;/h3&gt;

&lt;p&gt;Here the coupling is getting better, but we still have room for improvement.&lt;/p&gt;

&lt;p&gt;Control Coupling - This is when data is passed that influences the internal logic of another module. &lt;/p&gt;

&lt;p&gt;Data Structure Coupling - This is when multiple modules share the same data-structure.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#loose-coupling"&gt;
  &lt;/a&gt;
  📌Loose Coupling
&lt;/h3&gt;

&lt;p&gt;Data Coupling - This is when two modules share the same data. This is a good form of coupling. &lt;/p&gt;

&lt;p&gt;Message Coupling - This coupling is when messages or commands are passed between modules.&lt;/p&gt;

&lt;p&gt;No Coupling - No communication between modules whatsoever. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cohesion-introduction"&gt;
  &lt;/a&gt;
  🟢Cohesion Introduction
&lt;/h3&gt;

&lt;p&gt;Cohesion is the other area to focus on when we are talking about modularity. Cohesion is the measurement of how focused our module is on a single task. The more focused the module, the higher the cohesion.&lt;/p&gt;

&lt;p&gt;With cohesion, higher is better. We want modules which only do one thing and one thing only. The reason for this is with maintainability. &lt;/p&gt;

&lt;p&gt;What we want to find is the point where we can maximize the effects of both. We want to create loose coupling, and high cohesion.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#weak-cohesion"&gt;
  &lt;/a&gt;
  📌Weak Cohesion
&lt;/h3&gt;

&lt;p&gt;Coincidental Cohesion - The tasks within the module are only linked because they are in the same module. This is the weakest form of cohesion. Here, the modules are completely random. There is nothing linking the tasks within a module, except the fact that they were simply put into the same file.&lt;/p&gt;

&lt;p&gt;Temporal Cohesion - The tasks within the module are only linked because events happen around the same time. &lt;/p&gt;

&lt;p&gt;Logical Cohesion - The tasks within the module are linked due to being in the same general category. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#medium-cohesion"&gt;
  &lt;/a&gt;
  📌Medium Cohesion
&lt;/h3&gt;

&lt;p&gt;Procedural Cohesion - The order of execution passes from one command to the next. Here we have a relationship of time. This is different from temporal because the tasks are both linked, and essential for one another. There is an order by which these must be executed to work properly.&lt;/p&gt;

&lt;p&gt;Communicational Cohesion - When all tasks support the same input and output data.&lt;/p&gt;

&lt;p&gt;Sequential Cohesion - A combination of the previous two. When all tasks work in which the output data for one, is the input data for the next. With this, we have a procedure of tasks, and these tasks all share the same data.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#strong-cohesion"&gt;
  &lt;/a&gt;
  📌Strong Cohesion
&lt;/h3&gt;

&lt;p&gt;Functional Cohesion - This is when all tasks within a module support activities needed for one, and only one problem-related task. In essence the module only does a single action.&lt;/p&gt;

&lt;p&gt;Object Cohesion - This can either be lumped in with functional cohesion, or by itself. Object cohesion is when all activities modify a single object.&lt;/p&gt;

&lt;p&gt;This only works in object-oriented languages. An example might be a module which only modifies a user object. All tasks within this module update the user module in some way.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cohesion-conclusion"&gt;
  &lt;/a&gt;
  🟢Cohesion Conclusion
&lt;/h3&gt;

&lt;p&gt;Cohesion is really important to make code which is easy to understand and maintain. The more focused the modules, the easier the code will be to debug.&lt;/p&gt;

&lt;p&gt;Remember however, that this must be a balance with coupling. A group of extremely cohesive modules might also be tightly coupled together. We are looking for the balance between the two. If you remember one thing from these sections, it's that we want "loose coupling, and strong cohesion".&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#implimentation-amp-deployment"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Implimentation &amp;amp; Deployment🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Good design allows us to see our entire project before it is built. With this, we can decide which areas we want to build, and which areas we want to purchase. The great thing about purchasing code is that it is almost always cheaper.&lt;/p&gt;

&lt;p&gt;It's almost always a win-win situation to purchase instead of build. Coding however is usually very specific. This makes it rare to find software that perfectly fits the problem. However, do some research before you begin building, you can save a lot of money.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#take-care-of-programmers"&gt;
  &lt;/a&gt;
  🟢Take Care of Programmers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implementation is where most time spent and where a lot of time can be lost&lt;/li&gt;
&lt;li&gt;Always program while alert and focus&lt;/li&gt;
&lt;li&gt;35 hours of programming can be just as productive as 70&lt;/li&gt;
&lt;li&gt;Programming takes focus constant interruptions will reduce the overall focus&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#coding-principles"&gt;
  &lt;/a&gt;
  🟢Coding Principles
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use style guide so all the code look relatively the same.&lt;/li&gt;
&lt;li&gt;Code is written for peoples not for computers.&lt;/li&gt;
&lt;li&gt;Make modules easy to understand.&lt;/li&gt;
&lt;li&gt;Go into everything with a plan&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#deployment-introduction"&gt;
  &lt;/a&gt;
  🟢Deployment Introduction
&lt;/h3&gt;

&lt;p&gt;Deployment is a mix between testing and implementation it mostly happens after testing but it requires implementations too.&lt;/p&gt;

&lt;p&gt;The level of planning in this space is directly related to how the deployment effects the overall project.&lt;/p&gt;

&lt;p&gt;Deployment should be built with the idea of retreal. if something goes wrong how can we revert ?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deployment-planning"&gt;
  &lt;/a&gt;
  🟢Deployment Planning
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Amount of planning is dependent on the size of change.&lt;/li&gt;
&lt;li&gt;We look at which areas wich most likely have the biggest problems&lt;/li&gt;
&lt;li&gt;Areas to look at

&lt;ul&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;Software Integration&lt;/li&gt;
&lt;li&gt;Run time changes&lt;/li&gt;
&lt;li&gt;Training&lt;/li&gt;
&lt;li&gt;Downtimes&lt;/li&gt;
&lt;li&gt;Backups&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;li&gt;Memmory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Finally we need to look at planing steps to turn back.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#deployment-rollback"&gt;
  &lt;/a&gt;
  🟢Deployment Rollback
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Rollback is the act of reverting a system back to previous working state&lt;/li&gt;
&lt;li&gt;Look for point of no return

&lt;ul&gt;
&lt;li&gt;This is a point where it takes longer to go back then it does to just continue through&lt;/li&gt;
&lt;li&gt;Knowing this will help make a decision during deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Every step of deployment process make a decision whether roll back is a better option&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#testing-overview"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Testing Overview🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Testing is the process of finding errors. These errors can either be failures within the code, or they can be failures to meet requirements. If the app doesn't do what it was set out to do, then that is a problem. In testing, we work to make sure the program works for all requirements.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#test-data-inputs-that-are-designed-to-test-the-system"&gt;
  &lt;/a&gt;
  📌🔺Test Data - Inputs that are designed to test the system.
&lt;/h3&gt;

&lt;p&gt;🔺Test Cases - Ways in which we operate the system with the given data.&lt;/p&gt;

&lt;p&gt;🔺Oracle - The set of "good" outcomes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bugs"&gt;
  &lt;/a&gt;
  🟢Bugs
&lt;/h3&gt;

&lt;p&gt;Bugs are in essence a deviation from expected behavior. For example, if you have a website, a potential bug might be that the website doesn't load. The code fatally breaks during loading, and results in a lack of the service. This is of course a deviation from the expected behavior of being able to access the website.&lt;/p&gt;

&lt;p&gt;Another bug could be if the website logged you into someone else's account by mistake. The website in this scenario is still up and functioning. However, a deviation from expected behavior, only being able to access your own account, has happened.&lt;/p&gt;

&lt;p&gt;🔺Failure - The event by which the code deviates from expected behavior.&lt;/p&gt;

&lt;p&gt;🔺Error - The part of the code that leads to the failure.&lt;/p&gt;

&lt;p&gt;🔺Fault - What the outcome actually was.&lt;/p&gt;

&lt;p&gt;Testing can be used to show the presence of bugs, but never to ensure the absence of them. This is because the only way to ensure this, would be to test EVERY single possible test case. This could easily be in the billions to trillions for a typical system. This would be nearly impossible to do. The cost of testing alone could far exceed that of the entire rest of development times 10.&lt;/p&gt;

&lt;p&gt;So what we do instead, is try to do the smallest set of test cases, to cover the greatest amount of ground. We use a mixture of different testing practices to accomplish this task. There will always be bugs, but we can actively remove most of them if we are smart.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#verification-and-validation"&gt;
  &lt;/a&gt;
  🟢Verification and Validation
&lt;/h3&gt;

&lt;p&gt;🔺Verification - Are we building the thing right? Does the software work compared to the given specifications.&lt;/p&gt;

&lt;p&gt;🔺Validation - Are we building the right thing? Does the software work compared to what the user/client needs? &lt;/p&gt;

&lt;p&gt;A way of violating verification, would be if the program accesses the wrong database. In this situation, we are not building the system correctly. It is deviating from expected behavior.&lt;/p&gt;

&lt;p&gt;A way of violating validation, would be if the program calculates car payments, instead of house payments. Our car payment calculator could be the most stable calculator in the world. However, we were supposed to build a house payment calculator. We are not building the right system. We are building a system which solves problems that it was not designed to solve. (And conversely doesn't solve problems that it was designed to solve.)&lt;/p&gt;

&lt;p&gt;A more real world example of this would be if a company has a really specific way of collecting information and we designed a system which collects that information differently. All of the same information has been collected, but not in the right way. We aren't building the correct system.&lt;/p&gt;

&lt;p&gt;Knowing, and testing both of these is important to delivering high quality software!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  🟢Testing
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#unit-testing"&gt;
  &lt;/a&gt;
  📌Unit Testing
&lt;/h3&gt;

&lt;p&gt;Unit testing to focus on the smallest unit of a software. We are trying to isolate different areas, repeating until we test every module of the program. In this, we take a module, and we give it test cases. We then check these test cases against the oracle.&lt;/p&gt;

&lt;p&gt;Overall, we are trying to make sure that the modules are doing what they were designed to do. We don't to have bugs from other modules ruin the module we are testing. So for unit tests, we typically supply dummy values to isolate the module. This way we know if a bug is happening, it's happening from the area we are testing.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#integration-testing"&gt;
  &lt;/a&gt;
  📌Integration Testing
&lt;/h3&gt;

&lt;p&gt;Integration testing is the next step. Once we are satisfied that the modules are all working how we want them, we need to begin testing them together. With integration testing, we begin testing the architecture and the communication as a whole.&lt;/p&gt;

&lt;p&gt;Where in unit testing we came up with test cases for individual modules, with integration testing, we will come up with test cases for groups of modules. For example, we might want to test an entire form, instead of just testing each box within the form.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#incremental-testing"&gt;
  &lt;/a&gt;
  📌Incremental Testing
&lt;/h3&gt;

&lt;p&gt;One of the issues with integration testing is that if a bug arises, it can be difficult to tell exactly what module introduced that bug. Incremental testing is one way of making this process easier.&lt;/p&gt;

&lt;p&gt;With incremental testing, we slowly add one module after the next into the testing environment. This way, if a bug arises, we know which module caused the bugs to be introduced.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#topdown-testing"&gt;
  &lt;/a&gt;
  📌Top-Down Testing
&lt;/h3&gt;

&lt;p&gt;With Top-Down Testing, we begin testing at the highest possible level, and then work our way down. To have this work, we need to have a set dummy modules that we slowly replace with regular modules.&lt;/p&gt;

&lt;p&gt;Stub - A template of the model that will be implemented. Typically returns hard-coded values.&lt;/p&gt;

&lt;p&gt;A stub is typically used for this. It's a module which doesn't have any logic in it. All it has, are functions which return hard coded values. Hard-coded here means nothing that was calculated, just values that we put in there. So for example, a stub might have a function "getUser(int 45)". Instead of going through and finding information about a user, it just returns a user object that we have hard-coded into it.&lt;/p&gt;

&lt;p&gt;This way we can test our modules ability to use the user information, without having to introduce another module. Once we test everything and make sure it works, we can then add in the actual module and do our next round of testing.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bottomup-testing"&gt;
  &lt;/a&gt;
  📌Bottom-Up Testing
&lt;/h3&gt;

&lt;p&gt;Bottom-Up Testing is the opposite of Top-Down. Here we work from the bottom, and use things called drivers to make our way upwards.&lt;/p&gt;

&lt;p&gt;Driver - Templates which execute commands and initialize the needed variables.&lt;/p&gt;

&lt;p&gt;When we work from bottom up, we need the logic which call our bottom modules. For example, if our module is the module with getUser() in it, then we need to figure out a way to properly test this. What we right is a driver, which initializes the variables, and then makes multiple calls to the functions we need it to.&lt;/p&gt;

&lt;p&gt;So in this situation, the driver might call getUser() 1,000,000 times with random values. We would then look at the results to see if the function is working the way we want it. Once we are satisfied, we add another layer and keep going.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#back-to-back-testing"&gt;
  &lt;/a&gt;
  📌Back to Back Testing
&lt;/h3&gt;

&lt;p&gt;Back to Back testing is good to do when you already have a working program. With this, we run a set of tests on the system before we make a change. We then make a change, by either updating, adding, or deleting a module. We then run the same set of tests.&lt;/p&gt;

&lt;p&gt;We now have two sets of data. The before, and the after. We compare these two sets to make sure that there are no differences. If there is a difference, we know the change did more than we like. We can then revert, or go fix the bug.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#manual-vs-automatic-testing"&gt;
  &lt;/a&gt;
  📌Manual vs Automatic Testing
&lt;/h3&gt;

&lt;p&gt;There are two different ways we can set up tests. We can do it manually, where we enter in values ourselves, or automatically, where we set up another system to do the test.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#automatic"&gt;
  &lt;/a&gt;
  🔺Automatic
&lt;/h3&gt;

&lt;p&gt;Both of these have their own merits. Automatic testing is nice because we can cover a much larger area than manual testing. We can set up a system, and have it test millions of test cases. Once we set it up, we can run it every-time we change our code, guaranteeing we didn't break anything with a new update.&lt;/p&gt;

&lt;p&gt;This all however comes with a lot more overhead. The testing system is a system itself. This means more planning and development time.On top of this, we will have to design tests which can be done from the computer, and provide oracles to check their data. If we are testing out millions of test cases, the oracle will most likely have to be a complex algorithm.&lt;/p&gt;

&lt;p&gt;There also comes the issue of testing the tester. What if our tester is designed incorrectly and it gives us false positives or negatives? We then spend unnecessary time chasing down phantom bugs, or deploy bad software.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#manual"&gt;
  &lt;/a&gt;
  🔺Manual
&lt;/h3&gt;

&lt;p&gt;Manual testing involves a human being testing the code. They user goes in expecting to do an action. They then test to see if there is expected behavior. Bugs are noted down, and then given to developers.&lt;/p&gt;

&lt;p&gt;These testers can be developers, stakeholders, or specially trained testers. They can more easily come up with oracles, and perform a wide range of tests.&lt;/p&gt;

&lt;p&gt;However, humans are very slow when compared to a computer. They can only test so much of a system. Often times, this means many parts of the system don't get properly tested.&lt;/p&gt;

&lt;p&gt;Overall&lt;/p&gt;

&lt;p&gt;The best way to test is to combine these two. Have a good set of automatic tests, and a good set of testers. This will allow the speed of automatic, and the ease and flexibility of manual.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#black-box-vs-white-box-testing"&gt;
  &lt;/a&gt;
  📌Black Box vs White Box Testing
&lt;/h3&gt;

&lt;p&gt;Depending on who tests can also have a large difference on testing. In the testing world there is this idea of "white box" and black box" testing.&lt;/p&gt;

&lt;p&gt;With black box testing, we are testing the device based on inputs and outputs. We have no idea how the program works. All we know is that we should give it a certain input, and a certain output should occur. With this type of testing, we are looking for general functionality. We want to see how the program reacts to different inputs and outputs.&lt;/p&gt;

&lt;p&gt;White box testing however, is when we know the inner workings of a system. With this type of testing, we are trying to test the code itself. We typically develop more technical tests that try to make sure the system is coded correctly.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#my-other-blogs"&gt;
  &lt;/a&gt;
  My Other Blogs
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ankushsinghgandhi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8acRaTd1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hNCrq8eb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/471579/90f99e7e-3d48-4883-aa30-a7c876528c99.png" alt="ankushsinghgandhi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ankushsinghgandhi/steps-to-master-python-1p06" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Python 2021 Roadmap&lt;/h2&gt;
      &lt;h3&gt;Ankush Singh Gandhi ・ Sep 27 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ankushsinghgandhi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8acRaTd1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hNCrq8eb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/471579/90f99e7e-3d48-4883-aa30-a7c876528c99.png" alt="ankushsinghgandhi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ankushsinghgandhi/markdown-cheat-sheet-1il5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Markdown Cheat Sheet&lt;/h2&gt;
      &lt;h3&gt;Ankush Singh Gandhi ・ Oct 3 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ankushsinghgandhi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8acRaTd1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hNCrq8eb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/471579/90f99e7e-3d48-4883-aa30-a7c876528c99.png" alt="ankushsinghgandhi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ankushsinghgandhi/git-github-cheat-sheet-71b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Git &amp;amp; Github 2021 Cheat Sheet&lt;/h2&gt;
      &lt;h3&gt;Ankush Singh Gandhi ・ Oct 8 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>computerscience</category>
      <category>siliconvalley</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>บ่นโค้ดใน Smart Contract ของ Pancake Bunny</title>
      <author>Chakrit Likitkhajorn</author>
      <pubDate>Thu, 20 May 2021 05:59:39 +0000</pubDate>
      <link>https://dev.to/chrisza4/smart-contract-pancake-bunny-1g7n</link>
      <guid>https://dev.to/chrisza4/smart-contract-pancake-bunny-1g7n</guid>
      <description>&lt;p&gt;อันนี้จะบ่นสั้นๆ คือวันนี้อยากรู้ว่า Pancake Bunny มันพลาดตรงไหน แล้วเห็นโค้ดชุดนึงที่น่าพูดถึง&lt;/p&gt;

&lt;p&gt;คือออกตัวก่อน เวลาเขียน Smart contract มันจะมีเรื่องค่า Gas ซึ่งมันมีผลให้การเขียนโค้ดแบบปกติอาจจะสิ้นเปลือง จุดนี้ผมยังไม่เข้าใจมาก และที่เขาเขียนมันอาจจะดีที่สุดในโดเมน Smart Contract แล้วก็ได้นะครับ&lt;/p&gt;

&lt;p&gt;แต่ถ้าเราเอามาเขียนในภาษาอื่นๆ ที่ไม่มีค่า Gas อย่าลอกเขามาทื่อๆ นะ&lt;/p&gt;

&lt;p&gt;จากภาพนี้&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xjWKruKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2ALz5NRsBjyS4uy0pD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xjWKruKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2ALz5NRsBjyS4uy0pD.jpeg" alt="Src"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(ต้นทาง &lt;a href="https://peckshield.medium.com/pancakebunny-incident-root-cause-analysis-7099f413cc9b"&gt;https://peckshield.medium.com/pancakebunny-incident-root-cause-analysis-7099f413cc9b&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;ขอลอกส่วนนี้มา&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;token0&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WBNB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;valueInUSD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;valueInBNB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;priceOfBNB&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1e18&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;token1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WBNB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;valueInUSD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;valueInBNB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;priceOfBNB&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1e18&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ต่อ ไม่ได้เอามาด้วย
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;จาก&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// และ 
&lt;/span&gt;
&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;สองบรรทัดนี้เหมือนกันเด๊ะๆ เลยแค่ใช้ reserve คนละตัว แล้วพอรวมกับ &lt;code&gt;if token1() == WBNB&lt;/code&gt; ทำให้รู้ว่าจุดประสงค์ของโค้ดนี้คือมันต้องการจะเอา Reserve ของ WBNB มาใช้ในสูตร &lt;code&gt;amount * reserve * 2 / totalSupply()&lt;/code&gt; นั่นแหละครับ&lt;/p&gt;

&lt;p&gt;ดังนั้นการเขียนให้เจตนาตรงนี้เคลียร์กว่า ทำได้แบบนี้&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;reserveBNB&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;token0&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WBNB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;reserveBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reserve0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;token1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WBNB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;reserveBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reserve1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserveBNB&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;โค้ดชุดหลังมันทำให้อ่านปราดเดียวรู้เลยว่า มันมีสูตรคำนวนแค่สูตรเดียวนะ และสูตรต้องการค่า BNB ที่อยู่ใน Pool มาใช้งานนะ ต่างกับชุดแรกที่ต้องเพ่งนานมากกว่าจะรู้ว่า "อ้อ สูตรเหมือนกันนั่นแหละไม่มีอะไรหรอก แค่ต้องเลือก Reserve มาให้ถูกที่" ผมเพ่งหลายนาทีกว่าจะถึงบางอ้อ&lt;/p&gt;

&lt;p&gt;ผมเดาว่าที่เขาไม่เขียนแบบนี้เพราะจริงๆ มันมี Condition ที่ 3 แล้วใน Solidity การเช็ค if ทุกครั้งมันมีค่า Gas ซึ่งผมไม่เชี่ยวชาญพอที่จะบอกได้ว่าโค้ดแบบนี้ในบริบทของ Solidity ดีหรือไม่ดี อาจจะดีสุดแล้วก็ได้พอเอาเรื่องความประหยัดเข้ามาร่วม&lt;/p&gt;

&lt;p&gt;แต่อยากจะบอกโปรแกรมเมอร์ที่เขียนโปรแกรมทั่วๆ ไปว่า โค้ดแบบนี้จริงๆ อย่าลอกไปใช้ในภาษาที่ไม่ติดเรื่องค่า Gas นะครับ มันอ่านยากครับ&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Learn to Code</title>
      <author>Hemanth Varma</author>
      <pubDate>Thu, 20 May 2021 05:48:30 +0000</pubDate>
      <link>https://dev.to/killingclown007/how-to-learn-to-code-429m</link>
      <guid>https://dev.to/killingclown007/how-to-learn-to-code-429m</guid>
      <description>&lt;p&gt;Software development is an incredibly rewarding skill that can be extremely valuable. It’s remote-work friendly, and no matter where you live in the world, if you get good enough, you can qualify for great paying work ranging from $100k/year — $200k+/year (USD). Some of the highest-paid JavaScript developers make close to $500k/year. But to qualify for those great salaries, you have to get undeniably good at what you do.&lt;br&gt;
Even if you’re already a professional software developer, you need to learn how to learn to code. Choosing a career in software development is choosing a path of lifelong learning.&lt;br&gt;
In my role as a mentor I’ve had a peek into the learning process of hundreds of developers. What shocked me most is how much faster some learn than others. Some with little or no coding background learn new concepts more than 10 times faster than others who may have 10+ year’s experience in the craft. The secret is, you can, too.&lt;br&gt;
There are a handful of learning secrets that can put you on a rocket to mastery of the craft.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code
The best way to learn to code is to code. Jump into a development environment, and write some code. If you’re reading a book or blog post and you encounter a code example, type it out in a code editor and try to make it work. Once you get it working, play with it. Change things up. Try to think of other ways to apply it, or other things you can do with the same technique. Play with the code.
Book smarts will only get you so far. The best learning will come from doing.&lt;/li&gt;
&lt;li&gt;Drive
The best way to get great at something is to do it. A lot. You need to be motivated and determined to learn. One way to get motivated is to give yourself the time and patience to gain some mastery. You don’t need to be an expert right away. It’s like learning a musical instrument. You can’t sit down at a piano and immediately be the next Debussy, but you can master the C major scale in your first sitting.
Likewise, you’re not going to sit down and immediately crank out the next Instagram, TikTok or Fortnite.
As you begin to master each small lesson, you’ll realize you can do this. You can get good at this. You can start to see your goal begin to materialize, and you’ll be more motivated to drive toward that goal.
Keep at it.&lt;/li&gt;
&lt;li&gt;Focus
I’ve seen a lot of developers try to master everything all at once and get nowhere, fast. Their progress slows to an excruciatingly glacial crawl rather than a gold medal sprint.
If you want to learn something quickly, you can’t have your attention scattered everywhere except where you need it. Pick one language (start with JavaScript), one framework (start with React), one book, one course, one topic, etc. Whatever you pick, focus on that one thing until you have a sufficient mastery of it before you move on to something else.
I tell people all the time, concentrate on one language full time for at least a year before you branch out and learn another language. Decades ago, it used to be that a typical software developer would actually need to learn many languages in the course of their career to stay competitive in the field.
While it’s still true that learning more than one language can teach you different ways of seeing things, and even deepen your understanding of your primary language, these days a single language (JavaScript) can get you through the majority of your career.
Tip from a hiring manager: The skills you specialize in are your most valuable skills. If you commit to being a lifelong generalist bouncing from language to language, you’ll put an artificial ceiling on your mastery and earning potential.&lt;/li&gt;
&lt;li&gt;Read
Many of the most useful insights available to software developers come from books. There are lots of good YouTube videos and courses online, but books are the standard bearers of software development culture and knowledge. In particular, I’ve found the following books extremely valuable:
Eloquent JavaScript
Composing Software (Disclaimer: I wrote this one. The printed version is available on Amazon.)
Code Complete: 2nd Edition
Clean Code: A Handbook for Agile Software Craftsmanship
Test Driven Development By Example
Refactoring: Improving the Design of Existing Code 2nd Edition&lt;/li&gt;
&lt;li&gt;Review
If you want to move a new concept from a familiar-sounding idea into long-term memory, reviewing a topic is your friend. The mistake most learners make is that they quickly read a book or a blog post, and then promptly forget what they read the next day. If you read something interesting that you want to remember, review it the next day. Test yourself. Then test yourself again the day after. And the day after. Do that 4 days in a row, and your chances of committing the learning to long-term memory increase dramatically.&lt;/li&gt;
&lt;li&gt;Mix Mediums
Some people learn best by reading, others by watching videos, but if you mix it up — watch a video, then do some reading, then practice with some interactive code sessions, you’ll repeat the concepts from multiple angles, and multiple examples. You’ll naturally drill some review, and get some practice in while you’re at it.&lt;/li&gt;
&lt;li&gt;Build Projects
Learning the concept doesn’t mean you’ll know how to use it in a real app. Once you’ve been coding with exercises for a few weeks, it’ll be time to build something of your own. Need an idea? Instead of the ubiquitous todo app, try implementing The Rejection App.&lt;/li&gt;
&lt;li&gt;Value Principles Over Frameworks and Languages
Frameworks and APIs change fast. Software design principles are evergreen. Learn principles that translate across language barriers.
Examples:
“A small change in requirements should lead to only a small change in implementation.” (Paraphrased from “A Practical Handbook for Software Development”)
Do One Thing (DOT) — Simplified from Doug McIlroy’s “Do One Thing and Do It Well (DOTADIW)” — a function should have one job. It should not fetch data AND process data AND draw to the screen. It should only fetch data. Or only process data. Or only draw to the screen. (Time to split your React components into smaller parts!)
“Program to an interface, not an implementation.” — Gang of Four, “Design Patterns”
“Favor object composition over class inheritance.” — Gang of Four, “Design Patterns”
Avoid shared mutable state.
“Premature optimization is the root of all evil.” ~ Donald Knuth
“You Aren’t Gonna Need It (YAGNI)” — Don’t write code for something that isn’t actually required, yet.&lt;/li&gt;
&lt;li&gt;Share, Document, and Mentor
“Dr. Hoenikker used to say that any scientist who couldn’t explain to an eight-year-old what he was doing was a charlatan.” ~ Kurt Vonnegut — Cat’s Cradle
Learning how to code is just part of the equation. When you’re collaborating with other developers, your code will be reviewed by other people, and they will sometimes challenge your choices. As you try to explain yourself, you may find that you didn’t understand well enough to defend your position. Practice explaining, documenting, and teaching the concepts to your coworkers and other collaborators on your projects.&lt;/li&gt;
&lt;li&gt;Practice, practice, practice!
Anybody who’s ever learned an acquired skill can attest, practice is key. But to get better you can’t just practice the concepts you already know. You need to challenge yourself and extend beyond the realm of what is familiar. If you constantly practice at the edge of your current abilities, you will excel.
The book, “Peak: The New Science of Expertise” delves into the study of deliberate practice and offers a wealth of insights that you can apply in your daily life to get better at practice. I strongly recommend reading it so that you can make your practice time and side-projects more productive.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Spring Boot + Oracle example: Build a CRUD app</title>
      <author>Tien Nguyen</author>
      <pubDate>Thu, 20 May 2021 05:02:30 +0000</pubDate>
      <link>https://dev.to/tienbku/spring-boot-oracle-example-build-a-crud-app-5g6a</link>
      <guid>https://dev.to/tienbku/spring-boot-oracle-example-build-a-crud-app-5g6a</guid>
      <description>&lt;p&gt;In this tutorial, we're gonna build a Spring Boot and Oracle example with database connection that uses Hibernate, Spring Data JPA to make CRUD Operations. You'll know:&lt;/p&gt;

&lt;ul&gt;
        &lt;li&gt;How to configure Spring Data, JPA, Hibernate to work with Oracle Database&lt;/li&gt;
        &lt;li&gt;How to define Data Models and Repository interfaces&lt;/li&gt;
    &lt;li&gt;Way to create Spring Rest Controller to process HTTP requests&lt;/li&gt;
    &lt;li&gt;Way to use Spring Data JPA to interact with Oracle Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Full Article at: &lt;a href="https://bezkoder.com/spring-boot-hibernate-oracle/"&gt;https://bezkoder.com/spring-boot-hibernate-oracle/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Overview of Spring Boot and Oracle example&lt;/h2&gt;

&lt;p&gt;We will build a Spring Boot + Hibernate + Oracle example that exports Rest CRUD API for a Tutorial application:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Each Tutotial has id, title, description, published status.&lt;/li&gt;
    &lt;li&gt;Apis help to create, retrieve, update, delete Tutorials.&lt;/li&gt;
    &lt;li&gt;Apis also support custom finder methods such as find by published status or by title.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are APIs that we need to provide:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Urls&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;create new Tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;retrieve all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;retrieve a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;update a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;delete a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;delete all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/published&lt;/td&gt;
&lt;td&gt;find all published Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials?title=[keyword]&lt;/td&gt;
&lt;td&gt;find all Tutorials which title contains &lt;code&gt;keyword&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;We make CRUD operations &amp;amp; finder methods with Hibernate and Spring Data JPA's &lt;code&gt;JpaRepository&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The database will be Oracle 12c/19c by configuring project dependency &amp;amp; datasource.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you run the Spring Boot + Oracle example, &lt;strong&gt;&lt;em&gt;tutorials&lt;/em&gt;&lt;/strong&gt; table will be automatically generated in Oracle Database.&lt;br&gt;
You can see things like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mP3-vvci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzo9ywb1skwmid4ldh75.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mP3-vvci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzo9ywb1skwmid4ldh75.png" alt="spring-boot-oracle-example-database-table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create some Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5lgNesy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dffyo2kup4hlmk9c10vw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5lgNesy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dffyo2kup4hlmk9c10vw.png" alt="spring-boot-oracle-example-crud-create-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check Oracle database after create operation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-SCknk_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxujs4st4h79uuhxg8mw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-SCknk_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxujs4st4h79uuhxg8mw.png" alt="spring-boot-oracle-example-crud-database-create-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Update some Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVZU3gSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puf1ewdah5y7mxm11is7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVZU3gSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puf1ewdah5y7mxm11is7.png" alt="spring-boot-oracle-example-crud-update-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check Oracle database after update operation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BsfPLhV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtevrg87d05ybgikfqmi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsfPLhV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtevrg87d05ybgikfqmi.png" alt="spring-boot-oracle-example-crud-database-update-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get all Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BSlZVJMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zk30sr91owi2pedviany.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSlZVJMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zk30sr91owi2pedviany.png" alt="spring-boot-oracle-example-crud-retrieve-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get a Tutorial by Id:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RrCQEwJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cunnf1n4fq2b2uko94fs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RrCQEwJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cunnf1n4fq2b2uko94fs.png" alt="spring-boot-oracle-example-crud-retrieve-one-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find all &lt;em&gt;&lt;strong&gt;published&lt;/strong&gt;&lt;/em&gt; Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TSXSAIiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02m6atkpezs5iogy8yb6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSXSAIiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02m6atkpezs5iogy8yb6.png" alt="spring-boot-oracle-example-crud-search-tutorial-active"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find all Tutorials which title contains 'ring':&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1niONinP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wk53i5zzydc7bwy55k2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1niONinP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wk53i5zzydc7bwy55k2c.png" alt="spring-boot-oracle-example-crud-search-tutorial-title"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Delete a Tutorial:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0MsFgd86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/flj0ngtwev2xt2o7d0b1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0MsFgd86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/flj0ngtwev2xt2o7d0b1.png" alt="spring-boot-oracle-example-crud-delete-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check Oracle database after delete Operation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fz93eEXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ucpsnnoxkajn8ewcftk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fz93eEXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ucpsnnoxkajn8ewcftk.png" alt="spring-boot-oracle-example-crud-database-delete-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Delete all Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YOJsF0Fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w1pzjrxfkql003y5kyj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOJsF0Fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w1pzjrxfkql003y5kyj.png" alt="spring-boot-oracle-example-crud-delete-all-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the table has no record:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lrr_YQSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fjnpupux06xnuze8lgr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lrr_YQSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fjnpupux06xnuze8lgr.png" alt="spring-boot-oracle-example-crud-database-delete-all-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Technology&lt;/h2&gt;

&lt;ul&gt;
        &lt;li&gt;Java 8&lt;/li&gt;
        &lt;li&gt;Spring Boot 2 (with Spring Web MVC, Spring Data JPA)&lt;/li&gt;
        &lt;li&gt;Oracle 12c or 19c&lt;/li&gt;
        &lt;li&gt;Maven 3.6.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OhE1Pbhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygmbkwywj36jxgi070p6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OhE1Pbhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygmbkwywj36jxgi070p6.png" alt="spring-boot-oracle-example-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me explain it briefly.&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;Tutorial&lt;/code&gt; data model class corresponds to entity and table &lt;em&gt;tutorials&lt;/em&gt;.&lt;br&gt;
– &lt;code&gt;TutorialRepository&lt;/code&gt; is an interface that extends &lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html"&gt;JpaRepository&lt;/a&gt; for CRUD methods and custom finder methods. It will be autowired in &lt;code&gt;TutorialController&lt;/code&gt;.&lt;br&gt;
– &lt;code&gt;TutorialController&lt;/code&gt; is a &lt;a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html"&gt;RestController&lt;/a&gt; which has request mapping methods for RESTful requests such as: &lt;em&gt;getAllTutorials&lt;/em&gt;, &lt;em&gt;createTutorial&lt;/em&gt;, &lt;em&gt;updateTutorial&lt;/em&gt;, &lt;em&gt;deleteTutorial&lt;/em&gt;, &lt;em&gt;findByPublished&lt;/em&gt;...&lt;br&gt;
– Configuration for Spring Datasource, JPA &amp;amp; Hibernate in &lt;strong&gt;application.properties&lt;/strong&gt;.&lt;br&gt;
– &lt;strong&gt;pom.xml&lt;/strong&gt; contains dependencies for Spring Boot and Oracle.&lt;/p&gt;

&lt;p&gt;For step by step and Github, please visit:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-hibernate-oracle/"&gt;https://bezkoder.com/spring-boot-hibernate-oracle/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;If you want to add Pagination to this Spring project, you can find the instruction at:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-pagination-filter-jpa-pageable/"&gt;Spring Boot Pagination &amp;amp; Filter example | Spring JPA, Pageable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To sort/order by multiple fields:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-data-sort-multiple-columns/"&gt;Spring Data JPA Sort/Order by multiple Columns | Spring Boot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Handle Exception for this Rest APIs is necessary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-controlleradvice-exceptionhandler/"&gt;Spring Boot @ControllerAdvice &amp;amp; @ExceptionHandler example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-restcontrolleradvice/"&gt;@RestControllerAdvice example in Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or way to write Unit Test for the JPA Repository:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-unit-test-jpa-repo-datajpatest/"&gt;Spring Boot Unit Test for JPA Repositiory with @DataJpaTest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More Practice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-rest-xml/"&gt;Spring Boot Rest XML example – Web service with XML Response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-file-upload/"&gt;Spring Boot Multipart File upload example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-pagination-sorting-example/"&gt;Spring Boot Pagination and Sorting example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>spring</category>
      <category>oracle</category>
      <category>java</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Node.js : Determining the line count of a text file</title>
      <author>Rajesh Kumar Yadav</author>
      <pubDate>Thu, 20 May 2021 04:19:29 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/node-js-determining-the-line-count-of-a-text-file-195l</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/node-js-determining-the-line-count-of-a-text-file-195l</guid>
      <description>&lt;p&gt;Create a new file as app.js and paste below code -&lt;/p&gt;

&lt;p&gt;app.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const readline = require('readline');
const fs = require('fs');
var file = 'path.to.file';
var linesCount = 0;
var rl = readline.createInterface({
 input: fs.createReadStream(file),
 output: process.stdout,
 terminal: false
});
rl.on('line', function (line) {
 linesCount++; // on each linebreak, add +1 to 'linesCount'
});
rl.on('close', function () {
 console.log(linesCount); // print the result when the 'close' event is called
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run below command -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get the line count of text file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>useAxios: React hook for any Axios call</title>
      <author>Kevin White</author>
      <pubDate>Thu, 20 May 2021 02:40:01 +0000</pubDate>
      <link>https://dev.to/kwhitejr/useaxios-react-hook-for-any-axios-call-12b7</link>
      <guid>https://dev.to/kwhitejr/useaxios-react-hook-for-any-axios-call-12b7</guid>
      <description>&lt;p&gt;&lt;code&gt;useAxios()&lt;/code&gt; is a React hook that simplifies async fetching and state management. &lt;a href="https://github.com/kwhitejr/use-axios"&gt;Source code&lt;/a&gt; and &lt;a href="https://codesandbox.io/s/use-axios-nydlk"&gt;live example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to suggest an improvement? I'm all ears! Please file an issue or open a PR!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAxios&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./use-axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axiosConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2500&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAxios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;axiosConfig&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoadingIcon&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isError&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorMsg&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useAxios&lt;/code&gt; is an &lt;a href="https://github.com/axios/axios"&gt;Axios&lt;/a&gt;-specific implementation of my generic &lt;a href="https://github.com/kwhitejr/use-async-func"&gt;useAsyncFunc&lt;/a&gt; React hook.&lt;/p&gt;

&lt;p&gt;One issue for async operations is when the return value is no longer required. For example, the user leaves the page (the requesting component is unmounted) or the user provides a new search query (the old search query's response is superfluous).&lt;/p&gt;

&lt;p&gt;You might see an error like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In these situations, we want to cancel the initial request. The browser Web API provides the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController"&gt;&lt;code&gt;AbortController&lt;/code&gt; interface&lt;/a&gt;; it is a controller object that allows you to abort one or more Web requests. Axios provides similar capability with the &lt;a href="https://github.com/axios/axios#cancellation"&gt;CancelToken&lt;/a&gt; class. CancelTokens are straightforward to implement if you are already using the Axios library. You read a little more about each implementation &lt;a href="https://medium.datadriveninvestor.com/aborting-cancelling-requests-with-fetch-or-axios-db2e93825a36"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useaxios"&gt;
  &lt;/a&gt;
  useAxios
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 *
 * @param {string} url      - The url to call
 * @param {object} [config] - The axios config object; defaults to GET, etc
 * @returns {state}         - { isLoading, isError, response }
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useAxios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// useReducer manages the local complex state of the async func hook's lifecycle.&lt;/span&gt;
  &lt;span class="c1"&gt;// See the source code for the full reducer!&lt;/span&gt;
  &lt;span class="c1"&gt;// NOTE: it is easy to modify or expand the reducer to fit your needs.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Declare Axios cancel token&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CancelToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Define the axios call&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callAxios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Begin with a clean state&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AXIOS_INIT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Straightforward axios call,&lt;/span&gt;
        &lt;span class="c1"&gt;// With cancel token inserted into config&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;cancelToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AXIOS_SUCCESS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Two options on error:&lt;/span&gt;
        &lt;span class="c1"&gt;// 1. If error is an axios cancel, simply return and move on&lt;/span&gt;
        &lt;span class="c1"&gt;// 2. For all other errors, assume async failure and dispatch failure action&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isCancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Canceled request.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AXIOS_FAILURE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// Invoke the defined axios call&lt;/span&gt;
    &lt;span class="nx"&gt;callAxios&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// On unmount, cancel the request&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Operation canceled.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// NOTE: here be dragon!&lt;/span&gt;
    &lt;span class="c1"&gt;// My instinct was include the axios config in this array, e.g. [url, config]&lt;/span&gt;
    &lt;span class="c1"&gt;// This causes an infinite re-render loop that I have not debugged yet :-/&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useAxios&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It is good to cancel superfluous requests so that they do not become memory leaks! I hope you find this example helpful.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>.NET Core Apps on Linux</title>
      <author>Bob Rundle</author>
      <pubDate>Thu, 20 May 2021 02:22:17 +0000</pubDate>
      <link>https://dev.to/bobrundle/net-core-apps-on-linux-1a0d</link>
      <guid>https://dev.to/bobrundle/net-core-apps-on-linux-1a0d</guid>
      <description>&lt;p&gt;One of the great benefits in working with .NET Core is knowing that your code will be cross platform.  In particular it will run on Linux.  This opens up a lot of possibilities.  But does it really run on Linux if you have never seen it run?  But even if you have seen it run, is it really working if you have never run the unit tests on Linux? In my way of looking at the world…no.&lt;/p&gt;

&lt;p&gt;So in this post I will lay out how to get your cross platform .NET Core apps running and tested on Linux in the most straightforward and efficient way.&lt;/p&gt;

&lt;p&gt;The approach is to develop code on Windows and test in Linux containers.  This is the best combination in my view.  So on your windows dev box the set up you need is Hyper-V and Docker.  Getting this setup right is not without its challenges which I will not get into here, but I am pleased to report that once you get this working it stays working and I have had this setup working for years now through all manner of Windows and Docker updates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJ5jk_a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brweedu7sge7y306idue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJ5jk_a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brweedu7sge7y306idue.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also needed are the dotnet CLI and VS Code for this optimum (in my view) setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---BS7yMog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u6yaq7nijmocw9q7w9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---BS7yMog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u6yaq7nijmocw9q7w9v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the code for this tutorial can be found at &lt;a href="https://github.com/bobrundle/dotnettolinux"&gt;https://github.com/bobrundle/dotnettolinux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll start by creating a simple console app that adds the numbers that appear as arguments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UiKzQIYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jj0w78pcsvc1uupp56bk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiKzQIYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jj0w78pcsvc1uupp56bk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In VS Code…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Oo1NEWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjwpd328hk8fd9txb605.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Oo1NEWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjwpd328hk8fd9txb605.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build and run on windows…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ra9tYluH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k47v6xyabgtidyo7hn66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ra9tYluH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k47v6xyabgtidyo7hn66.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is where it gets interesting.  Create a dockerfile for Linux deployment…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LrIAx6xW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9ugzo0qqnvqrjlcg78s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LrIAx6xW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9ugzo0qqnvqrjlcg78s.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build a Linux docker image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FVcR7NHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi7mu720acwqmf8asvfu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FVcR7NHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi7mu720acwqmf8asvfu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's try running it…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D4XLqEUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x22u6957zgkz0qaogumr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D4XLqEUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x22u6957zgkz0qaogumr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oops.  ICU stands for Internationalization components for Unicode which is used to handle culture dependent APIs.  .NET 5.0 requires ICU by default and it is not available by default on Linux.  For a simple app such as ours, the easiest thing to do is disable globalization support.&lt;/p&gt;

&lt;p&gt;To disable globalization support we need to add another property to our add.csproj project file…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Project Sdk="Microsoft.NET.Sdk"&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net5.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;InvariantGlobalization&amp;gt;true&amp;lt;/InvariantGlobalization&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets build and run again…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xUY7Hb-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azf33anzau163297e380.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xUY7Hb-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azf33anzau163297e380.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's add unit tests.  You test-first wingnuts will be very disappointed that I didn't write these first, but I am simply not a test first guy.  I could say more but need to stay focused. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GtkEmGvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fccwoaw6h5dq4v0hf7r4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtkEmGvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fccwoaw6h5dq4v0hf7r4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Need to add a project reference to add.csproj…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Project Sdk="Microsoft.NET.Sdk"&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net5.0&amp;lt;/TargetFramework&amp;gt;

    &amp;lt;IsPackable&amp;gt;false&amp;lt;/IsPackable&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.7.1" /&amp;gt;
    &amp;lt;PackageReference Include="xunit" Version="2.4.1" /&amp;gt;
    &amp;lt;PackageReference Include="xunit.runner.visualstudio" Version="2.4.3"&amp;gt;
      &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;
      &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
    &amp;lt;/PackageReference&amp;gt;
    &amp;lt;PackageReference Include="coverlet.collector" Version="1.3.0"&amp;gt;
      &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;
      &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
    &amp;lt;/PackageReference&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;ProjectReference Include="../add/add.csproj"/&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our unit tests…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;
using Xunit;
using add;
using System.IO;

namespace AddTests
{
    public class ProgramTests
    {
        [Theory]
        [InlineData(new string[] {}, "0",0)]
        [InlineData(new string[] {"1","2","3"}, "6",0)]
        [InlineData(new string[] {"1","2","a"}, "",1)]
        [InlineData(new string[] {"1.1","2.2","3.3"}, "6.6",0)]
        [InlineData(new string[] {"-1e6","1e6"}, "0",0)]
        public void MainTest(string[] args0, string r0, int e0)
        {
            string outfile = Path.GetTempFileName();
            var outstream = File.CreateText(outfile);
            Console.SetOut(outstream);
            int e1 = Program.Main(args0);
            Console.Out.Close();
            string r1 = File.ReadAllText(outfile);
            Assert.Equal(e0, e1);
            if(e0 == 0)
            {
                Assert.Equal(r0 + Environment.NewLine,r1);    
            }
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build the unit tests and run them…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C6OHJt_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p2goo11142upz14brpi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C6OHJt_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p2goo11142upz14brpi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To run the unit tests in Linux we need to more than move binaries…we have to setup a development environment and build the code before running the tests.  To do this we need a Docker file in the parent directory to both code and test folders.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6tyQq6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ys831r34p98q0lrxvji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6tyQq6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ys831r34p98q0lrxvji.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Dockerfile…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM mcr.microsoft.com/dotnet/sdk:5.0

WORKDIR /src
COPY /add add
COPY /addtests addtests
WORKDIR /src/addtests

CMD ["dotnet","test"]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build and run on Linux…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yd4KkLo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wjqjudhkuhy6ffcrkp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yd4KkLo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wjqjudhkuhy6ffcrkp9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary-and-discussion"&gt;
  &lt;/a&gt;
  Summary and Discussion
&lt;/h2&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A simple Windows console app was created, built and run on Windows.&lt;/li&gt;
&lt;li&gt;The console app was built for Linux on Windows and run in a Linux container.&lt;/li&gt;
&lt;li&gt;A xUnit testing library was created to run tests against the console app.  It was built and run on Windows.&lt;/li&gt;
&lt;li&gt;The source for both the console app and the xUnit tests were built and run in a Linux container.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following questions about this approach come to mind...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why are you not a test-first guy?&lt;/strong&gt; My answer is too long to be considered here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your "unit tests" are actually integration tests!&lt;/strong&gt; This is semantics. What we can agree on is 100% code coverage is the gold standard of automated testing and this has been achieved in this example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about macOS?&lt;/strong&gt; You cannot run macOS containers on Windows.  You can only run macOS containers on Macs.  There might be a way to test all 3 platforms (Windows, Linux, macOS) on a Mac with containers.  I will experiment when I get a chance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why build in the Linux container?  Why not simply use a test runner to run the binaries?&lt;/strong&gt; Indeed, this is a good idea.  I simply don't know how to get this to work with xUnit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why not construct a CI/CD pipeline to build and test on Windows and Linux in the cloud?&lt;/strong&gt; Indeed, the next logical step. However, you still cannot reach macOS in the cloud.&lt;/p&gt;

&lt;p&gt;I hope what I have done is useful and addresses some questions you might have.  I spent about a day researching the various aspects of this problem. I came to this issue when I was designing a command line tool for Windows and came to realize that the tool would be useful on Linux.  Then I began to look into building and testing on Linux and discovered the approach was not well documented and not straight-forward and so suggested a post to capture the learnings.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>docker</category>
      <category>linux</category>
    </item>
    <item>
      <title>Implementing Redux pattern </title>
      <author>Jucian0</author>
      <pubDate>Thu, 20 May 2021 02:03:36 +0000</pubDate>
      <link>https://dev.to/jucian0/implementing-redux-pattern-1oj0</link>
      <guid>https://dev.to/jucian0/implementing-redux-pattern-1oj0</guid>
      <description>&lt;p&gt;If you are a software developer and aren't in another world, you have probably read or heard something about Redux. Today Redux is very popular, but not as much as some years ago. The first time that I heard about React, the second word was always Redux, "How to init with react and redux", "Todo app with react redux", and another hundred names. Even though Redux is not as popular today as in the past, I think it's very helpful that you know how Redux works and how you can create a simple version of this famous pattern. &lt;/p&gt;

&lt;p&gt;Redux is a pattern that provides a way to manage your application state. Redux pattern increased in popularity when front-end applications became more complex, and when we started to develop applications with many components, sharing the same state. You can find a lot of libraries that implement this, we have Redux for React and RXJS for Angular. &lt;/p&gt;

&lt;p&gt;Since Redux is very popular I assume that you know how it works and how to use it, but I will provide some basic information about it. If you want to know more, however, I recommend that you read the documentation about the patterns and how some libraries do this. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-explanations"&gt;
  &lt;/a&gt;
  Redux explanations
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actions - basically actions are like instructions that drive your intentions, you need a &lt;code&gt;type&lt;/code&gt; that describes what you want to do, and if you need some data to perform your intentions, it's necessary to provide a &lt;code&gt;payload&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Push up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reducers - reducers are pure functions that perform your intentions in the application state, that function receives the current state and the action, that is running. For every action, you should provide a reaction in your reducer.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// do something&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// do another thing&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store - I like to think about Store as a place where you have the real state, and it provides the resources to get the state &lt;code&gt;store.getState()&lt;/code&gt;, and register listeners.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#our-redux-api"&gt;
  &lt;/a&gt;
  Our Redux API
&lt;/h2&gt;

&lt;p&gt;This is how we will initiate our Store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our redux implementation has some public methods and private method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dispatch() - This method will receive the instruction that will drive how the state will be changed.&lt;/li&gt;
&lt;li&gt;subscriber() - With this method, we can subscribe listeners to know when the application state is changed. These listeners will be simple functions that can receive the new state changed by argument.&lt;/li&gt;
&lt;li&gt;value() - These methods will return the current state of the application.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;

    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need another method to perform the state changes, &lt;code&gt;reducer&lt;/code&gt; is the last method that we need in our implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, we need more than methods in our redux implementation, we need a property to hold the state application, &lt;code&gt;state&lt;/code&gt; and another to hold the reducers application and one more to hold the subscribers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:{[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:{[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#constructor"&gt;
  &lt;/a&gt;
  Constructor
&lt;/h3&gt;

&lt;p&gt;Let's go ahead. You may notice that I'm using typescript, but feel free to use javascript. Our first step is to write the constructor method, &lt;code&gt;constructor&lt;/code&gt; needs to receive the reducers and the initialState, so let's do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we assign &lt;code&gt;reducers&lt;/code&gt; and &lt;code&gt;initialState&lt;/code&gt; to &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;reducers&lt;/code&gt; properties.&lt;/p&gt;

&lt;p&gt;Using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;todoReducer&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({...})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;todoReducer&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:[]}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  Reduce
&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, reduce will perform and return the state changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we iterate reducers registered in Store and invoke every reducer passing by argument the current state and the current action. After that, we save the result returned by every reducer in the correct state property. Finally, we return to the new state. Since the reduce method is a private method it will not be available to use out of class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#subscribe"&gt;
  &lt;/a&gt;
  Subscribe
&lt;/h2&gt;

&lt;p&gt;Subscribe will allow us to have many state change listeners, so let's implement it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;thi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we received a function that will be invoked when some changes happen in the state, &lt;code&gt;subscriber&lt;/code&gt; will add the &lt;code&gt;fn&lt;/code&gt; argument into &lt;code&gt;subscribers&lt;/code&gt; property. The last part of this method will return another function that when invoked will remove the &lt;code&gt;fn&lt;/code&gt; function passed by argument. The function that will be returned knows the &lt;code&gt;subscriber&lt;/code&gt; method context, for this reason, we can compare &lt;code&gt;fn&lt;/code&gt; argument with every subscriber registered in our Store and decide who needs to be removed.&lt;/p&gt;

&lt;p&gt;Using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// do something&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;// wii remove callback function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dispatch"&gt;
  &lt;/a&gt;
  Dispatch
&lt;/h3&gt;

&lt;p&gt;Let's implement this method and learn how it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;reduce&lt;/code&gt; method is invoked it returns a new state and assigns it to &lt;code&gt;state&lt;/code&gt; property of the store. After that, we iterate &lt;code&gt;subscribers&lt;/code&gt; property and invoke every subscribed function passing the new state by argument, this way every listener will be notified with the new application state.&lt;/p&gt;

&lt;p&gt;Using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Push up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#value"&gt;
  &lt;/a&gt;
  Value
&lt;/h3&gt;

&lt;p&gt;Our last method implementation will be a get method that will return us the current state, let's implement it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-code"&gt;
  &lt;/a&gt;
  Final code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we have a simple implementation of redux, this implementation does not reflect any redux library implementation, it's just a possible implementation of redux. The principal goal of this post is to show you a simple way of how redux works. If you are more interested in a functional approach, let me know and we can address it in the next post.&lt;/p&gt;

&lt;p&gt;I hope that you enjoyed this post. Stay Safe!!!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>redux</category>
      <category>react</category>
    </item>
    <item>
      <title>Minimum Effective Development: What You Need to Know Before You Start Learning Code</title>
      <author>Michael Caveney</author>
      <pubDate>Thu, 20 May 2021 00:38:11 +0000</pubDate>
      <link>https://dev.to/dylanesque/what-you-need-to-know-before-you-start-learning-code-nc9</link>
      <guid>https://dev.to/dylanesque/what-you-need-to-know-before-you-start-learning-code-nc9</guid>
      <description>&lt;p&gt;Welcome to the first entry in Minimum Effective Development, a blog series focused on sorting out signal from noise when it comes to learning front-end software development. There's a LOT to potentially learn out there, and I'm going to guide you towards what you really need to know when you're getting started! &lt;/p&gt;

&lt;p&gt;Taking the self-directed path to learning code is difficult for a lot of reasons, not the least of which are &lt;a href="https://en.wikipedia.org/wiki/There_are_known_knowns"&gt;unknown unknowns&lt;/a&gt;. You can spend a lot of time unnecessarily spinning your wheels getting good at software development: hours, days, weeks, or you can start learning with a framework to be organized and efficient. To help you do just that, I've put together this guide to prepare you to learn to code the right way!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-how-to-learn-efficiently"&gt;
  &lt;/a&gt;
  Learn How to Learn Efficiently
&lt;/h1&gt;

&lt;p&gt;Learning efficiently is a great skill to have regardless of your field of study, but the wide array of knowledge and fluid nature of web development makes the most efficient approach to learning much more of a must than a nice-to-have. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VKmJD5FH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nsiakzkb3x4ft1p0v95g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VKmJD5FH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nsiakzkb3x4ft1p0v95g.png" alt="Cover image of Learning to Learn course"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My recommendation here is to go through Andrei Neagoies's Learning to Learn course (available on both &lt;a href="https://www.udemy.com/course/learning-to-learn-efficient-learning-zero-to-mastery/"&gt;Udemy&lt;/a&gt; and his &lt;a href="https://zerotomastery.io/"&gt;Zero To Mastery platform&lt;/a&gt;. Here, Andrei breaks down techniques and mindsets that will enable you to learn as efficiently as possible while wasting the least amount of time. Andrei is very good about referencing where he got certain tactics from, so there's a large and helpful bibliography that comes with this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#build-effective-habits"&gt;
  &lt;/a&gt;
  Build Effective Habits
&lt;/h1&gt;

&lt;p&gt;Coding can (and should be fun), but it is work, and it takes effort to engage in certain types of practice or practicing at all when you'd rather be doing something else. If I could only recommend one book to the brand-new coder, it would be James Clear's indispensable &lt;a href="https://jamesclear.com/atomic-habits"&gt;&lt;em&gt;Atomic Habits&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r6EnQlrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4au4usz906h4phxy3znm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r6EnQlrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4au4usz906h4phxy3znm.png" alt="Cover of Atomic Habits"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The long and short of it is that you want to make good habits automatic and easy to perform, and bad habits more difficult. I was good about practicing code before I read this, but I got a lot better at the right kind of practice and got WAY more consistent with exercise, which really helped weather a lot of pandemic stress. Absolutely, positively, do not begin learning to code without reading this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#map-it-out"&gt;
  &lt;/a&gt;
  Map It Out
&lt;/h1&gt;

&lt;p&gt;Part of effective learning is understanding the scope of the knowledge area you're learning, and for learning to code, there are various &lt;a href="https://roadmap.sh/"&gt;developer roadmaps&lt;/a&gt;. These roadmaps have been created to illustrate what goes into these technologies and provide some guidance into what methodologies/libraries/etc to prefer when you have a choice between several of them. I'll be making heavy use of these roadmaps (particularly the front-end roadmap) in future blog entries. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-your-goals-and-track-your-progress"&gt;
  &lt;/a&gt;
  Set Your Goals and Track Your Progress
&lt;/h1&gt;

&lt;p&gt;Learning to code can be complicated and overwhelming at first, especially on the front-end. One way you can help yourself stay focused on effective action is to use &lt;a href="https://en.wikipedia.org/wiki/SMART_criteria"&gt;SMART criteria&lt;/a&gt; to outline what you're working on at any particular moment. &lt;/p&gt;

&lt;p&gt;When it comes to tracking that progress, you'll want to avail yourself of &lt;a href="https://trello.com/en-US"&gt;Trello&lt;/a&gt; or &lt;a href="https://dev.to/aellon/agile-scrum-kanban-oh-my-116d"&gt;some other type of kanban board&lt;/a&gt;. I don't know what it is about this, but there was a shocking "before" and "after" in my consistency and productivity after making regular use of Trello in my day-to-day.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#write-it-down"&gt;
  &lt;/a&gt;
  Write It Down
&lt;/h1&gt;

&lt;p&gt;Studies have shown that physically taking notes with pen/pencil and paper leads to better retention, so strongly consider doing just that. Additionally, recording what you're learning gives you the opportunity to rephrase it in your own words, forcing you to think critically about the topic.&lt;/p&gt;

&lt;p&gt;What I personally do is maintain a folder of Markdown files on my desktop that I use to takes notes on a variety of topics, which I save to &lt;a href="https://github.com/dylanesque/Cheatsheets"&gt;Github&lt;/a&gt;. I make this tradeoff because it's easier for me to organize, update, and use as a reference for blog posts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#understand-that-it-wont-happen-immediately"&gt;
  &lt;/a&gt;
  Understand That It Won't Happen Immediately...
&lt;/h1&gt;

&lt;p&gt;There's a game I like to play with articles that have titles like "I Learned to Code and Got A Job in 6 Months!!!" I call "find the caveat", where I look for the part where they were previously a lawyer or stockbroker or some other high-paying job, or that their spouse supported them while they did nothing but code for months on end. I mention this because while these stories can be inspiring, they're not very realistic or reflective of the norm. The simple truth that web development has gotten a lot more complicated since that time, and an effective early career dev now has to have a much more varied toolkit now than they did 5+ years ago, when knowing HTML, CSS, and some basic JavaScript was enough. Because of this, I want you to...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#be-patient-with-yourself"&gt;
  &lt;/a&gt;
  ...Be Patient With Yourself
&lt;/h1&gt;

&lt;p&gt;Everybody is different and has different strengths, weaknesses, and constraints. You might have work or family obligations. You might be recovering from an injury or illness, or living with a disability of some kind. You shouldn't compare yourself or your progress to others because everybody's circumstances are so different. As countless others have said before me, this is a marathon, not a sprint, and you need to embrace that mindset and be good to yourself while you're working towards your goals.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learning-how-and-where-to-ask-for-help"&gt;
  &lt;/a&gt;
  Learning How and Where to Ask For Help
&lt;/h1&gt;

&lt;p&gt;This can be tricky to get a feel for at first, but there is a time and a place for struggling in learning. Some struggle IS essential for truly understanding new concepts, but too much frustration isn't a good thing. This is something I learned via trial and error in my first production job, and the way I approach it is something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Is this struggle helping me understand the thing I'm struggling with better? This is good struggle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Am I banging my head against the wall and have circled back to solutions that I've already tried and didn't work, or have I spent more than 30 minutes on a problem with no forward motion whatsoever? This is bad struggle and you need to get a second pair of eyes on the issue ASAP.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it comes to where to look for help, this can vary a lot from technology to technology: When I do blog entries on specific technologies, I'll go into recommended sources, but I will note that you'll generally want to favor sources that are active and real-time based, over forums and message boards. If there's an official Slack or Discord channel for the technology in question, you'll want to be on there.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope this advice helps you: My goal with a lot of my blog entries to help people avoid some of the mistakes that I made when I was first learning to code, and I'll be going into more detail regarding how to approach specific technologies in the future, and I hope to see you there!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>(Realistic) List of Web Dev Resources 💻🚀</title>
      <author>Maureen T'O </author>
      <pubDate>Thu, 20 May 2021 00:25:58 +0000</pubDate>
      <link>https://dev.to/maureento8888/realistic-list-of-web-dev-resources-253c</link>
      <guid>https://dev.to/maureento8888/realistic-list-of-web-dev-resources-253c</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@lucabravo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Luca Bravo&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/code?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I've been finding a lot of articles on DEV lately that garner a TON of reactions, especially ones that provide lists of more than 20 to 50+ resources!&lt;/p&gt;

&lt;p&gt;That's a lot. 🤯&lt;/p&gt;

&lt;p&gt;A lot of choice paralysis, too.&lt;/p&gt;

&lt;p&gt;In reality, it's not about how popular the resources are, or how many you can add to your archive list (where you may not even pick up to read). Instead, it's about &lt;strong&gt;what problems these resources solve&lt;/strong&gt; for you that makes a list successful. So, I will do just that!&lt;/p&gt;

&lt;p&gt;Keep in mind these are &lt;strong&gt;my own opinions&lt;/strong&gt; and by all means, if you like those really long resource lists, do use them. This list is meant to be accessible, cost-effective, and focused! &lt;strong&gt;These are also resources that have been successful for my learning&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;My resources are all &lt;strong&gt;multimodal ways of learning&lt;/strong&gt; (audiovisual, reading) - some may not be fully accessible by nature. At the end of the day, you know what works best for you!&lt;/p&gt;

&lt;p&gt;Lastly, my resources are &lt;strong&gt;NOT hundreds of hours long&lt;/strong&gt;! I studied all I have of web development throughout the last year of my &lt;strong&gt;full-time undergraduate degree&lt;/strong&gt;, so when it comes to time-management, I've got you covered ☺️&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#skip-links"&gt;
  &lt;/a&gt;
  Skip links 👇🏼
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#html-css"&gt;HTML / CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vuejs-nuxtjs"&gt;Vue.js / Nuxt.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#version-control"&gt;Version Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#responsive-web-design"&gt;Responsive Web Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#forums"&gt;Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#html-css"&gt;
  &lt;/a&gt;
  HTML / CSS
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Absolute must if you're going into web development, and 100% needed for frontend development. These two are the builders of the visual front of the web&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flaviocopes.com"&gt;Flavio Copes&lt;/a&gt;' &lt;a href="https://flaviocopes.com/page/html-handbook/"&gt;HTML handbook&lt;/a&gt; [FREE] - a true, beginner-friendly, comprehensive, and easy read that gets you up and running with HTML quickly&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flaviocopes.com"&gt;Flavio Copes&lt;/a&gt;' &lt;a href="https://flaviocopes.com/page/css-handbook/"&gt;CSS handbook&lt;/a&gt; [FREE] - a comprehensive CSS resource and easy read&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://scrimba.com"&gt;Scrimba&lt;/a&gt;'s &lt;a href="https://scrimba.com/learn/cssgrid"&gt;CSS Grid&lt;/a&gt; - what I used to nail down CSS Grid, and revisit it&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UClb90NQQcskPUGDIXsQEz5Q"&gt;Dev Ed&lt;/a&gt;'s &lt;a href="https://youtu.be/gXkqy0b4M5g"&gt;Responsive Navigation Bar Tutorial | HTML CSS JAVA...&lt;/a&gt; [FREE] - Don't ask... Just watch until 13:00 mins. I didn't understand HTML hierarchy until the 13 mins! ☺️&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Literally the language of the modern web. You'll definitely need this to learn the whole ecosystem of the web, from Node.js to package bundlers like Webpack&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://codewithmosh.com"&gt;Code with Mosh&lt;/a&gt;'s &lt;a href="https://codewithmosh.com/p/javascript-basics-for-beginners"&gt;JavaScript for Beginners&lt;/a&gt; - ALL the basics of JS in bitesized, audiovisual format&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codewithmosh.com"&gt;Code with Mosh&lt;/a&gt;'s &lt;a href="https://codewithmosh.com/p/object-oriented-programming-in-javascript"&gt;JavaScript OOP&lt;/a&gt; - everything you need to know about JS OOP in quick, bite-sized and well-explained audiovisual format&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org"&gt;freeCodeCamp.org&lt;/a&gt;'s &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;JavaScript Algorithms and Data Structures &lt;/a&gt; [FREE] - to practice JS you've learned, and learn DS &amp;amp; A&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vuejs-nuxtjs"&gt;
  &lt;/a&gt;
  Vue.js / Nuxt.js
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you're learning Vue.js, these are the BEST resources I've stuck with, from basics to advanced&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Vue Mastery has courses on Nuxt.js!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flaviocopes.com"&gt;Flavio Copes&lt;/a&gt;' &lt;a href="https://flaviocopes.com/page/vue-handbook/"&gt;Vue.js 2 Handbook&lt;/a&gt; [FREE] - great to get you started in Vue 2 without mismatched YouTube tutorials (syntax doesn't differ between v2 and v3)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.vuemastery.com"&gt;Vue Mastery&lt;/a&gt;'s courses - choose from &lt;a href="https://www.vuemastery.com/courses-path/beginner"&gt;beginner&lt;/a&gt;, &lt;a href="https://www.vuemastery.com/courses-path/intermediate"&gt;intermediate&lt;/a&gt;, and &lt;a href="https://www.vuemastery.com/courses-path/advanced"&gt;advanced&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://debbie.codes"&gt;Debbie O'Brien&lt;/a&gt;'s &lt;a href="https://www.youtube.com/c/DebbieOBrien"&gt;YouTube&lt;/a&gt; [FREE] - for AWESOME &lt;a href="https://nuxtjs.org"&gt;Nuxt.js&lt;/a&gt; tidbits!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#version-control"&gt;
  &lt;/a&gt;
  Version Control
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Must have if you're to work in teams / companies, or track versions of your projects&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.codecademy.com"&gt;Codecademy&lt;/a&gt;'s &lt;a href="https://www.codecademy.com/learn/learn-git"&gt;Learn Git&lt;/a&gt; course&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#responsive-web-design"&gt;
  &lt;/a&gt;
  Responsive Web Design
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The most necessary skillset you can add to your web design / development career&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.kevinpowell.co"&gt;Kevin Powell&lt;/a&gt;'s &lt;a href="https://courses.kevinpowell.co/conquering-responsive-layouts"&gt;Conquering Responsive Layouts&lt;/a&gt; course - BEST and most comprehensive course on responsive web design.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.samanthaming.com"&gt;Samantha Ming&lt;/a&gt;'s &lt;a href="https://www.samanthaming.com/flexbox30/"&gt;Flexbox 30&lt;/a&gt; [FREE] - the one flexbox resource I stuck with through visually engaging and adorable examples of flexbox in action.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#forums"&gt;
  &lt;/a&gt;
  Forums
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;In learning anything, you'll almost always get by with a little help from friends and fellow classmates. Take a quick coffee break ☕️ and hop on these places for some help&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com"&gt;StackOverFlow&lt;/a&gt; - I don't find  sO helpful for asking (am I the only one that gets shamed for a slightly unclear question? 🥲). Instead, I use SO for finding issues that others have answers for.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://discord.com/invite/HBherRA"&gt;Vue Land Discord&lt;/a&gt; Code Help channels&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://discord.com/invite/ps2h6QT"&gt;Nuxt.js Discord&lt;/a&gt; Help channels&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Alrighty, that's it for today. This post will be updated as I find new info. 2 out of 2 posts today done! ✅&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My first post today if you want to read:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/maureento8888" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k9iK2LNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--AGIbGBya--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/300766/109fc338-716f-4285-b336-aa29c8eeaeea.png" alt="maureento8888 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/maureento8888/how-to-create-named-routes-in-nuxt-js-4i94" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to create named routes in Nuxt.js&lt;/h2&gt;
      &lt;h3&gt;Maureen T'O  ・ May 19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#nuxt&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;p&gt;It's about time I collected all my resources I've &lt;strong&gt;successfully&lt;/strong&gt; learned from into a list so it can be helpful to others! My rule of thumb is I don't learn from the most popular teachers like Wes Bos or Traversy Media (Brad Traversy), even though I know how amazing they are ❤️&lt;/p&gt;

&lt;p&gt;This way, I don't force myself into learning from popular teachers even when the teaching style doesn't work for me 🌟&lt;/p&gt;

&lt;p&gt;This way of learning web dev has really helped me reduce anxiety (longggg lists of 50+ resources scares me 😬), and helps me focus rather than suffering from &lt;a href="https://en.wikipedia.org/wiki/Shiny_object_syndrome"&gt;"shiny object syndrome"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have you had any resources you stick by? What learning style works for you? Drop them in the comments below!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How To Optimize for Change</title>
      <author>swyx</author>
      <pubDate>Thu, 20 May 2021 00:16:31 +0000</pubDate>
      <link>https://dev.to/swyx/how-to-optimize-for-change-a2n</link>
      <guid>https://dev.to/swyx/how-to-optimize-for-change-a2n</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was originally published on &lt;a href="https://www.freecodecamp.org/news/how-to-optimize-for-change-software-development/"&gt;FreeCodeCamp&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Imagine you worked at Magic Money Corp, which runs on just three lines of JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;collect underpants&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;profit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// $$$!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now imagine something's wrong with the left phalange and we need to take &lt;code&gt;doStuff&lt;/code&gt; down for maintenance. What happens if you temporarily comment out the second line?&lt;/p&gt;

&lt;p&gt;Oh no! &lt;code&gt;profit()&lt;/code&gt; is erroring all over the place. You've broken our magic money machine! To solve this, you would now have to read through the entire source code of &lt;code&gt;doStuff&lt;/code&gt; to understand what it does and replace critical code for &lt;code&gt;profit&lt;/code&gt; to function. &lt;/p&gt;

&lt;p&gt;Maybe it's better to just leave &lt;code&gt;doStuff&lt;/code&gt; there... we don't &lt;em&gt;need&lt;/em&gt; a functioning phalange right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When we are afraid of making changes to our code, it starts to ossify and bloat.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now let's imagine if we had built Magic Money Corp on immutable data structures instead (or used a functional language):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ImmutableMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;collect underpants&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;profit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// $$$!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It &lt;em&gt;looks&lt;/em&gt; the same, but now I can remove &lt;code&gt;doStuff&lt;/code&gt;, and have no fear of breaking Magic Money Corp! &lt;/p&gt;

&lt;p&gt;I've been obsessed with Dan Abramov's concept of &lt;a href="https://overreacted.io/optimized-for-change/"&gt;Optimizing for Change&lt;/a&gt; since he wrote about it two years ago. It clearly articulates a core design principle of React (the rest are &lt;a href="https://reactjs.org/docs/design-principles.html"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/reactjs/react-basic"&gt;here&lt;/a&gt;). For me, it is one of &lt;a href="https://twitter.com/swyx/status/1383516418205835264"&gt;the 7 lessons that will outlive React&lt;/a&gt; that I now try to apply everywhere else.&lt;/p&gt;

&lt;p&gt;The main question it doesn't answer: &lt;em&gt;how&lt;/em&gt; exactly do you optimize for change?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Plan for Common Changes&lt;/li&gt;
&lt;li&gt;Use Simple Values&lt;/li&gt;
&lt;li&gt;Minimize Edit Distance&lt;/li&gt;
&lt;li&gt;Catch Errors Early&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-optimize-for-change"&gt;
  &lt;/a&gt;
  Why Optimize for Change
&lt;/h2&gt;

&lt;p&gt;First, an obligatory explanation of this idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hard-to-delete code drives out easy-to-delete code over time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Many layers of bandaids over hard-to-delete code causes technical mummification&lt;/li&gt;
&lt;li&gt;Therefore we must try to optimize for change from the earliest design&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The inspiration for this came from "Easy-to-replace systems tend to get replaced with hard-to-replace systems" (&lt;a href="https://twitter.com/cramforce/status/1139925981051801600"&gt;&lt;em&gt;Malte Ubl&lt;/em&gt;&lt;/a&gt;) and "Write code that is easy to delete, not easy to extend" (&lt;a href="https://programmingisterrible.com/post/139222674273/how-to-write-disposable-code-in-large-systems"&gt;&lt;em&gt;tef&lt;/em&gt;&lt;/a&gt;)&lt;strong&gt;.&lt;/strong&gt; Economics fans will recognize this as &lt;a href="https://twitter.com/swyx/status/1286624921532080129"&gt;an application&lt;/a&gt; of &lt;a href="https://en.wikipedia.org/wiki/Gresham%27s_law"&gt;Gresham's Law&lt;/a&gt;. The idea is the same — a form of anti-entropy where &lt;em&gt;inflexibility&lt;/em&gt; increases, instead of disorder.&lt;/p&gt;

&lt;p&gt;It's not that we don't &lt;em&gt;know&lt;/em&gt; when our systems are hard-to-replace. It is that the most expedient response is usually to slap on a workaround and keep going. After one too many bandaids, our codebase mummifies. This is the consequence of not allowing room for &lt;em&gt;change&lt;/em&gt; in our original designs, a related (but distinct) idea to "technical debt" (which has its &lt;a href="https://redmonk.com/rstephens/2017/08/08/technical-debt/"&gt;own&lt;/a&gt; &lt;a href="https://twitter.com/jessitron/status/1123310331957145601"&gt;problems&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The reason we must allow for changes is that &lt;a href="https://stackoverflow.blog/2020/02/20/requirements-volatility-is-the-core-problem-of-software-engineering/"&gt;requirements volatility is a core problem of software engineering&lt;/a&gt;. We devs often fantasize that our lives would be a lot easier if product specs were, well, fully &lt;em&gt;specified&lt;/em&gt; upfront. But that's the &lt;a href="https://en.wikipedia.org/wiki/Spherical_cow"&gt;spherical frictionless cow&lt;/a&gt; of programming. In reality, the only constant is change. We should carefully design our abstractions and APIs acknowledging this fact.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0hLMXdKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1078j8opalnrzuu8p4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0hLMXdKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1078j8opalnrzuu8p4u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-for-common-changes"&gt;
  &lt;/a&gt;
  Plan for Common Changes
&lt;/h2&gt;

&lt;p&gt;Once you're bought in to the need to optimize for change, it is easy to go overboard and be overcome by analysis paralysis. &lt;em&gt;How&lt;/em&gt; do you design for &lt;em&gt;anything&lt;/em&gt; when EVERYTHING could change?!&lt;/p&gt;

&lt;p&gt;We could overdo it by, for example, putting abstract facades on every interface or turning every function asynchronous. It’s clear that doubling the size of your codebase in exchange for no difference in feature set is not desirable either.&lt;/p&gt;

&lt;p&gt;A reasonable way to draw the line is to design for small, common tweaks, and not worry about big, infrequent migrations. Hillel Wayne calls these &lt;a href="https://twitter.com/hillelogram/status/1189024161127190528"&gt;requirement perturbations&lt;/a&gt; — small, typical feature requests should not throw your whole design out of whack. &lt;/p&gt;

&lt;p&gt;For the probabilistically inclined, the best we can do is make sure our design adapts well to 1-3 "standard deviation" changes. Bigger changes than that are rare (by definition), and justify a more invasive rewrite when they happen.&lt;/p&gt;

&lt;p&gt;This way, we also avoid optimizing for change that may never come, which can be a significant source of software bloat and complexity.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Common changes can be accumulated with experience - the humorous example of this is &lt;a href="http://www.catb.org/jargon/html/Z/Zawinskis-Law.html"&gt;Zawinski's Law&lt;/a&gt;, but there are many far less extreme changes that are entirely routine and can be anticipated, whether by &lt;a href="https://www.swyx.io/preemptive-pluralization/"&gt;Preemptive Pluralization&lt;/a&gt; or &lt;a href="https://www.swyx.io/dev-guide-to-tech-strategy/"&gt;Business Strategy&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-simple-values"&gt;
  &lt;/a&gt;
  Use Simple Values
&lt;/h2&gt;

&lt;p&gt;Once we have constrained the scope of our ambitions, I like to dive straight into thinking about API design. The end goal is clear. In order to make code easy to change: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it has to first be easy to &lt;strong&gt;&lt;em&gt;delete...&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;which then makes it easier to &lt;strong&gt;&lt;em&gt;cut and paste&lt;/em&gt;&lt;/strong&gt;...&lt;/li&gt;
&lt;li&gt;which makes it easier to create and break apart &lt;strong&gt;&lt;em&gt;abstractions&lt;/em&gt;&lt;/strong&gt;...&lt;/li&gt;
&lt;li&gt;and so on, until you cover all routine maintenance tasks, including logging, debugging, testing and performance optimization.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rich Hickey is well known for preaching the &lt;a href="https://www.infoq.com/presentations/Value-Values/"&gt;Value of Values&lt;/a&gt; and &lt;a href="https://www.infoq.com/presentations/Simple-Made-Easy/"&gt;Simplicity&lt;/a&gt;. It is worth deeply understanding the implications of this approach for API design. Where you might pass class instances or objects with dynamic references, you could instead pass simple, immutable values. This eliminates a whole class of potential bugs (and unlocks logging, serialization and other goodies). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LH4xn2R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olrtcg8p9ress0j3klob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LH4xn2R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olrtcg8p9ress0j3klob.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Out of these requirements for simple uncomplected values, you can derive from first principles a surprising number of "best" practices — &lt;a href="https://www.youtube.com/watch?v=bFuRvcAEiHg"&gt;immutable programming&lt;/a&gt;, constraining state with a &lt;a href="https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell"&gt;functional core, imperative shell&lt;/a&gt;, &lt;a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/"&gt;parse don't validate&lt;/a&gt;, and &lt;a href="https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/"&gt;managing function color&lt;/a&gt;. The pursuit of simplicity isn't a cost-free proposition, but a variety of techniques from &lt;a href="https://twitter.com/jordwalke/status/959018527091904512"&gt;structural sharing&lt;/a&gt; to static analysis can help.&lt;/p&gt;

&lt;p&gt;Instead of memorizing a table of good/bad examples, the better approach is to understand that these are all instances of the same general rule: &lt;strong&gt;Complexity arises from coupling.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minimize-edit-distance"&gt;
  &lt;/a&gt;
  Minimize Edit Distance
&lt;/h2&gt;

&lt;p&gt;I mentally picture the braids from &lt;em&gt;Simple Made Easy&lt;/em&gt; now, whenever I think about complexity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--am9riybL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj20hvtks9erpk2y4wzp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--am9riybL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj20hvtks9erpk2y4wzp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you have multiple strings next to each other, you can braid them and knot them up. This is complexity — complexity is difficult to unwind. It is only when you have just one string that it becomes impossible to braid. &lt;/p&gt;

&lt;p&gt;More to the point, we should try to reduce our reliance on &lt;em&gt;order&lt;/em&gt; as much as possible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execution order — If I delete something on line 2, how easily can the developer tell if something in line 3 will blow up? How many changes do I need to make to fix it?&lt;/li&gt;
&lt;li&gt;Resolution order — If concurrent processes resolve out of order, how easily can I correct for or guarantee against race conditions?&lt;/li&gt;
&lt;li&gt;Filesystem order — If I move some code from one place to another, how many other files need to be edited to reflect this?&lt;/li&gt;
&lt;li&gt;Argument order — If I swap the position of some arguments, whether in a function call or a class constructor or a YAML config file, does the program implode?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;this is an ad hoc list; there are probably some big ones I'm missing here, please let me know&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can even quantify this complexity with a notion of "&lt;a href="https://en.wikipedia.org/wiki/Edit_distance"&gt;edit distance&lt;/a&gt;":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If I use multi-arity functions, then I cannot easily add or remove or rearrange parameters without then updating &lt;em&gt;all&lt;/em&gt; the callsites, or adding default params I don't actually want. Single arity functions/languages with named params require only essential updates and no more. (This isn't without tradeoffs of course — more discussion &lt;a href="https://twitter.com/swyx/status/1198632709834326021"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Turning a stateless component stateful with React (pre-Hooks) used to require edits/additions of 7 lines of code. With React Hooks, it just takes 1.&lt;/li&gt;
&lt;li&gt;Asynchrony and Data Dependency tend to propagate in a codebase. If one requirement changed and something at the bottom needed to be async (e.g. it needs one data fetch), I used to have to switch between at least 3 files and folders, and add reducers and actions and selectors with Redux to coordinate this. Better to decomplect parent-child relationships — a design goal prominent in &lt;a href="https://twitter.com/acdlite/status/969747179731533824"&gt;React Suspense&lt;/a&gt;, &lt;a href="https://twitter.com/swyx/status/1193112002413117440"&gt;Relay Compiler&lt;/a&gt; and &lt;a href="https://sophiebits.com/2020/01/01/fast-maintainable-db-patterns.html"&gt;GraphQL's dataloader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could even imagine a complexity measure similar to the CSS specificity formula - a complexity of &lt;code&gt;C(1,0,0,0)&lt;/code&gt; would be harder to change than &lt;code&gt;C(0,2,3,4)&lt;/code&gt;.  So optimizing for change would mean reducing the "edit distance" complexity profile of common operations.&lt;/p&gt;

&lt;p&gt;I haven't exactly worked out what the formula is yet, but we can &lt;em&gt;feel&lt;/em&gt; it when a codebase is hard to change. Development progresses slower as a result. But that's just the visible effect — because it isn't &lt;em&gt;fun&lt;/em&gt; to experiment in the codebase, &lt;strong&gt;novel ideas are never found&lt;/strong&gt;. The invisible cost of missed innovation is directly related to how easy it is to try stuff out or change your mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To make code easy to change, make it impossible to "braid" your code.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#catch-errors-early"&gt;
  &lt;/a&gt;
  Catch Errors Early
&lt;/h2&gt;

&lt;p&gt;As much as we can try to contain the &lt;a href="https://medium.com/background-thread/accidental-and-essential-complexity-programming-word-of-the-day-b4db4d2600d4"&gt;accidental&lt;/a&gt; complexity of our code by API design and code style, we can never completely eliminate it except for the most trivial programs. For the remaining essential complexity, we have to keep our feedback loops as short as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yh9Kkgpc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ft6xbdkm4mpzitumho5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yh9Kkgpc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ft6xbdkm4mpzitumho5i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IBM coined the term "&lt;a href="https://devops.com/shift-left-can-you-be-left-out/"&gt;Shift Left&lt;/a&gt;" after finding that &lt;a href="https://www.researchgate.net/publication/255965523_Integrating_Software_Assurance_into_the_Software_Development_Life_Cycle_SDLC"&gt;the earlier you catch errors, the cheaper they are to fix&lt;/a&gt;. If you arrange the software development lifecycle from left (design) to right (production), the idea is that if you shift your errors "left" then you'd save actual money by catching errors earlier (For more on this, see my discussion and sources in &lt;a href="https://dev.to/dx/language-servers-are-the-new-frameworks-1lbm"&gt;Language Servers are the New Frameworks&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In concrete terms this might translate to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unit tests that pinpoint what broke in your code when you refactor&lt;/li&gt;
&lt;li&gt;types that &lt;a href="https://css-tricks.com/types-or-tests-why-not-both/"&gt;codify the contracts&lt;/a&gt; between data and functions&lt;/li&gt;
&lt;li&gt;continuous deploys that take &lt;a href="https://stackoverflow.blog/2021/01/19/fulfilling-the-promise-of-ci-cd/"&gt;less than 15 minutes&lt;/a&gt; (you probably have easy wins to make in &lt;a href="https://twitter.com/housecor/status/1213093680501993472?s=20"&gt;frontend&lt;/a&gt; or &lt;a href="https://charity.wtf/2020/12/31/why-are-my-tests-so-slow-a-list-of-likely-suspects-anti-patterns-and-unresolved-personal-trauma/"&gt;backend&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/swyx/status/1115632067885375491"&gt;local development servers&lt;/a&gt; that emulate your cloud environment&lt;/li&gt;
&lt;li&gt;"live" values either provided by &lt;a href="https://dev.to/dx/language-servers-are-the-new-frameworks-1lbm"&gt;language servers&lt;/a&gt; or &lt;a href="https://quokkajs.com/"&gt;editor plugins&lt;/a&gt; or &lt;a href="https://replay.io/"&gt;replay recording&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The causality may be &lt;strong&gt;&lt;em&gt;bidirectional&lt;/em&gt;&lt;/strong&gt;. If you make it easier to change things, you will be able to make changes more frequently. It could work the other way too — because you expect to make frequent changes, you are more incentivized to make things easy to change. An extreme example of this involves not just code, but community - the longer a library (or language) stays on version 1, the harder the difficulty of switching to version 2, whereas ecosystems that regularly publish breaking versions (in exchange for clear improvements) seem to avoid stasis by sheer exposure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-caution-against-too-much-change"&gt;
  &lt;/a&gt;
  A caution against &lt;em&gt;too much&lt;/em&gt; change
&lt;/h2&gt;

&lt;p&gt;Any good idea turns bad when taken to the extreme. If you change things &lt;em&gt;too much&lt;/em&gt; you might be favoring &lt;em&gt;velocity over stability&lt;/em&gt; — and stability is very much a feature that your users and code consumers rely on. &lt;a href="https://www.hyrumslaw.com/"&gt;Hyrum's law&lt;/a&gt; guarantees that with sufficient users and time, even your &lt;em&gt;bugs&lt;/em&gt; will be relied on, and people will get upset if you fix them.&lt;/p&gt;

&lt;p&gt;That said, overall, I find Optimizing for Change a net win in my programming, product, and system design decisions and am happy that I've boiled it down to four principles: Plan for Common Changes, Use Simple Values, Minimize Edit Distance, and Catch Errors Early!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related-reads"&gt;
  &lt;/a&gt;
  Related reads
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.swyx.io/preemptive-pluralization/"&gt;Pre-emptive Pluralization is Probably Not Evil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twyx.ck.page/posts/swyx-io-7-lessons-to-outlive-react"&gt;7 Lessons to Outlive React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>learnings</category>
      <category>apidesign</category>
      <category>tech</category>
    </item>
  </channel>
</rss>
