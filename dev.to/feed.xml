<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 10 YouTube Shorts Video Ideas in 2021</title>
      <author>Aman Chourasia</author>
      <pubDate>Thu, 06 May 2021 16:44:27 +0000</pubDate>
      <link>https://dev.to/amanchourasia/top-10-youtube-shorts-video-ideas-in-2021-2bi8</link>
      <guid>https://dev.to/amanchourasia/top-10-youtube-shorts-video-ideas-in-2021-2bi8</guid>
      <description>&lt;p&gt;&lt;strong&gt;Top 10 YouTube Shorts Video Ideas in 2021&lt;/strong&gt; ‚Äì If you are following the news then you know that in some countries like the USA, India, YouTube has launched an option on the YouTube app where people can upload short videos.&lt;/p&gt;

&lt;p&gt;If you are not in India or the USA then you can still upload a short video up to 60 seconds but make sure to use the hashtag short of your YouTube video title or description to help the YouTube system and recommend your shorts videos across YouTube.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#top-10-youtube-shorts-video-ideas-in-2021"&gt;
  &lt;/a&gt;
  Top 10 YouTube Shorts Video Ideas in 2021
&lt;/h1&gt;

&lt;p&gt;Those of you who are not sure about where to start from and what types of video would you make the not to worry, today in this article I am going to share with you, Ten YouTube Shorts videos ideas. Excited? Let‚Äôs get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-quick-hacks"&gt;
  &lt;/a&gt;
  1. Quick Hacks
&lt;/h2&gt;

&lt;p&gt;We all servitude of time no matter what we do we can not stop time. We are in a busy world where we all like to do things as faster as could possible if can share interesting hacks that can be related to any topics that you are interested in or it can be trending topic that‚Äôs going on around the world and show same of tricks that viewers can follow which will save their time.&lt;/p&gt;

&lt;p&gt;This could also be sharing a piece of knowledge but more on the tutorial way instead of just speaking from of the camera.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-myth-busting"&gt;
  &lt;/a&gt;
  2. Myth Busting
&lt;/h2&gt;

&lt;p&gt;This is where you take a commonly held belief about your niche or your industry and you bust it an excellent example of, this would be if you‚Äôre doing something in more of the lifestyle or the organization's niches there are a lot of life hacks where they show hey if you do this, little cheap little thing it will make your life so much easier.&lt;/p&gt;

&lt;p&gt;If you could test those things and myth bust does this work does this not work within a 60 second short, people would eat that up next one amazing fact.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-amazing-facts"&gt;
  &lt;/a&gt;
  3. Amazing Facts
&lt;/h2&gt;

&lt;p&gt;The whole idea of ridleys believe it or not is built on this idea or the Guinness world records, you can use an example here of did you know that if you apply this certain leather conditioner to the seats in your car then they will actually last twice as long and show, make sure give some proof before and after.&lt;/p&gt;

&lt;p&gt;Not only that you can make any different types of facts videos, that you are interested in, do research on the internet, read books on that topic and tell those facts in shirt single video.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-story-time"&gt;
  &lt;/a&gt;
  4. Story Time
&lt;/h2&gt;

&lt;p&gt;This one I‚Äôm a little bit curious about because I haven‚Äôt seen this done so much but my thought here is this could be very good and that is storytime if you were to take 60 seconds and tell a compelling story it could actually even be an emotional story or an outrageous story or a humorous story, but if you took 60 seconds to say.&lt;/p&gt;

&lt;p&gt;Hey this happened to focus on only the key points and say this happened then this happened, then this is how I got out, this is where I am today or this is how they got out and this is where they, even you can read a storybook and tell the key points of that story or share what you have learned from reading that book or doing a particular thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-pure-entertainment"&gt;
  &lt;/a&gt;
  5. Pure Entertainment
&lt;/h2&gt;

&lt;p&gt;When I say pure entertainment, I mean creating videos that have only entertainment purposes, for example, you can make videos on what happened when your dog sow snow, or it playing outside taking videos for the only entertainment part and upload on YouTube shorts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-micro-reviews"&gt;
  &lt;/a&gt;
  6. Micro Reviews
&lt;/h2&gt;

&lt;p&gt;You have seen a lot of long YouTube reviews videos that‚Äôs can be any sort of products, foods, and other things. The micro review will be the short review of something that you have been using or you have bought something new. For example, if you want a restaurant now in 15 seconds you can explain the key difference or best thing about the previous restaurant you have wanted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-experiments"&gt;
  &lt;/a&gt;
  7. Experiments
&lt;/h2&gt;

&lt;p&gt;This one would do very well if for example you had a baking channel and you wanted to do experiments things that you make for example, what happens when I add a cup of baking soda to this cake recipe and you show here‚Äôs the experiment here‚Äôs the results.&lt;/p&gt;

&lt;p&gt;This would be so good if you were able to pull in ideas like that for whatever your subject is and look at it and ask yourself the question what would happen if I do this, or if I try this, and overall this will be interesting as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-comparing"&gt;
  &lt;/a&gt;
  8. Comparing
&lt;/h2&gt;

&lt;p&gt;If you are bought something new or if you want to compare your favorite football players vs your friends' favorite football player then you can simply do that just by adding some text animation, also if you are playing games with your family, friends then you can compare which is better at gaming and make short entertainment types of videos. &lt;/p&gt;

&lt;p&gt;You can apply this comparison in many different subjects depending on how you make the video. Hope you understood everything till now in this article ‚Äú Top 10 YouTube Shorts Video Ideas in 2021‚Äú.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-recycled-content"&gt;
  &lt;/a&gt;
  9. Recycled Content
&lt;/h2&gt;

&lt;p&gt;If you have already YouTube channel, where you have lost videos, now you can take the best part of those videos or just take the most interesting part from a single video and re-edit and upload it on YouTube. &lt;/p&gt;

&lt;p&gt;Please note do not copy other videos, if you are copying other videos then you are breaking YouTube policy, godliness, only use this trick on your own video and only when you don‚Äôt have any videos making ideas try not to use your own videos as well, lastly, remember to re-edit don‚Äôt just copy and paste the best of from your video.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-whats-inside-the-video"&gt;
  &lt;/a&gt;
  10. What‚Äôs inside the video
&lt;/h2&gt;

&lt;p&gt;If you are following YouTube for a long time then you have might be seen a lot of people creating what‚Äôs inside videos, for example, what‚Äôs inside expensive football, what‚Äôs inside this build, what‚Äôs inside my tech backpack, what‚Äôs inside my school backpack and other interesting videos that answer the question what is inside of something.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Hope this article ‚Äú Top 10 YouTube Shorts Video Ideas in 2021‚Äù was helpful for you and give you some ideas for making YouTube short videos. &lt;/p&gt;

&lt;p&gt;If you have any other making any different unique types of video or if you have any other YouTube shorts videos making suggestions, please don‚Äôt forget to share with us in the comments section below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://www.amanchourasia.in/2021/04/top-10-youtube-shorts-video-ideas-in-2021.html"&gt;Top 10 YouTube Shorts Video Ideas in 2021&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;a href="https://www.amanchourasia.in/2021/04/top-10-youtube-shorts-video-ideas-in-2021.html"&gt;https://www.amanchourasia.in/2021/04/top-10-youtube-shorts-video-ideas-in-2021.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ideas</category>
      <category>youtube</category>
      <category>shorts</category>
      <category>inspiration</category>
    </item>
    <item>
      <title>Answer this hardware hacking question to be featured on our podcast üëÄ </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 06 May 2021 16:37:48 +0000</pubDate>
      <link>https://dev.to/devteam/answer-this-hardware-hacking-question-to-be-featured-on-our-podcast-1e78</link>
      <guid>https://dev.to/devteam/answer-this-hardware-hacking-question-to-be-featured-on-our-podcast-1e78</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners ‚Äî and we like to feature the actual voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-is-the-coolest-hardware-hacking-project-youve-seen-or-done"&gt;
  &lt;/a&gt;
  &lt;strong&gt;‚ÄúWhat is the coolest hardware hacking project you've seen ‚Äî or done?‚Äù&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message üìû&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; üéô&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) üó£&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Wednesday, May 12th at Midnight, ET (9 PM PT, 4 AM UTC)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement üòâ
&lt;/h4&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
      <category>hardware</category>
    </item>
    <item>
      <title>How to Make Your First Open Source Contribution</title>
      <author>Ceora Ford</author>
      <pubDate>Thu, 06 May 2021 16:25:37 +0000</pubDate>
      <link>https://dev.to/codesandboxio/how-to-make-your-first-open-source-contribution-2oim</link>
      <guid>https://dev.to/codesandboxio/how-to-make-your-first-open-source-contribution-2oim</guid>
      <description>&lt;p&gt;Open source software is a huge part of the tech industry. Over and over, we hear about the power of open source. In &lt;a href="https://codesandbox.io/podcasts/codesandbox-podcast/elizabet-oliveira"&gt;episode 2 of The CodeSandbox Podcast&lt;/a&gt;, guest Elizabet Oliveira discussed open source and how it has impacted her career. This article will focus on getting you up and running as an open source contributor. Let's start by discussing why you should be interested in getting involved with open source. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-should-start-contributing-to-open-source-projects"&gt;
  &lt;/a&gt;
  Why you should start contributing to open source projects
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I think, yes [open source has helped me in my career], because I think it's easier to have interviews... And also I ended up talking in react conf in Las Vegas. And after that, I started talking in other conferences. And so I think it opened a lot of doors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We don't have an infinite amount of time and I'm sure there are tons of things on your to-do list. So you might be wondering why you should even be thinking about contributing to open source software. Is it really worth the time and effort?&lt;/p&gt;

&lt;p&gt;There are many benefits of contributing to open source projects. Assess your career and development goals and you might be able to accomplish them by contributing to open source software. Here's a brief and non-exhaustive list of some of the benefits of getting involved with open source:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Familiarize yourself with Git&lt;/li&gt;
&lt;li&gt;Gain experience&lt;/li&gt;
&lt;li&gt;Get attention from employers and recruiters&lt;/li&gt;
&lt;li&gt;Connect with other developers in the community&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#learn-git-and-github-basics"&gt;
  &lt;/a&gt;
  Learn Git and GitHub Basics
&lt;/h2&gt;

&lt;p&gt;Before you can go scouting for an open source project to work on, you should know the basics of Git and GitHub. You don't need to be an expert. But there are a few commands you should definitely know and understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git init&lt;/li&gt;
&lt;li&gt;git clone&lt;/li&gt;
&lt;li&gt;git checkout -b&lt;/li&gt;
&lt;li&gt;git branch&lt;/li&gt;
&lt;li&gt;git add&lt;/li&gt;
&lt;li&gt;git commit -m&lt;/li&gt;
&lt;li&gt;git merge&lt;/li&gt;
&lt;li&gt;git push&lt;/li&gt;
&lt;li&gt;git pull&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article won't discuss what these commands do or how they work. This is a checklist for you to measure your understanding. If you are unfamiliar with any of these Git commands, check out this helpful &lt;a href="https://www.git-tower.com/blog/git-cheat-sheet/"&gt;Git cheat sheet&lt;/a&gt;. To make sure you understand when and how to use each command, I suggest you create your own project locally using Git and push your project to GitHub. This will help you to become familiar with how Git and GitHub work together. Once you feel comfortable, you can move on to the next step. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-a-project-you-feel-comfortable-working-on"&gt;
  &lt;/a&gt;
  Find a project you feel comfortable working on
&lt;/h2&gt;

&lt;p&gt;This step may seem intimidating at first. Sometimes, you see a project that can seem complex or beyond your skill level. Some projects on GitHub are very robust and extensive. Not to mention the sheer number of open source projects on GitHub. How can you find something to work on that interests you and fits your skill level?&lt;/p&gt;

&lt;p&gt;There are a few ways to do this. You might have already found an open source product or project that you're interested in. If this is the case check for Issues with the &lt;strong&gt;good first issue&lt;/strong&gt; or &lt;strong&gt;first timers only&lt;/strong&gt; tag. These have been specifically marked for beginners or those with little open source experience. If you don't already have a project in mind, check &lt;a href="https://www.firsttimersonly.com/"&gt;First Timers Only&lt;/a&gt; and the &lt;a href="https://github.com/MunGell/awesome-for-beginners"&gt;Awesome for Beginners&lt;/a&gt; repository for more options. You can also ask other developers that you know or people in the community for suggestions.&lt;/p&gt;

&lt;p&gt;Once you find a project, there's still more you need to do to make meaningful contributions to a project. You'll need to know how to communicate when getting involved with a project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#communication-guidelines"&gt;
  &lt;/a&gt;
  Communication guidelines
&lt;/h2&gt;

&lt;p&gt;First and foremost, make sure that you're being polite and kind when talking to anyone involved with the project. This rule goes for all online communication. It's important to remember that maintainers are busy people and may have multiple responsibilities to tackle at one time. So be patient with them and always communicate respectfully.  &lt;/p&gt;

&lt;p&gt;Most projects will have communication guidelines specifically outlined for the project. These can usually the &lt;code&gt;README.md&lt;/code&gt; or &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; file. Make sure to read through the whole document and when the time comes to actually contribute your code to the project, be sure that you're following the structure and guidelines that maintainers have specified.&lt;/p&gt;

&lt;p&gt;Aside from reading and following the [CONTRIBUTING.md] guidelines, here are some general rules that you should try to adhere to when opening up issues, submitting pull requests (both of which will be covered soon), and any other communication between you and others involved in the project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you open an issue, be sure to thoroughly describe the bug or problem you've run into. Include information that will help maintainers or others to reproduce the bug locally on their end.&lt;/li&gt;
&lt;li&gt;It's also good to provide a possible solution if you have one in mind. This streamlines communication and will help maintainers to quickly determine whether or not your possible contribution fits the direction of the project.&lt;/li&gt;
&lt;li&gt;Try including comments in your code. Other people working on the project likely aren't familiar with your coding style or how you think. Including explanatory comments in your code will make your logic clear and thus, others will be able to quickly understand how your code works.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you have chosen the project you would like to work with and you've read the &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; and/or &lt;code&gt;README.md&lt;/code&gt; thoroughly, you're ready to actually contribute your code to the project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute-to-your-first-project"&gt;
  &lt;/a&gt;
  Contribute to Your First Project
&lt;/h2&gt;

&lt;p&gt;With your open source project already chosen, there are a few ways you can decide on what you would like to add to the project. You can work on pre-existing issues which can be found under the "Issues" tab on GitHub. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0qU5c68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8359uc3r4iif2317hng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0qU5c68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8359uc3r4iif2317hng.png" alt="Issues tab on GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When going through existing issues, you can look for things marked with the &lt;strong&gt;good first issue&lt;/strong&gt; or &lt;strong&gt;first timers only&lt;/strong&gt; tag (as previously mentioned). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ekABniNe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heks8ogy4b9cj3dwgbla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ekABniNe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heks8ogy4b9cj3dwgbla.png" alt="Good First Issue tag on an issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you find an issue that you're interested in, it may be useful to leave a comment on the issue outlining the solution you would like to implement. &lt;/p&gt;

&lt;p&gt;You can also create an issue based on a bug you've noticed or a feature you think needs to be improved. Do this by clicking the "New Issue" button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAMhAQgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/su1ptzg7h8anorakztgc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAMhAQgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/su1ptzg7h8anorakztgc.png" alt="New Issue button on GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you decide to open a new issue, be sure to provide relevant information that will allow maintainers to understand the bug you've run into and/or the feature you would like to add or improve and why. Remember the communication tips that were mentioned earlier. &lt;/p&gt;

&lt;p&gt;You can skip creating an issue and just submit a pull request. This will cut out some communication that goes with creating and submitting an issue. This means you can get right to work. But keep in mind that the project maintainer may decide to decline your pull request. So the work you've done may not be used in the end. If this is the route you'd like to go, you can move on to the following steps which will cover the process of submitting a pull request.&lt;/p&gt;

&lt;p&gt;Of all the options, I recommend working on a pre-existing issue. Make sure that no matter what route you decide to take, follow the guidelines set out by maintainers in the &lt;code&gt;README.md&lt;/code&gt; and &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-fork-your-project-of-choice"&gt;
  &lt;/a&gt;
  1. Fork your project of choice
&lt;/h3&gt;

&lt;p&gt;On GitHub, fork the repository you've chosen to work with. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6z9wKdcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sifejoxn8iqf557k5998.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6z9wKdcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sifejoxn8iqf557k5998.png" alt="Forking a repository on GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will create a copy of the project that will be saved under your GitHub account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ykEnLVJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ohjjhypi737x9d5dofe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ykEnLVJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ohjjhypi737x9d5dofe.png" alt="Copy of forked repository on your GitHub account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-clone-your-fork"&gt;
  &lt;/a&gt;
  2. Clone your fork
&lt;/h3&gt;

&lt;p&gt;To clone the fork you've created, click the "Code" button and copy the URL that's provided.&lt;/p&gt;

&lt;p&gt;In your terminal, change into the directory that you want to hold your forked project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;directory_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now clone your forked repository using git clone and the URL you just copied&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change into the folder that was just created. This will likely match the name of the project you forked. So if we're using the Sandpack repo as an example, that would be [sandpack]:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;project_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-create-a-branch-locally"&gt;
  &lt;/a&gt;
  3. Create a branch locally
&lt;/h3&gt;

&lt;p&gt;Before you start working, create a separate branch that will hold all the code that you add or edit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-make-your-changes"&gt;
  &lt;/a&gt;
  4. Make your changes
&lt;/h3&gt;

&lt;p&gt;Now you can finally code! You may also be editing copy, fixing grammatical errors, or improving documentation. Whatever changes you're looking to make, you can finally do it at this step!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-commit-and-push-your-changes"&gt;
  &lt;/a&gt;
  5. Commit and push your changes
&lt;/h3&gt;

&lt;p&gt;Before you commit and push your changes, make sure to run and test your code. Once your sure that your code is functioning as desired, you can commit and push your changes to GitHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'commit message here'&lt;/span&gt;
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin &lt;span class="nb"&gt;head&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-create-a-pull-request"&gt;
  &lt;/a&gt;
  6. Create a pull request
&lt;/h3&gt;

&lt;p&gt;Go to the original project on GitHub and you should see a prompt encouraging you to open a new pull request from the branch you created. Click the "Compare and pull request" button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0y9CXSk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4tnxgdu5uthhe1otcpg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0y9CXSk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4tnxgdu5uthhe1otcpg.png" alt="Compare and pull request button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you do this you will be shown a text editor. Fill this in with all the relevant information needed to understand the work you've just done. When you do this, click the "Create pull request" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jR67ycOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/768u0gie4xjvgi8csgkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jR67ycOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/768u0gie4xjvgi8csgkd.png" alt="Text editor and Create pull request button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you create your pull request, you'll have to wait on maintainers to respond. If the work you've done is error free and fits the scope and direction of the project, maintainers might merge your work into the project. They may request that you make changes to the work you've done. They might also decide to reject your pull request. If this happens, don't be discouraged. Maintainers will probably have a good reason for doing this and it's likely that will let you know. You can decide to work on another issue in the same project or you can find a new project to work with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Open source can seem intimidating. But once you dive into it, you'll see how rewarding it can be and you'll quickly reap the benefits. Here's a quick summary of the steps you need to take when you contribute to open source: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Thoroughly read through the &lt;code&gt;README.md&lt;/code&gt; and &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Fork the project repository&lt;/li&gt;
&lt;li&gt;Clone the project locally&lt;/li&gt;
&lt;li&gt;Create a feature branch for your work&lt;/li&gt;
&lt;li&gt;Once you finish make changes, commit and push your work&lt;/li&gt;
&lt;li&gt;Open a PR&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you've done this, you'll officially become an open source contributor! If you'd like to prepare yourself more before getting started or if you want to learn more about open source, here are some resources I found very useful. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.guide/how-to-contribute/"&gt;Open Source Guide - How to Contribute to Open Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.katherinempeterson.com/how-to-contribute-to-your-first-open-source-project"&gt;How to Contribute to Your First Open Source Project by Katherine Peterson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/open-source-etiquette-guidebook/"&gt;An Open Source Etiquette Guidebook by Sarah Drasner and Kent C. Dodds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/devteam/hacktoberfest-etiquette-for-contributors-ec6"&gt;Hacktoberfest Etiquette for Contributors by Christina Gorton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>coding</category>
    </item>
    <item>
      <title>Understanding Blockchain 101</title>
      <author>Rahul Sunil</author>
      <pubDate>Thu, 06 May 2021 16:01:25 +0000</pubDate>
      <link>https://dev.to/rahulsunil2/understanding-blockchain-101-5637</link>
      <guid>https://dev.to/rahulsunil2/understanding-blockchain-101-5637</guid>
      <description>&lt;p&gt;Everyone who‚Äôs anything about blockchain might‚Äôve heard about bitcoins, the most widely used application of blockchain. So maybe, understanding how bitcoins work may help you understand how blockchain works, but blockchain has a lot of other applications like supply chain management, secure sharing of data, etc.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bitcoin-the-form-of-currency-you-wish-you-had-invested-in-during-its-inception"&gt;
  &lt;/a&gt;
  Bitcoin - The form of currency you wish you had invested in during its inception.üòÑ
&lt;/h1&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Bitcoin(‚Çø)&lt;/strong&gt; is a cryptocurrency invented in 2008 by an unknown person or group of people using the name Satoshi Nakamoto. The currency began to use in 2009 when its implementation was released as open-source software. Bitcoin is a decentralized digital currency, without a central bank or single administrator, that can be sent from user to user on the peer-to-peer bitcoin network without the need for intermediaries. Transactions are verified by network nodes through cryptography and recorded in a public distributed ledger called a blockchain.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Okay so that's the definition from Wikipedia, I'll break it down for you in simple layman terms.&lt;/strong&gt;&lt;br&gt;
Bitcoin is a digital and global money system currency. It allows people to send or receive money across the internet, even to someone they don‚Äôt know or don‚Äôt trust. Money can be exchanged without being linked to a real identity.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-blockchain-is-different-from-the-traditional-banking-system-the-one-that-you-all-are-familiar-withhopefully"&gt;
  &lt;/a&gt;
  How Blockchain is different from the Traditional Banking System - The one that you all are familiar with(hopefullyü§û).
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kpr3Xj-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dh5qs5pmrantck4km5ie.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kpr3Xj-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dh5qs5pmrantck4km5ie.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Some of the few key features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Decentralization&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anonymity&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#decentralization"&gt;
  &lt;/a&gt;
  Decentralization
&lt;/h3&gt;

&lt;p&gt;This word is thrown around a lot in the crypto-currency world. All it means is that there is no central point of control(like Reserve Bank or govt. in India) in the Bitcoin network. The Bitcoin network is designed to be hosted and used by regular people. There is no Bitcoin company, there is no data centre.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#anonymity"&gt;
  &lt;/a&gt;
  Anonymity
&lt;/h3&gt;

&lt;p&gt;Users have an address that holds their balance, much like an email address. Balances are public, but there is no way to relate an address to a person unless they decide to give their address away. Here is an example Bitcoin address: &lt;code&gt;bc1qvw0ytfntx6zs0lfsruem6xwj0mewng523ktatp&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;I‚Äôm not going to confuse you with private key v/s public key gibberish in here. Bitcoin is the most secure network I‚Äôm aware of. Not a single Bitcoin in the last ten years has ever been fraudulently spent. There is nothing to hack. There is no central server that holds the balances, passwords, and usernames. In fact, every computer owns a copy of the balances, but each user holds their own keys that control those balances.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Here enters the hero of the show....&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#bitcoin-is-blockchain-but-the-viceversa-is-not-so-correct"&gt;
  &lt;/a&gt;
  Bitcoin is blockchain but the vice-versa is not so correct.
&lt;/h1&gt;

&lt;p&gt;In super-simple terms, a blockchain is a computer file for storing data. Or, to put it in more technical jargon, it‚Äôs an open, distributed ledger, which means the data contained within the blockchain is distributed across many computers and is therefore decentralised.&lt;br&gt;
&lt;strong&gt;Decentralised. Distributed. This sounds a bit like Bitcoin‚Ä¶&lt;/strong&gt;&lt;br&gt;
Well done Sherlock! Blockchain is the technology that underpins Bitcoin and it was developed specifically for Bitcoin. So, Bitcoin was the first example of blockchain in action and without blockchain, there would be no Bitcoin. That‚Äôs why the two names are so often used interchangeably.&lt;/p&gt;

&lt;p&gt;But that doesn‚Äôt make them the same, there are so many other applications for blockchain out there...&lt;/p&gt;

&lt;p&gt;Because blockchain and Bitcoin are so inextricably linked, it took people a long time to realise that blockchain actually has much wider applications beyond cryptocurrency networks. In fact, blockchain‚Äôs potential is so great that many people (myself included) believe the technology will revolutionise the way we do business, just like the internet did before it.&lt;/p&gt;

&lt;p&gt;Here are just a few examples of the wider applications of blockchain beyond Bitcoin and other cryptocurrencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Executing smart contracts.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintaining a shared, transparent system of record.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Auditing the supply chain.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Providing proof of insurance.&lt;/strong&gt;
I might be proving my points in a very technical way throwing all these jargons at you. So if you need a bit more clarity, Do your own research
(Blockchain Applications)[&lt;a href="https://blockgeeks.com/guides/blockchain-applications/"&gt;https://blockgeeks.com/guides/blockchain-applications/&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Still, confused?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Totally understandable, if a picture is worth a thousand words, then a 60fps 6-minute video with 21600 frames can say 21,600,000(roughly 21 million words, way more than what I wrote for sure)...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;I‚Äôm really sorry, I had to do that.üòÇüòÇüòÇüôè&lt;br&gt;
Check this video out for more clarity.&lt;/em&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SSo_EIwHSd4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;P.S. This is my first post on Dev.to, So I actually used one of my medium posts here. Please do give your feedback. Thanks a lot.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="https://rahulsunil.medium.com/understanding-blockchain-101-2acbac5e14b9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DtP7dCbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/56/56/1%2AnnJtpJhaFWovKz1C21He-A.jpeg" alt="Mr. Bing"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://rahulsunil.medium.com/understanding-blockchain-101-2acbac5e14b9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Understanding Blockchain 101. Everyone who‚Äôs anything about‚Ä¶ | by Mr. Bing | Medium&lt;/h2&gt;
      &lt;h3&gt;Mr. Bing „Éª &lt;time&gt;Jun 5, 2020&lt;/time&gt; „Éª 
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze5yh_2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        rahulsunil.Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>blockchain</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Responsive fix for the Next.js Image component</title>
      <author>Felix H√§berle</author>
      <pubDate>Thu, 06 May 2021 16:01:02 +0000</pubDate>
      <link>https://dev.to/felixhaeberle/responsive-fix-for-the-next-js-image-component-1351</link>
      <guid>https://dev.to/felixhaeberle/responsive-fix-for-the-next-js-image-component-1351</guid>
      <description>&lt;p&gt;Currently, &lt;code&gt;layout="responsive"&lt;/code&gt; requires you to set &lt;strong&gt;width&lt;/strong&gt; and &lt;strong&gt;height&lt;/strong&gt; which you don't want to set because you &lt;strong&gt;don't know what the aspect ratio&lt;/strong&gt; is going to be.&lt;/p&gt;

&lt;p&gt;This is a new change since version &lt;em&gt;10.0.1&lt;/em&gt; where the team around Next deprecated the &lt;code&gt;unsized&lt;/code&gt; prop, replacing it with &lt;code&gt;layout="fill"&lt;/code&gt; ‚Äì which doesn't gives you the same functionality.&lt;/p&gt;

&lt;p&gt;Also, if you're going to set &lt;code&gt;layout="fill"&lt;/code&gt; and &lt;code&gt;objectFit="cover"&lt;/code&gt; on the Image component you will get a strange behavior. There are cases in which you can fix this with position: relative on the parent item, but then you also have to set &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; which you don't want in case of a responsive image.&lt;/p&gt;

&lt;p&gt;There is an &lt;strong&gt;easy fix&lt;/strong&gt; to this problem, you only have to set a wrapper around the Image component to give a bit of extra styling.&lt;/p&gt;

&lt;p&gt;First, we have to add the wrapping item with the class image-container. Please adjust this to fit your styling needs, e.g. if you're using styled-components the syntax will look slightly different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image-container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fill"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this to work, it's important that you add two classes: image-container to the parent element and image to the Image component. After adding these classes, you should add this styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.image-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;div&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unset&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unset&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! üéâ&lt;/p&gt;

&lt;p&gt;Your images should now display with the right dimensions and should scale up to 100% width and at the same time having the correct height.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>next</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Some JavaScript Principles you should know.</title>
      <author>Md. Shah Arafat</author>
      <pubDate>Thu, 06 May 2021 15:41:40 +0000</pubDate>
      <link>https://dev.to/shaharafat/some-javascript-principles-you-should-know-22il</link>
      <guid>https://dev.to/shaharafat/some-javascript-principles-you-should-know-22il</guid>
      <description>&lt;p&gt;In this blog, I will discuss some core JavaScript concepts. If you are new to the JavaScript world, then you must have a clear idea about that topic. I will try to explain those very clear and concisely. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#types"&gt;
  &lt;/a&gt;
  Types
&lt;/h1&gt;

&lt;p&gt;There are 6 primitive data types in JavaScript. Those are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;Big int&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and 2 structural data types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;No other types?&lt;/strong&gt; In JavaScript, there are no other fundamental value types other than the ones we have just enumerated.‚Äã The rest are all objects! &lt;/p&gt;

&lt;p&gt;For example, even arrays, dates and regular expressions fundamentally ‚Äãare‚Äã objects in JavaScript.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#expressions"&gt;
  &lt;/a&gt;
  Expressions
&lt;/h1&gt;

&lt;p&gt;An expression is a valid set of literals, variables, operators, and expressions that evaluates to a single value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// 'Hello World'&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// { answer: 42 }&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;// { answer: 42 }&lt;/span&gt;

&lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each example shown above is an expression. Every line represents some value.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hoisting"&gt;
  &lt;/a&gt;
  Hoisting
&lt;/h1&gt;

&lt;p&gt;In JS hoisting is a behaviour, where all variable declared with the &lt;code&gt;var&lt;/code&gt; keyword and all functions defined with function declaration is moved to the top of the program.&lt;/p&gt;

&lt;p&gt;So that if you use a function before functions declaration, it will not throw any error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Programmer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Programmer&lt;/span&gt;

&lt;span class="c1"&gt;// functions declaration&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This program will run perfectly, though you used the function before the declaration. But JS hoisting moves the function on top of all code. Like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// functions declaration&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Programmer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's why it is perfectly working.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember, Hoisting happens for function declaration. If you define a function by functions expression. It will give you an error.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the case of a variable, when we declare a variable with the &lt;code&gt;var&lt;/code&gt; keyword, JavaScript will hoist the variable to the top of the program. But, its value will not be assigned before we reach the line where we assigned the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 'John Doe'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run this, you will not get any error. Instead, it will print undefined. Because of hoisting, variable declaration moved to the top but the value was not assigned. So, the value is undefined. After reaching the line where the value was assigned then the value is visible as the value of that variable. &lt;/p&gt;

&lt;p&gt;From ES6 variable declaration with &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; does not have any hoisting issue. We will discuss that later.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#global-block-binding"&gt;
  &lt;/a&gt;
  Global Block Binding
&lt;/h1&gt;

&lt;p&gt;When we declare a variable with the &lt;code&gt;var&lt;/code&gt; keyword, it changes the global object. For the browser, it is a window object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Regular Expression&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;RegExp&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a big issue because we are mutating the global object. In the example above it 'RegExp' variable change the global 'RegExp', Which is unexpected. &lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; comes into the picture. If we declare a variable using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;, it will never mutate the global object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Regular Expression&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;RegExp&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#block-bindings-in-for-loop"&gt;
  &lt;/a&gt;
  Block Bindings in For loop
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0 1 2 3 4 &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, I defined the variable 'i' with &lt;code&gt;var&lt;/code&gt; keyword. after loop execution complete, the variable 'i' is visible outside the block or for loop. But we don't want that. Here &lt;code&gt;let&lt;/code&gt; keyword comes to the rescue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0 1 2 3 4 &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// i is not defined.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the value of the variable exists only inside the for loop. so, below the loop, we will get an error.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow Functions
&lt;/h1&gt;

&lt;p&gt;Arrow function is a new way of writing functions in JavaScript.&lt;br&gt;
Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The syntax is very simple, right? If you have only one parameter, then you do not need to use a brace for the parameter and you can directly return a value without using the second bracket.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Remember, when we define an arrow function expression. It's not hoisted. It's an expression, not a declaration. Function declarations are hoisted, not function expressions.&lt;br&gt;
That's why we need to write the function before we use it. Another thing is arrow function doesn't have its own &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With all that being said, I highly recommend you keep learning JavaScript. Trust me it's a very powerful and impressive language.&lt;/p&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/shah-arafat/"&gt;Linkedin&lt;/a&gt; and &lt;a href="https://twitter.com/sharafhat"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a Blog using Hugo</title>
      <author>Aditya</author>
      <pubDate>Thu, 06 May 2021 15:29:04 +0000</pubDate>
      <link>https://dev.to/adityavinodh/create-a-blog-using-hugo-447l</link>
      <guid>https://dev.to/adityavinodh/create-a-blog-using-hugo-447l</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-hugo"&gt;
  &lt;/a&gt;
  What is Hugo?
&lt;/h1&gt;

&lt;p&gt;Hugo is a static-site generator that helps you generate and build static files like HTML, CSS, and JavaScript ahead of time. It is an opensource project built with Go and boasts impressive build times that seems incomparable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-does-it-do"&gt;
  &lt;/a&gt;
  What does it do?
&lt;/h1&gt;

&lt;p&gt;It helps you convert markdown files (the files you will be writing your articles or blog posts in) to the static files that will be served later. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-is-it-different"&gt;
  &lt;/a&gt;
  How is it different?
&lt;/h1&gt;

&lt;p&gt;This is different to traditional methods like a wordpress site, that has a dedicated database and a web server that needs to respond to requests, communicate with the Databse, and serve the files on every request. It is much more slower than using a static-site generator like Hugo as nothing is dynamic; we know that the content is not going to change. HTTP web servers are extremely good and fast at just serving static content. Users ask for a file, and the server just has to give it. There is no other processing involved.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-benefits"&gt;
  &lt;/a&gt;
  The Benefits
&lt;/h1&gt;

&lt;p&gt;Your website can be deployed and hosted anywhere (On GCP cloud storage, AWS S3, Netlfify, Firebase, etc.), and can be deployed to a CDN (Content Delivery Network) so that it can be cached on a global edge network and significantly improve the performance and speed of page loads. This is especially important with poor internet connections, and for SEO (Search Engine Optimization).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h1&gt;

&lt;p&gt;However, that does not mean Hugo can not be used for anything dynamic. If your use case if very complex such as involving user input, you might not be able to use Hugo. Using a regular website, or single-page-application with React, Angular, Vue, or Svelte might be a better option. But if all you need is a simple blog, with a few extra features, like an option for users to provide comments, Hugo has everything you need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get Started
&lt;/h1&gt;

&lt;p&gt;The &lt;a href="https://gohugo.io/documentation/"&gt;Hugo Documentation&lt;/a&gt; is very helpful and elaborate. It is the first place to check in case of references or issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Hugo is available in all platforms (Windows, MacOS, and Linux), as a binary that you can install, or via a package manager. If you have a compatible package manager, that is the recommended way as it is the easiest and has the least amount of work to maintain&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-using-the-binaries"&gt;
  &lt;/a&gt;
  Install using the Binaries
&lt;/h3&gt;

&lt;p&gt;Availabe from their GitHub &lt;a href="https://github.com/gohugoio/hugo/releases"&gt;Releases&lt;/a&gt; page. (Choose the appropriate platform and type of file). Make sure to install it in a location that is somewhere in your &lt;code&gt;PATH&lt;/code&gt;. &lt;code&gt;usr/local/bin&lt;/code&gt; is the best place for Linux. Otherwise, append the location to your &lt;code&gt;PATH&lt;/code&gt; variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-using-a-package-manager"&gt;
  &lt;/a&gt;
  Install using a Package Manager
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;On Windows&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;choco install hugo -confirm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scoop install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;&lt;strong&gt;On Linux and MacOS&lt;/strong&gt; (Using Homebrew)&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;To verify that the installation occurred successfully, run the following command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hugo version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There should not be any errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-site"&gt;
  &lt;/a&gt;
  Creating the Site
&lt;/h2&gt;

&lt;p&gt;Change directories into the location you want to create your project. Then run the following command with your project's name. This will create folder that contains all the files that you need to get started.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Creates a new site and project called 'firstblog'
hugo new site firstblog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Change directories into the project directory that was created.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd firstblog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You will notice a similar folder structure. The &lt;code&gt;config.toml&lt;/code&gt; file is where all the variables and settings for your projects live. You will be able to setup and configure most of your website from that one file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
‚îú‚îÄ‚îÄ archetypes
‚îú‚îÄ‚îÄ config.toml
‚îú‚îÄ‚îÄ content
‚îú‚îÄ‚îÄ data
‚îú‚îÄ‚îÄ layouts
‚îú‚îÄ‚îÄ static
‚îî‚îÄ‚îÄ themes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you want to change the file type for your configurations, you can change it to YAML or JSON depending on your preference. You can copy and paste the contents of the file using a tool like &lt;a href="https://www.convertsimple.com/convert-toml-to-yaml/"&gt;ConvertSimple&lt;/a&gt; to convert the format and syntax.&lt;/p&gt;

&lt;p&gt;All of the actual content that you write as markdown files lives inside the &lt;code&gt;content&lt;/code&gt; directory. You can organize the content in folders, and subfolders, and Hugo will automatically take care of organizing the posts as categories or subcategories.&lt;/p&gt;

&lt;p&gt;Use the following command to create a blank markdown file. You can specify where you want to store this file. If the file name alone is provided, then it is directly placed in the &lt;code&gt;content&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hugo create first-post.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;or try the following to place it in &lt;code&gt;content/posts&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hugo create posts/first-post.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;h3&gt;
  &lt;a href="#front-matter"&gt;
  &lt;/a&gt;
  Front Matter
&lt;/h3&gt;

&lt;p&gt;Every markdown file that is created and used for your website has a section on the top that is unique to Hugo. It starts and ends with &lt;code&gt;---&lt;/code&gt;. The syntax used in this is &lt;code&gt;TOML&lt;/code&gt; by default. You can change this default setting with the following command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To convert to YML
hugo convert toYAML
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the front matter, you can set options for the specific page, meta data, and other configuration that is specific to this particular page. Check out the documentation of &lt;a href="https://gohugo.io/content-management/front-matter/"&gt;Front Matter&lt;/a&gt; to learn the different options available.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-a-theme"&gt;
  &lt;/a&gt;
  Install a Theme
&lt;/h3&gt;

&lt;p&gt;One of the powers of Hugo is to utilize one of the many themes created by the community. Check out the &lt;a href="https://themes.gohugo.io/"&gt;Complete List&lt;/a&gt; and choose one of the themes. Read the documentation and install the theme. This process is very straightforward. Mostly, you will have to download the code, either manually, or using Git, and place it in the &lt;code&gt;themes&lt;/code&gt; folder, then inside another folder with the name of the theme you chose.&lt;/p&gt;

&lt;p&gt;Then make sure to go to the &lt;code&gt;config&lt;/code&gt; file and update the theme variable with the name of the theme you have chosen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-the-site"&gt;
  &lt;/a&gt;
  Running the Site
&lt;/h3&gt;

&lt;p&gt;Hugo has an in-built web server that helps you view the site locally, and automatically watches your files for changes, and re-runs when the changes occur.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hugo server -D&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#deployment"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Deployment&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;With the following command, Hugo builds your site and outputs the final static content to the &lt;code&gt;public&lt;/code&gt; directory by default. That can be modified in the &lt;code&gt;config&lt;/code&gt; file if needed. The contents of this file needs to be deployed with whatever hosting provider you chose to use.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hugo -D&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h1&gt;
&lt;br&gt;
  &lt;a href="#bonus-content"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Bonus content&lt;br&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#hosting"&gt;
  &lt;/a&gt;
  Hosting
&lt;/h2&gt;

&lt;p&gt;Hugo is very feature-rich, and is an amazing product if used wisely. You could set up a CI/CD Pipeline to run every time you make changes and deploy to your hosting provider of choice.&lt;/p&gt;

&lt;p&gt;I have setup this blog using GitHub Actions and Firebase. Every time code is merged, a commit is made to the main branch, or a Pull Request is merged, a Firebase workflow runs on GitHub in the cloud that deploys the content of the &lt;code&gt;public&lt;/code&gt; directory to Firebase Hosting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h2&gt;

&lt;p&gt;You can add a comments or discussion section to all of your pages (or select ones) easily using &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt;. Instructions and setup is very straightforward and simple.&lt;/p&gt;




&lt;p&gt;That's all for this post and tutorial. I hoped this has helped you and given you an idea of how things work.&lt;/p&gt;

</description>
      <category>hugo</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What I learned after failing to build a Project</title>
      <author>Pratham Sharma</author>
      <pubDate>Thu, 06 May 2021 15:26:39 +0000</pubDate>
      <link>https://dev.to/ps173/what-i-learned-after-failing-to-build-a-project-3ka8</link>
      <guid>https://dev.to/ps173/what-i-learned-after-failing-to-build-a-project-3ka8</guid>
      <description>&lt;p&gt;So I have been working on an Image-Editor for react for past few days. And just to clear I have dropped the idea for time being due to lot of reasons. Firstly I was not enjoying the process of developing it anymore. Other reasons were that canvas API is very hard to work in with react. Also I am very aware of all the libraries that make it easier to use but then the application had nothing to offer if it was build on something as Konva or Toast-image-editor. It is very true that I worked on the project for 5 days in row and therefore it was more disappointing to drop the project.&lt;/p&gt;

&lt;p&gt;But the project taught me a lot of stuff including how to manage uploading of image files in react,Using context api, how to convert them to base64 and even how to manipulate them. Project also taught me to keep some general things in mind. They are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Build UI first - Prior to functionality building UI must be given importance. This is so because a well developed UI can help you remain motivated and support the development. Also a good UI is a great step towards clearing the thoughts for further development in my opinion.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always Plan Well Before Project - So It was not like I did not planned well before developing it was more like I was confused. Well since I had already made the test version in vanilla javascript. I was confident or overconfident to step directly without doing proper research. So an Important take-back is that research. Even if you have the idea. Plan the stack or library you were going to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If It‚Äôs not working then don‚Äôt stress - Yes if it does not work give up on it for the time being and pick it later. Maybe you are just tired of looking at same thing, change the pace, work on something else.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And I guess those were it. I was really disappointed in myself because I was building it since long back. Well I will make sure to pick this up again someday in future till then I will keep up the hardwork on other projects. If you want to share your experiences with failed projects then please do.‚úåÔ∏è&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>productivity</category>
      <category>react</category>
    </item>
    <item>
      <title>What Is "Lifting State Up" in React?</title>
      <author>Reed Barger</author>
      <pubDate>Thu, 06 May 2021 15:22:32 +0000</pubDate>
      <link>https://dev.to/reedbarger/what-is-lifting-state-up-in-react-o97</link>
      <guid>https://dev.to/reedbarger/what-is-lifting-state-up-in-react-o97</guid>
      <description>&lt;p&gt;Here is a simple, practical example of what the React concept of "lifting state up" is and how it can help you in building your applications.&lt;/p&gt;

&lt;p&gt;Lifting state up is a common pattern that is essential for React developers to know, because it helps us avoid more complex (and often unnecessary) patterns for managing our state.&lt;/p&gt;

&lt;p&gt;How does it do that? Let's see how through a simple example.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Want to build amazing React apps using best practices from front to back? Check out the &lt;a href="https://reactbootcamp.com"&gt;&lt;strong&gt;React Bootcamp&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#breaking-down-our-todo-app"&gt;
  &lt;/a&gt;
  Breaking down our Todo App
&lt;/h2&gt;

&lt;p&gt;Let's start with a basic todo application, which consists of three components: &lt;code&gt;TodoCount&lt;/code&gt;, &lt;code&gt;TodoList&lt;/code&gt; and &lt;code&gt;AddTodo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All of these components, as their name suggests, are going to need to share some common state.&lt;/p&gt;

&lt;p&gt;If we look at &lt;code&gt;TodoCount&lt;/code&gt;, this is where we're going to display up at the top of our app, how many total to dues we have in our application.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TodoList&lt;/code&gt; is going to be where we show all of our todos. It has some initial state with these three items ("item 1", "item 2", "item 3"), which we're displaying within an unordered list.&lt;/p&gt;

&lt;p&gt;And finally, we have &lt;code&gt;AddTodo&lt;/code&gt;. This consists of a form, where we want to be able to add a new item to this list. Right now we're just logging the todo that we type into the input to the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoCount&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Total&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-do-we-care-about-lifting-state-up"&gt;
  &lt;/a&gt;
  Why do we care about lifting state up?
&lt;/h2&gt;

&lt;p&gt;How can we use the concept of lifting state up to help finish our application?&lt;/p&gt;

&lt;p&gt;These components need to share some state, some todo state. We need to share that todo state order to display the number of todos as well as to update our todo list.&lt;/p&gt;

&lt;p&gt;This is where the concept of lifting state up comes in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We lift up state to a common ancestor of components that need it, so that they can all share in the state. This allows us to more easily share state among all of these components that need rely upon it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What common ancestor should we lift up our state to so all of the components can read from and update that state? The &lt;code&gt;App&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Here's what our app should now look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;    

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoCount&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Total&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#passing-state-down"&gt;
  &lt;/a&gt;
  Passing state down
&lt;/h2&gt;

&lt;p&gt;However, there's a small problem.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TodoList&lt;/code&gt; doesn't have access to the &lt;code&gt;todos&lt;/code&gt; state variable, so we need to pass that down from &lt;code&gt;App&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O_EHSOkQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reactbootcamp.com/content/images/2021/05/Screen-Shot-2021-05-05-at-12.29.41-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_EHSOkQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reactbootcamp.com/content/images/2021/05/Screen-Shot-2021-05-05-at-12.29.41-AM.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can do that with components in React using props.&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;TodoList&lt;/code&gt;, let's add a prop named &lt;code&gt;todos&lt;/code&gt;. We can destructure &lt;code&gt;todos&lt;/code&gt; from the props object. This allows us to see our todo items once again.&lt;/p&gt;

&lt;p&gt;Now what about displaying the total number of todos within our to do count component?&lt;/p&gt;

&lt;p&gt;This is another instance in which we can pass down the data as a prop, since to do count relies upon that state. So we'll again provide the same prop of to dues the structure from to do counts, props object, and to display the total number of to dues. That would be from the value &lt;code&gt;todos.length&lt;/code&gt;, and we see that it's 3 currently.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoCount&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoCount&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Total&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#passing-callbacks-down"&gt;
  &lt;/a&gt;
  Passing callbacks down
&lt;/h2&gt;

&lt;p&gt;Now the last step is to be able to add a new todo.&lt;/p&gt;

&lt;p&gt;This is where our setter function, &lt;code&gt;setTodos&lt;/code&gt;, comes in. To update our todo state, we don't need to pass down both values, the variable and the setter function, all we need to do is pass down &lt;code&gt;setTodos&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We'll pass it down to &lt;code&gt;addTodo&lt;/code&gt; as a prop of the same name (setTodos) and destructure it from props.&lt;/p&gt;

&lt;p&gt;As you can see, we're using our form on submit to get access to the input's value; whatever was typed into it, which we're putting it within a local variable named &lt;code&gt;todo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead of needing to pass down the current todos array, we can just use an inner function to get the previous todos value. This allows us to get previous todos and just return what we want the new state to be.&lt;/p&gt;

&lt;p&gt;This new state will be an array, in which we will spread all of the previous todos and add our new todo as the last element in that array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoCount&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevTodos&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;prevTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Not only by lifting state up and passing its state variable down to the components that need to read from it, can we use this pattern, we can also use it for callbacks to be able to update state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once we add a new item to our todo list, it's immediately added to state and we see our &lt;code&gt;TodoList&lt;/code&gt; component re-render to display that new item, as well as &lt;code&gt;TodoCount&lt;/code&gt; to show the total number of todos which is now 4:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3FDImXMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reactbootcamp.com/content/images/2021/05/lifting-state-2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3FDImXMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reactbootcamp.com/content/images/2021/05/lifting-state-2.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Lifting state up is an important pattern for React developers because sometimes we have state that's located within a particular component that also needs to be shared with sibling components.&lt;/p&gt;

&lt;p&gt;Instead of using an entire state management library like Redux or React Context, we can just lift the state up to the closest common ancestor and pass both the state variables the state values down as well as any callbacks to update that state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ready-for-the-next-step-join-the-react-bootcamp"&gt;
  &lt;/a&gt;
  Ready for the next step? Join The React Bootcamp
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;The React Bootcamp&lt;/a&gt;&lt;/strong&gt; takes everything you should know about learning React and bundles it into one comprehensive package, including videos, cheatsheets, plus special bonuses.&lt;/p&gt;

&lt;p&gt;Gain the insider information hundreds of developers have already used to master React, find their dream jobs, and take control of their future:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2usNUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.nyc3.digitaloceanspaces.com/react-bootcamp-banner.png" alt="The React Bootcamp"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Click here to be notified when it opens&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>üéâ The Create Go App project has grown to v2, but is still easier, better, faster &amp; stronger</title>
      <author>Vic Sh√≥stak</author>
      <pubDate>Thu, 06 May 2021 14:55:16 +0000</pubDate>
      <link>https://dev.to/koddr/the-create-go-app-project-has-grown-to-v2-but-is-still-easier-better-faster-stronger-575j</link>
      <guid>https://dev.to/koddr/the-create-go-app-project-has-grown-to-v2-but-is-still-easier-better-faster-stronger-575j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello, friends! üòâ I'm excited to share great news with you: the &lt;a href="https://github.com/create-go-app/cli"&gt;Create Go App CLI&lt;/a&gt; project, &lt;em&gt;that I've been working on for a long time&lt;/em&gt;, has finally been updated to major version &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In case anyone forgot, I remind you that with this CLI you can create in just a few seconds a new production-ready project with &lt;strong&gt;backend&lt;/strong&gt; (Go), &lt;strong&gt;frontend&lt;/strong&gt; (JavaScript, TypeScript) and &lt;strong&gt;deploy automation&lt;/strong&gt; (Ansible, Docker).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è You only need to focus on writing code and thinking of business-logic! The CLI will take care of the rest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK. Let's look at the changes together! Fasten your seat belts, we're starting.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  üìù Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#new-in-v2-and-beyond"&gt;New in v2 and beyond&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changes-in-cli-commands"&gt;Changes in CLI commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#ansible-roles"&gt;Ansible roles&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#web-proxy-servers"&gt;Web, proxy servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database"&gt;Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cache-key-value-storage"&gt;Cache, key-value storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#project-wiki-page"&gt;Project Wiki page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#your-assistance-to-the-project"&gt;Your assistance to the project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-in-v2-and-beyond"&gt;
  &lt;/a&gt;
  New in v2 and beyond
&lt;/h2&gt;

&lt;p&gt;There are actually quite a few changes, but I've highlighted a few of the &lt;strong&gt;most important&lt;/strong&gt; ones that change the way you work with the Create Go App CLI. For all other changes, please read the release notes in our GitHub repository:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/create-go-app"&gt;
        create-go-app
      &lt;/a&gt; / &lt;a href="https://github.com/create-go-app/cli"&gt;
        cli
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ‚ú® A powerful CLI for the Create Go App project. Create a new production-ready project with backend, frontend and deploy automation by running one CLI command!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changes-in-cli-commands"&gt;
  &lt;/a&gt;
  Changes in CLI commands
&lt;/h2&gt;

&lt;p&gt;This release was aimed primarily at speeding up the CLI and reducing the functionality of commands that were too overloaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-init-endraw-command"&gt;
  &lt;/a&gt;
  &lt;code&gt;init&lt;/code&gt; command
&lt;/h3&gt;

&lt;p&gt;After some analysis of the CLI command feedback, we concluded that the command to create a configuration file is very rarely used. The same comment from the focus group of our users, followed about the configuration file itself.&lt;/p&gt;

&lt;p&gt;The most popular comment we got, was something like this: &lt;/p&gt;

&lt;p&gt;‚Äî [...] &lt;em&gt;nobody likes setting up yet another config for yet another CLI!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, it was decided to remove &lt;code&gt;init&lt;/code&gt; command and file-based config &lt;code&gt;.cgapp.yml&lt;/code&gt; completely, even &lt;strong&gt;without&lt;/strong&gt; the possibility of backward compatibility, which we successfully did in &lt;code&gt;v2.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-create-endraw-command"&gt;
  &lt;/a&gt;
  &lt;code&gt;create&lt;/code&gt; command
&lt;/h3&gt;

&lt;p&gt;The central CLI command has been redesigned, and its execution time has been &lt;strong&gt;reduced to 2-4 seconds&lt;/strong&gt;. This was achieved by switching to generating the frontend part of the project using ready-made templates from the awesome next generation frontend tooling called &lt;a href="https://vitejs.dev/"&gt;Vite.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SmFIbrRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi3suks2f304z2oh389u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SmFIbrRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi3suks2f304z2oh389u.png" alt="vite js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you can choose between this frontend frameworks/libraries: &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;JavaScript template&lt;/th&gt;
&lt;th&gt;TypeScript template&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Pure (vanilla)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-vanilla"&gt;&lt;code&gt;vanilla&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-vanilla"&gt;&lt;code&gt;vanilla-ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;React&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v17.0.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-react"&gt;&lt;code&gt;react&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-react-ts"&gt;&lt;code&gt;react-ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Preact&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v10.5.13&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-preact"&gt;&lt;code&gt;preact&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-preact-ts"&gt;&lt;code&gt;preact-ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vue.js&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v3.0.5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-vue"&gt;&lt;code&gt;vue&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-vue-ts"&gt;&lt;code&gt;vue-ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Svelte&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v3.37.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-svelte"&gt;&lt;code&gt;svelte&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-svelte-ts"&gt;&lt;code&gt;svelte-ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lit&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v2.4.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-lit-element"&gt;&lt;code&gt;lit-element&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-lit-element-ts"&gt;&lt;code&gt;lit-element-ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ö†Ô∏è Please note! Creating a new project is done only through the console interface (or CUI for short). Support for creation from the custom templates is currently &lt;strong&gt;under complete redesign&lt;/strong&gt;! We plan to bring this functionality back in the Create Go App CLI &lt;code&gt;v2.2.x&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The structure of the created project will be as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
‚îú‚îÄ‚îÄ .editorconfig
‚îú‚îÄ‚îÄ .gitattributes
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ hosts.ini     &lt;span class="c"&gt;# &amp;lt;-- file with Ansible inventory variables&lt;/span&gt;
‚îú‚îÄ‚îÄ playbook.yml  &lt;span class="c"&gt;# &amp;lt;-- file with Ansible playbook&lt;/span&gt;
‚îú‚îÄ‚îÄ Makefile
‚îú‚îÄ‚îÄ backend       &lt;span class="c"&gt;# &amp;lt;-- folder with Go backend&lt;/span&gt;
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ frontend      &lt;span class="c"&gt;# &amp;lt;-- folder with JS/TS frontend (if you choose)&lt;/span&gt;
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îî‚îÄ‚îÄ roles         &lt;span class="c"&gt;# &amp;lt;-- folder with Ansible roles&lt;/span&gt;
    ‚îú‚îÄ‚îÄ backend
    ‚îÇ   ‚îî‚îÄ‚îÄ ...
    ‚îú‚îÄ‚îÄ docker
    ‚îÇ   ‚îî‚îÄ‚îÄ ...
    ‚îú‚îÄ‚îÄ postgres
    ‚îÇ   ‚îî‚îÄ‚îÄ ...
    ‚îú‚îÄ‚îÄ redis
    ‚îÇ   ‚îî‚îÄ‚îÄ ...
    ‚îî‚îÄ‚îÄ traefik   &lt;span class="c"&gt;# or nginx (if you choose)&lt;/span&gt;
        ‚îî‚îÄ‚îÄ ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Watch a short video presentation: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://recordit.co/OQAwkZBrjN"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05c24SGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/11155743/116787503-0d0dbb80-aaad-11eb-9ef1-dce2df6f606c.jpg" alt="cgapp create"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Direct link: &lt;a href="https://recordit.co/OQAwkZBrjN"&gt;https://recordit.co/OQAwkZBrjN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-deploy-endraw-command"&gt;
  &lt;/a&gt;
  &lt;code&gt;deploy&lt;/code&gt; command
&lt;/h3&gt;

&lt;p&gt;Also, we have seriously reworked the principle of deploying the project on a remote server. The only option left for the &lt;code&gt;deploy&lt;/code&gt; command is the default password call for the sudo user:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Required?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-K&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prompt you to provide the remote user sudo password (&lt;em&gt;a standard Ansible &lt;code&gt;--ask-become-pass&lt;/code&gt; option&lt;/em&gt;).&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Now, everything is built on pre-configured Ansible roles that work perfectly out of the box with our official backend templates for &lt;a href="https://github.com/create-go-app/fiber-go-template"&gt;Fiber&lt;/a&gt; and &lt;a href="https://github.com/create-go-app/net_http-go-template"&gt;net/http&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Watch a short video presentation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://recordit.co/OQAwkZBrjN"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgPIiZeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/11155743/116787504-0e3ee880-aaad-11eb-8268-35493e5608c5.jpg" alt="cgapp deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Direct link: &lt;a href="https://recordit.co/ishTf0Au1x"&gt;https://recordit.co/ishTf0Au1x&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ansible-roles"&gt;
  &lt;/a&gt;
  Ansible roles
&lt;/h2&gt;

&lt;p&gt;Starting with version &lt;code&gt;v2.0.0&lt;/code&gt; we will actively add new Ansible roles to make the process of deploying your project to remote servers as comfortable and fast as possible. &lt;/p&gt;

&lt;p&gt;So, now all the configuration for deployment will be in the Ansible inventory &lt;code&gt;hosts.ini&lt;/code&gt; (in the root of the created project). For example, this is what the inventory looks like for deploying a project with the &lt;strong&gt;Nginx&lt;/strong&gt; web server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# ./hosts.ini
&lt;/span&gt;
&lt;span class="c"&gt;# Ansible inventory for deploy the Create Go App project.
# Author: Vic Sh√≥stak &amp;lt;vic@shostak.dev&amp;gt; (https://shostak.dev)
# For more information, please visit https://create-go.app/
&lt;/span&gt;
&lt;span class="nn"&gt;[cgapp_project]&lt;/span&gt;
&lt;span class="err"&gt;127.0.0.1&lt;/span&gt; &lt;span class="c"&gt;# CHANGE THIS TO YOUR REMOTE SERVER IP!
&lt;/span&gt;
&lt;span class="nn"&gt;[cgapp_project:vars]&lt;/span&gt;
&lt;span class="c"&gt;#
# Ansible default variables to start playbook:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set remote sudo username
&lt;/span&gt;&lt;span class="py"&gt;ansible_user&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="c"&gt;# Ask become password for remote sudo user
&lt;/span&gt;&lt;span class="py"&gt;ansible_become&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;yes&lt;/span&gt;
&lt;span class="c"&gt;# Set connection type to remote server (usually, 'ssh')
&lt;/span&gt;&lt;span class="py"&gt;ansible_connection&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;ssh&lt;/span&gt;
&lt;span class="c"&gt;# Set Python 3 default path
&lt;/span&gt;&lt;span class="py"&gt;ansible_python_interpreter&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/python3&lt;/span&gt;

&lt;span class="c"&gt;#
# Remote server configuration:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set directory on your remote server 
# for store project files
&lt;/span&gt;&lt;span class="py"&gt;server_dir&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/var/www/cgapp&lt;/span&gt;
&lt;span class="c"&gt;# Set user (owner of files/folders) name
&lt;/span&gt;&lt;span class="py"&gt;server_user&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="c"&gt;# Set group name
&lt;/span&gt;&lt;span class="py"&gt;server_group&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;docker&lt;/span&gt;

&lt;span class="c"&gt;#
# Project configuration:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set your project domain
&lt;/span&gt;&lt;span class="py"&gt;project_domain&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;example.com&lt;/span&gt;

&lt;span class="c"&gt;#
# Docker configuration:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set Docker network name
&lt;/span&gt;&lt;span class="py"&gt;docker_network&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;cgapp_network&lt;/span&gt;

&lt;span class="c"&gt;#
# Backend configuration:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set backend port number,
# MUST BE MATCH to the port that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;backend_port&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5000&lt;/span&gt;

&lt;span class="c"&gt;#
# PostgreSQL configuration (backend DB):
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set PostgreSQL version (for example, 13.2)
&lt;/span&gt;&lt;span class="py"&gt;postgres_version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;latest&lt;/span&gt;
&lt;span class="c"&gt;# Set PostgreSQL port number,
# MUST BE MATCH to the port that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;postgres_port&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5432&lt;/span&gt;
&lt;span class="c"&gt;# Set PostgreSQL user name,
# MUST BE MATCH to the user name that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;postgres_user&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;postgres&lt;/span&gt;
&lt;span class="c"&gt;# Set PostgreSQL password,
# MUST BE MATCH to the password that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;postgres_password&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;password&lt;/span&gt;
&lt;span class="c"&gt;# Set PostgreSQL DB name,
# MUST BE MATCH to the DB name that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;postgres_db&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;postgres&lt;/span&gt;
&lt;span class="c"&gt;# Set PostgreSQL SSL mode state ('enabled' or 'disabled'),
# MUST BE MATCH to the SSL mode state that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;postgres_ssl_mode&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;disable&lt;/span&gt;

&lt;span class="c"&gt;#
# Go-Migrate configuration:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set migration number,
# if you WANT to migrate all of your migrations, 
# just leave it blank,
# for only initial migration set it to '1'
&lt;/span&gt;&lt;span class="py"&gt;migrate_number&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;#
# Redis configuration (backend cache):
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set Redis version (for example, 6.2)
&lt;/span&gt;&lt;span class="py"&gt;redis_version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;latest&lt;/span&gt;
&lt;span class="c"&gt;# Set Redis port number,
# MUST BE MATCH to the port that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;redis_port&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;6379&lt;/span&gt;

&lt;span class="c"&gt;#
# Nginx configuration:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set Nginx version (for example, 1.20-alpine)
&lt;/span&gt;&lt;span class="py"&gt;nginx_version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;alpine&lt;/span&gt;
&lt;span class="c"&gt;# Set redirect from HTTP to HTTPS for default server
&lt;/span&gt;&lt;span class="py"&gt;nginx_use_only_https&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;yes&lt;/span&gt;
&lt;span class="c"&gt;# Set redirect from WWW to non-WWW domain for default server
&lt;/span&gt;&lt;span class="py"&gt;nginx_redirect_to_non_www&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-proxy-servers"&gt;
  &lt;/a&gt;
  Web, proxy servers
&lt;/h3&gt;

&lt;p&gt;We're recommending to use &lt;a href="https://traefik.io/traefik/"&gt;Traefik Proxy&lt;/a&gt; as default proxy server for your projects. The main reason: this proxy provides &lt;strong&gt;automatic&lt;/strong&gt; SSL certificates from Let's Encrypt with &lt;strong&gt;renew&lt;/strong&gt; out of the box.&lt;/p&gt;

&lt;p&gt;Also, Traefik was built on the Docker ecosystem and has a really useful Web UI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mztDGq4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48lxi7mt92k52cdjmbp3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mztDGq4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48lxi7mt92k52cdjmbp3.png" alt="traefik web ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;List of roles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;traefik&lt;/code&gt; ‚Äî configured Traefik container with a simple ACME challenge via CA server.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;traefik-acme-dns&lt;/code&gt; ‚Äî configured Traefik container with a complex ACME challenge via DNS provider.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nginx&lt;/code&gt; ‚Äî pure Nginx container with "the best practice" configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;p&gt;List of roles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;postgres&lt;/code&gt; ‚Äî configured &lt;a href="https://postgresql.org/"&gt;PostgreSQL&lt;/a&gt; container with apply migrations (by &lt;a href="https://github.com/golang-migrate/migrate"&gt;golang-migrate/migrate&lt;/a&gt; tool) for backend.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cache-keyvalue-storage"&gt;
  &lt;/a&gt;
  Cache, key-value storage
&lt;/h3&gt;

&lt;p&gt;List of roles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;redis&lt;/code&gt; ‚Äî configured &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; container to store the backend cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-wiki-page"&gt;
  &lt;/a&gt;
  Project Wiki page
&lt;/h2&gt;

&lt;p&gt;Soon, we plan to move completely to the GitHub Wiki and do away with the separate documentation on our &lt;a href="https://create-go.app/"&gt;website&lt;/a&gt; for the project. &lt;/p&gt;

&lt;p&gt;‚Äî &lt;em&gt;Everything should be in one place&lt;/em&gt;, ‚Äî as focus group users correctly noted.&lt;/p&gt;

&lt;p&gt;This is a table of contents for the &lt;a href="https://github.com/create-go-app/cli/wiki"&gt;Create Go App Wiki&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CLI commands

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/create-go-app/cli/wiki/Command-create"&gt;&lt;code&gt;cgapp create&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/create-go-app/cli/wiki/Command-deploy"&gt;&lt;code&gt;cgapp deploy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/create-go-app/cli/wiki/Errors-in-the-process"&gt;Errors in the process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/create-go-app/cli/wiki/How-the-CLI-works"&gt;How the CLI works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/create-go-app/cli/wiki/FAQ"&gt;Frequently asked questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/create-go-app/cli/wiki/Logo"&gt;Logo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-assistance-to-the-project"&gt;
  &lt;/a&gt;
  Your assistance to the project
&lt;/h2&gt;

&lt;p&gt;If you want to say &lt;strong&gt;thank you&lt;/strong&gt; or/and support active development of project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a &lt;a href="https://github.com/create-go-app/cli"&gt;GitHub Star&lt;/a&gt; to the project.&lt;/li&gt;
&lt;li&gt;Twit about project &lt;a href="https://twitter.com/intent/tweet?text=%E2%9C%A8%20Create%20a%20new%20production-ready%20project%20with%20%23Golang%20backend%2C%20%23JavaScript%20or%20%23TypeScript%20frontend%2C%20%23Docker%20and%20%23Ansible%20deploy%20automation%20by%20running%20one%20command.%20%0A%0AFocus%20on%20writing%20code%20and%20thinking%20of%20business-logic%21%0AThe%20CLI%20will%20take%20care%20of%20the%20rest.%0A%0Ahttps%3A%2F%2Fgithub.com%2Fcreate-go-app%2Fcli"&gt;on your Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Write interesting articles about project on &lt;a href="https://dev.to/"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt; or personal blog.&lt;/li&gt;
&lt;li&gt;Join DigitalOcean at our &lt;a href="https://m.do.co/c/b41859fa9b6e"&gt;referral link&lt;/a&gt; (your profit is &lt;strong&gt;$100&lt;/strong&gt; and we get $25).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Together, we can make this project &lt;strong&gt;better&lt;/strong&gt; every day!&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vic Sh√≥stak &lt;a href="https://shostak.dev"&gt;https://shostak.dev&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more ‚Üí write a comment below &amp;amp; follow me. Thanks! üòò&lt;/p&gt;

</description>
      <category>go</category>
      <category>news</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Errores https mas comunes</title>
      <author>Matias Blanc</author>
      <pubDate>Thu, 06 May 2021 14:27:44 +0000</pubDate>
      <link>https://dev.to/matiasblanc/errores-https-mas-comunes-46k4</link>
      <guid>https://dev.to/matiasblanc/errores-https-mas-comunes-46k4</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;En nuestra vida de web developer debemos saber los errores  que cometemos para mejorarlos y ser mejores cada d√≠a, por eso es que debemos saber sobre estos errores http, porque son los errores de la web, cada vez que desarrolles un sitio puedes encontrar algunos de los siguientes errores.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#error-400-bad-request"&gt;
  &lt;/a&gt;
  ERROR 400 BAD REQUEST
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Sucede cuando el cliente env√≠a una petici√≥n que el servidor no puede comprender, generalmente cuando los datos enviados por el navegador no cumplen con las normas del protocolo HTTP.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A2e2szbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eubetoig9f0atgy1or6r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A2e2szbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eubetoig9f0atgy1or6r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#401-authorization-requiered"&gt;
  &lt;/a&gt;
  401 ‚Äì AUTHORIZATION REQUIERED
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Si el cliente ha solicitado una p√°gina web que se encuentra protegida por una contrase√±a, el servidor devuelve el error 401. En este caso no se devuelve el error de manera t√≠pica, sino que aparece una ventana emergente en la cu√°l se solicita al usuario que ingrese una contrase√±a para acceder al sitio web. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mfcHsHqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i46o8e9vxbovhk7xmnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mfcHsHqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i46o8e9vxbovhk7xmnn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#error-404-o-not-found"&gt;
  &lt;/a&gt;
  ERROR 404 O NOT FOUND
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Uno de los mas conocidos este error es el mas comun en una web, no lo vas a ver mucho cuando desarrolles una web si no cuando este subida y un usuario busque algun subdomio no creado en tu sitio o que una persona haya escrito mal un link pero con el dominio de tu web.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k3ySrang--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy3lkan6jv5o47cdq7uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k3ySrang--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy3lkan6jv5o47cdq7uz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#error-500-o-internal-server-error"&gt;
  &lt;/a&gt;
  ERROR 500 O INTERNAL SERVER ERROR
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Internal Server Error significa Error interno del servidor. Este c√≥digo generalmente se muestra cuando el servidor no puede d ar muchos detalles del error o que ning√∫n otro error 5** se pudo mostrar. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hU0k-kYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czr3qu5fnzfigg41jvxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hU0k-kYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czr3qu5fnzfigg41jvxf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#error-502-o-bad-gateway"&gt;
  &lt;/a&gt;
  ERROR 502 O BAD GATEWAY
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Bad Gateway o en espa√±ol puerta de enlace no valida. indica un error de comunicaci√≥n entre dos servidores. Sucede cuando el cliente se conecta a un servidor que act√∫a como un proxy que necesita acceder a un servidor ascendente. En estos casos, usualmente el otro servidor se localiza en un nivel superior en la jerarqu√≠a de servidores.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nfRPNKvy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve19ed559bh7yzbq8agk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nfRPNKvy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve19ed559bh7yzbq8agk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Hay muchos, muchos mas pero estos son los que mas vas a ver, los dem√°s errores ni te los vas a topar, la verdad es que la mayor√≠a de los errores http no los he visto en una web ya que son muchos, no se si te deber√≠as memorizar TODOS pero si saberte algunos importantes.&lt;/p&gt;

&lt;p&gt;si crees que alguna informaci√≥n esta mal o quieres que agregue alg√∫n error com√©ntalo ac√° abajo.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>http</category>
      <category>webdev</category>
      <category>programming</category>
      <category>spanish</category>
    </item>
    <item>
      <title>FILE HANDALING</title>
      <author>Pranavi nerella</author>
      <pubDate>Thu, 06 May 2021 14:26:55 +0000</pubDate>
      <link>https://dev.to/pranavi333/file-handaling-119j</link>
      <guid>https://dev.to/pranavi333/file-handaling-119j</guid>
      <description>&lt;p&gt;A file is the name of memory location where we can store data permanently under computer‚Äôs hard disk. Java language supports a set of classes in java.io package to create and maintain files. The following are some of the classes we can use to create and maintain files :&lt;/p&gt;

&lt;p&gt;FileInputStream&lt;br&gt;
FileOutputStream&lt;br&gt;
FileWriter etc.,&lt;/p&gt;

&lt;p&gt;FileOutputStream class :&lt;/p&gt;

&lt;p&gt;This class represent data as a stream of bytes. The objects of this class can be used to open and access a file in write mode. The object for this class can be created as below :&lt;/p&gt;

&lt;p&gt;FileOutputStream fis = new FileOutputStream(‚Äúfile-name‚Äù,boolean-value); Here, if the boolean value is true, the file can be opened in append mode. If it is false,the data is overwritten from the beginning of the file every time when we execute the program.The following program demonstrates the use of this class.&lt;/p&gt;

&lt;p&gt;/* Program to store data into a file using FileOutputStream class */&lt;/p&gt;

&lt;p&gt;import java.io.*;&lt;/p&gt;

&lt;p&gt;class FileWrite{&lt;/p&gt;

&lt;p&gt;public static void main(String args[]) throws Exception {&lt;/p&gt;

&lt;p&gt;InputStreamReader isr = new InputStreamReader(System.in);&lt;/p&gt;

&lt;p&gt;BufferedReader br = new BufferedReader(isr);&lt;/p&gt;

&lt;p&gt;System.out.println(‚ÄúEnter some text ‚Äú);&lt;/p&gt;

&lt;p&gt;String data = br.readLine();&lt;/p&gt;

&lt;p&gt;FileOutputStream fos = new FileOutputStream(‚Äúfile1.txt‚Äù,true);&lt;/p&gt;

&lt;p&gt;/* Because data is in the form of String object, convert it into byte array */&lt;/p&gt;

&lt;p&gt;byte b[] = data.getBytes();&lt;/p&gt;

&lt;p&gt;fos.write(b); /* writes byte array into file.txt */&lt;/p&gt;

&lt;p&gt;fos.close();&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;FileInputStream class :&lt;/p&gt;

&lt;p&gt;This clas represents data as a stream of bytes. The objects of this class can be used to open and access a file in read mode. The object for this class can be created as below :&lt;/p&gt;

&lt;p&gt;FileInputStream fis = new FileInputStream(‚Äúfile-name‚Äù);&lt;/p&gt;

&lt;p&gt;The following program demonstrates the use of this class.&lt;/p&gt;

&lt;p&gt;/* Program to read data from a file using FileInputStream class */&lt;/p&gt;

&lt;p&gt;import java.io.*;&lt;/p&gt;

&lt;p&gt;class FileRead {&lt;/p&gt;

&lt;p&gt;public static void main(String args[]) throws Exception {&lt;/p&gt;

&lt;p&gt;FileInputStream fis = new FileInputStream(‚Äúfile1.txt‚Äù);&lt;/p&gt;

&lt;p&gt;int size = fis.available(); /* available() returns no. of bytes in file1.txt */&lt;/p&gt;

&lt;p&gt;byte b [] = new byte[size];&lt;/p&gt;

&lt;p&gt;/* create a byte array of file size */&lt;/p&gt;

&lt;p&gt;fis.read(b);&lt;/p&gt;

&lt;p&gt;String data = new String(b);&lt;/p&gt;

&lt;p&gt;/* convert the byte array to string */&lt;/p&gt;

&lt;p&gt;System.out.println(‚ÄúThe contents of file1.txt are : ‚Äú + data);&lt;/p&gt;

&lt;p&gt;}// end of main&lt;/p&gt;

&lt;p&gt;}// end of class&lt;/p&gt;

&lt;p&gt;FileWriter class :&lt;/p&gt;

&lt;p&gt;This class represent data as a stream of characters. The objects of this class can be used to open and access a file in write mode. The object for this class can be created as below :&lt;/p&gt;

&lt;p&gt;FileWriter fw = new FileWriter(filename,boolean-value);&lt;/p&gt;

&lt;p&gt;The following program demonstrates the use of FileWriter class.&lt;/p&gt;

&lt;p&gt;import java.io.*;&lt;/p&gt;

&lt;p&gt;class FileWrite {&lt;/p&gt;

&lt;p&gt;public static void main(String args[]) throws Exception {&lt;/p&gt;

&lt;p&gt;FileWriter fw = new FileWriter(‚Äúfile2.txt‚Äù,true);&lt;/p&gt;

&lt;p&gt;BufferedReader br = new BufferedReader(new InputStreamReader(System.in));&lt;/p&gt;

&lt;p&gt;System.out.println(‚ÄúEnter some text ‚Äú);&lt;/p&gt;

&lt;p&gt;String data = br.readLine();&lt;/p&gt;

&lt;p&gt;// convert data into equalent character array&lt;/p&gt;

&lt;p&gt;char ch[] = data.toCharArray();&lt;/p&gt;

&lt;p&gt;fw.write(ch);&lt;/p&gt;

&lt;p&gt;fw.close();&lt;/p&gt;

&lt;p&gt;} // end main&lt;/p&gt;

&lt;p&gt;} // end class&lt;/p&gt;

</description>
      <category>java</category>
    </item>
  </channel>
</rss>
