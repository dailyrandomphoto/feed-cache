<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React Native Mobile Apps, Working With React Navigation Authentication And Supabase Login  Pt 1</title>
      <author>Aaron K Saunders</author>
      <pubDate>Fri, 17 Sep 2021 03:50:15 +0000</pubDate>
      <link>https://dev.to/aaronksaunders/react-native-mobile-apps-working-with-react-navigation-authentication-and-supabase-login-pt-1-1hce</link>
      <guid>https://dev.to/aaronksaunders/react-native-mobile-apps-working-with-react-navigation-authentication-and-supabase-login-pt-1-1hce</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aBuB-Q6vHDE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this video we build upon the last and add &lt;a href="//supabase.io"&gt;Supabase&lt;/a&gt; to the project. We implement an authentication check for the application when it first starts up and redirects to the un protected pages if there is no session and then to the protected pages if there is a session.&lt;/p&gt;

&lt;p&gt;We also added the Supabase signOut function to show the app redirecting back to the unprotected AuthenticationSack once the session was gone.&lt;/p&gt;

&lt;p&gt;Join with me on my journey of refreshing my memory with React Native and building mobile applications&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://supabase.io/"&gt;https://supabase.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactnavigation.org/docs/getting-started"&gt;https://reactnavigation.org/docs/getting-started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.expo.dev/get-started/create-a-new-app/"&gt;https://docs.expo.dev/get-started/create-a-new-app/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>reactnative</category>
      <category>supabase</category>
      <category>video</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Collaborating with others in open-source</title>
      <author>Luke Nguyen</author>
      <pubDate>Fri, 17 Sep 2021 03:49:43 +0000</pubDate>
      <link>https://dev.to/mqnguyen/collaborating-with-others-in-open-source-n8o</link>
      <guid>https://dev.to/mqnguyen/collaborating-with-others-in-open-source-n8o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This week I had a chance to work with &lt;a href="https://github.com/lyu4321"&gt;Leyang Yu&lt;/a&gt;, a fellow student from my open-source course. Our task is to review each other's implementation of the static site generator and file any issues we find on GitHub. &lt;/p&gt;

&lt;p&gt;For a socially awkward person and introverted person like me, the thought of having to take a look at someone else code was horrifying. Will I be able to examine the code as thoroughly as I can? How should my wordings be when filling the issue? Should I make any recommendations? These were all the questions and pressure that I put onto myself before trying it out. &lt;/p&gt;

&lt;p&gt;And, to my surprise, the experience was actually pretty enjoyable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-in-touch-and-first-impressions"&gt;
  &lt;/a&gt;
  Getting in touch and first impressions
&lt;/h2&gt;

&lt;p&gt;First, I reached out to my partner on Slack was excited to find out that Leyang was also a web developer like myself, and we both share an interest in JavaScript. Because of this, I was able to learn a lot just from watching my partner code alone. I was amazed to see how they insert HTML contents using only a simple template HTML file and a few &lt;code&gt;replace()&lt;/code&gt; functions instead of using an &lt;code&gt;npm&lt;/code&gt; package like I did. &lt;/p&gt;

&lt;p&gt;In addition, the way Leyang organized the code made the experience of navigating through the code less challenging. It is something that I could learn from as I struggle many times trying to understand what I wrote.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reviewing-and-debugging-ones-code"&gt;
  &lt;/a&gt;
  Reviewing and debugging one's code
&lt;/h2&gt;

&lt;p&gt;After cloning the project to my computer and ran it through a couple of tests, I was able to spot out some problems. The program had no trouble accepting files in a given directory and convert them into HTML. However, when generating links for the converted files, &lt;a href="https://github.com/lyu4321/jellybean/issues/4"&gt;the behavior was not as expected&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Given a `folder` directory with the following files:
2efgt.bin  'a text file.txt'   abcd.txt   jkjkjk.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Expected output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./a text file.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A text file&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./abcd.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Abcd&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Actual output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./2efgt.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2efgt&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./a text file.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A text file&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./abcd.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Abcd&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./jkjkjk.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Jkjkjk&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Leyang and I had a long discussion on how to solve this, with myself suggesting the use of a &lt;code&gt;.filter()&lt;/code&gt; to sort out any non-text files. In the end, we decided to add an extra check for the files' extension in one of the &lt;code&gt;if&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;In addition, I also gave my partner some &lt;a href="https://github.com/lyu4321/jellybean/issues/2"&gt;suggestions on the README.md&lt;/a&gt;, mainly to include an installation guide and some extra examples/demos for other developers.&lt;/p&gt;

&lt;p&gt;As for my part, Leyang discovered that my program had trouble &lt;a href="https://github.com/mqnguyen5/mini-ssg/issues/2"&gt;accepting input with spaces&lt;/a&gt;. I noticed that this behaviour was because of how &lt;code&gt;yargs&lt;/code&gt; - a package I used to make my CLI - parse arguments. By default, arguments are separated by spaces. Thus, only the first word of the file/folder was registered, which resulted in an error saying the specified path doesn't exist. &lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/[some-path]/a file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will be registered as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/[some-path]/a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After some time, I was finally able to figure it out by changing the input type and adding an extra step to process the user-provided input.&lt;/p&gt;

&lt;p&gt;Another issue that I had was the content when calling -v was &lt;a href="https://github.com/mqnguyen5/mini-ssg/issues/1"&gt;missing the program name&lt;/a&gt;. It was not difficult to fix as I only needed to change the function displaying the version to include both the name and the version number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The experience of working on the code in a community was still pretty new to me, but it is something that I am willing to do again in the future. As the annual &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt; is getting closer, I cannot wait to meet up with new people and see which project I will be contributing to.&lt;/p&gt;

&lt;p&gt;Cheers 🍻!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Photo by &lt;a href="https://unsplash.com/@jstrippa?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;James Harrison&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/code?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>Read, Parse and Write CSV Files with Python.</title>
      <author>Collins</author>
      <pubDate>Fri, 17 Sep 2021 02:48:40 +0000</pubDate>
      <link>https://dev.to/0th/read-parse-and-write-csv-files-with-python-obj</link>
      <guid>https://dev.to/0th/read-parse-and-write-csv-files-with-python-obj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-csv-files-anyway"&gt;
  &lt;/a&gt;
  What are CSV files anyway?🤷‍♂️
&lt;/h2&gt;

&lt;p&gt;CSV files, the &lt;strong&gt;CSV&lt;/strong&gt; meaning &lt;strong&gt;Comma Separated Values&lt;/strong&gt;, are text files used to store data.&lt;br&gt;&lt;br&gt;
CSV files emulate tabular data, except that each field is separated by a &lt;em&gt;comma&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7sggi_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r073jq2ud4g54yzz3uu2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7sggi_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r073jq2ud4g54yzz3uu2.PNG" alt="csv_file"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;CSV files can be manipulated with Python in either of these ways:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;traditional read/write methods&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;csv&lt;/code&gt; module
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#what-would-be-covered"&gt;
  &lt;/a&gt;
  What would be covered-
&lt;/h2&gt;

&lt;p&gt;In this article, the focus would be manipulating CSV files using &lt;em&gt;Python's&lt;/em&gt; &lt;code&gt;csv&lt;/code&gt; module, why it is preferred over the usual read/write method would become apparent in a bit.&lt;br&gt;&lt;br&gt;
This article covers the concepts and code (in Python 🐍) used in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#reading-csv-files"&gt;reading CSV files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#field-names"&gt;accessing field names/headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-to-csv-files"&gt;writing CSV files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-dictionary-readers-and-writers"&gt;leveraging dictionary readers and writers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#reading-csv-files"&gt;
  &lt;/a&gt;
  Reading CSV files
&lt;/h2&gt;

&lt;p&gt;Without wasting any more time, let's get straight to reading CSV files 🚀.&lt;br&gt;&lt;br&gt;
The CSV file used in this article can be found &lt;a href=""&gt;here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import csv module
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="c1"&gt;# open the csv file with a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# using the csv reader function
&lt;/span&gt;  &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# loop through the csv_reader iterable object
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print each line in the reader object
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ['first_name', 'last_name', 'email']
    ['John', 'Doe', 'john-doe@bogusemail.com']
    ['Mary', 'Smith-Robinson', 'maryjacobs@bogusemail.com']
    ['Dave', 'Smith', 'davesmith@bogusemail.com']
    ['Jane', 'Stuart', 'janestuart@bogusemail.com']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The block of code above prints each line in the CSV file.&lt;br&gt;&lt;br&gt;
This was achieved first by importing the &lt;code&gt;csv&lt;/code&gt; module, then a &lt;em&gt;context manager&lt;/em&gt; is used to open the CSV file, the CSV file is read into a file object referenced &lt;code&gt;csv_file&lt;/code&gt;, using the &lt;code&gt;open()&lt;/code&gt; function.&lt;br&gt;&lt;br&gt;
Using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;reader()&lt;/code&gt; function, each line in the CSV file is parsed into a &lt;strong&gt;reader&lt;/strong&gt; object, &lt;code&gt;csv_reader&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
The &lt;em&gt;reader&lt;/em&gt; object is &lt;em&gt;iterable&lt;/em&gt;, it returns &lt;em&gt;each line&lt;/em&gt; in the CSV file &lt;em&gt;as lists&lt;/em&gt; when subjected to iteration. &lt;br&gt;
A quick &lt;code&gt;for&lt;/code&gt; loop and a &lt;code&gt;print()&lt;/code&gt; function would return each line in the CSV file 😊.  &lt;/p&gt;

&lt;p&gt;It is important to note, that the &lt;em&gt;reader&lt;/em&gt; object iterable when iterated, returns each line of the CSV file in a &lt;code&gt;list&lt;/code&gt; object where each &lt;em&gt;comma-separated field&lt;/em&gt; is a &lt;em&gt;list item&lt;/em&gt;.&lt;br&gt;&lt;br&gt;
This could be helpful to determine what field values would be returned, by &lt;em&gt;indexing&lt;/em&gt; the &lt;em&gt;list&lt;/em&gt; that is returned for every line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open file with a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# create reader object
&lt;/span&gt;  &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# loop through reader object csv_reader
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print the field values under the field header email
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    email
    john-doe@bogusemail.com
    maryjacobs@bogusemail.com
    davesmith@bogusemail.com
    janestuart@bogusemail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code block above prints the last &lt;em&gt;field value&lt;/em&gt; for every line in the CSV file.&lt;br&gt;&lt;br&gt;
First, the file is read as before, by a context manager, into a file object.&lt;br&gt;&lt;br&gt;
The &lt;em&gt;reader&lt;/em&gt; object is created next, it gets iterated through with a &lt;code&gt;for&lt;/code&gt; loop, and within the &lt;code&gt;print()&lt;/code&gt; function, is where the &lt;em&gt;indexing&lt;/em&gt; of each list item (line in CSV file) is done.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#field-names"&gt;
  &lt;/a&gt;
  Field names
&lt;/h2&gt;

&lt;p&gt;Just as most &lt;em&gt;tables&lt;/em&gt; have &lt;em&gt;headers&lt;/em&gt;, so do most CSV files also contain &lt;strong&gt;field names&lt;/strong&gt;, the &lt;em&gt;field names&lt;/em&gt; of a csv file can be obtained also if present, using the &lt;code&gt;reader&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open file with a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# create reader object
&lt;/span&gt;  &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# iterate through the csv_reader once
&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Field names: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Field names: ['first_name', 'last_name', 'email']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the concept of &lt;em&gt;iterators&lt;/em&gt; or &lt;em&gt;generators&lt;/em&gt; (which are iterators) is not strange, it shouldn't be new to know that when a loop is used to iterate through an &lt;em&gt;iterator&lt;/em&gt;, it's the &lt;code&gt;next()&lt;/code&gt; function that keeps getting called on the &lt;em&gt;iterator&lt;/em&gt; each time.  &lt;/p&gt;

&lt;p&gt;Here the &lt;code&gt;next()&lt;/code&gt; function is called once, which could be seen as looping or iterating through the &lt;em&gt;reader&lt;/em&gt; object once, this returns the first line in the CSV file, which would most of the time be the &lt;em&gt;field names&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;It shouldn't be confusing that the &lt;em&gt;reader&lt;/em&gt; object was called an &lt;em&gt;iterable&lt;/em&gt; previously and an &lt;em&gt;iterator&lt;/em&gt; here, because all &lt;em&gt;iterators&lt;/em&gt; are actually &lt;em&gt;iterable&lt;/em&gt;. &lt;br&gt;
If there's any confusion about the difference between an &lt;em&gt;iterator&lt;/em&gt; and an &lt;em&gt;iterable&lt;/em&gt;, this &lt;a href="https://www.geeksforgeeks.org/python-difference-iterable-iterator/#:~:text=Iterable%20is%20an%20object%2C%20which%20one%20can%20iterate%20over.&amp;amp;text=Iterator%20is%20an%20object%2C%20which,every%20iterable%20is%20an%20iterator."&gt;article&lt;/a&gt; from geeksforgeeks should help.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#writing-to-csv-files"&gt;
  &lt;/a&gt;
  Writing to CSV files
&lt;/h2&gt;

&lt;p&gt;Just as it is possible to read CSV files in Python, it is also possible to write comma-separated values or fields into CSV files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open the file to read or get comma separated values or data from
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# create reader object
&lt;/span&gt;  &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# open/create the file to write comma separated values to
&lt;/span&gt;  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;new_csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# create writer object
&lt;/span&gt;    &lt;span class="n"&gt;csv_writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_csv_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# iterate through the comma separated values of the initially opened file through the reader object
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;csv_lines&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# write these values to the new file
&lt;/span&gt;      &lt;span class="n"&gt;csv_writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The block of code above would successfully read or copy &lt;em&gt;comma-separated values&lt;/em&gt; from a CSV file (&lt;em&gt;records.csv&lt;/em&gt;) into another (&lt;em&gt;new_records.csv&lt;/em&gt;).  &lt;/p&gt;

&lt;p&gt;As repeated in previous code blocks, the CSV file is opened within a context manager, two CSV files were opened in the block of code above, the initial CSV file was opened to read comma-separated values out of it, into a &lt;code&gt;csv&lt;/code&gt; module's reader object.  &lt;/p&gt;

&lt;p&gt;The next CSV file is also opened within a context manager, although in this case it was opened so comma-separated values could be &lt;em&gt;written&lt;/em&gt; into it.  &lt;/p&gt;

&lt;p&gt;Next, a &lt;strong&gt;writer&lt;/strong&gt; object was created using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;writer()&lt;/code&gt; function, which takes as argument the CSV file object.  &lt;/p&gt;

&lt;p&gt;The next section in the code block contains a loop that iterates through the &lt;em&gt;reader&lt;/em&gt; object, to return each line copied from the &lt;em&gt;first file&lt;/em&gt; (&lt;em&gt;records.csv&lt;/em&gt;) that was opened into the &lt;code&gt;csv_lines&lt;/code&gt; variable, this variable, is passed to the &lt;em&gt;writer&lt;/em&gt; object's method &lt;code&gt;writerow()&lt;/code&gt;, which writes these values into the &lt;em&gt;last opened file&lt;/em&gt; (&lt;em&gt;new_records.csv&lt;/em&gt;).&lt;br&gt;&lt;br&gt;
Within the &lt;code&gt;csv.writer()&lt;/code&gt; function in the previous code block, a second argument was included - &lt;code&gt;delimiter='-'&lt;/code&gt;, which would write the values from the previously opened file into the newly opened file, but each field value would be separated by a hyphen (-) instead of a comma (,).  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V6aFBjOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px0c3kpcks11fxnew6ai.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V6aFBjOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px0c3kpcks11fxnew6ai.PNG" alt="records"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#first-csv-file-commaseparated-values-were-copiedread-from-it"&gt;
  &lt;/a&gt;
  First CSV file (comma-separated values were copied/read from it).
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X5_7FKIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9b8byw623vfeacbw9d3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X5_7FKIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9b8byw623vfeacbw9d3.jpg" alt="new_records_LI"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#second-csv-file-commaseparated-values-were-written-to-it"&gt;
  &lt;/a&gt;
  Second CSV file (comma-separated values were written to it).
&lt;/h4&gt;

&lt;p&gt;The second CSV file looks very hard to read and could be problematic if the field values contain the delimiting character (the hyphen, "-"), looking again at the second image, the &lt;em&gt;email field&lt;/em&gt; of the second entry (&lt;a href="mailto:john-doe@bogusemail.com"&gt;john-doe@bogusemail.com&lt;/a&gt;), and the &lt;em&gt;last_name&lt;/em&gt; field of the third entry (Smith-Robinson) have hyphens, which is the delimiting character.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSV files values are not always separated by a comma, as seen in the second file above, the &lt;em&gt;delimiting&lt;/em&gt; character could be arbitrary, &lt;em&gt;commas&lt;/em&gt; are mostly used as a convention, and in some cases to improve readability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;writer()&lt;/code&gt; function, knew to place field values that contained the delimiting character in double quotes, as seen in the image above. This would have otherwise made the file hard to read or use in a program.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-dictionary-readers-and-writers"&gt;
  &lt;/a&gt;
  Using Dictionary readers and writers
&lt;/h2&gt;

&lt;p&gt;Although using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;reader()&lt;/code&gt; and &lt;code&gt;writer()&lt;/code&gt; functions seems like the standard way to handle CSV files, there's a better way to read from and write to CSV files, that improves code readability, and helps explicitly manipulate and parse comma-separated-values, the way to achieve this would be using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;DictReader()&lt;/code&gt; and &lt;code&gt;DictWriter()&lt;/code&gt; functions for reading from and writing to CSV files respectively.  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reading-csv-files-with-the-raw-dictreader-endraw-"&gt;
  &lt;/a&gt;
  Reading CSV files with the &lt;code&gt;DictReader()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The next code block would show how to read from a CSV file using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;DictReader()&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open the file to be read in a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# create a DictReader object using the DictReader function
&lt;/span&gt;  &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# iterate through DictReader object
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print each line in the CSV file as an OrderedDict object
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    OrderedDict([('first_name', 'John'), ('last_name', 'Doe'), ('email', 'john-doe@bogusemail.com')])
    OrderedDict([('first_name', 'Mary'), ('last_name', 'Smith-Robinson'), ('email', 'maryjacobs@bogusemail.com')])
    OrderedDict([('first_name', 'Dave'), ('last_name', 'Smith'), ('email', 'davesmith@bogusemail.com')])
    OrderedDict([('first_name', 'Jane'), ('last_name', 'Stuart'), ('email', 'janestuart@bogusemail.com')])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reading from a CSV file using the &lt;code&gt;DictReader()&lt;/code&gt; function is very similar to using the &lt;code&gt;reader()&lt;/code&gt; function as shown in the code block above.&lt;br&gt;&lt;br&gt;
The first and obvious difference is that the &lt;code&gt;DictReader()&lt;/code&gt; function is used in place of the &lt;code&gt;reader()&lt;/code&gt; function, thereby returning a &lt;code&gt;DictReader&lt;/code&gt; object, as opposed to the &lt;code&gt;reader&lt;/code&gt; object of the &lt;code&gt;reader()&lt;/code&gt; function.&lt;br&gt;&lt;br&gt;
The second difference would be iterating through the &lt;code&gt;DictReader&lt;/code&gt; object an &lt;code&gt;OrderedDict&lt;/code&gt; object is returned for each line in the CSV file, as opposed to a &lt;code&gt;list&lt;/code&gt; object from a &lt;code&gt;reader&lt;/code&gt; object.&lt;br&gt;&lt;br&gt;
Due to the &lt;code&gt;OrderedDict&lt;/code&gt; object returned for each line in the CSV file, it makes it easy to index field values, as it would be indexed by the field headers rather than ambiguous index numbers.&lt;br&gt;&lt;br&gt;
A use-case is illustrated in the code block below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open CSV file in a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# create a DictReader object
&lt;/span&gt;  &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# iterate through DictReader object
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# get field values for the email field only
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    john-doe@bogusemail.com
    maryjacobs@bogusemail.com
    davesmith@bogusemail.com
    janestuart@bogusemail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code block prints only the field values under the &lt;em&gt;email&lt;/em&gt; header, by indexing with the field header - &lt;em&gt;'email'&lt;/em&gt;. This substantially improves code readability, due to how explicit it is.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-to-csv-files-using-the-raw-dictwriter-endraw-"&gt;
  &lt;/a&gt;
  Writing to CSV files using the &lt;code&gt;DictWriter()&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open CSV file to read comma separated values from it
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# create DictReader object using the DictReader function
&lt;/span&gt;  &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# open new CSV file to write comma separated values into it
&lt;/span&gt;  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;new_csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# create a list of the field names or headers of the field values that would be written to the file
&lt;/span&gt;    &lt;span class="n"&gt;field_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'first_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'last_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# create a DictWriter object using the DictWriter() function.
&lt;/span&gt;    &lt;span class="c1"&gt;# assign the field_names list above to the fieldnames parameter of the function
&lt;/span&gt;    &lt;span class="c1"&gt;# pass a tab character as the delimiting character
&lt;/span&gt;    &lt;span class="n"&gt;csv_dict_writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_csv_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fieldnames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# write the field header into the CSV file
&lt;/span&gt;    &lt;span class="n"&gt;csv_dict_writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writeheader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# iterate through the values read from the previous file
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# write the comma separated values to the new CSV file
&lt;/span&gt;      &lt;span class="n"&gt;csv_dict_writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output-file"&gt;
  &lt;/a&gt;
  Output file:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qRmtmUZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzwjfdhszr5hmrw1865f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRmtmUZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzwjfdhszr5hmrw1865f.PNG" alt="new_records_2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The code block above would read comma-separated values from one CSV file, and write these values into another CSV file, separating each field value in the new CSV file by a tab character. &lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;DictWriter()&lt;/code&gt; function is very similar to using the &lt;code&gt;writer()&lt;/code&gt; function, significant differences to be noted would be explained.&lt;/p&gt;

&lt;p&gt;Firstly, after opening the second CSV file for writing (within the second context manager), a list referenced by variable name field_names was created, the list items are the field headers or field names of the comma-separated values that would be written into the new CSV file, this explains why it is passed as an argument to the &lt;code&gt;DictWriter()&lt;/code&gt; function, by assigning it to the &lt;code&gt;fieldnames=&lt;/code&gt; parameter.  &lt;/p&gt;

&lt;p&gt;Secondly, after calling the &lt;code&gt;DictWriter()&lt;/code&gt; function, the next line contains a method of the &lt;code&gt;DictWriter&lt;/code&gt; object created in the previous line, the &lt;code&gt;writeheader()&lt;/code&gt; method, this just makes sure that the field headers or field names are included when the comma-separated values are written, field headers are written to the top of the CSV file.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully, the article has been able to put into perspective how easy it is to handle CSV files in Python, thanks to the &lt;code&gt;csv&lt;/code&gt; module, and further usage of concepts and methods explained should be a walk in the park.  &lt;/p&gt;

&lt;p&gt;If the CSV files would be worked with in a data-science-focused setting, using the &lt;code&gt;csv&lt;/code&gt; module is not advisable, the &lt;code&gt;pandas&lt;/code&gt; library should come in handy in such situations, as it contains functions and objects that are better suited for such tasks.&lt;br&gt;&lt;br&gt;
Although the objects that are very much compatible with pandas functions may be difficult to handle in a traditional Python program.&lt;br&gt;&lt;br&gt;
It should also be clear at this point why the traditional &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt; methods would not be feasible when handling CSV files.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hopefully-youve-learnt-how-to"&gt;
  &lt;/a&gt;
  Hopefully, you've learnt how to-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;read data from CSV files&lt;/li&gt;
&lt;li&gt;write to CSV files&lt;/li&gt;
&lt;li&gt;use dictionary readers to intuitively manipulate CSV files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/csv.html"&gt;Python documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=YYXdXT2l-Gg&amp;amp;list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU"&gt;Corey Schafer Series&lt;/a&gt; on youtube.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, connect with me on &lt;a href="https://twitter.com/__0th__"&gt;Twitter&lt;/a&gt; and &lt;a href="https://linkedin.com/in/0th"&gt;LinkedIn&lt;/a&gt;, let's vibe ✌🏽.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Connecting a gif API on ReactJS without a backend</title>
      <author>Clemenshemmerling</author>
      <pubDate>Fri, 17 Sep 2021 02:14:42 +0000</pubDate>
      <link>https://dev.to/korconnect/connecting-a-gif-api-on-reactjs-without-a-backend-3fj7</link>
      <guid>https://dev.to/korconnect/connecting-a-gif-api-on-reactjs-without-a-backend-3fj7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-simplest-way-to-connect-an-api-to-a-frontend-with-best-practices-applied-automatically"&gt;
  &lt;/a&gt;
  The simplest way to connect an API to a frontend with best practices applied automatically.
&lt;/h2&gt;

&lt;p&gt;We will create a gif search engine using KOR Connect.&lt;/p&gt;

&lt;p&gt;Prior to starting you will need to connect your API to KOR Connect, please do so following this documentation: &lt;a href="https://kor-comunity.gitlab.io/kor-connect/adir/GETSTARTED.html"&gt;https://kor-comunity.gitlab.io/kor-connect/adir/GETSTARTED.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After making the API connection above, create a React project using this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app giphy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the React project is created go to &lt;a href="http://korconnect.io"&gt;korconnect.io&lt;/a&gt; and click on “View Details.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZZH-7Fr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwteqtits70yaoc1kle1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZZH-7Fr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwteqtits70yaoc1kle1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside View Details select the “Snippets” tab and then choose React. Install the dependencies shown in the snippet. &lt;em&gt;Dependencies must be installed inside the project folder&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install — save react-google-recaptcha-v3 axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installing the necessary dependencies import the libraries in the snippet, also replace the provider with the one shown by the snippet.&lt;/p&gt;

&lt;p&gt;The index.js should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';  
import ReactDOM from 'react-dom';  
import './index.css';  
import App from './App';  
import reportWebVitals from './reportWebVitals';  
import {  
  GoogleReCaptchaProvider,  
} from 'react-google-recaptcha-v3';ReactDOM.render(  
  &amp;lt;GoogleReCaptchaProvider reCaptchaKey="yourSnippetKey"&amp;gt;  
    &amp;lt;App /&amp;gt;  
  &amp;lt;/GoogleReCaptchaProvider&amp;gt;,  
  document.getElementById('root')  
);  
// If you want to start measuring performance in your app, pass a function  
// to log results (for example: reportWebVitals(console.log))  
// or send to an analytics endpoint. Learn more: [https://bit.ly/CRA-vitals](https://bit.ly/CRA-vitals)  
reportWebVitals();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to the App.js file and replace it with the snippet, it should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect }  from 'react';  
import axios from 'axios';  
import {  
  useGoogleReCaptcha  
} from 'react-google-recaptcha-v3';const App = () =&amp;gt; {  
  const { executeRecaptcha } = useGoogleReCaptcha();// Create an event handler so you can call the verification on button click event or form submit  
  const handleGet = async () =&amp;gt; {  
    if (!executeRecaptcha) {  
      console.log('Execute recaptcha not yet available');  
    }const token = await executeRecaptcha('submit');  
    // Do whatever you want with the token  
    console.log(token);  
    axios.get('[https://yourSnippetURL/'](https://yourSnippetURL/'), { headers: { token, 'x-api-key': 'yourSnippetToken' } })  
    .then(response =&amp;gt; {  
      console.log(response)  
    })  
    .catch(error =&amp;gt; {  
      console.log(error)  
    })  
  };// You can use useEffect to trigger the verification as soon as the component being loaded  
  useEffect(() =&amp;gt; {  
    if (executeRecaptcha) {  
      handleGet();  
    }}, \[executeRecaptcha\]);useEffect(() =&amp;gt; {  
    const el = document.querySelector('.grecaptcha-badge');  
    el.style.display = 'none';  
  }, \[\]);return (  
    &amp;lt;&amp;gt;  
    &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;  
    &amp;lt;/&amp;gt;  
  );  
};export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now modify the code to adapt it to the application, to do this install a style library (we will use &lt;a href="https://material-ui.com/"&gt;https://material-ui.com/&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @material-ui/core
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In App.js import the following elements and useState.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect, useState } from "react";  
import Grid from "[@material](http://twitter.com/material)\-ui/core/Grid";  
import TextField from "[@material](http://twitter.com/material)\-ui/core/TextField";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add two constants to save the API data, the code should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const \[data, setData\] = useState(null);  
const { executeRecaptcha } = useGoogleReCaptcha();  
const \[headerInfo, setHeaderInfo\] = useState("");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create a function to allow users to search for any gif, add the necessary path in order to carry out this search feature. The code should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleSearch = async (event) =&amp;gt; {  
    const token = await executeRecaptcha("submit");  
    axios  
      .get(  
        \`[https://yourSnippetURL/v1/channels/search?q=${event.target.value}\`](https://yourSnippetURL/v1/channels/search?q=${event.target.value}`),  
        {  
          headers: {  
            token,  
            "x-api-key": "yourSnippetToken",  
          },  
        }  
      )  
      .then((response) =&amp;gt; {  
        setData(response.data.data);  
      })  
      .catch((error) =&amp;gt; {  
        console.log(error);  
      });  
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will modify the handleGet function to be able to store the response in a constant, the code should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleGet = async () =&amp;gt; {  
    if (!executeRecaptcha) {  
      console.log("Execute recaptcha not yet available");  
    }const token = await executeRecaptcha("submit");  
    // Do whatever you want with the token  
    console.log(token);  
    axios  
      .get("[https://](https://clemensk.korconnect.io/GIPHY/v1/gifs/random)[yourSnippetURL](https://yourSnippetURL/v1/channels/search?q=${event.target.value}`)[/v1/gifs/random](https://clemensk.korconnect.io/GIPHY/v1/gifs/random)", {  
        headers: {  
          token,  
          "x-api-key": "yourSnippetKey",  
        },  
      })  
      .then((response) =&amp;gt; {  
        setHeaderInfo(response.data.data);  
      })  
      .catch((error) =&amp;gt; {  
        console.log(error);  
      });  
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we will add an input to do the searches and we will also add a map to display our result, the App.js should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect, useState } from "react";  
import axios from "axios";  
import { useGoogleReCaptcha } from "react-google-recaptcha-v3";  
import Grid from "[@material](http://twitter.com/material)\-ui/core/Grid";  
import TextField from "[@material](http://twitter.com/material)\-ui/core/TextField";const App = () =&amp;gt; {  
  const \[data, setData\] = useState(null);  
  const { executeRecaptcha } = useGoogleReCaptcha();  
  const \[headerInfo, setHeaderInfo\] = useState("");const handleSearch = async (event) =&amp;gt; {  
    const token = await executeRecaptcha("submit");  
    axios  
      .get(  
        \`[https://clemensk.korconnect.io/GIPHY/v1/channels/search?q=${event.target.value}\`](https://clemensk.korconnect.io/GIPHY/v1/channels/search?q=${event.target.value}`),  
        {  
          headers: {  
            token,  
            "x-api-key": "2y91wVZrme9mN93HMeGBv5wH9JoxVm8m5Mv61BQN",  
          },  
        }  
      )  
      .then((response) =&amp;gt; {  
        setData(response.data.data);  
      })  
      .catch((error) =&amp;gt; {  
        console.log(error);  
      });  
  };// Create an event handler so you can call the verification on button click event or form submit  
  const handleGet = async () =&amp;gt; {  
    if (!executeRecaptcha) {  
      console.log("Execute recaptcha not yet available");  
    }const token = await executeRecaptcha("submit");  
    // Do whatever you want with the token  
    console.log(token);  
    axios  
      .get("[https://clemensk.korconnect.io/GIPHY/v1/gifs/random](https://clemensk.korconnect.io/GIPHY/v1/gifs/random)", {  
        headers: {  
          token,  
          "x-api-key": "2y91wVZrme9mN93HMeGBv5wH9JoxVm8m5Mv61BQN",  
        },  
      })  
      .then((response) =&amp;gt; {  
        setHeaderInfo(response.data.data);  
      })  
      .catch((error) =&amp;gt; {  
        console.log(error);  
      });  
  };// You can use useEffect to trigger the verification as soon as the component being loaded  
  useEffect(() =&amp;gt; {  
    if (executeRecaptcha) {  
      handleGet();  
    }  
  }, \[executeRecaptcha\]);return (  
    &amp;lt;&amp;gt;  
      &amp;lt;Grid xs={12}&amp;gt;  
        &amp;lt;h1 className="center-align"&amp;gt;Gif Explorer&amp;lt;/h1&amp;gt;  
      &amp;lt;/Grid&amp;gt;  
      &amp;lt;Grid  
        xs={12}  
        container  
        direction="row"  
        justifyContent="center"  
        alignItems="center"  
      &amp;gt;  
        &amp;lt;img src={headerInfo.image\_url} alt="logo" /&amp;gt;  
      &amp;lt;/Grid&amp;gt;  
      &amp;lt;Grid xs={12}&amp;gt;  
        &amp;lt;TextField  
          id="standard-basic"  
          label="Search"  
          fullWidth  
          onChange={(e) =&amp;gt; handleSearch(e)}  
        /&amp;gt;  
      &amp;lt;/Grid&amp;gt;  
      {data &amp;amp;&amp;amp; data.map(  
        (gif) =&amp;gt;  
          gif.banner\_image &amp;amp;&amp;amp; (  
            &amp;lt;Grid  
              xs={12}  
              md={3}  
              key={data.id}  
              container="row"  
              justifyContent="center"  
              alignItems="center"  
            &amp;gt;  
              &amp;lt;img src={gif.banner\_image} alt="image" /&amp;gt;  
            &amp;lt;/Grid&amp;gt;  
          )  
      )}  
    &amp;lt;/&amp;gt;  
  );  
};export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The gif finding app should be ready! KOR Connect is taking care of all the actions required behind the scenes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8NK-VOoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xijavm3sxjp1mhs0nzsm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8NK-VOoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xijavm3sxjp1mhs0nzsm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>aws</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Newsletter sharing font &amp; design tips 🎨</title>
      <author>Hua</author>
      <pubDate>Fri, 17 Sep 2021 02:10:14 +0000</pubDate>
      <link>https://dev.to/huatweets/newsletter-sharing-font-design-tips-22lg</link>
      <guid>https://dev.to/huatweets/newsletter-sharing-font-design-tips-22lg</guid>
      <description>&lt;p&gt;Hi everyone! I'm Hua and I run a design tool startup called Typogram! As part of my startup, I create FontDiscovery, a digestible weekly newsletter with fonts, colors, and design tips to help makers step up their game in marketing and get creative! If you feel like checking it out, you can subscribe &lt;a href="https://fonts.substack.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>startup</category>
      <category>saas</category>
      <category>fonts</category>
    </item>
    <item>
      <title>¿Como ser más productivo como desarrollador?</title>
      <author>Sebastian Daza</author>
      <pubDate>Fri, 17 Sep 2021 02:02:37 +0000</pubDate>
      <link>https://dev.to/sebasttiandaza/como-ser-mas-productivo-como-desarrollador-1lae</link>
      <guid>https://dev.to/sebasttiandaza/como-ser-mas-productivo-como-desarrollador-1lae</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AdkPwfEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpebk0kr2vccey68fl5q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AdkPwfEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpebk0kr2vccey68fl5q.jpg" alt="Imagen de programacion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nunca es mal momento para replantearte la forma en que trabajas. Para ser un mejor programador es importante optimizar nuestras rutinas y en las ocasiones que podamos automatizarlas, lo cual te llevara a ser más productivo y realizar tareas en el menor tiempo posible.&lt;/p&gt;

&lt;p&gt;A continuación te mostraré una serie de consejos e intentaré explicarlos lo más corto posible para que no te aburras, simplemente son buenos hábitos que te pueden ayudar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-hacer-una-lista-de-tareas"&gt;
  &lt;/a&gt;
  1. Hacer una lista de tareas
&lt;/h2&gt;

&lt;p&gt;Puede que suene tan básico, pero hacer esto te va a facilitar mucho la vida, así es, hacer una lista de tareas por cada día, te permitirá no estar saltándote una tarea a otra sin terminarlas, optimizar mucho tiempo y realizar paso a paso el trabajo que tiene por más difícil que este.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-elegir-la-mejor-herramienta"&gt;
  &lt;/a&gt;
  2. Elegir la mejor herramienta
&lt;/h2&gt;

&lt;p&gt;En el campo del desarrollo de software, un buen proyecto nace del trabajo que realizan los programadores, no de que lenguaje o herramienta , así sean las más utilizadas, si el software se interpone en tu actividad laboral, puede que sea necesario sustituirlo, el hecho de que una herramienta o lenguaje sea muy bueno no significa que sirva para solucionar todo tipo de problemas. Así que ten una buena elección de herramientas para cada tipo de proyectos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-planifica-y-toma-descansos"&gt;
  &lt;/a&gt;
  3. Planifica y toma descansos
&lt;/h2&gt;

&lt;p&gt;Si te saltas tu desayuno , es más probable que durante el día estés sin energías o molesto, el mismo principio es aplicable a la hora de tomar descansos, si te la pasas la mayor parte del tiempo trabajando te vas a agotar, y eso dificultad el trabajo, tus ideas y tu actitud.&lt;/p&gt;

&lt;p&gt;Recuerda el hecho de pasar más tiempo programando frente al computador no te hará mucho más productivo, no es lo mismo la cantidad que calidad, puede que ese error que tienes en el código lo soluciones mañana en minutos, lo que duraste hoy en horas y no pudiste.&lt;/p&gt;

&lt;p&gt;Considera programar descansos de 15 a 20 minutos durante el día.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-optimiza-todo-lo-que-puedas"&gt;
  &lt;/a&gt;
  4. Optimiza todo lo que puedas
&lt;/h2&gt;

&lt;p&gt;Optimiza, automatiza, optimiza, automatiza… no pierdas el tiempo en tareas repetitivas que ocupen tu tiempo, recuerda eres un programador y tu principal función es solucionar problemas, así que desarrolla algo o hazte de una herramienta que te quite esas tareas repetitivas, dale solución.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emprendeyourlifestyle.com/aplicaciones-productividad-organizado/frontend/"&gt;Aplicaciones para ser más productivo.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-gestiona-las-distracciones"&gt;
  &lt;/a&gt;
  5. Gestiona las distracciones
&lt;/h2&gt;

&lt;p&gt;Él &lt;a href="https://www.instagram.com/emprendeyourlifestyle/"&gt;Instagram&lt;/a&gt;, &lt;a href="https://www.tiktok.com/@emprendeyourlifestyle"&gt;TikTok&lt;/a&gt;, &lt;a href="https://twitter.com/SebasttianDaza"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/sebasttiandaza/"&gt;LinkedIn&lt;/a&gt;, en fin tus redes sociales, tomate tu tiempo para gestionarlas (en ese tiempo me puedes seguir ), pero no estés a cada radicó entrando a las aplicaciones, te hacen perder mucho tiempo, aun así seas creador de contenido, Centrate en tus objetivos del día.&lt;/p&gt;

&lt;p&gt;Y por último.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-libera-tu-mente-de-ideas"&gt;
  &lt;/a&gt;
  6. Libera tu mente de ideas
&lt;/h2&gt;

&lt;p&gt;Si eres programador, sabes que a cada rato estás pensando en como mejorar tu software, así que si se te ocurre cualquier idea, anotala y cuando tengas el tiempo la revisas, de esta manera no pierdes tus grandiosas ideas, que a cada minuto están fluyendo y no te desenfoca de tus tareas.&lt;/p&gt;

&lt;p&gt;Articulos que te pueden interesar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pro-webdesign.net/diseno-web/diferencia-entre-pagina-web-y-sitio-web/?fbclid=IwAR2aeV62PqV1mJqOlqxrG3HhFMIApRmqRPgrtovuep01k5lZQ3UmkJo2arE"&gt;Diferencia entre pagina web y sitio web&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emprendeyourlifestyle.com/12-herramienta-utiles-para-desarrolladores-web/frontend/"&gt;12 Herramienta utiles que todo desarrollar deberia de usar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si buscas una Agencia Digital enfocada en emprendedores esta es tu opcion:&lt;a href="https://ruwuay.com/?fbclid=IwAR1vjWwlCxXTvBNypHqBN0C1NT78I6wdQvYMsdI8Zf27JvU1E8Zw4G_bmYY"&gt;Ruwuay&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>javascript</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>Cheat Sheet for C++ </title>
      <author>Bhagya Mudgal</author>
      <pubDate>Fri, 17 Sep 2021 01:54:29 +0000</pubDate>
      <link>https://dev.to/bhagyamudgal/cheat-sheet-for-c-ljg</link>
      <guid>https://dev.to/bhagyamudgal/cheat-sheet-for-c-ljg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h2&gt;

&lt;p&gt;Basic syntax and functions from the C++ programming language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-boilerplate"&gt;
  &lt;/a&gt;
  1. Boilerplate
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Hi, I am Bhagya Mudgal"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-cout-ltlt"&gt;
  &lt;/a&gt;
  2. cout &amp;lt;&amp;lt;
&lt;/h3&gt;

&lt;p&gt;It prints output on the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"This is C++ Programming"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-cin-gtgt"&gt;
  &lt;/a&gt;
  3. cin &amp;gt;&amp;gt;
&lt;/h3&gt;

&lt;p&gt;It takes input from the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data types
&lt;/h2&gt;

&lt;p&gt;The data type is the type of data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-char-endraw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;char&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Typically a one byte. It is an character type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-int-endraw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;int&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Size depends on compiler, 2 bytes in 32-bit compiler and 4 bytes in 54-bit compiler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-raw-float-endraw-"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;float&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;A single-precision floating-point value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-raw-double-endraw-"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;double&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;A double-precision floating-point value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-raw-void-endraw-"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;void&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Represents the absence of the type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-raw-bool-endraw-"&gt;
  &lt;/a&gt;
  6. &lt;code&gt;bool&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Represent Boolean value i.e. either true or false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#escape-sequences"&gt;
  &lt;/a&gt;
  Escape Sequences
&lt;/h2&gt;

&lt;p&gt;In computer science, an escape sequence is a combination of characters that has a meaning other than the literal characters contained therein.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-alarm-or-beep"&gt;
  &lt;/a&gt;
  1. Alarm or beep
&lt;/h3&gt;

&lt;p&gt;It produces a beep sound.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-backspace"&gt;
  &lt;/a&gt;
  2. Backspace
&lt;/h3&gt;

&lt;p&gt;It adds a backspace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-newline"&gt;
  &lt;/a&gt;
  3. Newline
&lt;/h3&gt;

&lt;p&gt;Newline Character.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-carriage-return"&gt;
  &lt;/a&gt;
  4. Carriage return
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-tab"&gt;
  &lt;/a&gt;
  5. Tab
&lt;/h3&gt;

&lt;p&gt;It gives a tab space.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-backslash"&gt;
  &lt;/a&gt;
  6. Backslash
&lt;/h3&gt;

&lt;p&gt;It adds a backslash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;\
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-single-quote"&gt;
  &lt;/a&gt;
  7. Single quote
&lt;/h3&gt;

&lt;p&gt;It adds a single quotation mark.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-question-mark"&gt;
  &lt;/a&gt;
  8. Question mark
&lt;/h3&gt;

&lt;p&gt;It adds a question mark.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-octal-number"&gt;
  &lt;/a&gt;
  9. Octal Number
&lt;/h3&gt;

&lt;p&gt;It represents the value of an octal number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;nnn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-hexadecimal-number"&gt;
  &lt;/a&gt;
  10. Hexadecimal Number
&lt;/h3&gt;

&lt;p&gt;It represents the value of a hexadecimal number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;xhh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#11-null"&gt;
  &lt;/a&gt;
  11. Null
&lt;/h3&gt;

&lt;p&gt;The null character is usually used to terminate a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h2&gt;

&lt;p&gt;A comment is a code that is not executed by the compiler, and the programmer uses it to explain the code where needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-single-line-comment"&gt;
  &lt;/a&gt;
  1. Single line comment
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// It's a single line comment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-multiline-comment"&gt;
  &lt;/a&gt;
  2. Multi-line comment
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* It's a 
multi-line
comment
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h2&gt;

&lt;p&gt;It is a collection of characters surrounded by double quotes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-declaring-string"&gt;
  &lt;/a&gt;
  1. Declaring String
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Include the string library&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string&amp;gt;
&lt;/span&gt;&lt;span class="c1"&gt;// String variable&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;variable1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-append-endraw-function"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;append()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It is used to concatenate two strings&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Bhagya "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Mudgal"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Output: BhagyaMudgal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-raw-length-endraw-function"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;length()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the length of the string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Bhagya Mudgal"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"The length of the string is: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Output: The length of the string is: 13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-accessing-and-changing-string-characters"&gt;
  &lt;/a&gt;
  4. Accessing and changing string characters
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Output: Hillo World&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#maths"&gt;
  &lt;/a&gt;
  Maths
&lt;/h2&gt;

&lt;p&gt;C++ provides some built-in math functions that help the programmer to perform mathematical operations efficiently.&lt;/p&gt;

&lt;p&gt;To use functions these functions first include &lt;code&gt;cmath&lt;/code&gt; in your program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;cmath&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#1-raw-max-endraw-function"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;max()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the larger value among the given two values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 150&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-min-endraw-function"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;min()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the smaller value among the given two values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 75&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-raw-sqrt-endraw-function"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;sqrt()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the square root of the given number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-raw-ceil-endraw-function"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;ceil()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the value of x rounded up to its nearest integer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-raw-floor-endraw-function"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;floor()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the value of x rounded down to its nearest integer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-raw-pow-endraw-function"&gt;
  &lt;/a&gt;
  6. &lt;code&gt;pow()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the value of x to the power of y.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#control-statements"&gt;
  &lt;/a&gt;
  Control Statements
&lt;/h2&gt;

&lt;p&gt;Conditional statements are used to perform operations based on some condition.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-if-endraw-statement"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;if&lt;/code&gt; Statement
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// This block of code will get executed, if the condition is True&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-ifelse-endraw-statement"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;if-else&lt;/code&gt; Statement
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// If condition is True then this block will get executed&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// If condition is False then this block will get executed&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-raw-ifelse-if-endraw-statement"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;if-else if&lt;/code&gt; Statement
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Statements;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="c1"&gt;// Statements;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Statements&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-ternary-operator"&gt;
  &lt;/a&gt;
  4. Ternary Operator
&lt;/h3&gt;

&lt;p&gt;It is shorthand of an &lt;code&gt;if-else&lt;/code&gt; statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;expressionTrue&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;expressionFalse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-switch-case-statement"&gt;
  &lt;/a&gt;
  5. Switch Case Statement
&lt;/h3&gt;

&lt;p&gt;It allows a variable to be tested for equality against a list of values (cases).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;statement1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                          &lt;span class="n"&gt;statement2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nl"&gt;default:&lt;/span&gt; &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#iterative-statements-known-as-loops"&gt;
  &lt;/a&gt;
  Iterative Statements known as Loops
&lt;/h2&gt;

&lt;p&gt;Iterative statements facilitate programmers to execute any block of code lines repeatedly and can be controlled as per conditions added by the programmer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-while-endraw-loop"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;while&lt;/code&gt; Loop
&lt;/h3&gt;

&lt;p&gt;It iterates the block of code as long as a specified condition is True&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* condition */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* code block to be executed */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-dowhile-endraw-loop"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;do-while&lt;/code&gt; loop
&lt;/h3&gt;

&lt;p&gt;It is an exit controlled loop. It is very similar to the while loop with one difference, i.e., the body of the do-while loop is executed at least once even if the condition is False&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* code */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* condition */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-raw-for-endraw-loop"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;for&lt;/code&gt; loop
&lt;/h3&gt;

&lt;p&gt;It is used to iterate the statements or a part of the program several times. It is frequently used to traverse the data structures like the array and linked list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* code */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-break-statement"&gt;
  &lt;/a&gt;
  4. Break Statement
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;break&lt;/code&gt; keyword inside the loop is used to terminate the loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-continue-statement"&gt;
  &lt;/a&gt;
  5. Continue Statement
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;continue&lt;/code&gt; keyword skips the rest of the current iteration of the loop and returns to the starting point of the loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Reference is an alias for an already existing variable. Once it is initialized to a variable, it cannot be changed to refer to another variable. So, it's a const pointer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-references"&gt;
  &lt;/a&gt;
  Creating References
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Value1"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// var1 variable&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// reference to var1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pointers"&gt;
  &lt;/a&gt;
  Pointers
&lt;/h2&gt;

&lt;p&gt;Pointer is a variable that holds the memory address of another variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#declaration"&gt;
  &lt;/a&gt;
  Declaration
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;datatype&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;var_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;variable2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;Functions are used to divide an extensive program into smaller pieces. It can be called multiple times to provide reusability and modularity to the program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-function-definition"&gt;
  &lt;/a&gt;
  1. Function Definition
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;return_type&lt;/span&gt; &lt;span class="nf"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_type&lt;/span&gt; &lt;span class="n"&gt;parameter&lt;/span&gt;&lt;span class="p"&gt;...){&lt;/span&gt;
&lt;span class="c1"&gt;//code to be executed &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-function-call"&gt;
  &lt;/a&gt;
  2. Function Call
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#recursion"&gt;
  &lt;/a&gt;
  Recursion
&lt;/h2&gt;

&lt;p&gt;Recursion is when a function calls a copy of itself to work on a minor problem. And the function that calls itself is known as the Recursive function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;recurse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;recurse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#objectoriented-programming"&gt;
  &lt;/a&gt;
  Object-Oriented Programming
&lt;/h2&gt;

&lt;p&gt;It is a programming approach that primarily focuses on using objects and classes. The objects can be any real-world entities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-class-endraw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;class&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;A class in C++ is a user-defined type or data structure declared with keyword class that has data and functions as its members whose access is governed by the three access specifiers private, protected or public. By default access to members of a C++ class is private.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class_name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt; &lt;span class="c1"&gt;// Access specifier&lt;/span&gt;
&lt;span class="c1"&gt;// fields&lt;/span&gt;
&lt;span class="c1"&gt;// functions&lt;/span&gt;
&lt;span class="c1"&gt;// blocks&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-object-endraw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;object&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It is an instance of a class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;Class_name&lt;/span&gt; &lt;span class="n"&gt;ObjectName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-constructors"&gt;
  &lt;/a&gt;
  3. Constructors
&lt;/h3&gt;

&lt;p&gt;It is a special method that is called automatically as soon as the object is created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;className&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// The class&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt; &lt;span class="c1"&gt;// Access specifier&lt;/span&gt;
&lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Constructor&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Code With Harry"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;className&lt;/span&gt; &lt;span class="n"&gt;obj_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-encapsulation"&gt;
  &lt;/a&gt;
  4. Encapsulation
&lt;/h3&gt;

&lt;p&gt;Data encapsulation is a mechanism of bundling the data, and the functions that use them and data abstraction is a mechanism of exposing only the interfaces and hiding the implementation details from the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleEncap&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
&lt;span class="cm"&gt;/* Since we have marked these data members private, 
* any entity outside this class cannot access these 
* data members directly, they have to use getter and 
* setter functions. 
*/&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
&lt;span class="cm"&gt;/* Getter functions to get the value of data members. 
* Since these functions are public, they can be accessed 
* outside the class, thus provide the access to data members 
* through them 
*/&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getNum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;getCh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* Setter functions, they are called for assigning the values 
* to the private data members. 
*/&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setCh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="n"&gt;ExampleEncap&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getNum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#file-handling"&gt;
  &lt;/a&gt;
  File Handling
&lt;/h2&gt;

&lt;p&gt;File handling refers to reading or writing data from files. C++ provides some functions that allow us to manipulate data in the files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-creating-and-writing-to-a-text-file"&gt;
  &lt;/a&gt;
  1. Creating and writing to a text file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;fstream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Create and open a text file&lt;/span&gt;
&lt;span class="n"&gt;ofstream&lt;/span&gt; &lt;span class="n"&gt;MyFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"filename.txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Write to the file&lt;/span&gt;
&lt;span class="n"&gt;MyFile&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"File Handling in C++"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Close the file&lt;/span&gt;
&lt;span class="n"&gt;MyFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-reading-a-file"&gt;
  &lt;/a&gt;
  2. Reading a file
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;getline()&lt;/code&gt; function allows us to read the file line by line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-opening-a-file"&gt;
  &lt;/a&gt;
  3. Opening a File
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;open()&lt;/code&gt; method opens a file in the C++ program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ios&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;openmode&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#openmodes"&gt;
  &lt;/a&gt;
  openmodes:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file to read(default for ifstream).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;code&gt;out&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file to write(default for ofstream).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;binary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file in binary mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file and appends all the outputs at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;ate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file and moves the control to the end of the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;trunc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Removes the data in the existing file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;trunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;nocreate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file only if it already exists.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;nocreate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;noreplace&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file only if it does not already exist.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;noreplace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-closing-a-file"&gt;
  &lt;/a&gt;
  4. Closing a file
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;close()&lt;/code&gt; method closes the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;myfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exception-handling"&gt;
  &lt;/a&gt;
  Exception Handling
&lt;/h2&gt;

&lt;p&gt;An exception is an unusual condition that results in an interruption in the flow of the program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#try-and-catch-block"&gt;
  &lt;/a&gt;
  try and catch block
&lt;/h3&gt;

&lt;p&gt;A basic try-catch block in python. When the try block throws an error, the control goes to the catch block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// code to try&lt;/span&gt;
&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// If a problem arises, then throw an exception&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Block of code to handle errors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;I hope this C++ Cheat Sheet will help you and save your time.&lt;/p&gt;

&lt;p&gt;Feel free to connect with me on &lt;a href="https://bit.ly/3AgR0MT"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://bit.ly/2YZxZRq"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To know more about me and my projects visit my &lt;a href="https://bit.ly/3zOlSUS"&gt;Portfolio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, you can support me and &lt;a href="https://bit.ly/3nyg52d"&gt;Buy Me A Coffee&lt;/a&gt;. It encourages me to write more informational and useful content in the future.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>programming</category>
      <category>cheatsheet</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>part 3: 5 cool css properties</title>
      <author>Aya Bouchiha</author>
      <pubDate>Fri, 17 Sep 2021 01:02:37 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/part-3-5-cool-css-properties-lag</link>
      <guid>https://dev.to/ayabouchiha/part-3-5-cool-css-properties-lag</guid>
      <description>&lt;p&gt;Hi, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, and this is part 3 of 5 cool CSS properties.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-cool-css-properties-part-1-nkg/"&gt;part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-cool-css-properties-bdl"&gt;part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#word-spacing"&gt;
  &lt;/a&gt;
  word spacing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;word-spacing&lt;/strong&gt;: specify the space between words.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/jOwYdXq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lineheight"&gt;
  &lt;/a&gt;
  line-height
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;line-height&lt;/strong&gt;: specifies the line-height of specified content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/NWgXoJG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objectfit"&gt;
  &lt;/a&gt;
  object-fit
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;object-fit&lt;/strong&gt;: specifies how an image, video should be displayed and resized. &lt;a href="https://www.w3schools.com/cssref/css3_pr_object-fit.asp"&gt;more info&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/wvepOBK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#letterspacing"&gt;
  &lt;/a&gt;
  letter-spacing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;letter-spacing&lt;/strong&gt;: specifies the space between the letters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/dyRJwyY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cursor"&gt;
  &lt;/a&gt;
  cursor
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;cursor&lt;/strong&gt;: specify the cursor type.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/cssref/pr_class_cursor.asp"&gt;all cursor types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/vYZpvXy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;cursor&lt;/strong&gt;: specify the cursor type.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;letter-spacing&lt;/strong&gt;: specifies the space between the letters.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;object-fit&lt;/strong&gt;: specifies how an image, video should be displayed and resized.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;line-height&lt;/strong&gt;: specifies the line-height of specified content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;word-spacing&lt;/strong&gt;: specify the space between words.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested Posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-cool-css-properties-part-1-nkg/"&gt;part 1: (5 cool CSS cool properties)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-cool-css-properties-bdl"&gt;part 2: (5 cool CSS cool properties)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/57-essential-html-tags-to-know-as-a-beginnert-1f3f"&gt;57 Essential HTML Tags To Know As A Beginner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5"&gt;part-1: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-html-tags-that-almost-nobody-knows-nj8"&gt;Part-2: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to create a Profile README for your Organisation</title>
      <author>Michelle Mannering</author>
      <pubDate>Fri, 17 Sep 2021 00:59:03 +0000</pubDate>
      <link>https://dev.to/github/how-to-create-a-profile-readme-for-your-organisation-g2</link>
      <guid>https://dev.to/github/how-to-create-a-profile-readme-for-your-organisation-g2</guid>
      <description>&lt;p&gt;You've heard, seen, and probably have your own GitHub Profile README. Did you know you can now do the same for an organisation?&lt;/p&gt;

&lt;p&gt;If you are an org maintainer or owner, you can create an organisation profile README that will appear on your organisation's home page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-github-folder"&gt;
  &lt;/a&gt;
  Step 1. Create .github folder
&lt;/h2&gt;

&lt;p&gt;In order to create the organisation README, you'll need a special location for this README file. Just like a profile README is hosted under &lt;code&gt;github.com/YOUR_USERNAME/YOUR_USERNAME&lt;/code&gt;, an organisation README lives in a special place too.&lt;/p&gt;

&lt;ol&gt;1. Go to your organisation &lt;/ol&gt;

&lt;ol&gt;2. Click "New" to create a new repository &lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---cRaFXAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57q1r8pbjad1tuqx40oa.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---cRaFXAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57q1r8pbjad1tuqx40oa.JPG" alt="New"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;3. Type `.github` and you'll see that you've discovered a _secret_ &lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDtCFGsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3mps0ecihax9ug2w9gq.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDtCFGsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3mps0ecihax9ug2w9gq.JPG" alt="Secret"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;4. Make sure the repo is public and click "Create repository" &lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZAJ5QJep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pwot51zbe98lmenqr96.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZAJ5QJep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pwot51zbe98lmenqr96.JPG" alt="Create"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you have the repo setup for your organisation README.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-create-readmemd"&gt;
  &lt;/a&gt;
  Step 2. Create README.md
&lt;/h2&gt;

&lt;p&gt;Since organisation profile READMEs are a new feature, GitHub has added some fancy buttons to help make this step super easy.&lt;/p&gt;

&lt;p&gt;Now that you have your new &lt;code&gt;.github&lt;/code&gt; repo, go to this new repo you created in Step 1.&lt;/p&gt;

&lt;p&gt;On the right side of the screen, you should see a nice green box to help you set up your profile. Click the button that says "Add profile README".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EK5aTatn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rod6d6zpdy8ekphyjkyx.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EK5aTatn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rod6d6zpdy8ekphyjkyx.JPG" alt="Add"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will add a folder under your repo called profile, and will create a README.md file in this folder with some suggestions to help you get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7pCLh_71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylv30odw6r5d0l0qex1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pCLh_71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylv30odw6r5d0l0qex1u.png" alt="CleanShot 2021-09-16 at 10.47.19@2x"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also do this manually by clicking "Add file" --&amp;gt; "Create new file" and typing: &lt;code&gt;profile/readme.md&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0zT4Gtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ee50vw2efo9pgmmqeefx.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0zT4Gtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ee50vw2efo9pgmmqeefx.JPG" alt="README Profile folder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you have your README.md file created, it's time to add content!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-add-content"&gt;
  &lt;/a&gt;
  Step 3. Add content
&lt;/h2&gt;

&lt;p&gt;Like other READMEs, Profile READMEs are written in GitHub Flavoured Markdown. You can add text, images, gifs, and emojis. Add whatever you like to showcase your organisation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CRFdUJQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wm5c91n4zzdkazvqx0m.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRFdUJQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wm5c91n4zzdkazvqx0m.JPG" alt="README"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out some of our Markdown updates:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/github" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pM6fmKzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7fGFlBNG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2575/3da37f64-b46e-4fa5-bf86-01b63ba5f57b.png" alt="GitHub"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OwuwYieg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5RYSMLa0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/397557/afcf6be6-f639-43ac-bdba-4a6056f7aada.jpeg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/github/updates-to-github-markdown-making-it-easier-for-you-to-build-amazing-things-49fj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Updates to GitHub Markdown - Making it easier for you to build amazing things&lt;/h2&gt;
      &lt;h3&gt;Michelle Mannering for GitHub ・ Jan 8 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;As well as tips on creating your README file, complete with snippets of code for you to use:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/github" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pM6fmKzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7fGFlBNG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2575/3da37f64-b46e-4fa5-bf86-01b63ba5f57b.png" alt="GitHub"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OwuwYieg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5RYSMLa0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/397557/afcf6be6-f639-43ac-bdba-4a6056f7aada.jpeg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/github/how-to-create-a-github-profile-readme-jha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to create a GitHub Profile README&lt;/h2&gt;
      &lt;h3&gt;Michelle Mannering for GitHub ・ Jul 13 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#githunt&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#markdown&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#step-4-commit"&gt;
  &lt;/a&gt;
  Step 4. Commit
&lt;/h2&gt;

&lt;p&gt;Once you're happy with your Markdown file, commit your code. Don't forget, you can use the "Preview" button while writing your README file to see how your Markdown will render.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yP-hxCcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4ke4ltefxe9ad70his7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yP-hxCcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4ke4ltefxe9ad70his7.JPG" alt="Profile"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-show-it-off"&gt;
  &lt;/a&gt;
  Step 5. Show it off!
&lt;/h2&gt;

&lt;p&gt;Your organisation profile README is now be available on your organisation's Overview page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dbQEaloe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cp27x74q0btqtz425xl.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dbQEaloe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cp27x74q0btqtz425xl.JPG" alt="Profile README"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check out other organisation profile READMEs. Do you have an organisation README setup? Drop the link below so we can all see it!&lt;/p&gt;

&lt;p&gt;If you want to find out more about org profile READMEs, &lt;a href="https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/customizing-your-organizations-profile"&gt;check out the GitHub Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out our video on creating your org profile README:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oQnJ6XYp_YM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>ViteJS, Ionic Framework Beta v6, ReactJS And Capacitor Mobile Device Deployment</title>
      <author>Aaron K Saunders</author>
      <pubDate>Fri, 17 Sep 2021 00:53:03 +0000</pubDate>
      <link>https://dev.to/aaronksaunders/vitejs-ionic-framework-beta-v6-reactjs-and-capacitor-mobile-device-deployment-53e3</link>
      <guid>https://dev.to/aaronksaunders/vitejs-ionic-framework-beta-v6-reactjs-and-capacitor-mobile-device-deployment-53e3</guid>
      <description>&lt;p&gt;Since Ionic has announced the beta for v6, I wanted to see if I can start using Ionic Framework and Capacitor with &lt;a href="https://vitejs.dev/guide/#scaffolding-your-first-vite-project"&gt;ViteJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even if you don't use the &lt;a href="https://ionicframework.com/docs/react"&gt;Ionic ReactJS Components&lt;/a&gt;, this video shows you how you can deploy you ViteJS application to mobile devices using &lt;a href="https://capacitorjs.com/"&gt;Ionic Capacitor&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are looking for VueJS integration, I got you covered here. &lt;a href="https://www.youtube.com/watch?v=JnfAH1gXVdU"&gt;ViteJS Ionic Framework and VueJS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this video, the approach I took is to follow the instructions for creating a ReactJS project in ViteJS and then add in the Ionic packages with npm and then pasted in the required styles and it worked!!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uVjPBiNz5yk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-here"&gt;
  &lt;/a&gt;
  Start Here
&lt;/h2&gt;

&lt;p&gt;We are using the command &lt;code&gt;npm init vite@latest&lt;/code&gt; to get things rolling, see output below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Aarons-iMac:vite aaronksaunders&lt;span class="nv"&gt;$ &lt;/span&gt;npm init vite@latest
npx: installed 6 &lt;span class="k"&gt;in &lt;/span&gt;2.281s
✔ Project name: … vite-ionic-react
✔ Select a framework: › react
✔ Select a variant: › react-ts

Scaffolding project &lt;span class="k"&gt;in&lt;/span&gt; /Users/aaronksaunders/dev/projects/vite/vite-ionic-react...

Done. Now run:

  &lt;span class="nb"&gt;cd &lt;/span&gt;vite-ionic-react
  npm &lt;span class="nb"&gt;install
  &lt;/span&gt;npm run dev

Aarons-iMac:vite aaronksaunders&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;vite-ionic-react/
Aarons-iMac:vite-ionic-react aaronksaunders&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install
&lt;/span&gt;Aarons-iMac:vite-ionic-react aaronksaunders&lt;span class="nv"&gt;$ &lt;/span&gt;npm i @ionic/react@next  @ionic/react-router@next react-router react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that the project is set up and running, we need to make it an Ionic React Project. Add some ionic specific code by replacing the existing code in &lt;code&gt;App.jsx&lt;/code&gt; with the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./logo.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;IonContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonRouterOutlet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonToolbar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonHeader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonButtons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonBackButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonTitle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IonReactRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Core CSS required for Ionic components to work properly */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/core.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Basic CSS for apps built with Ionic */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/normalize.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/structure.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/typography.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Optional CSS utils that can be commented out */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/padding.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/float-elements.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/text-alignment.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/text-transformation.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/flex-utils.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/display.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonApp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonReactRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonRouterOutlet&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/detail"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;DetailPage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Redirect&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonRouterOutlet&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonReactRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonApp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/detail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonPage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonToolbar&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonToolbar&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonContent&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ion-padding"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;HOME PAGE&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonButton&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nextPage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;NEXT PAGE&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonContent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonPage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;DetailPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonPage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonToolbar&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonButtons&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonBackButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonBackButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonButtons&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Detail Page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonToolbar&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonContent&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ion-padding"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;DETAIL&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonItem&lt;/span&gt; &lt;span class="na"&gt;details&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonLabel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;More Information&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonLabel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonContent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonPage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the &lt;code&gt;index.html&lt;/code&gt;, replace the &lt;code&gt;viewport&lt;/code&gt; tag to make sure the page renders properly&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;meta
   &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt;
   &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport-fit=cover, width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"&lt;/span&gt;
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run the app now to see that it is working before we install on device, type the following command in project directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you should see your inoic project running with a Home Page and a Detail Page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-application-on-device"&gt;
  &lt;/a&gt;
  Running The Application On Device
&lt;/h2&gt;

&lt;p&gt;Add Capacitor to the project so we can deploy on device, I am just doing IOS here but a similar approach will work with Android&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @capacitor/core
npm &lt;span class="nb"&gt;install&lt;/span&gt; @capacitor/cli &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
npx cap init &lt;span class="nt"&gt;--web-dir&lt;/span&gt; dist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then build app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vite build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now lets run on ios, first add the platform&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @capacitor/ios
npx cap add ios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then run the app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx cap run ios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-capacitor-live-reload"&gt;
  &lt;/a&gt;
  Running Capacitor Live Reload
&lt;/h3&gt;

&lt;p&gt;make sure you select &lt;code&gt;custom&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ionic init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then modify the script section of the &lt;code&gt;package.json&lt;/code&gt; file. We need to do this so Ionic knows how to build the web application... there might be another way to accomplish this but I am not sure at this point. New code below is &lt;code&gt;"ionic:serve": "vite"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite preview"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"ionic:serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run the command below to run then application on device and have live reload working when you make changes in the website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
ionic cap run ios &lt;span class="nt"&gt;--livereload&lt;/span&gt; &lt;span class="nt"&gt;--external&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>vite</category>
      <category>react</category>
      <category>ionic</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>1 ano depois da transição de carreira. Sobrevivi? Rs</title>
      <author>camilamaschion</author>
      <pubDate>Fri, 17 Sep 2021 00:26:18 +0000</pubDate>
      <link>https://dev.to/camaschion/1-ano-depois-da-transicao-de-carreira-sobrevivi-rs-54ea</link>
      <guid>https://dev.to/camaschion/1-ano-depois-da-transicao-de-carreira-sobrevivi-rs-54ea</guid>
      <description>&lt;p&gt;Algumas pessoas tem me perguntado sobre como comecei na área de tecnologia, e eu já falei um pouco nesse texto &lt;a href="https://bit.ly/3EmkWtr"&gt;aqui&lt;/a&gt;, mas outras tem perguntado coisas sobre o “to be continued” da vida, sabe? Rs. Como tem sido meu dia a dia. Se eu sou boa na lógica..kkkkkrying, como me sinto nas entrevistas, e por ai vai.&lt;/p&gt;

&lt;p&gt;Então, pega a pipoquinha que eu vou tentar explicar em algumas linhas de texto como anda minha vida depois dessa mudança radical, será que eu to curtindo? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tvWlcQ8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/NipFetnQOuKhW/giphy.gif%3Fcid%3Decf05e470da1k2rih2i0do2ol9hezt780y3vjo7dmmhbsac6%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tvWlcQ8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/NipFetnQOuKhW/giphy.gif%3Fcid%3Decf05e470da1k2rih2i0do2ol9hezt780y3vjo7dmmhbsac6%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meu dia a dia é basicamente fazer a tela do aplicativo que tá aí na sua mão, é dar comportamento pra ela, deixar bonitinha e acessível. O fluxo é: a área de negócio pede, a galera de UX desenha e os devs desenvolvem, fim! Achou que eu ia dizer o que? “Eu fiquei rica!! Ganho rios de dinheiro e minha vida tem sido uma aventura like Mr. Robot” ? rs.&lt;/p&gt;

&lt;p&gt;Sobre a lógica, pensa em um Ser que chorou pra entender algoritmos! Sou o puro meme da Nazaré e um dos motivos que me faz amar o trabalho remoto é porque ninguém vê minhas lágrimas #brinks...será?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--owG3OfEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xUPGcjUQcWclgK94ti/giphy-downsized-large.gif%3Fcid%3Decf05e4766487fx7tcyk90a1m2vyv1spbjpkamse0epbzclb%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--owG3OfEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xUPGcjUQcWclgK94ti/giphy-downsized-large.gif%3Fcid%3Decf05e4766487fx7tcyk90a1m2vyv1spbjpkamse0epbzclb%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sei que tenho muita coisa pra entender ainda, e sigo o lema: “aceita que dói menos”! &lt;br&gt;
Eu não fiz uma facul na área e eu comecei nisso recentemente, poxa! Tô em um trabalho psicológico daqueles pra não me cobrar tanto. O que me tranquiliza também é que todo mundo me orienta a focar na base, então to correndo átras do preju todo dia (sério, TODO DIA MESMO, no estilo No Pain, No Gain!), eu faço exercícios de algoritmo no caderno, com diagramas e portugol. Aos poucos vou alimentando meu github com resoluções em Kotlin &lt;a href="https://github.com/CaMaschion/exercicios-kotlin"&gt;https://github.com/CaMaschion/exercicios-kotlin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8501GUMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/S3Pe5NZqgmE8Tl3NI5/giphy-downsized-large.gif%3Fcid%3Decf05e4760mivlai2l0yr9xm4wggvr6gq4ibqg8qr6kxh12s%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8501GUMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/S3Pe5NZqgmE8Tl3NI5/giphy-downsized-large.gif%3Fcid%3Decf05e4760mivlai2l0yr9xm4wggvr6gq4ibqg8qr6kxh12s%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Eu vejo muitas pessoas falando que tem que estudar muito pra ser Dev, mas gente, você tem que estudar muito pra ser bom em qualquer coisa que quiser fazer! &lt;/p&gt;

&lt;p&gt;Quando eu era advogada eu tinha que estudar demais também. Ainda mais em um país que sai um entendimento diferente das leis cada vez que vou até a cozinha pegar um copo d’água.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DGJZk1jG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/SqmkZ5IdwzTP2/giphy.gif%3Fcid%3Decf05e47vczrknf1i7ms6pkpi4oo506w2syrjnbiofhwv85z%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DGJZk1jG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/SqmkZ5IdwzTP2/giphy.gif%3Fcid%3Decf05e47vczrknf1i7ms6pkpi4oo506w2syrjnbiofhwv85z%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, posso ter exagerado aqui, mas esse é o espírito hehe. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_VaXNj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/3oEdv2lXxLYHjuafMQ/giphy.gif%3Fcid%3Decf05e47cnqu92ias5vz3nrxsqu0seuoeo6mdmgkbtdx1ykw%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_VaXNj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/3oEdv2lXxLYHjuafMQ/giphy.gif%3Fcid%3Decf05e47cnqu92ias5vz3nrxsqu0seuoeo6mdmgkbtdx1ykw%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sobre as entrevistas…não! Eu não me sinto segura fazendo entrevista e também não fiz muitas. O que posso falar é sobre a última. Quando decidi mudar de emprego, eu tive que fazer um teste e foi basicamente um relacionamento sério com o google! Muitas pesquisas por lá pra conseguir fazer. No dia da entrevista me perguntaram algumas coisas sobre o teste: como eu fiz e como pensei pra fazer daquela forma. Eu fui muito sincera. Mas também acho que quando se é Júnior tem a vantagem de pegarem "leve" nas entrevistas, ainda mais quando a pessoa vem de uma área totalmente aleatória rs.&lt;/p&gt;

&lt;p&gt;Bom, isso foi um bom resumo sobre as perguntas que me fizeram ultimamente. E acho que na verdade tem mais de 1 ano que estou na área, mas parecem 5 anos de tanta informação que eu fui absorvendo com o tempo e de como tudo é extremente dinâmico. O que eu adoro! Mas confesso que às vezes bate um surtinho do tipo: “crendeuspai, como vou aprender tudo isso…”, mas é “SÓ” manter a calma, respirar fundo, rezar 3 Ave Maria que no final provavelmente dá tudo certo, mas como eu disse, tô no começo ainda rsrs.&lt;/p&gt;

&lt;p&gt;Brincadeiras à parte, continuo dizendo pra todo mundo que essa foi a melhor decisão que eu tomei na vida!! =)&lt;/p&gt;

&lt;p&gt;Ah, em breve vou compartilhar com vocês aqui um outro texto de como eu to estudando, quais os livros e sites que to usando, e também como faço para não cair no desespero de estudar cada novidade que surge por aí! Mas já adianto que não tenho nenhum super segredo rs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_LKxntVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/lD76yTC5zxZPG/giphy.gif%3Fcid%3Decf05e47so4jlkzdjl8ugufgnidk58rhzhzz8ezqick2i0w3%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_LKxntVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/lD76yTC5zxZPG/giphy.gif%3Fcid%3Decf05e47so4jlkzdjl8ugufgnidk58rhzhzz8ezqick2i0w3%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
      <category>womenintech</category>
      <category>career</category>
    </item>
    <item>
      <title>Trying to reach terminal constancy using ANSI only colors</title>
      <author>Cason Adams</author>
      <pubDate>Fri, 17 Sep 2021 00:23:20 +0000</pubDate>
      <link>https://dev.to/casonadams/trying-to-reach-terminal-constancy-using-ansi-only-colors-4kho</link>
      <guid>https://dev.to/casonadams/trying-to-reach-terminal-constancy-using-ansi-only-colors-4kho</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PEYke3GK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17ozspwl34iyelxlk9fl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PEYke3GK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17ozspwl34iyelxlk9fl.png" alt="light mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yO7DHc3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly0mkvravq9cyaa9ie8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yO7DHc3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly0mkvravq9cyaa9ie8c.png" alt="dark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I really like spending as much of my day as a software engineer in the terminal.  I really wanted to get all the things to match colors, themes, etc.  Now keep in mind this doesn't always solve all the things but it is a good step forward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use terminal colors across vi, tmux, bat, fzf, and most other terminal applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#terminal-setup"&gt;
  &lt;/a&gt;
  Terminal setup
&lt;/h2&gt;

&lt;p&gt;I really like the &lt;a href="https://github.com/alacritty/alacritty"&gt;alacritty&lt;/a&gt; terminal and I needed to find a color style that works for me.  I ended up with something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;schemes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;dark&lt;/span&gt;
    &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#2B2B2B"&lt;/span&gt;
      &lt;span class="na"&gt;foreground&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#BBBBBB"&lt;/span&gt;

    &lt;span class="na"&gt;normal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#252525"&lt;/span&gt;
      &lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#DB5451"&lt;/span&gt;
      &lt;span class="na"&gt;green&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#548C26"&lt;/span&gt;
      &lt;span class="na"&gt;yellow&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#A89022"&lt;/span&gt;
      &lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#3A91CF"&lt;/span&gt;
      &lt;span class="na"&gt;magenta&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#A575BA"&lt;/span&gt;
      &lt;span class="na"&gt;cyan&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#009191"&lt;/span&gt;
      &lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#CCCCCC"&lt;/span&gt;
    &lt;span class="na"&gt;bright&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#666666"&lt;/span&gt;
      &lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#FFFFFF"&lt;/span&gt;

  &lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;light&lt;/span&gt;
    &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#E2E2E2"&lt;/span&gt;
      &lt;span class="na"&gt;foreground&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#666666"&lt;/span&gt;

    &lt;span class="na"&gt;normal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#FFFFFF"&lt;/span&gt;
      &lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#DB5451"&lt;/span&gt;
      &lt;span class="na"&gt;green&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#548C26"&lt;/span&gt;
      &lt;span class="na"&gt;yellow&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#A89022"&lt;/span&gt;
      &lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#3A91CF"&lt;/span&gt;
      &lt;span class="na"&gt;magenta&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#A575BA"&lt;/span&gt;
      &lt;span class="na"&gt;cyan&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#009191"&lt;/span&gt;
      &lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#AAAAAA"&lt;/span&gt;
    &lt;span class="na"&gt;bright&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#666666"&lt;/span&gt;
      &lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#000000"&lt;/span&gt;

&lt;span class="na"&gt;colors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*dark&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I can switch between &lt;code&gt;dark&lt;/code&gt; and &lt;code&gt;light&lt;/code&gt; mode by changing the &lt;code&gt;colors:&lt;/code&gt; value.  And because alacritty can do live reload of the config file.  A simple script to modify that value allows for light and dark mode switching via the command line.  And because I am using all ANSI colors for things everything changes in real time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vim-setup"&gt;
  &lt;/a&gt;
  Vim setup
&lt;/h2&gt;

&lt;p&gt;I created a &lt;a href="https://github.com/casonadams/vim-dim"&gt;color theme&lt;/a&gt; for vim based off &lt;a href="https://github.com/jeffkreeftmeijer/vim-dim"&gt;vim-dim&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt; I load the plugin like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~/.config/nvim/plugged'&lt;/span&gt;
  Plug &lt;span class="s1"&gt;'casonadams/vim-dim'&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; plug#end&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;colorscheme&lt;/span&gt; dim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be sure that &lt;code&gt;set termguicolors&lt;/code&gt; is not in the &lt;code&gt;vimrc&lt;/code&gt; or &lt;code&gt;init.vim&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shell-setup"&gt;
  &lt;/a&gt;
  shell setup
&lt;/h2&gt;

&lt;p&gt;I use &lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; and &lt;a href="https://github.com/sharkdp/bat"&gt;bat&lt;/a&gt; for fuzzy searching to set it to use ANSI colors do the following in a bashrc or zshrc file.&lt;/p&gt;

&lt;p&gt;snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;BAT_THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ansi"&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FZF_DEFAULT_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"
--inline-info &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--layout=reverse &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--ansi &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--color=16 &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;full working example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;BAT_THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ansi"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FZF_DEFAULT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"fd -uu"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FZF_CTRL_T_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FZF_DEFAULT_COMMAND&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; --type file"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FZF_ALT_C_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FZF_DEFAULT_COMMAND&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; --type directory"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FZF_DEFAULT_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"
--inline-info &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--layout=reverse &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--ansi &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--color=16 &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--preview-window=:hidden &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--preview '([[ -f {} ]] &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
    &amp;amp;&amp;amp; (bat --style=numbers --color=always {} &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
    || cat {})) &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
    || ([[ -d {} ]] &amp;amp;&amp;amp; (tree -C {} | less)) &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
    || echo {} 2&amp;gt; /dev/null | head -200' &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--bind '?:toggle-preview'
"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tmux-fun-iterm-dimming"&gt;
  &lt;/a&gt;
  tmux fun (iterm dimming)
&lt;/h2&gt;

&lt;p&gt;Modifying &lt;a href="https://github.com/tmux/tmux"&gt;tmux&lt;/a&gt; doesn't need to happen, but this is a fun trick to add using this color idea.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Currently this only looks good in dark mode
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;pane&lt;/span&gt;-&lt;span class="n"&gt;border&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;colour8&lt;/span&gt;,&lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour237&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;pane&lt;/span&gt;-&lt;span class="n"&gt;active&lt;/span&gt;-&lt;span class="n"&gt;border&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;blue&lt;/span&gt;,&lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour237&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt;-&lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;option&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;active&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;terminal&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;-&lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;option&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour237&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OgfDe-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06qf42lpjpdl69fr4qz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OgfDe-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06qf42lpjpdl69fr4qz2.png" alt="dim left"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7582g-9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y6jq1j1lkh7fi700625.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7582g-9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y6jq1j1lkh7fi700625.png" alt="dim right"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-tmux-color-settings-from-images"&gt;
  &lt;/a&gt;
  full tmux color settings from images
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;######### THEME  ##########
&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour8&lt;/span&gt;,&lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;colour7&lt;/span&gt;
&lt;span class="n"&gt;setw&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;-&lt;span class="n"&gt;mode&lt;/span&gt;-&lt;span class="n"&gt;colour&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;blue&lt;/span&gt;,&lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;colour7&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour8&lt;/span&gt;,&lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;colour7&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;-&lt;span class="n"&gt;command&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour8&lt;/span&gt;,&lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;colour7&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt;-&lt;span class="n"&gt;option&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;-&lt;span class="n"&gt;right&lt;/span&gt;-&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;-&lt;span class="n"&gt;option&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;-&lt;span class="n"&gt;left&lt;/span&gt;-&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;-&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="s2"&gt;" #{?pane_synchronized, ¤ ,}#{?window_zoomed_flag, ↕ ,}[#S-#{window_active_clients}] "&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;-&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="s2"&gt;"#(cd #{pane_current_path}; git branch --show-current) #H "&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;pane&lt;/span&gt;-&lt;span class="n"&gt;border&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;colour8&lt;/span&gt;,&lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour237&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;pane&lt;/span&gt;-&lt;span class="n"&gt;active&lt;/span&gt;-&lt;span class="n"&gt;border&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;blue&lt;/span&gt;,&lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour237&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt;-&lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;option&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;active&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;terminal&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;-&lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;option&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour237&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>vim</category>
      <category>tmux</category>
      <category>linux</category>
    </item>
  </channel>
</rss>
