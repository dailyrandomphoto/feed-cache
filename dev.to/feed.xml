<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learning Python- Intermediate course: Day 20, Tkinter — Types of Widgets part 3</title>
      <author>Aatmaj</author>
      <pubDate>Fri, 03 Sep 2021 08:00:57 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-20-tkinter-types-of-widgets-part-3-236h</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-20-tkinter-types-of-widgets-part-3-236h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-let-us-finish-off-with-the-remaining-tkinter-widgets"&gt;
  &lt;/a&gt;
  Today let us finish off with the remaining Tkinter widgets
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#summary-of-the-week"&gt;
  &lt;/a&gt;
  Summary of the week
&lt;/h3&gt;

&lt;p&gt;This week we learnt about Tkinter. We also checked out the various widgets supported by Tkinter. Today let us finish of the remaining widgets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-widgets-in-tkinter-continued"&gt;
  &lt;/a&gt;
  Types of widgets in Tkinter continued..........
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;menu&lt;br&gt;
The Menu widget is used to create various types of menus in the python application. The types of menus include top level, pull down, and pop up&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6aSytKc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dneeeyjxs7iklejbu0ul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6aSytKc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dneeeyjxs7iklejbu0ul.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;message&lt;br&gt;
The message widget is used to display a message in the application. It looks similar to the label widget.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5SY-cqi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucmw44cpxiyeui4suyp4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5SY-cqi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucmw44cpxiyeui4suyp4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Toplevel &lt;br&gt;
This widget is used to make a pop-up like effect. It creates another window. It can be used to represent some extra info. This window is managed internally by the system. (Window manager in Windows)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rlHPu7EK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ebocu6t1rmmhwv2rkuz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rlHPu7EK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ebocu6t1rmmhwv2rkuz.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
In this program, clicking on the open buttons activates the Toplevel widgets and creates another blank window. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Amxbuaqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ziog74u7zokjjsnjetab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amxbuaqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ziog74u7zokjjsnjetab.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VVo9by06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b9vbtrocqhf1zxlbrqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVo9by06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b9vbtrocqhf1zxlbrqt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Closing the main application window closes all windows. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;spinbox&lt;br&gt;
Spinbox is a less attractive version of the slider widget. Again, It is useful over the Entry widget when the user is forced to select only one value from the given range of values.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YXb9iMkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enctml1i4bl22p1ltmqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YXb9iMkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enctml1i4bl22p1ltmqe.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
We can also type in the spinbox.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bjRUtykx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/palfmmu22cvmq0yplbgt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bjRUtykx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/palfmmu22cvmq0yplbgt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;panelWindow&lt;br&gt;
The PanedWindow widget is a resizable frame widget. It contains one or more child widgets arranged horizontally or vertically. Unlike the frame widget, child widgets can be resized by the user, by moving the separator lines. These separator lines are called as sashes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwRnNmqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6arkvgzqmcm4dzesd93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwRnNmqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6arkvgzqmcm4dzesd93.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N46piwMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcwtxzo9sk16mcm6kzu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N46piwMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcwtxzo9sk16mcm6kzu1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LabelFrame&lt;br&gt;
LabelFrame is also a type of frame, but we can add borders to the widhets.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m1ph2nAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gvqihl1kkebol8bm9vn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m1ph2nAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gvqihl1kkebol8bm9vn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MessageBox &lt;br&gt;
The messagebox module is used to display the message boxes in the python applications.&lt;br&gt;
It is a kind of alert in the application. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9wuZcWi8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dp32v1vpv1v92ci8jf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9wuZcWi8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dp32v1vpv1v92ci8jf1.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zvHCsFED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqgpg5k51misbveeqzyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zvHCsFED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqgpg5k51misbveeqzyd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Image credits&lt;/strong&gt;- All images in the text are my own screenshots.&lt;/p&gt;




&lt;p&gt;🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥&lt;br&gt;
Follow me on GitHub for updates.......&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Getting Started with Appwrite Realtime for Web Developers</title>
      <author>Damodar Lohani</author>
      <pubDate>Fri, 03 Sep 2021 07:46:12 +0000</pubDate>
      <link>https://dev.to/appwrite/getting-started-with-appwrite-realtime-for-web-developers-45o6</link>
      <guid>https://dev.to/appwrite/getting-started-with-appwrite-realtime-for-web-developers-45o6</guid>
      <description>&lt;p&gt;For all those who have been waiting for Appwrite's realtime service, we have good news. The latest version of Appwrite has been released with a realtime service and using it is as simple as Appwrite's REST API. There's been a few updates since we released the realtime alpha and the getting started tutorial. In this tutorial, we learn to use Appwrite's updated realtime service by building a simple &lt;a href="https://infallible-villani-a88afd.netlify.app/"&gt;Kanban board project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6eVAhrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67l9rabvrwzl5e08xcay.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6eVAhrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67l9rabvrwzl5e08xcay.gif" alt="Social Media posts (7)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  📝 Prerequisites
&lt;/h2&gt;

&lt;p&gt;In order to continue with this tutorial, you need to have access to an Appwrite console with a project. If you have not already installed Appwrite, please do so. Installing Appwrite is really simple following Appwrite's official &lt;a href="https://appwrite.io/docs/installation"&gt;installation docs&lt;/a&gt;. Installation should only take around 2 minutes. Once installed, login to your console and &lt;strong&gt;create a new Project&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-database"&gt;
  &lt;/a&gt;
  💾 Setup Database
&lt;/h2&gt;

&lt;p&gt;Once you have logged in to the console and selected your project, from the left sidebar in the dashboard click on the &lt;strong&gt;Database&lt;/strong&gt; option to get to the database page.&lt;/p&gt;

&lt;p&gt;Once on the database page, click on the &lt;strong&gt;Add Collection&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1hlsFjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2o41fj3ogxyzzz1iq1q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1hlsFjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2o41fj3ogxyzzz1iq1q.png" alt="Create Collection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the dialog that pops up, set the collection name to &lt;strong&gt;Tasks&lt;/strong&gt; and click on the &lt;strong&gt;Create&lt;/strong&gt; button to create the collection, and you will be redirected to the new collection's page where we can define its rules. Define the following rules, then click the &lt;strong&gt;Update&lt;/strong&gt; button. Also note down the &lt;strong&gt;Collection ID&lt;/strong&gt; from the right side of the settings page as we will need that later in our code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Title&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: Title&lt;/li&gt;
&lt;li&gt;Key: title&lt;/li&gt;
&lt;li&gt;Rule Type: Text&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Column&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: Column&lt;/li&gt;
&lt;li&gt;Key: column&lt;/li&gt;
&lt;li&gt;Rule Type: Text&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;userId&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: UserId&lt;/li&gt;
&lt;li&gt;Key: userId&lt;/li&gt;
&lt;li&gt;Rule Type: Text&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o_Iv6c_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbzlri8sjfnua8xg281u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o_Iv6c_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbzlri8sjfnua8xg281u.png" alt="Add Collection Rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the permissions, set the read and write permission both to &lt;code&gt;role:member&lt;/code&gt; so that any logged in user can read and write to collection.&lt;/p&gt;

&lt;p&gt;Now that the collection we can begin working with our project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-add-web-platform"&gt;
  &lt;/a&gt;
  ➕️ Add Web Platform
&lt;/h2&gt;

&lt;p&gt;To initialize the Appwrite SDK and start interacting with Appwrite services, you first need to add a new web platform to your project. To add a new platform, go to your Appwrite console, select your project, and click the &lt;strong&gt;Add Platform&lt;/strong&gt; button on the project Dashboard. Choose &lt;strong&gt;New web app&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the dialog box that appears enter a name and a hostname. Your hostname will be &lt;strong&gt;localhost&lt;/strong&gt; (or your domain if not running locally).&lt;/p&gt;

&lt;p&gt;By registering a new platform, you are allowing your app to communicate with the Appwrite API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-project-and-dependencies"&gt;
  &lt;/a&gt;
  ⚙️ Setup Project and Dependencies
&lt;/h2&gt;

&lt;p&gt;We have a starter project for a simple Kanban board with Svelte. You can download the starter project from our &lt;a href="https://github.com/lohanidamodar/demo-web-realtime"&gt;GitHub Repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you've downloaded project locally, open it in your favorite text editor. Open &lt;strong&gt;src/service/appwrite.js&lt;/strong&gt;, and update your endpoint and your collection id. If you look at this file, you'll see we have all the methods for adding, deleting and updating tasks, as well as login and logout methods in place. We are importing and using these functions in &lt;strong&gt;src/App.svelte&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To run this project, from your terminal first run &lt;code&gt;npm install&lt;/code&gt; to install the dependencies and then run &lt;code&gt;npm run dev&lt;/code&gt; to run the project locally in development mode. You can now access the app from your browser at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To avoid cookie issues, please ensure the endpoint URL is using the same protocal (&lt;strong&gt;http&lt;/strong&gt; or &lt;strong&gt;https&lt;/strong&gt;) as your client.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Right now if you add tasks, you will only be able to view it after you refresh your page. Also if you update or delete tasks, you will be able to view the changes after refreshing the page only. We will solve this by using Appwrite's realtime service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#realtime"&gt;
  &lt;/a&gt;
  👩‍🔧 Realtime
&lt;/h2&gt;

&lt;p&gt;We will start by adding a subscribe method to &lt;strong&gt;src/service/appwrite.js&lt;/strong&gt; that will connect to Appwrite realtime server and listen to any changes that we want to listen to. For our use case, we will be listening to changes to documents of our tasks collection that we created above. To do that write following function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appwrite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`collections.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tasksCollection&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.documents`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method will accept a callback and will subscribe to &lt;strong&gt;collections.[ID].documents&lt;/strong&gt; so that we will get updates to any changes made to the documents of our tasks collection. The callback will be called every time server sends any update.&lt;/p&gt;

&lt;p&gt;Now if we go to &lt;strong&gt;src/App.svelte&lt;/strong&gt;, there is already a function named &lt;code&gt;subscribe&lt;/code&gt;, we just need to update the function body to subscribe to changes and update our tasks array. Update the subscribe function as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;appwrite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;database.documents.create&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tasks&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;database.documents.update&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;database.documents.delete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are calling the subscribe method that we added earlier in &lt;strong&gt;src/service/appwrite.js&lt;/strong&gt; and passing our callback function that receives the realtime payload that server sends.&lt;/p&gt;

&lt;p&gt;The payload we receive will contain an &lt;code&gt;event&lt;/code&gt;, and as we are subscribing to &lt;strong&gt;collections.[ID].documents&lt;/strong&gt;, the event will be one of &lt;code&gt;database.documents.create&lt;/code&gt;, &lt;code&gt;database.documents.update&lt;/code&gt; or &lt;code&gt;database.documents.delete&lt;/code&gt;. So we are handling each event and the payload received with that event will be the related document.&lt;/p&gt;

&lt;p&gt;Based on the event, we are adding, removing or updating our tasks array to reflect the changes. As we update the tasks array, svelte will automatically handle the UI updates. Easy as that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🥂 Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this tutorial building a realtime Kanban board as much as I enjoyed wirting this tutorial and building project. You can view the live preview of the application &lt;a href="https://infallible-villani-a88afd.netlify.app/"&gt;here&lt;/a&gt; and the complete source code for this application is available at &lt;a href="https://github.com/lohanidamodar/demo-web-realtime/tree/final"&gt;GitHub repository&lt;/a&gt;. Feel free to get back to us if you have any queries or comments. Excited to see what the community will build with Flutter and Appwrite Realtime. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  🎓 Learn More
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/getting-started-with-web"&gt;Getting Started With Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/playground-for-web"&gt;Web Playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>opensource</category>
      <category>news</category>
    </item>
    <item>
      <title>Top 5 Websites to Learn Web Development </title>
      <author>Ujjwal (UG THE SEP)</author>
      <pubDate>Fri, 03 Sep 2021 06:44:47 +0000</pubDate>
      <link>https://dev.to/ug/top-5-website-to-learn-web-development-2k4h</link>
      <guid>https://dev.to/ug/top-5-website-to-learn-web-development-2k4h</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kWJNTUIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dt1rgy7i4s5elqsudexe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kWJNTUIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dt1rgy7i4s5elqsudexe.png" alt="Web trend"&gt;&lt;/a&gt;&lt;br&gt;
Due to &lt;strong&gt;COVID-19&lt;/strong&gt; Pandemic the whole world had shifted to Digital Platform which affect the website field a lot that result to a better future of upcoming generations...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web Development&lt;/strong&gt; becomes so popular during 2020 to 2021 that near about 252,000 websites are created daily.&lt;br&gt;
So In this blog we are going to explore 5 awesome and &lt;strong&gt;free&lt;/strong&gt; website to learn &lt;strong&gt;web development&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-mdn-mozilla-developer-network"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://developer.mozilla.org/en-US/docs/Web"&gt;MDN (Mozilla Developer Network)&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u14_TpV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ed7617zvuzav1o9cvb2q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u14_TpV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ed7617zvuzav1o9cvb2q.jpg" alt="MDN"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MDN&lt;/strong&gt; is one of the best source for learning &lt;strong&gt;Web Development&lt;/strong&gt;. It's give in depth explanation about all the concept needed while learning Web development i.e. JavaScript, Html, CSS, React. It is a trustable website to learn web-development. MDN is my favourite website for Learning Web development.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__wikipedia--container"&gt;
  &lt;div class="ltag__wikipedia--header"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sew3uq9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/wikipedia-logo-0a3e76624c7b1c3ccdeb9493ea4add6ef5bd82d7e88d102d5ddfd7c981efa2e7.svg" class="ltag__wikipedia--logo" alt="Wikipedia Logo"&gt;
    &lt;a href="https://en.wikipedia.org/wiki/MDN_Web_Docs" rel="noopener noreferrer"&gt;MDN Web Docs&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="ltag__wikipedia--extract"&gt;&lt;p&gt;&lt;b&gt;MDN Web Docs&lt;/b&gt;, previously &lt;b&gt;Mozilla Developer Network&lt;/b&gt; and formerly &lt;b&gt;Mozilla Developer Center&lt;/b&gt;, is a documentation repository and learning resource for web developers used by Mozilla, Microsoft, Google, and Samsung. The project was started by Mozilla in 2005 as a unified place for documentation about open web standards, Mozilla's own projects, and developer guides. In 2017, Microsoft, Google, and Samsung announced that they would shut down their own documentation projects and move all their documentation to MDN Web Docs.&lt;/p&gt;&lt;/div&gt;
  &lt;div class="ltag__wikipedia--btn--container"&gt;
    
      &lt;a href="https://en.wikipedia.org/wiki/MDN_Web_Docs" rel="noopener noreferrer"&gt;View on Wikipedia&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#2-coursera"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.coursera.org/in"&gt;Coursera&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8iGMHcgL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb3knoid2ba39krzhn71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8iGMHcgL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb3knoid2ba39krzhn71.png" alt="Coursera"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coursera&lt;/strong&gt; is an online learning platform that offers thousands of courses for &lt;strong&gt;free&lt;/strong&gt; with an &lt;strong&gt;valuable certificate&lt;/strong&gt;. Coursera provides you experienced professors you teaches you. It provide you list of video lecture on a particular topic. You can learn full stack web development from here. If you want to gain certificate of any course then this is a best place to do so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-of-the-useful-courses-by-coursera"&gt;
  &lt;/a&gt;
  Some of the useful courses by Coursera
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/specializations/web-design"&gt;Website Design for Everybody&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/html-css-javascript-for-web-developers"&gt;HTML, CSS, and JavaScript for Web Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/specializations/full-stack-react"&gt;Full-Stack Web Development using React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/specializations/django"&gt;Django for Everybody&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Go add Enroll Now&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag__wikipedia--container"&gt;
  &lt;div class="ltag__wikipedia--header"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sew3uq9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/wikipedia-logo-0a3e76624c7b1c3ccdeb9493ea4add6ef5bd82d7e88d102d5ddfd7c981efa2e7.svg" class="ltag__wikipedia--logo" alt="Wikipedia Logo"&gt;
    &lt;a href="https://en.wikipedia.org/wiki/Coursera" rel="noopener noreferrer"&gt;Coursera&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="ltag__wikipedia--extract"&gt;&lt;p&gt;&lt;b&gt;Coursera Inc.&lt;/b&gt; is an American massive open online course provider founded in 2012 by Stanford University computer science professors Andrew Ng and Daphne Koller. Coursera works with universities and other organizations to offer online courses, certifications, and degrees in a variety of subjects. In 2021 it was estimated that about 150 universities offered more 4,000 courses through Coursera.&lt;/p&gt;&lt;/div&gt;
  &lt;div class="ltag__wikipedia--btn--container"&gt;
    
      &lt;a href="https://en.wikipedia.org/wiki/Coursera" rel="noopener noreferrer"&gt;View on Wikipedia&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#3-udemy"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zzBrbciD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qb600duak36s4cdy06g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zzBrbciD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qb600duak36s4cdy06g.png" alt="Udemy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well Udemy is a paid site for learning Web Development but It also provides some of the free course but according to my point of view free course are not too good so if you can afford Udemy Courses so, I will recommend you take it because the price is worth...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#udemy-paid-web-development-courses"&gt;
  &lt;/a&gt;
  Udemy Paid Web Development Courses
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/the-complete-web-development-bootcamp/"&gt;The Complete 2021 Web Development Bootcamp- 91% off&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/the-web-developer-bootcamp/"&gt;The Web Developer Bootcamp 2021- 91% off&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Today is flash sale so go and enroll for just 6.23 dollar (455 INR) Only&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#udemy-free-web-development-courses"&gt;
  &lt;/a&gt;
  Udemy free Web Development Courses
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/web-developer-course-on-creating-a-business-website/"&gt;Web Developer Course HTML CSS JavaScript Learn Web Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/refactoru-getting-started-as-a-web-developer/"&gt;Getting Started as a Web Developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__wikipedia--container"&gt;
  &lt;div class="ltag__wikipedia--header"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sew3uq9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/wikipedia-logo-0a3e76624c7b1c3ccdeb9493ea4add6ef5bd82d7e88d102d5ddfd7c981efa2e7.svg" class="ltag__wikipedia--logo" alt="Wikipedia Logo"&gt;
    &lt;a href="https://en.wikipedia.org/wiki/Udemy" rel="noopener noreferrer"&gt;Udemy&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="ltag__wikipedia--extract"&gt;&lt;p&gt;&lt;b&gt;Udemy, Inc.&lt;/b&gt; is an American massive open online course (MOOC) provider aimed at professional adults and students. It was founded in May 2010 by Eren Bali, Gagan Biyani, and Oktay Caglar.&lt;/p&gt;&lt;/div&gt;
  &lt;div class="ltag__wikipedia--btn--container"&gt;
    
      &lt;a href="https://en.wikipedia.org/wiki/Udemy" rel="noopener noreferrer"&gt;View on Wikipedia&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#freecodecamp"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/"&gt;Freecodecamp&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wgGtkSzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jku40u1h1pz8z1btmez.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wgGtkSzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jku40u1h1pz8z1btmez.jpg" alt="Freecodecamp"&gt;&lt;/a&gt;&lt;br&gt;
Freecodecamp is a non-profit organization which teaches real basics of Computer Science like Data Structure, Python, HTML, CSS, JavaScript, C, C++ etc. As they are non-profit organization their all course are 100% with valuable certificate. They achieve this all through their video lessons, articles etc. It is a great site for becoming a Full-Stack Web Developer.&lt;/p&gt;

&lt;p&gt;They run a youtube channel named &lt;a href="https://www.youtube.com/c/Freecodecamp"&gt;freecodecamp&lt;/a&gt; you can &lt;br&gt;
learn everything from their about Web Development and many more...&lt;/p&gt;


&lt;div class="ltag__wikipedia--container"&gt;
  &lt;div class="ltag__wikipedia--header"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sew3uq9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/wikipedia-logo-0a3e76624c7b1c3ccdeb9493ea4add6ef5bd82d7e88d102d5ddfd7c981efa2e7.svg" class="ltag__wikipedia--logo" alt="Wikipedia Logo"&gt;
    &lt;a href="https://en.wikipedia.org/wiki/FreeCodeCamp" rel="noopener noreferrer"&gt;FreeCodeCamp&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="ltag__wikipedia--extract"&gt;&lt;p&gt;&lt;b&gt;freeCodeCamp&lt;/b&gt; is a non-profit organization that consists of an interactive learning web platform, an online community forum, chat rooms, online publications and local organizations that intend to make learning web development accessible to anyone. Beginning with tutorials that introduce students to HTML, CSS and JavaScript, students progress to project assignments that they complete either alone or in pairs. Upon completion of all project tasks, students are partnered with other nonprofits to build web applications, giving the students practical development experience.&lt;/p&gt;&lt;/div&gt;
  &lt;div class="ltag__wikipedia--btn--container"&gt;
    
      &lt;a href="https://en.wikipedia.org/wiki/FreeCodeCamp" rel="noopener noreferrer"&gt;View on Wikipedia&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#w3schools"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.w3schools.com/"&gt;W3Schools&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHxsAUBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2rbp8jdfva2lfzocgve.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHxsAUBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2rbp8jdfva2lfzocgve.jpg" alt="W3Schools"&gt;&lt;/a&gt;&lt;br&gt;
Very Similar to FreeCodeCamp, W3Schools is a website where you can learn all about programming and web development. You’ll be able to learn the three core technologies of the web which are HTML, CSS, and Javascript with 100+ exercise of all topics...&lt;/p&gt;


&lt;div class="ltag__wikipedia--container"&gt;
  &lt;div class="ltag__wikipedia--header"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sew3uq9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/wikipedia-logo-0a3e76624c7b1c3ccdeb9493ea4add6ef5bd82d7e88d102d5ddfd7c981efa2e7.svg" class="ltag__wikipedia--logo" alt="Wikipedia Logo"&gt;
    &lt;a href="https://en.wikipedia.org/wiki/W3Schools" rel="noopener noreferrer"&gt;W3Schools&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="ltag__wikipedia--extract"&gt;&lt;p&gt;&lt;b&gt;W3Schools&lt;/b&gt; is a freemium educational website for learning coding online.&lt;/p&gt;&lt;/div&gt;
  &lt;div class="ltag__wikipedia--btn--container"&gt;
    
      &lt;a href="https://en.wikipedia.org/wiki/W3Schools" rel="noopener noreferrer"&gt;View on Wikipedia&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;
 


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So If you want to learn Web Development by yourself then MDN is the best one but don't depend only on it have a look on all resources provided above because all of them have their own meaning and way of teaching...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you found this post helpful then please give it a unicorn and share to those who wanted to learn Web Development. Your support will be appreciated!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Follow: &lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__648350"&gt;
  
    .ltag__user__id__648350 .follow-action-button {
      background-color: #fad20a !important;
      color: #fb9660 !important;
      border-color: #fad20a !important;
    }
  
    &lt;a href="/ug" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6JMttXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hoYHdU6J--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/648350/1f25f109-0b5a-4248-8308-8950d68f9638.jpeg" alt="ug image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/ug"&gt;Ujjwal (UG THE SEP)&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/ug"&gt;I am a desktop developer from India currently learning python. Exploring the world of programming&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
 for such more post like this


&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ug" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6JMttXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hoYHdU6J--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/648350/1f25f109-0b5a-4248-8308-8950d68f9638.jpeg" alt="ug"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ug/5-project-to-master-in-python-for-beginners-4blm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Project to Master in Python for Beginners&lt;/h2&gt;
      &lt;h3&gt;Ujjwal (UG THE SEP) ・ Aug 23 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ug" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6JMttXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hoYHdU6J--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/648350/1f25f109-0b5a-4248-8308-8950d68f9638.jpeg" alt="ug"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ug/most-useful-sequences-in-python-for-beginners-3ac3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Most Useful Sequences in Python for Beginners👨‍💻&lt;/h2&gt;
      &lt;h3&gt;Ujjwal (UG THE SEP) ・ Aug 29 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Hire Custom Java Development Company</title>
      <author>Polosoft Technologies</author>
      <pubDate>Fri, 03 Sep 2021 06:05:27 +0000</pubDate>
      <link>https://dev.to/polosofttech/hire-custom-java-development-company-2k5n</link>
      <guid>https://dev.to/polosofttech/hire-custom-java-development-company-2k5n</guid>
      <description>&lt;p&gt;Java is an object-oriented &amp;amp; platform-independent language that is widely used for web and enterprise applications. It enables the engineering of robust, scalable, and cross-functional solutions and technology ecosystems capable of addressing real-world business problems. From web apps to native apps, Android apps, IoT-based applications, enterprise apps, and more, there is a range of apps that rely on this open-source language. &lt;/p&gt;

&lt;p&gt;Polosoft Technologies offers Java application development services to companies to develop superior solutions that put you over the competition and drive your digital acceleration.&lt;/p&gt;

&lt;p&gt;From simple to complex applications, Java can render them all with aplomb. If you want to rope in an expert &lt;a href="https://www.polosoftech.com/technology/java-development-company"&gt;Java application development&lt;/a&gt; partner for your enterprise, Java India is the name you can trust. Our team offers a comprehensive technical expertise and domain knowledge that makes us capable of developing cross-platform applications with the latest technologies of Java.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpD2i2OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tacr7nhuqr7gif2fy2nm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpD2i2OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tacr7nhuqr7gif2fy2nm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-hire-a-java-development-company"&gt;
  &lt;/a&gt;
  Why hire a Java development company?
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#the-write-once-run-anywhere-promise"&gt;
  &lt;/a&gt;
  The “write once, run anywhere” promise
&lt;/h3&gt;

&lt;p&gt;This guarantee is the linchpin of Java. As an object-oriented and open-source programming language, &lt;a href="https://www.polosoftech.com/technology/java-development-company"&gt;Java&lt;/a&gt;allows you to write the code once and then run it on different operating systems or devices. It is platform-neutral, which means you can reuse the coding language for cross-platform software development, where code reusability is paramount. These attributes give Java a dynamic and flexible nature, precisely what a business counts on when looking for a software solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-robust-and-secure-character"&gt;
  &lt;/a&gt;
  A robust and secure character
&lt;/h3&gt;

&lt;p&gt;Security is an innate capability of Java. It carefully scans the code for bugs and errors before deployment, and it ensures the software is running in a secure environment, safeguarding the system. The Java language’s reliability and security make it a preferred choice for organizations in highly-regulated industries that handle sensitive data, such as Fintech, Healthcare, or Education.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-evolving-and-in-highdemand"&gt;
  &lt;/a&gt;
  It’s evolving and in high-demand
&lt;/h3&gt;

&lt;p&gt;Java is easy to learn and use. It’s also highly adaptive and versatile with a track record of constant progress, which determines more programmers to master it and companies to rely on it for their software solutions.&lt;br&gt;
Being a mature language, a large community of developers has formed around Java over time. It is passionate about programming in Java and eager to create high-quality products. If you’re looking to build a Java-based software application that can take your business to the next level, finding a highly skilled Java programmer or a &lt;a href="https://www.polosoftech.com/technology/java-development-company"&gt;Java development company&lt;/a&gt;is an essential step.&lt;/p&gt;

&lt;p&gt;Java is the choice of many organizations that either build enterprise systems to streamline business operations or develop web and mobile applications that create a more engaging customer experience. Java is a highly performant, secure, and feature-packed programming language that is faster to implement and easier to maintain than some other languages. Its popularity makes it rather tricky for organizations to hire &lt;a href="https://www.polosoftech.com/technology/java-development-company"&gt;Java developers&lt;/a&gt;. Nevertheless, the possibility of outsourcing has always brought manifold advantages. A proficient Java programmer is key to developing high-quality software, so whether you find it locally or offshore, it’s not something you want to compromise on.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>design</category>
      <category>devops</category>
    </item>
    <item>
      <title>Tailwind Checkbox</title>
      <author>MD Bootstrap</author>
      <pubDate>Fri, 03 Sep 2021 05:45:58 +0000</pubDate>
      <link>https://dev.to/mdbootstrap/tailwind-checkbox-3pke</link>
      <guid>https://dev.to/mdbootstrap/tailwind-checkbox-3pke</guid>
      <description>&lt;p&gt;Responsive checkboxs built with Tailwind. A select component used in forms &amp;amp; surveys. It enables choosing one or several options in a list.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#quick-start"&gt;
  &lt;/a&gt;
  Quick Start
&lt;/h4&gt;

&lt;p&gt;In order to start using Tailwind simply download our starter.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://tailwind-elements.com/tw-starter.zip"&gt;DOWNLOAD ZIP STARTER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tailwind Elements does not change or add any CSS to the already one from TailwindCSS.&lt;/p&gt;

&lt;p&gt;You can directly copy our components into your Tailwind design and they will work straight away.&lt;/p&gt;

&lt;p&gt;In some dynamic components (like dropdowns or modals) we add Font Awesome icons and custom JavaScript. However, they do not require any additional installation, all the necessary code is always included in the example and copied to any Tailwind project - it will work.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#mdb-go"&gt;
  &lt;/a&gt;
  MDB GO
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RAhugF8NOBs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#basic-example"&gt;
  &lt;/a&gt;
  Basic example
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Required form plugin --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/@tailwindcss/custom-forms@0.2.1/dist/custom-forms.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-700"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Checkboxes&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inline-flex items-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-checkbox"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ml-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Option 1&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inline-flex items-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ml-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Option 2&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inline-flex items-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ml-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Option 3&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#you-can-see-more-customization-examples-on-the-checkbox-documentation-page"&gt;
  &lt;/a&gt;
  You can see more customization examples on the &lt;a href="https://tailwind-elements.com/docs/standard/components/checkbox/"&gt;📄 Checkbox documentation page&lt;/a&gt;
&lt;/h4&gt;




&lt;h2&gt;
  &lt;a href="#crucial-resources"&gt;
  &lt;/a&gt;
  Crucial Resources
&lt;/h2&gt;

&lt;p&gt;Here are the resources that we have prepared to help you work with this component:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read &lt;a href="https://tailwind-elements.com/docs/standard/components/checkbox/"&gt;📄 Checkbox documentation page&lt;/a&gt; &amp;lt;-- start here&lt;/li&gt;
&lt;li&gt;In to get the most out of your project, you should also get acquainted with other Forms options related to Checkbox. See the section below to find the list of them.&lt;/li&gt;
&lt;li&gt;After finishing the project you can publish it with CLI in order to receive &lt;a href="https://mdbootstrap.com/docs/standard/cli/"&gt;💽 Free hosting (beta)&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#related-forms-options-amp-features"&gt;
  &lt;/a&gt;
  Related Forms options &amp;amp; features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/forms/datepicker/"&gt;Datepicker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/file-input/"&gt;File input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/form-templates/"&gt;Forms Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/forms/inputs/"&gt;Inputs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/multiselect/"&gt;Multiselect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/radio/"&gt;Radios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/forms/range/"&gt;Range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/search/"&gt;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/select/"&gt;Select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/forms/switch/"&gt;Switch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/textarea/"&gt;Textarea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/forms/timepicker/"&gt;Timepicker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional resources
&lt;/h2&gt;

&lt;p&gt;Learn web development with our &lt;strong&gt;learning roadmap&lt;/strong&gt;:&lt;br&gt;
&lt;strong&gt;&lt;a href="https://mdbootstrap.com/docs/standard/getting-started/"&gt;🎓 Start Learning&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join our mailing list &amp;amp; receive &lt;strong&gt;exclusive resources&lt;/strong&gt; for developers&lt;br&gt;
&lt;strong&gt;&lt;a href="https://mdbootstrap.com/newsletter/"&gt;🎁 Get gifts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join our private FB group for &lt;strong&gt;inspiration &amp;amp; community experience&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.facebook.com/groups/682245759188413"&gt;👨‍👩‍👧‍👦 Ask to join&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Support creation of open-source packages&lt;/strong&gt; with a STAR on GitHub&lt;br&gt;
&lt;a href="https://github.com/dawidadach/Tailwind-Elements/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n4wcaku9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/stars/dawidadach/Tailwind-Elements.svg%3Fstyle%3Dsocial%26label%3DStar%26maxAge%3D2592000" alt="GitHub stars"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Firebase Typescript with React example: CRUD Application</title>
      <author>Tien Nguyen</author>
      <pubDate>Fri, 03 Sep 2021 05:06:47 +0000</pubDate>
      <link>https://dev.to/tienbku/firebase-typescript-with-react-example-crud-application-2po8</link>
      <guid>https://dev.to/tienbku/firebase-typescript-with-react-example-crud-application-2po8</guid>
      <description>&lt;p&gt;In this tutorial, I will show you step by step to build a React Typescript Firebase CRUD example with Realtime Database.&lt;/p&gt;

&lt;p&gt;Full Article: &lt;a href="https://www.bezkoder.com/firebase-typescript-react/"&gt;https://www.bezkoder.com/firebase-typescript-react/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using Cloud Firestore instead:&lt;br&gt;
&lt;a href="https://www.bezkoder.com/react-typescript-firestore/"&gt;React Typescript Firestore example: Build a CRUD App&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Firebase Typescript with React Overview&lt;/h2&gt;

&lt;p&gt;We're gonna build an React Typescript Firebase CRUD Application using &lt;a href="https://www.npmjs.com/package/firebase"&gt;firebase&lt;/a&gt; library in which:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Each Tutorial has key, title, description, published status.&lt;/li&gt;
    &lt;li&gt;We can create, retrieve, update, delete Tutorials (CRUD operations) from Firebase Realtime Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the screenshots:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new Tutorial:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rGv7w5J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k5hwjx4s7ujisafukp3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rGv7w5J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k5hwjx4s7ujisafukp3.png" alt="firebase-typescript-react-crud-create"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firebase Realtime Database right after the Operation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFHNM9aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9e9vyc9bcz6wxotbfep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFHNM9aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9e9vyc9bcz6wxotbfep.png" alt="firebase-typescript-react-crud-create-db"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve all Tutorials with details when clicking on a Tutorial:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Za13EA0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfsk3tv11x4ye19ws8dw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Za13EA0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfsk3tv11x4ye19ws8dw.png" alt="firebase-typescript-react-crud-retrieve"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change status to &lt;strong&gt;Published&lt;/strong&gt;/&lt;strong&gt;Pending&lt;/strong&gt; using &lt;strong&gt;Publish&lt;/strong&gt;/&lt;strong&gt;UnPublish&lt;/strong&gt; button:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--56gJbei8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uumxqq31lqpfbd25ea60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--56gJbei8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uumxqq31lqpfbd25ea60.png" alt="firebase-typescript-react-crud-update-status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the Tutorial details with &lt;strong&gt;Update&lt;/strong&gt; button:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---jvzpW6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tui3t0c8lkdbcg512ko8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---jvzpW6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tui3t0c8lkdbcg512ko8.png" alt="firebase-typescript-react-crud-update"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delete the Tutorial using &lt;strong&gt;Delete&lt;/strong&gt; button:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uk-BQjUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l44m09gl4qmt8la4z42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uk-BQjUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l44m09gl4qmt8la4z42.png" alt="firebase-typescript-react-crud-delete"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delete all Tutorials with &lt;strong&gt;Remove All&lt;/strong&gt; button:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hXPwaln9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7er5f3d3b0i4dznc47b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXPwaln9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7er5f3d3b0i4dznc47b.png" alt="firebase-typescript-react-crud-delete-all"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Technology&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;React 17/16&lt;/li&gt;
    &lt;li&gt;firebase 8&lt;/li&gt;
    &lt;li&gt;typescript 4.3.5&lt;/li&gt;
    &lt;li&gt;react-router-dom 5&lt;/li&gt;
    &lt;li&gt;bootstrap 4.6.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ik5jpbu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlkot1wv1l8icajgo5q7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ik5jpbu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlkot1wv1l8icajgo5q7.png" alt="firebase-typescript-react-crud-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;firebase.ts&lt;/code&gt; configures information to connect with Firebase Project and export Firebase &lt;a href="https://firebase.google.com/docs/reference/js/firebase.database.Database"&gt;Database&lt;/a&gt; service.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;services/tutorial.service.ts&lt;/code&gt; exports &lt;code&gt;TutorialDataService&lt;/code&gt; that uses &lt;code&gt;firebase&lt;/code&gt;'s Database &lt;code&gt;Reference&lt;/code&gt; to interact with Firebase Database.&lt;/li&gt;
&lt;li&gt;There are 3 components that uses &lt;code&gt;TutorialDataService&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;add-tutorial&lt;/code&gt; for creating new item&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tutorials-list&lt;/code&gt; contains list of items, parent of &lt;code&gt;tutorial&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tutorial&lt;/code&gt; shows item details&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;App.tsx&lt;/code&gt; contains Browser Router view and navigation bar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For step by step instruction and Github source code, please visit:&lt;br&gt;
&lt;a href="https://www.bezkoder.com/firebase-typescript-react/"&gt;https://www.bezkoder.com/firebase-typescript-react/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find how to create React HTTP Client for working with Restful API in:&lt;br&gt;
&lt;a href="https://www.bezkoder.com/react-typescript-axios/"&gt;React Typescript example Project with Axios and Web API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or Cloud Firestore for serverless:&lt;br&gt;
&lt;a href="https://www.bezkoder.com/react-typescript-firestore/"&gt;React Typescript Firestore example: Build a CRUD App&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://reactjs.org/docs/react-component.html"&gt;React Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://firebase.google.com/docs/reference/js/firebase.database.Database"&gt;firebase.database.Database&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://firebase.google.com/docs/reference/js/firebase.database.Reference"&gt;firebase.database.Reference&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://firebase.google.com/docs/database/web/start"&gt;Firebase Web Get Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fullstack:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/react-spring-boot-crud/"&gt;React + Spring Boot + MySQL: CRUD example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-react-postgresql/"&gt;React + Spring Boot + PostgreSQL: CRUD example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/react-spring-boot-mongodb/"&gt;React + Spring Boot + MongoDB: CRUD example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-mysql/"&gt;React + Node.js + Express + MySQL: CRUD example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-postgresql/"&gt;React + Node.js + Express + PostgreSQL example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-mongodb-mern-stack/"&gt;React + Node.js + Express + MongoDB example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/django-react-axios-rest-framework/"&gt;React + Django + Rest Framework example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>firebase</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Middlewares in Go</title>
      <author>Karan Kumar </author>
      <pubDate>Fri, 03 Sep 2021 05:05:46 +0000</pubDate>
      <link>https://dev.to/karankumarshreds/middlewares-in-go-41j</link>
      <guid>https://dev.to/karankumarshreds/middlewares-in-go-41j</guid>
      <description>&lt;p&gt;Today we will learn how to implement middlewares in Go and also we will learn how to chain the middlewares in an efficient way without using any third party package.&lt;/p&gt;

&lt;p&gt;The code for this can be found here &lt;a href="https://github.com/karankumarshreds/GoMiddlewares"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#middleware"&gt;
  &lt;/a&gt;
  Middleware
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Middleware&lt;/strong&gt; is an entity that intercepts the server's request/response life cycle. In simple words, it is a piece of code that runs before/after the server caters to a request with a response.&lt;br&gt;
A middleware can do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Process the request before running business logic (authentication)&lt;/li&gt;
&lt;li&gt;Modify the request to the next handler function (attaching payload)&lt;/li&gt;
&lt;li&gt;Modify the response for the client &lt;/li&gt;
&lt;li&gt;Logging.... and much more &lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#basic-middleware"&gt;
  &lt;/a&gt;
  Basic Middleware
&lt;/h2&gt;

&lt;p&gt;Let's write a basic route handler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prinln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Executing the handler"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"OK"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This piece of code simply returns "OK" response to the &lt;code&gt;GET&lt;/code&gt; request at &lt;code&gt;http://localhost:8000/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let us create a simple middleware that will be a function that intercepts the request -&amp;gt; response lifecycle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;originalHandler&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Running before handler"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hijacking Request "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;originalHandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Running after handler"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: This middleware function expects a function (our handler in this case) of type &lt;code&gt;handler&lt;/code&gt; and will return a &lt;code&gt;handler&lt;/code&gt; after tweaking the request response flow.&lt;/p&gt;

&lt;p&gt;So what is does is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Runs Println function&lt;/li&gt;
&lt;li&gt;Writes to the response &lt;code&gt;"Hijacking Request"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Serves the original handler which was passed as an argument &lt;/li&gt;
&lt;li&gt;Runs a Println function&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us hook this up with the main function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// converting our handler function to handler &lt;/span&gt;
    &lt;span class="c"&gt;// type to make use of our middleware &lt;/span&gt;
    &lt;span class="n"&gt;myHandler&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handlerfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myHandler&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;// 👈&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prinln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Executing the handler"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"OK"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;originalHandler&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Running before handler"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hijacking Request "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;originalHandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Running after handler"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we hit it with a &lt;code&gt;GET&lt;/code&gt; request at &lt;code&gt;http://localhost:8000&lt;/code&gt; we will get &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Client response:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hijacking Request OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👆 This shows the middleware added the response "Hijacking Request" to the original response by the handler, that is "OK".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Server logs:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Running before handler
Executing the handler 
Running after handler 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#real-world-example"&gt;
  &lt;/a&gt;
  Real world example
&lt;/h2&gt;

&lt;p&gt;Now let us take what we have learned and build upon it. This middleware example has two goals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write a middleware that makes sure request has &lt;code&gt;Header&lt;/code&gt; &lt;code&gt;"Content-Type"&lt;/code&gt; &lt;code&gt;application/json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Write a middleware that adds &lt;code&gt;current server time&lt;/code&gt; to the reponse &lt;code&gt;cookie&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#middleware-1"&gt;
  &lt;/a&gt;
  Middleware #1
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;filterContentType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusUnsupportedMediaType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"405 - Header Content-Type incorrect"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#middleware-2"&gt;
  &lt;/a&gt;
  Middleware #2
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;setTimeCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c"&gt;// Cookie here is a struct that represents an HTTP&lt;/span&gt;
    &lt;span class="c"&gt;// cookie as sent in the Set-Cookie header of HTTP request&lt;/span&gt;
    &lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Server Time (UTC)"&lt;/span&gt; &lt;span class="c"&gt;// can be anything&lt;/span&gt;
      &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Itoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
      &lt;span class="c"&gt;// 👆 converted time to string&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// now set the cookie to response &lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us create a handler to handle the POST request, and then we will use the middlewares:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handler"&gt;
  &lt;/a&gt;
  Handler
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Firstname&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;Lastname&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// main handler &lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;postHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusMethodNotAllowed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"405 - Method Not Allowed"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
    &lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewDecoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"500 - Internal Server Error"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Got firstName and lastName as %s, %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firstname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lastname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"201 - Created"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let we will (in the main function):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take the middlewares &lt;/li&gt;
&lt;li&gt;Chain them together &lt;/li&gt;
&lt;li&gt;Wrap them around the handler
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;myHandler&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;filterContentType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setTimeCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myHandler&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;// 👈&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;filterContentType(setTimeCookie(myHandler))&lt;/code&gt;&lt;br&gt;
This will return the handler and run the middlewares in the order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;filterContentType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTimeCookie&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;... and then our handler &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us test this now:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -H "Content-Type: application/json" -X POST&lt;br&gt;
http://localhost:8000/city -d '{"firstname": "John", "lastname": "Doe"}'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The server will respond with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;201 - Created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us test the Header middleware &lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -i -X POST http://localhost:8000/city -d '{"firstname": "John", "lastname": "Doe"}'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The server will respond with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;415 - Unsupported Media Type
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is exactly what we wanted. Also you can use &lt;code&gt;postman&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt; command to check if the response has the attached cookie as well. And it will because of the other middleware.&lt;/p&gt;

&lt;p&gt;But chaining these middlewares is not a neat process, imagine we had 5 middlewares, the chaining would look like: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;chain := m1(m2(m3(m4(m5(handler)))))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;👆 This is not what we want, so let us create our own chaining middleware handling logic.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#chaining-middlewares"&gt;
  &lt;/a&gt;
  Chaining Middlewares
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt; is to use &lt;code&gt;chain := m1(m2(m3(m4(m5(handler)))))&lt;/code&gt; as &lt;code&gt;chain := CreateChain(m1, m2, m3, m4, m5).Then(handler)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let us write a pseudo code for that we want to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We need a &lt;code&gt;CreateChain&lt;/code&gt; function that takes an Slice/List of middlewares&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need a Then function that would be used as a method on &lt;code&gt;Chain&lt;/code&gt; type object that will do run : &lt;code&gt;m1(m2(m3(m4(m5(handler)))))&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us create a struct for a &lt;code&gt;Middleware&lt;/code&gt; and &lt;code&gt;Chain&lt;/code&gt; (which is slice/list of middleware):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Middleware&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;Middleware&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us write function &lt;code&gt;CreateChain&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// returns a Slice of middlewares &lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CreateChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;middlewares&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;Middleware&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;slice&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;middlewares&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us write function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;originalHandler&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;originalHandler&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;originalHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultServeMux&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Same as to m1(m2(m3(originalHandler)))&lt;/span&gt;
        &lt;span class="n"&gt;originalHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;originalHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;originalHandler&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here, the for loop will loop through &lt;code&gt;each&lt;/code&gt; middleware from in the Slice/List of middlewares and keep it wrap itself around the originalHandler passed into the function.&lt;/p&gt;

&lt;p&gt;Now we can use this in the main function as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;myHandler&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;CreateChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filterContentType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setTimeCookie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// 👈&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code for this can be found here &lt;a href="https://github.com/karankumarshreds/GoMiddlewares"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope that was helpful. Feel free to create a PR on the code repo if you find any issues or improvements. &lt;/p&gt;

</description>
      <category>go</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>github</category>
    </item>
    <item>
      <title>How to add a social media share card to any website</title>
      <author>Michelle Mannering</author>
      <pubDate>Fri, 03 Sep 2021 05:01:48 +0000</pubDate>
      <link>https://dev.to/mishmanners/how-to-add-a-social-media-share-card-to-any-website-ha8</link>
      <guid>https://dev.to/mishmanners/how-to-add-a-social-media-share-card-to-any-website-ha8</guid>
      <description>&lt;p&gt;Have you ever shared or received a link to a website, and it has a horrible preview image?&lt;/p&gt;

&lt;p&gt;I recently shared a link to my website in a Facebook message. The preview looked AWFUL. It was a zoomed in section of my logo which looked hideous.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PmMoMl9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xoywokc6rjw00h79fz7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PmMoMl9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xoywokc6rjw00h79fz7.JPG" alt="HackathonQueen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I figured, there must be a way to have a cool image in the link preview.&lt;/p&gt;

&lt;p&gt;Turns out, there is! With some clever use of metatags, you can have a pretty preview picture whenever you share a website link.&lt;/p&gt;

&lt;p&gt;Here's how do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happens-when-you-dont-have-an-image"&gt;
  &lt;/a&gt;
  What happens when you don't have an image
&lt;/h2&gt;

&lt;p&gt;Firstly, let's talk about the background for how preview images work. If you want to skip straight to the tutorial, scroll down to Step 1.&lt;/p&gt;

&lt;p&gt;When you share a link to a website, if you don't have metatags setup in your code, the web will simply share your first image by default. For many websites, a logo is the first image that appears in the *.html file. This is usually because logos are shown in the header.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s_G4A8rc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01qvh5mr9hufmqh227x6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_G4A8rc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01qvh5mr9hufmqh227x6.png" alt="Logo Link"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you share a link to your website, it'll take this logo and crop it down to the platform specs. To get past this this, we need to add metadata and a link to a better image. Let's check it out how to do that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-an-image"&gt;
  &lt;/a&gt;
  Step 1. Create an image
&lt;/h2&gt;

&lt;p&gt;Okay, you can do this step later, but I like to create the image first. You'll want to have an image that is 1200x630px. This optimises for Facebook, Twitter, and LinkedIn.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xm3XQcXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99hcmulh8enk302pk62j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xm3XQcXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99hcmulh8enk302pk62j.png" alt="ogimage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create an image that showcases your website. Images will mostly be shared as thumbnails, so ensure they aren't too busy. Here's the one I created for my &lt;a href="https://mishmanners.com"&gt;MishManners.com&lt;/a&gt; website:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--By2TC1_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/159bw30bkqdidfxhrdh3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--By2TC1_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/159bw30bkqdidfxhrdh3.png" alt="MishManners"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you have your image, time to upload it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-upload-your-image"&gt;
  &lt;/a&gt;
  Step 2. Upload your image
&lt;/h2&gt;

&lt;p&gt;To ensure your image appears when you share a link, you'll need to host your image in a publicly available space.&lt;/p&gt;

&lt;p&gt;If you are using GitHub Pages to host your website like I am, you'll still this image in a publicly available link.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/github" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pM6fmKzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7fGFlBNG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2575/3da37f64-b46e-4fa5-bf86-01b63ba5f57b.png" alt="GitHub"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OwuwYieg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5RYSMLa0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/397557/afcf6be6-f639-43ac-bdba-4a6056f7aada.jpeg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/github/how-to-use-github-pages-to-host-your-website-even-with-multiple-repos-27k2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to use GitHub Pages to host your website, even with multiple repos&lt;/h2&gt;
      &lt;h3&gt;Michelle Mannering for GitHub ・ Aug 12 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;For me, my code is hosted on a private repo, but the website is public. If I upload the image to the private repo, the image won't be shared in the public realm.&lt;/p&gt;

&lt;p&gt;There are two ways to host a public image. First, you can upload the image and host it on your website in a separate page. ie. my image could be hosted at &lt;code&gt;https://mishmanners.info/webpreview.png&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another way to host the image is to have it on a public repo. I have a repo just for hosting images that I want made available to everyone. My image is currently stored at &lt;code&gt;https://github.com/mishmanners/PubImages/blob/main/WebsiteImages/MishMannersInfo2.png&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Whichever method you decide to go with, ensure you copy the path to the image. You'll need it for this next part!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-add-metatags-to-your-website"&gt;
  &lt;/a&gt;
  Step 3. Add metatags to your website
&lt;/h2&gt;

&lt;p&gt;By default, if you share a link without any metadata, only your title will be shown and the address of your website. Instead, what you want is a cool image, followed by a short description. This is what I have for my &lt;a href="https://mishmanners.info"&gt;MishManners.info&lt;/a&gt; website:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--34ABv1Oz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ehj34nl1t7npmud51qf.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--34ABv1Oz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ehj34nl1t7npmud51qf.JPG" alt="mishmannersinfo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To supply this information, add metatags to your *.html file. Add the following snippet of code to your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- Primary Meta Tags --&amp;gt; &amp;lt;!-- this is the default metadata which all websites can draw on --&amp;gt; 
    &amp;lt;title&amp;gt;YOUR_WEBSITE&amp;lt;/title&amp;gt;
    &amp;lt;meta name="title" content="YOUR_HEADING"&amp;gt;
    &amp;lt;meta name="description" content="YOUR_SUMMARY"&amp;gt;

&amp;lt;!-- Open Graph / Facebook --&amp;gt; &amp;lt;!-- this is what Facebook and other social websites will draw on --&amp;gt;
    &amp;lt;meta property="og:type" content="website"&amp;gt;
    &amp;lt;meta property="og:url" content="YOUR_URL"&amp;gt;
    &amp;lt;meta property="og:title" content="YOUR_HEADING"&amp;gt;
    &amp;lt;meta property="og:description" content="YOUR_SUMMARY"&amp;gt;
    &amp;lt;meta property="og:image" content="YOUR_IMAGE_URL"&amp;gt;

&amp;lt;!-- Twitter --&amp;gt; &amp;lt;!-- You can have different summary for Twitter! --&amp;gt;
    &amp;lt;meta property="twitter:card" content="summary_large_image"&amp;gt;
    &amp;lt;meta property="twitter:url" content="YOUR_URL"&amp;gt;
    &amp;lt;meta property="twitter:title" content="YOUR_HEADING"&amp;gt;
    &amp;lt;meta property="twitter:description" content="YOUR_SUMMARY"&amp;gt;
    &amp;lt;meta property="twitter:image" content="YOUR_IMAGE_URL"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to add your own information here. It's also important that you add &lt;code&gt;?raw=true&lt;/code&gt; to the end of your website image path. For example: &lt;code&gt;https://github.com/mishmanners/PubImages/blob/main/WebsiteImages/MishMannersInfo2.png?raw=true&lt;/code&gt;. This will ensure your image is correctly displayed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-test-your-link"&gt;
  &lt;/a&gt;
  Step 4. Test your link
&lt;/h2&gt;

&lt;p&gt;Finally, you'll want to test your website to ensure you added the correct information. &lt;a href="https://metatags.io/"&gt;Metatags&lt;/a&gt; is a great way to see a preview of your link. It can also help you tweak and troubleshoot any issues you're having with your metadata.&lt;/p&gt;

&lt;p&gt;That's it! Now you should see a pretty preview of your website whenever you share your link. Here's what the DEV one looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---kTaWByx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/434u8rmxgzaknzq9zu44.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---kTaWByx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/434u8rmxgzaknzq9zu44.JPG" alt="DEV"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to see how to use metatags, or enjoy some fun coding banter, &lt;a href="https://www.twitch.tv/videos/1135754273"&gt;watch my livestream where we add metadata to two of my websites&lt;/a&gt;. Feel free to join any of &lt;a href="https://twitch.tv/MishManners"&gt;my live streams&lt;/a&gt; and suggest topics in the comments below.&lt;/p&gt;

&lt;p&gt;Looking forward to bringing you more coding content ❤️&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Rails template for modern, reactive applications</title>
      <author>David Colby</author>
      <pubDate>Fri, 03 Sep 2021 03:33:23 +0000</pubDate>
      <link>https://dev.to/davidcolbyatx/a-rails-template-for-modern-reactive-applications-38di</link>
      <guid>https://dev.to/davidcolbyatx/a-rails-template-for-modern-reactive-applications-38di</guid>
      <description>&lt;p&gt;I've &lt;a href="https://www.colby.so/posts/live-search-with-rails-and-stimulusreflex"&gt;written&lt;/a&gt; &lt;a href="https://www.colby.so/posts/turbo-streams-on-rails"&gt;a lot&lt;/a&gt; &lt;a href="https://www.colby.so/posts/instant-search-with-rails-6-and-hotwire"&gt;about&lt;/a&gt; the tools pushing Rails forward, allowing small teams of developers to build modern, fast, engaging web applications, quickly.&lt;/p&gt;

&lt;p&gt;The stars of the show — the Hotwire stack (Stimulus and Turbo), CableReady, StimulusReflex — are now part of every new Rails application I build.&lt;/p&gt;

&lt;p&gt;Writing Ruby code and building cool stuff is fun. Reading setup docs, fiddling with tooling, and remembering how to tie everything together each time you create a new application is a bummer.&lt;/p&gt;

&lt;p&gt;So, to spend more time on the fun stuff and less time in setup land, I built a small &lt;a href="https://github.com/DavidColby/vite_starter_template"&gt;Rails application template&lt;/a&gt; that let's me jump right into building.&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://github.com/DavidColby/vite_starter_template"&gt;new template&lt;/a&gt; is now available on Github for anyone interested in building reactive Rails applications to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-the-template"&gt;
  &lt;/a&gt;
  What's in the template?
&lt;/h2&gt;

&lt;p&gt;The template comes with the following tools configured and ready to start using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby on Rails (of course)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stimulus.hotwired.dev/"&gt;Stimulus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://turbo.hotwired.dev/"&gt;Turbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cableready.stimulusreflex.com/"&gt;CableReady&lt;/a&gt; + &lt;a href="https://docs.stimulusreflex.com/"&gt;StimulusReflex&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://windicss.org/"&gt;WindiCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of using Webpacker to handle building JavaScript and CSS, I've added Vite, via &lt;a href="https://github.com/ElMassimo/vite_ruby"&gt;vite_rails&lt;/a&gt;, configured to work seamlessly with Stimulus and WindiCSS immediately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-vite"&gt;
  &lt;/a&gt;
  Why Vite?
&lt;/h2&gt;

&lt;p&gt;Vite fits in well alongside the modern, reactive stack we're using, with HMR-enabled updates for every change, including for server-side views.&lt;/p&gt;

&lt;p&gt;In addition to being fast, simple and effective, &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; is a well-supported project with a very active community working to improve it.&lt;/p&gt;

&lt;p&gt;With the decision to &lt;a href="https://github.com/rails/rails/pull/42999"&gt;move away from Webpacker&lt;/a&gt; as the default Rails JavaScript setup in Rails 7, it is a good time to explore new options, and Vite is a strong contender.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-template"&gt;
  &lt;/a&gt;
  Use the template
&lt;/h2&gt;

&lt;p&gt;To create a new Ruby on Rails application from this template, simply run this command from your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new your_new_application -m https://raw.githubusercontent.com/davidcolby/vite_starter_template//main/template.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-isnt-x-included-in-the-template"&gt;
  &lt;/a&gt;
  Why isn't X included in the template?
&lt;/h2&gt;

&lt;p&gt;I've intentionally left the template light and plan to keep it that way.&lt;/p&gt;

&lt;p&gt;This template's goal is to provide the basic tools to build modern applications, not provide a ready-to-deploy starter application. If you want a more full-featured starter, consider &lt;a href="https://jumpstartrails.com/"&gt;Jumpstart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a tool that you want to see included, &lt;a href="https://github.com/DavidColby/vite_starter_template/issues"&gt;Github issues&lt;/a&gt; and &lt;a href="https://github.com/DavidColby/vite_starter_template/pulls"&gt;PRs&lt;/a&gt; are welcome.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;I'd love for you to try out the stack included in this template — building Rails apps with this stack is a joy — and I hope that this template makes it a little easier to get started.&lt;/p&gt;

&lt;p&gt;Have feedback or questions about the template? Get in touch with me here, or open an issue on the &lt;a href="https://github.com/DavidColby/vite_starter_template"&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, thanks for reading!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>showdev</category>
    </item>
    <item>
      <title>HTTP Simplified</title>
      <author>Azamah Jr</author>
      <pubDate>Fri, 03 Sep 2021 03:19:34 +0000</pubDate>
      <link>https://dev.to/kaid00/http-simplified-5eak</link>
      <guid>https://dev.to/kaid00/http-simplified-5eak</guid>
      <description>&lt;p&gt;If you have an interest in Web development and building APIs, understanding the concepts of HTTP is vital.&lt;/p&gt;

&lt;p&gt;In this article you are going to learn the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What HTTP is, and its characteristics
&lt;/li&gt;
&lt;li&gt;A brief history of HTTP versions&lt;/li&gt;
&lt;li&gt;What Sessions are and their usage &lt;/li&gt;
&lt;li&gt;The Request-Response cycle&lt;/li&gt;
&lt;li&gt;HTTP Request and Response messages&lt;/li&gt;
&lt;li&gt;HTTP methods and their operations&lt;/li&gt;
&lt;li&gt;HTTP Status codes, their meanings, and what operations they perform&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-http"&gt;
  &lt;/a&gt;
  🤔What is HTTP?
&lt;/h2&gt;

&lt;p&gt;HyperText Transfer Protocol (HTTP) is a stateless, connection-less, request-response protocol that consists of rules which define communications between clients and servers connected over an established &lt;a href="https://searchnetworking.techtarget.com/definition/TCP"&gt;Transmission Control Protocol (TCP)&lt;/a&gt; connection&lt;/p&gt;

&lt;p&gt;Once there is an established connection between the client and the server, HTTP defines rules for transferring data such as images, text, and other multimedia between the client and the server&lt;/p&gt;

&lt;p&gt;Before delving any further, let's define some basic terminologies which will be mentioned in the article.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clients: The client is a web browser, search engine, or robot. The client sends the request message to the server &lt;/li&gt;
&lt;li&gt;Servers: A web server that receives and responds to the request message sent by the clients, by sending a response message back to the client &lt;/li&gt;
&lt;li&gt;User: The individual who enters a URI into the browser or request for specific resource within an application&lt;/li&gt;
&lt;li&gt;URI( Uniform Resource Identifier): it is used to identify a given unique resource on the web&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#history-of-http"&gt;
  &lt;/a&gt;
  📜 History of HTTP
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTTP/1.0: It was the original HTTP. It opened a new TCP connection for each HTTP request-response exchange, this approach is less efficient when multiple requests are sent in succession, hence the need to address this flaw in later versions&lt;/li&gt;
&lt;li&gt;HTTP/1.1: To mitigate the flaws of HTTP/1.0, pipelining was implemented which allowed multiple HTTP request-response exchanges over a single TCP connection&lt;/li&gt;
&lt;li&gt;HTTP/2 goes a step further by multiplexing messages within frames over a single open TCP connection

&lt;ul&gt;
&lt;li&gt;HTTP/2 messages a not human-readable and are embedded into frames which allows optimizations like compressions of HTTP headers and multiplexing.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#characteristics-of-http"&gt;
  &lt;/a&gt;
  Characteristics of HTTP
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTTP is stateless:  There's no link between any two or more HTTP requests messages being successively sent out on the same TCP connection, this means from the server's perspective each HTTP request message is considered isolated and unique&lt;/li&gt;
&lt;li&gt;HTTP is not connection-based: Before a client and server can exchange requests and responses there must be an established connection between the client and server, but HTTP is not connection-based, hence it relies on the TCP transport layer which is a connection-based protocol, to establish a secure connection between the client and the server&lt;/li&gt;
&lt;li&gt;Once the server receives the HTTP request messages sent by the client on an opened TCP connection, the server analyzes and sends an HTTP response message to the client, after which the TCP connection is closed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although HTTP itself is stateless, there's a need to share state between multiple HTTP requests. HTTP cookies make it possible for the use of stateful sessions. &lt;/p&gt;

&lt;p&gt;HTTP cookies are added to the header of each HTTP request allowing session creations on each HTTP request, doing this makes it possible to share state between multiple HTTP requests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-sessions"&gt;
  &lt;/a&gt;
  🤔What are Sessions
&lt;/h3&gt;

&lt;p&gt;A session is temporal storage on the server, each session consists of the session data and the session ID which identifies a specific session. The session data is stored on the server while the session ID is stored in the client(web browser) using HTTP cookies. To identify a specific session, the session ID is sent back to the server using HTTP cookies&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#characteristics-of-sessions"&gt;
  &lt;/a&gt;
  Characteristics of Sessions
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Sessions are unique for each user. So if there are 4 users who make a request to the server, there will be 4 sessions created on the server. &lt;/li&gt;
&lt;li&gt;During the request processing of each user, the user's sessions are available to all web pages on the application &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#sessions-usage-examples"&gt;
  &lt;/a&gt;
  Sessions usage examples
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Sessions can be used to protect certain pages and routes so that only specific users can access them, we can keep track of the users when they log in, by storing their user's IDs in a session &lt;/li&gt;
&lt;li&gt;Sessions can be used to keep track of a users' log status. So we can restrict access to protected resources and routes, to being available to logged-in users only. When a user logs in, their JSON Web Token(JWT) is stored in a session, and with subsequent user requests to a resource, it can be checked to see if the user is logged in&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-http-process"&gt;
  &lt;/a&gt;
  🔂The HTTP process
&lt;/h2&gt;

&lt;p&gt;To understand the HTTP process, let's ask ourselves, what actually happens each time a user types a URL into a browser in order to open a new webpage. Well the most simple answer is;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The client which in this case is our browser, sends a request to the server in which the web page is located&lt;/li&gt;
&lt;li&gt;The server then sends back a response containing the requested webpage to the client.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YCNJ_IVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628319887364/rYUQx2_0sS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YCNJ_IVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628319887364/rYUQx2_0sS.png" alt="Artboard 233.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This process is called the &lt;strong&gt;Request-Response cycle&lt;/strong&gt;.&lt;br&gt;
Let's take it one step further.&lt;/p&gt;

&lt;p&gt;Let's say we want to access the explore page on hashnode.com by entering the following URL into the browser &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3b6wTu6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391128887/hy5-PcNfX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3b6wTu6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391128887/hy5-PcNfX.png" alt="Artboard 2 copy33.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The URL is made up of;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protocol: It is the protocol to be used on the connection, it could be HTTP or HTTPS, in this case, it is HTTPS which is the secure version of HTTP.&lt;/li&gt;
&lt;li&gt;Resource: the resource which we want to access, in this case, it is the explore page &lt;/li&gt;
&lt;li&gt;Domain name: In this case it's hashnode.com, we have to note that the domain name here is not actually the real address of the server that we are trying to access, rather it's just a nice and easy to remember representation of the actual address. So the client needs to convert the domain name to the actual address of the server, through the process of DNS( Domain Name Servers ) Lookup. The actual address of the domain name got from the DNS Lookup is;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZVYJFks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391189102/4vO8rEfFY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZVYJFks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391189102/4vO8rEfFY.png" alt="Artboard 2 copy 233.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This process of DNS Lookup only occurs when the HTTP request is made. &lt;/p&gt;

&lt;p&gt;When a client initiates an HTTP request to the server, it performs the following steps;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It establishes a TCP connection between the client and server: the TCP connection is used to send requests and receive responses&lt;/li&gt;
&lt;li&gt;Once the TCP connection has been established, the client sends an HTTP request message to the server&lt;/li&gt;
&lt;li&gt;After interpreting an HTTP request message the server sends an HTTP response message to the client&lt;/li&gt;
&lt;li&gt;Once the server has responded to the client's request, the TCP connection is closed &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This process is illustrated below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wivVTJAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628390205455/dKcXwfwS8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wivVTJAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628390205455/dKcXwfwS8.png" alt="Artboard 333.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#http-messages"&gt;
  &lt;/a&gt;
  📝 HTTP messages
&lt;/h2&gt;

&lt;p&gt;There are two types of HTTP messages;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP Request messages sent by the client to the server&lt;/li&gt;
&lt;li&gt;HTTP Response messages sent from the server to the client
each of these messages has a format in which they are generated&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#http-request-message"&gt;
  &lt;/a&gt;
  HTTP Request Message
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4egjqX_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628390747456/Fhk3an1Va.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4egjqX_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628390747456/Fhk3an1Va.png" alt="Artboard 1133.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The request message consists of the following;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The HTTP method: these methods are usually a verb like 'GET' or 'POST' that defines the operation applied by the client to the resource, in this case, the HTTP method is GET note HTTP methods are case sensitive.&lt;/li&gt;
&lt;li&gt;The Request-URI: identifies the resource upon which the HTTP method is applied. The exact resource is determined using the Request-URI and the Host header field&lt;/li&gt;
&lt;li&gt;The HTTP protocol version: In this case the version is HTTP/1.1&lt;/li&gt;
&lt;li&gt;Request headers: Conveys additional information about the request and about the client itself to the servers, in this case, we have the following request headers;

&lt;ul&gt;
&lt;li&gt;Host: It specifies the internet port(IP) address and port number of the server where the requested resource is stored, an IP address without a trailing port defaults to port number 80 for HTTP requests and 443 for HTTPS requests. Note without specifying the Host header field, the request will return an error&lt;/li&gt;
&lt;li&gt; Accept-Language: Specifies which language the client is able to understand, in this case, the language is 'en' for English, other values could be 'fr' for French&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Body: An optional field that contains the information being sent to the server for storage, mainly used when using HTTP methods like POST, PATCH&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#http-response-message"&gt;
  &lt;/a&gt;
  HTTP Response Message
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qMpQaFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628390735720/1Unf9vpWu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qMpQaFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628390735720/1Unf9vpWu.png" alt="Artboard 11 copy33.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response message consists of the following;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The HTTP protocol version: In this case the version is HTTP/1.1&lt;/li&gt;
&lt;li&gt;Status code: in this case, is 200&lt;/li&gt;
&lt;li&gt;Response headers: Conveys additional information about the response and about the server itself to the client, in this case, we have the following request headers;

&lt;ul&gt;
&lt;li&gt;Accept-Ranges: It is used by the server to show its support for partial requests&lt;/li&gt;
&lt;li&gt;Server: Describes the software used by the origin by the origin server that handled the request&lt;/li&gt;
&lt;li&gt;Content-type: This header field indicates the resource content type&lt;/li&gt;
&lt;li&gt;E-Tag: it identifies the specific resource version&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Body: An optional field that contains fetched information being sent to the client from the server, mainly used when using HTTP methods like GET.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http-methods"&gt;
  &lt;/a&gt;
  HTTP Methods
&lt;/h2&gt;

&lt;p&gt;HTTP uses methods to define the operation to be applied to the resource identified by the Request-URI. These methods are usually verbs, with the most widely used methods being POST, GET, PATCH, and DELETE. Each of these HTTP methods returns a success or failure upon completion of their operations, using status codes to represent success or a failure.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GET: This method retrieves the resource specified in the request-URI. If successful the resource is returned as an entity in the response message along with the status code 200 (Success).&lt;/li&gt;
&lt;li&gt;POST: This method request that the server accepts the data or entity enclosed in the Request body, if successful the server responds by sending a response message containing the status code 201 (Created), along with the location of the posted entity or data.&lt;/li&gt;
&lt;li&gt;PUT: This method request that the enclosed data or entity in the Request body be used to modify the request identified by the  Request-URI.&lt;/li&gt;
&lt;li&gt;DELETE: This method request that the enclosed data or entity in the request be stored under the supplied Request-URI.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#http-status-codes"&gt;
  &lt;/a&gt;
  📱 HTTP Status Codes
&lt;/h2&gt;

&lt;p&gt;The status codes are used by the client to determine if the HTTP request sent to the server, along with the specified operation was a success or a failure, remember the operation is specified by using the HTTP method.&lt;br&gt;
The status code is a 3 digit result code, with the first digit defining the class of the code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;1xx (Informational): This class of status codes consists of informational responses indicating that a client should continue with a request. Examples of  status codes belonging to this class;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;100 Continue: The client should continue with their request&lt;/li&gt;
&lt;li&gt;101 Switching protocols: The server is willing to comply with the request to change the application protocol being used in the connection, this request is made using the Upgrade message header field&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2XX (Success): This class of status codes indicates that the request made by the client was successfully received, understood, and accepted by the server. Examples of  status codes belonging to this class include the following;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;200 Ok: The request succeeded, the information returned with the response is dependent on the HTTP method used in the request.

&lt;ul&gt;
&lt;li&gt;GET: the requested resource is sent in the response&lt;/li&gt;
&lt;li&gt;POST: A description of the action is sent in the response&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;201 Created: The request has succeeded and a new resource has been created&lt;/li&gt;
&lt;li&gt;202 Accepted: The request has been accepted but not yet processed by the server &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3XX (Redirection): This class of status codes indicates that further action needs to be taken by the user to complete the request, examples of status codes belonging to this class;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;301 Moved permanently: The requested resource has been moved permanently to a new URI, the permanent URI is given in the Location header field in the response&lt;/li&gt;
&lt;li&gt;304 Not modified: A successful get request is made, but the client does not modify the resource&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4XX (Client Error): This class of status code indicates that the client has erred. Examples of status codes belonging to this class; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;400 Bad requests: The request could not be understood by the server&lt;/li&gt;
&lt;li&gt;401 Unauthorized: The request requires user authentication&lt;/li&gt;
&lt;li&gt;404 Not found: The server can not find any resource matching the resource-URI
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5XX (Server Error): This class of status code indicates that the server has erred. Examples of status codes belonging to this class;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;500 Internal error: The server encountered an unexpected condition with prevented it from fulfilling the request&lt;/li&gt;
&lt;li&gt;503 Service unavailable: The server is unable to handle the request due to a temporal condition such as server maintenance or temporal overloading&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can read a lot more about status codes  &lt;a href="https://datatracker.ietf.org/doc/html/rfc2616#section-10"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you found this article useful and helpful, if you have any questions let me know in the comments. In a later article, we are going to learn how to implement and use these concepts in building a Rest API. That's it for now 👋&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Animation React - Bem-te-vi </title>
      <author>Gustavo Scarpim</author>
      <pubDate>Fri, 03 Sep 2021 03:09:54 +0000</pubDate>
      <link>https://dev.to/guscarpim/react-animation-bem-te-vi-ojl</link>
      <guid>https://dev.to/guscarpim/react-animation-bem-te-vi-ojl</guid>
      <description>&lt;p&gt;Today I'm bringing another animation made with GSAP / React, you can see in my github all the code.&lt;/p&gt;

&lt;p&gt;This animation is for those who like the bird "Bem-te-vi", if you have ideas for improvements, the code is open, I'll be happy to receive your PR.&lt;/p&gt;

&lt;p&gt;When accessing the site, I recommend opening the sound.&lt;/p&gt;

&lt;p&gt;Hope you like it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wGPUIow4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plakf88rcrvd0c0xfgfr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wGPUIow4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plakf88rcrvd0c0xfgfr.gif" alt="Gustavo Scarpim"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the complete code here on GitHub &lt;a href="https://github.com/GuScarpim/bird-animation"&gt;&lt;b&gt;Click here&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the Project in action &lt;a href="https://bem-te-vi.netlify.app/"&gt;&lt;b&gt;Deploy&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Multiline CSS-only typewriter effect</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 03 Sep 2021 02:51:36 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/multiline-css-only-typewriter-effect-18p4</link>
      <guid>https://dev.to/alvaromontoro/multiline-css-only-typewriter-effect-18p4</guid>
      <description>&lt;p&gt;Another entry for the typewriter effect CSS challenge. And with a different approach from the ones that have participated (I think, &lt;a class="mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;
 keep me honest here, it could be "close" to &lt;a href="https://dev.to/afif/a-multi-line-css-only-typewriter-effect-3op3"&gt;the one you did earlier&lt;/a&gt;, but using different elements and properties.)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/LYLZOrE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;The idea of this effect is having two different moving elements: the text container in itself and a pseudo-element used to hide the content.&lt;/p&gt;

&lt;p&gt;The container animation is simple: it grows a given height (the specified line height) until all the text has been displayed or the container reaches a limit of lines (500 by default). It happens in steps, so each line is revealed at a time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;grow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lineHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lineHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.typewriter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grow&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;animation-fill-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The pseudo-element has the same width as the container and a height equal to the line height. It reduces to a width of 0 (revealing the text as it shrinks) and then "jumps to the next line."&lt;/p&gt;

&lt;p&gt;The animation of the pseudo-element is a little bit more complex... mainly because it is not an animation but three small animations together:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change the width from 100% to 0%&lt;/li&gt;
&lt;li&gt;Move the element vertically&lt;/li&gt;
&lt;li&gt;Animate the caret (to blink)
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;carriageReturn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lineHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;caret&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bgColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.keyframes&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timePerLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;carriageReturn&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;caret&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h2&gt;

&lt;p&gt;One thing I like about this solution is that it is highly customizable. The &lt;code&gt;.typewriter&lt;/code&gt; class defines some default values for custom properties that the user can override. Here are the Properties:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--bgColor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Color&lt;/td&gt;
&lt;td&gt;White&lt;/td&gt;
&lt;td&gt;Defines the background color of the element and the animation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--lines&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;Maximum number of lines to animate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--lineHeight&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length&lt;/td&gt;
&lt;td&gt;1.5rem&lt;/td&gt;
&lt;td&gt;The line-height which will determine the size of the container height increase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--timePerLine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Duration&lt;/td&gt;
&lt;td&gt;4s&lt;/td&gt;
&lt;td&gt;The time that it will take for a line to be revealed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--widthCh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;The width of the element in ch units (useful when used with monospace)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--width&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;--widthCh&lt;/code&gt; * 1ch&lt;/td&gt;
&lt;td&gt;Optional. If you use &lt;code&gt;--widthCh&lt;/code&gt;, there's no need to define this variable. But it is convenient to provide relative values.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;There is one more custom property: &lt;code&gt;--time&lt;/code&gt;, but that one is auto-calculated based on the number of lines and the time per line, and the users should not modify it.&lt;/p&gt;

&lt;p&gt;On top of that, there are a series of classes that can be added to the container in HTML and that will provide some additional features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;monospace&lt;/code&gt;: makes the font as the default monospace family.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;no-caret&lt;/code&gt;: removes the caret (convenient to avoid the ugly end-of-line animation)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;big-caret&lt;/code&gt;: to display a wide caret instead of a thin one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros and cons
&lt;/h2&gt;

&lt;p&gt;Pros of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fully multiline: works with any number of lines (define the max in the custom property &lt;code&gt;--lines&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Responsive: users can define a width in characters or units, but the animation uses %, so it adapts to any size.&lt;/li&gt;
&lt;li&gt;Font-friendly: it works with monospace and non-monospace fonts (but in reality, it looks better in monospace).&lt;/li&gt;
&lt;li&gt;Highly customizable: Add a class to the typewriter element, or redefine the variables for different effects.&lt;/li&gt;
&lt;li&gt;(Slightly more) accessible (than my previous entries): All the text is in place at the beginning so that ATs can detect it. Plus, it uses common CSS properties that are supported in most browsers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not a polished finish: the caret goes until the end of each line, which looks weird (especially in the last line). The &lt;code&gt;no-caret&lt;/code&gt; class removes the caret.&lt;/li&gt;
&lt;li&gt;Content shift: if it's not absolutely positioned, the container will push the content below with each line that pops up.&lt;/li&gt;
&lt;li&gt;Required styles: the animation requires all lines to have the same height, so a &lt;code&gt;line-height&lt;/code&gt; value is needed. It's "vertically monospaced."&lt;/li&gt;
&lt;li&gt;Limited backgrounds: the background must be a solid color. Otherwise, the animation of the pseudo-element will be revealed.&lt;/li&gt;
&lt;li&gt;Responsive but not clean: the animations adapt to the element's width, but if the width is not specific, the letters may be cut off, and the animation won't be clean.&lt;/li&gt;
&lt;li&gt;Scrolling: if the user selects the text, they could scroll the container. This could be avoided with &lt;code&gt;user-select: none&lt;/code&gt;, but that could have some usability/accessibility issues of its own.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are probably more cons, but these are the ones that I could think of at the moment... But definitely, there will be more.&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
, this time I tested on iOS, and it works there too! 😊&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
