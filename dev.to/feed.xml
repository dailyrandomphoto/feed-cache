<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best Udemy Courses To Level Up Your Web Development Skills</title>
      <author>Thinkpader</author>
      <pubDate>Sun, 09 May 2021 08:39:04 +0000</pubDate>
      <link>https://dev.to/thinkpader/best-udemy-courses-to-level-up-your-web-development-skills-37fe</link>
      <guid>https://dev.to/thinkpader/best-udemy-courses-to-level-up-your-web-development-skills-37fe</guid>
      <description>&lt;p&gt;Are you a beginner developer and want to level up your dev game and progress faster than your competition? Read on and I’ll give you honest reviews of some of the courses I’ve taken on Udemy.&lt;/p&gt;

&lt;p&gt;These are courses that I’ve paid for (using my hard earned money) and this article is in no way sponsored by Udemy. There are no affiliate links so you can be doubly sure that I’m not putting any course here just to earn some extra bucks. If you wish to purchase any of these courses then make sure you wait for a sale (Udemy has them on a bi-monthly basis).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#for-absolute-beginners"&gt;
  &lt;/a&gt;
  For Absolute Beginners
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#the-web-developer-bootcamp-2021-by-colt-steele"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/the-web-developer-bootcamp/"&gt;The Web Developer Bootcamp 2021 by Colt Steele&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sF_78yzd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3sgxh22slf2g6ihpci2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sF_78yzd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3sgxh22slf2g6ihpci2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the new version of Colt’s The Web Developer Bootcamp, Udemy’s most popular web development course. This course has been completely overhauled to prepare students for the 2021 job market, and has over 60 hours of brand new content. Some of the highlights of the course are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The instructor, Colt Steele, is extremely knowledgable and witty. He makes the tricky stuff a lot less tricky, his explanations are spot on and his cat and dog jokes make you chuckle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The course everything a beginner web developer needs to know — from HTML, CSS, Bootstrap, JavaScript all the way to Node.js, Express and MongoDB.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It follows a logical structure so that the student (you!) is not overwhelmed or confused.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are a lot of mini exercises to re-enforce what you are learning and make it stick.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You make a BIG project towards the end and learn Node.js, Express and MongoDB in the process.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, this a great intro to the world of web development for beginners and you can’t go wrong with this one. Get the course  &lt;a href="https://www.udemy.com/course/the-web-developer-bootcamp/"&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#levelling-up-your-css-and-javascript"&gt;
  &lt;/a&gt;
  Levelling Up Your CSS and JavaScript
&lt;/h1&gt;

&lt;p&gt;Although Colt’s course covers the basics of CSS and JavaScript, I think spending some time to brush up what you’ve just learnt and more importantly why is does what it does will go a long way in making you a better developer. And the next two courses are perfect for that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-css-and-sass-flexbox-grid-animations-and-more-by-jonas-schmedtmann"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/advanced-css-and-sass/"&gt;Advanced CSS and Sass: Flexbox, Grid, Animations and More by Jonas Schmedtmann&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlhRrfWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y0xpshtgusbjyxsg8ts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlhRrfWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y0xpshtgusbjyxsg8ts.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the perfect course to level up your CSS skills and getting a better understanding of CSS and even SaaS. Some highlights of the course are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understand how CSS works behind the scenes. Learn about the cascade, specificity, inheritance, value processing, the visual formatting model, the box model, box types, positioning schemes and stacking contexts etc.&lt;/li&gt;
&lt;li&gt;Learn about CSS architecture.
*Learn about Flexbox and Grid layout.&lt;/li&gt;
&lt;li&gt;Introduction to Sass.&lt;/li&gt;
&lt;li&gt;Lots of cool and real world projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the course  &lt;a href="https://www.udemy.com/course/advanced-css-and-sass/"&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-modern-javascript-bootcamp-course-2021-by-colt-steele-and-stephen-grider"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/javascript-beginners-complete-tutorial/"&gt;The Modern Javascript Bootcamp Course (2021) by Colt Steele and Stephen Grider&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kb94jMIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oseq8jkb221zu606ykqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kb94jMIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oseq8jkb221zu606ykqu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the best courses to get an in depth understanding of JavaScript by two of Udemy’s best instructors — Colt Steele and Stephen Grider.&lt;/p&gt;

&lt;p&gt;The first half of the course is mostly theory and mini exercises and is taught by Colt. The second half will have you build a lot of cool and interesting projects that you can use in your portfolio. Some of the cool things you’ll build in the course:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fetch and manage information from third-party API’s.&lt;/li&gt;
&lt;li&gt;Build command line tools from scratch using Node JS.&lt;/li&gt;
&lt;li&gt;Build a fully-featured E-Commerce application from scratch — including production-grade authentication.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the course  &lt;a href="https://www.udemy.com/course/javascript-beginners-complete-tutorial/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learning-react-the-hottest-javascript-framework"&gt;
  &lt;/a&gt;
  Learning React — the HOTTEST JavaScript Framework
&lt;/h1&gt;

&lt;p&gt;Frameworks make your life easier by doing a lot of the heavy lifting for you. So once you’ve learnt enough JavaScript it’s time to learn React. React was created by Facebook and is the most widely used JavaScript framework.&lt;/p&gt;

&lt;p&gt;It’s also in a lot of demand in the job market. So learning React with increase your employability and increase your chances of getting a job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-tutorial-and-projects-course-by-john-smilga"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/react-tutorial-and-projects-course/"&gt;React Tutorial and Projects Course by John Smilga&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7iru71zY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ni006govfxnh357x0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7iru71zY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ni006govfxnh357x0x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although this course is by a lesser known Udemy instructor, it does not disappoint. The instructor makes React concepts easy to understand. The course uses the latest method of declaring functional components. Some of the highlights of the course are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start from the very basics of React.&lt;/li&gt;
&lt;li&gt;Learn about functional components.&lt;/li&gt;
&lt;li&gt;Learn the various hooks such as useState, useEffect etc.&lt;/li&gt;
&lt;li&gt;Make a lot of projects to practice what you’ve learnt.&lt;/li&gt;
&lt;li&gt;Lots of repetition to make sure what you learn sticks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the course  &lt;a href="https://www.udemy.com/course/react-tutorial-and-projects-course/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concluding-thoughts"&gt;
  &lt;/a&gt;
  Concluding Thoughts
&lt;/h1&gt;

&lt;p&gt;The courses given above are a great starting point for someone looking to dive into the world of web development. As I’ve already said in &lt;a href="https://dev.to/thinkpader/my-journey-from-a-code-newbie-to-advanced-beginner-5cp1"&gt;my first blog post&lt;/a&gt; the secret to becoming a successful web developer are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Practice what you learn — make your own mini projects to solidify your knowledge.&lt;/li&gt;
&lt;li&gt;Be consistent — take out time to practice coding everyday.&lt;/li&gt;
&lt;li&gt;Focus — pick a language or technology and stick with it. Don’t hop from one thing to another.&lt;/li&gt;
&lt;li&gt;Avoid distractions — switch off your phone or keep it in airplane mode.&lt;/li&gt;
&lt;li&gt;Take your time — don’t compare your progress with others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that’s it from me for today. I hope you’ll benefit from the courses that I’ve outlined above. See you guys soon.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Docker for the frontend and backend development -just for local testing not for the deployment.</title>
      <author>vishwasnarayanre</author>
      <pubDate>Sun, 09 May 2021 08:16:28 +0000</pubDate>
      <link>https://dev.to/vishwasnarayan5/docker-for-the-frontend-and-backend-development-just-for-local-testing-not-for-the-deployment-1470</link>
      <guid>https://dev.to/vishwasnarayan5/docker-for-the-frontend-and-backend-development-just-for-local-testing-not-for-the-deployment-1470</guid>
      <description>&lt;p&gt;We now have a frontend and backend that work flawlessly on our local computer. Although you can get more out of this guide if you have finished the previous pieces, it can also be useful in general. The aim of this section is to ready our web applications for modern deployment.&lt;/p&gt;

&lt;p&gt;We want to be able to easily run our frontend and backend on every computer and scale the framework if necessary. There are several ways to do that, just as there are numerous ways to do something else. We'll use Docker for this series since it's been very successful in recent years. This guide is broken down into four sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Docker?&lt;/li&gt;
&lt;li&gt;Dockerizing the frontend&lt;/li&gt;
&lt;li&gt;Dockerizing the backend&lt;/li&gt;
&lt;li&gt;Running it all at once
#what is docker?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a great many clarifications on what docker is everywhere on the web. I need to contact the main parts however I will not go into subtleties here. My primary concerns were taken from this video. &lt;/p&gt;

&lt;p&gt;Lets say we fabricated our backend as container document and tried it locally. Presently we need to discover a spot in the cloud to run it. The primary test that we experience presently is that we can not ensure that our backend runs in the cloud actually as it does locally. Just if the cloud climate is equivalent to our neighborhood climate, we could make such a guarantee. To get the hole between our neighborhood and the cloud climate as little as conceivable we need to tell our cloud-supplier what we need. Nonetheless, as a cloud supplier you can not have 1,000,000 designers reveal to you how their individual cloud arrangement should resemble. That is the reason cloud-suppliers offer various bundles. They fluctuate between giving a (virtual) machine and giving us a static climate to run our application in. If there should arise an occurrence of an individual machine it is presently dependent upon us, the designer, to ensure the machine carries on as our nearby machine. That is too expensive time and is additionally costly as we don't actually require a whole machine. We simply need a spot to run our container record. If there should arise an occurrence of furnishing us with a static climate we would now need to ensure that our neighborhood climate acts something very similar. This isn't valuable all things considered. Precisely here becomes docker helpful. &lt;/p&gt;

&lt;p&gt;Docker gives a shared conviction and is in a real sense tantamount with genuine steel trailers. A banana-organization just stresses over how to get their bananas into the compartment. Whenever it is shut it does't make any difference what is in there. It is fundamentally dealt with like each and every other compartment and the delivery organizations realize how to function with it. Docker gives a standard that is adequately adaptable yet additionally ensures the product runs in the cloud a similar way it does locally. &lt;/p&gt;

&lt;p&gt;We use docker to make a docker-picture of our application. Simply picture we would copy it on a Compact disc. That picture is assemble utilizing a dockerfile that characterizes how the docker-picture ought to be constructed. That picture would then be able to be utilized inside a docker-compartment. &lt;/p&gt;

&lt;p&gt;Docker is an amazing asset and gives more valuable highlights (for example scaling). Anyway this isn't as important here.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#docker-for-the-frontend"&gt;
  &lt;/a&gt;
  Docker for the frontend
&lt;/h1&gt;

&lt;p&gt;Please ensure that you have docker configured before attempting to dockerize the frontend. In addition, in config.nuxt.js, we must examine our base url. Since, if we deploy our app in the cloud as is, it would still believe that our backend is accessible at localhost:8080. That is why we must remove every environment-specific element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extracting-environment-specific-variables"&gt;
  &lt;/a&gt;
  Extracting environment specific variables
&lt;/h2&gt;

&lt;p&gt;Please ensure that you have docker configured before you attempt to dockerize the frontend. Furthermore, in our frontend, we only have one environment variable, which is the URL of our backend.&lt;/p&gt;

&lt;p&gt;You will remember that in the &lt;code&gt;nuxt.config.js&lt;/code&gt; package, we used the proxy module. All that remains is to include the environment variables.&lt;/p&gt;

&lt;p&gt;If no value is available, we set it to the default value (&lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;), and we must check our base url in config.nuxt.js. Since, if we deploy our app in the cloud as is, it would still believe our backend is accessible at localhost:8080. As a result, we must remove any environment-specific variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PROXY_API&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:8080/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, in our frontend folder, we'll make a dockerfile called frontend.dockerfile. The code in our docker file is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:alpine3.12&lt;/span&gt;

&lt;span class="c"&gt;# Create an application directory&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /app

&lt;span class="c"&gt;# The /app directory should act as the main application directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;# Copy the app package and package-lock.json file&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; frontend/package*.json ./&lt;/span&gt;

&lt;span class="c"&gt;# Install node packages&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;# Copy or project directory (locally) in the current directory of our docker image (/app)&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; frontend/ .&lt;/span&gt;

&lt;span class="c"&gt;# Build the app&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm run build

&lt;span class="c"&gt;# Expose $PORT on container.&lt;/span&gt;
&lt;span class="c"&gt;# We use a varibale here as the port is something that can differ on the environment.&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; $PORT&lt;/span&gt;

&lt;span class="c"&gt;# Set host to localhost / the docker image&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; NUXT_HOST=0.0.0.0&lt;/span&gt;

&lt;span class="c"&gt;# Set app port&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; NUXT_PORT=$PORT&lt;/span&gt;

&lt;span class="c"&gt;# Set the base url&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; PROXY_API=$PROXY_API&lt;/span&gt;

&lt;span class="c"&gt;# Set the browser base url&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; PROXY_LOGIN=$PROXY_LOGIN&lt;/span&gt;

&lt;span class="c"&gt;# Start the app&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "npm", "start" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The remarks and comments on each line should hopefully clarify what's going on. To create the picture, simply type this command into the terminal. Be sure to run it from the root directory of your project!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker build --file=frontend/frontend.dockerfile  -t playground-web-frontend .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;. : Full stop is very important&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;—file&lt;/code&gt; → The file to use for the build&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; → To identify our image we tag it&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.&lt;/code&gt;→ The location of the build context (the app). In our case the current directory, referenced as.&lt;/p&gt;

&lt;p&gt;Until we can dockerize or backend, we must remove every environment-specific attribute, just as we did for our frontend.In our backend, we have two environment-specific variables. The address of our frontend and the address of our servers.&lt;/p&gt;

&lt;p&gt;The programme configures all environment-specific variables.&lt;/p&gt;

&lt;p&gt;The assets file is located in the resources folder. Each line includes a key and a value. For the value, we'll use an environment variable (provided by docker) or the default value. Put in the following code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;spring.data.mongodb.uri=${MONGODB_URI:mongodb://localhost:27017/todo}server.port=${PORT:8080}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may be wondering why we haven't already set the URI for mogoDB. That's because spring thought by default that the &lt;strong&gt;mongoDB&lt;/strong&gt; will be found at that URI. That will change once we put it in place. That's why we're extracting it. Heroku can use the server port in the following section of the tutorial.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; openjdk:15&lt;/span&gt;

&lt;span class="c"&gt;# Create an application directory&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /app

&lt;span class="c"&gt;# The /app directory should act as the main application directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;# Copy or project directory (locally) in the current directory of our docker image (/app)&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; backend/build/libs/*.jar ./app.jar&lt;/span&gt;

&lt;span class="c"&gt;# Expose $PORT on container.&lt;/span&gt;
&lt;span class="c"&gt;# We use a varibale here as the port is something that can differ on the environment.&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; $PORT&lt;/span&gt;

&lt;span class="c"&gt;# Start the app&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "java", "-jar", "./app.jar" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The remarks/comments on each line should hopefully clarify what's going on with the dockerfile.&lt;/p&gt;

&lt;p&gt;There is a significant disparity between the frontend- and backend-dockerfiles. The former holds the application's code. If we make improvements to the backend, we must first construct it with this command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gradle build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To create the picture, simply type this command into the terminal. Again, make sure to run it from the root directory of your project!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker build --file=backend/backend.dockerfile  -t playground-web-backend .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;—file&lt;/code&gt; → The file to use for the build&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; → To identify our image we tag it&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.&lt;/code&gt;→ The location of the build context (the app). In our case the current directory, referenced as.&lt;/p&gt;

&lt;p&gt;We'll use docker-compose to start it up now that we have everything we need. The docker compose command instructs Docker to launch the services (and which images) to use, as well as to set the environment variables. In the root folder of your project, create a new file called &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;playground-web-db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo:4.4&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;MONGO_INITDB_DATABASE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;playground-web&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;27017:27017&lt;/span&gt;
  &lt;span class="na"&gt;playground-web-frontend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;playground-web-frontend:latest&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;PORT&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
      &lt;span class="na"&gt;PROXY_API&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://playground-web-backend:8080/&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3000:3000&lt;/span&gt;
  &lt;span class="na"&gt;playground-web-backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;playground-web-backend:latest&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;MONGODB_URI&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongodb://playground-web-db:27017/playground-web&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;8080:8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the app execute:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker-compose -f docker-compose.yml up&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thus you will have your application up and running.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>database</category>
      <category>html</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Data storage patterns, versioning and partitions</title>
      <author>Karun Japhet</author>
      <pubDate>Sun, 09 May 2021 08:07:10 +0000</pubDate>
      <link>https://dev.to/javatarz/data-storage-patterns-versioning-and-partitions-2han</link>
      <guid>https://dev.to/javatarz/data-storage-patterns-versioning-and-partitions-2han</guid>
      <description>&lt;p&gt;When you have large volumes of data, storing it logically helps users discover information and makes understanding the information easier. In this post, we talk about some of the techniques we use to do so in our application.&lt;/p&gt;

&lt;p&gt;In this post, we are going to use the terminology of AWS S3 buckets to store information. The same techniques can be applied on other cloud, non cloud providers and bare metal servers. Most setups will include a high bandwidth low latency network attached storage with proximity to the processing cluster or disks on HDFS if the entire platform uses HDFS. Your mileage may vary based on your team’s setup and use case. We are also going to talk about techniques which have allowed us to efficiently process this information using Apache Spark as our processing engine. Similar techniques are available for other data processing engines.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#managing-storage-on-disk"&gt;
  &lt;/a&gt;
  Managing storage on disk
&lt;/h1&gt;

&lt;p&gt;When you have large volumes of data, we have found it useful to separate data that comes in from the upstream providers (if any) from any insights we process and produce. This allows us to segregate access (different parts have different PII classifications) and apply different retention policies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.karun.me/assets/images/uploads/data-seggregation-using-buckets.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1e5krhrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.karun.me/assets/images/uploads/data-seggregation-using-buckets-622x422.png" alt="Data processing pipeline between various buckets and the operations performed when data moves from one bucket to the other"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We would separate each of these datasets so it’s clear where each came from. When setting up the location to store your data, refer to local laws (like GDPR) for details on data residency requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#provider-buckets"&gt;
  &lt;/a&gt;
  Provider buckets
&lt;/h2&gt;

&lt;p&gt;Providers tend to make their own directories to send us data. This allows them to have access over how long they want to retain data or if they need to modify information. Data is rarely modified but when it is, a heads up is given to re-process information.&lt;/p&gt;

&lt;p&gt;If this was an event driven system, we would have different event types suggesting that the data from an earlier date was modified. Since the volume of data is large and the batch nature of data transfer on our platform, verbal/written communication is preferred by our data providers which allows us to re-trigger our data pipelines for the affected days.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.karun.me/assets/images/uploads/provider-buckets-data-layout.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3OjC53nV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.karun.me/assets/images/uploads/provider-buckets-data-layout-650x373.png" alt="The preferred layout of provider buckets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#landing-bucket"&gt;
  &lt;/a&gt;
  Landing bucket
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.karun.me/assets/images/uploads/landing-bucket-data-layout.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lSZXiQkj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.karun.me/assets/images/uploads/landing-bucket-data-layout-650x537.png" alt="Landing bucket data layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most data platforms either procure data or produce it internally. The usual mechanism is for a provider to write data into its own bucket and give its consumers (our platform) access. We copy the data into a landing bucket. This data is a full replica of what the provider gives us without any processing. Keeping data we received from the provider separate from data we process and insights we derive allows us to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ensure that we don’t accidentally share raw data with others (we are contractually obligated not to share source data)&lt;/li&gt;
&lt;li&gt;Apply different access policies to raw data when it contains any PII&lt;/li&gt;
&lt;li&gt;Preserve an untouched copy of the source if we ever have to re-process the data (providers delete data from their bucket within a month or so)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#core-bucket"&gt;
  &lt;/a&gt;
  Core bucket
&lt;/h2&gt;

&lt;p&gt;The data in the landing bucket might be in a format sub optimal for processing (like CSV). The data might also be dirty. We take this opportunity to clean up the data and change the format to something more suitable for processing. For our use case, a downstream pipeline usually consumes a part of what the upstream pipeline produces. Since only a subset of the data is read downstream by a single job, using a file format that allows optimized columnar reads helped us boost performance and thus we use formats like ORC and parquet in our system. The output after this cleanup and transformation is written to the core bucket (since this data is clean input that’s optimised for further processing and thus core to the functioning of the platform).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.karun.me/assets/images/uploads/core-bucket-data-layout.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HYM-B7Kc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.karun.me/assets/images/uploads/core-bucket-data-layout-650x757.png" alt="Core bucket data layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While landing has an exact replica of what the data provider gave us, core’s raw data just transforms it to a more appropriate format (parquet/ORC for our use case) and processing applies some data cleanup strategies, adds meta-data and a few processed columns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#derived-bucket"&gt;
  &lt;/a&gt;
  Derived bucket
&lt;/h2&gt;

&lt;p&gt;Your data platform probably has multiple models running on top of the core data that produce multiple insights. We write the output for each of these into its own directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.karun.me/assets/images/uploads/derived-bucket-data-layout.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-yrTcV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.karun.me/assets/images/uploads/derived-bucket-data-layout-650x1312.png" alt="Derived bucket data layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-data-segregation"&gt;
  &lt;/a&gt;
  Advantages of data segregation
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Separating the data makes it easier to find the data. When you have terabytes or petabytes of information across your organisation with multiple teams working on this data platform, it becomes easy to lose track of the information that is already available and it can be hard to find it if they are stored in different places. Having some way to find information is helpful. For us, separating the data by whether we get it from an upstream system, we produce it or we send it out to a downstream system helps teams find information easily.&lt;/li&gt;
&lt;li&gt;Different rules apply to different datasets. You might be obligated to delete data from raw information you have purchased under certain conditions (like when they have PII). Rules for retaining derived data are different if it does not contain any PII.&lt;/li&gt;
&lt;li&gt;Most platforms allow archiving of data. Separating the dataset makes it easier to archive different datasets. (we’ll talk about other aspects of archiving during data partitioning)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#data-partitioning"&gt;
  &lt;/a&gt;
  Data partitioning
&lt;/h1&gt;

&lt;p&gt;Partitioning is a technique that allows your processing engine (like Spark) to read data more efficiently thus making the program more efficient. The most optimal way to partition data is based on the way it is read, written and/or processed. Since most data is written once and read multiple times, optimising a dataset for reads makes sense.&lt;/p&gt;

&lt;p&gt;We create a core bucket for each region we operate in (based on data residency laws of the area). For example, since the EU data cannot leave the EU, we create a derived-bucket in one of the regions in the EU. Under this bucket, we separate the data based on the country, the model that’s producing the data, a version of the data (based on its schema) and the date partition based on which the data was created.&lt;/p&gt;

&lt;p&gt;Reading data from a path like &lt;code&gt;derived-bucket/country=uk/model=alpha/version=1.0&lt;/code&gt; will give you a data set with columns year, month and day. This is useful when you are looking for data across different dates. When filtering the data based on a certain month, frameworks like spark allow the use of &lt;a href="https://medium.com/inspiredbrilliance/spark-optimization-techniques-a192e8f7d1e4"&gt;push down predicates&lt;/a&gt; making reads more efficient.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#data-versioning"&gt;
  &lt;/a&gt;
  Data versioning
&lt;/h1&gt;

&lt;p&gt;We change the version of the data every time there is a breaking change. Our versioning strategy is similar to the one talked about in the book for &lt;a href="https://www.databaserefactoring.com/"&gt;Database Refactoring&lt;/a&gt; with a few changes for scale. The book talks about many types of refactoring and the &lt;a href="http://www.agiledata.org/essays/renameColumn.html"&gt;column rename&lt;/a&gt; is a common and interesting use case.&lt;/p&gt;

&lt;p&gt;Since the data volume is comparatively low in databases (megabytes to gigabytes), migrating everything to the latest schema is (comparatively) inexpensive. It is important to make sure the application is usable at all points and that there is no point at which the application is not usable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#versioning-on-large-data-sets"&gt;
  &lt;/a&gt;
  Versioning on large data sets
&lt;/h2&gt;

&lt;p&gt;When the data volume is high (think terabytes to petabytes), running migrations like this is a very expensive process in terms of the time and resources taken. Also, the application downtime during the migration is large or there’s 2 copies of the dataset created (which makes storage more expensive).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#non-breaking-schema-changes"&gt;
  &lt;/a&gt;
  Non breaking schema changes
&lt;/h3&gt;

&lt;p&gt;Let’s say you have a dataset that maps the real names to superhero names that you have written to &lt;code&gt;model=superhero-identities/year=2021/month=05/day=01&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+--------------+-----------------+
|  real_name   | superhero_name  |
+--------------+-----------------+
| Tony Stark   | Iron Man        |
| Steve Rogers | Captain America |
+--------------+-----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next day, if you would like to add their home location, you can write the following data set to the directory &lt;code&gt;day=02&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+------------------+----------------+--------------------------+
|    real_name     | superhero_name |      home_location       |
+------------------+----------------+--------------------------+
| Bruce Banner     | Hulk           | Dayton, Ohio             |
| Natasha Romanoff | Black Widow    | Stalingrad, Soviet Union |
+------------------+----------------+--------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Soon after, you realize that storing the real name is too risky. The data you have already published was public knowledge but moving forward, you would like to stop publishing real names. Thus on &lt;code&gt;day=03&lt;/code&gt;, you remove the &lt;code&gt;real_name&lt;/code&gt; column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----------------+---------------------------+
| superhero_name |       home_location       |
+----------------+---------------------------+
| Spider-Man     | Queens, New York          |
| Ant-Man        | San Francisco, California |
+----------------+---------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you read &lt;code&gt;derived-bucket/country=uk/model=superhero-identities/&lt;/code&gt; using spark, the framework will read the first schema and use it to read the entire dataset. As a result, you do not see the new &lt;code&gt;home_location&lt;/code&gt; column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scala&amp;gt; spark.read.
  parquet("model=superhero-identities").
  show()
+----------------+---------------+----+-----+---+
|       real_name| superhero_name|year|month|day|
+----------------+---------------+----+-----+---+
|Natasha Romanoff|    Black Widow|2021|    5|  2|
|    Bruce Banner|           Hulk|2021|    5|  2|
|            null|        Ant-Man|2021|    5|  3|
|            null|     Spider-Man|2021|    5|  3|
|    Steve Rogers|Captain America|2021|    5|  1|
|      Tony Stark|       Iron Man|2021|    5|  1|
+----------------+---------------+----+-----+---+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Asking Spark to merge the schema for you shows all columns (with missing values shown as &lt;code&gt;null&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scala&amp;gt; spark.read.option("mergeSchema", "true").
  parquet("model=superhero-identities").
  show()
+----------------+---------------+--------------------+----+-----+---+
|       real_name| superhero_name|       home_location|year|month|day|
+----------------+---------------+--------------------+----+-----+---+
|Natasha Romanoff|    Black Widow|Stalingrad, Sovie...|2021|    5|  2|
|    Bruce Banner|           Hulk|        Dayton, Ohio|2021|    5|  2|
|            null|        Ant-Man|San Francisco, Ca...|2021|    5|  3|
|            null|     Spider-Man|    Queens, New York|2021|    5|  3|
|    Steve Rogers|Captain America|                null|2021|    5|  1|
|      Tony Stark|       Iron Man|                null|2021|    5|  1|
+----------------+---------------+--------------------+----+-----+---+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As your model’s schema evolves, using features like merge schema allows you to read the available data across various partitions and then process it. While we have showcased spark’s abilities to merge schemas for parquet files, such capabilities are also available with other file formats.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breaking-changes-or-parallel-runs"&gt;
  &lt;/a&gt;
  Breaking changes or parallel runs
&lt;/h3&gt;

&lt;p&gt;Sometimes, you evolve and improve your model. It is useful to do &lt;a href="https://en.wikipedia.org/wiki/Parallel_running"&gt;parallel runs&lt;/a&gt; and compare the result to verify that it is indeed better before the business switches to use the newer version.&lt;/p&gt;

&lt;p&gt;In such cases we bump up the version of the solution. Let’s assume job alpha v1.0.36 writes to the directory &lt;code&gt;derived-bucket/country=uk/model=alpha/version=1.0&lt;/code&gt;. When we have a newer version of the model (that either has a very different schema or has to be run in parallel), we bump the version of the job (and the location it writes to) to 2.0 making the job alpha v2.0.0 and it’s output directory &lt;code&gt;derived-bucket/country=uk/model=alpha/version=2.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If this change was made and deployed on 1st of Feb and this job runs daily, the latest date partition under &lt;code&gt;model=alpha/version=1.0&lt;/code&gt; will be &lt;code&gt;year=2020/month=01/day=31&lt;/code&gt;. From the 1st of Feb, all data will be written to the &lt;code&gt;model=alpha/version=2.0&lt;/code&gt; directory. If the data in version 2.0 is not sufficient for the business on 1st Feb, we either run backfill jobs to get more data under this partition or we run both version 1 and 2 until version 2’s data is ready to be used by the business.&lt;/p&gt;

&lt;p&gt;The version on disk represents the version of the schema and can be matched up with the versioning of the artifact when using &lt;a href="https://semver.org"&gt;Semantic Versioning&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Each version partition on disk has the same schema (making reads easier)&lt;/li&gt;
&lt;li&gt;Downstream systems can choose when to migrate from one version to another&lt;/li&gt;
&lt;li&gt;A new version can be tested out without affecting the existing data pipeline chain&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;Applications, system architecture and your data &lt;a href="https://evolutionaryarchitecture.com/"&gt;always evolve&lt;/a&gt;. Your decisions in how you store and access your data affect your system’s ability to evolve. Using techniques like versioning and partitioning helps your system continue to evolve with minimal overhead cost. Thus, we recommend integrating these techniques into your product at its inception so the team has a strong foundation to build upon.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to &lt;a href="https://www.linkedin.com/in/sanjoyb/"&gt;Sanjoy&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/anaynayak/"&gt;Anay&lt;/a&gt; &lt;a href="https://www.linkedin.com/in/sathishmandapaka/"&gt;Sathish&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/jayant-p/"&gt;Jayant&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/priyaaank/"&gt;Priyank&lt;/a&gt; for their draft reviews and early feedback. Thanks to &lt;a href="https://www.linkedin.com/in/nikita-oliver/"&gt;Niki&lt;/a&gt; for using her artwork wizardry skills.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>bigdata</category>
      <category>spark</category>
      <category>s3</category>
    </item>
    <item>
      <title>Rust CI with GitHub Actions</title>
      <author>Candy</author>
      <pubDate>Sun, 09 May 2021 07:38:20 +0000</pubDate>
      <link>https://dev.to/bampeers/rust-ci-with-github-actions-1ne9</link>
      <guid>https://dev.to/bampeers/rust-ci-with-github-actions-1ne9</guid>
      <description>&lt;p&gt;CI(Continuous Integration) is a concept that would interest most developers in a collaborative environment. CI automates the post-coding process of building and testing rather than doing it manually.&lt;/p&gt;

&lt;p&gt;Through CI, developers can smoothly integrate their code with other people’s code. This allows developers to focus on coding without wasting their time on integration, which in turn increases productivity.&lt;/p&gt;

&lt;p&gt;However, setting up CI can be troublesome and time-consuming, so developers have to decide the extent their CI process will cover.&lt;/p&gt;

&lt;p&gt;In our case, we implemented a CI workflow for the Rust projects on GitHub Actions which includes linting, testing, code coverage reporting on CodeCov, and building for release.&lt;/p&gt;

&lt;p&gt;Through this article, we hope you can have an easier time implementing CI for your Rust projects. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#related-resources"&gt;
  &lt;/a&gt;
  Related Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;: A feature on GitHub that allows users to &lt;em&gt;act(run a script)&lt;/em&gt; on event triggers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/actions-rs"&gt;action-rs&lt;/a&gt;: A collection of commonly used GitHub Actions for Rust projects&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codecov.io"&gt;CodeCov&lt;/a&gt;: A service that visualizes code coverage reports&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h1&gt;

&lt;p&gt;Example project using the workflow is uploaded in: &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/BamPeers"&gt;
        BamPeers
      &lt;/a&gt; / &lt;a href="https://github.com/BamPeers/rust-ci-github-actions-workflow"&gt;
        rust-ci-github-actions-workflow
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Rust project template with CI workflow in GitHub Actions
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#root-directory"&gt;
  &lt;/a&gt;
  Root Directory
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;.gitignore: A list of files for git to ignore&lt;/li&gt;
&lt;li&gt;Cargo.toml: The manifest file for this cargo package&lt;/li&gt;
&lt;li&gt;README.md: The project manual&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#githubworkflows"&gt;
  &lt;/a&gt;
  .github/workflows/
&lt;/h2&gt;

&lt;p&gt;This directory contains the workflow files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;check-and-lint.yaml : Workflow for linting the code by running cargo check, fmt, and clippy&lt;/li&gt;
&lt;li&gt;release-packaging.yaml : Workflow for building the file and uploading the result as a downloadable artifact&lt;/li&gt;
&lt;li&gt;test.yaml : Workflow for running tests, measuring code coverage, and uploading respective results to GitHub and CodeCov&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#src"&gt;
  &lt;/a&gt;
  src/
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;lib.rs : A stub library file that includes an example function and test code&lt;/li&gt;
&lt;li&gt;main.rs : The main executable that runs and prints the result of the function in lib.rs&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#workflows"&gt;
  &lt;/a&gt;
  Workflows
&lt;/h1&gt;

&lt;p&gt;The following is a simple explanation of the included workflows. Check out our project &lt;a href="https://github.com/BamPeers/rust-ci-github-actions-workflow"&gt;README&lt;/a&gt; for a more detailed explanation.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Check and Lint&lt;/strong&gt; and &lt;strong&gt;Test with Code Coverage&lt;/strong&gt; workflows run on pull requests and on pushing to the main branch. The &lt;strong&gt;Release Packaging&lt;/strong&gt; workflow runs on pushing to the main branch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-and-lint-checkandlintyaml"&gt;
  &lt;/a&gt;
  Check and Lint (check-and-lint.yaml)
&lt;/h2&gt;

&lt;p&gt;This workflow checks for compiler errors and code style inconsistencies.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Check job&lt;/strong&gt; runs &lt;code&gt;cargo check&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Rustfmt job&lt;/strong&gt; runs &lt;code&gt;cargo fmt --check&lt;/code&gt;. You can add a &lt;code&gt;rustfmt.toml&lt;/code&gt; or &lt;code&gt;.rustfmt.toml&lt;/code&gt; to configure the code style.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Clippy job&lt;/strong&gt; runs &lt;a href="https://github.com/rust-lang/rust-clippy"&gt;clippy&lt;/a&gt; through &lt;a href="https://github.com/actions-rs/clippy-check"&gt;actions-rs/clippy-check@v1&lt;/a&gt;.&lt;br&gt;
You can add a &lt;code&gt;clippy.toml&lt;/code&gt; or &lt;code&gt;.clippy.toml&lt;/code&gt; to configure the style.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#test-with-code-coverage-testyaml"&gt;
  &lt;/a&gt;
  Test with Code Coverage (test.yaml)
&lt;/h2&gt;

&lt;p&gt;This workflow runs tests, outputs test results, and publishes code coverage results on &lt;a href="https://codecov.io/"&gt;CodeCov&lt;/a&gt;.&lt;br&gt;
Publishing test results and code coverage data is done in one job to avoid running the tests twice.&lt;/p&gt;

&lt;p&gt;The environment variables for the job are set as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;PROJECT_NAME_UNDERSCORE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rust_ci_github_actions_workflow&lt;/span&gt;
    &lt;span class="na"&gt;CARGO_INCREMENTAL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="na"&gt;RUSTFLAGS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort&lt;/span&gt;
    &lt;span class="na"&gt;RUSTDOCFLAGS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;-Cpanic=abort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;PROJECT_NAME_UNDERSCORE&lt;/code&gt; environment variable should be replaced with your project name with - as _. Other environment variables are for code coverage.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Test job&lt;/strong&gt;, first, looks for a cache of the dependencies based on the hash of &lt;code&gt;Cargo.lock&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, it runs &lt;code&gt;cargo test&lt;/code&gt; on nightly Rust and uses &lt;code&gt;cargo2junit&lt;/code&gt; to generate a JUnit format test result. And, it runs &lt;code&gt;grcov&lt;/code&gt; and &lt;code&gt;rust-covfix&lt;/code&gt; to generate proper code coverage data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate test result and coverage report&lt;/span&gt;
    &lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;cargo install cargo2junit grcov rust-covfix;&lt;/span&gt;
        &lt;span class="s"&gt;cargo test --features coverage $CARGO_OPTIONS -- -Z unstable-options --format json | cargo2junit &amp;gt; results.xml;&lt;/span&gt;
        &lt;span class="s"&gt;zip -0 ccov.zip `find . \( -name "$PROJECT_NAME_UNDERSCORE*.gc*" \) -print`;&lt;/span&gt;
        &lt;span class="s"&gt;grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" --ignore "tests/*" -o lcov.info;&lt;/span&gt;
        &lt;span class="s"&gt;rust-covfix -o lcov_correct.info lcov.info;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Test results are uploaded through &lt;a href="https://github.com/EnricoMi/publish-unit-test-result-action"&gt;EnricoMi/publish-unit-test-result-action@v1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Code coverage results are uploaded to CodeCov through &lt;a href="https://github.com/codecov/codecov-action"&gt;codecov/codecov-action@v1&lt;/a&gt;. For private repositories, add your token from CodeCov repository setting to GitHub Secrets and uncomment the line: &lt;code&gt;token: ${{ secrets.CODECOV_TOKEN }}&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#release-packaging-releasepackagingyaml"&gt;
  &lt;/a&gt;
  Release Packaging (release-packaging.yaml)
&lt;/h2&gt;

&lt;p&gt;This workflow builds the package in release mode and uploads the resulting file as a GitHub artifact.&lt;/p&gt;

&lt;p&gt;The included job uploads the project binary in &lt;code&gt;target/release&lt;/code&gt; as an artifact through &lt;a href="https://github.com/actions/upload-artifact"&gt;actions/upload-artifact@v2&lt;/a&gt;.&lt;br&gt;
You can configure which files to upload.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#outcome"&gt;
  &lt;/a&gt;
  Outcome
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/BamPeers/rust-ci-github-actions-workflow/pull/1"&gt;Example pull request&lt;/a&gt; with a failing test and clippy warning can be found in our repository. &lt;br&gt;
Any failing job will block merging&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clippy"&gt;
  &lt;/a&gt;
  Clippy
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The action outputs result (&lt;strong&gt;Clippy Output&lt;/strong&gt; added to a random workflow).
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lWvpoMEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmtp0h9an82orf366f5a.png" alt="Screen Shot 2021-05-01 at 6.06.28 PM"&gt;
&lt;/li&gt;
&lt;li&gt;For pull requests, it adds annotations on the diff.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GF9GbfAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld7ym1xfiibdqeob3otv.png" alt="Screen Shot 2021-05-01 at 7.43.44 PM"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#test-result"&gt;
  &lt;/a&gt;
  Test Result
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The action outputs the test result (&lt;strong&gt;Test Results&lt;/strong&gt; added to a random workflow).
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9WhuNMdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e65gc2awy7pc5m9u7rm5.png" alt="Screen Shot 2021-05-01 at 6.05.25 PM"&gt;
&lt;/li&gt;
&lt;li&gt;For pull requests, the action adds a comment containing the test results.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wz08rclb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kk2baz1fakm8exu1pqcr.png" alt="Screen Shot 2021-05-01 at 7.00.21 PM"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code-coverage"&gt;
  &lt;/a&gt;
  Code coverage
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Code coverage results can be seen on your CodeCov repository.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hkcrWqv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byh4punhp9vzvo45uj78.png" alt="Screen Shot 2021-05-01 at 6.56.49 PM"&gt;
&lt;/li&gt;
&lt;li&gt;For pull requests, the action adds a comment containing the code coverage report.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NAyWPGst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2rwexgtiw5eala1hu0b.png" alt="Screen Shot 2021-05-01 at 7.00.33 PM"&gt;
&lt;/li&gt;
&lt;li&gt;You can also add a CodeCov badge on your README to display the coverage percentage like we did on ours. It can be found in the &lt;code&gt;Setting &amp;gt; Badge&lt;/code&gt; section of your CodeCov repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#release-packaging"&gt;
  &lt;/a&gt;
  Release Packaging
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Artifacts can be downloaded from the Summary tab of the workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#github-pull-request-checks"&gt;
  &lt;/a&gt;
  GitHub Pull Request Checks
&lt;/h2&gt;

&lt;p&gt;You can set status checks as required for merging in &lt;code&gt;Settings &amp;gt; Branches &amp;gt; Branch protection rules&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0DZVLC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06j2mfk60rpz142jn70c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0DZVLC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06j2mfk60rpz142jn70c.png" alt="Screen Shot 2021-05-01 at 7.47.38 PM"&gt;&lt;/a&gt;&lt;br&gt;
When one or more jobs fail, the PR merge box will look something like below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2mJ7IDM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hhkf0batw7un4pbpzzh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2mJ7IDM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hhkf0batw7un4pbpzzh.png" alt="Screen Shot 2021-05-01 at 7.46.21 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;We introduced CI for our Rust project through GitHub Actions. With this, the lint-build-test(+code coverage) process starts automatically when we push our code. &lt;/p&gt;

&lt;p&gt;Questions and suggestions are welcome in the comment section.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>githubactions</category>
      <category>ci</category>
      <category>devops</category>
    </item>
    <item>
      <title>Working with Go Embed</title>
      <author>Aditya</author>
      <pubDate>Sun, 09 May 2021 07:26:53 +0000</pubDate>
      <link>https://dev.to/adi73/working-with-go-embed-2mh7</link>
      <guid>https://dev.to/adi73/working-with-go-embed-2mh7</guid>
      <description>&lt;p&gt;With the release of Go-1.16, Go released a core package called &lt;em&gt;embed&lt;/em&gt;. This post will cover the various ways we can use Go Embed and build applications with ease.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building a Web Application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Golang being a versatile language, it is very much capable of being used to write server for web applications.&lt;br&gt;
We would be using React as the front-end for this and expose the full scale web application from a single Golang binary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;App Structure&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4cbY1Hki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6z9ozfev5nauk58klr5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4cbY1Hki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6z9ozfev5nauk58klr5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Project root, we maintain the server in the root and expose the client from within the client folder.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt; --&amp;gt; main driver of the application from which the server is started and the client is exposed statically&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//go:embed client/build
var content embed.FS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Golang 1.16 comes with the go:embed directive.&lt;br&gt;
We just specify the target folder which we want to map to our server.&lt;/p&gt;

&lt;p&gt;Exposing the app on the root of your running server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mux.HandleFunc("/", rootHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a function called &lt;code&gt;rootHandler&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;rootHandler&lt;/code&gt; exposes the static content onto the &lt;code&gt;/&lt;/code&gt; endpoint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func rootHandler(w http.ResponseWriter, req *http.Request) {
    upath := req.URL.Path
    if !strings.HasPrefix(upath, "/") {
        upath = "/" + upath
        req.URL.Path = upath
    }
    upath = path.Clean(upath)
    fsys := fs.FS(content)
    contentStatic, _ := fs.Sub(fsys, "client/build")
    if _, err := contentStatic.Open(strings.TrimLeft(upath, "/")); err != nil {
        req.URL.Path = "/"
    }
    http.FileServer(http.FS(contentStatic)).ServeHTTP(w, req)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is enough for exposing the static build of the react app via a Golang server.&lt;/p&gt;

&lt;p&gt;Building the Golang Binary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GOOS=linux go build -o server main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the server binary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now once this is tested on a localhost, we can build a Docker Image for this WebApp.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dockerfile&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM golang:1.16.3 As build-env

ENV GO111MODULE=on

ADD server /opt/app/

WORKDIR /opt/app/

RUN ls -lrt

EXPOSE 9191

CMD ["./server"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Docker Build and Run Command&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t server:v1.0 .
docker run -d -p 9000:9191 server:v1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to use the golang:1.16.3 image as the embed feature is available post the Golang 1.16 release.&lt;/p&gt;

&lt;p&gt;Overall we can say that introduction of go:embed has made some previous complicated tasks much simpler. We can now expose a full fledged web application with a single golang binary and expose it on any platform.&lt;/p&gt;

&lt;p&gt;To read more about go:emebed use the following references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/doc/go1.16#library-embed"&gt;Golang Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/doc/go1.16#embed"&gt;Go-Embed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>react</category>
    </item>
    <item>
      <title>Types vs. Interfaces in Typescript</title>
      <author>Ananta Bastola</author>
      <pubDate>Sun, 09 May 2021 07:00:52 +0000</pubDate>
      <link>https://dev.to/ananta/types-vs-interfaces-in-typescript-1g3p</link>
      <guid>https://dev.to/ananta/types-vs-interfaces-in-typescript-1g3p</guid>
      <description>&lt;p&gt;&lt;em&gt;Note: The term "Types" in this article is referring to the"&lt;code&gt;type&lt;/code&gt;" aliases in Typescript&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;According to the &lt;a href="https://www.typescriptlang.org/"&gt;official Typescript document&lt;/a&gt;: "TypeScript is an open-source language that builds on JavaScript, one of the world’s most used tools, by adding static type definitions." Implementing typescript on our project saves a lot of time in the long run. But as a developer, we should follow the best practices and standards when working with types in typescript. &lt;br&gt;
In this article, we will take a look at the differences between two types &lt;code&gt;type&lt;/code&gt; aliases and &lt;code&gt;interface&lt;/code&gt;. Many developers don't really know the real difference between these two. Having known the differences, we can implement these according to the best use case for us. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#origin"&gt;
  &lt;/a&gt;
  Origin
&lt;/h2&gt;

&lt;p&gt;Interfaces are used to define data structures, for example, an Object's shape/structure.&lt;/p&gt;

&lt;p&gt;Types are used to define the type of data, for example: Primitive, Union, Intersection, Tuple data types.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#type-evaluation-time"&gt;
  &lt;/a&gt;
  Type Evaluation Time
&lt;/h2&gt;

&lt;p&gt;There is a subtle key difference in the type evaluation period. Type evaluation on &lt;code&gt;type&lt;/code&gt; aliases is &lt;em&gt;immediate&lt;/em&gt; while Type evaluation on the &lt;code&gt;interface&lt;/code&gt; is &lt;em&gt;lazy&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#type-declaration-syntax"&gt;
  &lt;/a&gt;
  Type Declaration Syntax
&lt;/h2&gt;

&lt;p&gt;Even though both types and interfaces can be used in a similar way, their declaration syntax differs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;BulldogType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;BulldogInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extends-amp-implements-keyword"&gt;
  &lt;/a&gt;
  Extends &amp;amp; Implements keyword
&lt;/h2&gt;

&lt;p&gt;In Typescript, we can extend and implement types using the &lt;code&gt;interface&lt;/code&gt;. This is not possible using the &lt;code&gt;type&lt;/code&gt; aliases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Dog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Bulldog&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Dog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;isCute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#intersection"&gt;
  &lt;/a&gt;
  Intersection
&lt;/h2&gt;

&lt;p&gt;We can combine multiple &lt;code&gt;types&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt; with the"&lt;code&gt;&amp;amp;&lt;/code&gt;" keyword into a single &lt;code&gt;type&lt;/code&gt;. But, we cannot combine them into a single &lt;code&gt;interface&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Bulldog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GermanShepherd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DogBreeds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Bulldog&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;GermanShepherd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// valid&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IBulldog&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IGermanShepherd&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IDogBreeds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;IBulldog&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;IGermanShepherd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// valid&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#unions"&gt;
  &lt;/a&gt;
  Unions
&lt;/h2&gt;

&lt;p&gt;Union types allow us to create a new type that can have a value of one or a few more other types with the"&lt;code&gt;|&lt;/code&gt;" keyword.&lt;br&gt;
We can combine multiple &lt;code&gt;types&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt; with the union keyword into a single &lt;code&gt;type&lt;/code&gt;. But, we cannot combine them into a single &lt;code&gt;interface&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Bulldog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GermanShepherd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DogBreeds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Bulldog&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;GermanShepherd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// valid&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IBulldog&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IGermanShepherd&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IDogBreeds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;IBulldog&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IGermanShepherd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// valid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#declaration-merging"&gt;
  &lt;/a&gt;
  Declaration merging
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;interface&lt;/code&gt; allows for declaration merging whilst &lt;code&gt;type&lt;/code&gt; aliases don't. Typescript compiler intelligently merges two or more interfaces that share the same name into only one declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IBulldog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IBulldog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bruno&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IBulldog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bruno&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But &lt;code&gt;type&lt;/code&gt; aliases can't be changed once a type is created using the &lt;code&gt;type&lt;/code&gt; alias. So, declaration merging isn't possible with the &lt;code&gt;type&lt;/code&gt; aliases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IBulldog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IBulldog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Error: Duplicate identifier 'IBulldog'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Hooks in React</title>
      <author>Deepansh Bhargava</author>
      <pubDate>Sun, 09 May 2021 06:55:02 +0000</pubDate>
      <link>https://dev.to/deepansh946/hooks-in-react-58ki</link>
      <guid>https://dev.to/deepansh946/hooks-in-react-58ki</guid>
      <description>&lt;p&gt;Today we'll learn about the widely used hooks in React. First, let me tell you the need for hooks. As we all know React has functional and class components. Previously, the functional components were only used to render the data but didn't consist of the business logic or any side effect in itself. &lt;/p&gt;

&lt;p&gt;So hooks were introduced to implement lifecycle methods and states in functional components. They also bought the idea of code reusability along with them, that's why it was so quickly accepted within the React Community.&lt;/p&gt;

&lt;p&gt;** Drum rolls 🥁 **&lt;/p&gt;

&lt;p&gt;Let's move ahead with the main topic.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;useState hook&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This hook helps us to use and maintain a state within the functional component. It's very easy to use. The useState hook returns an array having two elements, the first one is the state variable and the second is the function that modifies the state variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Subtract&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have &lt;code&gt;number&lt;/code&gt; as the &lt;em&gt;state variable&lt;/em&gt; and &lt;code&gt;setNumber&lt;/code&gt; as the &lt;em&gt;function&lt;/em&gt; which will modify the &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;useEffect hook&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This hook works as a replacement for all the lifecycle methods which were used in class components. It contains a callback and a dependencies array. The hook will run every time when any of the values in the dependencies array changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleEven&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;toggleEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;toggleEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Subtract&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isEven&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Even&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Odd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here as you can see, the dependencies array contains &lt;code&gt;number&lt;/code&gt;. So every time the user presses any of the buttons or changes the input value, the &lt;code&gt;useEffect&lt;/code&gt; hook will &lt;em&gt;trigger&lt;/em&gt; and it'll check the number whether it's odd or even.&lt;/p&gt;

&lt;p&gt;Within this hook, you can call side effects such as changing something in &lt;em&gt;DOM&lt;/em&gt;, fetching data from an &lt;em&gt;API&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;One more thing used in this hook is the &lt;em&gt;cleanup&lt;/em&gt; function, which runs when we return a function in the &lt;em&gt;callback&lt;/em&gt;. This function helps in cleaning of side effects i.e clearing a timer, closing a web socket, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;useContext hook&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As in the class components, we had the &lt;strong&gt;Context API&lt;/strong&gt; in the same way, we have &lt;code&gt;useContext&lt;/code&gt; hook in functional components. This hook basically helps you to maintain a common global state across components. When the state changes it triggers re-renders across all the child components under the Context, even if the parent component uses &lt;code&gt;shouldComponentUpdate&lt;/code&gt; or  &lt;code&gt;React.memo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This hook can be used to implement a loading state within the application, passing data to children components, etc.&lt;/p&gt;

&lt;p&gt;To create it, we use the &lt;code&gt;createContext&lt;/code&gt; function and pass the initial value. In the context provider, we pass a prop called &lt;code&gt;value&lt;/code&gt; which consists of the context variables and functions to modify the context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Initial Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;                                                           
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we use this context in our &lt;em&gt;Parent Component&lt;/em&gt; and wrap our app inside the Context Provider and pass a value. So now all the child components have the access to the &lt;code&gt;value&lt;/code&gt; prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Person&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Context&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;togglePerson&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;togglePerson&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/UserContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in the child component &lt;code&gt;Person&lt;/code&gt; we can access the &lt;code&gt;value&lt;/code&gt; prop and we can change the context value too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Context&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;togglePerson&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;togglePerson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Stuart Little&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Change&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way you can use the &lt;code&gt;useContext&lt;/code&gt; hook. Make a context, wrap the parent component with the context's provider and you are good to go!&lt;/p&gt;

&lt;p&gt;You can experiment with the above code &lt;a href="https://codesandbox.io/s/usecontext-hook-zuoxi"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;useReducer hook&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you know Redux then you already know what this hook does, if not then simply it changes the &lt;code&gt;state&lt;/code&gt; according to the &lt;code&gt;action&lt;/code&gt; passed. It helps in maintaining a local state easily whereas in Redux we can do that globally.&lt;/p&gt;

&lt;p&gt;To use the reducer globally, we can make a context and pass it across the components. Geddit!&lt;/p&gt;

&lt;p&gt;Here we have an initial state and a dispatch to modify the state. Within the dispatch, we pass actions along with some info called &lt;code&gt;payload&lt;/code&gt;. The action then goes to the reducer which in turn changes the state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mad Angles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pringles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lays&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kurkure&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Uncle Chips&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;CodeSandbox&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quantity&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;list-item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&amp;gt; - {quantity&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
              &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
              &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="k"&gt;delete&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
          &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
              &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doritoes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;add&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find the above code &lt;a href="https://codesandbox.io/s/github/deepansh946/use-reducer-example/tree/main/?file=/src/App.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's it for now. There are other hooks too like &lt;code&gt;useRef&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt; but they are rarely used. Thanks for reading this article. Let me know if anything is not clear.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>Chrome extensions I use to enhance my GITHUB experience</title>
      <author>Dev To</author>
      <pubDate>Sun, 09 May 2021 06:49:56 +0000</pubDate>
      <link>https://dev.to/devto5/chrome-extensions-i-use-to-enhance-my-github-experience-1l3j</link>
      <guid>https://dev.to/devto5/chrome-extensions-i-use-to-enhance-my-github-experience-1l3j</guid>
      <description>&lt;p&gt;As a developer, we use GitHub every day and it is already a great tool, but what if we can make it even better with some chrome extensions!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Octotree&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It enhances GitHub code review and exploration with features like:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;IDE-like code tree
Folder and file search
Issues and Pull Request bookmarking
Support for private repositories 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I like this extension very much! It lets you explore the files and folders of a repository with a tree like structure.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open in VS Code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It Opens links to source code for any github repository in VSCode. Also works with Gitlab.&lt;/p&gt;

&lt;p&gt;In case you want to open the whole repository in GitHub directly with VSCode view rather than a single file, Just add 1s after github. Example: github.com/user/somerepository -&amp;gt; github1s.com/user/somerepository.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Refined GitHub&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It simplifies the GitHub interface and adds useful features too, for instance:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Adds reaction avatars showing who reacted to a comment
Adds one-click merge conflict fixers
Adds a button to revert all the changes to a file in a PR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Do-not-merge-WIP&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Disables "Merge pull request" button while ANY of the following is true:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Title contains "[wip]" (case insensitive)
Any tasks remain incomplete
Any commit messages remain prefixed with "squash!" or "fixup!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Read More :: &lt;a href="https://cmsinstallation.blogspot.com/2021/04/chrome-extensions-i-use-to-enhance-my.html"&gt;https://cmsinstallation.blogspot.com/2021/04/chrome-extensions-i-use-to-enhance-my.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>programming</category>
      <category>php</category>
    </item>
    <item>
      <title>Top 10 Web Development Trends for 2021</title>
      <author>Dev To</author>
      <pubDate>Sun, 09 May 2021 06:42:27 +0000</pubDate>
      <link>https://dev.to/devto5/top-10-web-development-trends-for-2021-4a2e</link>
      <guid>https://dev.to/devto5/top-10-web-development-trends-for-2021-4a2e</guid>
      <description>&lt;p&gt;Undoubtedly, it is quite known to everyone that user experience is one of the most considerable facets of web development. And with the same concern, developers are required to follow the latest tech trends of web development to enhance the user experience in every possible aspect such as security, speed, UI, etc. &lt;/p&gt;

&lt;p&gt;If we look at the numbers, around 90% of online visitors are less likely to return to the website after having a substandard user experience. Though to stay aware of all the latest web development trends is quite a tough job and with the same concern, we’ve compiled a list of several most-recommended tech trends to make it easier for you.&lt;/p&gt;

&lt;p&gt;Gone are the days when the Web Development is all about HTML, CSS, and JavaScript – however these are still the building blocks for any website but due to the rapid evolution of technologies, now you need to keep up with the latest trends &amp;amp; technologies as well during web development to stay ahead of the game. &lt;/p&gt;

&lt;p&gt;For instance, it is reported that by the year 2021, more than half of all the searches across the internet will be voice-based. Similarly, more than 60% of users don’t come back to the website just because of unresponsive design.&lt;/p&gt;

&lt;p&gt;Now, without wasting much time, let’s take a look at the top 10 Web Development trends for 2021:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;WebAssembly&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a majority of the web applications are built on JavaScript, it makes the applications heavier and comparatively slow. However, with WebAssembly, web development is getting more powerful as it allows you to compile the code in any programming language into byte code that runs in a browser. &lt;/p&gt;

&lt;p&gt;Meanwhile, the WebAssembly code is executed faster in comparison with JavaScript. Some of the prominent features of using WebAssembly are non-browser embedding support, portability &amp;amp; efficiency, etc. Also, the technology is strongly recommended to the web developers if they’re looking forward to building web games, audio/video apps, mapping apps, or other related applications. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Single Page Applications&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Single Page Application (SPA) is one of the most preferred tech trends by web developers in recent times. In general, Single Page Applications are concerned with the apps that work inside the browser, and with SPAs, users are not required to reload the webpage as it loads all the other content using JavaScript. &lt;/p&gt;

&lt;p&gt;There are various advantages of SPAs such as better speed &amp;amp; performance, high level of responsiveness, streamlined &amp;amp; optimized development, etc. that ultimately leads to high traffic and better conversion rate. Some of the major examples of Single Page Applications are Gmail, Twitter, Facebook, and many more.&lt;/p&gt;

&lt;p&gt;Read More :: &lt;a href="https://cmsinstallation.blogspot.com/2021/04/top-10-web-development-trends-for-2021.html"&gt;https://cmsinstallation.blogspot.com/2021/04/top-10-web-development-trends-for-2021.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>php</category>
      <category>programming</category>
    </item>
    <item>
      <title>RESTful Routes in Rails</title>
      <author>Angela Lam</author>
      <pubDate>Sun, 09 May 2021 06:39:47 +0000</pubDate>
      <link>https://dev.to/anglam/restful-routes-in-rails-107e</link>
      <guid>https://dev.to/anglam/restful-routes-in-rails-107e</guid>
      <description>&lt;p&gt;Routes are how requests, through URL and HTTP method, are directed to code that handles the routes. RESTful, Representation State Transfer, routes is a more structured way of defining how our routes work. RESTful routes provide mapping between HTTP verbs, controller actions, and CRUD operations in a database. CRUD represents an acronym for the database operations Create, Read, Update, and Delete (or Destroy). The controller actions, or CRUD, respond to the HTTP verbs, which are GET, POST, PUT and DELETE, as seen in the table below.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt; 
    &lt;th&gt;HTTP Verb&lt;/th&gt;  
    &lt;th&gt;Path&lt;/th&gt;
    &lt;th&gt;Controller#Action&lt;/th&gt;
    &lt;th&gt;Used for&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;GET&lt;/td&gt;
    &lt;td&gt;/posts&lt;/td&gt;
    &lt;td&gt;posts#index&lt;/td&gt;
    &lt;td&gt;display all posts&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;GET&lt;/td&gt;
    &lt;td&gt;/posts/new&lt;/td&gt;
    &lt;td&gt;posts#new&lt;/td&gt;
    &lt;td&gt;return an HTML form for creating a new post&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;POST&lt;/td&gt;
    &lt;td&gt;/posts&lt;/td&gt;
    &lt;td&gt;posts#create&lt;/td&gt;
    &lt;td&gt;create a new post&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;GET&lt;/td&gt;
    &lt;td&gt;/posts/:id&lt;/td&gt;
    &lt;td&gt;posts#show&lt;/td&gt;
    &lt;td&gt;display a specific post&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;GET&lt;/td&gt;
    &lt;td&gt;/posts/:id/edit&lt;/td&gt;
    &lt;td&gt;posts#edit&lt;/td&gt;
    &lt;td&gt;return an HTML form for editing a post&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;PATCH/PUT&lt;/td&gt;
    &lt;td&gt;/posts/:id&lt;/td&gt;
    &lt;td&gt;posts#update&lt;/td&gt;
    &lt;td&gt;update a specific post&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;DELETE&lt;/td&gt;
    &lt;td&gt;/posts/:id&lt;/td&gt;
    &lt;td&gt;posts#destroy&lt;/td&gt;
    &lt;td&gt;delete a specific post&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In my Rails project for Flatiron, in addition to RESTful routes, I used nested resources. Resources syntax is a useful way to have Rails generate each of the seven RESTful routes for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :posts
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;resources: posts&lt;/code&gt; in our routes.rb file will give you the seven RESTful routes for your application. Now let's say my application has a comments model. A comment belongs to a post and a post has many comments. If I wanted a route to look at a posts comments, such as &lt;code&gt;/posts/1/comments&lt;/code&gt;, I would need to utilize nested resources.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :posts do
    resources :comments
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our routes.rb file we nest comments resources under our posts resources to create some nested resources. Posts still gets the seven RESTful routes, while comments get seven NESTED RESTful routes.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt; 
    &lt;th&gt;HTTP Verb&lt;/th&gt;  
    &lt;th&gt;Path&lt;/th&gt;
    &lt;th&gt;Controller#Action&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;GET&lt;/td&gt;
    &lt;td&gt;/posts/:post_id/comments &lt;/td&gt;
    &lt;td&gt;comments#index&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;GET&lt;/td&gt;
    &lt;td&gt;/posts/:post_id/comments/new&lt;/td&gt;
    &lt;td&gt;comments#new&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;POST&lt;/td&gt;
    &lt;td&gt;/posts/:post_id/comments&lt;/td&gt;
    &lt;td&gt;comments#create&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;GET&lt;/td&gt;
    &lt;td&gt;/posts/:post_id/comments/:id&lt;/td&gt;
    &lt;td&gt;comments#show&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;GET&lt;/td&gt;
    &lt;td&gt;/posts/:post_id/comments/edit&lt;/td&gt;
    &lt;td&gt;comments#edit&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;PATCH/PUT&lt;/td&gt;
    &lt;td&gt;/posts/:post_id/comments/:id&lt;/td&gt;
    &lt;td&gt;comments#update&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;DELETE&lt;/td&gt;
    &lt;td&gt;/posts/:post_id/comments/:id&lt;/td&gt;
    &lt;td&gt;comments#destroy&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Nesting resources can get out of hand pretty quick, so best practice is to never nest more than 1 level deep (2 resources). The nested resources should have a parent/child relationship -- posts is the parent and comments is the child. Helpful tip: the last resource in the route is the controller that handles the requests. &lt;code&gt;/posts/:post_id/comments/new&lt;/code&gt; the new action for creating a new comment belonging to a specific post will be handled in the comments controller. One thing to note, the nested child resource are NESTED RESTful routes. If you want routes such as &lt;code&gt;/comments/:id&lt;/code&gt;, &lt;code&gt;/comments/new&lt;/code&gt;, or &lt;code&gt;/comments/edit&lt;/code&gt;, you must include comments resources in your config/routes.rb file to get non-nested RESTful routes for comments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :posts do
    resources :comments
  end
  resources :comments
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my project, I had itineraries nested under my destinations, so I wanted to be able to destroy all itineraries related to a destination.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :destinations do
    resources :itineraries do
      delete: destroy_all, on: :collection
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding &lt;code&gt;delete: destroy_all, on: :collection&lt;/code&gt;, creates a destroy_all action in the itineraries controller where I can delete all the itineraries under the current destination_id that belong to the user. This is a helpful action that allows me to delete a collection, and save the &lt;code&gt;itineraries#destroy&lt;/code&gt; route for deleting a single itinerary.&lt;/p&gt;

&lt;p&gt;If you want to see the routes on your application you can run your server followed by &lt;code&gt;/rails/info/routes&lt;/code&gt; or run &lt;code&gt;rails routes&lt;/code&gt; in your terminal to display your current routes. Here is a guide on &lt;a href="https://guides.rubyonrails.org/routing.html#nested-resource"&gt;nested resources&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;The Request/Response Flow uses RESTful routing. The user makes a request to a route. The application goes into the config/routes.rb to match the route to a controller/action. The logic in the action will be processed and the controller may interact with the model. Rails then renders the view associated with the action with the given data.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>database</category>
    </item>
    <item>
      <title>Promises in Javascript</title>
      <author>Deepansh Bhargava</author>
      <pubDate>Sun, 09 May 2021 06:28:32 +0000</pubDate>
      <link>https://dev.to/deepansh946/promises-in-javascript-1nbp</link>
      <guid>https://dev.to/deepansh946/promises-in-javascript-1nbp</guid>
      <description>&lt;p&gt;A &lt;strong&gt;Promise&lt;/strong&gt; represents the state of an asynchronous operation. This asynchronous operation can be anything i.e fetching data from an API, reading contents from a file, etc. &lt;/p&gt;

&lt;p&gt;Before promises we had callbacks, but they had fewer capabilities and lead to a sloppy code. When dealing with multiple callbacks, our code will become a callback hell which becomes difficult to manage.  &lt;/p&gt;

&lt;p&gt;A Javascript Promise consists of four states:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fulfilled: The operation was completed successfully.&lt;/li&gt;
&lt;li&gt;Pending: The operation isn't completed, it's still in process.&lt;/li&gt;
&lt;li&gt;Rejected: The operation is failed.&lt;/li&gt;
&lt;li&gt;Settled: The operation is either fulfilled or rejected.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A promise can be created by using &lt;br&gt;
&lt;code&gt;Promise&lt;/code&gt; constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNumEven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the above-created promise can be used as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;isNumEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;          
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;then&lt;/code&gt; handler is invoked when the promise is fulfilled while the &lt;code&gt;catch&lt;/code&gt; handler is invoked when the promise is rejected.&lt;/p&gt;

&lt;p&gt;Here in this case the &lt;code&gt;catch&lt;/code&gt; handler is invoked as the number we have passed to the function is not even.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chaining Promises&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When the result of a promise is another promise, we have to chain them to get the results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;isNumPrime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;           
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method of handling asynchronous operations looks fine when we have 2 to 3 promises but it gets unmanageable when there are more than that. Then &lt;code&gt;async await&lt;/code&gt; comes into the picture. They help you to handle multiple promises very easily.&lt;/p&gt;

&lt;p&gt;That's it for now. Thanks for making it to the last. Let me know any feedback or suggestions you have for this article. Also, let me know if you want me to write on &lt;code&gt;async await&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Starship, because it's too damn cool </title>
      <author>Satyarth Agrahari</author>
      <pubDate>Sun, 09 May 2021 05:31:27 +0000</pubDate>
      <link>https://dev.to/satylogin/starship-because-it-s-too-damn-cool-3nfc</link>
      <guid>https://dev.to/satylogin/starship-because-it-s-too-damn-cool-3nfc</guid>
      <description>&lt;p&gt;This is more of an appreciative post for &lt;a href="https://starship.rs/"&gt;starship&lt;/a&gt;, an amazingly cool and customizable prompt for any shell. And the reason why it is so amazing is because even by default it has too many cool features while being super fast.&lt;/p&gt;

&lt;p&gt;Just to show how it looks by default for rust and python:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3dodcSuF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnwrb9f19g7k07jvnwcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3dodcSuF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnwrb9f19g7k07jvnwcu.png" alt="Default"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that it identifies what kind of project it is while giving information about which branch we are on, and which version of toolchain we are using.&lt;/p&gt;

&lt;p&gt;It is not just limited to what comes by default, and its extensibility and ease of use is what is amazing about it. I use it for my personal projects as well as in my office system to inject information into prompt (like getting to know which versionset I am using).&lt;/p&gt;

&lt;p&gt;And special thanks to Chris Rose for introducing me to this.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>cli</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
