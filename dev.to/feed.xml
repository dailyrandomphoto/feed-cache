<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Micro Frontends as Web Components</title>
      <author>Pijus Rancevas</author>
      <pubDate>Mon, 24 Jan 2022 15:19:15 +0000</pubDate>
      <link>https://dev.to/pijusr/micro-frontends-as-web-components-363f</link>
      <guid>https://dev.to/pijusr/micro-frontends-as-web-components-363f</guid>
      <description>&lt;p&gt;Quite recently, I had a task to develop a bunch of reusable components for the blockchain space and compress them into a single NPM package.&lt;/p&gt;

&lt;p&gt;The problem was that we had a lot of different teams with their preferred development stack. Now, my mission was to glide through this obstacle in the most efficient way possible, so what do I choose?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;takes off the hat&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Quite right - &lt;a href="https://micro-frontends.org/"&gt;micro frontend&lt;/a&gt; infrastructure. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h2&gt;

&lt;p&gt;The idea is to make a &lt;a href="https://en.wikipedia.org/wiki/Monorepo"&gt;monorepository&lt;/a&gt; which would contain applications that will act as reusable components in a form of IFrames (inline frames) deployed from Vercel and packaged through Stencil.js framework. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monorepository"&gt;
  &lt;/a&gt;
  Monorepository
&lt;/h3&gt;

&lt;p&gt;I think it's wise to reuse UI components, styles, and configuration files where necessary. In other words, let's not make cross-functional teams into cross dysfunctional ones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apps/
‚îú‚îÄ cool-app-a/
‚îú‚îÄ cool-app-b/
common/
‚îú‚îÄ config/
‚îú‚îÄ ui/
‚îú‚îÄ tsconfig/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://vercel.com/blog/monorepos"&gt;Vercel&lt;/a&gt; allows deploying applications from monorepository in a breeze. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;p&gt;Now that we have deployment links for each application we can package them into NPM package via &lt;a href="https://stenciljs.com/"&gt;Stencil.js&lt;/a&gt; framework through IFrames.&lt;/p&gt;

&lt;p&gt;First of all, initialize the stencil project and remove all the boilerplate code. Then, create &lt;code&gt;deployments.json&lt;/code&gt; file at the top directory with the structure as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "deployments": [
       {
         "name": "ComponentName",
         "tag": "component-tag-name",
         "deployment": "URL" 
       },
       ....
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will act as our configuration file for our components. &lt;/p&gt;

&lt;p&gt;In the root directory add the &lt;code&gt;utility&lt;/code&gt; folder with &lt;code&gt;populate.js&lt;/code&gt; script and &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;utility/
‚îú‚îÄ populate.js
‚îú‚îÄ package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;package.json&lt;/code&gt; add &lt;code&gt;{ "type": "module" }&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;As an advocate of automatization, I made a script to handle the creation of stencil components. This is the &lt;code&gt;populate&lt;/code&gt; script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as fs from 'fs';
import configuration from '../deployments.json';

configuration.deployments.forEach(app =&amp;gt; {
  fs.writeFile(`src/components/${app.tag}.tsx`, getTemplate(app), (err) =&amp;gt; {
    if (err) {
      console.log("üî¥ ", error);
    } else {
      console.log(`‚úÖ  Component "${app.name}" populated.`)
    }
  });
})


function getTemplate(configuration) {

  return `
    import { Component, h } from '@stencil/core';

    @Component({
      tag: "${configuration.tag}",
      styleUrl: 'global.css'
    })
    export class ${configuration.name} {

      render() {
        return (
          &amp;lt;iframe src="${configuration.deployment}"
                  frameBorder="0"&amp;gt;
          &amp;lt;/iframe&amp;gt;
        );
      }
    }
    `
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what happened here? We are taking deployment variables, adding them to the boilerplate template, and writing everything into the components folder. Simple and neat. &lt;/p&gt;

&lt;p&gt;Now, to make our work easier, in the root level &lt;code&gt;package.json&lt;/code&gt; add a new script to handle the population of components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
    "populate": "node --experimental-json-modules  utility/populate.js"
    ...
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;npm run populate&lt;/code&gt; and deploy your components to NPM.&lt;/p&gt;

&lt;p&gt;üëã&lt;/p&gt;

</description>
      <category>stencil</category>
      <category>npm</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to install kitty terminal emulator</title>
      <author>Dumbo-programmer</author>
      <pubDate>Mon, 24 Jan 2022 15:02:45 +0000</pubDate>
      <link>https://dev.to/dumboprogrammer/how-to-install-kitty-terminal-emulator-3ap1</link>
      <guid>https://dev.to/dumboprogrammer/how-to-install-kitty-terminal-emulator-3ap1</guid>
      <description>&lt;p&gt;Kitty is a free open source GPU based terminal emulator for Linux and MacOS. It uses lower system resources and threaded rendering to run kitty faster. It comes with mouse , uni-code, true-color and focus tracking support. It also comes with extensions support. Using this you can enable some advanced features in your kitty terminal. You can tile multiple kitty terminal windows side by side. It also comes with graphics, scripts, startup sessions and shell prompt support.&lt;/p&gt;

&lt;p&gt;open up the terminal then: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method: 1&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin&lt;br&gt;
ln -s ~/.local/kitty.app/bin/kitty ~/.local/bin/&lt;br&gt;
cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Method: 2&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo apt update&lt;br&gt;
sudo apt install kitty&lt;br&gt;
kitty&lt;/code&gt;&lt;/p&gt;

</description>
      <category>bash</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>API Request ‚ö° to Local JSON File üìÉ in React ‚öõÔ∏è</title>
      <author>Rajesh Joshi</author>
      <pubDate>Mon, 24 Jan 2022 14:43:50 +0000</pubDate>
      <link>https://dev.to/rajeshj3/api-request-to-local-json-file-in-react-n7f</link>
      <guid>https://dev.to/rajeshj3/api-request-to-local-json-file-in-react-n7f</guid>
      <description>&lt;p&gt;One of the most used thing in React ‚öõÔ∏è is API Request to a remote Server. Since APIs have become part and parcel of our daily life, they are involved in almost everything we do on the world wide web. An API request occurs when a developer adds an endpoint to a URL and makes a call to the server.&lt;/p&gt;




&lt;p&gt;A basic API Request in React/JavaScript using &lt;code&gt;axios&lt;/code&gt; looks like this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.example.com/users/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above JavaScript (axios) syntax, the API Request has been made to &lt;code&gt;https://api.example.com&lt;/code&gt; &lt;strong&gt;Domain&lt;/strong&gt; (also knows as &lt;strong&gt;BASE URL&lt;/strong&gt;) and &lt;code&gt;/users/&lt;/code&gt; &lt;strong&gt;end-point&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#request-to-local-json-file"&gt;
  &lt;/a&gt;
  Request to Local JSON File üìÉ
&lt;/h2&gt;

&lt;p&gt;Making GET Request to a Local JSON File is really simple, but there are few prerequisites you need to make sure, they are followed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make sure, JSON File is accessible through the server, ie. the file should be in &lt;code&gt;public/&lt;/code&gt; folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create &lt;code&gt;public/db/users.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Johny&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Check if the JSON File is accessible at &lt;a href="http://localhost:3000/db/users.json"&gt;http://localhost:3000/db/users.json&lt;/a&gt; when the server is running.&lt;/p&gt;




&lt;p&gt;This time, if you want to make GET request to the JSON File, do it like this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/db/users.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#react-example"&gt;
  &lt;/a&gt;
  React Example
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Create React App&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx create-react-app my-app

&lt;span class="nt"&gt;---&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 100%

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Install &lt;code&gt;axios&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Add JSON File &lt;code&gt;public/db/users.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Johny&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Update &lt;code&gt;App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUsers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/db/users.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Run the development server&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNnNHPiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvhifd8rmc9c6lur6xo9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNnNHPiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvhifd8rmc9c6lur6xo9.png" alt="JS/React/JSONFile" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope, you guys liked this quick tutorial &lt;code&gt;API Request ‚ö° to Local JSON File üìÉ in React ‚öõÔ∏è&lt;/code&gt;. If so, then please don't forget to drop a Like ‚ù§Ô∏è&lt;/p&gt;

&lt;p&gt;And also, help me reach &lt;strong&gt;1k Subscribers&lt;/strong&gt; ü§©, on my &lt;a href="https://www.youtube.com/channel/UCCO4jIqmQVFDmVeeaAO5obA"&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding! üòÉüíª&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Super fast React Localization üåç (i18n) with i18next and Tolgee üêÅ</title>
      <author>Jan Cizmar</author>
      <pubDate>Mon, 24 Jan 2022 14:36:53 +0000</pubDate>
      <link>https://dev.to/tolgee_i18n/super-fast-react-localization-i18n-with-i18next-and-tolgee-1l9i</link>
      <guid>https://dev.to/tolgee_i18n/super-fast-react-localization-i18n-with-i18next-and-tolgee-1l9i</guid>
      <description>&lt;p&gt;So you develop an app in React and you want many users to use it, right? To make your app usable for users in foreign&lt;br&gt;
countries, you have to translate your App to their languages. üá¨üáß üá®üá≥ üáÆüáπ üá™üá∏ üá´üá∑&lt;/p&gt;

&lt;p&gt;In this article, I am going to show you, how to integrate i18next and Tolgee into your project and how easy and fast you&lt;br&gt;
can translate a React app using these tools.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tolgee has also its native integrations. Which are a bit easier to set up, so if you're not used to i18next, maybe it&lt;br&gt;
would be easier for you to &lt;a href="http://tolgee.io/docs/web/using_with_react/installation/docs/web/using_with_react/installation"&gt;start with those&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-is-i18next"&gt;
  &lt;/a&gt;
  What is &lt;a href="https://www.i18next.com/"&gt;i18next&lt;/a&gt;?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;i18next&lt;/code&gt; is a library enabling you to localize your app. Basically, you are calling methods of this&lt;br&gt;
library providing keys to be translated. The methods return value in specified language retrieved from localization&lt;br&gt;
files. There is much more about i18next, but let's keep it simple for this tutorial. You can read more about&lt;br&gt;
i18next &lt;a href="https://www.i18next.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ok-and-what-is-tolgee"&gt;
  &lt;/a&gt;
  OK! And what is &lt;a href="https://tolgee.io"&gt;Tolgee&lt;/a&gt;?
&lt;/h3&gt;

&lt;p&gt;Tolgee is an open-source tool combining localization platform and integrations to provide a simple way to translate the web&lt;br&gt;
applications for both developers and translators. üë®‚Äçüíªüë©üèª‚Äçüíªüßñüèºüë©üèª‚Äçüíªüßñüèº&lt;/p&gt;

&lt;p&gt;Tolgee Localization Platform is a place, where you can manage all your localization strings in the simple UI. It's made&lt;br&gt;
to simplify the localization process as much as possible. With Tolgee you can translate the localization strings&lt;br&gt;
directly in the application you develop without editing localization data files. You can also automatically generate&lt;br&gt;
screenshots from your app, which can be used in the future by translators of your project.&lt;/p&gt;

&lt;p&gt;So let's dive in to the hacking!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bootstrapping-the-app"&gt;
  &lt;/a&gt;
  Bootstrapping the App üî•
&lt;/h2&gt;

&lt;p&gt;I am going to use Create React App for this, since it's the simplest way to bootstrap a React app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IB2WsoTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lponm0ze5mohgslsagm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IB2WsoTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lponm0ze5mohgslsagm.gif" alt="Dwight" width="480" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am going to use Typescript, but if you're JavaScript purist, remove the &lt;code&gt;--template typescript&lt;/code&gt; part. Open your&lt;br&gt;
terminal and command it to execute...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app@5.0.0 i18next-tolgee-demo --template typescript &amp;amp;&amp;amp; cd i18next-tolgee-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then install packages necessary for the localization (i18n).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-i18next i18next-icu i18next @tolgee/i18next @tolgee/ui
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the process succeeded we are prepared to start hacking! üòé&lt;/p&gt;

&lt;p&gt;Open the project in your favourite editor, and go to &lt;code&gt;App.tsx&lt;/code&gt; and replace all the crap with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Hello world!
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't need the default CRA content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-tolgee-project"&gt;
  &lt;/a&gt;
  Setting up a Tolgee project
&lt;/h2&gt;

&lt;p&gt;To get started, we are going to need a new project in Tolgee Platform.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Login to &lt;a href="https://app.tolgee.io"&gt;Tolgee Platform&lt;/a&gt; or use your&lt;br&gt;
self-hosted &lt;a href="https://tolgee.io/docs/platform/self_hosting/running_with_docker"&gt;Tolgee instance&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new project by clicking &lt;strong&gt;&lt;code&gt;Add&lt;/code&gt; button in the top right&lt;/strong&gt;. And fill the project name.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EvNIzvCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3993x5vuqmrfqbvz6lov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EvNIzvCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3993x5vuqmrfqbvz6lov.png" alt="Add button" width="222" height="113"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Optionally, you can add multiple languages to translate your app into.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Expand your user menu in top right corner and choose API keys.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Log9ukaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tolgee.io/img/blog/2022-01-20-super-fast-react-localizaton-with-i18next-and-tolgee/account-settings.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Log9ukaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tolgee.io/img/blog/2022-01-20-super-fast-react-localizaton-with-i18next-and-tolgee/account-settings.png" alt="Project menu" width="189" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Hit &lt;strong&gt;plus button&lt;/strong&gt;, then leave all checkboxes checked and click &lt;strong&gt;save&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Done. You have obtained your API key!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#configuring-i18next-with-tolgee"&gt;
  &lt;/a&gt;
  Configuring i18next with Tolgee
&lt;/h2&gt;

&lt;p&gt;First, let's create a file called &lt;code&gt;.env.development.local&lt;/code&gt; in the project root. This file contains our Tolgee&lt;br&gt;
configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_TOLGEE_API_URL=https://app.tolgee.io
REACT_APP_TOLGEE_API_KEY=&amp;lt;your_api_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then go to &lt;code&gt;index.tsx&lt;/code&gt; and configure &lt;code&gt;i18n&lt;/code&gt; object from &lt;code&gt;i18next&lt;/code&gt; library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;withTolgee&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tolgee/i18next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;i18next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ICU&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i18next-icu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;initReactI18next&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-i18next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;withTolgee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_TOLGEE_API_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_TOLGEE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_TOLGEE_API_KEY&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tolgee/ui&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;UI&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ICU&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initReactI18next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;supportedLngs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;fallbackLng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This sets Tolgee as translation provider for i18next and enables&lt;br&gt;
&lt;a href="https://tolgee.io/docs/icu_message_format"&gt;ICU message formatter&lt;/a&gt;. Change&lt;br&gt;
&lt;code&gt;supportedLngs&lt;/code&gt; to language tags you created while creating project in Tolgee platform.&lt;/p&gt;

&lt;p&gt;Then wrap your &lt;code&gt;&amp;lt;App/&amp;gt;&lt;/code&gt; component with &lt;code&gt;Suspens&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when translations are loading, fallback is rendered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#translating-on-steroids"&gt;
  &lt;/a&gt;
  Translating on steroids üí™
&lt;/h2&gt;

&lt;p&gt;Now we can start translating. Let's go to &lt;code&gt;App.tsx&lt;/code&gt; again and obtain &lt;code&gt;t&lt;/code&gt; function by calling &lt;code&gt;useTranslation&lt;/code&gt; hook. Then&lt;br&gt;
use the t function in the returned JSX.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTranslation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello_world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first parameter is the translation key, which is a unique identifier of the string. Normally I would recommend to&lt;br&gt;
also provide some information about the placing of the string in the app. So if the text is for example placed in&lt;br&gt;
settings, it would be good practice naming it &lt;code&gt;settings.hello-world&lt;/code&gt;. The second parameter is default value, which is&lt;br&gt;
going to be rendered, when no translation is provided in localization data.&lt;/p&gt;

&lt;p&gt;Now start the dev server or &lt;strong&gt;restart it, if you already started&lt;/strong&gt;, so the &lt;strong&gt;.env properties are refreshed&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After project is built, open it in the browser. You should see &lt;code&gt;Hello world!&lt;/code&gt; üëã message.&lt;/p&gt;

&lt;p&gt;Now let's do some the magic. üí´&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ISGEmK7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://tolgee.io/img/blog/2022-01-20-super-fast-react-localizaton-with-i18next-and-tolgee/magic.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ISGEmK7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://tolgee.io/img/blog/2022-01-20-super-fast-react-localizaton-with-i18next-and-tolgee/magic.gif" alt="Project menu" width="275" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the "Hello world!" text while holding &lt;strong&gt;Alt key&lt;/strong&gt; or &lt;strong&gt;‚å• key&lt;/strong&gt; on Mac.&lt;/p&gt;

&lt;p&gt;Quick translation appears if everything is configured well. If not, double-check your &lt;code&gt;.env.development.local&lt;/code&gt; and check&lt;br&gt;
the properties are accessible in the browser by printing them to console using &lt;code&gt;console.log()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iWt22V5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tolgee.io/img/blog/2022-01-20-super-fast-react-localizaton-with-i18next-and-tolgee/in-context-dialog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWt22V5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tolgee.io/img/blog/2022-01-20-super-fast-react-localizaton-with-i18next-and-tolgee/in-context-dialog.png" alt="In context dialog" width="733" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the quick translation dialog, try to change the value to something else like "Hello universe!" and hit save. See? The&lt;br&gt;
text was changed in the DOM as well.&lt;/p&gt;

&lt;p&gt;String saved or edited in the translation dialog is stored in the platform, so you can edit there as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dy-rD1ZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tolgee.io/img/blog/2022-01-20-super-fast-react-localizaton-with-i18next-and-tolgee/tolgee-platform.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dy-rD1ZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tolgee.io/img/blog/2022-01-20-super-fast-react-localizaton-with-i18next-and-tolgee/tolgee-platform.png" alt="Platform" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also edit more languages in the quick translation dialog. Also, you can take screenshots, which can be later&lt;br&gt;
used by translators, translating your strings in Tolgee platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90nDivoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tolgee.io/img/blog/2022-01-20-super-fast-react-localizaton-with-i18next-and-tolgee/in-context-dialog-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90nDivoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tolgee.io/img/blog/2022-01-20-super-fast-react-localizaton-with-i18next-and-tolgee/in-context-dialog-2.png" alt="In context dialog2" width="727" height="587"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#your-mama-can-translate-like-this"&gt;
  &lt;/a&gt;
  Your mama can translate like this üëµ
&lt;/h2&gt;

&lt;p&gt;Translating using this dialog or Tolgee platform is very simple so anybody from your team or even your mama can&lt;br&gt;
translate your app like this. So when you would like to save some time, you can just provide access to the platform&lt;br&gt;
or/and to the app in development mode and let anybody translate it.&lt;/p&gt;

&lt;p&gt;But let's get back to the code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#switching-the-language"&gt;
  &lt;/a&gt;
  Switching the language
&lt;/h2&gt;

&lt;p&gt;To be able to switch the language, create following &lt;code&gt;LanguageSelector&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useTranslation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-i18next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LangSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTranslation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"lang-selector"&lt;/span&gt;
      &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeLanguage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;üá¨üáß English&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"cs"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;üá®üáø ƒåesky&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And use it in the &lt;code&gt;App&lt;/code&gt; component...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LangSelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`hello_world`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now you are able to switch the language!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kmYSQWzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://tolgee.io/img/blog/2022-01-20-super-fast-react-localizaton-with-i18next-and-tolgee/lng-switch.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kmYSQWzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://tolgee.io/img/blog/2022-01-20-super-fast-react-localizaton-with-i18next-and-tolgee/lng-switch.gif" alt="Language switching" width="346" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparing-for-production"&gt;
  &lt;/a&gt;
  Preparing for production
&lt;/h2&gt;

&lt;p&gt;In production mode you &lt;strong&gt;don't want to leak you API key&lt;/strong&gt;. You want your translations to be part of the production&lt;br&gt;
build. There are multiple options to obtain your exported localization files.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#option-1-using-tolgee-platform"&gt;
  &lt;/a&gt;
  Option 1: Using Tolgee Platform
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open your project in the Tolgee Platform&lt;/li&gt;
&lt;li&gt;Click on "Export" item in the side menu&lt;/li&gt;
&lt;li&gt;Hit "Export as zip of .json files" button&lt;/li&gt;
&lt;li&gt;Download of exported data starts immediately&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#option-2-using-api-endpoint"&gt;
  &lt;/a&gt;
  Option 2: Using API endpoint
&lt;/h3&gt;

&lt;p&gt;If you have &lt;code&gt;curl&lt;/code&gt; installed in your system, you can download the data using it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl "https://app.tolgee.io/api/project/export/jsonZip?ak=&amp;lt;YOUR API KEY&amp;gt;" \
--output data.zip
unzip data.zip
delete data.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is useful, when you would like to automate localization data downloading in our CI/CD workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-data"&gt;
  &lt;/a&gt;
  Using the data
&lt;/h3&gt;

&lt;p&gt;To use your exported data, store them into &lt;code&gt;src/i18n&lt;/code&gt; folder. So your project structure would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src
...
‚îú‚îÄ‚îÄ App.tsx
‚îú‚îÄ‚îÄ LangSelector.tsx
‚îú‚îÄ‚îÄ i18n
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ cs.json
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ en.json
‚îú‚îÄ‚îÄ index.css
‚îú‚îÄ‚îÄ index.tsx
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, lets provide the data to Tolgee. There are multiple ways, how to do&lt;br&gt;
so &lt;a href="https://tolgee.io/docs/web/using_with_i18next/preparing_for_production"&gt;described in docs&lt;/a&gt;. But I am going to&lt;br&gt;
provide them as imported static objects, which is good option, since the App is small and there are not many&lt;br&gt;
translations yet.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code&gt;index.tsx&lt;/code&gt; file and import the localization jsons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;enLang&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./i18n/en.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;csLang&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./i18n/cs.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then provide them to Tolgee config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;withTolgee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_TOLGEE_API_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_TOLGEE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_TOLGEE_API_KEY&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tolgee/ui&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;UI&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;staticData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;enLang&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;csLang&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ICU&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initReactI18next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;supportedLngs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;fallbackLng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To test it works, you can comment out the apiKey param. App should be translated without fetching the data from Tolgee&lt;br&gt;
API.&lt;/p&gt;

&lt;p&gt;Congrats! üéâ Now you are able to speed up your localization process!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tolgee is an open-source tool, simplifying localization process and removing unnecessary tasks&lt;/li&gt;
&lt;li&gt;It enables you or your colleagues to modify translated string in the context of developed web application&lt;/li&gt;
&lt;li&gt;Tolgee is also a localization platform, where you can manage all your translations&lt;/li&gt;
&lt;li&gt;If you like our project, please star our projects on GitHub

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/tolgee/server"&gt;github.com/tolgee/server&lt;/a&gt; ‚≠ê&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tolgee/js"&gt;github.com/tolgee/js&lt;/a&gt; ‚≠ê&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;To read more about i18next Tolgee integration,
visit &lt;a href="https://tolgee.io/docs/web/using_with_i18next/installation"&gt;Tolgee docs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>How to create a form app with the Notion API </title>
      <author>Ryan</author>
      <pubDate>Mon, 24 Jan 2022 14:23:07 +0000</pubDate>
      <link>https://dev.to/up_to_nonsense/how-to-create-a-form-app-with-the-notion-api-1o2</link>
      <guid>https://dev.to/up_to_nonsense/how-to-create-a-form-app-with-the-notion-api-1o2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-tutorial-using-reactjs-and-expressjs"&gt;
  &lt;/a&gt;
  A tutorial using React.js and Express.js
&lt;/h2&gt;

&lt;p&gt;The Notion API officially came out of beta on May 13, 2021, enabling web developers to create cool apps that integrate with your Notion workspace, an example being ourselves, Commotion. For our form tool, we use the Notion API to save form responses to a connected Notion database. In this tutorial, we‚Äôre gonna show you how to create a simple form tool like ours that accepts emails with an html form and saves it to your Notion workspace. Let‚Äôs get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-setup-the-notion-stuff"&gt;
  &lt;/a&gt;
  1. Setup the Notion stuff
&lt;/h3&gt;

&lt;p&gt;First, create a Notion account (obviously). Then create a Database table (typing in ‚Äò/database‚Äô) and add a column called Email that is of type email, like below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sF_-RxwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252Fcbef53ff-b0d1-46f7-9136-d906e815b15e%3Falt%3Dmedia%26token%3D5b3588ef-0654-409e-a0af-145d5d03065d" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sF_-RxwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252Fcbef53ff-b0d1-46f7-9136-d906e815b15e%3Falt%3Dmedia%26token%3D5b3588ef-0654-409e-a0af-145d5d03065d" alt="Sample Notion Database" width="880" height="557"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open the database object as its own page by clicking the expand icon. We‚Äôll come back to this in a second.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k6vwmEKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252F950ab2ac-b5d5-429c-920d-d9b1ace3c6a7%3Falt%3Dmedia%26token%3D88cddaa4-5ea7-4a09-9b2b-026c3df9ad77" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6vwmEKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252F950ab2ac-b5d5-429c-920d-d9b1ace3c6a7%3Falt%3Dmedia%26token%3D88cddaa4-5ea7-4a09-9b2b-026c3df9ad77" alt="Expand Notion Database" width="880" height="227"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Then go to &lt;a href="https://www.notion.so/my-integrations"&gt;https://www.notion.so/my-integrations&lt;/a&gt; and select ‚ÄúCreate new integration‚Äù and give it the name ‚ÄúBasic Form‚Äù or something.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pyv7ODdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252F50d01d00-813f-4152-8653-ec4245af61b8%3Falt%3Dmedia%26token%3De1f8351d-57bf-4174-b1fc-1e5d75ddd48b" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pyv7ODdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252F50d01d00-813f-4152-8653-ec4245af61b8%3Falt%3Dmedia%26token%3De1f8351d-57bf-4174-b1fc-1e5d75ddd48b" alt="Notion integrations page" width="880" height="580"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Go back to your database‚Äôs Notion page and share the database with the app you just created by hitting Share on the top right, clicking the Invite input in the dropdown, and selecting your app from the popup. This makes sure that the API actually has access to this database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkuyzPMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252F47fd8cd5-a0d4-4bc2-a4fc-5274032c4dc4%3Falt%3Dmedia%26token%3D61ea072d-e2c8-4e8d-854b-b03cd6701527" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkuyzPMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252F47fd8cd5-a0d4-4bc2-a4fc-5274032c4dc4%3Falt%3Dmedia%26token%3D61ea072d-e2c8-4e8d-854b-b03cd6701527" alt="Notion share with API" width="880" height="595"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-setup-your-backend-with-expressjs"&gt;
  &lt;/a&gt;
  2. Setup your backend with Express.js
&lt;/h3&gt;

&lt;p&gt;For this tutorial, we need to setup a backend, so we‚Äôre going with Express. You can read how to set it up here, but the gist of it is to go to a new folder and input the following commands in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir form-tool-backend
$ cd form-tool-backend
$ npm install express
$ npm install axios
$ npm install cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within the form-tool-backend folder, create a file app.js and paste the following into it just to get things going.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// form-tool-backend/app.js

const express = require('express')
const axios = require('axios')
const app = express()
const port = 3002

app.listen(port, () =&amp;gt; {
  console.log(`Example app listening on port ${port}`)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why do we need a backend? Because we need to use secret keys that we don‚Äôt want to leak out. If someone were to get your secret key, that would be able to read and and write anything to your Notion workspace! Very scary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-retrieve-database-information-with-the-notion-api"&gt;
  &lt;/a&gt;
  3. Retrieve Database Information with the Notion API
&lt;/h3&gt;

&lt;p&gt;Finally, let‚Äôs actually start building! I‚Äôd open up &lt;a href="https://developers.notion.com/reference"&gt;https://developers.notion.com/reference&lt;/a&gt; cause we‚Äôll be referencing this page a lot. First, we need to get our secret key, so let‚Äôs go back to &lt;a href="https://www.notion.so/my-integrations"&gt;https://www.notion.so/my-integrations&lt;/a&gt;, select our app, then copy our Internal Integration Token. Make sure to not leak this!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HGjV3fhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1sr44ecnf7dkr5z68n5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HGjV3fhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1sr44ecnf7dkr5z68n5a.png" alt="Get secret key" width="880" height="514"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Paste the following code below into your app.js and replace the secretKey variable with the token you just copied. We‚Äôll then create a route that fetches the database data with axios.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// form-tool-backend/app.js

const express = require('express')
const axios = require('axios')
const app = express()
const port = 3002

// REPLACE! Retrieved from https://www.notion.so/my-integrations
const secretKey = 'secret_***************'

// What we'll pass into axios
const headers = {
  'Content-Type': 'application/json',
  Authorization: `Bearer ${secretKey}`,
  'Notion-Version': '2021-08-16',
}

// Route to fetch database data
app.get('/:database_id', async (req, res) =&amp;gt; {
  const { database_id } = req.params;
  const resp = await axios({
    method: 'GET',
    url: 'https://api.notion.com/v1/databases/' + database_id,
    headers
  });
  return res.json(resp.data);
})

app.use(cors())
app.use(express.json())
app.listen(port, () =&amp;gt; {
  console.log(`Example app listening on port ${port}`)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have something to test! Within your form-tool-backend folder, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ node app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go back to your Notion database in your browser and copy your database_id from your Notion url, marked as the part here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9mn3aqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ag6c49r4h2o4ytnbavq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9mn3aqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ag6c49r4h2o4ytnbavq1.png" alt="Get Database ID" width="880" height="595"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now if your run the following in a different terminal tab:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl http://localhost:3002/REPLACE_THIS_WITH_DATABASE_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get the data from your database!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-setup-your-frontend-with-reactjs"&gt;
  &lt;/a&gt;
  4. Setup your frontend with React.js
&lt;/h3&gt;

&lt;p&gt;Next, we need to create our frontend. In this case, we‚Äôre using React. Go to your terminal, go to the folder you want to put all your code in, and input the following command to create a sample app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx create-react-app form-tool
$ cd form-tool
$ npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q6f0ctyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9usq1pqcvdzsuoj49d02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6f0ctyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9usq1pqcvdzsuoj49d02.png" alt="Empty React app" width="880" height="557"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let‚Äôs make some changes, shall we? Replace the contents of the App.js with the below, and replace the database_id value with the one you copied earlier from the Notion URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// form-tool/src/App.js

import { useEffect, useState } from 'react';

const database_id = REPLACE_WITH_YOUR_DATABASE_ID;

function App() {
  const [db, setDB] = useState({});

  useEffect(() =&amp;gt; {
    // We fetch the data from the local server that we're running
    fetch('http://localhost:3002/' + database_id).then(async (resp) =&amp;gt; {
      setDB(await resp.json())
    });
  }, []);

  return (
    &amp;lt;div&amp;gt;
      {db.title?.[0]?.plain_text}
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This just gets the data that our backend retrieves and brings it into our frontend. The schema for a database object is a little unique, so checkout the official documentation here. If we run npm start, we should get the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_h0sPsc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtnxz5501k8j5hy3nt6a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_h0sPsc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtnxz5501k8j5hy3nt6a.png" alt="Bare bones site" width="880" height="580"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We‚Äôve officially fetched data from our Notion workspace! Hooray!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-save-form-response-to-notion"&gt;
  &lt;/a&gt;
  5. Save form response to Notion
&lt;/h3&gt;

&lt;p&gt;Finally, what we‚Äôve all been waiting for, let‚Äôs actually take some information and save it to our database shall we? We‚Äôll start by adding a simple form in our frontend React project that sends the email + name to our backend to send to Notion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useEffect, useState } from 'react';

const database_id = REPLACE_WITH_YOUR_DATABASE_ID;

function App() {
  const [db, setDB] = useState({});

  // NEW! This will send the form information to our backend we setup
  const onSubmit = (e) =&amp;gt; {
    e.preventDefault();
    fetch('http://localhost:3002/' + database_id, {
      method: 'POST',
      body: JSON.stringify({ email: e.target.email.value, name: e.target.name.value }),
      headers: { "Content-Type": 'application/json' }
    });
  }

  useEffect(() =&amp;gt; {
    fetch('http://localhost:3002/' + database_id).then(async (resp) =&amp;gt; {
      setDB(await resp.json());
    });
  }, []);

  return (
    &amp;lt;div&amp;gt;
      {db.title?.[0]?.plain_text}
      {/* NEW! This is an extremely simple form to collect the information */}
      &amp;lt;form onSubmit={onSubmit}&amp;gt;
        &amp;lt;input name="name" placeholder="Name" required /&amp;gt;
        &amp;lt;input name="email" placeholder="Email" type="email" required /&amp;gt;
        &amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;
      &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVq8XgPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li39c1t52p8mh4tsk94e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVq8XgPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li39c1t52p8mh4tsk94e.png" alt="Add simple form" width="880" height="557"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We now have an extremely simple form. Right now, nothing actually happens if we submit the form. That‚Äôs cause we need to build the backend function! If we switch back to our Express app, we can create a POST route that accepts our data, the name and email, and sends it to our Notion database. Entries in a database are equivalent to a Notion ‚Äúpage‚Äù, so we need to create a page where the database_id is the parent. You can reference &lt;a href="https://developers.notion.com/reference/post-page"&gt;https://developers.notion.com/reference/post-page&lt;/a&gt; to get a better sense of what this means.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')
const axios = require('axios')
const cors = require('cors')
const app = express()
const port = 3002

// REPLACE! Retrieved from https://www.notion.so/my-integrations
const secretKey = 'secret_***************'

// What we'll pass into axios
const headers = {
  'Content-Type': 'application/json',
  Authorization: `Bearer ${secretKey}`,
  'Notion-Version': '2021-08-16',
}

// NEW! This is a new route that will actually send the information to Notion
app.post('/:database_id', async (req, res) =&amp;gt; {
  const { database_id } = req.params
  const { name, email } = req.body
  await axios({
    method: 'POST',
    url: 'https://api.notion.com/v1/pages',
    headers,
    data: {
      parent: { database_id },
      properties: {
        "Name": { "title": [{ text: { content: name } }] },
        "Email": { "email": email }
      }
    }
  })
})

// Route to fetch 
app.get('/:database_id', async (req, res) =&amp;gt; {
  const { database_id } = req.params;
  const resp = await axios({
    method: 'GET',
    url: 'https://api.notion.com/v1/databases/' + database_id,
    headers
  });
  return res.json(resp.data)
})

app.use(cors())
app.use(express.json())
app.listen(port, () =&amp;gt; {
  console.log(`Example app listening on port ${port}`)
})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we get this up and running and we restart our backend by quitting and rerunning node app.js , we can input a name and email into our form and it will save to our Notion database! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nDkYC8if--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn53w7ivnlitpehgy01n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nDkYC8if--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn53w7ivnlitpehgy01n.png" alt="Saved database" width="880" height="595"&gt;&lt;/a&gt;   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-bonus-for-next-time"&gt;
  &lt;/a&gt;
  6. Bonus: For next time
&lt;/h3&gt;

&lt;p&gt;So this has been a tutorial on how to save form responses to YOUR Notion database, but this doesn‚Äôt explain how we at Commotion are able to save responses to ANYONE‚Äôs Notion database. This requires making your integration a public one and having your user connect their Notion account like how we do it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UN7bN2Fb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2byeys7a40thc8q6ajy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UN7bN2Fb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2byeys7a40thc8q6ajy.png" alt="Connect with Notion" width="880" height="603"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bCJrBQky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgvzxaf1ii75z7gwiotj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCJrBQky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgvzxaf1ii75z7gwiotj.png" alt="Notion connector" width="880" height="696"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We‚Äôll save this for another time, but it‚Äôs not actually too bad. We‚Äôre 75% of the way there already. In the mean time, please check out Commotion if you need to create forms that work with your Notion workspace or want to send emails to contacts in a Notion database, mail merge style. We hope that this was informative!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 5 essential skills for fresh parents</title>
      <author>TomislavNovacicBF</author>
      <pubDate>Mon, 24 Jan 2022 14:06:58 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/top-5-essential-skills-for-fresh-parents-2jne</link>
      <guid>https://dev.to/bornfightcompany/top-5-essential-skills-for-fresh-parents-2jne</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;This article is all about work-life "balance" and how to continue progressing in your career after the baby comes. I will write about my conclusions and organisation in this new environment. We will wrap things up with 5 essential skills you can work on to prepare yourself for the arrival of the newcomer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-comfort-zone"&gt;
  &lt;/a&gt;
  The comfort zone
&lt;/h2&gt;

&lt;p&gt;Things are going great, you are learning new stuff and reading work-related articles on a daily basis. You are as motivated as ever, advancing really quickly and on your way to become a ninja developer (or other equivalent role). Your diet is on check and you are getting your workouts in. Nothing can stop you! And then one day you become a parent...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-chaos"&gt;
  &lt;/a&gt;
  The chaos
&lt;/h2&gt;

&lt;p&gt;At the beginning things are going good, but as the baby grows you start to realise that your free time becomes shorter and shorter, and soon enough you will have practically no free time. You now don‚Äôt have time for your partner or working out, let alone for personal development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What to do now? How to continue working on your goals and be there for your child at the same time?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People always talk about work-life balance and you always thought it was some nonsense that lazy people say? Yeah, me too. Well there is some truth in that approach, because now you just have to make things work somehow. Save yourself a few months (or a year) of getting the hang on things and start working on this skills immediately if you are expecting kids any time soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-5-skills-ambitious-parent-needs"&gt;
  &lt;/a&gt;
  Top 5 skills ambitious parent needs
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Time management&lt;/strong&gt;&lt;br&gt;
Day only has 24 hours so try to get the best out of every minute. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Read whenever you have a few minutes to spare.&lt;/strong&gt; Read while your partner is playing with the baby, when you're in the rest room, in the bed after everyone is asleep and you have few atoms of energy left.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get up early&lt;/strong&gt;. Wake up first and start your day in a complete peace (and use that time wisely).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Work from home&lt;/strong&gt;. If you have the option to work from home, just take it - you‚Äôll save a bunch of commute and getting-ready hours, and you can use that in a better way. If that is not a possibility for you, then travel to work with public transportation so you can do some work while you are on your way to the office. If you, for some reason, prefer the car over public transportation then you can listen to audio books or podcasts while driving.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't sacrifice sleep&lt;/strong&gt;, it's counter productive after some time and it's not worth it in the end. Fresh mind = more focus = better productivity and more growth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Organization&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Try to plan every minute of your day up front&lt;/strong&gt;. This enables you to see how much literature you can consume in a day. According to that you can set realistic goals and don't get frustrated thinking you've done too little that day. When you precisely estimate every action in your day, you unknowingly start to do repetitive tasks even more quickly (eating for example).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Multitasking&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Incorporate learning in any activity that does not require your complete focus&lt;/strong&gt;. Listen to audio books while you are grocery shopping, cleaning, cooking, in the gym or walking a dog. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Focus&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Focus 110% while working&lt;/strong&gt;. That is the only time of the day that is strictly dedicated for your work and personal growth. It‚Äôs also the only time when you‚Äôll have complete peace and no distractions. You‚Äôll start to appreciate those hours more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Start adjusting to working in non-ideal environments&lt;/strong&gt;. There will be times when you have to work or read and kids are screaming and running around, and you have to get used to it (it gets better over time I promise).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5. Dedication&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Prioritise&lt;/strong&gt;. Not all things you stumble upon on your go-to reading materials are important for your line of work. Read only about stuff that is applicable to your work and future aspirations, skip the rest. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Delete your social media accounts&lt;/strong&gt; (or leave them but use them responsibly). The same goes for TV and gaming consoles. Time spent on these platforms is valuable and cannot be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;P.S. Don't forget to spend quality time with your family, don't be a stranger. This article focuses on the parts of the day you are "free".&lt;/p&gt;

&lt;p&gt;Did I forget anything? Does any of this sound familiar to you? Feel free to react and comment down below.&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>productivity</category>
      <category>learning</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Dashbird now integrates with 5 new AWS services</title>
      <author>Taavi Rehem√§gi</author>
      <pubDate>Mon, 24 Jan 2022 13:57:27 +0000</pubDate>
      <link>https://dev.to/dashbird/dashbird-now-integrates-with-5-new-aws-services-35dj</link>
      <guid>https://dev.to/dashbird/dashbird-now-integrates-with-5-new-aws-services-35dj</guid>
      <description>&lt;p&gt;&lt;em&gt;TL;DR: Dashbird launches observability for five new AWS services (ELB, SNS, RDS, OpenSearch, and HTTP API Gateway) to allow for a faster, more secure, and smoother serverless observability experience.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;, the leading monitoring platform for serverless AWS applications, announces five new AWS integrations. On top of the existing integrations supported, the company is on its way to expanding the platform capabilities to support the broader range of popular cloud services, with more integrations launching later this quarter.&lt;/p&gt;

&lt;p&gt;Last year, Dashbird was awarded as the "Cool Vendor in Observability" for its unique, no instrumentation approach and comprehensive 3-pillar approach combining¬†&lt;a href="https://dashbird.io/serverless-observability/"&gt;observability&lt;/a&gt;,¬†&lt;a href="https://dashbird.io/failure-detection/"&gt;failure management&lt;/a&gt;, and¬†&lt;a href="https://dashbird.io/serverless-well-architected-reports/"&gt;posture management&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-aws-services-added"&gt;
  &lt;/a&gt;
  New AWS services added
&lt;/h2&gt;

&lt;p&gt;Additionally to¬†&lt;strong&gt;AWS Lambda&lt;/strong&gt;,¬†&lt;strong&gt;SQS&lt;/strong&gt;,¬†&lt;strong&gt;DynamoDB&lt;/strong&gt;,¬†&lt;strong&gt;API Gateway&lt;/strong&gt;,¬†&lt;strong&gt;ECS&lt;/strong&gt;,¬†&lt;strong&gt;Kinesis,&lt;/strong&gt;¬†and¬†&lt;strong&gt;Step Functions&lt;/strong&gt;, you can now get detailed insights and metrics in the¬†&lt;a href="https://app.dashbird.io/"&gt;Dashbird app&lt;/a&gt;¬†for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://aws.amazon.com/elasticloadbalancing/"&gt;Elastic Load Balancers&lt;/a&gt;¬†(ELB)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;Simple Notification Service&lt;/a&gt;¬†(SNS)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://aws.amazon.com/rds/"&gt;Relational Database Service&lt;/a&gt;¬†(RDS)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://aws.amazon.com/opensearch-service/the-elk-stack/what-is-opensearch/"&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://aws.amazon.com/api-gateway/faqs/"&gt;HTTP API Gateway&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ah6jbred--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2022/01/dashbird-service-update-3-724x1024.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ah6jbred--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2022/01/dashbird-service-update-3-724x1024.png" alt="Dashbird new aws services serverless" width="724" height="1024"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These services can also be included in Dashbird¬†&lt;a href="https://dashbird.io/docs/quickstart/projects/"&gt;Resource Groups&lt;/a&gt;¬†and are supported by the¬†&lt;a href="https://dashbird.io/serverless-well-architected-reports/"&gt;Well-Architected Lens&lt;/a&gt;,¬†&lt;a href="https://dashbird.io/failure-detection/"&gt;Automated failure detection&lt;/a&gt;.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NRJda2zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2022/01/Screenshot-2022-01-17-at-15.43.48-1024x379.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NRJda2zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2022/01/Screenshot-2022-01-17-at-15.43.48-1024x379.png" alt="AWS serverless monitoring" width="880" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#elastic-load-balancers-elb"&gt;
  &lt;/a&gt;
  Elastic Load Balancers (ELB)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--85S2PmzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/-8TzkOK_mT2OvdeFioJk_hmdh0F1ExIjqZHgnkVKo_BZE6m70jFj0IokfjfmvXlG6UdvrG2h_yKqFaSdggKhADH202SvUu0ErXUOYbRrhV4b9VXNxjabgeKYaS4fwNi3XZfW0fw-" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--85S2PmzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/-8TzkOK_mT2OvdeFioJk_hmdh0F1ExIjqZHgnkVKo_BZE6m70jFj0IokfjfmvXlG6UdvrG2h_yKqFaSdggKhADH202SvUu0ErXUOYbRrhV4b9VXNxjabgeKYaS4fwNi3XZfW0fw-" alt="AWS ELB monitoring" width="880" height="287"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's included in the dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Quickly get insights into the number of requests, errors, active connections, consumed LCUs, throughput and target groups and configuration.&lt;/li&gt;
&lt;li&gt;  Detailed monitoring for target groups separately.&lt;/li&gt;
&lt;li&gt;  You'll see how many healthy and unhealthy target groups you have. Also, how long it takes for the target group to reply to requests.&lt;/li&gt;
&lt;li&gt;  Well-Architected insights and tips: e.g. ELB logs are not enabled, ELB drop invalid headers setting is not configured etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's the deal, these metrics can help you solve common issues, like unreachable or unhealthy targets. For example, when your targets aren't running or are inaccessible for your ELB, or when you don't have healthy targets left, ELB has to send requests to the remaining unhealthy targets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#relational-database-service-rds"&gt;
  &lt;/a&gt;
  Relational Database Service (RDS)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oZH0NZZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2022/01/Screenshot-2022-01-06-at-13.58.14-1024x455.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZH0NZZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2022/01/Screenshot-2022-01-06-at-13.58.14-1024x455.png" alt="AWS RDS monitoring" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's included in the dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Clusters, instances and proxies.&lt;/li&gt;
&lt;li&gt;  Insights per cluster: CPU and memory, network traffic, number of connections, reads, writes, used storage and lag.&lt;/li&gt;
&lt;li&gt;  Insights per proxy: database connections, client connections and query requests.&lt;/li&gt;
&lt;li&gt;  Well-Architected insights and tips: e.g. clusters/instances/proxies not tagged, enhanced monitoring not enabled, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put another way, RDS is notoriously slow when used with Lambda because it has been built with the assumption of long-running application servers. With the new insights, you can now see how your RDS clusters behave inside your serverless architecture and act accordingly when they become the bottleneck.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-notification-service-sns"&gt;
  &lt;/a&gt;
  Simple Notification Service (SNS)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S8KQsEUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2022/01/Screenshot-2022-01-17-at-15.39.21-1024x458.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S8KQsEUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2022/01/Screenshot-2022-01-17-at-15.39.21-1024x458.png" alt="AWS SNS monitoring" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's on the dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  How many messages are being published and how many are delivered. This lets you quickly evaluate the overall health of your messages.&lt;/li&gt;
&lt;li&gt;  Overall insights on SNS: subscriptions and endpoints.&lt;/li&gt;
&lt;li&gt;  Average payload.&lt;/li&gt;
&lt;li&gt;  Configuration.&lt;/li&gt;
&lt;li&gt;  Well-Architected insights and tips: e.g. SNS topic is not encrypted with a customer-managed CMK, SNS topic is not tagged, SNS topic is abandoned etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SNS is part of many serverless architectures because it allows to fan-out multiple tasks to run them on Lambda simultaneously. What does it mean? Knowing how they behave in production gives you the last information you need to optimize the fan-out strategy accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#http-api-gateway"&gt;
  &lt;/a&gt;
  HTTP API Gateway
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xjD7N_RP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/H0C6xXkKVbbeCk3lIcRZMiBK6XuV-91HLIKzHgY4lKsJspFHQgLGiU40CuI4Hu6ig9qI8BGJoWZwncTssV_NIYPFIsUJo9aA7HsSbrfqB5Gjz569Rs_k-CYsAdUDkxezd5AKSuYX" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xjD7N_RP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/H0C6xXkKVbbeCk3lIcRZMiBK6XuV-91HLIKzHgY4lKsJspFHQgLGiU40CuI4Hu6ig9qI8BGJoWZwncTssV_NIYPFIsUJo9aA7HsSbrfqB5Gjz569Rs_k-CYsAdUDkxezd5AKSuYX" alt="" width="880" height="698"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition to REST APIs, we now have the functionality to show all¬†&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html"&gt;HTTP APIs&lt;/a&gt;¬†and their resources in a user's AWS account.&lt;/p&gt;

&lt;p&gt;What's on the dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Detailed view of the request counts, errors, latency, all of the specific API's endpoints, authorizations, and redirections.&lt;/li&gt;
&lt;li&gt;  Well-Architected insights and tips: e.g. Stage not tagged.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The HTTP version of API Gateway is a bit more low-level than the REST version, but this enables you to build APIs that don't follow the REST approach more readily. AsyncAPI or GraphQL comes to mind here. With this new integration, you don't have to decide between "REST with insights" or "non-REST without insights" anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opensearch"&gt;
  &lt;/a&gt;
  OpenSearch
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--83ntIHML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2022/01/Screenshot-2022-01-17-at-15.57.07-1024x519.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--83ntIHML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2022/01/Screenshot-2022-01-17-at-15.57.07-1024x519.png" alt="AWS OpenSearch monitoring" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Dashbird OpenSearch integration includes all available metrics from CloudWatch and configuration data from AWS. The dashboard view visualizes the critical information in a quickly digestible and clear way.&lt;/p&gt;

&lt;p&gt;On the dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Datanodes (Average CPU, Minimum -- Maximum CPU range, Average memory utilisation, Minimum and Maximum memory utilisiation)&lt;/li&gt;
&lt;li&gt;  Master&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The integration also includes 20 best practice checks and prebuilt alarms continuously monitored for out-of-the-box.&lt;/p&gt;

&lt;p&gt;OpenSearch is AWS' community-driven open-source fork of Elasticsearch and Kibana. For data-heavy applications that require users to search all the time, this service is a must. So, to keep things running at an acceptable performance, Dashbirds new integration is here to help.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-serverless-developers-use-dashbird"&gt;
  &lt;/a&gt;
  Why Serverless developers use Dashbird?
&lt;/h2&gt;

&lt;p&gt;At Dashbird, we understand that the core idea and value of serverless is to¬†&lt;strong&gt;focus on the customer and the ability to avoid undifferentiated heavy lifting&lt;/strong&gt;. That's what we provide. We give the focus back to developers to only think about the¬†&lt;strong&gt;end-customer&lt;/strong&gt;,and to not be distracted by debugging and alarm management or to worry about whether something is working or not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/serverless-observability/"&gt;Dashbird&lt;/a&gt;¬†increases reliability and iteration speed.¬†&lt;a href="https://dashbird.io/customers/"&gt;Developers have said¬†&lt;/a&gt;they're able to¬†&lt;strong&gt;work¬†up to 80% faster&lt;/strong&gt;¬†with the aid of Dashbird alerting them when something is wrong and telling them the ins and outs of their system. And helping them¬†&lt;strong&gt;&lt;a href="https://dashbird.io/serverless-well-architected-reports/"&gt;achieve¬†industry best practices&lt;/a&gt;&lt;/strong&gt;, with an effect on cost optimization, performance-optimized, and the overall management of the posture of your infrastructure.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  No code changes-   No credit card required-   &lt;strong&gt;Forever free&lt;/strong&gt;¬†for small infrastructures (1M Lambda executions per month)-   Simple 2-minute set up-   Get access to¬†&lt;strong&gt;all premium features&lt;/strong&gt;-   Start debugging, receiving automated alerts, and working with your data immediately&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/getting-started-with-dashbird/"&gt;Dashbird explained: the why, what and how&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/dashbird-app-launches-new-version/"&gt;Dashbird app just got a facelift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/gartner-cool-vendor-2021/"&gt;Dashbird becomes Gartner Cool Vendor 2021&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>CSS Pseudo-classes: Element states</title>
      <author>Chris Bongers</author>
      <pubDate>Mon, 24 Jan 2022 13:41:37 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/css-pseudo-classes-element-states-1gim</link>
      <guid>https://dev.to/dailydevtips1/css-pseudo-classes-element-states-1gim</guid>
      <description>&lt;p&gt;So far, we have already had a look at links and form pseudo-classes. In this article, we'll dive into element states.&lt;/p&gt;

&lt;p&gt;Element states reflect on a specific condition an element could have. This can, for instance, be &lt;code&gt;first-of-type&lt;/code&gt; or the &lt;code&gt;last-child&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I've split this up into a series of four, where this is the third part about form pseudo-states.&lt;/p&gt;

&lt;p&gt;The other parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/css-pseudo-classes-links/"&gt;Link pseudo-states&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/css-pseudo-classes-forms/"&gt;Form pseudo-states&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Element state selectors&lt;/em&gt; (this one üíñ)&lt;/li&gt;
&lt;li&gt;Other pseudo states (coming soon)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#element-state-selectors"&gt;
  &lt;/a&gt;
  Element state selectors
&lt;/h2&gt;

&lt;p&gt;Element state selectors are pseudo-classes I've used a lot in my articles.&lt;br&gt;
They are a great way to select a particular matching element and apply specific styling.&lt;/p&gt;

&lt;p&gt;We get the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:first-child&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:last-child&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:only-child&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:first-of-type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:last-of-type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nth-child&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nth-of-type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:only-of-type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:empty&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#-raw-firstchild-endraw-raw-lastchild-endraw-amp-raw-onlychild-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:first-child&lt;/code&gt;, &lt;code&gt;:last-child&lt;/code&gt;, &amp;amp; &lt;code&gt;:only-child&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These are great if you want to apply specific styling to the first or last elements.&lt;/p&gt;

&lt;p&gt;They are often used to offset margin on a list, for instance.&lt;/p&gt;

&lt;p&gt;Let's try out something simple and change the colors of the first and last elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hotPink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;teal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for the only-child, we can use the following selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:only-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;crimson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be careful when using these as they fire in order.&lt;br&gt;
If you have all three, the only-=child technically also is valid for the first &amp;amp; last-child selector!&lt;/p&gt;

&lt;p&gt;You can see what happens in this CodePen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/PoJVmWO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-firstoftype-endraw-amp-raw-lastoftype-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:first-of-type&lt;/code&gt; &amp;amp; &lt;code&gt;:last-of-type&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These are very close to the above, but with one distinct difference.&lt;/p&gt;

&lt;p&gt;For instance, &lt;code&gt;first-child&lt;/code&gt; needs the element to be the first element in the selector.&lt;br&gt;
As &lt;code&gt;first-of-type&lt;/code&gt; it styles the first occurrence of that element.&lt;/p&gt;

&lt;p&gt;The easiest way to showcase this is by having an HTML structure where we want the first &lt;code&gt;strong&lt;/code&gt; element to be thicker than the rest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Line one&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Important line&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Line two&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Slightly less important line&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Line three&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hotPink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="nd"&gt;:first-of-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll be able to see the first strong being purple and not pink because that won't fire!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can even try and remove the &lt;code&gt;first-of-type&lt;/code&gt; line.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the same can be done with &lt;code&gt;last-of-type&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;gold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="nd"&gt;:last-of-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;crimson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see what happens in the CodePen below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/VwMgbrp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-nthchild-endraw-amp-raw-nthoftype-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;nth-child&lt;/code&gt; &amp;amp; &lt;code&gt;nth-of-type&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These two are fantastic, and I use these quite often.&lt;br&gt;
If even dedicated a complete article on &lt;a href="https://daily-dev-tips.com/posts/css-nth-child-selector-basics/"&gt;CSS &lt;code&gt;nth-child&lt;/code&gt; selectors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They can be used the select the &lt;code&gt;x&lt;/code&gt;th item.&lt;/p&gt;

&lt;p&gt;For instance you can to style the second item:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;gold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cool part with this selector is that it doesn't just have one static value. You can use values like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;odd&lt;/code&gt;/&lt;code&gt;even&lt;/code&gt;: Select odd or even numbers&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;2n+2&lt;/code&gt;: Select every 2nd item&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: &lt;a href="https://css-tricks.com/examples/nth-child-tester/"&gt;CSS-tricks has this cool nth-tester tool&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's try them out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hotPink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hotPink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hotPink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And again, we can use the &lt;code&gt;nth-of-type&lt;/code&gt; selector to target types instead of actual first items.&lt;br&gt;
This can be super useful for images, for instance, if you want them left/right based on their occurrence.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/ExwrmRV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-onlyoftype-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;only-of-type&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This is quite a funny one. It fires if the selector is only one of a type.&lt;/p&gt;

&lt;p&gt;Where the &lt;code&gt;only-child&lt;/code&gt; can only have one child, this one can say if an element only has 1 of this child.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="nd"&gt;:only-of-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hotPink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will result in the following:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/BawMROP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-empty-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:empty&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The last one is the empty selector. It can be used to indicate empty elements.&lt;/p&gt;

&lt;p&gt;Some people even use this as a way to find misplaced elements.&lt;/p&gt;

&lt;p&gt;You can also use this when using WYSIWYG editors that add empty &lt;code&gt;p&lt;/code&gt; tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:empty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/yLzZbQm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to schedule (start and stop) EC2 instances easily</title>
      <author>Federico Navarrete</author>
      <pubDate>Mon, 24 Jan 2022 13:24:05 +0000</pubDate>
      <link>https://dev.to/fanmixco/how-to-schedule-ec2-instances-easily-dnh</link>
      <guid>https://dev.to/fanmixco/how-to-schedule-ec2-instances-easily-dnh</guid>
      <description>&lt;p&gt;Everyone would like to schedule EC2 instances and save a couple of bucks. Today, I'm bringing you a small Python that can help you. The steps are the following ones:&lt;/p&gt;

&lt;p&gt;1) Create a lambda function called: &lt;strong&gt;ec2_scheduler&lt;/strong&gt;&lt;br&gt;
2) Copy and paste the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'REGION'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ec2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ec2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;region_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lambda_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Action'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ec2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Filters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;'Name'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'instance-state-name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Values'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'tag-key'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Values'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'auto-scheduled'&lt;/span&gt;&lt;span class="p"&gt;]}])&lt;/span&gt;
    &lt;span class="n"&gt;reservations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Reservations'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;reservation&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reservations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reservation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Instances'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;instanceId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'InstanceId'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Tags'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Key'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'auto-scheduled'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Value'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'true'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instanceId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'stopped'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;ec2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InstanceIds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;ec2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InstanceIds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Set a tag to your EC2 instance called: &lt;strong&gt;auto-scheduled&lt;/strong&gt; that has a value assigned as &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;4) Add a new &lt;strong&gt;Policy&lt;/strong&gt; in the configuration and permission section of your Lambda that contains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"logs:CreateLogGroup"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"logs:CreateLogStream"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"logs:PutLogEvents"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:logs:*:*:*"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"ec2:Start*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"ec2:Stop*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"ec2:Describe*"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5) Schedule your Lambda as triggers with a cron expressions like these ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For &lt;strong&gt;starting&lt;/strong&gt;: cron(0 6 ? * MON-FRI *)&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;stopping&lt;/strong&gt;: cron(0 16 ? * MON-FRI *)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6) Set a JSON that contains the following expression to know if it's starting or stopping:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For &lt;strong&gt;starting&lt;/strong&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stopped"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For &lt;strong&gt;stopping&lt;/strong&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"running"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/fanmixco"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSo9h5tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/FANMixco/Xamarin-SearchBar/master/bmc-rezr5vpd.gif" alt="sponsor me" width="300" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover credits:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tridentsys.net/howto-schedule-ec2/"&gt;https://tridentsys.net/howto-schedule-ec2/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>ec2</category>
      <category>lambda</category>
      <category>python</category>
    </item>
    <item>
      <title>Vote for what you want to learn! YouTube Channel for Shopify Developers!</title>
      <author>Daniel Kolb</author>
      <pubDate>Mon, 24 Jan 2022 13:20:49 +0000</pubDate>
      <link>https://dev.to/danielkolb/im-creating-a-youtube-channel-for-shopify-developers-536l</link>
      <guid>https://dev.to/danielkolb/im-creating-a-youtube-channel-for-shopify-developers-536l</guid>
      <description>&lt;p&gt;Hi all!&lt;/p&gt;

&lt;p&gt;I‚Äôll start a YouTube channel about code/design/product management shortly. For the first few months, I‚Äôll focus on Coding with Shopify.&lt;/p&gt;

&lt;p&gt;Currently I‚Äôm in the process of picking the right topics. I will include Tutorials, Live Code streams and ‚ÄúXXX in 100 seconds‚Äù videos.&lt;/p&gt;

&lt;p&gt;I‚Äôve already prepared a couple of ideas here and would like you to &lt;strong&gt;VOTE&lt;/strong&gt; them and also add more to the list. This can be done anonymously, so please don‚Äôt break it.&lt;/p&gt;

&lt;p&gt;Here you go: &lt;a href="https://daniel-kolb-youtube-ideas.nolt.io/top"&gt;https://daniel-kolb-youtube-ideas.nolt.io/top&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;Thanks to everyone who want to participate!&lt;/p&gt;

</description>
      <category>shopify</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to make fully working ecom website part 2 [ Source code ]</title>
      <author>Modern Web</author>
      <pubDate>Mon, 24 Jan 2022 13:06:48 +0000</pubDate>
      <link>https://dev.to/kunaal438/sign-uplogin-learn-to-make-a-working-ecom-website-in-2022-source-code--4l0</link>
      <guid>https://dev.to/kunaal438/sign-uplogin-learn-to-make-a-working-ecom-website-in-2022-source-code--4l0</guid>
      <description>&lt;p&gt;Hello guys, welcome here. In today's article we'll see to create a working ecom website. Well this is a second part of it. So if you haven't watched the &lt;a href="https://youtu.be/vHCSnaUdNkE"&gt;first part&lt;/a&gt; where we made the home page, product page, search page and 404 page. Then I'll recommend you watch that part first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zPE9-LLi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1nblsbkqbjbblj7mb5p6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zPE9-LLi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1nblsbkqbjbblj7mb5p6.png" alt="Image" width="880" height="453"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;So in the second, we'll learn to create a working sign up page. We will make our own localhost server using &lt;code&gt;express.js&lt;/code&gt;. We'll also learn to validate the form data using &lt;code&gt;if &amp;amp; else&lt;/code&gt; in JS. We'll learn to manipulate CSS styles from JS and make dynamic HTML elements from JS. Basically we'll learn a lot of stuff in this part. Well all the code was about backend with little bit of front end. I thought not write a blog on it, instead you can watch the coding tutorial below in the video where I explained each and everything step by step. If don't want to watch the video, no worry you can download the source code from &lt;a href="https://www.patreon.com/posts/61574565/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SB-oPvvd6F4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you do like the tutorial make sure to give it a thumbs up and also consider subscribing my channel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gs5zBA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeitpawvax07cx7r9yoa.png" width="334" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Your best vsc setup</title>
      <author>lukas</author>
      <pubDate>Mon, 24 Jan 2022 13:02:34 +0000</pubDate>
      <link>https://dev.to/lukasw12v/your-best-vsc-setup-4nd7</link>
      <guid>https://dev.to/lukasw12v/your-best-vsc-setup-4nd7</guid>
      <description>&lt;p&gt;Hey guys,&lt;br&gt;
this is my first post after reading hundreds.&lt;/p&gt;

&lt;p&gt;Today, I want to share with you my vsc setup with all my extensions I find useful. I created the public gist to have a fast vsc setup out of the box ready in under a minute and to not always install the extensions by hand.&lt;/p&gt;

&lt;p&gt;From color themes, formatters and assistens to docker, git and bookmarks.&lt;/p&gt;

&lt;p&gt;Maybe this setup doesn't fit your needs or it inlcudes to many extensions but it is defenetly a good overview of the top vsc extensions out there to accelerate your development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/lukasw12V/02676ed1c28922c5d72671c2af81d07b"&gt;Get the VSC Setup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use this setup you need to config your vsc:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"&gt;Settings Sync&lt;/a&gt; in vsc&lt;/li&gt;
&lt;li&gt;(optional) Connect your github account by creating a new access token or use your current one (&lt;a href="https://github.com/settings/tokens"&gt;https://github.com/settings/tokens&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Copy the public gist-id &lt;strong&gt;02676ed1c28922c5d72671c2af81d07b&lt;/strong&gt; and paste it in the 'Gist-ID' Settings Sync input field.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rTNSUhr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkl20fvwksdgd5ufcqas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTNSUhr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkl20fvwksdgd5ufcqas.png" alt="Demo Image" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Used extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;auto-close-tag&lt;/li&gt;
&lt;li&gt;auto-complete-tag&lt;/li&gt;
&lt;li&gt;auto-rename-tag&lt;/li&gt;
&lt;li&gt;ayu v1.0.5better-comments&lt;/li&gt;
&lt;li&gt;blox&lt;/li&gt;
&lt;li&gt;Bookmarks&lt;/li&gt;
&lt;li&gt;bracket-pair-colorizer-2&lt;/li&gt;
&lt;li&gt;code-settings-sync&lt;/li&gt;
&lt;li&gt;code-spell-checker&lt;/li&gt;
&lt;li&gt;color-highlight&lt;/li&gt;
&lt;li&gt;csharp&lt;/li&gt;
&lt;li&gt;dart-code&lt;/li&gt;
&lt;li&gt;dotenv&lt;/li&gt;
&lt;li&gt;es7-react-js-snippets&lt;/li&gt;
&lt;li&gt;file-icons&lt;/li&gt;
&lt;li&gt;flutter&lt;/li&gt;
&lt;li&gt;git-graph&lt;/li&gt;
&lt;li&gt;githistory&lt;/li&gt;
&lt;li&gt;gitignore&lt;/li&gt;
&lt;li&gt;gitlens&lt;/li&gt;
&lt;li&gt;go&lt;/li&gt;
&lt;li&gt;html-css-class-completion&lt;/li&gt;
&lt;li&gt;html-snippets&lt;/li&gt;
&lt;li&gt;html5-boilerplate&lt;/li&gt;
&lt;li&gt;indent-rainbow&lt;/li&gt;
&lt;li&gt;JavaScriptSnippets&lt;/li&gt;
&lt;li&gt;json&lt;/li&gt;
&lt;li&gt;LiveServer&lt;/li&gt;
&lt;li&gt;LogFileHighlighter&lt;/li&gt;
&lt;li&gt;markdown-all-in-one&lt;/li&gt;
&lt;li&gt;material-icon-theme&lt;/li&gt;
&lt;li&gt;night-owl&lt;/li&gt;
&lt;li&gt;npm-intellisense&lt;/li&gt;
&lt;li&gt;path-intellisense&lt;/li&gt;
&lt;li&gt;prettier-vscode&lt;/li&gt;
&lt;li&gt;project-manager&lt;/li&gt;
&lt;li&gt;refactor&lt;/li&gt;
&lt;li&gt;remote-containers&lt;/li&gt;
&lt;li&gt;sass-indented&lt;/li&gt;
&lt;li&gt;shades-of-purple&lt;/li&gt;
&lt;li&gt;shell-format&lt;/li&gt;
&lt;li&gt;tokyo-night&lt;/li&gt;
&lt;li&gt;typescript-hero&lt;/li&gt;
&lt;li&gt;vetur&lt;/li&gt;
&lt;li&gt;vscode-color&lt;/li&gt;
&lt;li&gt;vscode-css-formatter&lt;/li&gt;
&lt;li&gt;vscode-css-peek&lt;/li&gt;
&lt;li&gt;vscode-docker&lt;/li&gt;
&lt;li&gt;vscode-eslint&lt;/li&gt;
&lt;li&gt;vscode-github&lt;/li&gt;
&lt;li&gt;vscode-gutter-preview&lt;/li&gt;
&lt;li&gt;vscode-html-css&lt;/li&gt;
&lt;li&gt;vscode-kubernetes-tools&lt;/li&gt;
&lt;li&gt;vscode-tailwindcss&lt;/li&gt;
&lt;li&gt;vscode-yaml&lt;/li&gt;
&lt;li&gt;vue-snippets&lt;/li&gt;
&lt;li&gt;vue-vscode-snippets&lt;/li&gt;
&lt;li&gt;wvsc-serendipity&lt;/li&gt;
&lt;li&gt;xml&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
      <category>vscode</category>
    </item>
  </channel>
</rss>
