<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I enjoy life-long learning, but...</title>
      <author>Ingo Steinke</author>
      <pubDate>Fri, 22 Oct 2021 08:22:13 +0000</pubDate>
      <link>https://dev.to/ingosteinke/i-enjoy-life-long-learning-but--5efh</link>
      <guid>https://dev.to/ingosteinke/i-enjoy-life-long-learning-but--5efh</guid>
      <description>&lt;p&gt;... there are some aspects of working as a web developer that do not spark joy in my heart. After collecting some notes over time, I have pasted them into this dev rant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-enjoy-lifelong-learning-but-"&gt;
  &lt;/a&gt;
  I enjoy life-long learning, but ...
&lt;/h2&gt;

&lt;p&gt;I enjoy life long learning, especially of front end technology like HTML, CSS, UX, UI, also back-end stuff like SQL, Doctrine, and Symfony. So many things have improved (even JavaScript and PHP), but then there is stuff that I could do without, like spending days configuring Webpack and its plugins only because somebody else decided that every project needs to use Webpack (replace Webpack with any other tool or task you could have done without or delegate it to somebody else).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stuff-that-i-could-do-without"&gt;
  &lt;/a&gt;
  Stuff that I could do without
&lt;/h2&gt;

&lt;p&gt;This rant is basically a collection of some stuff that I had written down to get it out of my mind. Finally decided to publish and share, so maybe it's fun to read, and maybe it is good for you to know that you are not the only one getting annoyed and confused by misleading error messages and the like. So here we go:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  Breaking Changes
&lt;/h2&gt;

&lt;p&gt;Adapting boilerplate configuration code for Webpack, React, or any other tool, to reflect the latest breaking changes. &lt;br&gt;
 Tasks like this may mean front-end web development to some people. But to me, it means nothing but wasting my time with menial tasks that could have been avoided if developers would actually care not to break things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-it-aintt-broke-dont-fix-it"&gt;
  &lt;/a&gt;
  If it aint't broke, don't fix it
&lt;/h2&gt;

&lt;p&gt;Apart from regular upgrades to node packages, which break other packages' peer dependencies so that those other packages need another upgrade, which breaks another package ... apart from that, we can check for security vulnerabilities automatically using &lt;code&gt;npm audit&lt;/code&gt;, which is, in theory, a good thing, despite occasional irrelevant alerts and false positives. But either there is "no fix available" or if there is, chances are, that &lt;code&gt;npm audit fix&lt;/code&gt; will upgrade (or even downgrade) a dependency that breaks something else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#broken-dependencies"&gt;
  &lt;/a&gt;
  Broken Dependencies
&lt;/h2&gt;

&lt;p&gt;Don't even bother checking the error logs and vulnerability details to try and fix the problems yourself. You will find out that half of your software has already been deprecated in favor of another totally different technology, which is either unavailable due to a peer dependency of an indispensable module, or else it will be completely incompatible, poorly documented and still in beta.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hidden-assumptions"&gt;
  &lt;/a&gt;
  Hidden Assumptions
&lt;/h2&gt;

&lt;p&gt;Beta or not, even common tools that are supposed to stable, maintained, and popular, sometimes lack the ability and documentation to make them "just work" on your own machine.&lt;/p&gt;

&lt;p&gt;Any tutorial seems to make at least one assumption that does not match my current situation when trying to use any popular tool exactly like advised in their official documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-tell-you-its-easy"&gt;
  &lt;/a&gt;
  "I tell you, it's easy!"
&lt;/h2&gt;

&lt;p&gt;Annoyed also by tutorials trying to tell me that something is easy, all I need to know, or supposed to make me have fun. I am just trying to do my work, okay?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#silly-idiosyncrasies"&gt;
  &lt;/a&gt;
  Silly Idiosyncrasies
&lt;/h2&gt;

&lt;p&gt;Annoyed to see meme gif images of some seemingly popular Hollywood actor, when all I wanted was a solution to a technical problem. Having to read npm idiosyncrasies like "sill" or silly slack phrases like "Sweet potato! Here's a tractor" or "more holy moly!"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0r6hoprP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfmp3aloixvmoqgn7dvs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0r6hoprP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfmp3aloixvmoqgn7dvs.jpg" alt='Slack screenshot with text "More holy moly! Your friends at slack"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stack-trace-novels"&gt;
  &lt;/a&gt;
  Stack Trace Novels
&lt;/h2&gt;

&lt;p&gt;Error messages containing several pages of verbose stack trace details that still omit the actual file name or line number that would help you to trace the error back to your source code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#search-overflow"&gt;
  &lt;/a&gt;
  Search Overflow
&lt;/h2&gt;

&lt;p&gt;Googling the error message, finding either unrelated or unanswered questions on StackOverflow, and if someone did have the exact same error message, surely their question had been erroneously marked as a duplicate or "downvoted" and closed for any other obscure reason.&lt;/p&gt;

&lt;p&gt;In other cases: not a single matching entry, and Google stating the obvious: that there are not many great search results. You don't say! 😲&lt;/p&gt;

&lt;p&gt;Alternatively getting a lot of search results, but mostly unrelated, annotated by small blue link with a strike through one of my search terms, stating "missing / must include". These link never provided any single more relevant result when clicked.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MSvRTgxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eefaatqnvton828rsll4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MSvRTgxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eefaatqnvton828rsll4.png" alt="Screenshot showing a failed google search like described in the text above."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linting-the-wrong-code"&gt;
  &lt;/a&gt;
  Linting the Wrong Code
&lt;/h2&gt;

&lt;p&gt;All of this only to find out later, after hours of frustrating research, that the actual error was a typo in a completely unrelated file never mentioned by any error message or linter warning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-allowed-to-fix-stackoverflow"&gt;
  &lt;/a&gt;
  Not Allowed to Fix StackOverflow
&lt;/h2&gt;

&lt;p&gt;Try to fix the same typo in the StackOverflow example where it came from, but on submitting an edit, getting the error message from StackOverflow:&lt;/p&gt;

&lt;p&gt;"Edits must be at least 6 characters; is there something else to improve in this post?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#airbnbs-coding-style"&gt;
  &lt;/a&gt;
  AirBnB's Coding Style
&lt;/h2&gt;

&lt;p&gt;Meanwhile, linters keep nagging about missing or superfluous braces, spaces or indentation, again instead of providing any insight about the actual problems of my code. Even more so, if a senior team member or a company coding style guide insisted on using AirBnB's style guide. Their website looks neat, and so did most of the places I ever booked over their platform, but their JavaScript style guide still sucks.&lt;/p&gt;

&lt;p&gt;Most code examples found in official documentation seem to use double quotes for strings. AirBnB doesn't. So after pasting documentation examples into your own code, you have to "fix" the "errors", sorry: 'fix' the 'errors' until you see no more &lt;code&gt;Strings must use single-quote&lt;/code&gt;. But we're not done yet:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dangling-characters"&gt;
  &lt;/a&gt;
  Dangling Characters
&lt;/h2&gt;

&lt;p&gt;Adding dangling commas at the end of any line that would not regularly end with a semicolon! But I did not find it helpful to achieve the intended benefit of getting less verbose &lt;code&gt;git diff&lt;/code&gt; to review, because adherence to indentation rules makes everyone reformat twenty lines of code around even a single character fix on one line anyway.&lt;/p&gt;

&lt;p&gt;Having to add trailing commas mostly everywhere just moves inconsistency to &lt;code&gt;package.json&lt;/code&gt; and any other &lt;code&gt;json&lt;/code&gt; file where there are still some parts of the code that will make your code invalid. Now why won't the ubiquitous Babel handle that as well?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expected-mess"&gt;
  &lt;/a&gt;
  Expected Mess
&lt;/h2&gt;

&lt;p&gt;It still happens, that you copy a well-formatted code snippet and paste it into your editor / IDE where the original format gets messed up to unreadability, does not get fixed, but instead linted and underlined with helpful annotations like "Expected indentation of 8 spaces but found 4".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommended-mess"&gt;
  &lt;/a&gt;
  Recommended Mess
&lt;/h2&gt;

&lt;p&gt;All of this mess gets more likely, the more recommended tools you try to stick together, especially if any part of the setup or boilerplate code has not been updated during the past eleven months.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#case-closed"&gt;
  &lt;/a&gt;
  Case Closed
&lt;/h2&gt;

&lt;p&gt;Seen the same pattern in GitHub issue, but also in Google's Help Center: there is one single, unhelpful, answer for a problem that  keeps occurring and which is hard to google, and the thread is already closed? "This question is locked and replying has been disabled." also known as "Can't Reproduce, case closed."&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>watercooler</category>
      <category>devjournal</category>
      <category>rant</category>
    </item>
    <item>
      <title>simple way to store data in js</title>
      <author>duccanhole</author>
      <pubDate>Fri, 22 Oct 2021 08:19:03 +0000</pubDate>
      <link>https://dev.to/coderduck/simple-way-to-store-data-in-js-1i3</link>
      <guid>https://dev.to/coderduck/simple-way-to-store-data-in-js-1i3</guid>
      <description>&lt;p&gt;&lt;strong&gt;You want a simple way to store data? In javascript, you can use &lt;code&gt;window.localStorage&lt;/code&gt;.&lt;/strong&gt;&lt;br&gt;
localStoge allows you store any information in browser. It is new feature of HTML5, and using method is similar to hashmap(with key and value). To store data, use this syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localStorage.setItem(key, value);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to get data, use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localStorage.getItem(key);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;localStorage also provide method to delete data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localStorage.removeItem(value); //delete one
localStorage.clear(); //delete all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Read more about document: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
Because it's pretty basic and simple, localStorage only store string data, if data is more complex, it becomes useless. Addition, the limit of data is small(about 5mb);  and it has not security. Therefore, think carefully before use localStorage.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title> 1 way tells how an execution plan is generated</title>
      <author>lisahui</author>
      <pubDate>Fri, 22 Oct 2021 08:16:00 +0000</pubDate>
      <link>https://dev.to/lisahui/1-way-tells-how-an-execution-plan-is-generated-4k9k</link>
      <guid>https://dev.to/lisahui/1-way-tells-how-an-execution-plan-is-generated-4k9k</guid>
      <description>&lt;p&gt;In the last article, we mentioned that Validator will convert an AST generated by Parser to an execution plan. In this article, we will explain how an execution plan is generated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2LyiWQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136778731-a9ea1b31-55b6-4b4c-8968-6f53baacb979.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2LyiWQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136778731-a9ea1b31-55b6-4b4c-8968-6f53baacb979.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Planner is an execution plan generator. It generates an execution plan based on the semantically valid AST that was validated by Validator, and then passes the plan to Optimizer to generate an optimized execution plan. Finally, Executor will execute the optimized plan. An execution plan is composed of a series of nodes (PlanNode).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structure-of-source-files"&gt;
  &lt;/a&gt;
  Structure of Source Files
&lt;/h2&gt;

&lt;p&gt;Here is the structure of source files for Planner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/planner
├── CMakeLists.txt
├── match/
├── ngql/
├── plan/
├── Planner.cpp
├── Planner.h
├── PlannersRegister.cpp
├── PlannersRegister.h
├── SequentialPlanner.cpp
├── SequentialPlanner.h
└── test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Planner.h file defines the data structure of SubPlan and the interfaces of Planner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct SubPlan {
    // root and tail of a subplan.
    PlanNode*   root{nullptr};
    PlanNode*   tail{nullptr};
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;PlannersRegister is responsible for registering available planners. So far, SequentialPlanner, PathPlanner, LookupPlanner, GoPlanner, and MatchPlanner have been registered for Nebula Graph.&lt;/p&gt;

&lt;p&gt;The corresponding sentence of SequentialPlanner is SequentialSentences, which is a combined sentence composed of multiple sentences separated with semicolons. Each sentence can be a GO, LOOKUP, or MATCH statement. Therefore, SequentialPlanner generates multiple execution plans by calling other sentence planners and then calling Validator::appendPlan to connect the plans end to end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nx-dcDJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136778879-98d71176-15c1-4aff-a7f1-9a03f7d49556.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nx-dcDJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136778879-98d71176-15c1-4aff-a7f1-9a03f7d49556.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The match/ directory defines the planners and connection strategies of SubPlans of some statements and clauses compatible with openCypher, such as MATCH, UNWIND, WITH, RETURN, WHERE, ORDER BY, SKIP, and LIMIT. SegmentsConnector uses an appropriate strategy, such as AddInput, addDependency, or innerJoinSegments, to connect the SubPlans end to end to generate a complete execution plan.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/planner/match
├── AddDependencyStrategy.cpp
├── AddDependencyStrategy.h
├── AddInputStrategy.cpp
├── AddInputStrategy.h
├── CartesianProductStrategy.cpp
├── CartesianProductStrategy.h
├── CypherClausePlanner.h
├── EdgeIndexSeek.h
├── Expand.cpp
├── Expand.h
├── InnerJoinStrategy.cpp
├── InnerJoinStrategy.h
├── LabelIndexSeek.cpp
├── LabelIndexSeek.h
├── LeftOuterJoinStrategy.h
├── MatchClausePlanner.cpp
├── MatchClausePlanner.h
├── MatchPlanner.cpp
├── MatchPlanner.h
├── MatchSolver.cpp
├── MatchSolver.h
├── OrderByClausePlanner.cpp
├── OrderByClausePlanner.h
├── PaginationPlanner.cpp
├── PaginationPlanner.h
├── PropIndexSeek.cpp
├── PropIndexSeek.h
├── ReturnClausePlanner.cpp
├── ReturnClausePlanner.h
├── SegmentsConnector.cpp
├── SegmentsConnector.h
├── SegmentsConnectStrategy.h
├── StartVidFinder.cpp
├── StartVidFinder.h
├── UnionStrategy.h
├── UnwindClausePlanner.cpp
├── UnwindClausePlanner.h
├── VertexIdSeek.cpp
├── VertexIdSeek.h
├── WhereClausePlanner.cpp
├── WhereClausePlanner.h
├── WithClausePlanner.cpp
├── WithClausePlanner.h
├── YieldClausePlanner.cpp
└── YieldClausePlanner.h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ngql/ directory defines the planners of nGQL statements such as GO, LOOKUP, and FIND PATH.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/planner/ngql
├── GoPlanner.cpp
├── GoPlanner.h
├── LookupPlanner.cpp
├── LookupPlanner.h
├── PathPlanner.cpp
└── PathPlanner.h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The plan/ directory defines seven categories, with a total of more than 100 plan nodes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/planner/plan
├── Admin.cpp
├── Admin.h
├── Algo.cpp
├── Algo.h
├── ExecutionPlan.cpp
├── ExecutionPlan.h
├── Logic.cpp
├── Logic.h
├── Maintain.cpp
├── Maintain.h
├── Mutate.cpp
├── Mutate.h
├── PlanNode.cpp
├── PlanNode.h
├── Query.cpp
├── Query.h
└── Scan.h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is an introduction to the purpose of plan nodes:&lt;/p&gt;

&lt;p&gt;Admin: For the nodes related to database administration.&lt;br&gt;
Algo: For the nodes related to the algorithms of paths, subgraphs, and so on.&lt;br&gt;
Logic: For the nodes related to logic controlling, such as loop and binary selection.&lt;br&gt;
Maintain: For the nodes related to schema.&lt;br&gt;
Mutate: For the nodes related to DML.&lt;br&gt;
Query: For the nodes related to query computation.&lt;br&gt;
Scan: For the nodes related to indexing and scanning.&lt;br&gt;
In the Executor phase, each PlanNode generates an executor, and each executor is responsible for a specific functionality.&lt;/p&gt;

&lt;p&gt;For example, here is the source code of the GetNeighbors node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static GetNeighbors* make(QueryContext* qctx,
                              PlanNode* input,
                              GraphSpaceID space,
                              Expression* src,
                              std::vector&amp;lt;EdgeType&amp;gt; edgeTypes,
                              Direction edgeDirection,
                              std::unique_ptr&amp;lt;std::vector&amp;lt;VertexProp&amp;gt;&amp;gt;&amp;amp;&amp;amp; vertexProps,
                              std::unique_ptr&amp;lt;std::vector&amp;lt;EdgeProp&amp;gt;&amp;gt;&amp;amp;&amp;amp; edgeProps,
                              std::unique_ptr&amp;lt;std::vector&amp;lt;StatProp&amp;gt;&amp;gt;&amp;amp;&amp;amp; statProps,
                              std::unique_ptr&amp;lt;std::vector&amp;lt;Expr&amp;gt;&amp;gt;&amp;amp;&amp;amp; exprs,
                              bool dedup = false,
                              bool random = false,
                              std::vector&amp;lt;storage::cpp2::OrderBy&amp;gt; orderBy = {},
                              int64_t limit = -1,
                              std::string filter = "")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;GetNeighbors is the semantic encapsulation of the KV of an edge in the storage layer. Based on the source vertex of the given edge type, it will find the destination vertex of an edge. During the finding edge course, GetNeighbors can retrieve the properties of the edge (edgeProps). Additionally, the outgoing edge is stored with its source vertex in one partition (shard), so the properties of the source vertex (vertexProps) can be retrieved easily.&lt;/p&gt;

&lt;p&gt;Here is the source code of the Aggregate node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static Aggregate* make(QueryContext* qctx,
                               PlanNode* input, 
                               std::vector&amp;lt;Expression*&amp;gt;&amp;amp;&amp;amp; groupKeys = {},
                               std::vector&amp;lt;Expression*&amp;gt;&amp;amp;&amp;amp; groupItems = {})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Aggregate node is for aggregate computing. It groups the table according to groupKeys, and does aggregate calculation on groupItems.&lt;/p&gt;

&lt;p&gt;Here is the source code of the Loop node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static Loop* make(QueryContext* qctx,
                      PlanNode* input,
                      PlanNode* body = nullptr,
                      Expression* condition = nullptr);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Loop node is for looping. It keeps on executing the PlanNode segement between the body and the next Start node until the value of condition is changed to false.&lt;/p&gt;

&lt;p&gt;Here is the source code of the InnerJoin node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static InnerJoin* make(QueryContext* qctx,
                           PlanNode* input,
                           std::pair&amp;lt;std::string, int64_t&amp;gt; leftVar,
                           std::pair&amp;lt;std::string, int64_t&amp;gt; rightVar,
                           std::vector&amp;lt;Expression*&amp;gt; hashKeys = {},
                           std::vector&amp;lt;Expression*&amp;gt; probeKeys = {})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The InnerJoin node aims to perform inner join between two tables (Table or DataSet). leftVar and rightVar refer to the two tables respectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#entry-functions"&gt;
  &lt;/a&gt;
  Entry Functions
&lt;/h2&gt;

&lt;p&gt;The entry function of Planner is Validator∷toPlan().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Status Validator::toPlan() {
    auto* astCtx = getAstContext();
    if (astCtx != nullptr) {
        astCtx-&amp;gt;space = space_;
    }
    auto subPlanStatus = Planner::toPlan(astCtx);
    NG_RETURN_IF_ERROR(subPlanStatus);
    auto subPlan = std::move(subPlanStatus).value();
    root_ = subPlan.root;
    tail_ = subPlan.tail;
    VLOG(1) &amp;lt;&amp;lt; "root: " &amp;lt;&amp;lt; root_-&amp;gt;kind() &amp;lt;&amp;lt; " tail: " &amp;lt;&amp;lt; tail_-&amp;gt;kind();
    return Status::OK();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Calling getAstContext()
Firstly, getAstContext() is called to obtain the validated (by Validator) and rewritten AST contexts. The data structure of these contexts are defined in src/context/.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/context/ast
├── AstContext.h
├── CypherAstContext.h
└── QueryAstContext.h
struct AstContext {
    QueryContext*   qctx; // The context of each query request
    Sentence*       sentence; // The AST of each query statement
    SpaceInfo       space; // The current graph space
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CypherAstContext defines the AST contexts of the openCypher compatible statements. QueryAstContext defines the AST contexts of the nGQL statements.&lt;/p&gt;

&lt;p&gt;2.Calling Planner::toPlan(astCtx)&lt;br&gt;
Secondly, Planner∷toPlan(astCtx) is called. Based on the AST contexts, it will find the registered planners for the query statement in PlannerMap, and then the corresponding execution plan is generated.&lt;/p&gt;

&lt;p&gt;Each plan is composed of a series of PlanNodes. There are two major relationships between PlanNodes, execution dependency and data dependency.&lt;/p&gt;

&lt;p&gt;Execution dependency: From the perspective of execution order, an execution plan is a directed acyclic graph, and the dependencies between nodes are determined when the plan is generated. In the execution phase, the executor generates an operator for each node, and starts scheduling from the root node. If the root node is found dependent on another node, a recursive calling is executed for the node that the root node depends on. The process repeats until it finds a node that is not dependent on any other nodes. And then, the node is executed. After the execution is done, the executor will continue to execute the nodes that depend on it until the root node is reached.&lt;br&gt;
Data dependency: The data dependency between nodes is like the execution dependency, that is, the output of the previous execution is the input of the next execution. Let’s take the InnerJoin node as an example. The inputs of InnerJoin may be the outputs of some nodes that are not adjacent to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vdEkfDWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779022-35344f18-5334-4d2b-ac6b-4deadaccc3c9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vdEkfDWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779022-35344f18-5334-4d2b-ac6b-4deadaccc3c9.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(In the preceding figure, the solid lines represent the execution dependencies and the dashed lines represent the data dependencies.)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An Example
&lt;/h2&gt;

&lt;p&gt;In this section, I will take MatchPlanner as an example to show how an execution plan is generated.&lt;/p&gt;

&lt;p&gt;Here is the example statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MATCH (v:player)-[:like*2..4]-(v2:player)\
WITH v, v2.age AS age ORDER BY age WHERE age &amp;gt; 18\
RETURN id(v), age
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After validated by MatchValidator and rewritten, this statement will be output as a tree composed of contexts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YaMsMM-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779116-e5ee2fd9-bd24-4532-8b9f-cd63bad8dd7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YaMsMM-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779116-e5ee2fd9-bd24-4532-8b9f-cd63bad8dd7a.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;=&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xE0YNJxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779268-49f6dc23-7e66-4f20-b96c-5290d50e22a7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xE0YNJxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779268-49f6dc23-7e66-4f20-b96c-5290d50e22a7.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each context corresponds to a clause or a subclause.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum class CypherClauseKind : uint8_t {
    kMatch,
    kUnwind,
    kWith,
    kWhere,
    kReturn,
    kOrderBy,
    kPagination,
    kYield,
};

struct CypherClauseContextBase : AstContext {
    explicit CypherClauseContextBase(CypherClauseKind k) : kind(k) {}
    virtual ~CypherClauseContextBase() = default;

    const CypherClauseKind  kind;
};

struct MatchClauseContext final : CypherClauseContextBase {
    MatchClauseContext() : CypherClauseContextBase(CypherClauseKind::kMatch) {}

    std::vector&amp;lt;NodeInfo&amp;gt;                       nodeInfos; // The vertices involved in the pattern
    std::vector&amp;lt;EdgeInfo&amp;gt;                       edgeInfos; // The edges involved in the pattern
    PathBuildExpression*                        pathBuild{nullptr}; // Constructing the expression of Path
    std::unique_ptr&amp;lt;WhereClauseContext&amp;gt;         where; // filter SubClause
    std::unordered_map&amp;lt;std::string, AliasType&amp;gt;* aliasesUsed{nullptr}; // The specified alias
    std::unordered_map&amp;lt;std::string, AliasType&amp;gt;  aliasesGenerated; // The generated alias
};
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, these steps are followed:&lt;/p&gt;

&lt;p&gt;1.Finding Planner for the Statement&lt;br&gt;
This is a MATCH statement, so MatchPlanner is found from the PlannerMap.&lt;/p&gt;

&lt;p&gt;2.Generating a Plan&lt;br&gt;
MatchPlanner::transform is called to generate an execution plan.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;StatusOr&amp;lt;SubPlan&amp;gt; MatchPlanner::transform(AstContext* astCtx) {
    if (astCtx-&amp;gt;sentence-&amp;gt;kind() != Sentence::Kind::kMatch) {
        return Status::Error("Only MATCH is accepted for match planner.");
    }
    auto* matchCtx = static_cast&amp;lt;MatchAstContext*&amp;gt;(astCtx);

    std::vector&amp;lt;SubPlan&amp;gt; subplans;
    for (auto&amp;amp; clauseCtx : matchCtx-&amp;gt;clauses) {
        switch (clauseCtx-&amp;gt;kind) {
            case CypherClauseKind::kMatch: {
                auto subplan = std::make_unique&amp;lt;MatchClausePlanner&amp;gt;()-&amp;gt;transform(clauseCtx.get());
                NG_RETURN_IF_ERROR(subplan);
                subplans.emplace_back(std::move(subplan).value());
                break;
            }
            case CypherClauseKind::kUnwind: {
                auto subplan = std::make_unique&amp;lt;UnwindClausePlanner&amp;gt;()-&amp;gt;transform(clauseCtx.get());
                NG_RETURN_IF_ERROR(subplan);
                auto&amp;amp; unwind = subplan.value().root;
                std::vector&amp;lt;std::string&amp;gt; inputCols;
                if (!subplans.empty()) {
                    auto input = subplans.back().root;
                    auto cols = input-&amp;gt;colNames();
                    for (auto col : cols) {
                        inputCols.emplace_back(col);
                    }
                }
                inputCols.emplace_back(unwind-&amp;gt;colNames().front());
                unwind-&amp;gt;setColNames(inputCols);
                subplans.emplace_back(std::move(subplan).value());
                break;
            }
            case CypherClauseKind::kWith: {
                auto subplan = std::make_unique&amp;lt;WithClausePlanner&amp;gt;()-&amp;gt;transform(clauseCtx.get());
                NG_RETURN_IF_ERROR(subplan);
                subplans.emplace_back(std::move(subplan).value());
                break;
            }
            case CypherClauseKind::kReturn: {
                auto subplan = std::make_unique&amp;lt;ReturnClausePlanner&amp;gt;()-&amp;gt;transform(clauseCtx.get());
                NG_RETURN_IF_ERROR(subplan);
                subplans.emplace_back(std::move(subplan).value());
                break;
            }
            default: { return Status::Error("Unsupported clause."); }
        }
    }

    auto finalPlan = connectSegments(astCtx, subplans, matchCtx-&amp;gt;clauses);
    NG_RETURN_IF_ERROR(finalPlan);
    return std::move(finalPlan).value();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A MATCH statement may be composed of multiple MATCH, UNWIND, WITH, and RETURNclauses. Therefore, with MatchPlanner::transform, the corresponding ClausePlanners are called directly to generate the corresponding SubPlans, and then the SubPlans are connected end to end by SegmentsConnector according to the appropriate connection strategies.&lt;/p&gt;

&lt;p&gt;In the example statement, the first clause is a MATCH clause: MATCH (v:player)-[:like*2..4]-(v2:player), so MatchClausePlanner::transform is called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;StatusOr&amp;lt;SubPlan&amp;gt; MatchClausePlanner::transform(CypherClauseContextBase* clauseCtx) {
    if (clauseCtx-&amp;gt;kind != CypherClauseKind::kMatch) {
        return Status::Error("Not a valid context for MatchClausePlanner.");
    }

    auto* matchClauseCtx = static_cast&amp;lt;MatchClauseContext*&amp;gt;(clauseCtx);
    auto&amp;amp; nodeInfos = matchClauseCtx-&amp;gt;nodeInfos;
    auto&amp;amp; edgeInfos = matchClauseCtx-&amp;gt;edgeInfos;
    SubPlan matchClausePlan;
    size_t startIndex = 0;
    bool startFromEdge = false;

    NG_RETURN_IF_ERROR(findStarts(matchClauseCtx, startFromEdge, startIndex, matchClausePlan));
    NG_RETURN_IF_ERROR(
        expand(nodeInfos, edgeInfos, matchClauseCtx, startFromEdge, startIndex, matchClausePlan));
    NG_RETURN_IF_ERROR(projectColumnsBySymbols(matchClauseCtx, startIndex, matchClausePlan));
    NG_RETURN_IF_ERROR(appendFilterPlan(matchClauseCtx, matchClausePlan));
    return matchClausePlan;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The MatchClausePlanner::transform method performs these steps:&lt;/p&gt;

&lt;p&gt;Finding the starting vertex of the expansion.&lt;br&gt;
Currently, three strategies are available for finding the starting vertex. They are registered in startVidFinders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// MATCH(n) WHERE id(n) = value RETURN n
startVidFinders.emplace_back(&amp;amp;VertexIdSeek::make);

// MATCH(n:Tag{prop:value}) RETURN n
// MATCH(n:Tag) WHERE n.prop = value RETURN n
startVidFinders.emplace_back(&amp;amp;PropIndexSeek::make);

// seek by tag or edge(index)
// MATCH(n: tag) RETURN n
// MATCH(s)-[:edge]-&amp;gt;(e) RETURN e
startVidFinders.emplace_back(&amp;amp;LabelIndexSeek::make);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of these three strategies, VertexIdSeek is the best, which can locate the specific VID of the starting vertex. PropIndexSeek is the second, which is converted to an IndexScan that filters vertices by the property. LabelIndexSeek will be converted to an IndexScan.&lt;/p&gt;

&lt;p&gt;For each strategy of finding the starting vertex, the findStarts function will traverse all the nodes in the MATCH pattern until it finds a node that can be used as the node of the starting vertex, and generates corresponding PlanNodes for finding the starting vertex.&lt;/p&gt;

&lt;p&gt;For this example statement, LabelIndexScan is used and the starting vertex is v. Finally, an IndexScan node is generated and the indexes on the player tag are used.&lt;/p&gt;

&lt;p&gt;According to the starting vertex and the MATCH pattern, an expansion across multiple steps is executed.&lt;br&gt;
For the example statement, the MATCH pattern is (v:player)-[:like*1..2]-(v2:player). It means v is the starting vertex, and an expansion across one or two steps along the like edge is executed, and the end vertex is of the player tag.&lt;/p&gt;

&lt;p&gt;Here is how the expansion is executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Status Expand::doExpand(const NodeInfo&amp;amp; node, const EdgeInfo&amp;amp; edge, SubPlan* plan) {
    NG_RETURN_IF_ERROR(expandSteps(node, edge, plan));
    NG_RETURN_IF_ERROR(filterDatasetByPathLength(edge, plan-&amp;gt;root, plan));
    return Status::OK();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An expansion across multiple steps will generate a Loop node. The body of the Loop node is expandStep , which means a one-step expansion is executed from the given starting vertex and such an expansion generates a GetNeighbors node. The end vertex of each expansion is the starting vertex of the next expansion. It keeps looping until the maximum number of steps specified in the pattern is reached.&lt;/p&gt;

&lt;p&gt;To do the Step M expansion, the end vertex of the M-1 steps long path is used as the starting vertex of the expansion. By expanding one step more, the expansion result is constructed as a 1-step long path consisting of the source vertex of an edge and the edge itself. And then InnerJoin is performed to the 1-step long path and the previous M-1 steps long path to obtain a set of paths of M steps long.&lt;/p&gt;

&lt;p&gt;This set of paths are filtered to remove the paths with duplicate edges, which are not allowed for path expansion in openCypher. Finally, the end vertex is used as the starting vertex of the next expansion. Such expansions continue until the specified maximum number of steps is reached.&lt;/p&gt;

&lt;p&gt;After Loop, a UnionAllVersionVar node is generated. It combines the paths varying from 1-step to M-steps long that are generated from the execution of each loop of the body. The filterDatasetByPathLength() function will generate a Filter node to filter out all the paths that are shorter than the minimum number of steps specified in the MATCH pattern.&lt;/p&gt;

&lt;p&gt;After the expansion, the path looks like (v)-like-()-e-(v)-?, where the properties of the end vertex is still missing. At this point, generating a GetVertices node is needed. When the end vertex is obtained, an InnerJoin is performed to it and the M-steps long path, and then we will have a set of paths that meet the requirements of the MATCH pattern.&lt;/p&gt;

&lt;p&gt;More information about the expansion across multiple steps of MATCH will be introduced in a new article “Variable Length Pattern Match”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Build Start node from first step
SubPlan loopBodyPlan;
PlanNode* startNode = StartNode::make(matchCtx_-&amp;gt;qctx);
startNode-&amp;gt;setOutputVar(firstStep-&amp;gt;outputVar());
startNode-&amp;gt;setColNames(firstStep-&amp;gt;colNames());
loopBodyPlan.tail = startNode;
loopBodyPlan.root = startNode;

// Construct loop body
NG_RETURN_IF_ERROR(expandStep(edge,
                              startNode,                // dep
                              startNode-&amp;gt;outputVar(),   // inputVar
                              nullptr,
                              &amp;amp;loopBodyPlan));

NG_RETURN_IF_ERROR(collectData(startNode,           // left join node
                               loopBodyPlan.root,   // right join node
                               &amp;amp;firstStep,          // passThrough
                               &amp;amp;subplan));
// Union node
auto body = subplan.root;

// Loop condition
auto condition = buildExpandCondition(body-&amp;gt;outputVar(), startIndex, maxHop);

// Create loop
auto* loop = Loop::make(matchCtx_-&amp;gt;qctx, firstStep, body, condition);

// Unionize the results of each expansion which are stored in the firstStep node
auto uResNode = UnionAllVersionVar::make(matchCtx_-&amp;gt;qctx, loop);
uResNode-&amp;gt;setInputVar(firstStep-&amp;gt;outputVar());
uResNode-&amp;gt;setColNames({kPathStr});

subplan.root = uResNode;
plan-&amp;gt;root = subplan.root; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A table is output and its column names are determined.&lt;br&gt;
All named symbols specified in the MATCH pattern are used as the column names to generate a table for the subsequent clauses, which will generate a Project node.&lt;/p&gt;

&lt;p&gt;The second clause in the example statement is WITH. It calls WithClause::transform to generate SubPlans.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WITH v, v2.age AS age ORDER BY age WHERE age &amp;gt; 18
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This WITH clause yields a table with two columns named v and v2.age. These columns are sorted by age, and then the table is used as a filter.&lt;/p&gt;

&lt;p&gt;The YIELD part will generate a Project node. The ORDER BY part will generate a Sort node. And the WHERE part will generate a Filter node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lyvr35US--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136780267-3e72afd6-5628-48cf-b548-3fae04724079.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lyvr35US--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136780267-3e72afd6-5628-48cf-b548-3fae04724079.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The third clause is RETURN. It will generate a Project node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RETURN id(v), age
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The complete execution plan of the example statement is shown as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IE103zk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779429-419ce787-a28b-4669-b3e0-8ea675f5d64e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IE103zk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779429-419ce787-a28b-4669-b3e0-8ea675f5d64e.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the end of this article.&lt;/p&gt;

&lt;p&gt;If you encounter any problems in the process of using Nebula Graph, please refer to &lt;a&gt;Nebula Graph Database Manual&lt;/a&gt; to troubleshoot the problem. It records in detail the knowledge points and specific usage of the graph database and the graph database Nebula Graph.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>database</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to get out of rat-race of learning every new technology (in freelancing).</title>
      <author>Saifullah Usmani</author>
      <pubDate>Fri, 22 Oct 2021 07:39:02 +0000</pubDate>
      <link>https://dev.to/saifullahusmani/how-to-get-out-of-rat-race-of-learning-every-new-technology-in-freelancing-2lgb</link>
      <guid>https://dev.to/saifullahusmani/how-to-get-out-of-rat-race-of-learning-every-new-technology-in-freelancing-2lgb</guid>
      <description>&lt;p&gt;Before reading if you are new to freelancing consider reading this post first: &lt;br&gt;
&lt;a href="https://dev.to/saifullahusmani/what-i-learned-in-freelancing-as-a-self-taught-developer-n2j"&gt;https://dev.to/saifullahusmani/what-i-learned-in-freelancing-as-a-self-taught-developer-n2j&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi, my name is Saifullah Usmani. I am a Programmer and a Graphic Designer. I have been programming for 5 years now. And I have worked with several freelance clients.&lt;/p&gt;

&lt;p&gt;If it sounds like a thing that will add value in your life then consider following my page because I keep creating quality content for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ratrace"&gt;
  &lt;/a&gt;
  The rat-race:
&lt;/h2&gt;

&lt;p&gt;The rat-race is a word I am using means the loop in which you get stuck while working as a freelancer of learning every new technology coming in the world.&lt;br&gt;
Mostly startups and young/new entrepreneurs with little to no knowledge about tech, and different technologies used for development likes to work with all the latest/most-loved/near-future-best-technology/glamorous/aggressively-favoring-community's opinionated technologies. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a developer who is new in freelance marketplaces has to follow this trend until your opinion means something.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-out-of-this-ratrace"&gt;
  &lt;/a&gt;
  How to get out of this rat-race:
&lt;/h2&gt;

&lt;p&gt;Getting out of this rat-race is sadly not easy because of the fact that more and more people are learning programming and their opinions in terms of proportion overcomes the opinion of developers with decades of experience. &lt;br&gt;
You have to understand that what you are stepping into(freelancing) is a business.&lt;br&gt;
And in business there is a lot of risk, so wise business people tend to listen to advices of professionals or only work with professionals, the rest of them go for trend.&lt;br&gt;
&lt;strong&gt;One thing you can do is go for great businesses or follow the trend&lt;/strong&gt;&lt;br&gt;
Now getting deals with great businesses is not easy as a developer with no strong portfolio so you have to follow the trend and work with the type of clients I referenced before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-did"&gt;
  &lt;/a&gt;
  What I did?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TIP #1:&lt;/strong&gt; Learn sales communication skill&lt;br&gt;
Well my powerful point was that I had learned sales communication skill(read the article link given above to learn more about it) which made me sound professional even when I was a beginner with no portfolio. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TIP #2: Become professional&lt;/strong&gt;&lt;br&gt;
Now you have to work with these clients no matter what until you are good enough and valued enough that you can reject clients instead of them rejecting you(not rudely, you can say NO in a beautiful way as well).&lt;br&gt;
&lt;strong&gt;You will ask I don't get orders how can I become professional with no experience.&lt;/strong&gt;&lt;br&gt;
It is simple, you don't have to have a real client to make a website(or any other thing you are involved in). Just be a client for yourself, order yourself to build something. And add that to your portfolio.&lt;br&gt;
Don't wanna do it? &lt;br&gt;
still no problem, you can work with little to no money for someone and have it on a portfolio.&lt;br&gt;
Still don't like the idea?&lt;br&gt;
Learn communication skill, get orders and do it yourself or let other people do it for you.(I discussed about this in-depth in the article I shared the link above)&lt;br&gt;
Still not satisfied?&lt;br&gt;
&lt;strong&gt;Well you have to understand that freelancing is not easy than a job but more harder.&lt;/strong&gt;&lt;br&gt;
In job you have someone to take care of your food but in freelancing you are on the top, which means you are alone and everything's beneath you. You are on an infinite terrain with no whispers or guide. No love or hate. It is just you and you.&lt;br&gt;
so follow the two advices I gave to build your portfolio.&lt;br&gt;
If it is an adventure then there must be some safety precautions, No?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#safety-precautions-for-freelancing"&gt;
  &lt;/a&gt;
  Safety precautions for freelancing:
&lt;/h2&gt;

&lt;p&gt;1: Never leave your job for freelancing.&lt;br&gt;
2: Do it part-time.&lt;br&gt;
3: Have at least 6 months of expenses before starting freelancing full-time.&lt;br&gt;
4: If you have no responsibilities and you are  young just start freelancing.&lt;br&gt;
5: If you are older and cannot switch easily, consider learning financial education. Start investing, don't go for freelancing. Have enough from passive investing income so you can do whatever you like i.e freelancing. I recommend reading "Rich dad Poor dad" book. You will thank me later if you analyzed how powerful advice this is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-you-out-of-the-ratrace"&gt;
  &lt;/a&gt;
  Are you out of the rat-race?
&lt;/h2&gt;

&lt;p&gt;Yes if you are professional or can talk professionally you have to power to convince your client about which tech is best.&lt;br&gt;
I sometime refer clients because the tech that is best for you is not in my expertise.&lt;/p&gt;

&lt;p&gt;The tech you will learn in the  rat-race will be fruitful for you because you can work with clients from multiple backgrounds.&lt;/p&gt;

&lt;p&gt;I know python but I work with everything related to Django and DjangoRestFramework+Frontend(React and React native)&lt;/p&gt;

&lt;p&gt;I learned multiple technologies but I cannot change lanes every now and then.&lt;br&gt;
I know one tech and I am good in it so I convince client if that tech is best for them otherwise I just refer them to other sources.&lt;br&gt;
Or if I know the tech partially that they are interested in and that is best for their product I don't start learning that tech. Remember it is rat-race. Just reject the client or refer them. Remember that is the freedom freelancing has given you. Why don't take advantage of it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-leaving-ratrace-means-i-dont-learn-any-other-new-tech"&gt;
  &lt;/a&gt;
  Does leaving rat-race means I don't learn any other new tech?:
&lt;/h2&gt;

&lt;p&gt;Never.&lt;br&gt;
When I say no to something and yes to something it is not 0 or 1.&lt;br&gt;
You are not a computer who only understands yes or no.&lt;br&gt;
Remember this world is not 0 &lt;strong&gt;OR&lt;/strong&gt; 1.  It is 0 &lt;strong&gt;AND&lt;/strong&gt; 1.&lt;br&gt;
Between 0 and 1 there is infinite amount of numbers meaning possibilities. &lt;br&gt;
So if I say leave the trend of learning every new technology this doesn't mean taking a sacred vow of never accepting the industry's achievements of new tech.&lt;br&gt;
It is not sticking to one tech but learning the best tech or tech that can solve one problem greatly. &lt;br&gt;
In my case python it is general programming language which means I can do a lot with it. &lt;br&gt;
But if you are into php, you can only do desktop apps and website. So if you wanna go into ML or AI learning new tech is your next goal. &lt;br&gt;
But if for example you are into jquery, and it is dying you must switch to it's alternative or go for other framework or learn Nodejs to expand possibilites&lt;/p&gt;

&lt;p&gt;My point was to just limit the randomness and taking things into your hand, and if necessary expanding your possibilities by learning new tech.&lt;br&gt;
Remember this world is &lt;strong&gt;and&lt;/strong&gt; world  not &lt;strong&gt;or&lt;/strong&gt; world. There is always a new way, strategy or solution.&lt;/p&gt;

&lt;p&gt;Accept every change but never be accept change so much that you get lost in it.&lt;br&gt;
Change is like a illusion, people who don't accept it and people who accept it completely are doomed, but people to understands it succeeds. &lt;/p&gt;

&lt;p&gt;I hope I gave you a thing to think about for the rest of your day.&lt;br&gt;
I wanted to give you another perspective to thing from, and I think I have done the jo right.&lt;br&gt;
Let me know if you have any suggestion/query.&lt;/p&gt;

&lt;p&gt;Stay blessed and Happy. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me:
&lt;/h2&gt;

&lt;p&gt;Hire me: &lt;a href="https://www.fiverr.com/saifullah02"&gt;https://www.fiverr.com/saifullah02&lt;/a&gt; (For web development Purposes)&lt;br&gt;
My New Blog: &lt;a href="https://saifullahusmani.blogspot.com/"&gt;saifullahusmani.com&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Follow me here:&lt;/em&gt; &lt;a href="https://dev.to/saifullahusmani"&gt;https://dev.to/saifullahusmani&lt;/a&gt;&lt;br&gt;
&lt;em&gt;YouTube:&lt;/em&gt; &lt;a href="http://bit.ly/saifullahusmani"&gt;http://bit.ly/saifullahusmani&lt;/a&gt; (Programming Tutorials Coming Soon).&lt;br&gt;
&lt;em&gt;Discord:&lt;/em&gt; &lt;a href="https://discord.gg/AKyvy8Y"&gt;https://discord.gg/AKyvy8Y&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Facebook&lt;/em&gt;: &lt;a href="https://www.facebook.com/SaifullahUsmani693"&gt;https://www.facebook.com/SaifullahUsmani693&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Create an underline animation in CSS !</title>
      <author>Ustariz Enzo</author>
      <pubDate>Fri, 22 Oct 2021 07:22:06 +0000</pubDate>
      <link>https://dev.to/ziratsu/create-an-underline-animation-in-css--1kl1</link>
      <guid>https://dev.to/ziratsu/create-an-underline-animation-in-css--1kl1</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;Let's learn how to create an easy but impactful &lt;em&gt;underline animation&lt;/em&gt; in CSS so that your links look cooler!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rPjWH_Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7ppg186dpmrvswfsrjm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rPjWH_Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7ppg186dpmrvswfsrjm.gif" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8U6x-pDTguU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-html-structure"&gt;
  &lt;/a&gt;
  1. The HTML Structure.
&lt;/h2&gt;

&lt;p&gt;You only need to add a title to your body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Animation&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-style-the-title"&gt;
  &lt;/a&gt;
  2. Style the title.
&lt;/h2&gt;

&lt;p&gt;Start by choosing whichever font you want for your body. I'll use Arial here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, center the title in the middle of the page and style it a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, your H1 needs to have its width equal to its content, to do so, you can simply add :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inline&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SXTC1Plk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nil3z08o00k8vz1xibkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SXTC1Plk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nil3z08o00k8vz1xibkg.png" alt="Inspecter on Chrome"&gt;&lt;/a&gt;&lt;br&gt;
If it doesn't, &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-time-to-animate-it"&gt;
  &lt;/a&gt;
  3. Time to animate it!
&lt;/h2&gt;

&lt;p&gt;The animation will run with the pseudo-element after.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To trigger the animation, you need to hover over the title. So, once you do (with "h1:hover"), the animation will happen ("::after"), like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;:hover::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(You can also replace "scale" with "scaleX", but it will only provoke a minor difference.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You're done.&lt;/strong&gt; And yes, it's &lt;em&gt;that&lt;/em&gt; easy!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rPjWH_Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7ppg186dpmrvswfsrjm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rPjWH_Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7ppg186dpmrvswfsrjm.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a nice animation to use on links for instance, because it will allow users to understand that it's a link.&lt;/p&gt;

&lt;p&gt;Come and take a look at my fancy &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me on my &lt;strong&gt;social medias&lt;/strong&gt;:&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/learn_to_create1"&gt;https://www.instagram.com/learn_to_create1&lt;/a&gt;&lt;br&gt;
TikTok : &lt;a href="https://www.tiktok.com/@learn_to_create"&gt;https://www.tiktok.com/@learn_to_create&lt;/a&gt;&lt;br&gt;
Twitter : &lt;a href="https://twitter.com/Learn_To_Create"&gt;https://twitter.com/Learn_To_Create&lt;/a&gt;&lt;br&gt;
The Discord's link : &lt;a href="https://discord.gg/8DNmW2eK"&gt;https://discord.gg/8DNmW2eK&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Make sure to take a look at my &lt;strong&gt;online courses&lt;/strong&gt;:&lt;br&gt;
Front-End Courses : &lt;a href="https://www.front-end-school.com/"&gt;https://www.front-end-school.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon for other quick and easy tutorials !&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo.&lt;/p&gt;

</description>
      <category>css</category>
      <category>animation</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Freelance Marketplace App Like Upwork and Fiverr</title>
      <author>Oliver Jones</author>
      <pubDate>Fri, 22 Oct 2021 07:07:05 +0000</pubDate>
      <link>https://dev.to/oliverj82225769/freelance-marketplace-app-like-upwork-and-fiverr-3bcl</link>
      <guid>https://dev.to/oliverj82225769/freelance-marketplace-app-like-upwork-and-fiverr-3bcl</guid>
      <description>&lt;p&gt;Build the best freelance marketplace platform like Upwork and Fiverr with Code Brew Labs and get the team of skilled professionals that help transforming your dreams into reality by building a Fiverr and Upwork Clone as per your requirement.&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>programming</category>
      <category>html</category>
    </item>
    <item>
      <title>Competitive self-play with Unity ML-Agents</title>
      <author>Joy</author>
      <pubDate>Fri, 22 Oct 2021 06:47:04 +0000</pubDate>
      <link>https://dev.to/joooyz/competitive-self-play-with-unity-ml-agents-1nh6</link>
      <guid>https://dev.to/joooyz/competitive-self-play-with-unity-ml-agents-1nh6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#an-overview-of-selfplay"&gt;
  &lt;/a&gt;
  An overview of self-play
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://openai.com/blog/competitive-self-play/"&gt;Competitive self-play&lt;/a&gt; involves training an agent against itself. It was used in famous systems such as &lt;a href="https://deepmind.com/research/case-studies/alphago-the-story-so-far"&gt;AlphaGo&lt;/a&gt; and &lt;a href="https://openai.com/blog/dota-2/"&gt;OpenAI Five (Dota 2)&lt;/a&gt;. By playing increasingly stronger versions of itself, agents can discover new and better strategies.&lt;/p&gt;

&lt;p&gt;In this post, we walk through using competitive self-play in Unity ML-Agents to train agents to play volleyball. This article is also part 5 of the series '&lt;strong&gt;&lt;a href="https://dev.to/joooyz/a-hands-on-introduction-to-deep-reinforcement-learning-using-unity-ml-agents-4f8i"&gt;A hands-on introduction to deep reinforcement learning using Unity ML-Agents&lt;/a&gt;&lt;/strong&gt;'. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-case-for-selfplay"&gt;
  &lt;/a&gt;
  The case for self-play
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/joooyz/how-to-train-agents-to-play-volleyball-using-deep-reinforcement-learning-417b"&gt;We previously trained agents using PPO&lt;/a&gt; with the following setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Symmetric environment&lt;/li&gt;
&lt;li&gt;Both agents shared the same policy&lt;/li&gt;
&lt;li&gt;Observations: velocity, rotation, and position vectors of the agent and ball&lt;/li&gt;
&lt;li&gt;Reward function: +1 for hitting the ball over the net&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This resulted in agents that were able to successfully volley the ball back-and-forth after ~20M training steps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5M0puDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmoyaw03cwnheu96dk3f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5M0puDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmoyaw03cwnheu96dk3f.gif" alt="PPO trained agents" title="Trained agents playing volleyball"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that the agents make 'easy' passes by aiming the ball towards the centre of the court. This is because we set the reward function to incentivize keeping the ball in play.&lt;/p&gt;

&lt;p&gt;Our aim now is to train &lt;em&gt;competitive&lt;/em&gt; agents that are rewarded for &lt;em&gt;winning&lt;/em&gt; (i.e. landing the ball in the opponent's court). We expect this will lead to agents that learn interesting strategies and make passes that are harder to return.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfplay-setup-in-mlagents"&gt;
  &lt;/a&gt;
  Self-play setup in ML-Agents
&lt;/h2&gt;

&lt;p&gt;To follow along this section, you will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unity ML-Agents Release 18+ (&lt;a href="https://dev.to/joooyz/an-introduction-to-machine-learning-with-unity-ml-agents-3an5"&gt;getting started instructions&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The latest version of the &lt;a href="https://github.com/CoderOneHQ/ultimate-volleyball"&gt;Ultimate Volleyball repo&lt;/a&gt; (or, you can use your own volleyball environment if you've been following the tutorial series)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1-put-the-agents-on-opposing-teams"&gt;
  &lt;/a&gt;
  Step 1: Put the agents on opposing teams
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open the Ultimate Volleyball environment in Unity&lt;/li&gt;
&lt;li&gt;Open &lt;strong&gt;Assets&lt;/strong&gt; &amp;gt; &lt;strong&gt;Prefabs&lt;/strong&gt; &amp;gt; &lt;code&gt;2PVolleyballArea.prefab&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Select either the &lt;code&gt;PurpleAgent&lt;/code&gt; or &lt;code&gt;BlueAgent&lt;/code&gt;  object&lt;/li&gt;
&lt;li&gt;In Inspector &amp;gt; Behavior Parameters, set &lt;code&gt;TeamId&lt;/code&gt; to 1 (the actual value doesn't matter, as long as the PurpleAgent and BlueAgent have different Team ID's):&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gpYnme_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bofa2dc0j4uagfiybfiw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpYnme_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bofa2dc0j4uagfiybfiw.jpg" alt="ML-Agents Team ID" title="Team ID setting in ML-Agents"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-set-up-the-selfplay-reward-function"&gt;
  &lt;/a&gt;
  Step 2:  Set up the self-play reward function
&lt;/h3&gt;

&lt;p&gt;Our previous reward function was +1 for hitting the ball over the net.&lt;/p&gt;

&lt;p&gt;For self-play, we'll switch to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;+1 to the winning team&lt;/li&gt;
&lt;li&gt;-1 to the losing team&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;VolleyballEnvController.cs&lt;/code&gt; and add the rewards to the &lt;code&gt;ResolveEvent()&lt;/code&gt; method:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HitBlueGoal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// blue wins&lt;/span&gt;
    &lt;span class="n"&gt;blueAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddReward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;purpleAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddReward&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;1f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// turn floor blue&lt;/span&gt;
    &lt;span class="nf"&gt;StartCoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;GoalScoredSwapGroundMaterial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;volleyballSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blueGoalMaterial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RenderersList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// end episode&lt;/span&gt;
    &lt;span class="n"&gt;blueAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndEpisode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;purpleAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndEpisode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;ResetScene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HitPurpleGoal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// purple wins&lt;/span&gt;
    &lt;span class="n"&gt;purpleAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddReward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;blueAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddReward&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;1f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// turn floor purple&lt;/span&gt;
    &lt;span class="nf"&gt;StartCoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;GoalScoredSwapGroundMaterial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;volleyballSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purpleGoalMaterial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RenderersList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// end episode&lt;/span&gt;
    &lt;span class="n"&gt;blueAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndEpisode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;purpleAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndEpisode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;ResetScene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Remove &lt;code&gt;AddReward&lt;/code&gt; from the other cases&lt;/li&gt;
&lt;li&gt;You can also set penalties for hitting the ball out of the court (in &lt;code&gt;case Event.HitOutOfBounds&lt;/code&gt;). From my experience, this may take longer for the agents to learn to hit the ball.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-selfplay-training-parameters-to-the-trainer-config"&gt;
  &lt;/a&gt;
  Step 3: Add self-play training parameters to the trainer config
&lt;/h3&gt;

&lt;p&gt;Create a new &lt;code&gt;.yaml&lt;/code&gt; file and copy in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;behaviors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Volleyball&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;trainer_type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ppo&lt;/span&gt;
    &lt;span class="na"&gt;hyperparameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;batch_size&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2048&lt;/span&gt;
      &lt;span class="na"&gt;buffer_size&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20480&lt;/span&gt;
      &lt;span class="na"&gt;learning_rate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.0002&lt;/span&gt;
      &lt;span class="na"&gt;beta&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.003&lt;/span&gt;
      &lt;span class="na"&gt;epsilon&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.15&lt;/span&gt;
      &lt;span class="na"&gt;lambd&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.93&lt;/span&gt;
      &lt;span class="na"&gt;num_epoch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
      &lt;span class="na"&gt;learning_rate_schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;constant&lt;/span&gt;
    &lt;span class="na"&gt;network_settings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;normalize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;hidden_units&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;
      &lt;span class="na"&gt;num_layers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
      &lt;span class="na"&gt;vis_encode_type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple&lt;/span&gt;
    &lt;span class="na"&gt;reward_signals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;extrinsic&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;gamma&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.96&lt;/span&gt;
        &lt;span class="na"&gt;strength&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.0&lt;/span&gt;
    &lt;span class="na"&gt;keep_checkpoints&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
    &lt;span class="na"&gt;max_steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80000000&lt;/span&gt;
    &lt;span class="na"&gt;time_horizon&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;
    &lt;span class="na"&gt;summary_freq&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20000&lt;/span&gt;
    &lt;span class="na"&gt;self_play&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;window&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
      &lt;span class="na"&gt;play_against_latest_model_ratio&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;
      &lt;span class="na"&gt;save_steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20000&lt;/span&gt;
      &lt;span class="na"&gt;swap_steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10000&lt;/span&gt;
      &lt;span class="na"&gt;team_change&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explaining-selfplay-parameters"&gt;
  &lt;/a&gt;
  Explaining self-play parameters
&lt;/h3&gt;

&lt;p&gt;During self-play, one of the agents will be set as the &lt;em&gt;learning agent&lt;/em&gt; and the other as the fixed policy &lt;em&gt;opponent&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Every &lt;code&gt;save_steps=20000&lt;/code&gt; steps, a snapshot of the learning agent's existing policy will be taken. Up to &lt;code&gt;window=10&lt;/code&gt; snapshots will be stored. When a new snapshot is taken, the oldest one is discarded. These past versions of itself become the 'opponents' that the learning agent trains against. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7sDCCuqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq14ashtaitzhhgchknw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7sDCCuqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq14ashtaitzhhgchknw.jpg" alt="Self-play hyperparameters" title="Self-play hyperparameters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every &lt;code&gt;swap_steps=10000&lt;/code&gt; steps, the opponent's policy will be swapped with a different snapshot. The snapshot is sampled with a probability of &lt;code&gt;play_against_latest_model_ratio=0.5&lt;/code&gt; that it will play against the &lt;strong&gt;latest&lt;/strong&gt; &lt;strong&gt;policy&lt;/strong&gt; (i.e. the &lt;strong&gt;strongest&lt;/strong&gt; opponent). This helps to prevent &lt;strong&gt;overfitting&lt;/strong&gt; to a single opponent playstyle.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;team_change=100000&lt;/code&gt; steps, the learning agent and opponent teams will be switched. &lt;/p&gt;

&lt;p&gt;Feel free to play around with these default hyperparameters (more information available in the official &lt;a href="https://github.com/Unity-Technologies/ml-agents/blob/main/docs/Training-Configuration-File.md#self-play"&gt;ML-Agents documentation&lt;/a&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#training-with-selfplay"&gt;
  &lt;/a&gt;
  Training with self-play
&lt;/h2&gt;

&lt;p&gt;Training with self-play in ML-Agents is done the same way as any other form of training:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Activate the virtual environment containing your installation of &lt;code&gt;ml-agents&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Navigate to your working directory, and run in the terminal:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;mlagents-learn &amp;lt;path to config file&amp;gt; --run-id=VB_1 --time-scale=1&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When you see the message "Start training by pressing the Play button in the Unity Editor", click ▶ within the Unity GUI.&lt;/li&gt;
&lt;li&gt;In another terminal window, run &lt;code&gt;tensorboard --logdir&lt;/code&gt; results from your working directory to observe the training process.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#selfplay-training-results"&gt;
  &lt;/a&gt;
  Self-play training results
&lt;/h2&gt;

&lt;p&gt;In a stable training run, you should see the ELO gradually increase. &lt;/p&gt;

&lt;p&gt;In the diagram below, the three inflexion points correspond to the agent:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Learning to serve &lt;/li&gt;
&lt;li&gt;Learning to return the ball&lt;/li&gt;
&lt;li&gt;Learning more competitive shots&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KIdtbzri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szk3gdbjlwmodfdki1j5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KIdtbzri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szk3gdbjlwmodfdki1j5.jpg" alt="Tensorboard results" title="ELO and Episode Length"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/joooyz/how-to-train-agents-to-play-volleyball-using-deep-reinforcement-learning-417b"&gt;Compared to our previous training results&lt;/a&gt;, I found that even after ~80M steps, the agents trained using self-play don't serve or return the ball as reliably. However, they do learn to hit some interesting shots, like hitting the ball towards the edge of the court:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TcCgN1o9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mejlpcsil20efq9faj4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TcCgN1o9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mejlpcsil20efq9faj4.gif" alt="Trained agents using self-play playing volleyball" title="Volleyball agents trained using PPO self-play after 80M steps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you discover any other interesting playstyles, let me know!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h2&gt;

&lt;p&gt;Thanks for reading! I hope you found this post useful.&lt;/p&gt;

&lt;p&gt;If you have any feedback or questions, feel free to post them on the &lt;a href="https://github.com/CoderOneHQ/ultimate-volleyball"&gt;Ultimate Volleyball Repo&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>deeplearning</category>
      <category>unity3d</category>
    </item>
    <item>
      <title>Introduction to Redux Toolkit (basic features)</title>
      <author>coder4life</author>
      <pubDate>Fri, 22 Oct 2021 06:40:12 +0000</pubDate>
      <link>https://dev.to/coder4_life/introduction-to-redux-toolkit-basic-features-121e</link>
      <guid>https://dev.to/coder4_life/introduction-to-redux-toolkit-basic-features-121e</guid>
      <description>&lt;p&gt;Get started with the basic features of Redux Toolkit in this video. As an example we create a "counter" component to show what Redux Toolkit in its most basic form has to offer.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Rb92oYuUBCA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Enlist major features of Kotlin?</title>
      <author>mayank chaurasiya</author>
      <pubDate>Fri, 22 Oct 2021 06:33:17 +0000</pubDate>
      <link>https://dev.to/mayankquora/enlist-major-features-of-kotlin-4akb</link>
      <guid>https://dev.to/mayankquora/enlist-major-features-of-kotlin-4akb</guid>
      <description>&lt;p&gt;Kotlin was developed to make it feature-rich in mind, so there are many features that make Kotlin a unique programming language.&lt;/p&gt;

&lt;p&gt;Below are some major Features of &lt;a href="https://www.courseya.com/kotlin-interview-questions/"&gt;Kotlin Programming Language:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;1.Extension functions:&lt;/b&gt; In Kotlin, you can add some extra functionality to the existing component to make it much more versatile.&lt;br&gt;
&lt;b&gt;2.Higher-Order Function:&lt;/b&gt; You can pass a function as an argument to a method or return a function as a result of the method in Kotlin.&lt;br&gt;
&lt;b&gt;3.Smart Cast:&lt;/b&gt; Smart Cast checks for some type, and then it will allow performing all the operations allowed for that particular type.&lt;br&gt;
&lt;b&gt;4.Destruction Declaration:&lt;/b&gt; With this, it is possible to return more than one value from a function.&lt;br&gt;
&lt;b&gt;5.Default and Named arguments:&lt;/b&gt; You can assign a default value to the parameter whom you want to make optional, and while calling that method, there is no bound on giving values to the default parameters. You can easily change the sequence of the parameter at the time of calling with Named arguments. It is done by writing the name of the argument and then assigning the value to it.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>java</category>
      <category>interview</category>
      <category>beginners</category>
    </item>
    <item>
      <title>API Testing - Setting up API Tests for different environments like Dev, Prod,...</title>
      <author>Dheeraj Aggarwal</author>
      <pubDate>Fri, 22 Oct 2021 06:29:10 +0000</pubDate>
      <link>https://dev.to/dheerajaggarwal/api-testing-setting-up-api-tests-for-different-environments-like-dev-prod-h69</link>
      <guid>https://dev.to/dheerajaggarwal/api-testing-setting-up-api-tests-for-different-environments-like-dev-prod-h69</guid>
      <description>&lt;p&gt;This video #tutorial explains how you may set up multiple test environments for the same set of API tests in the vREST NG Application.&lt;/p&gt;

&lt;p&gt;vREST NG is a script less API test automation tool. It helps you to write maintainable test cases quickly for functional and regression testing of APIs. You can download and install the vREST NG application directly on Windows, OSX, and Linux via our website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link:&lt;/strong&gt; &lt;a href="https://youtu.be/1bhpENPenJY"&gt;https://youtu.be/1bhpENPenJY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API Testing Tutorials Playlist:&lt;/strong&gt; &lt;a href="https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0"&gt;https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://vrest.io/?utm_source=devto&amp;amp;utm_medium=devto-desc&amp;amp;utm_campaign=video"&gt;vREST NG Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/NtRa7kw"&gt;Community Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meetings.hubspot.com/dheeraj-aggarwal"&gt;Book a Live Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please do like and share if you found this video helpful and let the voice heard by the testing community. Also, let us know your feedback by commenting on this post.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>tutorial</category>
      <category>apitesting</category>
      <category>vrest</category>
    </item>
    <item>
      <title>HTML tags | style</title>
      <author>Carlos Espada</author>
      <pubDate>Fri, 22 Oct 2021 06:12:16 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-style-5od</link>
      <guid>https://dev.to/carlosespada/html-tags-style-5od</guid>
      <description>&lt;p&gt;It is used to &lt;strong&gt;assign styles to the document or to a part of it&lt;/strong&gt;. Inside it will contain CSS that will define how HTML elements are rendered in a browser.&lt;/p&gt;

&lt;p&gt;It must go inside &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;. It is generally better to put styles in external style sheets and link them using the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;Like the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element, the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element can include media attributes that contain &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries"&gt;media queries&lt;/a&gt; to allow you to selectively apply styles based on certain characteristics such as the width of the viewport.&lt;/p&gt;

&lt;p&gt;It can have several attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;type&lt;/code&gt;: defines the style language as a MIME type (the charset must not be specified). This attribute is optional and its default value is &lt;code&gt;text/css&lt;/code&gt; (it cannot have any other value than that or empty string). In modern web documents there is no reason to use it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;media&lt;/code&gt;: defines to which media the style should be applied. Its value is a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries"&gt;media query&lt;/a&gt; whose default value is &lt;code&gt;all&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nonce&lt;/code&gt;: a cryptographic nonce (number used once) used to whitelist inline styles in a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src"&gt;style-src Content-Security-Policy&lt;/a&gt;. The server must generate a unique nonce value each time it broadcasts a policy. It is essential to provide a nonce that cannot be guessed, otherwise bypassing the policy of a resource is very easy.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;title&lt;/code&gt;: specifies a name so that you can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets"&gt;alternate style sheets&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If multiple &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements are included to external style sheets in the same document, they will be applied to the HTML document in the order in which they have been included, so it is important to take this into account to avoid unwanted effects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;em&gt;none&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Self-closing: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Semantic value: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/tag_style.asp"&gt;Definition&lt;/a&gt; | &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_style"&gt;Example&lt;/a&gt; | &lt;a href="https://caniuse.com/mdn-html_elements_style"&gt;Support&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>style</category>
    </item>
    <item>
      <title>1 simple way to implement variable-Length Pattern Matching</title>
      <author>lisahui</author>
      <pubDate>Fri, 22 Oct 2021 06:06:50 +0000</pubDate>
      <link>https://dev.to/lisahui/nebula-graph-how-variable-length-pattern-matching-is-implemented-1pb5</link>
      <guid>https://dev.to/lisahui/nebula-graph-how-variable-length-pattern-matching-is-implemented-1pb5</guid>
      <description>&lt;p&gt;At the very heart of openCypher, the MATCH clause allows you to specify simple query patterns to retrieve the relationships from a graph database. A variable-length pattern is commonly used to describe paths and it is Nebula Graph’s first try to get nGQL compatible with openCypher in the MATCH clause.&lt;/p&gt;

&lt;p&gt;As can be seen from the previous articles of this series, an execution plan is composed of physical operators. Each operator is responsible for executing unique computational logics. To implement the MATCH clause, the operators such as GetNeighbors, GetVertices, Join, Project, Filter, and Loop, which have been introduced in the previous articles, are needed. Unlike the tree structure in a relational database, the execution process expressed by an execution plan in Nebula Graph is a cyclic graph. How to transform a variable-length pattern into a physical plan in Nebula Graph is the focus of the Planner. In this article, we will introduce how variable-length pattern matching is implemented in Nebula Graph.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-analysis"&gt;
  &lt;/a&gt;
  Problem Analysis
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#fixedlength-pattern"&gt;
  &lt;/a&gt;
  Fixed-Length Pattern
&lt;/h3&gt;

&lt;p&gt;In a MATCH clause, a fixed-length pattern is commonly used to search for a relationship. If a fixed-length pattern is considered a special case of the variable-length pattern, that is, a pattern describing a path of a specified length, the implementations of both can be unified. Here are the examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Fixed-length pattern MATCH (v)-[e]-(v2)
// Variable-length pattern MATCH (v)-[e*1..1]-(v2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The preceding examples differ from each other in the type of the e variable. In the fixed-length pattern, e represents an edge, while in the variable-length one, e represents a list of edges of length 1.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-variablelength-patterns"&gt;
  &lt;/a&gt;
  Connecting Variable-Length Patterns
&lt;/h3&gt;

&lt;p&gt;According to the syntax of openCypher, a MATCH clause allows you to specify a combination of various patterns for describing complicated paths. For example, two variable-length patterns can be connected as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MATCH (v)-[e*1..3]-(v2)-[ee*2..4]-(v3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The pattern combination in the preceding example is extendable, which means by connecting variable-length and fixed-length patterns in different ways, various complicated paths can be queried. Therefore, we must find a pattern to generate an execution plan to iterate the whole process recursively. The following conditions must be considered:&lt;/p&gt;

&lt;p&gt;The following variable-length path depends on the preceding one.&lt;br&gt;
The variables in the following pattern depend on the preceding pattern.&lt;br&gt;
Before the next traversal step, the starting vertex must be de-duplicated.&lt;br&gt;
From the following example, you can see that as long as an execution plan can be generated for the part of ()-[:like*m..n]-, combinations and iterations may be applied to generate plans for the subsequent parts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;()-[:like*m..n]- ()-[:like*k..l]- ()
 \____________/   \____________/   \_/
    Pattern1         Pattern2       Pattern3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#execution-plan"&gt;
  &lt;/a&gt;
  Execution Plan
&lt;/h2&gt;

&lt;p&gt;In this section, we will introduce how the ()-[:like*m..n]- part in the preceding example is transformed into a physical execution plan in Nebula Graph. This pattern describes a graph of a minimum of m hops and a maximum of n hops. In Nebula Graph, a one-step traversal is completed by the GetNeighbors operator. To implement a multi-step traversal, each traversal step must call the GetNeighbors operator again on the basis of the previous step, and when the traversal of all the steps are completed, all the retrieved vertices and edges are connected end to end to form a single path. What users need is the paths of m to n relationships. However, in the execution process, paths of length 1 to length n are queried and are stored for output or for the next traversal, but only the paths of length m to n are retrieved.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#onestep-traversal"&gt;
  &lt;/a&gt;
  One-Step Traversal
&lt;/h3&gt;

&lt;p&gt;Let’s see what the one-step traversal looks like. In Nebula Graph, the source vertex is stored together with its outgoing edges, so retrieving them does not need to access data across partitions. However, the destination vertex and its incoming edges are stored in different partitions, so GetVertices is necessary for retrieving the properties of the vertex. In addition, to avoid replicated scanning of Storage, the source vertices must be de-duplicated before the traversal. The execution plan of a one-step traversal is shown as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BJ_RVjed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138244211-8f1aaec3-b1f4-4e52-b74c-7d547b4f350f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BJ_RVjed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138244211-8f1aaec3-b1f4-4e52-b74c-7d547b4f350f.png" alt="One-Step Traversal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multistep-traversal"&gt;
  &lt;/a&gt;
  Multi-Step Traversal
&lt;/h3&gt;

&lt;p&gt;The process of a multi-step traversal is the repetition of one-step traversal. However, we can see that the GetNeighbors operator can retrieve the properties of an edge’s source vertex, so the GetVertices operator can be omitted in the previous step. Here is an execution plan of a two-step traversal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EUbdh4ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138244372-74619d76-8b10-481a-9dde-d065d801f847.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EUbdh4ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138244372-74619d76-8b10-481a-9dde-d065d801f847.png" alt="Multi-Step Traversal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storing-paths"&gt;
  &lt;/a&gt;
  Storing Paths
&lt;/h3&gt;

&lt;p&gt;The paths retrieved in each traversal step may be needed at the end of the traversal, so all the paths must be stored. The paths for a two-step traversal are connected by the Join operator. In the result of the example ()-[e:like*m..n]-, e represents a list of data (edges), so Union is needed to merge the results of each traversal step. The execution plan will be evolved further as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vbJSdFTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138245877-36d53b4a-0643-4058-8ffb-23502edc0901.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vbJSdFTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138245877-36d53b4a-0643-4058-8ffb-23502edc0901.png" alt="One-Step Traversal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-variablelength-patterns"&gt;
  &lt;/a&gt;
  Connecting Variable-Length Patterns
&lt;/h3&gt;

&lt;p&gt;After the implementations of the preceding process, a physical plan will be generated for the ()-[e:like*m..n]- pattern. If multiple similar patterns are connected together, such a process is iterated. However, before the iteration, the results of the previous process must be filtered to get the paths of length m to length n. The retrieved dataset of the previous process involves the paths of length 1 to length n, so filtering them by path length is needed. When the variable-length patterns are connected together, the execution plan becomes as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KS16LRwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138246601-acec9a6e-07b7-4f2d-ba0e-40850dabb63c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS16LRwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138246601-acec9a6e-07b7-4f2d-ba0e-40850dabb63c.png" alt="One-Step Traversal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the step-by-step decomposition of the patterns, the expected execution plan for the MATCH clause is finally generated. As you can see, it takes a lot of effort to transform a complicated pattern into the underlying interfaces for a traversal. Of course, the execution plan can be optimized, such as the multi-step traversal can be encapsulated by using the Loop operator and the sub-plan of a one-step traversal can be reused, which will not be detailed in this article. If you are interested, please refer to &lt;a href="https://github.com/vesoft-inc/nebula/blob/master/src/graph/planner/match/Expand.cpp"&gt;the source code of Nebula Graph&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This article demonstrated the process of generating an execution plan for a MATCH clause with a variable-length pattern. While reading the article, you may have this question: Why such a basic and simple path query will generate such a complicated execution plan in Nebula Graph? It’s not like Neo4j, where only a few operators are needed to complete the same job. In Nebula Graph, complicated directed acyclic graphs (DAG) are generated.&lt;/p&gt;

&lt;p&gt;The answer is that in Nebula Graph, the operators are closer to the underlying interfaces and there is a lack of semantic abstractions for higher-level graph operations. The operator granularity is too fine, so too many details need to be considered to implement the optimization of the upper layer. We will further study the execution operators to gradually improve the functionality and the performance of the MATCH clause.&lt;/p&gt;

&lt;p&gt;If you encounter any problems in the process of using Nebula Graph, please refer to &lt;a&gt;Nebula Graph Database Manual&lt;/a&gt; to troubleshoot the problem. It records in detail the knowledge points and specific usage of the graph database and the graph database Nebula Graph.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>opensource</category>
      <category>database</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
