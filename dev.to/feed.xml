<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Separating logic in your Redux Toolkit application</title>
      <author>Chinwike Maduabuchi</author>
      <pubDate>Mon, 31 May 2021 20:56:19 +0000</pubDate>
      <link>https://dev.to/chinwike/separating-logic-in-your-redux-toolkit-application-h7i</link>
      <guid>https://dev.to/chinwike/separating-logic-in-your-redux-toolkit-application-h7i</guid>
      <description>&lt;p&gt;Redux Toolkit (which onwards, I will refer to as RTK) is a massive improvement to the Redux ecosystem. RTK changes the way we approach writing Redux logic and is well known for cutting off all the boilerplate code Redux requires.&lt;/p&gt;

&lt;p&gt;I’ve enjoyed playing around with this library for the last couple of days, but recently, I found myself in an unpleasant situation. All my Redux logic, including asynchronous calls to APIs, was packed down into one &lt;code&gt;slice&lt;/code&gt; file (more about slices in a bit). &lt;/p&gt;

&lt;p&gt;Albeit this being the way RTK suggests we structure our slices, the file starts to become hard to navigate as the application grows and eventually becomes an eyesore to look at.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h2&gt;

&lt;p&gt;This post isn’t an introductory guide on how to use RTK or Redux in general, however, I’ve done my bit to explain the little nuances that make RTK what it is.&lt;/p&gt;

&lt;p&gt;A little understanding of state management in React is enough to help you wring some value from this post. You can always visit the &lt;a href="https://redux-toolkit.js.org/introduction/getting-started"&gt;docs&lt;/a&gt; to expand your knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slices"&gt;
  &lt;/a&gt;
  SLICES
&lt;/h2&gt;

&lt;p&gt;The term slice will be an unfamiliar word for the uninitiated so I’ll briefly explain what it is. In RTK, a slice is a function that holds the state eventually passed to your Redux store. In a slice, reducer functions used to manipulate state are defined and exported to be made accessible by any component in your app.&lt;/p&gt;

&lt;p&gt;A slice contains the following data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the name of the slice — so it can be referenced in the Redux store&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;initialState&lt;/code&gt; of the reducer&lt;/li&gt;
&lt;li&gt;reducer functions used to make changes to the state&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;extraReducers&lt;/code&gt; argument responsible for responding to external requests (like &lt;code&gt;fetchPosts&lt;/code&gt; below)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basic overview of a slice&lt;/p&gt;

&lt;p&gt;In a nutshell, the slice file is the powerhouse of an RTK application. Let’s move on to create a new React application with RTK included by running the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npx create-react-app my-app --template redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On opening your app in a code editor, you’ll notice that this template has a slightly different folder structure compared to that of create-react-app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--afpSs5ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4ECA4CB2EB28A6EA76B8AB93C85C38D76BE8CB04C97DF7856089D49E3BEADA23_1622193005204_RTK%2Bdefault%2Bfolder%2Bstructure.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--afpSs5ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4ECA4CB2EB28A6EA76B8AB93C85C38D76BE8CB04C97DF7856089D49E3BEADA23_1622193005204_RTK%2Bdefault%2Bfolder%2Bstructure.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The difference is the new &lt;code&gt;app&lt;/code&gt; folder which contains the Redux store and the &lt;code&gt;features&lt;/code&gt; folder which holds all the features of the app.&lt;/p&gt;

&lt;p&gt;Each subfolder in the &lt;code&gt;features&lt;/code&gt; folder represents a specific functionality in the RTK application which houses the slice file, the component which makes use of the slice and any other files you may include here e.g. styling files. &lt;/p&gt;

&lt;p&gt;This generated template also includes a sample &lt;code&gt;counter&lt;/code&gt; component which is meant to show you the basics of setting up a functional Redux store with RTK and how to dispatch actions to this store from components.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npm start&lt;/code&gt; to preview this component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUf2PYcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4ECA4CB2EB28A6EA76B8AB93C85C38D76BE8CB04C97DF7856089D49E3BEADA23_1621850083024_Redux%2Bsample%2Bcounter%2Bcomponent.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUf2PYcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4ECA4CB2EB28A6EA76B8AB93C85C38D76BE8CB04C97DF7856089D49E3BEADA23_1621850083024_Redux%2Bsample%2Bcounter%2Bcomponent.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the way RTK has structured the app, each feature is completely isolated making it easy to locate newly added features in one directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  THE PROBLEM
&lt;/h2&gt;

&lt;p&gt;Let’s examine &lt;code&gt;counterSlice.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createAsyncThunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchCount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./counterAPI&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// The function below is called a thunk and allows us to perform async logic. It&lt;/span&gt;
&lt;span class="c1"&gt;// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This&lt;/span&gt;
&lt;span class="c1"&gt;// will call the thunk with the `dispatch` function as the first argument. Async&lt;/span&gt;
&lt;span class="c1"&gt;// code can then be executed and other actions can be dispatched. Thunks are&lt;/span&gt;
&lt;span class="c1"&gt;// typically used to make async requests.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementAsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAsyncThunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter/fetchCount&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterSlice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// The `reducers` field lets us define reducers and generate associated actions&lt;/span&gt;
  &lt;span class="na"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Redux Toolkit allows us to write "mutating" logic in reducers. It&lt;/span&gt;
      &lt;span class="c1"&gt;// doesn't actually mutate the state because it uses the Immer library,&lt;/span&gt;
      &lt;span class="c1"&gt;// which detects changes to a "draft state" and produces a brand new&lt;/span&gt;
      &lt;span class="c1"&gt;// immutable state based off those changes&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// Use the PayloadAction type to declare the contents of `action.payload`&lt;/span&gt;
    &lt;span class="na"&gt;incrementByAmount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// The `extraReducers` field lets the slice handle actions defined elsewhere,&lt;/span&gt;
  &lt;span class="c1"&gt;// including actions generated by createAsyncThunk or in other slices.&lt;/span&gt;
  &lt;span class="na"&gt;extraReducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;builder&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incrementAsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incrementAsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fulfilled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incrementByAmount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;counterSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// The function below is called a selector and allows us to select a value from&lt;/span&gt;
&lt;span class="c1"&gt;// the state. Selectors can also be defined inline where they're used instead of&lt;/span&gt;
&lt;span class="c1"&gt;// in the slice file. For example: `useSelector((state: RootState) =&amp;gt; state.counter.value)`&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;counterSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I previously mentioned, you will notice that all the logic needed to handle the state for the counter component is consolidated into this single file. The asynchronous calls made using &lt;code&gt;createAsyncThunk&lt;/code&gt;, the &lt;code&gt;createSlice&lt;/code&gt; function and the &lt;code&gt;extraReducers&lt;/code&gt; property are all present.&lt;/p&gt;

&lt;p&gt;As your application grows, you will continue to make more asynchronous requests to your backend API and in turn, have to handle all the possible states of that request to ensure that nothing unexpected breaks your application.&lt;/p&gt;

&lt;p&gt;In RTK, the three possible states of a request are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pending&lt;/li&gt;
&lt;li&gt;fulfilled and&lt;/li&gt;
&lt;li&gt;rejected&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that handling one of these cases takes, at least, 3 lines of code. So that’s a minimum of 9 lines for one asynchronous request.&lt;/p&gt;

&lt;p&gt;Imagine how difficult it would be to navigate the file when you have about 10+ asynchronous requests. It’s a nightmare I don’t even want to have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  THE SOLUTION
&lt;/h2&gt;

&lt;p&gt;The best way to improve the readability of your slice files would be to delegate all your asynchronous requests to a separate file and import them into the slice file to handle each state of the request. &lt;/p&gt;

&lt;p&gt;I like to name this file using ‘thunk’ as a suffix in the same way slice files use 'slice’ as their suffix.&lt;/p&gt;

&lt;p&gt;To demonstrate this, I’ve added a new feature to the app which interacts with the &lt;a href="https://docs.github.com/en/rest"&gt;GitHub API&lt;/a&gt;. Below is the current structure&lt;/p&gt;

&lt;p&gt;features&lt;br&gt;
|_counter&lt;br&gt;
|_github &lt;br&gt;
  |_githubSlice.js&lt;br&gt;
  |_githubThunk.js&lt;/p&gt;

&lt;p&gt;&lt;em&gt;githubThunk.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createAsyncThunk&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// API keys&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;githubClientId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GITHUB_CLIENT_ID&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;githubClientSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GITHUB_CLIENT_SECRET&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAsyncThunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github/searchUsers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.github.com/search/users?q=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;
      client_id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubClientId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;
      client_secret=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubClientSecret&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAsyncThunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github/getUser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.github.com/users/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;? 
      client_id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubClientId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;
      client-secret=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubClientSecret&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUserRepos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAsyncThunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github/getUserRepos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.github.com/users/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/repos?per_page=5&amp;amp;sort=created:asc&amp;amp;
    client_id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubClientId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;
    client-secret=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubClientSecret&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more info on how to use &lt;code&gt;createAsyncThunk&lt;/code&gt;, reference the &lt;a href="https://redux-toolkit.js.org/api/createAsyncThunk"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These asynchronous requests are then imported into the slice file and handled in &lt;code&gt;extraReducers&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;githubSlice.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;searchUsers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getUserRepos&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./githubThunk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;githubSlice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;clearUsers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;extraReducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// searchUsers&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fulfilled&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rejected&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// getUser&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fulfilled&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rejected&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// getUserRepos&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getUserRepos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getUserRepos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fulfilled&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getUserRepos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rejected&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;clearUsers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;githubSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;githubSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I admit the extraReducers property still looks a bit clunky but we’re better off doing it this way. Fortunately, this is similar to the way logic is separated in a normal Redux application with the action and reducer folders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-slice-to-the-store"&gt;
  &lt;/a&gt;
  ADDING SLICE TO THE STORE
&lt;/h2&gt;

&lt;p&gt;Every slice you create must be added to your Redux store so you can gain access to its contents. You can achieve this by adding the github slice to &lt;code&gt;App/store.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../features/counter/counterSlice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;githubReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./features/github/githubSlice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;github&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;githubReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing to take into consideration is how requests are handled in extraReducers. In the sample slice file, &lt;code&gt;counterSlice&lt;/code&gt;, you’ll notice a different syntax is used to handle the requests.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;githubSlice&lt;/code&gt;, I’ve used the map-object notation in &lt;code&gt;extraReducers&lt;/code&gt; to handle my requests mainly because this approach looks tidier and is easier to write.&lt;/p&gt;

&lt;p&gt;The recommended way to handle requests is the builder callback as shown in the sample &lt;code&gt;counterSlice.js&lt;/code&gt; file. This approach is recommended as it has better TypeScript support (and thus, IDE autocomplete even for JavaScript users). This builder notation is also the only way to add matcher reducers and default case reducers to your slice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mutability-and-immutability"&gt;
  &lt;/a&gt;
  MUTABILITY AND IMMUTABILITY
&lt;/h2&gt;

&lt;p&gt;At this point, you may have noticed the contrast in the way state is being modified in RTK compared to how it's done in a normal Redux app or React’s Context API.   &lt;/p&gt;

&lt;p&gt;RTK lets you write simpler immutable update logic using "mutating" syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// RTK&lt;/span&gt;
&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;

&lt;span class="c1"&gt;// Redux&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;RTK doesn’t mutate the state because it uses the &lt;a href="https://github.com/immerjs/immer"&gt;Immer library&lt;/a&gt; internally to ensure your state isn’t mutated. Immer detects changes to a “draft state” and produces a brand new immutable state based on your changes.&lt;/p&gt;

&lt;p&gt;With this, we can avoid the traditional method of making a copy of the state first before modifying that copy to add new data. Learn more about writing immutable code with Immer &lt;a href="https://redux-toolkit.js.org/usage/immer-reducers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dispatching-actions-in-components"&gt;
  &lt;/a&gt;
  DISPATCHING ACTIONS IN COMPONENTS
&lt;/h2&gt;

&lt;p&gt;With the aid of two important hooks; &lt;code&gt;useSelector&lt;/code&gt; and &lt;code&gt;useDispatch&lt;/code&gt; from another library called &lt;code&gt;react-redux&lt;/code&gt;, you will be able to dispatch the actions you’ve created in your slice file from any component.&lt;/p&gt;

&lt;p&gt;Install react-redux with this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i react-redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can make use of the &lt;code&gt;useDispatch&lt;/code&gt; hook to dispatch actions to the store&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Search.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;searchUsers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../redux/features/github/githubThunk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Search Users...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Search&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Search&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the request is fulfilled, your Redux store gets populated with data&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-zr99Lk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4ECA4CB2EB28A6EA76B8AB93C85C38D76BE8CB04C97DF7856089D49E3BEADA23_1622199836943_populated%2Bredux%2Bstore.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-zr99Lk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4ECA4CB2EB28A6EA76B8AB93C85C38D76BE8CB04C97DF7856089D49E3BEADA23_1622199836943_populated%2Bredux%2Bstore.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h2&gt;

&lt;p&gt;Redux Toolkit is undeniably an awesome library. With all the measures they took and how simple it is to use, it shows how focused it is on developer experience and I honestly believe RTK should be the only way Redux is written. &lt;/p&gt;

&lt;p&gt;RTK also hasn’t stopped here. Their team has gone further to make RTK Query, a library built to facilitate caching and fetching data in Redux applications.  It's only a matter of time before RTK becomes the status quo for writing Redux.&lt;/p&gt;

&lt;p&gt;What do you think about this approach and RTK in general? I’d be happy to receive some feedback! 😄&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why to use useContext?</title>
      <author>Aastha Pandey</author>
      <pubDate>Mon, 31 May 2021 20:15:12 +0000</pubDate>
      <link>https://dev.to/aasthapandey/why-to-use-usecontext-442m</link>
      <guid>https://dev.to/aasthapandey/why-to-use-usecontext-442m</guid>
      <description>&lt;p&gt;What made me use &lt;strong&gt;useContext&lt;/strong&gt;? What would one normally do if they want to pass data down the tree to some component, they will achieve this by passing the data as &lt;em&gt;props&lt;/em&gt; to the child components, I did the same thing until I got to know about &lt;em&gt;useContext&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What if one wants to pass the &lt;em&gt;count&lt;/em&gt; to the last child component in the tree, like in the below code from &lt;em&gt;App&lt;/em&gt; component(Parent Component) to &lt;em&gt;About&lt;/em&gt; component(Last Child Component).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without using useContext&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Home.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./About&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Home&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//About.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;About&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;With useContext&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we are using &lt;em&gt;useContext&lt;/em&gt; we don't need to pass data to &lt;em&gt;Home&lt;/em&gt; component in order to make it available to &lt;em&gt;About&lt;/em&gt; component and we can use the &lt;em&gt;count&lt;/em&gt; in any component which comes down the tree and is child of that component which is enclosed in &lt;em&gt;Provider component&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//App.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CountContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CountContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; 
          &lt;span class="nx"&gt;count&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CountContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Home.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./About&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Home&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CountContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CountContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code won't do anything it'll just display a count on the screen that is 0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;Context should be used to pass those data, which one wants to be displayed on every screen or common for all the pages like user name, theme, number of items in some cart etc.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>womenintech</category>
    </item>
    <item>
      <title>How to rate limit a login route in Express using node-rate-limiter-flexible and Redis</title>
      <author>Matt</author>
      <pubDate>Mon, 31 May 2021 20:09:37 +0000</pubDate>
      <link>https://dev.to/mattdclarke/how-to-rate-limit-a-login-route-in-express-using-node-rate-limiter-flexible-and-redis-1i1k</link>
      <guid>https://dev.to/mattdclarke/how-to-rate-limit-a-login-route-in-express-using-node-rate-limiter-flexible-and-redis-1i1k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Rate limiting is a method used for controlling network traffic. It limits the number of actions a user can make per unit of time &lt;sup&gt;&lt;a href="https://www.cloudflare.com/learning/bots/what-is-rate-limiting/"&gt;1&lt;/a&gt;&lt;/sup&gt;. In this tutorial, we will rate limit a login route to help protect it from &lt;a href="https://www.kaspersky.com/resource-center/definitions/brute-force-attack"&gt;brute force attacks&lt;/a&gt;. This limits the number of password guesses that can be made by an attacker. We'll use the npm package &lt;a href="https://www.npmjs.com/package/rate-limiter-flexible"&gt;node-rate-limiter-flexible&lt;/a&gt; to count and limit the number of login attempts by key. Each key will have a points value that will count the number of failed login attempts. The keys will expire after a set amount of time. The key-value pairs will be stored in &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;, which is an open-source in-memory data structure store. It has many different use cases. We will use it as a simple database. Redis is simple to use and it is very fast. We'll create an online instance of Redis, connect it to an express application, and then use the Redis command-line interface (redis-cli) to view the database. A prerequisite for this tutorial is an ExpressJS application with a login route and user authentication. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lRE6WQph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0duyg6kymp7yu4g0jz2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lRE6WQph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0duyg6kymp7yu4g0jz2i.png" alt="Overview of tutorial: Express application with rate limiting on the login route."&gt;&lt;/a&gt;&lt;/p&gt;
Express application with rate limiting on the login route. The key for a particular user stores the number of failed logins. If the number of failed logins exceeds the set maximum number of failed logins, then the route will be blocked. The keys expire after a set amount of time.

  

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We will use two types of keys to count the number of failed logins. One will be a string made using the user's IP address. The other will be a string made by joining the user's email address and IP address. When a user attempts to log in, if the user exists and the password is not correct, the two keys will be created for the user. &lt;/p&gt;

&lt;p&gt;For example, the keys stored in Redis may look like this after a failed login attempt where the password was incorrect:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;key 1:&lt;/strong&gt; &lt;code&gt;"login_fail_ip-192.168.1.1" : 1&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;key 2:&lt;/strong&gt; &lt;code&gt;"login_fail_username_and_ip-example@example.com_192.168.1.1" : 1&lt;/code&gt; &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Express app with login route and login authentication (login with username or email)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Registered users stored in a database&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#set-up-the-ratelimiting-middleware"&gt;
  &lt;/a&gt;
  Set up the rate-limiting middleware
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#middleware-used-that-is-not-necessary-for-ratelimiting"&gt;
  &lt;/a&gt;
  Middleware used that is not necessary for rate-limiting
&lt;/h3&gt;

&lt;p&gt;This example is from an Express application that uses MongoDB as a database to store the users' data. The following libraries, which will be used in this example, are not necessarily required to set up login rate limiting. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.passportjs.org/"&gt;passport&lt;/a&gt; -  authentication middleware&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original"&gt;util.promisify()&lt;/a&gt; - a method defined in the utilities module of the Node.js standard library. It converts methods that return responses using a callback function to instead return responses in a promise object. The syntax is much cleaner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/connect-flash"&gt;connect-flash&lt;/a&gt; - middleware for flash messages notifying a user if the login was successful or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Submitted data on the &lt;code&gt;request.body&lt;/code&gt; is parsed as a JSON object by the built-in middleware function in Express: &lt;code&gt;Express.json()&lt;/code&gt;. The data is stored in JSON format as it is a commonly used, organized, and easily accessible text-based format &lt;sup&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON"&gt;2&lt;/a&gt;&lt;/sup&gt;.  &lt;/p&gt;

&lt;p&gt;These were added as application-level middleware in &lt;code&gt;app.js&lt;/code&gt; using &lt;code&gt;app.use()&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ratelimiting-middleware"&gt;
  &lt;/a&gt;
  Rate-limiting middleware
&lt;/h3&gt;

&lt;p&gt;The rate-limiting middleware used is a modification of the &lt;a href="https://www.npmjs.com/package/rate-limiter-flexible"&gt;node-rate-limiter-flexible&lt;/a&gt; library example of how to protect a &lt;a href="https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#login-endpoint-protection"&gt;login endpoint&lt;/a&gt;.  This rate-limiting middleware is written for an Express application using a Redis store, but the same idea can be applied to rate-limiting middleware with other Node.js frameworks such as Koa, Hapi, and Nest or a pure NodeJS application &lt;sup&gt;&lt;a href="https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#login-endpoint-protection"&gt;3&lt;/a&gt;&lt;/sup&gt;. We'll create 2 rate limiters. The first blocks the login route, for one hour, after 10 consecutive failed login attempts.  The failed login counts are reset after a successful login.  Rate limiting is based on the user's email address and IP address. The second blocks the login route, for one day, after 100 failed login attempts. Rate limiting is based on the user's IP address. After this middleware is set up, we will set up the Redis database.&lt;/p&gt;

&lt;p&gt;You can simply rate limit based on IP address only, the problem with this is that IP addresses are not always unique &lt;sup&gt;&lt;a href="https://en.wikipedia.org/wiki/Network_address_translation"&gt;4&lt;/a&gt;&lt;/sup&gt;. A user in a network that shares a public IP address could block other users in that network. If you limit based on email address only, then a malicious user could block someone's access to the application by simply sending many requests to log in. Blocking by email address and IP address adds some flexibility. A user may be blocked using one IP address but could try login from another device. It is important to note that most devices use a dynamic IP address that changes over time and that IP addresses can be modified &lt;sup&gt;&lt;a href="https://support.google.com/fiber/answer/3547208?hl=en&amp;lt;/sup"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;, &lt;/sup&gt;&lt;sup&gt;&lt;a href="https://www.cloudflare.com/learning/ddos/glossary/ip-spoofing"&gt;6&lt;/a&gt;&lt;/sup&gt;.  Rate-limiting aims to minimize brute force attacks to guess a user's password. When rate limiting, user experience also needs to be considered. Being too strict by blocking users after only a few attempts is not good for the user experience. You need to make a trade-off between security and user experience.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#npm-packages-required-for-redis-connection-and-ratelimiting"&gt;
  &lt;/a&gt;
  npm packages required for Redis connection and rate-limiting
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.npmjs.com/package/redis"&gt;redis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.npmjs.com/package/rate-limiter-flexible"&gt;node-rate-limiter-flexible&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#rate-limit-controller"&gt;
  &lt;/a&gt;
  Rate limit controller
&lt;/h4&gt;

&lt;p&gt;Create a file for the rate-limiting middleware. For example, &lt;code&gt;rateLimitController.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/routes"&gt;controller&lt;/a&gt; that will handle the login route POST request, a connection to Redis will be set up. Then a rate limiter instance that counts and limits the number of failed logins by key will be set up. The &lt;code&gt;storeClient&lt;/code&gt; property of the rate limiter instance will link the rate limiter instance to a Redis database (redisClient) that will be set up later. A points property on the rate limiter instance determines how many login attempts can be made. Keys are created on the instance by using the IP address of the login request or the IP address and email address. When a user fails to log in, points are consumed. This means the count for the key increases. When this count exceeds the points property value, which is the maximum number of failed login attempts allowed, then a message is sent to the user that states that too many login attempts have been made. The keys only exist for a defined amount of time, after this time the rate-limiting is reset. A variable, retrySecs, will be created to determine when a user can try to log in again. The time remaining until another login can be attempted is determined by using the &lt;code&gt;msBeforeNext()&lt;/code&gt; method on the rate limiter instance. &lt;/p&gt;

&lt;p&gt;If the login route is not being rate-limited, then we will authenticate the user. In this tutorial, &lt;a href="http://www.passportjs.org/"&gt;Passport&lt;/a&gt; is used. If the authentication fails and the user's email exists, then a point will be consumed from each rate limiter instance. If authentication is successful the key for the current user, based on IP address and email address, will be deleted and the user will be logged in. A login session is established using the Passport.js method &lt;code&gt;logIn()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RateLimiterRedis&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rate-limiter-flexible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;passport&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// create a Redis client - connect to Redis (will be done later in this tutorial)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;enable_offline_queue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// if no connection, an error will be emitted&lt;/span&gt;
&lt;span class="c1"&gt;// handle connection errors&lt;/span&gt;
&lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// this error is handled by an error handling function that will be explained later in this tutorial&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxWrongAttemptsByIPperDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxConsecutiveFailsByEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="c1"&gt;// the rate limiter instance counts and limits the number of failed logins by key&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiterSlowBruteByIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RateLimiterRedis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;storeClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;keyPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login_fail_ip_per_day&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// maximum number of failed logins allowed. 1 fail = 1 point&lt;/span&gt;
  &lt;span class="c1"&gt;// each failed login consumes a point&lt;/span&gt;
  &lt;span class="na"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;maxWrongAttemptsByIPperDay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// delete key after 24 hours&lt;/span&gt;
  &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// number of seconds to block route if consumed points &amp;gt; points&lt;/span&gt;
  &lt;span class="na"&gt;blockDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="c1"&gt;// Block for 1 day, if 100 wrong attempts per day&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiterConsecutiveFailsByEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RateLimiterRedis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;storeClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;keyPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login_fail_consecutive_email_and_ip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;maxConsecutiveFailsByEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Delete key after 1 hour&lt;/span&gt;
  &lt;span class="na"&gt;blockDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="c1"&gt;// Block for 1 hour&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// create key string&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getEmailIPkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// rate-limiting middleware controller&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loginRouteRateLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ipAddr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emailIPkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getEmailIPkey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ipAddr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// get keys for attempted login&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resSlowByIP&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;limiterConsecutiveFailsByEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailIPkey&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;limiterSlowBruteByIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipAddr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;retrySecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Check if IP or email + IP is already blocked&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;resSlowByIP&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class="nx"&gt;resSlowByIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consumedPoints&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;maxWrongAttemptsByIPperDay&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;retrySecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resSlowByIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msBeforeNext&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consumedPoints&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;maxConsecutiveFailsByEmailAndIP&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;retrySecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msBeforeNext&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// the IP and email + ip are not rate limited  &lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;retrySecs&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// sets the response’s HTTP header field&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Retry-After&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;retrySecs&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;429&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Too many requests. Retry after &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;retrySecs&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; seconds.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;passport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Consume 1 point from limiters on wrong attempt and block if limits reached&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promises&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;limiterSlowBruteByIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipAddr&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
          &lt;span class="c1"&gt;// check if user exists by checking if authentication failed because of an incorrect password&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IncorrectPasswordError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;failed login: not authorized&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// Count failed attempts by Email + IP only for registered users&lt;/span&gt;
            &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="nx"&gt;limiterConsecutiveFailsByEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailIPkey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="c1"&gt;// if user does not exist (not registered)&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IncorrectUsernameError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;failed login: user does not exist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email or password is wrong.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rlRejected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rlRejected&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;rlRejected&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeOut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
              &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rlRejected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msBeforeNext&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Retry-After&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timeOut&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;429&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Too many login attempts. Retry after &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;timeOut&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; seconds`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;// If passport authentication successful&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;successful login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consumedPoints&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Reset limiter based on IP + email on successful authorisation&lt;/span&gt;
          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;limiterConsecutiveFailsByEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailIPkey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// login (Passport.js method)&lt;/span&gt;
        &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#extra-notes"&gt;
  &lt;/a&gt;
  Extra notes
&lt;/h5&gt;

&lt;p&gt;Within the RedisClient, the property &lt;code&gt;enable_offline_queue&lt;/code&gt; is set to false. This is done to prevent issues such as slowing down servers if many requests are queued due to a Redis connection failure. The author of node-rate-limiter-flexible recommends this setting unless you have reasons to change it &lt;sup&gt;&lt;a href="https://github.com/animir/node-rate-limiter-flexible/issues/37"&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;req.ip&lt;/code&gt; contains the remote IP address of the request &lt;sup&gt;&lt;a href="https://expressjs.com/en/api.html#req.ip"&gt;8&lt;/a&gt;&lt;/sup&gt;.  If you are using the Express app behind a &lt;a href="https://www.cloudflare.com/learning/cdn/glossary/reverse-proxy/"&gt;reverse proxy&lt;/a&gt;, such as Cloudflare CDN, then you should set the Express apps trust proxy setting to true and provide the IP address, subnet, or an array of these that can be trusted as a reverse proxy. If you do not do this, the value of &lt;code&gt;req.ip&lt;/code&gt;  will be the IP address of the reverse proxy &lt;sup&gt;&lt;a href="http://expressjs.com/en/guide/behind-proxies.html"&gt;9&lt;/a&gt;&lt;/sup&gt;.  Also note that running your application locally during development, &lt;code&gt;req.ip&lt;/code&gt; will return 127.0.0.1 if you are using IPv4 or ::1, ::fff:127.0.0.1 if you are using IPv6 &lt;sup&gt;&lt;a href="https://www.npmjs.com/package/request-ip"&gt;10&lt;/a&gt;&lt;/sup&gt;.  These describe the local computer address.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;index.js&lt;/code&gt;, the file with all of your routes. The following route is defined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;catchErrors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rateLimitController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loginRouteRateLimit&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;catchErrors&lt;/code&gt; is an error handling function that is used to catch any async-await errors in the controller. This error handling method is from the Wes Bos course &lt;a href="https://learnnode.com/"&gt;Learn Node&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The errors for a Redis connection failure are handled as follows: Node Redis returns a &lt;code&gt;NR_CLOSED&lt;/code&gt; error code if the client's connection dropped. &lt;code&gt;ECONNRESET&lt;/code&gt; is a connection error. You can also set up a retry strategy for Node Redis to try and reconnect if the connection fails &lt;sup&gt;&lt;a href="https://github.com/NodeRedis/node-redis#options-object-properties"&gt;11&lt;/a&gt;&lt;/sup&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NR_CLOSED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ECONNRESET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;There was a connection error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;back&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-redis"&gt;
  &lt;/a&gt;
  Set up Redis
&lt;/h2&gt;

&lt;p&gt;The code above will not work yet as there is no Redis database set up. We will create a Redis database in the cloud using &lt;a href="https://redislabs.com/"&gt;Redis Labs&lt;/a&gt;. We will use the free plan. Then we will connect to this database through our Express app. To view the database, we will download Redis locally so that we can use the built-in client redis-cli (command-line interface). We will download and use Redis using Windows Subsystem for Linux (WSL), which allows you to use a Linux terminal in Windows. Other methods are described on the &lt;a href="https://redis.io/download"&gt;Redis website download page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-account-with-redis-labs"&gt;
  &lt;/a&gt;
  Create an account with Redis Labs
&lt;/h3&gt;

&lt;p&gt;Create an account on the &lt;a href="https://redislabs.com/try-free/"&gt;Redis Labs website&lt;/a&gt;. Follow the instructions in the documentation to learn how to &lt;a href="https://docs.redislabs.com/latest/rc/rc-quickstart/"&gt;create a database&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-the-redis-instance-on-redis-labs-with-your-express-application"&gt;
  &lt;/a&gt;
  Connect the Redis instance on Redis Labs with your Express application
&lt;/h3&gt;

&lt;p&gt;In your express application &lt;code&gt;variables.env&lt;/code&gt; add the REDIS_URL:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;REDIS_URL=redis://&amp;lt;password&amp;gt;@&amp;lt;Endpoint&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your Endpoint and password can be found in the database in the &lt;strong&gt;Configuration&lt;/strong&gt; details of the &lt;strong&gt;View Database&lt;/strong&gt; screen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Endpoint&lt;/strong&gt; setting shows the URL for your database and the port number.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Access Control &amp;amp; Security&lt;/strong&gt; setting shows the password. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the rate limit controller from the previous section, the following code connects the cloud Redis instance, hosted on Redis Labs, to the Express application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// if no connection, an error will be emitted&lt;/span&gt;
  &lt;span class="na"&gt;enable_offline_queue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rate limiter instances connect to the  cloud Redis instance as follows (also from the rate limit controller):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiterSlowBruteByIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RateLimiterRedis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;storeClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiterConsecutiveFailsByUsernameAndIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RateLimiterRedis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;storeClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#set-up-wsl-and-download-redis"&gt;
  &lt;/a&gt;
  Set up WSL and download Redis
&lt;/h3&gt;

&lt;p&gt;You will be able to rate limit your login route now, the next step is to set up Redis locally so that we can view the Redis database using the Redis command-line interface (redis-cli). Redis works best with Linux. Linux and OS X are the two operating systems where Redis is developed and tested the most. Linux is recommended for deployment &lt;sup&gt;&lt;a href="https://redis.io/topics/introduction"&gt;12&lt;/a&gt;, &lt;a href="https://medium.com/@RedisLabs/windows-subsystem-for-linux-wsl-10e3ca4d434e"&gt;13&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;

&lt;p&gt;You can follow &lt;a href="https://medium.com/@RedisLabs/windows-subsystem-for-linux-wsl-10e3ca4d434e"&gt;this article&lt;/a&gt; on how to set up WSL, download and install a supported Linux distro and install Redis locally. Install Redis somewhere outside of your application. The Linux distro used in this tutorial is Ubuntu 18.04.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-the-rediscli-to-the-redis-instance-on-redis-labs"&gt;
  &lt;/a&gt;
  Connect the redis-cli to the Redis instance on Redis Labs
&lt;/h3&gt;

&lt;p&gt;We will use the redis-cli locally to see the key-value pairs created. Run your Express application and in a WSL terminal run the redis-cli:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cd into the Redis folder that you downloaded&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;cd redis-6.2.3&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;make sure the server is running&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sudo service redis-server start&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;to stop the server: &lt;code&gt;sudo service redis-server stop&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you run &lt;code&gt;redis-cli&lt;/code&gt;, you will connect to the local instance of Redis and will run locally on the Localhost (127.0.0.1:6379). To exit, run &lt;code&gt;quit&lt;/code&gt;. To connect the redis-cli to the cloud instance of the Redis Labs database that we created, we'll use the URL-based connection method from the &lt;a href="https://docs.redislabs.com/latest/rs/administering/creating-databases/"&gt;Redis Labs docs&lt;/a&gt;. This connects to the Redis database using an endpoint URL and port number. Check the database &lt;strong&gt;Configuration&lt;/strong&gt; details in the &lt;strong&gt;View Database&lt;/strong&gt; screen to find the endpoint url and password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ redis-cli -h redis-19836.c9.us-east-1-2.ec2.cloud.redislabs.com
-p 19836 -a astrongpassword
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;h is the host: add your endpoint, without the port number&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p is the port, which is shown at the end of the endpoint url&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a is access control. Add your password&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can test if the connection worked by typing &lt;code&gt;PING&lt;/code&gt;. If the connection worked redis-cli will return &lt;code&gt;PONG&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;if the response is &lt;code&gt;NOAUTH Authentication required&lt;/code&gt; - check that you typed the password correctly. You can run &lt;code&gt;quit&lt;/code&gt; to exit the redis-cli so that you can try again.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-redis-commands"&gt;
  &lt;/a&gt;
  Basic Redis commands
&lt;/h3&gt;

&lt;p&gt;There are many &lt;a href="https://redis.io/commands"&gt;commands&lt;/a&gt; available as shown in the docs. For our use case, we only need to know a few simple commands. You can try them in the redis-cli that is connected to your Redis Labs Redis instance. Note that the commands are all uppercase in the Redis docs, but the commands are not case-sensitive. However, key names are case-sensitive.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ping"&gt;
  &lt;/a&gt;
  PING
&lt;/h4&gt;

&lt;p&gt;Checks the connection to the Redis database. If there is a connection, &lt;code&gt;PONG&lt;/code&gt; will be returned.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#set"&gt;
  &lt;/a&gt;
  SET
&lt;/h4&gt;

&lt;p&gt;Set the string value of a key. It is used to create a key-value pair or change the value of an existing key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; SET job teacher
OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This sets the key "job" to the value "teacher". The response &lt;code&gt;OK&lt;/code&gt; means that the command was successful.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mset"&gt;
  &lt;/a&gt;
  MSET
&lt;/h4&gt;

&lt;p&gt;Like SET, but its sets the values of multiple keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; MSET job "teacher" AGE "50" TITLE "Mr."
OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#get"&gt;
  &lt;/a&gt;
  GET
&lt;/h4&gt;

&lt;p&gt;Get the value for a key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; GET job
"teacher"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mget"&gt;
  &lt;/a&gt;
  MGET
&lt;/h4&gt;

&lt;p&gt;Get the value of multiple keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; MGET job age title
1) "teacher"
2) "50"
3) "Mr."
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#del"&gt;
  &lt;/a&gt;
  DEL
&lt;/h4&gt;

&lt;p&gt;Deletes a specific key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; DEL job
(integer) 1 -&amp;gt; this means that it found a key with the name "job" and deleted it. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you try :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; GET job
(nil) -&amp;gt; this means that no key with the name "job" exists.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#scan"&gt;
  &lt;/a&gt;
  SCAN
&lt;/h4&gt;

&lt;p&gt;View all keys. It iterates over a collection of keys. It is a cursor-based iterator. If you want to view all entries then run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; SCAN 0
1) "0"
2) "age"
3) "title"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first value returned is "0", which indicates that a full iteration occurred. This means that all of the keys in the database were scanned. For more details, you can read up the description of the &lt;a href="https://redis.io/commands/scan"&gt;SCAN command&lt;/a&gt; in the docs. &lt;/p&gt;

&lt;p&gt;If you want to view all keys, excluding the first key then run &lt;code&gt;SCAN 1&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flushall"&gt;
  &lt;/a&gt;
  FLUSHALL
&lt;/h4&gt;

&lt;p&gt;This deletes all of the keys in the database.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#clear"&gt;
  &lt;/a&gt;
  CLEAR
&lt;/h4&gt;

&lt;p&gt;Clears the terminal.&lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-the-ratelimiting"&gt;
  &lt;/a&gt;
  Test the rate-limiting
&lt;/h2&gt;

&lt;p&gt;We are going to test one of the rate limiters. Run your application locally and connect to Redis labs via the redis-cli in a WSL terminal. Before starting, make sure all of the keys in your database are deleted by running the command  &lt;code&gt;FLUSHALL&lt;/code&gt;. In your rate limit controller middleware (&lt;code&gt;rateLimitController.js&lt;/code&gt;.), set &lt;code&gt;maxConsecutiveFailsByEmailAndIP&lt;/code&gt; to 3. Set the options &lt;code&gt;duration&lt;/code&gt; and &lt;code&gt;blockDuration&lt;/code&gt;  of &lt;code&gt;limiterConsecutiveFailsByEmailAndIP&lt;/code&gt; to 60. This will allow us to test the rate-limiting quickly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxConsecutiveFailsByEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiterConsecutiveFailsByEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RateLimiterRedis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;storeClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;keyPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login_fail_consecutive_email_and_ip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;maxConsecutiveFailsByEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; 
  &lt;span class="na"&gt;blockDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;  
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#failed-login-with-an-account-that-does-not-exist"&gt;
  &lt;/a&gt;
  Failed login with an account that does not exist
&lt;/h3&gt;

&lt;p&gt;Try login using an email (or another user identifier, such as user name, used in your app) that does not exist (not registered).&lt;/p&gt;

&lt;p&gt;After this, in the redis-cli, that is connected to your cloud Redis instance hosted on Redis Labs, view all of the keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yourRedisLabsEndpoint&amp;gt; SCAN 0
1)"0"
2) "login_fail_ip_per_day:::1"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;On localhost, &lt;code&gt;req.ip&lt;/code&gt; will return 127.0.0.1 if you are using IPv4 or ::1,  ::fff:127.0.0.1 if you are using IPv6.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can now check the number of consumed points (number of failed logins) of the &lt;code&gt;limiterSlowBruteByIP&lt;/code&gt; rate limiter for the IP that tried to log in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yourRedisLabsEndpoint&amp;gt; GET login_fail_ip_per_day:::1
"1"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#failed-login-with-an-account-that-does-exist"&gt;
  &lt;/a&gt;
  Failed login with an account that does exist
&lt;/h3&gt;

&lt;p&gt;Now try log in with an existing account and use the wrong password. Then view all of the keys in your Redis database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yourRedisLabsEndpoint&amp;gt; SCAN 0
1)"0"
2) "login_fail_ip_per_day:::1"
3) "login_fail_consecutive_username_and_ip:realuser@example.com_::1"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now check the number of points consumed for the IP that tried to log in for the &lt;code&gt;limiterSlowBruteByIP&lt;/code&gt; rate limiter key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yourRedisLabsEndpoint&amp;gt; GET login_fail_ip_per_day:::1
"2"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the number of consumed points for the &lt;code&gt;limiterConsecutiveFailsByEmailAndIP&lt;/code&gt; rate limiter key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yourRedisLabsEndpoint&amp;gt; GET login_fail_consecutive_username_and_ip:realuser@example.com_::1
"1"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try logging in more than 3 times within 1 minute. After this, you will get this message displayed in your browser:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Too many requests. Retry after 60 seconds.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The login route for the given IP and username pair will be blocked for 60 seconds. This is because the &lt;code&gt;blockDuration&lt;/code&gt; that we set  for the &lt;code&gt;limiterConsecutiveFailsByEmailAndIP&lt;/code&gt; rate limiter is 60 seconds. After 60 seconds, check the number of consumed points for the key again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yourRedisLabsEndpoint&amp;gt; GET login_fail_ip_per_day:::1
(nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It does not exist anymore as we set the &lt;code&gt;duration&lt;/code&gt; property to 60. The key is deleted after 60 seconds. &lt;/p&gt;

&lt;p&gt;Now try login using an existing account with the wrong password. After this, log in with the correct password. This will delete the &lt;code&gt;limiterConsecutiveFailsByEmailAndIP&lt;/code&gt; rate limiter key for the given user and IP pair. This occurs once the login is successful, as can be seen in the rate limit controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="p"&gt;...&lt;/span&gt; 

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consumedPoints&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Reset on successful authorisation&lt;/span&gt;
          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;limiterConsecutiveFailsByEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailIPkey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can do more thorough testing of POST requests using services such as &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt;, which is a tool used to build and test APIs.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is a basic example of how to rate limit a login route in an Express app using node-rate-limiter-flexible and Redis. node-rate-limiter-flexible was used to count and limit the number of login attempts by key. Redis was used to store the keys. We created a rate limiter middleware in an existing application with a login route and authentication. Two rate limiters were created. The first rate limiter rate-limited based on IP. The second rate-limited based on IP and the user's email address. Redis Labs was set up to create an online instance of Redis. The Redis Labs instance was connected to the Express app using an endpoint URL. Redis was installed locally and was connected to the online instance of Redis. Rate-limiting was tested by viewing the database keys, using the redis-cli, after attempted logins. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are some useful links for further study:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) &lt;a href="https://www.youtube.com/watch?v=Hbt56gFj998"&gt;Redis Crash Course Tutorial&lt;/a&gt; - learn the basics of Redis&lt;/p&gt;

&lt;p&gt;2) &lt;a href="https://www.youtube.com/watch?v=oaJq1mQ3dFI"&gt;Redis Caching in Node.js&lt;/a&gt; - Learn how to cache API calls using Redis.&lt;/p&gt;

&lt;p&gt;3) &lt;a href="https://codeburst.io/api-rate-limiting-with-node-and-redis-95354259c768"&gt;API Rate Limiting  with Node and Redis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) &lt;a href="https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example"&gt;node-rate-limiter-flexible: rate-limiting examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) &lt;a href="https://redis.io/documentation"&gt;Redis documentation&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;6) &lt;a href="https://docs.redislabs.com/latest/"&gt;Redis Labs documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7) &lt;a href="https://www.youtube.com/c/Redislabs"&gt;Redis Labs YouTube channel&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>redis</category>
      <category>security</category>
    </item>
    <item>
      <title>Code-server additional settings</title>
      <author>VivekAsCoder</author>
      <pubDate>Mon, 31 May 2021 20:00:16 +0000</pubDate>
      <link>https://dev.to/vivekascoder/code-server-additional-settings-1c59</link>
      <guid>https://dev.to/vivekascoder/code-server-additional-settings-1c59</guid>
      <description>&lt;h1&gt;
  &lt;a href="#things-that-i-forgot-in-the-video"&gt;
  &lt;/a&gt;
  Things that i forgot in the video.
&lt;/h1&gt;

&lt;p&gt;Here is the link to the vide.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/YEuZPNza5Dg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-thing-to-mention"&gt;
  &lt;/a&gt;
  A quick thing to mention
&lt;/h2&gt;

&lt;p&gt;I forgot to tell you one important thing. You can access your code-server from any &lt;br&gt;
browser without even ssh'ing into your remote server.&lt;/p&gt;

&lt;p&gt;See the image below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ja6rgm6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WxfBhfD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ja6rgm6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WxfBhfD.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You need to change the &lt;code&gt;bind-addr&lt;/code&gt; in your config file which is located at &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Path: &lt;code&gt;~/.config/code-server/config.yaml&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-addr: 0.0.0.0:8000
auth: password
password: SECRET_PASSWORD
cert: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;0.0.0.0&lt;/code&gt; indicates that you can access using your localhost as weel as the public&lt;br&gt;
IP Address of your remote machine.&lt;br&gt;
So basically, it means you can use either &lt;code&gt;localhost:8000&lt;/code&gt; (With port forwarding) or&lt;br&gt;
&lt;code&gt;divcorn.com:8000&lt;/code&gt; (without port forwarding).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-with-raw-localhost-endraw-or-raw-127001-endraw-"&gt;
  &lt;/a&gt;
  Case with &lt;code&gt;localhost&lt;/code&gt; or &lt;code&gt;127.0.0.1&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It basically says that the traffic is only accessible from your local machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-with-raw-0000-endraw-"&gt;
  &lt;/a&gt;
  Case with &lt;code&gt;0.0.0.0&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It basically says that the traffic is accessible from your local machine as well as &lt;br&gt;
public ip address.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-want-to-access-with-raw-divcorncom-endraw-only"&gt;
  &lt;/a&gt;
  I want to access with &lt;code&gt;divcorn.com&lt;/code&gt; only.
&lt;/h2&gt;

&lt;p&gt;That's a good question, you can achieve it from one of the following ways.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-port-80"&gt;
  &lt;/a&gt;
  Using port 80
&lt;/h3&gt;

&lt;p&gt;When we enter the address of a website, our web browser tries to conect to port 80 by default, that means &lt;code&gt;divcorn.com&lt;/code&gt; and &lt;code&gt;divcorn.com:80&lt;/code&gt; are the same.&lt;/p&gt;

&lt;p&gt;Instead of &lt;code&gt;0.0.0.0:8000&lt;/code&gt;, you can use &lt;code&gt;0.0.0.0:80&lt;/code&gt; then run it&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ Make sure to stop other services (if any) which are running on port 80.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#using-reverse-proxy-with-nginx-preferred"&gt;
  &lt;/a&gt;
  Using Reverse Proxy with NginX (Preferred)
&lt;/h3&gt;

&lt;p&gt;Many times you might be using you port 80 for your website hosting (if any).&lt;br&gt;
In those cases we can add a &lt;code&gt;CNAME&lt;/code&gt; record from our domain's DNS management console.&lt;br&gt;
Which is pointing to &lt;code&gt;@&lt;/code&gt; or your public ip address and value will be a string example &lt;br&gt;
&lt;code&gt;code&lt;/code&gt;. Then we can create a nginx config file where we will listen at port 80 from the&lt;br&gt;
url &lt;code&gt;code.divcorn.com&lt;/code&gt; and use the reverse proxy to direct the traffic from port 8000 to&lt;br&gt;
the port 80 with &lt;code&gt;code.divcorn.com&lt;/code&gt; only.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want a video on it, please make sure to tell me.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vscode</category>
      <category>cloudskills</category>
      <category>azureapril</category>
    </item>
    <item>
      <title>Novidades do Java 11</title>
      <author>Bilbo o lixeiro</author>
      <pubDate>Mon, 31 May 2021 19:27:44 +0000</pubDate>
      <link>https://dev.to/bilbolixeiro/novidades-do-java-11-4pj7</link>
      <guid>https://dev.to/bilbolixeiro/novidades-do-java-11-4pj7</guid>
      <description>&lt;p&gt;A nova versão LTS do Java chegou e com ela tivemos algumas mudanças não só a nível de código, mas também de como a Oracle lida com as novas releases; agora, serão lançadas versões a cada 6 meses e a cada 4 anos uma nova versão LTS será lançada. Em setembro deste ano de 2021 será lançada a versão 17 que também será LTS.&lt;/p&gt;

&lt;p&gt;Esse artigo trará algumas informações sobre a versão long-term atual. Bem como novas features e features que foram removidas e performasse.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#porque-escolher-java-11"&gt;
  &lt;/a&gt;
  Porque escolher Java 11?
&lt;/h2&gt;

&lt;p&gt;Apesar de existirem novas versões com várias melhorias, que iremos explorar, o Java 8 ainda continua sendo a versão mais usada, representado 75% dos projetos segundo o dev eco system 2020 do Jetbrains.&lt;/p&gt;

&lt;p&gt;Ao mesmo tempo imagino que aos poucos a tendência é que esse número venha a diminuir aos poucos para uma versão mais nova já que o suporte à versão 8 se encerrou em janeiro do ano de 2019. Em 2019 83% dos projetos ainda utilizavam Java 8 e diminuiu quase 10% em um ano, então porquê não estar preparado pra essa transição?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#novidades"&gt;
  &lt;/a&gt;
  Novidades
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#manipula%C3%A7%C3%A3o-de-strings"&gt;
  &lt;/a&gt;
  Manipulação de Strings
&lt;/h3&gt;

&lt;p&gt;Alguns métodos foram adicionados no tocante a manipulação de Strings como o repeat, strip, stripLeading, stripTrailing, lines e isBlank. Esses métodos vão tornar seu trabalho muito mais rápido sem a necessidade de importar novas bibliotecas.&lt;br&gt;
Dando destaque ao strip que tem o funcionamento similar ao do trim só que ele da suporte ao Unicode:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8-Qzw6N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yye8dxv4qed41gni71ur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8-Qzw6N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yye8dxv4qed41gni71ur.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No caso do trim ele não reconhece o \t como espaço:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aP9wFwry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8knj0ku580dtdvdbjo3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aP9wFwry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8knj0ku580dtdvdbjo3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ainda falando de strings podemos mencionar que foi adicionado o Unicode 10, então agora você consegue utilizar mais tipos de emoji no seu código 🙂.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vari%C3%A1veis-por-infer%C3%AAncia"&gt;
  &lt;/a&gt;
  Variáveis por inferência
&lt;/h3&gt;

&lt;p&gt;Foi incluída uma novidade bem legal no Java 11, que já é utilizada em outras linguagens como o Kotlin. São as variáveis de tipo "genérica", em que seu tipo é definido em tempo de execução.&lt;/p&gt;

&lt;p&gt;Essa implementação foi introduzida na JEP 323, agora podemos definir variáveis apenas com:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2KG4uh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rks4jf7c8ngqgfrp691.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2KG4uh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rks4jf7c8ngqgfrp691.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
E não só isso! Em lambda expressions nós podemos adicionar anotações na entrada da função: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NEWb-045--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erj6z2qra1c47v5pwpa3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NEWb-045--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erj6z2qra1c47v5pwpa3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manipula%C3%A7%C3%A3o-de-arquivos"&gt;
  &lt;/a&gt;
  Manipulação de arquivos
&lt;/h3&gt;

&lt;p&gt;Na nova versão também ficou mais fácil de ler e escrever Strings em arquivos. Foram implementados dois métodos: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;readString()&lt;/li&gt;
&lt;li&gt;writeString()&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#novidades-no-gc"&gt;
  &lt;/a&gt;
  Novidades no GC
&lt;/h3&gt;

&lt;p&gt;Diferente da JVM GC que é responsável por alocar e desalocar memória, o Epsilon consegue apenas alocar memória. Mas aí você pensa: “Mas que inútil, um garbage collector que apenas aloca? Pra que vou usar isso?”. Calma! Essa ferramenta pode ajudar em algumas coisas durante o processo de desenvolvimento como teste de performance.&lt;br&gt;
Tendo apenas compatilibilidade com os sistemas Linux, também temos de novidade o GC experimental de baixa latência, Z Garbage Collector, ZGC, é apresentado, com o objetivo de ter um tempo de pausa máximo de 10 ms. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#http-client"&gt;
  &lt;/a&gt;
  HTTP client
&lt;/h3&gt;

&lt;p&gt;Também foi implementado o HTTP Client API, que suporta não só o HTTP 1.1 mas como também o HTTP 2 e o websocket através do HttpClient, HttpRequest, HttpResponse e o Websocket.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0wT8DsOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hgg7c351xrk5ckpxras.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0wT8DsOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hgg7c351xrk5ckpxras.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flight-recorder"&gt;
  &lt;/a&gt;
  Flight recorder
&lt;/h3&gt;

&lt;p&gt;Em termos de perfiladores de código temos adição de um produto que era comercial e agora tem uma versão open source no Open JDK 11. Essa ferramenta consegue perfilar a aplicação em tempo de execução e guarda os resultados em um arquivo ‘.jfr’.&lt;/p&gt;

</description>
      <category>java11</category>
      <category>java</category>
      <category>jep</category>
      <category>oracle</category>
    </item>
    <item>
      <title>The Correct Way to Overload Functions in Python</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 31 May 2021 18:58:14 +0000</pubDate>
      <link>https://dev.to/martinheinz/the-correct-way-to-overload-functions-in-python-hlm</link>
      <guid>https://dev.to/martinheinz/the-correct-way-to-overload-functions-in-python-hlm</guid>
      <description>&lt;p&gt;Function overloading is a common programming pattern which seems to be reserved to statically-typed, compiled languages. Yet there's an easy way to implement it in Python with help of &lt;em&gt;Multiple Dispatch&lt;/em&gt; or as it's called in Python &lt;em&gt;multimethods&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overloading"&gt;
  &lt;/a&gt;
  Overloading
&lt;/h2&gt;

&lt;p&gt;First things first - you might be asking, how can we implement method overloading in Python when we all know that it's not possible? Well, even though Python is dynamically-typed language and therefore cannot have proper method overloading as that requires the language to be able to discriminate between types at compile-time, we can still implement it in a bit different way that is suitable for dynamically-typed languages.&lt;/p&gt;

&lt;p&gt;This approach is called &lt;em&gt;Multiple Dispatch&lt;/em&gt; or &lt;em&gt;multimethods&lt;/em&gt;, where the interpreter differentiates between multiple implementations of a function/method at runtime based on dynamically determined types. To be more precise, the language uses types of arguments passed to a function during its invocation to dynamically choose which one of the multiple function implementations to use (or dispatch).&lt;/p&gt;

&lt;p&gt;Now you might be thinking: &lt;em&gt;"Do we really need this though? If it can't be implemented normally, maybe we shouldn't use it in Python..."&lt;/em&gt; Yea, valid point, but there are good reasons to want to implement some form of function/method overloading in Python. It's powerful tool that can make code more concise, readable and minimise its complexity. Without multimethods though, the &lt;em&gt;"obvious way"&lt;/em&gt; to do this is using type inspection with &lt;code&gt;isinstance()&lt;/code&gt;. This is very ugly, brittle solution that is closed to extension and I would call it an anti-pattern.&lt;/p&gt;

&lt;p&gt;Besides that, there already is method overloading in Python for operators and methods like &lt;code&gt;len()&lt;/code&gt; or &lt;code&gt;new()&lt;/code&gt; using so-called &lt;em&gt;dunder&lt;/em&gt; or &lt;em&gt;magic&lt;/em&gt; methods (see docs &lt;a href="https://docs.python.org/3/reference/datamodel.html#special-method-names"&gt;here&lt;/a&gt;) and we all use that quite often, so why not use proper overloading for &lt;em&gt;all&lt;/em&gt; the function, right?&lt;/p&gt;

&lt;p&gt;So, now we know that we can kind-of implement overloading in Python, so how exactly do we do that?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#single-dispatch"&gt;
  &lt;/a&gt;
  Single Dispatch
&lt;/h2&gt;

&lt;p&gt;Above we spoke about &lt;em&gt;Multiple Dispatch&lt;/em&gt;, but Python doesn't support this out-of-the box, or in other words &lt;em&gt;Multiple Dispatch&lt;/em&gt; is not a feature of Python standard library. What is available to us however, is called &lt;em&gt;Single Dispatch&lt;/em&gt;, so let's begin with this simpler case first.&lt;/p&gt;

&lt;p&gt;The only actual difference between &lt;em&gt;multi&lt;/em&gt; and &lt;em&gt;single&lt;/em&gt; dispatch is number of arguments which we can overload. So, for this implementation in standard library it's just one.&lt;/p&gt;

&lt;p&gt;The function (and decorator) that provides this feature is called &lt;code&gt;singledispatch&lt;/code&gt; and can be found in &lt;code&gt;functools&lt;/code&gt; &lt;a href="https://docs.python.org/3/library/functools.html#functools.singledispatch"&gt;module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This whole concept is best explained with some examples. There are many &lt;em&gt;"academic"&lt;/em&gt; examples of overloading functions (geometric shapes, addition, subtraction...) that we've probably all seen already. Rather than going over that, let's see some practical examples. So, here's first example for &lt;code&gt;singledispatch&lt;/code&gt; to format dates, times and datetimes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;singledispatch&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;singledispatch&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"today"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# today
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# 26-5-2021
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# 26-5-2021 17:25:10
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# 19:22:15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We begin by defining the base &lt;code&gt;format&lt;/code&gt; function that is going to be overloaded. This function is decorated with &lt;code&gt;@singledispatch&lt;/code&gt; and provides base implementation, which is used if no better options is available. Next, we define individual functions for each type that we want to overload - in this case &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;time&lt;/code&gt; - each of these have name &lt;code&gt;_&lt;/code&gt; (underscore) because they will be called (dispatched) through the &lt;code&gt;format&lt;/code&gt; method anyway, so no need to give them useful names. Each of them is also decorated with &lt;code&gt;@format.register&lt;/code&gt; which attaches them to the previously mentioned &lt;code&gt;format&lt;/code&gt; function. Then, to make it possible to differentiate between types, we have two options - we can use type annotations - as demonstrated in first two cases or explicitly add the type to decorator as with the last one from the example.&lt;/p&gt;

&lt;p&gt;In some cases it might make sense to use same implementation for multiple types - for example for number types such as &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; - for these situations decorator stacking is allowed, meaning that you can list (stack) multiple &lt;code&gt;@format.register(type)&lt;/code&gt; lines to associate a function with all the valid types.   &lt;/p&gt;

&lt;p&gt;Besides ability to overload basic functions, &lt;code&gt;functools&lt;/code&gt; module contains also &lt;a href="https://docs.python.org/3/library/functools.html#functools.singledispatchmethod"&gt;&lt;code&gt;singledispatchmethod&lt;/code&gt;&lt;/a&gt; that can be applied to methods of a class. Example of that could be the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;singledispatchmethod&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;singledispatchmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Cannot format value of type &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# 26-5-2021
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# 19:22:15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#multiple-dispatch"&gt;
  &lt;/a&gt;
  Multiple Dispatch
&lt;/h2&gt;

&lt;p&gt;Oftentimes &lt;em&gt;Single Dispatch&lt;/em&gt; won't be sufficient and you might need the proper &lt;em&gt;Multiple Dispatch&lt;/em&gt; functionality. This is available from &lt;code&gt;multipledispatch&lt;/code&gt; module which can be found &lt;a href="https://pypi.org/project/multipledispatch/"&gt;here&lt;/a&gt; and can be installed with &lt;code&gt;pip install multipledispatch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This module and it's decorator - &lt;code&gt;@dispatch&lt;/code&gt;, behaves very similarly to the &lt;code&gt;@singledispatch&lt;/code&gt; in the standard library. Only actual difference is that it can take multiple types as arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multipledispatch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dispatch&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# ['a', 'b', 'c']
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# HelloWorld
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# a1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above snippet shows how we can use &lt;code&gt;@dispatch&lt;/code&gt; decorator to overload multiple arguments, for example to implement concatenation of various types. As you probably noticed, with &lt;code&gt;multipledispatch&lt;/code&gt; library we didn't need to define and register base function, rather we created multiple functions with same name. If we wanted to provide base implementation, we could use &lt;code&gt;@dispatch(object, object)&lt;/code&gt; which would catch any non-specific argument types.&lt;/p&gt;

&lt;p&gt;The previous examples shows proof-of-concept, but if we wanted to really implement such &lt;code&gt;concatenate&lt;/code&gt; function, we would need to make it much more generic. This can be solved with use of union types. In this specific example we could change the first function as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# ['a', 'b', 'c']
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# ['a', 'b', 1]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would make it so that first argument of the function could be any of &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt;, while second one would be &lt;code&gt;str&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt;. This is already much better than the previous solution, but it can be further improved using abstract types. Instead of listing all the possible sequences, we can use &lt;code&gt;Sequence&lt;/code&gt; abstract type (assuming that our implementation can handle it) which covers things like &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt; or &lt;code&gt;range&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections.abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to take this approach, then it's good to take a look at &lt;code&gt;collections.abc&lt;/code&gt; module and see which container data-type best suits your needs. Mostly to make sure that your function will be able to handle all the types that fall into the chosen container.&lt;/p&gt;

&lt;p&gt;All this mixing and matching of argument types is convenient, but can also cause ambiguities when choosing suitable function for some specific set of parameters. Fortunately, &lt;code&gt;multipledispatch&lt;/code&gt; provides &lt;code&gt;AmbiguityWarning&lt;/code&gt; which is raised if ambiguous behaviour is possible:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;test_multipledispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AmbiguityWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Ambiguities&lt;/span&gt; &lt;span class="n"&gt;exist&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dispatched&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;some_func&lt;/span&gt;

&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;signatures&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ambiguous&lt;/span&gt; &lt;span class="n"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="n"&gt;Consider&lt;/span&gt; &lt;span class="n"&gt;making&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;additions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_func&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;In this article we went over a simple, yet powerful concept which I rarely see being used in Python, which is a shame considering that it can greatly improve code readability and get rid of anti-patters like type inspection using &lt;code&gt;isinstance()&lt;/code&gt;. Also, I hope you would agree that this approach to function overloading should be considered the &lt;em&gt;"obvious way"&lt;/em&gt; and I hope that you will make use of it when needed.&lt;/p&gt;

&lt;p&gt;If you want to dive deeper into this topic and get your hands dirty you can implement multimethods yourselves as shown in &lt;a href="https://www.artima.com/weblogs/viewpost.jsp?thread=101605"&gt;Guido's article&lt;/a&gt; - this can be a good exercise to understand how multiple dispatch actually works.&lt;/p&gt;

&lt;p&gt;Finally, I should also probably mention that this article omits examples of the well-known &lt;a href="https://docs.python.org/3/reference/datamodel.html#basic-customization"&gt;operator overloading&lt;/a&gt; which I mentioned in the beginning as well as some approaches for overloading constructors for example using &lt;a href="https://stackoverflow.com/a/141777"&gt;factories&lt;/a&gt;. So, in case that's what you're looking for, go check out these links/resources, which give good overview on there topics.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Line by line explanation of Ruby 3 Ractor - worker pool implementation</title>
      <author>Yuta Miyama</author>
      <pubDate>Mon, 31 May 2021 18:02:17 +0000</pubDate>
      <link>https://dev.to/kenzan100/let-s-read-worker-pool-implementation-using-ruby-3-ractor-feature-103g</link>
      <guid>https://dev.to/kenzan100/let-s-read-worker-pool-implementation-using-ruby-3-ractor-feature-103g</guid>
      <description>&lt;p&gt;Ruby 3 has an exciting update about its concurrency support: Ractors.&lt;/p&gt;

&lt;p&gt;First, please read &lt;a href="https://github.com/ruby/ruby/blob/master/doc/ractor.md"&gt;https://github.com/ruby/ruby/blob/master/doc/ractor.md&lt;/a&gt; for "What it is" and "What it can do".&lt;/p&gt;

&lt;p&gt;If you're trying to achieve some sort of concurrent programming and ❤️ Ruby language, you should definitely give it a try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#worker-pools-implementation-in-ractor"&gt;
  &lt;/a&gt;
  Worker pool's implementation in Ractor
&lt;/h2&gt;

&lt;p&gt;Below's the copy of the code explained in Ractor's official documentation. It's slightly modified to provide more granular explanation on its behaviour.&lt;/p&gt;

&lt;p&gt;I've also annotated the code heavily, so that you can read the intent of each line with me.&lt;/p&gt;

&lt;p&gt;Let's decipher this line by line, so that you can properly assess what you can do with Ractor.&lt;/p&gt;

&lt;p&gt;For the basic API of Ractor, please refer to &lt;a href="https://ruby-doc.org/core-3.0.0/Ractor.html"&gt;https://ruby-doc.org/core-3.0.0/Ractor.html&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-with-linebyline-explanation"&gt;
  &lt;/a&gt;
  Code with line-by-line explanation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This example computes if the given numbers is a prime number or not, using 10 parallel workers. &lt;/span&gt;

&lt;span class="c1"&gt;# to make `num.prime?` possible.&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'prime'&lt;/span&gt;

&lt;span class="c1"&gt;# this ractor will keep listening to the sent messages, and yield them to whomever want to take the value.&lt;/span&gt;
&lt;span class="n"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Ractor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;Ractor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;yield&lt;/span&gt; &lt;span class="no"&gt;Ractor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;receive&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Let's check the prime numbers from 1 upto 1000&lt;/span&gt;
&lt;span class="no"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;span class="c1"&gt;# we'll use 10 workers to do this work.&lt;/span&gt;
&lt;span class="no"&gt;RN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="c1"&gt;# worker ractors initialization.&lt;/span&gt;
&lt;span class="c1"&gt;# each worker ractor takes pipe as its sharable object (Ractor has some synchronization mechanism according to [this doc](https://github.com/ruby/ruby/blob/master/doc/ractor.md#shareable-objects)) &lt;/span&gt;
&lt;span class="c1"&gt;# then, each worker Ractor reads the input through the pipe (multiplexing) to utilize 10 workers&lt;/span&gt;
&lt;span class="n"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="no"&gt;RN&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="no"&gt;Ractor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# Ractor#take is a blocking call, and waits till pipe yields something&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;take&lt;/span&gt;
      &lt;span class="c1"&gt;# Worker, then in turn, computes something (expensive :) and yields to whomever willing to listen to this ractor&lt;/span&gt;
      &lt;span class="no"&gt;Ractor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"worker #&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;prime?&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# sending 1000 numbers to the pipe, worker ractors are ready to consume by now.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# main process (main process itself is a running Ractor) calls&lt;/span&gt;
&lt;span class="c1"&gt;# Ractor#select, which can listen to a list of ractors&lt;/span&gt;
&lt;span class="c1"&gt;# because it's called (1..N) times, it'll hit all of the computed values by the time pp prints them.&lt;/span&gt;
&lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;_r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Ractor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;wid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;sort_by&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this illustration together with &lt;a href="https://github.com/ruby/ruby/blob/master/doc/ractor.md"&gt;https://github.com/ruby/ruby/blob/master/doc/ractor.md&lt;/a&gt; has given you a better understanding of what you can do with Ractor.&lt;/p&gt;

&lt;p&gt;In my opinion, Ruby finally providing basic primitives for doing actor based concurrency is very exciting.&lt;/p&gt;

&lt;p&gt;You won't have to focus too much on the performance gain, or even the current status of all the APIs (they explicitly state its an experimental feature, as of Ruby 3.0.1).&lt;/p&gt;

&lt;p&gt;still, I'm confident that we can already start learning how to write distributed systems all within the favourite language of our choice :)&lt;/p&gt;

&lt;p&gt;I hope you'll dig a bit deeper by yourself, as well! Happy coding 🙌&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>distributedsystems</category>
      <category>ractor</category>
    </item>
    <item>
      <title>Microservice Pattern : API Gateway</title>
      <author>Ishant Gaurav</author>
      <pubDate>Mon, 31 May 2021 17:49:45 +0000</pubDate>
      <link>https://dev.to/ishant14/microservice-pattern-api-gateway-1e78</link>
      <guid>https://dev.to/ishant14/microservice-pattern-api-gateway-1e78</guid>
      <description>&lt;p&gt;When we talk about the system design or see those big&lt;strong&gt; &lt;/strong&gt;&lt;em&gt; &lt;/em&gt;&lt;strong&gt;Mircoservice Architecture&lt;/strong&gt; diagram, there is a component with name &lt;strong&gt;&lt;em&gt;api-gateway &lt;/em&gt;&lt;/strong&gt;which always comes into the picture. In this blog we will see what exactly is the &lt;strong&gt;API gateway&lt;/strong&gt; and why do we need it, when and where to use it.&lt;/p&gt;

&lt;p&gt;Before reading this post or learning about the api-gateway, i would suggest you to learn about &lt;code&gt;proxy&lt;/code&gt; and &lt;code&gt;reverse-proxy&lt;/code&gt; first or go through my other blog in which i have shared the information about the same.&lt;/p&gt;

&lt;p id="api-gateway"&gt;Ok, now lets start with the definition of api-gateway &lt;/p&gt;

&lt;p&gt;&lt;em&gt;"&lt;span&gt;API gateway is a tool that sits between the client and the collection of backened services. An API gateway acts as a reverse proxy to accept all api calls, aggregate the various services required to fulfill them, and return the appropriate result.&lt;/span&gt;"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's understand the problem we would face if we don't use the API gateway. Let's take a scenario of an basic ecommerce website which has microservice architecture as below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Customer Service&lt;/strong&gt; : handles the new customer addition, updation, deletion etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Product Service:&lt;/strong&gt; gives all the information about the products.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Inventory Service: &lt;/strong&gt; takes care of all the quantity or availability of products.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Order Service&lt;/strong&gt; : handles payment and place the order.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ne77wZNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ishantgaurav131.files.wordpress.com/2020/08/api-gateway-2-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ne77wZNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ishantgaurav131.files.wordpress.com/2020/08/api-gateway-2-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we have microservice architecture having more than one service for front-end to interact with, it would lead to below problems :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Front-end itself has to play the role of API-Composer, it fetches the result from different services and combine the result.&lt;/li&gt;
&lt;li&gt;Front end will have to call all the each service separately, which mean there will be 4 network calls, which could cause performance issue to the application.&lt;/li&gt;
&lt;li&gt;We would have to implement authorization/authentication mechanism for all the service separately for each individual call from front end to backend.&lt;/li&gt;
&lt;li&gt; We are not able to implement common caching mechanism.&lt;/li&gt;
&lt;li&gt;All the service will have to follow communication protocol like REST/HTTP  as client is directly communicating to services.&lt;/li&gt;
&lt;li&gt;From Security point of view, will have to implement HTTPS with all the service.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let's see how an &lt;code&gt;api-gateway&lt;/code&gt; can overcome all the above problems for us and what other benefits it provides and come out as an essential component in microservices architecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Up2lJBKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ishantgaurav131.files.wordpress.com/2020/08/api-gateway-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Up2lJBKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ishantgaurav131.files.wordpress.com/2020/08/api-gateway-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main responsibility of &lt;code&gt;api-gateway&lt;/code&gt; is to route the request to the required service, perform protocol transformation and  combined the results from different services into one. &lt;/p&gt;

&lt;p&gt;Apart from the main functionality &lt;code&gt;api-gateway&lt;/code&gt; provides a lot of another benefits as well :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Caching&lt;/strong&gt; : Response from the services can be cached in api-gateway to prevent network call.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Authorization/Authentication&lt;/strong&gt; : Instead of verifying the identity of the client and authentication at each service, it can be implemented in &lt;code&gt;api-gateway&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Less Network calls : &lt;/strong&gt;As we can see now the client will have to make one only network call to &lt;code&gt;api-gateway&lt;/code&gt; and further call to services will be executed by the api-gateway only which are in same network, hence it will enhance the performance a lot.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Different protocol:&lt;/strong&gt; Now the backend service can be implemented in different protocol like &lt;code&gt;REST/HTTP&lt;/code&gt; and &lt;code&gt;gRPC&lt;/code&gt; and not just client friendly protocol as &lt;code&gt;HTTP&lt;/code&gt; and &lt;code&gt;WebSocket&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rate Limiting :&lt;/strong&gt; Limiting how many requests per second from either a specific client and/or from all clients.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Metrics collection:&lt;/strong&gt;  Collect metrics on API usage for billing analytics purposes. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Request logging:&lt;/strong&gt; Log requests to different services which can help later on in debugging.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easy to add another service&lt;/strong&gt; : Now we can easily add another service in the backend without client being aware of that.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Drawback of using API-Gateway : &lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the microservice architecture, it  becomes the one highly available component which needs to be developed, deployed and managed carefully.&lt;/li&gt;
&lt;li&gt;Add more complexity to the application architecture.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This blog was first posted on my blog as &lt;a href="https://ishantgaurav131.wordpress.com/"&gt;https://ishantgaurav131.wordpress.com/&lt;/a&gt;. If you find this blog relevant, you can visit my blog for more such content.&lt;/p&gt;

&lt;p&gt;This is all from this Post. Thanks for reading, and let me know your thoughts in the comments! &lt;/p&gt;

</description>
      <category>microservices</category>
      <category>design</category>
    </item>
    <item>
      <title>Understanding of Probability Distribution and Normal Distribution</title>
      <author>AI Pool</author>
      <pubDate>Mon, 31 May 2021 17:44:56 +0000</pubDate>
      <link>https://dev.to/aipool3/understanding-of-probability-distribution-and-normal-distribution-3bfc</link>
      <guid>https://dev.to/aipool3/understanding-of-probability-distribution-and-normal-distribution-3bfc</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Statistics is a key component in data science, which deals with gathering, analyzing, and drawing conclusions from data. An aspect of statistics is the probability distribution, which gives an idea of the likelihood of an event occurring, for example, there is an 80% chance of rain tonight. &lt;/p&gt;

&lt;p&gt;Regarding probability, the common notation used is p(X), which means the probability that a random variable X is equal to a particular value, therefore &lt;strong&gt;p(X=0.8)&lt;/strong&gt;, in the example given, indicates that there's an &lt;strong&gt;80%&lt;/strong&gt; chance of X occurring. The sum of all probabilities should be equal to 1, therefore if there's a &lt;strong&gt;0.8&lt;/strong&gt; chance of rain, then there's a &lt;strong&gt;0.2&lt;/strong&gt; chance of no rain. Probabilities are also between 0 and 1.  There are two types of probability distributions, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discrete probability distribution&lt;/li&gt;
&lt;li&gt;Continuous probability distribution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following sections talk a bit more about both distributions&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#visualization-of-different-types-of-distribution"&gt;
  &lt;/a&gt;
  Visualization of different types of distribution
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--11xR50qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://files.ai-pool.com/a/e26089688028a208fcf058af4425aa6c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--11xR50qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://files.ai-pool.com/a/e26089688028a208fcf058af4425aa6c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are various types of a discrete probability distribution, some of which are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Poisson, for counting situations, such as the counts of televisions sold at a video store per week&lt;/li&gt;
&lt;li&gt;Binomial for the binary situations, such as if it would rain or not&lt;/li&gt;
&lt;li&gt;Uniform distribution for multiple situations that have the same probability such as a die roll&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-following-plot-is-a-visualization-of-normal-distribution"&gt;
  &lt;/a&gt;
  The following plot is a visualization of Normal Distribution
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--As2iHXtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://files.ai-pool.com/a/0e870fac6dada603d5ef8d831446131a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--As2iHXtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://files.ai-pool.com/a/0e870fac6dada603d5ef8d831446131a.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The normal distribution has certain characteristics which make it a bit easier to spot, some of which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The mean, median, and mode are equal&lt;/li&gt;
&lt;li&gt;There is no skew(whether left or right), meaning 50% of the values are on the left of the mean, and the other 50% on the right&lt;/li&gt;
&lt;li&gt;The mean and standard deviation are the key terms that characterize this&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find more about Gaussian Distribution in the &lt;a href="https://ai-pool.com/a/s/understanding-of-probability-distribution-and-normal-distribution"&gt;Following Article&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ai-pool.com/a/s/confidence-interval-understanding"&gt;Confidence Interval Understanding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ai-pool.com/a/s/decision-trees"&gt;Decision Trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ai-pool.com/a/s/understanding-of-regularization-in-neural-networks"&gt;Understanding of Regularization in Neural Networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aipool</category>
      <category>ai</category>
      <category>machinelearning</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Angular State Management With BehaviorSubject</title>
      <author>ng-conf</author>
      <pubDate>Mon, 31 May 2021 17:39:10 +0000</pubDate>
      <link>https://dev.to/ngconf/angular-state-management-with-behaviorsubject-22b0</link>
      <guid>https://dev.to/ngconf/angular-state-management-with-behaviorsubject-22b0</guid>
      <description>&lt;p&gt;Jim Armstrong | ng-conf | Dec 2019&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Mc7K-HL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AmD6hH2jyPWoyKeE-r-ptxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Mc7K-HL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AmD6hH2jyPWoyKeE-r-ptxw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article is targeted to beginning-to-intermediate-level Angular developers wishing to obtain insight into methods for state management in front-end applications. A simple, but highly customizable, reactive state-management service is constructed on top of the RxJs &lt;em&gt;BehaviorSubject&lt;/em&gt;. This approach can be used for both management of a global store or as model manager for a lazy-loaded route. Both use cases are illustrated through an Angular version 8 application.&lt;/p&gt;

&lt;p&gt;While the code in this application may be extended for practical use in your own applications, there is another motivation for studying the internals of state management. Doing so provides a better understanding of the underlying details of such management, which makes you a better consumer of third-party state-management software.&lt;/p&gt;

&lt;p&gt;So, let’s get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The benefits of a reactive store include the ability to manage mutability risk and facilitate communication of actions to any components having visibility to the store. While third-party packages such as &lt;a class="mentioned-user" href="https://dev.to/ngrx"&gt;@ngrx&lt;/a&gt;
/store provide complete packaged solutions to state management, sometimes a third-party package is just too heavyweight, or it might be considered overkill for a lazy-loaded route. For example, some routes require state, but only components involved in the route require exposure to that state. The remainder of the application has no need of information in that route’s store, so why use the global store? In other words, what happens inside the route stays inside the route. This has been my most frequent use case for lightweight, custom state management.&lt;/p&gt;

&lt;p&gt;Before continuing, some prior exposure to state-management concepts is useful in understanding this article and the supplied code. This article on &lt;a href="https://medium.com/codingthesmartway-com-blog/learn-redux-introduction-to-state-management-with-react-b87bc570b12a"&gt;general concepts behind Redux&lt;/a&gt; may be helpful for those needing a refresher.&lt;/p&gt;

&lt;p&gt;A minimal understanding of RxJs is also required. You may also find this &lt;strong&gt;very&lt;/strong&gt; helpful,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/DanWahlin/Observable-Store"&gt;https://github.com/DanWahlin/Observable-Store&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preliminaries"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Preliminaries&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In the interest of keeping custom state management lightweight and performant, the model for this application is ‘open’. By ‘open’, it is meant that a specific model for a specific application is defined inside an Angular service. Only that service has direct access to the model and only the service can update the model. A copy of the current model or state may be obtained by subscribers to model updates.&lt;/p&gt;

&lt;p&gt;Many models are simple JS objects (name/value pairs) and payloads are often empty. The service may employ pure functions in the process of validating payloads supplied with various actions and transforming the model, but there are no formal reducers in this approach.&lt;/p&gt;

&lt;p&gt;Note that this approach is not general-purpose; changing the application requires modifying the model service. There is also nothing new presented, although I believe the current illustration of the technique to be more involved than most introductory treatments on the topic. And, it’s simple enough so that even a mathematician like me can make sense of it :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-application"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The Application&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Before we begin deconstruction, here is the GitHub for the Angular application,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/theAlgorithmist/AngularStateManagement"&gt;theAlgorithmist/AngularStateManagement&lt;/a&gt; on github.com&lt;/p&gt;

&lt;p&gt;The most common applications for illustrating state-management systems are counters and to-do lists. This application serves as an interesting (and much more practical) twist on the classic counter. The application contains three simple menu options, which represent primary paths through the application. They are named &lt;em&gt;Path 1&lt;/em&gt;, &lt;em&gt;Path 2&lt;/em&gt;, and &lt;em&gt;Path 3&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Organization of the application is illustrated, below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--87OLo3zb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/474/1%2Aqe17baH264AW2C0wreS1gQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--87OLo3zb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/474/1%2Aqe17baH264AW2C0wreS1gQ.png" alt="screenshot of program folders, all expanded to show the files within and how they have organized the program."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#application-organization"&gt;
  &lt;/a&gt;
  Application Organization
&lt;/h6&gt;

&lt;p&gt;&lt;em&gt;Path 1&lt;/em&gt; and &lt;em&gt;Path 3&lt;/em&gt; are eagerly loaded. The application keeps track of how many times each route has been loaded and displays count-dependent content inside each route. Current counts are displayed adjacent to the links to each path.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Path 2&lt;/em&gt; is lazy-loaded and contains two child components, &lt;em&gt;Path 2A&lt;/em&gt; and &lt;em&gt;Path 2B. Path 2&lt;/em&gt; maintains counts of how often its A/B routes are loaded, but that information is only of interest inside the main &lt;em&gt;Path 2&lt;/em&gt; route. The remainder of the application is unconcerned about any count information inside the &lt;em&gt;Path 2&lt;/em&gt; route.&lt;/p&gt;

&lt;p&gt;Two models are used inside this application. The first represents the global store or application state, which consists of the user’s first and last name, user role, path-1 count, and path-3 count. A record of the latest application action is also maintained in the model as shown in &lt;em&gt;/app/shared/IAppModel.ts&lt;/em&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface IAppMode
_{
  action: string;
  first: string;
  last: string;
  role: string;
  path1Count: number,
  path3Count: number,
};

export const INIT_APP_MODEL: IAppModel = {
  action: appActions.NONE,
  first: 'First',
  last: 'Last',
  role: 'None',
  path1Count: 0,
  path3Count: 0
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An interface is defined that describes the shape of the global store along with an initial model. That model is managed in an Angular service, &lt;em&gt;/app/shared/IAppModel.ts&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This service exposes several methods that allow the model to be reactively updated in a Redux-style manner. This is accomplished using the RxJs &lt;em&gt;BehaviorSubject&lt;/em&gt;. &lt;em&gt;BehaviorSubject&lt;/em&gt; is a &lt;em&gt;Subject&lt;/em&gt; (so it acts as both &lt;em&gt;Observer&lt;/em&gt; and &lt;em&gt;Observable&lt;/em&gt;) that accepts an initial value. It is defined with a specified type,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;protected subject: BehaviorSubject&amp;lt;IAppModel&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for purposes of the application covered in this article.&lt;/p&gt;

&lt;p&gt;A protected model reference is defined as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;protected model: IAppModel;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which serves as the concrete representation of the model’s state at any time in the application. This representation can only be mutated inside the model service.&lt;/p&gt;

&lt;p&gt;The model is initialized in the constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;constructor()
{
  this.model   = JSON.parse(JSON.stringify(INIT_APP_MODEL));
  this.subject = new BehaviorSubject&amp;lt;IAppModel&amp;gt;(this.model);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any component interested in subscribing to model updates does so through the &lt;em&gt;public&lt;/em&gt; subscribe method,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public subscribe(callback: (model: IAppModel) =&amp;gt; void): Subscription {
  return this.subject.subscribe(callback);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The model is updated by dispatching named ‘actions,’ which are handled in the public &lt;em&gt;dispatchAction&lt;/em&gt; method. This method defines a string action and optional payload as arguments.&lt;/p&gt;

&lt;p&gt;As an exercise, try exposing the internal &lt;em&gt;subject&lt;/em&gt; variable as a public &lt;em&gt;Observable&lt;/em&gt;. This allows developers to capture error information in a familiar manner. The &lt;em&gt;Observable&lt;/em&gt; could be initialized in the constructor, &lt;em&gt;this.currentModel$ = this.subject.asObservable()&lt;/em&gt;, for example. This &lt;em&gt;Observable&lt;/em&gt; could be used as an alternative to a Redux-style subscription.&lt;/p&gt;

&lt;p&gt;In Redux terms, the actual model update would typically be handled by independent reducer functions. For compactness, state updates are handled internally in the &lt;em&gt;dispatchAction&lt;/em&gt; method. Pure helper functions could also be used for more complex updates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public dispatchAction(act: string, payload: any | null): void {

  this.model.action = act;

  switch (act)
  {
    case appActions.NONE:
      // placeholder for future use
      console.log('no action');
      break;

    case appActions.INC_PATH1:
      this.model.path1Count++;
      break;

    case appActions.INC_PATH3:
      this.model.path3Count++;
      break;

    case appActions.CLEAR:
      this.model.path1Count = 0;
      this.model.path3Count = 0;
      break;

    case appActions.USER:
      // todo add data validation as an exercise
      const data: Partial&amp;lt;IAppModel&amp;gt; = payload as Partial&amp;lt;IAppModel&amp;gt;;
      this.model.first = data.first;
      this.model.last  = data.last;
      this.model.role  = data.role;
  }

  const dispatchedModel: IAppModel = JSON.parse(JSON.stringify(this.model));

  this.subject.next(dispatchedModel);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice at the end of the method that a copy is made of the updated model and that copy is broadcast to all subscribers. Also note that the SAME copy is sent to all subscribers, so it is theoretically possible that any one component could mutate their copy and spread that mutation to other subscribers. To alleviate this situation, use &lt;em&gt;Object.freeze()&lt;/em&gt; on the model copy.&lt;/p&gt;

&lt;p&gt;At this point, the application has a global state or model and that model can be updated by any component simply by dispatching an appropriate action with accompanying payload. Any component can subscribe (and react to) model updates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-model-in-the-application"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Using The Model In The Application&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The main app component’s template illustrates the overall layout and function of the route-counter application,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/app/app.component.html&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;header&amp;gt;Angular 8 Custom State Management&amp;lt;/header&amp;gt;

&amp;lt;div class="padded"&amp;gt;User: {{appModel.first}} {{appModel.last}}  Role: {{appModel.role}}&amp;lt;/div&amp;gt;

&amp;lt;div class="nav"&amp;gt;
  &amp;lt;span class="nav-option mr10"&amp;gt;
    &amp;lt;a routerLink="path1"&amp;gt;Path 1&amp;lt;/a&amp;gt; ({{appModel.path1Count}})
  &amp;lt;/span&amp;gt;

  &amp;lt;span class="nav-option mr10"&amp;gt;
    &amp;lt;a routerLink="path2" [state]="{first: appModel.first}"&amp;gt;Path 2&amp;lt;/a&amp;gt;
  &amp;lt;/span&amp;gt;

  &amp;lt;span class="nav-option"&amp;gt;
    &amp;lt;a routerLink="path3"&amp;gt;Path 3&amp;lt;/a&amp;gt; ({{appModel.path3Count}})
  &amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some aspects of this template require further deconstruction and that is deferred until a later point in this article.&lt;/p&gt;

&lt;p&gt;The main application &lt;em&gt;(/src/app/app.component.ts)&lt;/em&gt; obtains copies of the app model by injecting the model service and subscribing to updates,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public appModel: IAppModel;                   

protected _storeSubscription: Subscription;

constructor(protected _modelService: ModelService,
            protected _http: HttpClient)
{
  this._storeSubscription = this._modelService.subscribe( (m: IAppModel) =&amp;gt; this.__onModelUpdated(m));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;appModel&lt;/em&gt; variable is used for binding. Several model variables are reflected in the template and each application path is loaded into the supplied router outlet (see template above).&lt;/p&gt;

&lt;p&gt;Routes are defined in the main app routing module (&lt;em&gt;/src/app/app-routing.module.ts&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const routes: Routes = [
  {
    path      : '',
    redirectTo: '/path1',
    pathMatch : 'full',
  },
  {
    path     : 'path1',
    component: Path1Component
  },
  {
    path     : 'path3',
    component: Path3Component
  },
  {
    path        : 'path2',
    loadChildren: () =&amp;gt; import('./features/path2/path2.module').then(m =&amp;gt; m.Path2Module),
  }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;em&gt;path1&lt;/em&gt; and path3 are eagerly loaded (and associated with Angular Components &lt;em&gt;Path1Component&lt;/em&gt; and &lt;em&gt;Path3Component&lt;/em&gt;). The path2 route is lazy-loaded and its full description is deferred to &lt;em&gt;Path2Module&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The path-1 and path-3 components use the number of times the component was loaded to display some sort of ‘recognition’ to the user. This is a frequent application in EdTech where ‘badges’ and other rewards are displayed based on scores, counts, and other achievement criteria.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Only Path1Component&lt;/em&gt; is deconstructed in this article (&lt;em&gt;Path3Component&lt;/em&gt; is nearly identical),&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/app/features/path1/path1-component.ts&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This component’s template is inlined to conserve space,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Component({
  selector: 'app-path1',

  template: `&amp;lt;p&amp;gt;(Eager) Path 1 Component&amp;lt;/p&amp;gt;
    &amp;lt;p *ngIf="showBadge"&amp;gt;Congratulations!!&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;This is some text associated with Path 1, blah, blah ...&amp;lt;/p&amp;gt;
   `,

  changeDetection: ChangeDetectionStrategy.OnPush
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As with the main app component, the app model service is injected and the component subscribes to updates,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;constructor(protected _modelService: ModelService)
{
  this._storeSubscription = this._modelService.subscribe( (m: IAppModel) =&amp;gt; this.__onModelUpdated(m));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since components are moved in and out of the main application’s router outlet, the on-init lifecycle handler is used to increment the path-1 count,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public ngOnInit(): void
{
  // For better unit testing, move this logic outside the lifecycle handler.
  this._modelService.dispatchAction(appActions.INC_PATH1, null);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anywhere a subscription is made, it’s good practice to unsubscribe when the component is destroyed,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public ngOnDestroy(): void
{
  this._storeSubscription.unsubscribe();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Model updates are handled below, which shows how the local &lt;strong&gt;showBadge&lt;/strong&gt; variable is assigned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;protected __onModelUpdated(model: IAppModel): void
{
  if (model !== undefined &amp;amp;&amp;amp; model != null) {
    this.showBadge = model.path1Count &amp;gt; 4;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the local &lt;em&gt;showBadge&lt;/em&gt; variable is not an &lt;em&gt;Input&lt;/em&gt; and it is updated inside a Component with &lt;em&gt;OnPush&lt;/em&gt; change detection. This works in the current application since the only way the model can be updated is by clicking a link. In general, a &lt;em&gt;ChangeDetectorRef&lt;/em&gt; should be injected and then add a call to &lt;em&gt;markForCheck()&lt;/em&gt;. Consider this modification as an exercise and note that it applies to other components as well.&lt;/p&gt;

&lt;p&gt;Note that the path-1 increment occurs when the main app model is updated as a result of the dispatch that occurs in the on-init handler. This also allows any other subscriber to react to the path-1 count update without any alteration to the application’s structure or architecture.&lt;/p&gt;

&lt;p&gt;In practice, a more sophisticated badge formula would be used, which could likely be encapsulated in a standalone, pure function. The latter is better for testing purposes. Currently, the only way to test this component is to directly modify an app model (although its compactness is easier to deconstruct). Try altering this approach yourself as a means of gaining better familiarity with the code base.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lazy-Loaded Route Model&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The path-2 (lazy-loaded) route is different in that it has a main component associated with the route as well as other components whose load-counts are required while in path-2. The remainder of the application is unconcerned with this information, so a separate model is employed with the path-2 route,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/app/features/path2/shared/IPath2Model.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface IPath2Model
{
  action: string;
  first: string;
  last?: string;
  selection: string;
  path2CountA: number,
  path2CountB: number,
};

export const INIT_PATH2_MODEL: IPath2Model = {
  action: path2Actions.NONE,
  first: '',
  selection: '',
  path2CountA: 0,
  path2CountB: 0,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The complete path-2 model is provided in &lt;em&gt;/src/app/features/path2/shared/path2-model.service.ts&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since this model is only required for the path-2 route, it is not necessary to register it with the root injector. It is simplest and easiest (to avoid working around apparent circular dependencies with ‘providedIn’) to provide this service in the path-2 module &lt;em&gt;(/src/app/features/path2/path2.module.ts)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@NgModule({
  declarations: [],
  imports: [
    CommonModule,
    Path2RoutingModule,
  ],
  providers: [Path2ModelService]
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Route-To-Route Data Transfer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Only the user’s first name is required in path-2 and that information is contained in the main app model. So, how do we transfer the first name from the main app model to the path-2 model? This could be accomplished in a few ways, one of which is to inject both models into &lt;em&gt;Path2Component&lt;/em&gt; and then simply use the first name from the main app model. This requires the ability to select a copy of the current model, which is not currently provided in the abbreviated code base for this article.&lt;/p&gt;

&lt;p&gt;Adding a &lt;em&gt;select()&lt;/em&gt; method to the model is easy, however, if you already added the public &lt;em&gt;Observable&lt;/em&gt; as suggested above, such a method is not necessary.&lt;/p&gt;

&lt;p&gt;The current approach uses dynamic state to pass the first name whenever the user clicks on the path-2 link, as shown in&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/app/app.component.html&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;header&amp;gt;Angular 8 Custom State Management&amp;lt;/header&amp;gt;

&amp;lt;div class="padded"&amp;gt;User: {{appModel.first}} {{appModel.last}}  Role: {{appModel.role}}&amp;lt;/div&amp;gt;

&amp;lt;div class="nav"&amp;gt;
  &amp;lt;span class="nav-option mr10"&amp;gt;
    &amp;lt;a routerLink="path1"&amp;gt;Path 1&amp;lt;/a&amp;gt; ({{appModel.path1Count}})
  &amp;lt;/span&amp;gt;

  &amp;lt;span class="nav-option mr10"&amp;gt;
    &amp;lt;a routerLink="path2" [state]="{first: appModel.first}"&amp;gt;Path 2&amp;lt;/a&amp;gt;
  &amp;lt;/span&amp;gt;

  &amp;lt;span class="nav-option"&amp;gt;
    &amp;lt;a routerLink="path3"&amp;gt;Path 3&amp;lt;/a&amp;gt; ({{appModel.path3Count}})
  &amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This provides what Angular calls &lt;em&gt;Navigation Extras&lt;/em&gt; that can be picked up via the router’s &lt;em&gt;getCurrentNavigation()&lt;/em&gt; method as will be illustrated later. This is a bit more compact and allows me to point out a pitfall of this technique that is rarely discussed in other tutorials on the topic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Path2Component Deconstruction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As with the other components, this component’s template is inlined,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/app/features/path2/components/path2-component.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Component({
  selector: 'app-path2',

  template: `&amp;lt;p&amp;gt;(Lazy) Path 2 Component&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;a [routerLink]="'/path2/a'"&amp;gt;Path 2a&amp;lt;/a&amp;gt; ({{path2Model.path2CountA}}) 
     &amp;amp;nbsp; &amp;lt;a [routerLink]="'/path2/b'"&amp;gt;Path 2b&amp;lt;/a&amp;gt; ({{path2Model.path2CountB}})&amp;lt;/p&amp;gt;`,

  changeDetection: ChangeDetectionStrategy.OnPush
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that child components path-2 A and B are routed in place of path 2. But, there is no additional router outlet in &lt;em&gt;Path2Component&lt;/em&gt;. This means that all components are loaded into the main app’s router outlet and all routes need to be defined relative to the main app. I suggest adding a router outlet to &lt;em&gt;Path2Component&lt;/em&gt; and modifying the route definitions as an exercise. This forces you to work with and become familiar with the code as opposed to simply copy/paste and use it directly in applications.&lt;/p&gt;

&lt;p&gt;It also means that for purposes of the current application, it’s necessary to navigate back to the path-2 route before moving onto path 2 A or B. Note that the path-2 route definitions are in &lt;em&gt;/src/app/features/path2/path2-routing.module.ts&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The component maintains a public reference to a path-2 model, that is used for binding,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public path2Model: IPath2Model;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The component’s constructor subscribes to model updates and retrieves the first-name variable passed as a navigation extra,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;constructor(
  protected _router: Router,
  protected _modelService: Path2ModelService
)
{
  const state: NavigationExtras = this._router.getCurrentNavigation().extras.state;

  if (state !== undefined) {
    this._modelService.dispatchAction(path2Actions.INIT, {first: state['first']});
  }

  this._storeSubscription = this._modelService.subscribe( (m: IPath2Model) =&amp;gt; this.__onModelUpdated(m));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This seems like a handy trick to pass dynamic data between routes, but there is a caveat. If the route is directly loaded into the browser’s URL bar, the main application’s &lt;em&gt;routerLink&lt;/em&gt; is never activated (since the link is never clicked) and the state is never passed. So, the &lt;em&gt;state&lt;/em&gt; will be undefined in &lt;em&gt;Path2Component&lt;/em&gt;. In an actual application, one would likely use route guards to make sure all users go through ‘the front door,’ but I wanted to illustrate this issue and point out that there are better ways to do this using the existing model.&lt;/p&gt;

&lt;p&gt;The primary action taken on path-2 model updates is to update the reference to the public path-2 model and then let Angular do its work :) Once again, take note of the above comments on change detection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing The Application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The application simulates the process of loading some initial data from a server and then using this data to populate the global store (or state).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/app/app.component.html&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public ngOnInit(): void
{
  this._http.get&amp;lt;IAppModel&amp;gt;('/assets/client-data.json')
  .subscribe( (data: IAppModel) =&amp;gt; this.__onDataLoaded(data) );
}
.
.
.
protected __onDataLoaded(data: IAppModel): void
{
  this._modelService.dispatchAction(appActions.USER, data);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;USER&lt;/em&gt; action causes data to be copied into the state and then subscribers receive the new model in an update. This results in all subscribers receiving the initial model hydration (&lt;em&gt;INIT_APP_MODEL&lt;/em&gt;) as well as the update from external data. The UI is then redrawn with the new user information as well as the default (eager) route counts.&lt;/p&gt;

&lt;p&gt;Click back and forth between the path-1 and path-3 links and watch the route counts update. After loading path-1 the minimal number of times, you should see the path-1 recognition appear.&lt;/p&gt;

&lt;p&gt;Load path-2 and move back and forth between path-2 and its A/B paths. Note that path-2 information is only maintained inside path-2 and persists between loads of the path-2 route.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This article illustrated the creation of a very simple, Redux-style model using &lt;em&gt;BehaviorSubject&lt;/em&gt;. The approach is simple and very lightweight, but needs to be customized to each individual application. With only slight modification, I’ve used a similar approach to managing local state inside complex, lazy-loaded routes in actual applications. Take the time to study the code, make the suggested modifications, and then you may well discover future applications of these techniques in your own projects.&lt;/p&gt;

&lt;p&gt;Good luck with your Angular efforts!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ngconf-join-us-for-the-reliable-web-summit"&gt;
  &lt;/a&gt;
  &lt;strong&gt;ng-conf: Join us for the Reliable Web Summit&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Come learn from community members and leaders the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests. Powered by ng-conf, join us for the Reliable Web Summit this August 26th &amp;amp; 27th, 2021.&lt;br&gt;
&lt;a href="https://reliablewebsummit.com/"&gt;https://reliablewebsummit.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
    </item>
    <item>
      <title>My Developer Journey – How I Went from Making $1,000 to Better Salary</title>
      <author>Santosh Yadav</author>
      <pubDate>Mon, 31 May 2021 17:35:32 +0000</pubDate>
      <link>https://dev.to/this-is-learning/my-developer-journey-how-i-went-from-making-1-000-to-better-salary-11om</link>
      <guid>https://dev.to/this-is-learning/my-developer-journey-how-i-went-from-making-1-000-to-better-salary-11om</guid>
      <description>&lt;p&gt;Cover photo by &lt;a href="https://unsplash.com/photos/TamMbr4okv4"&gt;Ian Schneider&lt;/a&gt; on Unsplash.&lt;/p&gt;

&lt;p&gt;Hey everyone, my name is Santosh. In this article, I will tell you how I ramped up my career and ended up making Better Salary a year as a developer. &lt;/p&gt;

&lt;p&gt;I'll share what I learned from each job along the way, how you can stand out, tips for negotiating salary, and how I got to where I am today.&lt;/p&gt;

&lt;p&gt;Here's a little bit more about me: I am from India, and I am an Angular GDE, India's First GitHub Star, and Auth0 Ambassador. I also live stream on Twitch and YouTube. You can &lt;a href="https://www.santoshyadav.dev/home"&gt;find more about me here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-it-all-started"&gt;
  &lt;/a&gt;
  How It All Started
&lt;/h1&gt;

&lt;p&gt;I started my developer journey in 2008. I couldn't get a job after college – 2008 was the worst year for the entire tech industry, as many already know.&lt;/p&gt;

&lt;p&gt;When I was in college doing my CS degree, my friends used to tell me that'd I'd be able to quickly get a job making 300000 INR ($4000) per year. But by the final semester, it became clear that it wasn't happening.&lt;/p&gt;

&lt;p&gt;After finishing college, my friend and I went around to every job consultancy to share our resumes. But we couldn't get any bites. We updated our resumes on every job platform available, but no one was hiring freshers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-got-my-first-developer-job"&gt;
  &lt;/a&gt;
  How I Got My First Developer Job
&lt;/h2&gt;

&lt;p&gt;Finally, one of my father's friends who ran a consultancy got me an interview scheduled. I was looking for a job as a developer in C#, and I joined the company the next day after the interview. It was 18th October 2008.&lt;/p&gt;

&lt;p&gt;The organization was small, but the CEO had a big vision with the product he was building. I don't want to call it a Startup, because it was an HR consulting firm, which was his main business. My salary was 60000 INR ($800) per year.&lt;/p&gt;

&lt;p&gt;I had a lot of free time, and I took the opportunity to use that time to learn more. Still, I was not that serious and enjoyed my free time. I learned a little bit from a senior developer on my team, though. I decided to quit after ten months, as I realized it wasn't good for my career.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-jobless-to-small-time-contracts"&gt;
  &lt;/a&gt;
  From Jobless to Small Time Contracts
&lt;/h2&gt;

&lt;p&gt;After I decided to quit that first job, I went home for one month. With my friend's reference, I got a contract position for a few months.&lt;/p&gt;

&lt;p&gt;The pay was a little bit more, this time 120000 INR ($1600) per year, which was double what I was making before. But the work was more operations-focused and working with Oracle DB sometimes.&lt;/p&gt;

&lt;p&gt;My first love was C#, but my family's finances were terrible, so I had no option but to take that job. By the end of 2009, it was clear – I wouldn't have this contract next year. So again, I tried hard and got a job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-first-real-programming-job"&gt;
  &lt;/a&gt;
  My First Real Programming Job
&lt;/h2&gt;

&lt;p&gt;I got my first real programming job in January 2010. I started working with Capita India, but I joined as a contractor on another company's payroll. It was like a contract position, but more stable than the last job.&lt;/p&gt;

&lt;p&gt;My salary was 144000 INR ($1900), money was low, but of course, I was getting an opportunity to learn as well. My manager was terrific, and my co-worker was the Database Admin. Yes, you guessed it right – I was the only developer on the team.&lt;/p&gt;

&lt;p&gt;For the first three months, I had a lot of work to do. I was working on a Windows App for the finance team. But soon work stopped coming. I spoke to my manager, and he said I should use that time to learn more.&lt;/p&gt;

&lt;p&gt;After a few months, I became part of a larger team after some organization-level changes. I started getting some work on ASP.NET, but I decided to move on in November 2010.&lt;/p&gt;

&lt;p&gt;Something I learned from this job: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use your spare time well: You won't always have enough work to do to keep you busy all the time. Use your spare time to read blogs, watch some courses, read, and create some proof of concepts with whatever you've learned.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The time I invested in learning paid off. I got an offer with a 100% raise. My manager provided a lot of motivation which is why I got that raise. As I had no computer at home, I read a lot, which was the best chance to improve myself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-for-a-bank-and-in-a-big-team"&gt;
  &lt;/a&gt;
  Working For A Bank and In a Big Team
&lt;/h2&gt;

&lt;p&gt;Like my previous job, my next role was also on the payroll of another company. I was working for ICICI as a contractor, the same as my last Job at Capita.&lt;/p&gt;

&lt;p&gt;But for the first time, I was working on a team of more than 60 people, and my salary was 288000 INR ($3900). I felt like I was finally making good money as a dev, but I finished the project I was working on in ten months, and the work stopped coming in again.&lt;/p&gt;

&lt;p&gt;At this job, I learned more about working on a team and saw how bad managers could make people quit. By the time I left, there were fewer than ten people on the team. This place became toxic over the months, and devs were terrified to share anything with the manager, and so that manager had trust issues with all developers.&lt;/p&gt;

&lt;p&gt;I also learned that &lt;strong&gt;you shouldn't stay and work in a toxic environment&lt;/strong&gt;. I have seen many developers working in toxic work environments. A toxic work culture is terrible for everyone, and it can turn your co-workers against you. It also makes you less productive, more insecure about your job, and it can make you burn out. Quit as soon as possible – you deserve better.&lt;/p&gt;

&lt;p&gt;Fortunately, I invested time in learning some new packages introduced in .NET, and I found that there were a lot of job opportunities for that tech here. I interviewed at a startup and showcased tech I never used at work. And it paid off – I ended up getting the job with a more than 70% raise.&lt;/p&gt;

&lt;p&gt;Here are some tips for negotiating your salary:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#always-know-your-worth"&gt;
  &lt;/a&gt;
  Always Know Your Worth
&lt;/h3&gt;

&lt;p&gt;In the tech industry, you will find different devs doing the same job but not getting paid equally. Some organizations take advantage of you and pay you less. Always study the market if you are looking for a job. Ask for the salary range if possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#never-negotiate-salary-based-on-your-last-pay"&gt;
  &lt;/a&gt;
  Never Negotiate Salary Based on Your Last Pay
&lt;/h3&gt;

&lt;p&gt;Always ask your recruiter for a salary range. If you hear it will be 30% above your last salary, you might skip them. Always keep the figure you want in your mind, and negotiate based on that. I have even received a 100% raise from my last salary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#know-the-job-description"&gt;
  &lt;/a&gt;
  Know the Job Description
&lt;/h3&gt;

&lt;p&gt;Before joining any organization, know about the job description; money should not be your only focus. I declined a job offer with more salary once because the job was more of support, and I was about to get a work opportunity at the startup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#joining-the-startup"&gt;
  &lt;/a&gt;
  Joining the Startup
&lt;/h2&gt;

&lt;p&gt;At this point, I started to push myself more, as I wanted to make sure I could give my family a better life.&lt;/p&gt;

&lt;p&gt;I joined a startup in 2012 with a salary offer of 450000 INR ($6000), which was a good raise from my last salary. It was also my first job where I worked for more than a year – I stayed for almost five.&lt;/p&gt;

&lt;p&gt;I had been promoted to Team Lead by the time I left in 2016, and my salary was 1200000 INR ($16500). But I decided to go as I was not writing much code, my manager was very toxic, and I could not give much time to my family.&lt;/p&gt;

&lt;p&gt;At that startup, though, I got to work with some fantastic managers and developers. We made an incredible team, and I am still proud of it. I think it was one of the best achievements of my career. I learned a lot about people management, which still helps me a lot.&lt;/p&gt;

&lt;p&gt;Also, the growth was tremendous. I was able to get a raise of more than 30% every year until 2015.&lt;/p&gt;

&lt;p&gt;Here are some things I learned from working at the startup:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-fall-in-love-with-your-organization"&gt;
  &lt;/a&gt;
  Don't Fall in Love with Your Organization
&lt;/h3&gt;

&lt;p&gt;Even if you are the best employee at work, you are replaceable. I had worked extra hours for the startup, even though no one asked me to do it.&lt;/p&gt;

&lt;p&gt;Because I loved the organization, I learned the hard way not to make that mistake again. Family time is more critical than an organization where you are just another employee.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-your-skills-up-to-date"&gt;
  &lt;/a&gt;
  Keep Your Skills Up to Date
&lt;/h3&gt;

&lt;p&gt;Keep learning! Sometimes we get stuck into the same tech stack over the years. Then when you go back into the job market, it has already moved on, and there is a new stack everyone's using.&lt;/p&gt;

&lt;p&gt;A lot of organizations have a Pluralsight or other learning platform subscription, so use that if you can. If your company doesn't have one, there are plenty of free learning resources out there you can use instead or in addition.&lt;/p&gt;

&lt;p&gt;Once I decided to leave, I failed many interviews. But it was an eye-opening experience. I had learned everything I needed to work at my old job – but was I updated with what tech stack was currently in demand? No.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-to-pune-for-better-life"&gt;
  &lt;/a&gt;
  Moving To Pune For Better Life
&lt;/h2&gt;

&lt;p&gt;In 2016 I decided to Join Synechron and moved to Pune. I joined as an individual contributor and started working on .NET with Angular.js.&lt;/p&gt;

&lt;p&gt;My salary increased a little, but the cost of living was much cheaper than in Mumbai. My salary was little bit more than last pay, and I started making some extra income in 2017 by conducting online Angular Training. That was a great help as my finances were terrible.&lt;/p&gt;

&lt;p&gt;It was the first time since 2011 that I had worked 40 hours a week, which meant that I had more time for me. I started learning Angular and teaching it as well.&lt;/p&gt;

&lt;p&gt;The team was great, and the client gave me access to Pluralsight, which helped me learn Angular, a new Front-end framework. I completed all the courses by Deborah Kurata to learn more. I got some contracts to teach Angular and led me to get my next job at the Bank.&lt;/p&gt;

&lt;p&gt;By the last quarter of 2017, we realized that the client we were working with was not going to give us any more work, and we needed to be prepared to move to another project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-for-another-bank"&gt;
  &lt;/a&gt;
  Working for Another Bank
&lt;/h2&gt;

&lt;p&gt;In Oct 2017, I joined a Bank with a good increase in salary. It was now around 40% more than last pay, thanks in part to my experience teaching Angular which impressed my hiring manager. I was also getting extra money from my training.&lt;/p&gt;

&lt;p&gt;I got the chance to take complete control of the framework built on top of Angular. I talked to different teams about the feature they needed and helped them implement those features.&lt;/p&gt;

&lt;p&gt;And more than that, I still had enough time to improve myself. I read more about Angular, and made the framework better.&lt;/p&gt;

&lt;p&gt;I even received a performance bonus of 100000 INR ($1300) in 2018.&lt;/p&gt;

&lt;p&gt;I was able to apply learnings from my previous jobs and &lt;strong&gt;I learned to say no&lt;/strong&gt;. The most crucial skill you need as a developer is to be able to say no when you need to.&lt;/p&gt;

&lt;p&gt;There will be times when your manager needs you to work extra hours – say no. One thing I learned is that very few things are critical and they can all usually be done the next day. Especially if it's a new feature and some not crucial bug fix.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-open-source-contribution"&gt;
  &lt;/a&gt;
  Starting Open Source Contribution
&lt;/h2&gt;

&lt;p&gt;By 2019 I decided to get more involved in the Angular community. I decided to start making Open Source contributions and began working with the NgRx and Angular projects.&lt;/p&gt;

&lt;p&gt;I started writing blogs, giving talks, and even created some of my own open source projects. 2019 was more focused on the community, and I started improving my skills in Angular too by learning in public. This was all possible thanks to support from my manager.&lt;/p&gt;

&lt;p&gt;I gained a lot working here. The critical thing I learned was how to stand out, which is still helping me to get new work.&lt;/p&gt;

&lt;p&gt;And here are some more tips to help you improve:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-in-public"&gt;
  &lt;/a&gt;
  Learn in Public
&lt;/h3&gt;

&lt;p&gt;At work, as a developer, we get to face so many issues, but often we just solve the problems and move on. You know you can share that experience with other developers. Start writing blogs, and create content. You will learn more by sharing your knowledge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contribute-to-open-source"&gt;
  &lt;/a&gt;
  Contribute to Open Source
&lt;/h3&gt;

&lt;p&gt;I have learned more by contributing to Open Source than from almost anything else. It lets me promote myself, too. It might even help you get your next job. I got better opportunities because of my Open Source Contributions and the connections I made in those communities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-remote-job"&gt;
  &lt;/a&gt;
  Starting Remote Job
&lt;/h2&gt;

&lt;p&gt;By the end of 2019, I had the opportunity to speak at some conferences, which the bank wouldn't let me do. So I decided to quit, and one of my friends Serkan helped me land a new job because of all the contributions I was making to the Open Source community.&lt;/p&gt;

&lt;p&gt;I received around 50% raise from the last Salary. I was going to start working remotely, which meant more time for family and community efforts. At this job, I got to work on a product and used Nx DevTools for the first time. I also learned how I could improve the performance of the App.&lt;/p&gt;

&lt;p&gt;In 7 months, I implemented SSR and optimized bundle size. I converted the app to smaller libraries, so it was easier to add more apps in the future. I also shared these learnings with the community.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#going-solo"&gt;
  &lt;/a&gt;
  Going Solo
&lt;/h1&gt;

&lt;p&gt;I decided to quit my full-time Job by Oct 2019 and decided I will move into consulting. I had a good connection on Twitter, and everything started with a tweet.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--MCacMCGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1321066332951965697/sYaxh5DO_normal.jpg" alt="Santosh Yadav profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Santosh Yadav
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @santoshyadavdev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Ok just want to check, anyone hiring a remote &lt;a href="https://twitter.com/angular"&gt;@angular&lt;/a&gt; developer, I am looking for a full-time opportunity.  I know not the best time to look for a job.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:17 AM - 17 Jul 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1284009382267637761" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1284009382267637761" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1284009382267637761" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Many developers responded with some solid leads. Finally, I got my first client and started working in October 2020. I got my next client in November 2020, all thanks to my community contributions.&lt;/p&gt;

&lt;p&gt;Around the same time, I became India's First GitHub Star. Both are good-paying clients, and I make much better salary now. I was able to pay off the loans I took out in 2012 to pay medical bills for my daughter and wife.&lt;/p&gt;

&lt;p&gt;So far, the consulting gig is fantastic. I get to help many developers and I improve my knowledge while improving the platform.&lt;/p&gt;

&lt;p&gt;It also helps me give time to the community and support Open Source developers by donating some money towards OSS.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Working for the community did wonders for my career. It took me 12 years to move from $1,000 to a more stable salary, but the journey so far has been worth it. I saw days when I had to think how we would survive, and I wondered how I would give a better life to my daughter and my family.&lt;/p&gt;

&lt;p&gt;The experience at every job has been different. I suggest that you start learning in public. It always helped me give my best and it built up my confidence so that I knew I could sell my skills.&lt;/p&gt;

&lt;p&gt;And don't forget that salary negotiation is an important skill. Never underestimate yourself when negotiating. You can always make more money than you think.&lt;/p&gt;

&lt;p&gt;You can read my life story. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/santoshyadav198613" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YPUK37me--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--juElWzAB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/175071/543e8d00-625a-4e73-b0dc-3e2bcadf6f26.jpeg" alt="santoshyadav198613 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/this-is-learning/my-journey-into-tech-1l6d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My journey into Tech &lt;/h2&gt;
      &lt;h3&gt;Santosh Yadav ・ Oct 17 '20 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#motivation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>motivation</category>
      <category>career</category>
    </item>
    <item>
      <title>How to integrate ESLint with your React Typescript project (2021)</title>
      <author>Brayan Arrieta</author>
      <pubDate>Mon, 31 May 2021 17:33:02 +0000</pubDate>
      <link>https://dev.to/brayanarrieta/how-to-integrate-eslint-with-your-react-typescript-project-2021-182n</link>
      <guid>https://dev.to/brayanarrieta/how-to-integrate-eslint-with-your-react-typescript-project-2021-182n</guid>
      <description>&lt;p&gt;When we are working on a project of the most common problem is the code quality, for that reason, there are several tools that can be integrated into our project to make sure of that. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#importance-of-code-quality"&gt;
  &lt;/a&gt;
  Importance of Code Quality?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s82kWV3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622481802986/i00LPR0R2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s82kWV3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622481802986/i00LPR0R2.png" alt="Importance of Code Quality.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Making software robust&lt;/strong&gt;: The ability to cope up with the errors during the program execution in spite of the unusual conditions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Increasing readability and ease of editing&lt;/strong&gt;: Good quality of code makes sure that codes are written in such a way that makes them highly readable. The use of comments, proper indentation, clear notations, and simplicity in the flow are some factors. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Making program sustainable&lt;/strong&gt;: Software is said to be sustainable when it can survive over time with minimal changes. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Promotes easy transferability&lt;/strong&gt;: Code quality practices make the translation of software across platforms straightforward with minimal changes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Decreasing technical debt&lt;/strong&gt;: One of the biggest problems in software projects is technical debt, a software with poor quality is set to fail early unless a significant number of changes are brought into the program repeatedly and hence increasing the technical debt. The extra development work is time and capital-consuming, which a high-quality code avoids.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, we will see how to integrate ESLint in your React project and some common stuff related to configuration. &lt;a href="https://www.npmjs.com/package/eslint"&gt;ESLint&lt;/a&gt; is an npm package that helps to find and fix problems in projects. Provide some feature as find problems, fix automatically and also customization based in our project and team rules.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-eslint-package-dependency"&gt;
  &lt;/a&gt;
  Install ESLint package dependency
&lt;/h1&gt;

&lt;p&gt;First of all, we need to install ESLint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install eslint --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running that you will see that eslint was added as a development dependency in the package.json file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.26.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The Eslint version could be different there isn't a problem with that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup-eslint-in-our-project"&gt;
  &lt;/a&gt;
  Setup ESLint in our project
&lt;/h1&gt;

&lt;p&gt;Run the next command in the terminal inside the project folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx eslint --init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this command, you will need to answer some questions related to your project and the configuration you want.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;How would you like to use ESLint?&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: to check syntax, find problems, and enforce code style&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What type of modules does your project use?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: JavaScript modules (import/export)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Which framework does your project use?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: React&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Does your project use TypeScript?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Yes&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Where does your code run?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Browser&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;How would you like to define a style for your project?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Use a popular style guide&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Which style guide do you want to follow?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Airbnb: &lt;a href="https://github.com/airbnb/javascript"&gt;https://github.com/airbnb/javascript&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What format do you want your config file to be in?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: JSON&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Would you like to install them now with npm?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Yes&lt;/p&gt;

&lt;p&gt;Then, it will install all the packages needed. After the installation, the development dependencies in the package.json file could something similar to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@typescript-eslint/eslint-plugin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.24.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@typescript-eslint/parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.24.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.26.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-config-airbnb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^18.2.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-plugin-import"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.23.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-plugin-jsx-a11y"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^6.4.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-plugin-react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.23.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-plugin-react-hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that you will that was created a new file called .eslintrc.json at the root of the project with the rules and configuration related to ESLint. The file content should looks something similar to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"browser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"es2021"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"plugin:react/recommended"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"airbnb"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@typescript-eslint/parser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parserOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ecmaFeatures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"jsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ecmaVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"sourceType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"@typescript-eslint"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#running-eslint"&gt;
  &lt;/a&gt;
  Running ESLint
&lt;/h1&gt;

&lt;p&gt;Install &lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint extension&lt;/a&gt; for VSCode, After that need to reload the VSCode window once to get proper linting.*&lt;/p&gt;

&lt;p&gt;ESLint will automatically start detecting errors/warnings in the files. If that's not the case then either your project has no linting errors or ESLint is not properly set up. &lt;/p&gt;

&lt;p&gt;To test if the linting works, we should run the ESLint command in the terminal with folder path and notice output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx eslint .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, you can also add linting to scripts in package.json as a part of your pipeline process in the project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint src/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"lint:fix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint src/* --fix"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"lint:quiet"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint src/* --quiet"&lt;/span&gt;&lt;span class="w"&gt;   
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To automatically fix some errors, you can use ‘--fix’ in the command&lt;/li&gt;
&lt;li&gt;If you want to ignore warnings, you can use ‘ --quiet’ in the command&lt;/li&gt;
&lt;li&gt;To specify some type of files to check you can use '--ext' and pass the extensions that want to be checked&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#eslintignore"&gt;
  &lt;/a&gt;
  .eslintignore
&lt;/h2&gt;

&lt;p&gt;To disable the linting of some files/folders you could create a .eslintignore at the root of the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
dist
coverage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#how-to-solve-common-eslint-rules-problems"&gt;
  &lt;/a&gt;
  How to solve common ESLint rules problems
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: import/extensions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#how-to-fix-it"&gt;
  &lt;/a&gt;
  How to fix it?
&lt;/h4&gt;

&lt;p&gt;In &lt;strong&gt;eslintrc.json&lt;/strong&gt;, over &lt;strong&gt;rules&lt;/strong&gt;, add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"import/extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ignorePackages"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"never"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"tsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"never"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: react/jsx-filename-extension&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#how-to-fix-it"&gt;
  &lt;/a&gt;
  How to fix it?
&lt;/h4&gt;

&lt;p&gt;In &lt;strong&gt;eslintrc.json&lt;/strong&gt;, over &lt;strong&gt;rules&lt;/strong&gt;, add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"react/jsx-filename-extension"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"warn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;".tsx"&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: import/no-extraneous-dependencies&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#how-to-fix-it"&gt;
  &lt;/a&gt;
  How to fix it?
&lt;/h4&gt;

&lt;p&gt;This is common when we are working in the devDependencies. To fix just add the following in &lt;strong&gt;eslintrc.json&lt;/strong&gt; over &lt;strong&gt;rules&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"import/no-extraneous-dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: import/no-unresolved&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#how-to-fix-it"&gt;
  &lt;/a&gt;
  How to fix it?
&lt;/h4&gt;

&lt;p&gt;Install &lt;a href="https://www.npmjs.com/package/eslint-import-resolver-typescript"&gt;eslint-import-resolver-typescript&lt;/a&gt; package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install eslint-import-resolver-typescript --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that on eslintrc.json add a new property called settings&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"settings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"import/resolver"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Eslint is an awesome tool that we need to integrate into every project due that improve the code quality in our React projects. Need to consider every specific case of use, just to make sure the best performance and render time speed in our React projects. &lt;/p&gt;

&lt;p&gt;I will be updating this post based on your comments and recommendations so let me know in any case that you have a common rule problem with Eslint and React that can be added or something like that. Thanks for all! 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/brayanarrieta"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bs6qmXj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbrayanarrieta%26button_colour%3D5F7FFF%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/airbnb/javascript"&gt;Airbnb Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/eslint-import-resolver-typescript"&gt;eslint-import-resolver-typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/eslint"&gt;ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codegrip.tech/productivity/why-is-code-quality-important/"&gt;Why is code quality important?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>eslint</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
