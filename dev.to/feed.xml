<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Namespacing in JavaScript</title>
      <author>Himanshu Tiwari</author>
      <pubDate>Sun, 17 Jan 2021 12:20:29 +0000</pubDate>
      <link>https://dev.to/himanshutiwari15/namespacing-in-javascript-5g82</link>
      <guid>https://dev.to/himanshutiwari15/namespacing-in-javascript-5g82</guid>
      <description>&lt;p&gt;One of the most confusing things in JavaScript, I found was namespacing. So, I learned about it and thought to share the notes with everyone who is confused about it.&lt;/p&gt;

&lt;p&gt;When we make applications and as our application grows and becomes more complex, it is likely that at some point two variables or functions will end up having the same name, resulting in conflict.&lt;/p&gt;

&lt;p&gt;To avoid this we can make use of namespaces, which will create a local scope for our variables and functions. Javascript doesn't actually have namespaces like other programming languages, so what we'll see there are alternative ways of achieving the same outcome. The most common way of simulating namespaces is via objects.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's talk about some approaches which you can often use and often see others using it&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-by-direct-assignment" class="anchor"&gt;
  &lt;/a&gt;
  1. By Direct Assignment
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;webApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="nx"&gt;webApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;webApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;webApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;webApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;webApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that the names "id" or "next" are generic names that could easily be repeated many times in a large web application. Instead of adding more words to our variables, like "idOfwebApp", and making them separate in the global scope, we place them inside an object that will hold all information about our web app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;So, let's break the above code for this example and you will automatically understand for others below.&lt;/em&gt;&lt;br&gt;
If we take a close look here, then what is happening is, it is acting as an object having a key named id and 2 functions. &lt;br&gt;
If we write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;//output will be 0 itself, just like an object.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can use &lt;strong&gt;this&lt;/strong&gt; instead of using the same big long names   &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#2-using-object-literal-notation" class="anchor"&gt;
  &lt;/a&gt;
  2. Using Object Literal Notation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;webApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="na"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is the most common thing we often see, the most common namespacing we basically use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-the-module-pattern" class="anchor"&gt;
  &lt;/a&gt;
  3. The Module Pattern
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;webApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
        &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="na"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;  
&lt;span class="p"&gt;})();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is where things turn tricky!!!&lt;br&gt;
Everything must be clear to you but what that "();" is representing is -- self-invoking function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-why-module-approach-over-object-litteral" class="anchor"&gt;
  &lt;/a&gt;
  So Why Module approach over Object Litteral
&lt;/h4&gt;

&lt;p&gt;Object literal notation is rigid – it's all about property assignments, with no room for supporting logic. Moreover, all properties must be initialized and property values cannot easily cross-reference one another. The module pattern suffers none of these constraints and gives us the added benefit of privacy.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;The use of the Module Approach is flexible for big Projects and can be used whereas the Object approach is better for mini-projects and addons less complexity.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#further-read" class="anchor"&gt;
  &lt;/a&gt;
  Further Read
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ultimatecourses.com/blog/mastering-the-module-pattern"&gt;Read More about Module Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks For the read, hope you learned something :)&lt;br&gt;
Found my grammatical mistakes, haha comment them down&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>frontend</category>
      <category>webdevlopment</category>
    </item>
    <item>
      <title>Tooltip using only CSS</title>
      <author>Rajiv</author>
      <pubDate>Sun, 17 Jan 2021 12:11:08 +0000</pubDate>
      <link>https://dev.to/thoughtlessmind/tooltip-using-only-css-2oh4</link>
      <guid>https://dev.to/thoughtlessmind/tooltip-using-only-css-2oh4</guid>
      <description>&lt;p&gt;Using a tooltip is a great way to pass information to the user in a very minimal and efficient way. It reduces the contents from the page which is important to show but not needed to show all the time.&lt;/p&gt;

&lt;p&gt;But when it comes to adding tooltips to the website, we developers generally use a library for this, which is definitely good as it gives a lot of customizations and controls. But in a situation when tooltips are required but not on a large scale instead, in certain places on the page, then it kinda feels useless to carry around such big libraries for this.  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Required Knowledge:-&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;General working knowledge of &lt;code&gt;HTML&lt;/code&gt; and &lt;code&gt;CSS&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;How &lt;code&gt;data&lt;/code&gt; attribute works in HTML and CSS. For reference check &lt;a href="https://css-tricks.com/a-complete-guide-to-data-attributes/#styling"&gt;this CSS-tricks article&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Understanding of pseudo-selectors in CSS&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;p&gt;In this, we'll be creating a tooltip using only CSS. There are several ways to create a tooltip in CSS. In this, we'll be using &lt;code&gt;pseudo-selectors&lt;/code&gt; of CSS. One benefit of using this method is that there's no need to create an actual element in the HTML.   &lt;/p&gt;

&lt;p&gt;First of all, on whichever element you want to show the tooltip, add a &lt;code&gt;data&lt;/code&gt; attribute &lt;code&gt;data-customTooltip="Tooltip text"&lt;/code&gt;. Also, pass the text you wanna show on the tooltip.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;index.html&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;data-customTooltip=&lt;/span&gt;&lt;span class="s"&gt;"Tooltip text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Hover on me to see tooltip
&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it, this is all we need in HTML. Now, let's add CSS to it. Here we'll be styling the tooltip using data attribute selector. &lt;a href="https://css-tricks.com/a-complete-guide-to-data-attributes/#styling"&gt;Read here&lt;/a&gt; more about it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;styles.css&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-customTooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-customTooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#222&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data-customTooltip&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.14s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we're selecting the elements which have &lt;code&gt;data-customTooltip&lt;/code&gt; attribute on them and creating a pseudo-element using &lt;code&gt;:after&lt;/code&gt;. Till now a pseudo-element for the tooltip is created but it's not visible as there is &lt;code&gt;scale(0)&lt;/code&gt; in the style. &lt;br&gt;
  Now change the scale to 1 on hover on the parent element.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;style.css&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-customTooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:hover:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And here is our tooltip....  &lt;/p&gt;

&lt;p&gt;Position can be changed according to requirement by giving suitable &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, and &lt;code&gt;right&lt;/code&gt; values along with translate property.   &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'll write another blog where we'll make the position of the tooltip dynamic and also incorporate light and dark themes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJ1osW8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m8gjlpa3vo66r0lm8l2f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJ1osW8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m8gjlpa3vo66r0lm8l2f.gif" alt="tooltipDemo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now just pass &lt;code&gt;data-customTooltip="tooltip text"&lt;/code&gt; attribute wherever you want to add a tooltip.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Codepen demo  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/thoughtlessmind/embed/rNMoLWo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS:- This is my first blog, if there's any mistake I'm making or there's any scope of improvement, please feel free to comment.&lt;/em&gt;😀&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Prototypes in JavaScript</title>
      <author>M V Ganesh Kumar</author>
      <pubDate>Sun, 17 Jan 2021 10:58:34 +0000</pubDate>
      <link>https://dev.to/mvganeshkumar06/prototypes-in-javascript-40md</link>
      <guid>https://dev.to/mvganeshkumar06/prototypes-in-javascript-40md</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript is a prototype based language it uses prototypes for property, method lookup and code re usability through inheritance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this post we'll learn about prototypes, prototype chain and prototypical inheritance.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prototype-and-prototype-chain" class="anchor"&gt;
  &lt;/a&gt;
  Prototype and prototype chain
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In JavaScript there are two types of data one is primitive&lt;br&gt;
(numbers, strings, boolean) and the other is object type (arrays, object literals and functions).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both the primitive and the object types are wrapped by their respective objects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The numbers are wrapped by &lt;code&gt;Number&lt;/code&gt;, strings are wrapped by &lt;code&gt;String&lt;/code&gt;, booleans are wrapped by &lt;code&gt;Boolean&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The arrays are wrapped by &lt;code&gt;Array&lt;/code&gt;, objects are wrapped by &lt;code&gt;Object&lt;/code&gt;, functions are wrapped by &lt;code&gt;Function&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All these wrapper objects have a property called prototype.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This prototype is an object which contains all the reusable properties, methods and it also has the prototype of its parent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The parent of all these wrapper objects is the global object called &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The chain of objects linked together by the prototypes is called as the prototype chain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now let us visualize the prototype chain using an example.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--idPcygY---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d66kyrtvwot2ea5b05yx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--idPcygY---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d66kyrtvwot2ea5b05yx.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Let use see how this works in code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To get the prototype of a variable we can use the &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrWrapperProto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrWrapperProto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Array&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;objectProto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrWrapperProto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectProto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Object&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;objectParentProto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectProto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectParentProto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#property-method-lookup" class="anchor"&gt;
  &lt;/a&gt;
  Property, method lookup
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you are trying to access a property or method, first JavaScript looks in the current object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If it is not found then using the prototype chain it looks up in the parent object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This continues till the property or method is found or null is reached.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is how the lookup for property or method takes place.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prototypical-inheritance" class="anchor"&gt;
  &lt;/a&gt;
  Prototypical inheritance
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The main use case of prototypes is to reuse code by inheritance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And the inheritance is possible because of the prototype chain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's take an example to understand.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;isTalkative&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;talk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Talking...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// John&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTalkative&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talk&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Talking...&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here we are using the &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; and setting the prototype of the student as person.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This means that the protoype of student will be person or in other words the student prototypically inherits the properties and methods from the person.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Due to this the student will have access to all the properties and methods in person.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's visualize the prototype chain for the above example.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NNQMabuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9fhnke1abr09jmwlbxij.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NNQMabuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9fhnke1abr09jmwlbxij.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here the prototype of student is person, the prototype of person is &lt;code&gt;Object&lt;/code&gt; and the prototype of &lt;code&gt;Object&lt;/code&gt; is null.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This means that the student will have access to all the properties and methods from person and &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Similarly the person will have access to all the properties and methods from the &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-objects" class="anchor"&gt;
  &lt;/a&gt;
  Creating objects
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Now that we have learnt about prototypes let us see how to create our own objects using prototypes.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTalkative&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Talking...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 12&lt;/span&gt;

&lt;span class="nx"&gt;john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talk&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Talking...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here the student function is used to construct or create an object so it is called as &lt;code&gt;constructor function&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is a common convention that the constructor functions should have upper camel casing to identify them as constructors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword points to the object that is created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If you want to learn more about how this keyword works, you can check out my post &lt;a href="https://dev.to/mvganeshkumar06/how-this-keyword-works-in-javascript-29f3"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note that the arrow functions can not be used to create constructor functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are setting the property and method in the prototype of the function so that all the objects will be able to access them by prototypical inheritance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; keyword is used to create objects using the constructor function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Object.create()&lt;/code&gt; method is used to create objects from object literals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's see how to create objects from object literals.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;isHappy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi I'm &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHappy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Hi I'm John&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;john&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here the &lt;code&gt;Object.create()&lt;/code&gt; method sets the prototype of john as person object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Note that in ES6, classes was introduced to JavaScript and they are used to create objects, but it is just a change in the syntax and behind the scenes it still uses prototype based inheritance&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Everything in JavaScript has a wrapper object which contains the prototype property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prototype is an object that contains all the reusable properties, methods along with the prototype of its parent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prototype chain is the chain of objects linked by the prototypes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript uses the prototype chain to lookup properties and methods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prototypical inheritance is the ability to reuse the properties and methods from the parent objects in the prototype chain.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Cold Hard Truths About Software Engineering I Understood After 9+ Years</title>
      <author>Nick Bull</author>
      <pubDate>Sun, 17 Jan 2021 10:48:07 +0000</pubDate>
      <link>https://dev.to/nickbulljs/cold-hard-truths-about-software-engineering-i-understood-after-9-years-5483</link>
      <guid>https://dev.to/nickbulljs/cold-hard-truths-about-software-engineering-i-understood-after-9-years-5483</guid>
      <description>&lt;p&gt;Software engineering is not a magical place where everyone has a six-figure salary, works on projects they like, and changes the world.&lt;/p&gt;

&lt;p&gt;Like any job, software engineering has its good, bad, and ugly sides.&lt;/p&gt;

&lt;p&gt;Today I'm going to talk about the ugly sides that I've learned over 9 years as a programmer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#communication-skills-matter-more" class="anchor"&gt;
  &lt;/a&gt;
  Communication Skills Matter More
&lt;/h1&gt;

&lt;p&gt;Many developers confuse the terms &lt;em&gt;programming&lt;/em&gt; and &lt;em&gt;software development&lt;/em&gt;. It’s two different activities that have one main thing in common – coding.&lt;/p&gt;

&lt;p&gt;Programming is about solving problems with code. It is often a solo activity.&lt;/p&gt;

&lt;p&gt;Software development is about design software from an engineering perspective with consideration for end-users, clients, and business needs. It is often a team activity.&lt;/p&gt;

&lt;p&gt;To be successful in programming, you need to be great at solving problems with the code. But it takes a lot more to be successful in software development. Coding is not the main priority here. Actually, it’s number 3.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Business&lt;/li&gt;
&lt;li&gt;People&lt;/li&gt;
&lt;li&gt;Coding &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s why coding skills are not enough to lead to a successful career.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"What to do? Learn about business or people?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Good idea. But here is the better one.&lt;/p&gt;

&lt;p&gt;Learn one skill can give you significant improvements in all three areas.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"What's this?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Communication skills.&lt;/p&gt;

&lt;p&gt;Very few software engineering jobs are 100% or even 70% or 50% technical, most teams spend a lot of time in meetings, planning, coordination, and team buildings, where communication skill plays the main role.&lt;/p&gt;

&lt;p&gt;Until I realized this, communication was my Achilles heel and kept me from growing in my career. After I started to improve it, my position, responsibilities, and salary began to grow.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#faang-are-highly-overrated" class="anchor"&gt;
  &lt;/a&gt;
  FAANG Are Highly Overrated
&lt;/h1&gt;

&lt;p&gt;FAANG companies (tech giants like Apple, Facebook, Google, and others) have money for marketing companies and big salaries to make developers from all over the world fighting to work at one of them, and it's obvious why. You work in a “famous” company, have many bonuses like health insurance and free meals, and the line &lt;em&gt;"Worked at FAANG"&lt;/em&gt; on your resume gives you a great opportunity right after quitting it.&lt;/p&gt;

&lt;p&gt;But not everything is as magical as it seems.&lt;/p&gt;

&lt;p&gt;Here are big 3 disadvantages I realized about FAANG that stopped me from wanting to work for them:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are a small cog in a big machine.&lt;/p&gt;

&lt;p&gt;Many developers have wet dreams that they will work on significant and famous products when they get a job at Google, like YouTube or Google Search. But in reality, it’s often not. There's a good chance you'll be working on a small part of some internal Google product that no one will ever see outside of your team of 10 people. Your area of responsibilities may be so small that it will be almost invisible. That feeling of a small cog in a big machine can make you miserable in the long term if you're not suited for it. I personally hate this feeling. That’s why I’m not ready to trade freedom for the opportunity to work for a large and well-known company.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You are going to be putting the job in front of everything else in your life.&lt;/p&gt;

&lt;p&gt;After reading tons of articles where people working in FAANG complain about their real working hours and how they don’t have time for their families, I realized that it’s not for me. Before applying for a job in some big tech giant, I suggest you read &lt;a href="https://www.teamblind.com/post/Working-for-FAANG-its-not-just-join-and-kick-back-ttSWyGNF"&gt;this great article&lt;/a&gt;, where the person who is working in Apple and getting $625.000 per year, questioning what he trades for money.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corporate culture.&lt;/p&gt;

&lt;p&gt;Corporate culture is not for all. It’s often a rat race, whether you work at Google or in a traditional bank. Corporate culture is a systematic structure for benefits, pay raises, and promotions. In such a big system, your work can easily become invisible no matter how good it is or disregarded because of management ambitions, even with the best intentions at all levels. Decide for yourself, is it worth it to work at FAANG and play political games or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Working for FAANG companies has its benefits, but it’s not the best possible job you could get. Always learn about the pros and cons of the company before applying for a job.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nobody-cares" class="anchor"&gt;
  &lt;/a&gt;
  Nobody Cares
&lt;/h1&gt;

&lt;p&gt;I have a friend who was working as a software engineer in a big company and one day he had a personal problem during the workweek, so he needed to take a couple of days off to solve it.&lt;/p&gt;

&lt;p&gt;He went to his manager, told him about the situation, and asked for a day off. The manager easily approved it.&lt;/p&gt;

&lt;p&gt;After a couple of weeks, when my friend and his manager have a 1:1 meeting, he was blamed for wasting work time on personal problems, &lt;strong&gt;even when he took a day off, in his free time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After this situation, he thought it is not okay to place his needs above the company’s needs. That job must be the #1 priority in your life.&lt;/p&gt;

&lt;p&gt;And it’s not a single case. After 9 years of working in the tech field, I heard dozens of stories similar to this and realized that most companies don’t care. Don’t care about who you are, what you like, and what you stand for. Companies only care about one thing, whether you can solve their problem or not.&lt;/p&gt;

&lt;p&gt;When my friend told me this story couple of weeks after it happened, I told him these words that changed his mind about priorities by 180 degrees:&lt;/p&gt;

&lt;p&gt;“You will change many jobs in your lifetime. You will forget 90% of the people you worked with. Your managers will change every couple of months, and everyone will have a different leadership style and strategy for developing the product. You will meet dozens of different company cultures, and every company will claim that only their culture is authentic.&lt;/p&gt;

&lt;p&gt;A lot of things will come and go from your life, but they are temporary things. The only permanent thing is you.&lt;/p&gt;

&lt;p&gt;When you realize this, the number one priority for you will become not some job or some product, but you.&lt;/p&gt;

&lt;p&gt;Do your best job, but do it for yourself, not for someone else.”&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#not-everything-you-will-do-is-what-you-love" class="anchor"&gt;
  &lt;/a&gt;
  Not Everything You Will Do Is What You Love
&lt;/h1&gt;

&lt;p&gt;What is the first association when you hear the words “software engineer”?&lt;/p&gt;

&lt;p&gt;Probably “coding.”&lt;/p&gt;

&lt;p&gt;But it’s not the first association for companies.&lt;/p&gt;

&lt;p&gt;Their association is “can solve our problem with code.”&lt;/p&gt;

&lt;p&gt;Both associations are very similar but at the same time absolutely different.&lt;/p&gt;

&lt;p&gt;The truth is you are paid not for “just coding,” you are paid to solve business problems with the code. And if you can solve them without coding, companies will still pay you.&lt;/p&gt;

&lt;p&gt;I know inside most software engineers are programmers, and we love coding. We love building things with the code. But as I said, programming is not the same as software engineering.&lt;/p&gt;

&lt;p&gt;In software engineering, business and its problems stay in the first place, with all its downsides. It’s not a side project you are passionate about. You will do things you don't agree with, you will work with technologies you don’t know, and you will meet people you don’t like.&lt;/p&gt;

&lt;p&gt;Job is a JOB.&lt;/p&gt;

&lt;p&gt;It’s an adjustment to get used to working every day for 8 hours. It’s an adjustment working with different people with different personalities.&lt;/p&gt;

&lt;p&gt;What you are doing is pays you very well, but it’s still a job.&lt;/p&gt;

&lt;p&gt;In the end, I want to quote the brilliant words of one software engineer:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“In the end, all software engineering projects boil down to "get data from here, build some pipes for it to get to this other place, maybe transform it a bit, and maybe display it" ad infinitum. 90% of the code you will write isn't interesting, just necessary.”&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-the-end" class="anchor"&gt;
  &lt;/a&gt;
  In the end...
&lt;/h1&gt;

&lt;p&gt;I’m writing a book &lt;strong&gt;“Nail The Technical Interview And Land A High Paying Job”&lt;/strong&gt; where I reveal everything I've learned about interviews during 6+ years working as a software engineer &lt;em&gt;(applied more than 110 times, failed 25+ job interviews, and got 17 job offers in summary)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What's in?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✔︎ A proven system of how to exactly prepare for each step of a job interview, pass it successfully, get an offer, and land a job.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✔︎ How to get a job offer even without a degree and work experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✔︎ The missing knowledge what &lt;em&gt;ONE&lt;/em&gt; thing every employer is looking for in every candidate.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✔︎ Questions to ask recruiters that make you instantly stand out from the other candidates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✔︎ The exact steps to create a resume that sells you enough to invite you to an interview and get a recruiter phone call.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And many more on how to exactly prepare for a technical interview and nail it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nailthetechnicalinterview.com/"&gt;Join here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have a great one!&lt;/p&gt;

&lt;p&gt;– Nick&lt;/p&gt;

&lt;p&gt;Also, every week, I send out my "3-2-1" newsletter with 3 hand-picked articles from me, 2 web development guides from others, and 1 useful Tweet I enjoyed.&lt;/p&gt;

&lt;p&gt;🔥  &lt;a href="https://nickbulljs.com/newsletter/"&gt;Join 800+ developers here&lt;/a&gt;🔥&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Setup Vue3 with Element UI</title>
      <author>Becca Bycott</author>
      <pubDate>Sun, 17 Jan 2021 08:11:56 +0000</pubDate>
      <link>https://dev.to/beccabycott/setup-vue3-with-element-ui-54fe</link>
      <guid>https://dev.to/beccabycott/setup-vue3-with-element-ui-54fe</guid>
      <description>&lt;p&gt;Element UI is my favorite Vue UI library. A popular top-class component library with more than 50K Github stars. And they already have &lt;a href="https://dev.to/iamkun/element-ui-for-vue-3-0-is-coming-4o6o"&gt;a version that works with Vue3&lt;/a&gt; - Element Plus.&lt;/p&gt;

&lt;p&gt;I'd like to share how to set up a Vue3 project with &lt;a href="https://github.com/element-plus/element-plus"&gt;Element Plus&lt;/a&gt; using Vue CLI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-the-latest-version-of-vue-cli" class="anchor"&gt;
  &lt;/a&gt;
  Install the latest version of Vue CLI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g @vue/cli
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-project-with-vue-cli" class="anchor"&gt;
  &lt;/a&gt;
  Create a project with Vue CLI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue create my-app
// And then select Vue 3 option.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8GEaZ0H1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vhyq695ezpvqpg4u0gk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8GEaZ0H1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vhyq695ezpvqpg4u0gk0.png" alt="Vue CLI VUE3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-element-plus" class="anchor"&gt;
  &lt;/a&gt;
  Install Element Plus
&lt;/h3&gt;

&lt;p&gt;You can add Element Plus to your project simply via its Vue CLI plugin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd my-app
vue add element-plus
npm run serve
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aY0k8qNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ujezudjh90xxlopmvbe1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aY0k8qNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ujezudjh90xxlopmvbe1.png" alt="Element Plus Vue CLI plugin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can use Element Plus components in your project like the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;el-button type="primary"&amp;gt; Element UI &amp;lt;/el-button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jx5CA-8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vq2uo99zp2djyl1auqht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jx5CA-8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vq2uo99zp2djyl1auqht.png" alt="Element Plus with Vue 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out this repository with this configuration done: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/element-plus/element-plus-starter"&gt;https://github.com/element-plus/element-plus-starter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>YouTua - Download Videos  in the best Quality available..</title>
      <author>Dhruv Panchal</author>
      <pubDate>Sun, 17 Jan 2021 03:36:38 +0000</pubDate>
      <link>https://dev.to/dhhruv/youtua-download-videos-in-the-best-quality-available-ikl</link>
      <guid>https://dev.to/dhhruv/youtua-download-videos-in-the-best-quality-available-ikl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-i-built" class="anchor"&gt;
  &lt;/a&gt;
  What I built:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;YouTua is a GUI Program to download videos from various supported sites. It requires the Python interpreter, version 2.6, 2.7, or 3.2+, and it is not platform specific. It should work on your Unix box, on Windows or on macOS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/dhhruv/YouTua"&gt;&lt;br&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wEUTnj5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/downloads/dhhruv/YouTua/total%3Fcolor%3Dimportant"&gt;&lt;br&gt;
    &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screenshots" class="anchor"&gt;
  &lt;/a&gt;
  Screenshots:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1AQAyCJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/72680045/103865422-32378200-50ea-11eb-9d30-113c98dceb47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1AQAyCJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/72680045/103865422-32378200-50ea-11eb-9d30-113c98dceb47.png" alt="YouTua Working Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  Description:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;YouTua is a GUI Program to download videos from various supported sites. Using this software you can download videos from various supported websites for any purposes. It can be used by journalists and human rights organizations to save eyewitness videos, by educators to save videos for classroom use, by Uploaders to save backup copies of their own uploaded videos, and by users worldwide to watch videos on hardware that can’t run a standard web browser, or to watch videos in their full resolution over slow or unreliable Internet connections.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#link-to-source-code" class="anchor"&gt;
  &lt;/a&gt;
  Link to Source Code:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/dhhruv/YouTua"&gt;YouTua Source Code&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#permissive-license" class="anchor"&gt;
  &lt;/a&gt;
  Permissive License:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-" class="anchor"&gt;
  &lt;/a&gt;
  How To Use !
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Select the OUTPUT Folder by manually adding path or selecting the FOLDER using the SELECT FOLDER Button.
(By Default the OUTPUT FOLDER is set to the current directory.)&lt;/li&gt;
&lt;li&gt;Enter the Link of Video you want to download.&lt;/li&gt;
&lt;li&gt;For Downloading video with RESOLUTION&amp;lt;=720p proceed normally to download.&lt;/li&gt;
&lt;li&gt;For Downloading video with MAXIMUM RESOLUTION (=&amp;gt;720p) available according the video link, check the MAX RES Settings and choose the output format (.mp4 or .mkv) as per preferences. &lt;/li&gt;
&lt;li&gt;To download the available subtitles check the subtitles button.&lt;/li&gt;
&lt;li&gt;Click START DOWNLOAD and enjoy.
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#background" class="anchor"&gt;
  &lt;/a&gt;
  Background:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I've seen over the past time that students need to download videos regarding there lectures because the Internet connectivity in many areas is still too slow to watch live lectures and so to make an app that is easy to use and they can download videos according to their preferred quality with minimal data loss. That thing inspired me to make something which can be useful and make some difference.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-i-built-it" class="anchor"&gt;
  &lt;/a&gt;
  How I built it:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;During the making of this software, I learned many new things in Python programming language including scrapping and many other aspects in the same domain. I'm still working on making it even better and easy to use. Next feature will be to download the given in quality as asked by the user.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>productivity</category>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>Automate file renaming with Node.js scripts</title>
      <author>Emma Goto 🍙</author>
      <pubDate>Sat, 16 Jan 2021 23:52:47 +0000</pubDate>
      <link>https://dev.to/emma/automate-file-renaming-with-node-js-scripts-cc0</link>
      <guid>https://dev.to/emma/automate-file-renaming-with-node-js-scripts-cc0</guid>
      <description>&lt;p&gt;Node.js scripts can be a real time-saver when you want to automate common tasks. In this post, you'll learn how to write your own script to rename files using &lt;a href="https://nodejs.org/api/fs.html"&gt;fs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-and-running-your-script" class="anchor"&gt;
  &lt;/a&gt;
  Creating and running your script
&lt;/h2&gt;

&lt;p&gt;I have a couple of scripts that I use for my blog, which I keep inside of the &lt;code&gt;scripts&lt;/code&gt; folder in the blog's repository.&lt;/p&gt;

&lt;p&gt;Here I've created a file named &lt;code&gt;renameFile.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// scripts/renameFile.js&lt;/span&gt;&lt;span class="cp"&gt;
#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first line is known as a &lt;strong&gt;shebang line&lt;/strong&gt; and makes sure that the script is executed with Node.js.&lt;/p&gt;

&lt;p&gt;You can either run the script directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node ./scripts/renameFile.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or if you're storing it in your repository, you can add a shortcut to run it in your &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rename"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./scripts/renameFile.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Depending on whether you’re using Yarn or npm, you can run this script with one of these commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rename
&lt;span class="c"&gt;# or&lt;/span&gt;
npm run rename
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#make-sure-to-install-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Make sure to install dependencies
&lt;/h2&gt;

&lt;p&gt;In the sections below, we’ll be making use of a library called &lt;a href="https://nodejs.org/api/fs.html"&gt;fs&lt;/a&gt;. Make sure to install your dependencies before you run the script!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; fs
&lt;span class="c"&gt;# or&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; fs
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-rename-a-file-with-fs-rename" class="anchor"&gt;
  &lt;/a&gt;
  How to rename a file with fs rename
&lt;/h2&gt;

&lt;p&gt;fs provides a lot of useful functions for modifying your files.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;rename&lt;/code&gt; function will &lt;strong&gt;asynchronously&lt;/strong&gt; rename a file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rename&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldFileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/Users/emma/src/emgoto.com/old.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newFileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/Users/emma/src/emgoto.com/new.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The file name needs to contain the full path of the file. We can use &lt;code&gt;process.cwd()&lt;/code&gt; to get the file path of the directory that the script was run from.&lt;/p&gt;

&lt;p&gt;So instead of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/Users/emma/src/emgoto.com/old.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;/old.txt`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You’ll also notice that we’re passing in a callback function as the third argument. This callback will get executed once the rename is successful.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Even if you don’t want a callback executed, this argument is not optional. You can pass in &lt;code&gt;() =&amp;gt; {}&lt;/code&gt; if you don’t want anything to happen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alternatively, you can also synchronously rename a file using &lt;code&gt;renameSync&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;renameSync&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;renameSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This means while the file is being renamed, the rest of the script won't execute.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rename-vs-renamesync-which-should-i-use" class="anchor"&gt;
  &lt;/a&gt;
  rename vs renameSync: which should I use?
&lt;/h2&gt;

&lt;p&gt;If you’re writing a complex script, you may be able to improve performance by using asynchronous methods. In my case, since the scripts I write are simple, it doesn’t make too much of a difference.&lt;/p&gt;

&lt;p&gt;The main thing to keep in mind is that, if you are renaming a file &lt;strong&gt;asynchronously&lt;/strong&gt; and then directly after you try and modify the new file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- async&lt;/span&gt;
&lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You could end up in a situation where you're executing &lt;code&gt;doStuff&lt;/code&gt; on a file that doesn't exist yet!&lt;/p&gt;

&lt;p&gt;In this scenario, make sure to either do it synchronously with &lt;code&gt;renameSync&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;renameSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or, make sure you modify the new file inside of the callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-rename-a-folder-with-fs-rename" class="anchor"&gt;
  &lt;/a&gt;
  How to rename a folder with fs rename
&lt;/h2&gt;

&lt;p&gt;You can also use &lt;code&gt;rename&lt;/code&gt; and &lt;code&gt;renameSync&lt;/code&gt; to rename folders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-find-files-with-glob" class="anchor"&gt;
  &lt;/a&gt;
  How to find files with glob
&lt;/h2&gt;

&lt;p&gt;In the above example, we are renaming a specific file. In real-life, you'll probably want to find a list of files that match a certain pattern.&lt;/p&gt;

&lt;p&gt;Let’s say you were looking for any zip files inside of your app’s &lt;code&gt;src&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;glob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;glob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;**&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*.zip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Breaking down the code above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;process.cwd()&lt;/code&gt; gets the current directory (from where you ran the script)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;join()&lt;/code&gt; will join all the strings you pass in with &lt;code&gt;/&lt;/code&gt; to make a path&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;glob.sync()&lt;/code&gt; does a pattern-matching search to try and find any files that match the string you provided. (There is also an async version, &lt;code&gt;glob()&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will return an array of files that end in &lt;code&gt;.zip&lt;/code&gt;. If you were only expecting one file, you’ll be able to grab it from the 0th index of the array (&lt;code&gt;files[0]&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-pass-in-arguments-to-the-script" class="anchor"&gt;
  &lt;/a&gt;
  How to pass in arguments to the script
&lt;/h2&gt;

&lt;p&gt;You might want to pass in an argument to your script, like the name of the file you wish to rename.&lt;/p&gt;

&lt;p&gt;You can pass in as many arguments as you like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rename argOne argTwo
&lt;span class="c"&gt;# or&lt;/span&gt;
npm run rename argOne argTwo
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And then you can get them out using the &lt;code&gt;process.argv&lt;/code&gt; array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// argOne&lt;/span&gt;
&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// argTwo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(The 0th and 1st spots in the array will contain &lt;code&gt;node&lt;/code&gt; and the name of your script).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Automating the process of file renaming can speed up an otherwise tedious process. With this post, you should now feel comfortable to write your own Node.js scripts!&lt;/p&gt;

&lt;p&gt;I would encourage you to check out the &lt;a href="https://nodejs.org/api/fs.html"&gt;fs documentation&lt;/a&gt; to see other useful methods for file deletion and modification.&lt;/p&gt;

</description>
      <category>node</category>
    </item>
    <item>
      <title>How to securely store passwords?</title>
      <author>TECH SCHOOL</author>
      <pubDate>Sat, 16 Jan 2021 22:11:59 +0000</pubDate>
      <link>https://dev.to/techschoolguru/how-to-securely-store-passwords-3cg7</link>
      <guid>https://dev.to/techschoolguru/how-to-securely-store-passwords-3cg7</guid>
      <description>&lt;p&gt;Hello everyone, welcome back to the backend master class!&lt;/p&gt;

&lt;p&gt;In this lecture, we’re gonna learn how to securely store users’ password in the database.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B3xnJI2lHmc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link to the &lt;a href="https://bit.ly/backendmaster"&gt;full series playlist on Youtube&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;And its &lt;a href="https://github.com/techschool/simplebank"&gt;Github repository&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-store-password" class="anchor"&gt;
  &lt;/a&gt;
  How to store password
&lt;/h2&gt;

&lt;p&gt;As you already know, we should never ever store naked passwords! So the idea is to hash it first, and only store that hash value.&lt;/p&gt;

&lt;p&gt;Basically, the password will be hashed using &lt;code&gt;brypt&lt;/code&gt; hashing function to produce a hash value.&lt;/p&gt;

&lt;p&gt;Besides the input password, &lt;code&gt;bcrypt&lt;/code&gt; requires a &lt;code&gt;cost&lt;/code&gt; parameter, which will decide the number of key expansion rounds or iterations of the algorithm.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Bcrypt&lt;/code&gt; also generates a random &lt;code&gt;salt&lt;/code&gt; to be used in those iterations, which will help protect against the &lt;a href="https://en.wikipedia.org/wiki/Rainbow_table"&gt;rainbow table attack&lt;/a&gt;. Because of this random &lt;code&gt;salt&lt;/code&gt;, the algorithm will give you a completely different output hash value even if the same input password is provided.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cost&lt;/code&gt; and &lt;code&gt;salt&lt;/code&gt; will also be added to the hash to produce the final hash string, which looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t6BmEVLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bv47cvavn5egi1fmjp72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t6BmEVLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bv47cvavn5egi1fmjp72.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this hash string, there are 4 components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first part is the &lt;code&gt;hash algorithm identifier&lt;/code&gt;. &lt;code&gt;2A&lt;/code&gt; is the identifier of the &lt;code&gt;bcrypt&lt;/code&gt; algorithm.&lt;/li&gt;
&lt;li&gt;The second part is the &lt;code&gt;cost&lt;/code&gt;. In this case, the cost is &lt;code&gt;10&lt;/code&gt;, which means there will be &lt;code&gt;2^10 = 1024&lt;/code&gt; rounds of key expansion.&lt;/li&gt;
&lt;li&gt;The third part is the &lt;code&gt;salt&lt;/code&gt; of length &lt;code&gt;16 bytes&lt;/code&gt;, or &lt;code&gt;128 bits&lt;/code&gt;. It is encoded using &lt;code&gt;base64&lt;/code&gt; format, which will generate a string of &lt;code&gt;22&lt;/code&gt; characters.&lt;/li&gt;
&lt;li&gt;Finally, the last part is the &lt;code&gt;24 bytes&lt;/code&gt; hash value, encoded as &lt;code&gt;31&lt;/code&gt; characters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these 4 parts are concatenated together into a single hash string, and it is the string that we will store in the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4hW1Hh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0q79j58zhd2totxlgabn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4hW1Hh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0q79j58zhd2totxlgabn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that’s the process of hashing users’ password!&lt;/p&gt;

&lt;p&gt;But when users login, how can we verify that the password that they entered is correct or not?&lt;/p&gt;

&lt;p&gt;Well, first we have to find the &lt;code&gt;hashed_password&lt;/code&gt; stored in the DB by &lt;code&gt;username&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we use the &lt;code&gt;cost&lt;/code&gt; and &lt;code&gt;salt&lt;/code&gt; of that &lt;code&gt;hashed_password&lt;/code&gt; as the arguments to hash the &lt;code&gt;naked_password&lt;/code&gt; users just entered with &lt;code&gt;bcrypt&lt;/code&gt;. The output of this will be another hash value.&lt;/p&gt;

&lt;p&gt;Then all we have to do is to compare the 2 hash values. If they’re the same, then the password is correct.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoHLvJ30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x9wk0fa5xai45ucuputp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoHLvJ30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x9wk0fa5xai45ucuputp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright, now let’s see how to implement these logics in &lt;code&gt;Golang&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-functions-to-hash-and-compare-passwords" class="anchor"&gt;
  &lt;/a&gt;
  Implement functions to hash and compare passwords
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/techschoolguru/how-to-handle-db-errors-in-golang-correctly-11ek"&gt;previous lecture&lt;/a&gt;, we have generated the code to create a new user in the database. And &lt;code&gt;hashed_password&lt;/code&gt; is one of the input parameters of the &lt;code&gt;CreateUser()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;CreateUserParams&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
    &lt;span class="n"&gt;HashedPassword&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"hashed_password"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"full_name"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"email"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Queries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="n"&gt;CreateUserParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryRowContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also, in this &lt;code&gt;createRandomUser()&lt;/code&gt; function of the unit test in &lt;code&gt;db/sqlc/user_test.go&lt;/code&gt;, we’re using a simple &lt;code&gt;"secret"&lt;/code&gt; string for the &lt;code&gt;hash_password&lt;/code&gt; field, which doesn’t reflect the real correct values this field should hold.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;createRandomUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;CreateUserParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomOwner&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"secret"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomOwner&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomEmail&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So today we’re gonna update it to use a real hash string.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hash-password-function" class="anchor"&gt;
  &lt;/a&gt;
  Hash password function
&lt;/h3&gt;

&lt;p&gt;First, let’s create a new file &lt;code&gt;password.go&lt;/code&gt; inside the &lt;code&gt;util&lt;/code&gt; package. In this file, I’m gonna define a new function: &lt;code&gt;HashPassword()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It will take a &lt;code&gt;password&lt;/code&gt; string as input, and will return a &lt;code&gt;string&lt;/code&gt; or an &lt;code&gt;error&lt;/code&gt;. This function will compute the &lt;code&gt;bcrypt&lt;/code&gt; hash string of the input &lt;code&gt;password&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// HashPassword returns the bcrypt hash of the password&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GenerateFromPassword&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultCost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to hash password: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this function, we call &lt;code&gt;bcrypt.GenerateFromPassword()&lt;/code&gt;. It requires 2 input parameters: the &lt;code&gt;password&lt;/code&gt; of type &lt;code&gt;[]byte&lt;/code&gt; slice, and a &lt;code&gt;cost&lt;/code&gt; of type &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we have to convert the input &lt;code&gt;password&lt;/code&gt; from &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;[]byte&lt;/code&gt; slice. &lt;/p&gt;

&lt;p&gt;For &lt;code&gt;cost&lt;/code&gt;, I use the &lt;code&gt;bcrypt.DefaultCost&lt;/code&gt; value, which is &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The output of this function will be the &lt;code&gt;hashedPassword&lt;/code&gt; and an &lt;code&gt;error&lt;/code&gt;. If the &lt;code&gt;error&lt;/code&gt; is &lt;code&gt;not nil&lt;/code&gt;,  then we just return an empty hashed string, and wrap the &lt;code&gt;error&lt;/code&gt; with a message saying: &lt;code&gt;"failed to hash password"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Otherwise, we convert the &lt;code&gt;hashedPassword&lt;/code&gt; from &lt;code&gt;[]byte&lt;/code&gt; slice to &lt;code&gt;string&lt;/code&gt;, and return it with a &lt;code&gt;nil&lt;/code&gt; error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compare-passwords-function" class="anchor"&gt;
  &lt;/a&gt;
  Compare passwords function
&lt;/h3&gt;

&lt;p&gt;Next, we will write another function to check if a password is correct or not: &lt;code&gt;CheckPassword()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This function will take 2 input arguments: a &lt;code&gt;password&lt;/code&gt; to check, and the &lt;code&gt;hashedPassword&lt;/code&gt; to compare. It will return an &lt;code&gt;error&lt;/code&gt; as output.&lt;/p&gt;

&lt;p&gt;Basically, this function will check if the input &lt;code&gt;password&lt;/code&gt; is correct when comparing to the provided &lt;code&gt;hashedPassword&lt;/code&gt; or not.&lt;/p&gt;

&lt;p&gt;As the standard &lt;code&gt;bcrypt&lt;/code&gt; package has already implemented this feature, all we have to do is to call &lt;code&gt;bcrypt.CompareHashAndPassword()&lt;/code&gt; function, and pass in the &lt;code&gt;hashedPassword&lt;/code&gt; and naked &lt;code&gt;password&lt;/code&gt;, after converting them from &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;[]byte&lt;/code&gt; slices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// CheckPassword checks if the provided password is correct or not&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CompareHashAndPassword&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And that’s it. We’re done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-unit-test-for-hashpassword-and-checkpassword-functions" class="anchor"&gt;
  &lt;/a&gt;
  Write unit test for HashPassword and CheckPassword functions
&lt;/h2&gt;

&lt;p&gt;Now let’s write some unit tests to make sure these 2 functions work as expected.&lt;/p&gt;

&lt;p&gt;I’m gonna create a new file &lt;code&gt;password_test.go&lt;/code&gt; inside the &lt;code&gt;util&lt;/code&gt; package. Then let’s define function &lt;code&gt;TestPassword()&lt;/code&gt; with a &lt;code&gt;testing.T&lt;/code&gt; object as input.&lt;/p&gt;

&lt;p&gt;First I will generate a new &lt;code&gt;password&lt;/code&gt; as a random string of &lt;code&gt;6&lt;/code&gt; characters. Then we get the &lt;code&gt;hashedPassword&lt;/code&gt; by calling &lt;code&gt;HashPassword()&lt;/code&gt; function with the generated password.&lt;/p&gt;

&lt;p&gt;We require no errors to be returned, and the &lt;code&gt;hashedPassword&lt;/code&gt; string should be not empty.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next we call &lt;code&gt;CheckPassword()&lt;/code&gt; function with the &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;hashedPassword&lt;/code&gt; parameters.&lt;/p&gt;

&lt;p&gt;As this is the same &lt;code&gt;password&lt;/code&gt; we used to create the &lt;code&gt;hashedPassword&lt;/code&gt;, this function should return no errors, which means correct password.&lt;/p&gt;

&lt;p&gt;Let’s also test the case where an &lt;code&gt;incorrect password&lt;/code&gt; is provided!&lt;/p&gt;

&lt;p&gt;I will generate a new random &lt;code&gt;wrongPassword&lt;/code&gt; string, and call &lt;code&gt;CheckPassword()&lt;/code&gt; again with this &lt;code&gt;wrongPassword&lt;/code&gt; argument. This time, we expect an &lt;code&gt;error&lt;/code&gt; to be returned, since the provided password is incorrect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;wrongPassword&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrongPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EqualError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrMismatchedHashAndPassword&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To be exact, we use &lt;code&gt;require.EqualError()&lt;/code&gt; to compare the output error. It must be equal to the &lt;code&gt;bcrypt.ErrMismatchedHashAndPassword&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;OK, the test is now completed. Let’s run it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4786bXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/90uzylad79bl73vlglxb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4786bXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/90uzylad79bl73vlglxb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It passed! Awesome!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-the-existing-code-to-use-hashpassword-function" class="anchor"&gt;
  &lt;/a&gt;
  Update the existing code to use HashPassword function
&lt;/h2&gt;

&lt;p&gt;So the &lt;code&gt;HashPassword()&lt;/code&gt; function is working properly. Let’s go back to the &lt;code&gt;user_test.go&lt;/code&gt; file and use it in the &lt;code&gt;createRandomUser()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Here I’m gonna create a new &lt;code&gt;hashedPassword&lt;/code&gt; value by calling &lt;code&gt;util.HashPassword()&lt;/code&gt; function with a random string of &lt;code&gt;6&lt;/code&gt; characters.&lt;/p&gt;

&lt;p&gt;We require no errors, then change the &lt;code&gt;"secret"&lt;/code&gt; constant to &lt;code&gt;hashedPassword&lt;/code&gt; instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;createRandomUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;CreateUserParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomOwner&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomOwner&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomEmail&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Alright, let’s run the whole &lt;code&gt;db&lt;/code&gt; package test!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1yc_BzGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n7dqkprr39m8iz68yr14.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1yc_BzGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n7dqkprr39m8iz68yr14.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All passed!&lt;/p&gt;

&lt;p&gt;Now if we open the database in Table Plus and check the users table, we can see that the &lt;code&gt;hashed_password&lt;/code&gt; column is now containing the correct &lt;code&gt;bcrypt&lt;/code&gt; hashed string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RfbsTCgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ogkirl4c5og31kp2j3rg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RfbsTCgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ogkirl4c5og31kp2j3rg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks just like the example that I shown you in the beginning of this video.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-sure-all-hashed-passwords-are-different" class="anchor"&gt;
  &lt;/a&gt;
  Make sure all hashed passwords are different
&lt;/h2&gt;

&lt;p&gt;One thing we want to make sure of is: if the &lt;code&gt;same password&lt;/code&gt; is hashed twice, &lt;code&gt;2 different hash values&lt;/code&gt; should be produced.&lt;/p&gt;

&lt;p&gt;So let’s go back to the &lt;code&gt;TestPassword()&lt;/code&gt; function. I’m gonna change the &lt;code&gt;hashPassword&lt;/code&gt; variable’s name to &lt;code&gt;hashedPassword1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then let’s duplicate the hash password code block, and change the variable’s name to &lt;code&gt;hashedPassword2&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;wrongPassword&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrongPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EqualError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrMismatchedHashAndPassword&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What we expect to see is: the value of &lt;code&gt;hashedPassword2&lt;/code&gt; should be different from the value of &lt;code&gt;hashedPassword1&lt;/code&gt;. So here I use &lt;code&gt;require.NotEqual()&lt;/code&gt; to check this condition.&lt;/p&gt;

&lt;p&gt;OK, let’s rerun the test.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InO7JEc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/evnlhng02niihnityz7y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InO7JEc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/evnlhng02niihnityz7y.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It passed! Excellent!&lt;/p&gt;

&lt;p&gt;To really understand why it passed, we have to open the implementation of the &lt;code&gt;bcrypt.GenerateFromPassword()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GenerateFromPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;newFromPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;newFromPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MinCost&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DefaultCost&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;majorVersion&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minorVersion&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;checkCost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;

    &lt;span class="n"&gt;unencodedSalt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxSaltSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unencodedSalt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unencodedSalt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see here, in the &lt;code&gt;newFromPassword()&lt;/code&gt; function, a &lt;code&gt;random salt&lt;/code&gt; value is generated, and it is used in the &lt;code&gt;bcrypt()&lt;/code&gt; function to generate the hash.&lt;/p&gt;

&lt;p&gt;So now you know, because of this &lt;code&gt;random salt&lt;/code&gt;, the generated hash value will be different everytime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-the-create-user-api" class="anchor"&gt;
  &lt;/a&gt;
  Implement the create user API
&lt;/h2&gt;

&lt;p&gt;Next step, I’m gonna use the &lt;code&gt;HashPassword()&lt;/code&gt; function that we’ve written to implement the &lt;code&gt;create user API&lt;/code&gt; for our simple bank.&lt;/p&gt;

&lt;p&gt;Let’s create a new file &lt;code&gt;user.go&lt;/code&gt; inside the &lt;code&gt;api&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;This API will be very much alike the &lt;code&gt;create account API&lt;/code&gt; that we’ve &lt;a href="https://dev.to/techschoolguru/implement-restful-http-api-in-go-using-gin-4ap1"&gt;implemented before&lt;/a&gt;, so I’m just gonna copy it from the &lt;code&gt;api/account.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Then let’s change this &lt;code&gt;struct&lt;/code&gt; to &lt;code&gt;createUserRequest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first parameter is &lt;code&gt;username&lt;/code&gt;. It is a &lt;code&gt;required&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;And let’s say we don’t allow it to contain any kind of special characters, so here I’m gonna use the &lt;code&gt;alphanum&lt;/code&gt; tag, which is already provided by the &lt;a href="https://github.com/go-playground/validator"&gt;validator package&lt;/a&gt;. It basically means that this field should contain ASCII alphanumeric characters only.&lt;/p&gt;

&lt;p&gt;The second field is &lt;code&gt;password&lt;/code&gt;. It is also &lt;code&gt;required&lt;/code&gt;. And normally we don’t want the password to be too short because it would be very easy to hack. So here let’s use the &lt;code&gt;min&lt;/code&gt; tag to say that the length of the password should be at least &lt;code&gt;6&lt;/code&gt; characters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;createUserRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username" binding:"required,alphanum"`&lt;/span&gt;
    &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"password" binding:"required,min=6"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"full_name" binding:"required"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"email" binding:"required,email"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The third field is &lt;code&gt;full_name&lt;/code&gt; of the user. There’s no specific requirements for this field, except that it is &lt;code&gt;required&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, the last field is &lt;code&gt;email&lt;/code&gt;, which is very important because it would be the main communication channel between the users and our system. We can use the &lt;code&gt;email&lt;/code&gt; tag provided by validator package to make sure that the value of this field is a correct email address.&lt;/p&gt;

&lt;p&gt;There are many other useful built-in tags that were already implemented by the validator package, you can check them out in its &lt;a href="https://pkg.go.dev/github.com/go-playground/validator/v10"&gt;documentation&lt;/a&gt; or &lt;a href="https://github.com/go-playground/validator"&gt;github page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s go back to the code to complete this &lt;code&gt;createUser()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="n"&gt;createUserRequest&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShouldBindJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateUserParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we use the &lt;code&gt;ctx.ShouldBindJSON()&lt;/code&gt; function to bind the input parameters from the &lt;code&gt;context&lt;/code&gt; into the &lt;code&gt;createUserRequest&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;If any of the parameters are invalid, we just return &lt;code&gt;400 Bad Request&lt;/code&gt; status to the client. Otherwise, we will use them build the &lt;code&gt;db.CreateUserParams&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;There are 4 fields that need to be set: &lt;code&gt;Username&lt;/code&gt;, &lt;code&gt;HashedPassword&lt;/code&gt;, &lt;code&gt;Fullname&lt;/code&gt;, and &lt;code&gt;Email&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So first, we compute the &lt;code&gt;hashedPassword&lt;/code&gt; by calling &lt;code&gt;util.HashPassword()&lt;/code&gt; function and pass in the input &lt;code&gt;request.Password&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;If this function returns a &lt;code&gt;not nil&lt;/code&gt; error, then we just return a status &lt;code&gt;500 Internal Server Error&lt;/code&gt; to the client.&lt;/p&gt;

&lt;p&gt;Else, we will build the &lt;code&gt;CreateUserParams&lt;/code&gt; object, where &lt;code&gt;Username&lt;/code&gt; is &lt;code&gt;request.Username&lt;/code&gt;, &lt;code&gt;HashedPassword&lt;/code&gt; is the computed &lt;code&gt;hashedPassword&lt;/code&gt;, &lt;code&gt;FullName&lt;/code&gt; is &lt;code&gt;request.FullName&lt;/code&gt;, and &lt;code&gt;Email&lt;/code&gt; is &lt;code&gt;request.Email&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pqErr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;pqErr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"unique_violation"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusForbidden&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we call &lt;code&gt;server.store.CreateUser()&lt;/code&gt; with this input argument. It will return the created &lt;code&gt;user&lt;/code&gt; object or an &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just like in the &lt;code&gt;create account API&lt;/code&gt;, if error is not nil, then there are some possible scenarios. Keep in mind that, in the users table, we have 2 &lt;code&gt;unique constraints&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One is for the primary key &lt;code&gt;username&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;And the other is for the &lt;code&gt;email&lt;/code&gt; column.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We don’t have a &lt;code&gt;foreign key&lt;/code&gt; in this table, so here we only need to keep the &lt;code&gt;unique_violation&lt;/code&gt; code name to return status &lt;code&gt;403 Forbidden&lt;/code&gt; in case an user with the same &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;email&lt;/code&gt; already exists.&lt;/p&gt;

&lt;p&gt;Finally, if no errors occur, we just return status &lt;code&gt;200 OK&lt;/code&gt; with the created &lt;code&gt;user&lt;/code&gt; to the client.&lt;/p&gt;

&lt;p&gt;OK, so now the &lt;code&gt;createUser&lt;/code&gt; API handler is completed. The last step we must do is to register a route for it in the &lt;code&gt;api/server.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Here, in this &lt;code&gt;NewServer()&lt;/code&gt; function, I’m gonna add a new route with method &lt;code&gt;POST&lt;/code&gt;. Its path should be &lt;code&gt;/users&lt;/code&gt;, and its handler function is &lt;code&gt;server.createUser&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// NewServer creates a new HTTP server and set up routing.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"currency"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validCurrency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createAccount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts/:id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAccount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listAccounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/transfers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createTransfer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And that’s it! We’re done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-the-create-user-api" class="anchor"&gt;
  &lt;/a&gt;
  Test the create user API
&lt;/h2&gt;

&lt;p&gt;Let’s open the terminal and run &lt;code&gt;make server&lt;/code&gt; to start the server.&lt;/p&gt;

&lt;p&gt;I’m gonna use &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; to test the new API.&lt;/p&gt;

&lt;p&gt;Let’s select method &lt;code&gt;POST&lt;/code&gt; and fill in the URL: &lt;a href="http://localhost:8080/users"&gt;http://localhost:8080/users&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the request body, let’s choose &lt;code&gt;raw&lt;/code&gt;, and select &lt;code&gt;JSON&lt;/code&gt; format. I'm gonna use this JSON data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"quang1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"full_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Quang Pham"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"quang@email.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"secret"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;OK, let’s send this request!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3aLSspZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rccwgqu8l97no4h434ce.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3aLSspZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rccwgqu8l97no4h434ce.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s successful! We’ve got the created &lt;code&gt;user&lt;/code&gt; object here with all correct field values.&lt;/p&gt;

&lt;p&gt;Let’s open the database to find this user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K-lzqnPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/la3mih4va95g4yhuh22d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-lzqnPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/la3mih4va95g4yhuh22d.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here it is! So our API is working well in the happy case.&lt;/p&gt;

&lt;p&gt;Now let’s see what happens if I send this same request the second time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7SQ4aU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6fj79ni1m81b7byp57r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7SQ4aU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6fj79ni1m81b7byp57r.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve got a &lt;code&gt;403 Forbidden&lt;/code&gt; status code. And the reason is that the &lt;code&gt;unique constraint&lt;/code&gt; for &lt;code&gt;username&lt;/code&gt; is violated.&lt;/p&gt;

&lt;p&gt;We’re trying to create another user with the same &lt;code&gt;username&lt;/code&gt;, So clearly it should not be allowed!&lt;/p&gt;

&lt;p&gt;Now let’s try changing the &lt;code&gt;username&lt;/code&gt; to &lt;code&gt;quang2&lt;/code&gt;, but keep the &lt;code&gt;email&lt;/code&gt; value the same, and send the request again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--12Fsn0dA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/py1g4yoemdjjp5yhv8hd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12Fsn0dA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/py1g4yoemdjjp5yhv8hd.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We still got &lt;code&gt;403 Forbidden&lt;/code&gt;. But this time, the error is because the &lt;code&gt;email&lt;/code&gt; unique constraint is violated. Exactly what we expected!&lt;/p&gt;

&lt;p&gt;If I change the &lt;code&gt;email&lt;/code&gt; to &lt;code&gt;quang2@email.com&lt;/code&gt;, then the request will be successful, since this email doesn’t belong to any other users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhHkhtAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gfa81bkj7n61nvg0apkt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhHkhtAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gfa81bkj7n61nvg0apkt.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OK, now let’s try an invalid &lt;code&gt;username&lt;/code&gt;, such as &lt;code&gt;quang#2&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUg0ZKqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4vbdkpyqzgv5gehy7opb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUg0ZKqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4vbdkpyqzgv5gehy7opb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time, the status code is &lt;code&gt;400 Bad Request&lt;/code&gt;. And the reason is: the field validation for &lt;code&gt;username&lt;/code&gt; failed on the &lt;code&gt;alphanum&lt;/code&gt; tag. There’s a special character &lt;code&gt;#&lt;/code&gt; in the &lt;code&gt;username&lt;/code&gt;, which is not alphanumeric.&lt;/p&gt;

&lt;p&gt;Next, let’s try an invalid email. I’m gonna change the &lt;code&gt;username&lt;/code&gt; to &lt;code&gt;quang3&lt;/code&gt;, and &lt;code&gt;email&lt;/code&gt; to &lt;code&gt;quang3email.com&lt;/code&gt;, without the &lt;code&gt;@&lt;/code&gt; character.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odcdFgoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/143icuv62eb39ofmpj8n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odcdFgoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/143icuv62eb39ofmpj8n.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve got &lt;code&gt;400 Bad Request&lt;/code&gt; status again. And the error is: field validation for &lt;code&gt;email&lt;/code&gt; failed on the &lt;code&gt;email&lt;/code&gt; tag, which is exactly what we want.&lt;/p&gt;

&lt;p&gt;OK now let’s fix the &lt;code&gt;email&lt;/code&gt; address, and change the &lt;code&gt;password&lt;/code&gt; to a very short value, such as &lt;code&gt;"123"&lt;/code&gt;. Then send the request one more time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IyWCrhne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ktclklly7jy3tnml757c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IyWCrhne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ktclklly7jy3tnml757c.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time, we’ve got an error because the &lt;code&gt;password&lt;/code&gt; field validation failed on the &lt;code&gt;min&lt;/code&gt; tag. It doesn’t satisfy the minimum length constraint of &lt;code&gt;6&lt;/code&gt; characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-should-not-expose-hashed-password" class="anchor"&gt;
  &lt;/a&gt;
  API should not expose hashed password
&lt;/h2&gt;

&lt;p&gt;Before we finish, there’s one more thing I want to tell you. Let’s fix the &lt;code&gt;password&lt;/code&gt; value and send the request again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urK3aiXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bebtbkl23o4fk7c88lel.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urK3aiXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bebtbkl23o4fk7c88lel.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it’s successful. But you can notice that the &lt;code&gt;hashed_password&lt;/code&gt; value is also returned, which doesn’t seem right, because the client will never need to use this value for anything.&lt;/p&gt;

&lt;p&gt;And it might raise some security concerns, as this piece of sensitive information is being transmitted in the public.&lt;/p&gt;

&lt;p&gt;It would be better to remove this field from the response body.&lt;/p&gt;

&lt;p&gt;To do that, I’m gonna declare a new &lt;code&gt;createUserResponse struct&lt;/code&gt; in the &lt;code&gt;api/user.go&lt;/code&gt; file. It will contain almost all fields of the &lt;code&gt;db.User&lt;/code&gt; struct, except for the &lt;code&gt;HashedPassword&lt;/code&gt; field that should be removed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;createUserResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"full_name"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;             &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"email"`&lt;/span&gt;
    &lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"password_changed_at"`&lt;/span&gt;
    &lt;span class="n"&gt;CreatedAt&lt;/span&gt;         &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"created_at"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then here, at the end of the &lt;code&gt;createUser()&lt;/code&gt; handler function, we build a new &lt;code&gt;createUserResponse&lt;/code&gt; object, where &lt;code&gt;Username&lt;/code&gt; is &lt;code&gt;user.Username&lt;/code&gt;, &lt;code&gt;FullName&lt;/code&gt; is &lt;code&gt;user.FullName&lt;/code&gt;, &lt;code&gt;Email&lt;/code&gt; is &lt;code&gt;user.Email&lt;/code&gt;, &lt;code&gt;PasswordChangedAt&lt;/code&gt; is &lt;code&gt;user.PasswordChangedAt&lt;/code&gt;, and &lt;code&gt;CreatedAt&lt;/code&gt; is &lt;code&gt;user.CreatedAt&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pqErr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;pqErr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"unique_violation"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusForbidden&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;createUserResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;             &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we return the &lt;code&gt;response&lt;/code&gt; object instead of &lt;code&gt;user&lt;/code&gt;. And we’re done!&lt;/p&gt;

&lt;p&gt;Let’s restart the server. Then go back to Postman, update the &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; to new values, and send the request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W75U_na2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdmenmht3ipl9x0f19g2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W75U_na2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdmenmht3ipl9x0f19g2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s successful. And now there’s no &lt;code&gt;hashed_password&lt;/code&gt; field in the response body anymore. Perfect!&lt;/p&gt;

&lt;p&gt;So that brings us to the end of this lecture. I hope you have learned something useful.&lt;/p&gt;

&lt;p&gt;Thank you for reading, and see you in the next one!&lt;/p&gt;




&lt;p&gt;If you like the article, please subscribe to our &lt;a href="http://bit.ly/techschoolguru"&gt;Youtube channel&lt;/a&gt; and follow us on &lt;a href="https://twitter.com/techschoolguru"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.facebook.com/techschool.guru"&gt;Facebook&lt;/a&gt; for more tutorials in the future.&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>security</category>
    </item>
    <item>
      <title>Numeric Separators in JavaScript</title>
      <author>Suprabha</author>
      <pubDate>Sat, 16 Jan 2021 22:08:20 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/numeric-separators-in-javascript-3jec</link>
      <guid>https://dev.to/suprabhasupi/numeric-separators-in-javascript-3jec</guid>
      <description>&lt;p&gt;&lt;span class="first-letter"&gt;N&lt;/span&gt;umeric Separators give us the ability to separate thousands with an underscore (_) in numeric literals.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-its-useful" class="anchor"&gt;
  &lt;/a&gt;
  How it’s useful❓
&lt;/h3&gt;

&lt;p&gt;It makes our code more informative and readable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;series&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Numeric Separators in javascript, enables underscore as a separator in numeric literals to improve readability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;series&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;_00_00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also use this for binary, octal, and hex numbers.&lt;/p&gt;

&lt;p&gt; Binary Number 👻&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;series1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mb"&gt;0b1010_0101_1001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;series1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2649&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Octal Number: 👻&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;series2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mo"&gt;0o2_3_5_7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;series2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1263&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Hex Number: 👻&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;series3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xA&lt;/span&gt;&lt;span class="nx"&gt;_B_C_D_E&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;series3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 703710&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#few-limitation" class="anchor"&gt;
  &lt;/a&gt;
  Few Limitation 🤦‍♀️
&lt;/h3&gt;

&lt;p&gt;Below limitation snippet will throw &lt;i&gt;SyntaxError&lt;/i&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;More than one underscore in a row is not allowed&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;series1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;__000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can not be used after leading 0&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;series2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;_1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not allowed at the end of numeric literals&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;series3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#browser-support-%F0%9F%8E%97" class="anchor"&gt;
  &lt;/a&gt;
  Browser Support 🎗
&lt;/h3&gt;

&lt;p&gt;This feature has pretty good support in recent versions of browsers. &lt;/p&gt;

&lt;p&gt;Check this out 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hmwbTs1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QcXWq8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hmwbTs1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QcXWq8v.png" alt="browser support for numeric separators"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference" class="anchor"&gt;
  &lt;/a&gt;
  Reference 🧐
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://v8.dev/features/numeric-separators"&gt;Numeric Separators V8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://caniuse.com/#feat=mdn-javascript_grammar_numeric_separators"&gt;Browser Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        👩🏻‍💻 &lt;a href="https://www.suprabha.me/"&gt; Suprabha.me&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Future You Will Never Think Current You Was Too Old to Learn Software Engineering</title>
      <author>Nick Scialli (he/him)</author>
      <pubDate>Sat, 16 Jan 2021 21:22:29 +0000</pubDate>
      <link>https://dev.to/nas5w/is-it-too-late-to-be-a-software-engineer-future-you-says-no-2gef</link>
      <guid>https://dev.to/nas5w/is-it-too-late-to-be-a-software-engineer-future-you-says-no-2gef</guid>
      <description>&lt;p&gt;I wrote this post with my good friend, Ross Jacobson, who runs &lt;a href="https://disciplinedrebel.com/"&gt;The Disciplined Rebel&lt;/a&gt;.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#please-check-out-the-associated-very-short-youtube-video-of-our-discussion" class="anchor"&gt;
  &lt;/a&gt;
  Please check out the associated, very short, YouTube video of our discussion!
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vpKh-29u_EQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;A lot of people ask me "is it too late to be a software engineer." In this post, we are going to examine this question, and determine at what age it is too late to get into software development.&lt;/p&gt;




&lt;p&gt;Please help spread the word by giving this post a 💓, 🦄, and 🔖!&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#the-question" class="anchor"&gt;
  &lt;/a&gt;
  The Question
&lt;/h1&gt;

&lt;p&gt;This question, "is it too late to be a software engineer" comes from a surprisingly wide variety of age groups.&lt;/p&gt;

&lt;p&gt;Some are in there 30s, 40s, or older. Whereas others are in their 20s. But still feel they've gotten off to a late start.&lt;/p&gt;

&lt;p&gt;At one point I was hearing this question from people of different ages, and I came to a realization:&lt;/p&gt;

&lt;p&gt;It’s not about your age.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#imagine-someone-in-their-30s-who-wants-to-learn-to-code" class="anchor"&gt;
  &lt;/a&gt;
  Imagine Someone in Their 30s Who Wants to Learn to Code
&lt;/h1&gt;

&lt;p&gt;(If you personally are in your 30s, then this should be even easier).&lt;/p&gt;

&lt;p&gt;The 30-something really wants to become a software engineer but wonders whether it is too late to learn how.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The person in their 30s has two options:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Give learning software development a shot. And potentially become really good by the time they are in their 40s (if not much earlier)&lt;/li&gt;
&lt;li&gt;Don’t give it a shot, and then 10 years later think "I wish I started in my 30s."&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's the thing though: Someone in their 40s has these same options available to them.&lt;/p&gt;

&lt;p&gt;The person in their 40s could focus on the future and get started now. Which might lead them to gain additional fulfillment, success, and/or income.&lt;/p&gt;

&lt;p&gt;Or they can never give it a shot because they feel like "it’s too late." Then, when they are in their 50s, regret not having started in their 40s.&lt;br&gt;
And so on and so forth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can repeat this thought experiment with your age subbed in.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#from-another-perspective" class="anchor"&gt;
  &lt;/a&gt;
  From Another Perspective
&lt;/h1&gt;

&lt;p&gt;My friend, &lt;a href="https://disciplinedrebel.com"&gt;Ross Jacobson&lt;/a&gt;, started playing guitar around 9th or 10th grade. Now that he is in his 30s, that seems really early.&lt;/p&gt;

&lt;p&gt;But at the time, he knew other people who started in 5th or 6th grade. Because he compared himself to others, he felt regret. And that caused him to question whether it was too late for him to get any good.&lt;/p&gt;

&lt;p&gt;Fortunately though, he kept persisting, and he eventually got better. He ended up playing in a band for several years and got a lot of joy out of it.&lt;/p&gt;

&lt;p&gt;Now at his current age, looking back, he thinks that 9th or 10th grade seems plenty early. And the idea that he didn't start early enough seems completely ridiculous.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The thing is – that same level of ridiculousness can be applied to ANY age!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's say you are 34 and want to become a software engineer. But don't because you think it is too late.&lt;/p&gt;

&lt;p&gt;10 years later you will look back and wonder why you didn't.&lt;/p&gt;

&lt;p&gt;Future You, at 44, will think "ugh, if I had only gotten into software development when I was 34, I’d be so far along by now."&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#heres-the-rule-to-keep-in-mind" class="anchor"&gt;
  &lt;/a&gt;
  Here’s the Rule to Keep in Mind
&lt;/h1&gt;

&lt;p&gt;If you start something today, Future You will never think that was too old to start something.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#are-there-any-limits" class="anchor"&gt;
  &lt;/a&gt;
  Are there any limits?
&lt;/h1&gt;

&lt;p&gt;Sure, there are some practical situations to factor in. Such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cost of education/training&lt;/li&gt;
&lt;li&gt;How much free time you have&lt;/li&gt;
&lt;li&gt;And other competing priorities/responsibilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of these practical problems seem to have clearer solutions. For example, there are lots of free courses and other resources that can help mitigate cost (such as this blog).&lt;/p&gt;

&lt;p&gt;Other are tougher. For instance, having less time to learn to code, because you have to devote a lot of your time to taking care of a family member.&lt;/p&gt;

&lt;p&gt;But all of these concerns can be present for people regardless of their age.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#age-itself-is-just-a-number" class="anchor"&gt;
  &lt;/a&gt;
  Age itself is just a number.
&lt;/h1&gt;

&lt;p&gt;If you are still on the fence, there are plenty of &lt;a href="https://www.freecodecamp.org/news/stories-from-300-developers-who-got-their-first-tech-job-in-their-30s-40s-and-50s-64306eb6bb27/"&gt;real-world examples&lt;/a&gt; of people in their 30s, 40s, and beyond who learned to code late in life.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concluding-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Concluding Thoughts
&lt;/h1&gt;

&lt;p&gt;Yes, there are some practical factors you have to consider.&lt;/p&gt;

&lt;p&gt;But most of those considerations have less to do with age, and more to do with where becoming a software engineer fits on your list of priorities.&lt;/p&gt;

&lt;p&gt;So, if you are wondering whether it is too late to become a software engineer, here is my answer:&lt;/p&gt;

&lt;p&gt;Don’t worry about past missed time. And start looking to the future.&lt;/p&gt;

&lt;p&gt;Years from now, Future You will look back and thank you for it.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>5 phases to create a 5-year growth plan as a developer</title>
      <author>Joachim Zeelmaekers</author>
      <pubDate>Sat, 16 Jan 2021 21:01:00 +0000</pubDate>
      <link>https://dev.to/joachimzeelmaekers/5-phases-to-create-a-5-year-growth-plan-as-a-developer-51ed</link>
      <guid>https://dev.to/joachimzeelmaekers/5-phases-to-create-a-5-year-growth-plan-as-a-developer-51ed</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cAtOVOvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.joachimzeelmaekers.be/content/images/2021/01/airfocus-um1zVjVCtEY-unsplash.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cAtOVOvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.joachimzeelmaekers.be/content/images/2021/01/airfocus-um1zVjVCtEY-unsplash.jpg" alt="5 phases to create a 5-year growth plan as a developer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I started writing this blog because of one very complicated but important question.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Where do you see yourself in 5 years?&lt;br&gt;&lt;br&gt;
~ every interviewer or manager ever&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My answer to this question was something like this: I want to be a full-stack developer that can create a deployment pipeline for the backend and frontend of a production application.&lt;/p&gt;

&lt;p&gt;Well, let's say that that is not the kind of answer people are looking for. It says nothing about your &lt;strong&gt;goals&lt;/strong&gt; or &lt;strong&gt;ambition&lt;/strong&gt;. It only shows that you want to progress, but then again, who doesn't?&lt;/p&gt;

&lt;p&gt;To construct a clear answer to this, you first have to know your dream job. This is something that one of my colleagues told me, and I keep on telling everyone because it's just an amazing way to find out what you should focus on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phase-1-find-your-dream-job" class="anchor"&gt;
  &lt;/a&gt;
  Phase 1: Find your dream job
&lt;/h3&gt;

&lt;p&gt;The first step in this process is selecting your dream job. Let's say that I want to become a Software Developer at Google. The first thing I should do is find a job description or an open application at Google so that I can find out what skills I need to complete my goal.&lt;/p&gt;

&lt;p&gt;Most of the large companies have a careers page where you can find job descriptions. The page for google is &lt;a href="https://careers.google.com/d/"&gt;https://careers.google.com&lt;/a&gt;. Let's say that I want to become a software engineer for &lt;a href="https://www.waze.com/"&gt;Waze&lt;/a&gt;. A job description would look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RewgFzzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.joachimzeelmaekers.be/content/images/2021/01/Screenshot-2021-01-16-at-18.18.05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RewgFzzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.joachimzeelmaekers.be/content/images/2021/01/Screenshot-2021-01-16-at-18.18.05.png" alt="5 phases to create a 5-year growth plan as a developer"&gt;&lt;/a&gt;Screenshot by author from &lt;a href="https://careers.google.com/d/"&gt;Google&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know this description can look intimidating at the start of your career, but just ignore the work that has to be done, and just try to understand it. Once you understand it, you can see which things are completed and which require some more work.&lt;/p&gt;

&lt;p&gt;A checklist should look like this:&lt;br&gt;&lt;br&gt;
✅ Bachelor's degree&lt;br&gt;&lt;br&gt;
✅ Experience with mobile application development for Android&lt;br&gt;&lt;br&gt;
✅ Programming experience in Java&lt;br&gt;&lt;br&gt;
✅ ...  &lt;/p&gt;

&lt;p&gt;⛔️ Experience with Kotlin&lt;br&gt;&lt;br&gt;
⛔️ Programming experience in C++&lt;br&gt;&lt;br&gt;
⛔️ Knowledge of UI frameworks (either Android, iOS, XML), MVP,...&lt;br&gt;&lt;br&gt;
⛔️ ...&lt;/p&gt;

&lt;p&gt;With this checklist, you know everything you need to know to get into phase 2.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phase-2-the-proof" class="anchor"&gt;
  &lt;/a&gt;
  Phase 2: The proof
&lt;/h3&gt;

&lt;p&gt;Your checklist shows clear that you have some kind of skills, but things like "experience in" are really vaguely described. That's why you need projects to proof your experience because talk is cheap. And certainly when you're talking to technical interviewers.&lt;/p&gt;

&lt;p&gt;This proof could be a side-project you created or a project that you worked on at your full-time job. As a student, you could even use a school project that you worked on for a couple of weeks. Something is better than nothing.&lt;/p&gt;

&lt;p&gt;Remember that those projects have to be up-to-date. A project that is stale for 7 years on Github, will not be enough to show your experience in a subject, since the whole subject could have changed. Certainly when you're in web or mobile development.&lt;/p&gt;

&lt;p&gt;If you don't have any proof of experience, you will have some work to do. But that's the whole point of creating your plan for the next 5 years.&lt;/p&gt;

&lt;p&gt;You should now have an updated checklist:&lt;br&gt;&lt;br&gt;
✅ Bachelor's degree&lt;br&gt;&lt;br&gt;
 🧾 Find your degree and make sure you digitalise it once and for all&lt;br&gt;&lt;br&gt;
✅ Experience with mobile application development for Android&lt;br&gt;&lt;br&gt;
 🧾 Project on Github with a link&lt;br&gt;&lt;br&gt;
 🧾 App in the Play Store with a link&lt;br&gt;&lt;br&gt;
 🧾 ...&lt;br&gt;&lt;br&gt;
✅ Programming experience in Java&lt;br&gt;&lt;br&gt;
 🧾 ...&lt;/p&gt;

&lt;p&gt;You might notice that we forgot all other points, but let's dive into them in phase 3.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phase-3-growth" class="anchor"&gt;
  &lt;/a&gt;
  Phase 3: Growth
&lt;/h3&gt;

&lt;p&gt;This might be the most difficult but also the most important phase of them all. In this phase, we will focus on the work that has to be done. In this phase, we will tackle the unchecked parts of our checklist and determine what we can do to acquire the skills that are needed for our dream job.&lt;/p&gt;

&lt;p&gt;I will only discuss 1 of the checkpoints as an example. Let's discuss &lt;strong&gt;experience with Kotlin.&lt;/strong&gt; As previously said, &lt;em&gt;experience&lt;/em&gt; is very vague, but it's clear for everyone that it's more than creating a hello-world application in a certain language. That's why I would suggest starting with the basics, as you would in any language and work your way up. Once that's done, I would build multiple projects and even write about the things you learned on the way.&lt;/p&gt;

&lt;p&gt;Writing about certain topics is very beneficial as a developer for job applications because it shows your passion, interest and knowledge about the topics. In addition to writing, you could get certified for certain programming languages. This is not a necessity, but it's more like a confirmation on your experience.  &lt;/p&gt;

&lt;p&gt;Remember that a job description describes the perfect fit. You don't have to be perfect, but you have to be close to that. That's why you can certainly apply for a job that requires 5 years of experience with only 4 years of experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phase-4-plan" class="anchor"&gt;
  &lt;/a&gt;
  Phase 4: Plan
&lt;/h3&gt;

&lt;p&gt;Well, as I said before, talk is cheap. Now it's time to create a plan of execution. For me personally, I like to learn before I get to work. This means waking up early, first learn for 1 or 2 hours and then start working my full-time job. This is something that works for me, but you should find a schedule that works for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A goal without a plan is just a wish.&lt;br&gt;&lt;br&gt;
~ Antoine de Saint-Exupéry&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#phase-5-execute" class="anchor"&gt;
  &lt;/a&gt;
  Phase 5: Execute
&lt;/h3&gt;

&lt;p&gt;This phase is all about execution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/UqZ4imFIoljlr5O2sM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/UqZ4imFIoljlr5O2sM/giphy.gif" alt="Just do it"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;By applying these 5 phases, you should get a better understanding of where you will be going over the next 5 years. Or at least where you are working towards.&lt;/p&gt;

&lt;p&gt;Of course, it's all about executing your plan. Don't expect to be able to complete your plan, if you're not putting in the work.&lt;/p&gt;

&lt;p&gt;Also, remember that your dream job can change over time. You might like Javascript today, but next year you might be love Python. That's why it's important to refactor your plan like you would refactor your code.&lt;/p&gt;

&lt;p&gt;If you have any questions regarding this topic, feel free to contact me via &lt;a href="https://twitter.com/joachimzee"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>learning</category>
      <category>motivation</category>
    </item>
    <item>
      <title>React 101: A Quick Intro</title>
      <author>Rita Correia</author>
      <pubDate>Sat, 16 Jan 2021 20:18:21 +0000</pubDate>
      <link>https://dev.to/ritaxcorreia/react-101-a-quick-intro-5e7b</link>
      <guid>https://dev.to/ritaxcorreia/react-101-a-quick-intro-5e7b</guid>
      <description>&lt;p&gt;If you're curious about what makes React the most popular JavaScript framework, or feel hesitant about learning React, this article is for you. We'll go through &lt;em&gt;React fundamentals&lt;/em&gt; in simple terms covering the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React in a Nutshell &lt;/li&gt;
&lt;li&gt;Key Concepts of React&lt;/li&gt;
&lt;li&gt;Create-react-app&lt;/li&gt;
&lt;li&gt;React Components&lt;/li&gt;
&lt;li&gt;React Props&lt;/li&gt;
&lt;li&gt;React State&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;In this article, it's assumed you know the basics and concepts of JavaScript.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-in-a-nutshell%E2%80%A8" class="anchor"&gt;
  &lt;/a&gt;
  React in a nutshell 
&lt;/h2&gt;

&lt;p&gt;React (also known as React.js or ReactJS) is a JavaScript framework created by Jordan Walke and maintained by a small team part of Facebook, led by Dan Abramov in London.  React is open source and you can contribute to their &lt;a href="https://github.com/facebook/react"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's used for building user interfaces specifically for single-page applications, that are fast to load and faster to build. React is a component-based framework with the core principle of reusing UI components.&lt;/p&gt;

&lt;p&gt;Instead of creating DOM elements, we create React elements. react-dom will handle the events and turn them into DOM elements. This is done through React components.&lt;br&gt;
React isolates the components, and re-renders that specific component which makes an app/website incredibly faster to render.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-3-key-concepts-of-react-are" class="anchor"&gt;
  &lt;/a&gt;
  The 3 key concepts of React are:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Passing data (unidirectional data flow)&lt;/li&gt;
&lt;li&gt;Returning data&lt;/li&gt;
&lt;li&gt;Return JSX&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#unidirectional-data-flow" class="anchor"&gt;
  &lt;/a&gt;
  Unidirectional Data Flow
&lt;/h3&gt;

&lt;p&gt;In React, data can only flow in one direction. As the underlying data changes, the view will update, but in order for the view layer to affect the data, an action must be triggered. There is no automatic updating. This helps to reduce overhead and makes managing data simpler.&lt;/p&gt;

&lt;p&gt;A component can manage its own data (known as state), or can have data passed to it from another component (known as props). When either state or props changes, React will re-render the component which in turn updates the view.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#virtual-dom" class="anchor"&gt;
  &lt;/a&gt;
  Virtual DOM
&lt;/h3&gt;

&lt;p&gt;React employs a virtual DOM, meaning it has a copy of the DOM in memory at all times. When the view needs to be updated, React will update this virtual DOM first. This is easy to do, because it is already in memory.&lt;/p&gt;

&lt;p&gt;Once the Virtual DOM has been updated, React checks to see what the differences are between the Virtual DOM and the actual DOM. React can then just update the DOM nodes that have changed.&lt;br&gt;
This approach is unique to React and is what made it so much quicker at rendering than its rivals.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#jsx" class="anchor"&gt;
  &lt;/a&gt;
  JSX
&lt;/h3&gt;

&lt;p&gt;JSX is a syntax extension for JavaScript. It was written to be used with React. JSX code looks a lot like HTML. &lt;/p&gt;

&lt;p&gt;What does “syntax extension” mean?&lt;br&gt;
In this case, it means that JSX is not valid JavaScript. Web browsers can’t read it!&lt;br&gt;
If a JavaScript file contains JSX code, then that file will have to be compiled. That means that before the file reaches a web browser, a JSX compiler will translate any JSX into regular JavaScript.&lt;br&gt;
 &lt;br&gt;
Any code in between the tags of a JSX element will be read as JSX, not as regular JavaScript! JSX doesn’t add numbers - it reads them as text, just like HTML.&lt;br&gt;
You need a way to write code that says, “Even though I am located in between JSX tags, treat me like ordinary JavaScript and not like JSX.”&lt;br&gt;
You can do this by wrapping your code in curly braces: &lt;code&gt;{ your code goes here }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In JSX, you need to add slashes to all of the self-closing tags, ie: &lt;code&gt;&amp;lt;Header /&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;Home /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#event-listeners-in-jsx" class="anchor"&gt;
  &lt;/a&gt;
  Event Listeners in JSX
&lt;/h3&gt;

&lt;p&gt;JSX elements can have event listeners, just like HTML elements. Programming in React means constantly working with event listeners.&lt;br&gt;
You create an event listener by giving a JSX element a special attribute. Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img onClick={myFunc} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An event listener attribute’s name should be something like &lt;code&gt;onClick&lt;/code&gt; or &lt;code&gt;onMouseOver&lt;/code&gt;: the word 'on', plus the type of event that you’re listening for. You can see a list of valid event names &lt;a href="https://reactjs.org/docs/events.html"&gt;here&lt;/a&gt;.&lt;br&gt;
An event listener attribute’s value should be a function. The above example would only work if &lt;code&gt;myFunc&lt;/code&gt; were a valid function that had been defined elsewhere, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myFunc() {
  alert('Good morning!');
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img onClick={myFunc} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that in HTML, event listener names are written in all lowercase, such as &lt;code&gt;click&lt;/code&gt; or &lt;code&gt;mousemove&lt;/code&gt;. In JSX, event listener names are written in camelCase, such as &lt;code&gt;onClick&lt;/code&gt; or &lt;code&gt;onMouseOver&lt;/code&gt;.&lt;br&gt;
  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#createreactapp" class="anchor"&gt;
  &lt;/a&gt;
  Create-react-app
&lt;/h2&gt;

&lt;p&gt;Create-react-app is a NPM package that installs all necessary packages to create a React application.&lt;br&gt;
Using create-react-app sets up your environment with all we need.&lt;/p&gt;

&lt;p&gt;It comes bundled with a few features including:&lt;br&gt;
ESlint: to polish your code as you write it&lt;br&gt;
Jest: a testing library, for testing your code&lt;/p&gt;

&lt;p&gt;Because its’ an npm package, it’s executed only in the terminal, as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app your-react-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It also accepts flags to tailor the template to your needs, ie &lt;code&gt;npx create-react-app --typescript&lt;/code&gt;. This will create you a TypeScript project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npx is the same as npm, but it installs the latest version of npm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You must import React from ‘react’ in each component file.&lt;br&gt;
At the end, you export each new component you created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Hello () {
 return &amp;lt;h1&amp;gt;Hello {username}!&amp;lt;/h1&amp;gt;;
}

export default Hello;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or you can instantly export it when creating the function such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default function Hello () {
 return &amp;lt;h1&amp;gt;Hello {username}!&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then you import the created component to the file you want to use it in.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Package.json&lt;/code&gt; comes with create-react-app and it defines dependencies. Dependencies are all the packages that need to be installed for it to run. For debugging, we have “scripts”, and you can add &lt;code&gt;lint:fix&lt;/code&gt; for example.  &lt;code&gt;Package-lock.json&lt;/code&gt; defines more packages. &lt;br&gt;
They both get installed when you run &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Public folder  holds your HTML file. It takes the usual HTML boilerplate and &lt;code&gt;&amp;lt;div id=“root”&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;br&gt;
We build our app, eg: &lt;code&gt;app.js&lt;/code&gt; file, in the Src folder.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#react-components%E2%80%A8" class="anchor"&gt;
  &lt;/a&gt;
  React components 
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, React is a component-based framework, which means components are created with the purpose of being reused throughout the UI.&lt;br&gt;
You can use several functions to create different reusable components. You basically pass in functions between files, so we can pass values onto different files.&lt;/p&gt;

&lt;p&gt;Components are like JavaScript functions, with a different way of executing them. Components can be created with function declarations or arrow functions.&lt;/p&gt;

&lt;p&gt;Components must be exported: &lt;code&gt;export default ‘ComponentName’  &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, we import the component to the file where we want to use it: &lt;code&gt;import ComponentName from “./components/ComponentName”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A component lives on a separate file. The module is the file that holds one of more components.&lt;/p&gt;

&lt;p&gt;A component returns a piece of JSX.   JSX, as explained earlier, is the syntax taken by React.&lt;/p&gt;

&lt;p&gt;We can have the bigger components in the main &lt;code&gt;App.js&lt;/code&gt; file and the smaller components in a components folder. But the structure is ultimately entirely up to the developer.&lt;/p&gt;

&lt;p&gt;This is a React component:&lt;br&gt;
&lt;br&gt;
 &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function MyComponent (props) {
  return ( 
    &amp;lt;&amp;gt; 
     &amp;lt;h1&amp;gt;{props.greeting}&amp;lt;/h1&amp;gt; 
    &amp;lt;/&amp;gt; 
) };
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And this is how we call a React component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;MyComponent greeting=“Hello World” /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For example, passing a variable {myVariable}:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myVariable = ‘This is a variable’
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then you call it by using &lt;code&gt;{myVariable}&lt;/code&gt; in JSX.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fragment&lt;/strong&gt;&lt;br&gt;
When you have more than one line of code to return, you wrap the content of a function inside a fragment: &lt;code&gt;&amp;lt;&amp;gt; &amp;lt;/&amp;gt;&lt;/code&gt;&lt;br&gt;
It replicates a div-like wrapper where you store the code block within your components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-props" class="anchor"&gt;
  &lt;/a&gt;
  React props
&lt;/h2&gt;

&lt;p&gt; This is the React equivalent to function parameters that are passed into functions. Best practice is to call them &lt;em&gt;props&lt;/em&gt; when writing a component.   &lt;em&gt;“You pass a prop”&lt;/em&gt;. This means you pass in the equivalent to a JavaScript argument into a component.   They are grouped together into an object by default.&lt;br&gt;
React naturally takes all the arguments and wraps them in an object. The object is called &lt;em&gt;props&lt;/em&gt; and you can access it by using dot notation, ie: props.name, props.age.&lt;/p&gt;

&lt;p&gt;Props can handle functions and values, and they can have default values (ie, you can set the default to be whatever you want it to be!).&lt;br&gt;
Props can be  destructured in components for better readability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0react-state" class="anchor"&gt;
  &lt;/a&gt;
   React state
&lt;/h2&gt;

&lt;p&gt;React State is a description of the status of the component and its features.  It's a built-in React object that is used to contain data or information about the component. A component's state can change over time; whenever it changes, the component re-renders.&lt;br&gt;
React developers usually refer to “setting state”, where you can write methods inside your component.   It basically means controlling the state of a component and resets it for each time you call it/use it.&lt;/p&gt;

&lt;p&gt;‘Value’ is a variable so it always returns a state.&lt;/p&gt;

&lt;p&gt;Since the introduction of React Hooks (in 2018) we can use &lt;code&gt;React.useState( )&lt;/code&gt;. It takes an initial value when it renders, which can also take the value of when the value is set/changed.&lt;/p&gt;




&lt;p&gt;I hope this clarifies a little more about the intricacies of React! I've collated some great free resources in the list below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://blog.glitch.com/post/react-starter-kit"&gt;Glitch: React Starter Kit&lt;/a&gt;&lt;/strong&gt; - A free, 5-part video course with interactive code examples that will help you learn React.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.codecademy.com/learn/react-101"&gt;Codecademy: React 101&lt;/a&gt;&lt;/strong&gt; - Codecademy’s introductory course for React.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://egghead.io/courses/start-learning-react"&gt;Egghead.io: Start Learning React&lt;/a&gt;&lt;/strong&gt; - This series will explore the basic fundamentals of React to get you started.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=Ke90Tje7VS0"&gt;React Crash Course 2018&lt;/a&gt;&lt;/strong&gt; - A beginner-friendly crash course through the most important React topics.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://egghead.io/courses/the-beginner-s-guide-to-react"&gt;Egghead.io: The Beginner’s Guide to ReactJS&lt;/a&gt;&lt;/strong&gt; - Free course for React newbies and those looking to get a better understanding of React fundamentals.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://ui.dev/free-react-bootcamp/"&gt;Free React Bootcamp&lt;/a&gt;&lt;/strong&gt; - Recordings from three days of a free online React bootcamp.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://scrimba.com/learn/learnreact"&gt;Scrimba: Learn React for free&lt;/a&gt;&lt;/strong&gt; - 48 hands-on video tutorials building react apps.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
